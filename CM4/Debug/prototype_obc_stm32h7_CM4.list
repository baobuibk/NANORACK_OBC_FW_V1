
prototype_obc_stm32h7_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac38  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000072c  0810aed8  0810aed8  0000bed8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810b604  0810b604  0000c604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810b60c  0810b60c  0000c60c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0810b610  0810b610  0000c610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000220  10000000  0810b614  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000420  10000220  0810b834  0000d220  2**2
                  ALLOC
  8 ._user_heap_stack 00000c00  10000640  0810b834  0000d640  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0000d220  2**0
                  CONTENTS, READONLY
 10 .debug_info   000197ef  00000000  00000000  0000d250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000042b9  00000000  00000000  00026a3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001820  00000000  00000000  0002acf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000122e  00000000  00000000  0002c518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00041383  00000000  00000000  0002d746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f329  00000000  00000000  0006eac9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00196359  00000000  00000000  0008ddf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0022414b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000076b0  00000000  00000000  00224190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000072  00000000  00000000  0022b840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000220 	.word	0x10000220
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810aec0 	.word	0x0810aec0

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000224 	.word	0x10000224
 81002dc:	0810aec0 	.word	0x0810aec0

081002e0 <strcmp>:
 81002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 81002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 81002e8:	2a01      	cmp	r2, #1
 81002ea:	bf28      	it	cs
 81002ec:	429a      	cmpcs	r2, r3
 81002ee:	d0f7      	beq.n	81002e0 <strcmp>
 81002f0:	1ad0      	subs	r0, r2, r3
 81002f2:	4770      	bx	lr
	...

08100300 <memchr>:
 8100300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8100304:	2a10      	cmp	r2, #16
 8100306:	db2b      	blt.n	8100360 <memchr+0x60>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	d008      	beq.n	8100320 <memchr+0x20>
 810030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100312:	3a01      	subs	r2, #1
 8100314:	428b      	cmp	r3, r1
 8100316:	d02d      	beq.n	8100374 <memchr+0x74>
 8100318:	f010 0f07 	tst.w	r0, #7
 810031c:	b342      	cbz	r2, 8100370 <memchr+0x70>
 810031e:	d1f6      	bne.n	810030e <memchr+0xe>
 8100320:	b4f0      	push	{r4, r5, r6, r7}
 8100322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810032a:	f022 0407 	bic.w	r4, r2, #7
 810032e:	f07f 0700 	mvns.w	r7, #0
 8100332:	2300      	movs	r3, #0
 8100334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100338:	3c08      	subs	r4, #8
 810033a:	ea85 0501 	eor.w	r5, r5, r1
 810033e:	ea86 0601 	eor.w	r6, r6, r1
 8100342:	fa85 f547 	uadd8	r5, r5, r7
 8100346:	faa3 f587 	sel	r5, r3, r7
 810034a:	fa86 f647 	uadd8	r6, r6, r7
 810034e:	faa5 f687 	sel	r6, r5, r7
 8100352:	b98e      	cbnz	r6, 8100378 <memchr+0x78>
 8100354:	d1ee      	bne.n	8100334 <memchr+0x34>
 8100356:	bcf0      	pop	{r4, r5, r6, r7}
 8100358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 810035c:	f002 0207 	and.w	r2, r2, #7
 8100360:	b132      	cbz	r2, 8100370 <memchr+0x70>
 8100362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100366:	3a01      	subs	r2, #1
 8100368:	ea83 0301 	eor.w	r3, r3, r1
 810036c:	b113      	cbz	r3, 8100374 <memchr+0x74>
 810036e:	d1f8      	bne.n	8100362 <memchr+0x62>
 8100370:	2000      	movs	r0, #0
 8100372:	4770      	bx	lr
 8100374:	3801      	subs	r0, #1
 8100376:	4770      	bx	lr
 8100378:	2d00      	cmp	r5, #0
 810037a:	bf06      	itte	eq
 810037c:	4635      	moveq	r5, r6
 810037e:	3803      	subeq	r0, #3
 8100380:	3807      	subne	r0, #7
 8100382:	f015 0f01 	tst.w	r5, #1
 8100386:	d107      	bne.n	8100398 <memchr+0x98>
 8100388:	3001      	adds	r0, #1
 810038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 810038e:	bf02      	ittt	eq
 8100390:	3001      	addeq	r0, #1
 8100392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8100396:	3001      	addeq	r0, #1
 8100398:	bcf0      	pop	{r4, r5, r6, r7}
 810039a:	3801      	subs	r0, #1
 810039c:	4770      	bx	lr
 810039e:	bf00      	nop

081003a0 <strlen>:
 81003a0:	4603      	mov	r3, r0
 81003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81003a6:	2a00      	cmp	r2, #0
 81003a8:	d1fb      	bne.n	81003a2 <strlen+0x2>
 81003aa:	1a18      	subs	r0, r3, r0
 81003ac:	3801      	subs	r0, #1
 81003ae:	4770      	bx	lr

081003b0 <__aeabi_drsub>:
 81003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 81003b4:	e002      	b.n	81003bc <__adddf3>
 81003b6:	bf00      	nop

081003b8 <__aeabi_dsub>:
 81003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

081003bc <__adddf3>:
 81003bc:	b530      	push	{r4, r5, lr}
 81003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003c6:	ea94 0f05 	teq	r4, r5
 81003ca:	bf08      	it	eq
 81003cc:	ea90 0f02 	teqeq	r0, r2
 81003d0:	bf1f      	itttt	ne
 81003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003e2:	f000 80e2 	beq.w	81005aa <__adddf3+0x1ee>
 81003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ee:	bfb8      	it	lt
 81003f0:	426d      	neglt	r5, r5
 81003f2:	dd0c      	ble.n	810040e <__adddf3+0x52>
 81003f4:	442c      	add	r4, r5
 81003f6:	ea80 0202 	eor.w	r2, r0, r2
 81003fa:	ea81 0303 	eor.w	r3, r1, r3
 81003fe:	ea82 0000 	eor.w	r0, r2, r0
 8100402:	ea83 0101 	eor.w	r1, r3, r1
 8100406:	ea80 0202 	eor.w	r2, r0, r2
 810040a:	ea81 0303 	eor.w	r3, r1, r3
 810040e:	2d36      	cmp	r5, #54	@ 0x36
 8100410:	bf88      	it	hi
 8100412:	bd30      	pophi	{r4, r5, pc}
 8100414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8100418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8100420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100424:	d002      	beq.n	810042c <__adddf3+0x70>
 8100426:	4240      	negs	r0, r0
 8100428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8100430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100438:	d002      	beq.n	8100440 <__adddf3+0x84>
 810043a:	4252      	negs	r2, r2
 810043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100440:	ea94 0f05 	teq	r4, r5
 8100444:	f000 80a7 	beq.w	8100596 <__adddf3+0x1da>
 8100448:	f1a4 0401 	sub.w	r4, r4, #1
 810044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100450:	db0d      	blt.n	810046e <__adddf3+0xb2>
 8100452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100456:	fa22 f205 	lsr.w	r2, r2, r5
 810045a:	1880      	adds	r0, r0, r2
 810045c:	f141 0100 	adc.w	r1, r1, #0
 8100460:	fa03 f20e 	lsl.w	r2, r3, lr
 8100464:	1880      	adds	r0, r0, r2
 8100466:	fa43 f305 	asr.w	r3, r3, r5
 810046a:	4159      	adcs	r1, r3
 810046c:	e00e      	b.n	810048c <__adddf3+0xd0>
 810046e:	f1a5 0520 	sub.w	r5, r5, #32
 8100472:	f10e 0e20 	add.w	lr, lr, #32
 8100476:	2a01      	cmp	r2, #1
 8100478:	fa03 fc0e 	lsl.w	ip, r3, lr
 810047c:	bf28      	it	cs
 810047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100482:	fa43 f305 	asr.w	r3, r3, r5
 8100486:	18c0      	adds	r0, r0, r3
 8100488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100490:	d507      	bpl.n	81004a2 <__adddf3+0xe6>
 8100492:	f04f 0e00 	mov.w	lr, #0
 8100496:	f1dc 0c00 	rsbs	ip, ip, #0
 810049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810049e:	eb6e 0101 	sbc.w	r1, lr, r1
 81004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 81004a6:	d31b      	bcc.n	81004e0 <__adddf3+0x124>
 81004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 81004ac:	d30c      	bcc.n	81004c8 <__adddf3+0x10c>
 81004ae:	0849      	lsrs	r1, r1, #1
 81004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 81004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 81004b8:	f104 0401 	add.w	r4, r4, #1
 81004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 81004c4:	f080 809a 	bcs.w	81005fc <__adddf3+0x240>
 81004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 81004cc:	bf08      	it	eq
 81004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004d2:	f150 0000 	adcs.w	r0, r0, #0
 81004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004da:	ea41 0105 	orr.w	r1, r1, r5
 81004de:	bd30      	pop	{r4, r5, pc}
 81004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004e4:	4140      	adcs	r0, r0
 81004e6:	eb41 0101 	adc.w	r1, r1, r1
 81004ea:	3c01      	subs	r4, #1
 81004ec:	bf28      	it	cs
 81004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 81004f2:	d2e9      	bcs.n	81004c8 <__adddf3+0x10c>
 81004f4:	f091 0f00 	teq	r1, #0
 81004f8:	bf04      	itt	eq
 81004fa:	4601      	moveq	r1, r0
 81004fc:	2000      	moveq	r0, #0
 81004fe:	fab1 f381 	clz	r3, r1
 8100502:	bf08      	it	eq
 8100504:	3320      	addeq	r3, #32
 8100506:	f1a3 030b 	sub.w	r3, r3, #11
 810050a:	f1b3 0220 	subs.w	r2, r3, #32
 810050e:	da0c      	bge.n	810052a <__adddf3+0x16e>
 8100510:	320c      	adds	r2, #12
 8100512:	dd08      	ble.n	8100526 <__adddf3+0x16a>
 8100514:	f102 0c14 	add.w	ip, r2, #20
 8100518:	f1c2 020c 	rsb	r2, r2, #12
 810051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8100520:	fa21 f102 	lsr.w	r1, r1, r2
 8100524:	e00c      	b.n	8100540 <__adddf3+0x184>
 8100526:	f102 0214 	add.w	r2, r2, #20
 810052a:	bfd8      	it	le
 810052c:	f1c2 0c20 	rsble	ip, r2, #32
 8100530:	fa01 f102 	lsl.w	r1, r1, r2
 8100534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100538:	bfdc      	itt	le
 810053a:	ea41 010c 	orrle.w	r1, r1, ip
 810053e:	4090      	lslle	r0, r2
 8100540:	1ae4      	subs	r4, r4, r3
 8100542:	bfa2      	ittt	ge
 8100544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100548:	4329      	orrge	r1, r5
 810054a:	bd30      	popge	{r4, r5, pc}
 810054c:	ea6f 0404 	mvn.w	r4, r4
 8100550:	3c1f      	subs	r4, #31
 8100552:	da1c      	bge.n	810058e <__adddf3+0x1d2>
 8100554:	340c      	adds	r4, #12
 8100556:	dc0e      	bgt.n	8100576 <__adddf3+0x1ba>
 8100558:	f104 0414 	add.w	r4, r4, #20
 810055c:	f1c4 0220 	rsb	r2, r4, #32
 8100560:	fa20 f004 	lsr.w	r0, r0, r4
 8100564:	fa01 f302 	lsl.w	r3, r1, r2
 8100568:	ea40 0003 	orr.w	r0, r0, r3
 810056c:	fa21 f304 	lsr.w	r3, r1, r4
 8100570:	ea45 0103 	orr.w	r1, r5, r3
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f1c4 040c 	rsb	r4, r4, #12
 810057a:	f1c4 0220 	rsb	r2, r4, #32
 810057e:	fa20 f002 	lsr.w	r0, r0, r2
 8100582:	fa01 f304 	lsl.w	r3, r1, r4
 8100586:	ea40 0003 	orr.w	r0, r0, r3
 810058a:	4629      	mov	r1, r5
 810058c:	bd30      	pop	{r4, r5, pc}
 810058e:	fa21 f004 	lsr.w	r0, r1, r4
 8100592:	4629      	mov	r1, r5
 8100594:	bd30      	pop	{r4, r5, pc}
 8100596:	f094 0f00 	teq	r4, #0
 810059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 810059e:	bf06      	itte	eq
 81005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 81005a4:	3401      	addeq	r4, #1
 81005a6:	3d01      	subne	r5, #1
 81005a8:	e74e      	b.n	8100448 <__adddf3+0x8c>
 81005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ae:	bf18      	it	ne
 81005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81005b4:	d029      	beq.n	810060a <__adddf3+0x24e>
 81005b6:	ea94 0f05 	teq	r4, r5
 81005ba:	bf08      	it	eq
 81005bc:	ea90 0f02 	teqeq	r0, r2
 81005c0:	d005      	beq.n	81005ce <__adddf3+0x212>
 81005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005c6:	bf04      	itt	eq
 81005c8:	4619      	moveq	r1, r3
 81005ca:	4610      	moveq	r0, r2
 81005cc:	bd30      	pop	{r4, r5, pc}
 81005ce:	ea91 0f03 	teq	r1, r3
 81005d2:	bf1e      	ittt	ne
 81005d4:	2100      	movne	r1, #0
 81005d6:	2000      	movne	r0, #0
 81005d8:	bd30      	popne	{r4, r5, pc}
 81005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005de:	d105      	bne.n	81005ec <__adddf3+0x230>
 81005e0:	0040      	lsls	r0, r0, #1
 81005e2:	4149      	adcs	r1, r1
 81005e4:	bf28      	it	cs
 81005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 81005ea:	bd30      	pop	{r4, r5, pc}
 81005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 81005f0:	bf3c      	itt	cc
 81005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 81005f6:	bd30      	popcc	{r4, r5, pc}
 81005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 81005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8100600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8100604:	f04f 0000 	mov.w	r0, #0
 8100608:	bd30      	pop	{r4, r5, pc}
 810060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810060e:	bf1a      	itte	ne
 8100610:	4619      	movne	r1, r3
 8100612:	4610      	movne	r0, r2
 8100614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8100618:	bf1c      	itt	ne
 810061a:	460b      	movne	r3, r1
 810061c:	4602      	movne	r2, r0
 810061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100622:	bf06      	itte	eq
 8100624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100628:	ea91 0f03 	teqeq	r1, r3
 810062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8100630:	bd30      	pop	{r4, r5, pc}
 8100632:	bf00      	nop

08100634 <__aeabi_ui2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100648:	f04f 0500 	mov.w	r5, #0
 810064c:	f04f 0100 	mov.w	r1, #0
 8100650:	e750      	b.n	81004f4 <__adddf3+0x138>
 8100652:	bf00      	nop

08100654 <__aeabi_i2d>:
 8100654:	f090 0f00 	teq	r0, #0
 8100658:	bf04      	itt	eq
 810065a:	2100      	moveq	r1, #0
 810065c:	4770      	bxeq	lr
 810065e:	b530      	push	{r4, r5, lr}
 8100660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 810066c:	bf48      	it	mi
 810066e:	4240      	negmi	r0, r0
 8100670:	f04f 0100 	mov.w	r1, #0
 8100674:	e73e      	b.n	81004f4 <__adddf3+0x138>
 8100676:	bf00      	nop

08100678 <__aeabi_f2d>:
 8100678:	0042      	lsls	r2, r0, #1
 810067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100686:	bf1f      	itttt	ne
 8100688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 810068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8100690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8100694:	4770      	bxne	lr
 8100696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 810069a:	bf08      	it	eq
 810069c:	4770      	bxeq	lr
 810069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 81006a2:	bf04      	itt	eq
 81006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 81006a8:	4770      	bxeq	lr
 81006aa:	b530      	push	{r4, r5, lr}
 81006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 81006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 81006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 81006b8:	e71c      	b.n	81004f4 <__adddf3+0x138>
 81006ba:	bf00      	nop

081006bc <__aeabi_ul2d>:
 81006bc:	ea50 0201 	orrs.w	r2, r0, r1
 81006c0:	bf08      	it	eq
 81006c2:	4770      	bxeq	lr
 81006c4:	b530      	push	{r4, r5, lr}
 81006c6:	f04f 0500 	mov.w	r5, #0
 81006ca:	e00a      	b.n	81006e2 <__aeabi_l2d+0x16>

081006cc <__aeabi_l2d>:
 81006cc:	ea50 0201 	orrs.w	r2, r0, r1
 81006d0:	bf08      	it	eq
 81006d2:	4770      	bxeq	lr
 81006d4:	b530      	push	{r4, r5, lr}
 81006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 81006da:	d502      	bpl.n	81006e2 <__aeabi_l2d+0x16>
 81006dc:	4240      	negs	r0, r0
 81006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 81006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 81006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ee:	f43f aed8 	beq.w	81004a2 <__adddf3+0xe6>
 81006f2:	f04f 0203 	mov.w	r2, #3
 81006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006fa:	bf18      	it	ne
 81006fc:	3203      	addne	r2, #3
 81006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8100702:	bf18      	it	ne
 8100704:	3203      	addne	r2, #3
 8100706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 810070a:	f1c2 0320 	rsb	r3, r2, #32
 810070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8100712:	fa20 f002 	lsr.w	r0, r0, r2
 8100716:	fa01 fe03 	lsl.w	lr, r1, r3
 810071a:	ea40 000e 	orr.w	r0, r0, lr
 810071e:	fa21 f102 	lsr.w	r1, r1, r2
 8100722:	4414      	add	r4, r2
 8100724:	e6bd      	b.n	81004a2 <__adddf3+0xe6>
 8100726:	bf00      	nop

08100728 <__aeabi_dmul>:
 8100728:	b570      	push	{r4, r5, r6, lr}
 810072a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 810072e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100736:	bf1d      	ittte	ne
 8100738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810073c:	ea94 0f0c 	teqne	r4, ip
 8100740:	ea95 0f0c 	teqne	r5, ip
 8100744:	f000 f8de 	bleq	8100904 <__aeabi_dmul+0x1dc>
 8100748:	442c      	add	r4, r5
 810074a:	ea81 0603 	eor.w	r6, r1, r3
 810074e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100752:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100756:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810075a:	bf18      	it	ne
 810075c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100760:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100764:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8100768:	d038      	beq.n	81007dc <__aeabi_dmul+0xb4>
 810076a:	fba0 ce02 	umull	ip, lr, r0, r2
 810076e:	f04f 0500 	mov.w	r5, #0
 8100772:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100776:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 810077a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810077e:	f04f 0600 	mov.w	r6, #0
 8100782:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100786:	f09c 0f00 	teq	ip, #0
 810078a:	bf18      	it	ne
 810078c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100790:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8100794:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8100798:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 810079c:	d204      	bcs.n	81007a8 <__aeabi_dmul+0x80>
 810079e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 81007a2:	416d      	adcs	r5, r5
 81007a4:	eb46 0606 	adc.w	r6, r6, r6
 81007a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 81007ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 81007b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 81007b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 81007b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 81007bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 81007c0:	bf88      	it	hi
 81007c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 81007c6:	d81e      	bhi.n	8100806 <__aeabi_dmul+0xde>
 81007c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 81007cc:	bf08      	it	eq
 81007ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007d2:	f150 0000 	adcs.w	r0, r0, #0
 81007d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007da:	bd70      	pop	{r4, r5, r6, pc}
 81007dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 81007e0:	ea46 0101 	orr.w	r1, r6, r1
 81007e4:	ea40 0002 	orr.w	r0, r0, r2
 81007e8:	ea81 0103 	eor.w	r1, r1, r3
 81007ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007f0:	bfc2      	ittt	gt
 81007f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007fa:	bd70      	popgt	{r4, r5, r6, pc}
 81007fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100800:	f04f 0e00 	mov.w	lr, #0
 8100804:	3c01      	subs	r4, #1
 8100806:	f300 80ab 	bgt.w	8100960 <__aeabi_dmul+0x238>
 810080a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 810080e:	bfde      	ittt	le
 8100810:	2000      	movle	r0, #0
 8100812:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8100816:	bd70      	pople	{r4, r5, r6, pc}
 8100818:	f1c4 0400 	rsb	r4, r4, #0
 810081c:	3c20      	subs	r4, #32
 810081e:	da35      	bge.n	810088c <__aeabi_dmul+0x164>
 8100820:	340c      	adds	r4, #12
 8100822:	dc1b      	bgt.n	810085c <__aeabi_dmul+0x134>
 8100824:	f104 0414 	add.w	r4, r4, #20
 8100828:	f1c4 0520 	rsb	r5, r4, #32
 810082c:	fa00 f305 	lsl.w	r3, r0, r5
 8100830:	fa20 f004 	lsr.w	r0, r0, r4
 8100834:	fa01 f205 	lsl.w	r2, r1, r5
 8100838:	ea40 0002 	orr.w	r0, r0, r2
 810083c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8100840:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100844:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100848:	fa21 f604 	lsr.w	r6, r1, r4
 810084c:	eb42 0106 	adc.w	r1, r2, r6
 8100850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100854:	bf08      	it	eq
 8100856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810085a:	bd70      	pop	{r4, r5, r6, pc}
 810085c:	f1c4 040c 	rsb	r4, r4, #12
 8100860:	f1c4 0520 	rsb	r5, r4, #32
 8100864:	fa00 f304 	lsl.w	r3, r0, r4
 8100868:	fa20 f005 	lsr.w	r0, r0, r5
 810086c:	fa01 f204 	lsl.w	r2, r1, r4
 8100870:	ea40 0002 	orr.w	r0, r0, r2
 8100874:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100878:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810087c:	f141 0100 	adc.w	r1, r1, #0
 8100880:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100884:	bf08      	it	eq
 8100886:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810088a:	bd70      	pop	{r4, r5, r6, pc}
 810088c:	f1c4 0520 	rsb	r5, r4, #32
 8100890:	fa00 f205 	lsl.w	r2, r0, r5
 8100894:	ea4e 0e02 	orr.w	lr, lr, r2
 8100898:	fa20 f304 	lsr.w	r3, r0, r4
 810089c:	fa01 f205 	lsl.w	r2, r1, r5
 81008a0:	ea43 0302 	orr.w	r3, r3, r2
 81008a4:	fa21 f004 	lsr.w	r0, r1, r4
 81008a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 81008ac:	fa21 f204 	lsr.w	r2, r1, r4
 81008b0:	ea20 0002 	bic.w	r0, r0, r2
 81008b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 81008b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81008bc:	bf08      	it	eq
 81008be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008c2:	bd70      	pop	{r4, r5, r6, pc}
 81008c4:	f094 0f00 	teq	r4, #0
 81008c8:	d10f      	bne.n	81008ea <__aeabi_dmul+0x1c2>
 81008ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 81008ce:	0040      	lsls	r0, r0, #1
 81008d0:	eb41 0101 	adc.w	r1, r1, r1
 81008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3c01      	subeq	r4, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1a6>
 81008de:	ea41 0106 	orr.w	r1, r1, r6
 81008e2:	f095 0f00 	teq	r5, #0
 81008e6:	bf18      	it	ne
 81008e8:	4770      	bxne	lr
 81008ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 81008ee:	0052      	lsls	r2, r2, #1
 81008f0:	eb43 0303 	adc.w	r3, r3, r3
 81008f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 81008f8:	bf08      	it	eq
 81008fa:	3d01      	subeq	r5, #1
 81008fc:	d0f7      	beq.n	81008ee <__aeabi_dmul+0x1c6>
 81008fe:	ea43 0306 	orr.w	r3, r3, r6
 8100902:	4770      	bx	lr
 8100904:	ea94 0f0c 	teq	r4, ip
 8100908:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 810090c:	bf18      	it	ne
 810090e:	ea95 0f0c 	teqne	r5, ip
 8100912:	d00c      	beq.n	810092e <__aeabi_dmul+0x206>
 8100914:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100918:	bf18      	it	ne
 810091a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091e:	d1d1      	bne.n	81008c4 <__aeabi_dmul+0x19c>
 8100920:	ea81 0103 	eor.w	r1, r1, r3
 8100924:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100928:	f04f 0000 	mov.w	r0, #0
 810092c:	bd70      	pop	{r4, r5, r6, pc}
 810092e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100932:	bf06      	itte	eq
 8100934:	4610      	moveq	r0, r2
 8100936:	4619      	moveq	r1, r3
 8100938:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810093c:	d019      	beq.n	8100972 <__aeabi_dmul+0x24a>
 810093e:	ea94 0f0c 	teq	r4, ip
 8100942:	d102      	bne.n	810094a <__aeabi_dmul+0x222>
 8100944:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100948:	d113      	bne.n	8100972 <__aeabi_dmul+0x24a>
 810094a:	ea95 0f0c 	teq	r5, ip
 810094e:	d105      	bne.n	810095c <__aeabi_dmul+0x234>
 8100950:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100954:	bf1c      	itt	ne
 8100956:	4610      	movne	r0, r2
 8100958:	4619      	movne	r1, r3
 810095a:	d10a      	bne.n	8100972 <__aeabi_dmul+0x24a>
 810095c:	ea81 0103 	eor.w	r1, r1, r3
 8100960:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100964:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100968:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 810096c:	f04f 0000 	mov.w	r0, #0
 8100970:	bd70      	pop	{r4, r5, r6, pc}
 8100972:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100976:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 810097a:	bd70      	pop	{r4, r5, r6, pc}

0810097c <__aeabi_ddiv>:
 810097c:	b570      	push	{r4, r5, r6, lr}
 810097e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8100982:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100986:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810098a:	bf1d      	ittte	ne
 810098c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100990:	ea94 0f0c 	teqne	r4, ip
 8100994:	ea95 0f0c 	teqne	r5, ip
 8100998:	f000 f8a7 	bleq	8100aea <__aeabi_ddiv+0x16e>
 810099c:	eba4 0405 	sub.w	r4, r4, r5
 81009a0:	ea81 0e03 	eor.w	lr, r1, r3
 81009a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 81009a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81009ac:	f000 8088 	beq.w	8100ac0 <__aeabi_ddiv+0x144>
 81009b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 81009b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 81009b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 81009bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 81009d4:	429d      	cmp	r5, r3
 81009d6:	bf08      	it	eq
 81009d8:	4296      	cmpeq	r6, r2
 81009da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 81009de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 81009e2:	d202      	bcs.n	81009ea <__aeabi_ddiv+0x6e>
 81009e4:	085b      	lsrs	r3, r3, #1
 81009e6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ea:	1ab6      	subs	r6, r6, r2
 81009ec:	eb65 0503 	sbc.w	r5, r5, r3
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 81009fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 81009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a06:	bf22      	ittt	cs
 8100a08:	1ab6      	subcs	r6, r6, r2
 8100a0a:	4675      	movcs	r5, lr
 8100a0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8100a10:	085b      	lsrs	r3, r3, #1
 8100a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a1e:	bf22      	ittt	cs
 8100a20:	1ab6      	subcs	r6, r6, r2
 8100a22:	4675      	movcs	r5, lr
 8100a24:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a28:	085b      	lsrs	r3, r3, #1
 8100a2a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a2e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a32:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a36:	bf22      	ittt	cs
 8100a38:	1ab6      	subcs	r6, r6, r2
 8100a3a:	4675      	movcs	r5, lr
 8100a3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a40:	085b      	lsrs	r3, r3, #1
 8100a42:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a46:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a4e:	bf22      	ittt	cs
 8100a50:	1ab6      	subcs	r6, r6, r2
 8100a52:	4675      	movcs	r5, lr
 8100a54:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a58:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a5c:	d018      	beq.n	8100a90 <__aeabi_ddiv+0x114>
 8100a5e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a62:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a66:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a6a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a6e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a72:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a76:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a7a:	d1c0      	bne.n	81009fe <__aeabi_ddiv+0x82>
 8100a7c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a80:	d10b      	bne.n	8100a9a <__aeabi_ddiv+0x11e>
 8100a82:	ea41 0100 	orr.w	r1, r1, r0
 8100a86:	f04f 0000 	mov.w	r0, #0
 8100a8a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8100a8e:	e7b6      	b.n	81009fe <__aeabi_ddiv+0x82>
 8100a90:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a94:	bf04      	itt	eq
 8100a96:	4301      	orreq	r1, r0
 8100a98:	2000      	moveq	r0, #0
 8100a9a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8100a9e:	bf88      	it	hi
 8100aa0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8100aa4:	f63f aeaf 	bhi.w	8100806 <__aeabi_dmul+0xde>
 8100aa8:	ebb5 0c03 	subs.w	ip, r5, r3
 8100aac:	bf04      	itt	eq
 8100aae:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100ab2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100ab6:	f150 0000 	adcs.w	r0, r0, #0
 8100aba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100abe:	bd70      	pop	{r4, r5, r6, pc}
 8100ac0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8100ac4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100ac8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100acc:	bfc2      	ittt	gt
 8100ace:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ad2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ad6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ad8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100adc:	f04f 0e00 	mov.w	lr, #0
 8100ae0:	3c01      	subs	r4, #1
 8100ae2:	e690      	b.n	8100806 <__aeabi_dmul+0xde>
 8100ae4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ae8:	e68d      	b.n	8100806 <__aeabi_dmul+0xde>
 8100aea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100aee:	ea94 0f0c 	teq	r4, ip
 8100af2:	bf08      	it	eq
 8100af4:	ea95 0f0c 	teqeq	r5, ip
 8100af8:	f43f af3b 	beq.w	8100972 <__aeabi_dmul+0x24a>
 8100afc:	ea94 0f0c 	teq	r4, ip
 8100b00:	d10a      	bne.n	8100b18 <__aeabi_ddiv+0x19c>
 8100b02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100b06:	f47f af34 	bne.w	8100972 <__aeabi_dmul+0x24a>
 8100b0a:	ea95 0f0c 	teq	r5, ip
 8100b0e:	f47f af25 	bne.w	810095c <__aeabi_dmul+0x234>
 8100b12:	4610      	mov	r0, r2
 8100b14:	4619      	mov	r1, r3
 8100b16:	e72c      	b.n	8100972 <__aeabi_dmul+0x24a>
 8100b18:	ea95 0f0c 	teq	r5, ip
 8100b1c:	d106      	bne.n	8100b2c <__aeabi_ddiv+0x1b0>
 8100b1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b22:	f43f aefd 	beq.w	8100920 <__aeabi_dmul+0x1f8>
 8100b26:	4610      	mov	r0, r2
 8100b28:	4619      	mov	r1, r3
 8100b2a:	e722      	b.n	8100972 <__aeabi_dmul+0x24a>
 8100b2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b30:	bf18      	it	ne
 8100b32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b36:	f47f aec5 	bne.w	81008c4 <__aeabi_dmul+0x19c>
 8100b3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b3e:	f47f af0d 	bne.w	810095c <__aeabi_dmul+0x234>
 8100b42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b46:	f47f aeeb 	bne.w	8100920 <__aeabi_dmul+0x1f8>
 8100b4a:	e712      	b.n	8100972 <__aeabi_dmul+0x24a>

08100b4c <__gedf2>:
 8100b4c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b50:	e006      	b.n	8100b60 <__cmpdf2+0x4>
 8100b52:	bf00      	nop

08100b54 <__ledf2>:
 8100b54:	f04f 0c01 	mov.w	ip, #1
 8100b58:	e002      	b.n	8100b60 <__cmpdf2+0x4>
 8100b5a:	bf00      	nop

08100b5c <__cmpdf2>:
 8100b5c:	f04f 0c01 	mov.w	ip, #1
 8100b60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b70:	bf18      	it	ne
 8100b72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b76:	d01b      	beq.n	8100bb0 <__cmpdf2+0x54>
 8100b78:	b001      	add	sp, #4
 8100b7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b7e:	bf0c      	ite	eq
 8100b80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b84:	ea91 0f03 	teqne	r1, r3
 8100b88:	bf02      	ittt	eq
 8100b8a:	ea90 0f02 	teqeq	r0, r2
 8100b8e:	2000      	moveq	r0, #0
 8100b90:	4770      	bxeq	lr
 8100b92:	f110 0f00 	cmn.w	r0, #0
 8100b96:	ea91 0f03 	teq	r1, r3
 8100b9a:	bf58      	it	pl
 8100b9c:	4299      	cmppl	r1, r3
 8100b9e:	bf08      	it	eq
 8100ba0:	4290      	cmpeq	r0, r2
 8100ba2:	bf2c      	ite	cs
 8100ba4:	17d8      	asrcs	r0, r3, #31
 8100ba6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100baa:	f040 0001 	orr.w	r0, r0, #1
 8100bae:	4770      	bx	lr
 8100bb0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100bb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100bb8:	d102      	bne.n	8100bc0 <__cmpdf2+0x64>
 8100bba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100bbe:	d107      	bne.n	8100bd0 <__cmpdf2+0x74>
 8100bc0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100bc4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100bc8:	d1d6      	bne.n	8100b78 <__cmpdf2+0x1c>
 8100bca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bce:	d0d3      	beq.n	8100b78 <__cmpdf2+0x1c>
 8100bd0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bd4:	4770      	bx	lr
 8100bd6:	bf00      	nop

08100bd8 <__aeabi_cdrcmple>:
 8100bd8:	4684      	mov	ip, r0
 8100bda:	4610      	mov	r0, r2
 8100bdc:	4662      	mov	r2, ip
 8100bde:	468c      	mov	ip, r1
 8100be0:	4619      	mov	r1, r3
 8100be2:	4663      	mov	r3, ip
 8100be4:	e000      	b.n	8100be8 <__aeabi_cdcmpeq>
 8100be6:	bf00      	nop

08100be8 <__aeabi_cdcmpeq>:
 8100be8:	b501      	push	{r0, lr}
 8100bea:	f7ff ffb7 	bl	8100b5c <__cmpdf2>
 8100bee:	2800      	cmp	r0, #0
 8100bf0:	bf48      	it	mi
 8100bf2:	f110 0f00 	cmnmi.w	r0, #0
 8100bf6:	bd01      	pop	{r0, pc}

08100bf8 <__aeabi_dcmpeq>:
 8100bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bfc:	f7ff fff4 	bl	8100be8 <__aeabi_cdcmpeq>
 8100c00:	bf0c      	ite	eq
 8100c02:	2001      	moveq	r0, #1
 8100c04:	2000      	movne	r0, #0
 8100c06:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c0a:	bf00      	nop

08100c0c <__aeabi_dcmplt>:
 8100c0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c10:	f7ff ffea 	bl	8100be8 <__aeabi_cdcmpeq>
 8100c14:	bf34      	ite	cc
 8100c16:	2001      	movcc	r0, #1
 8100c18:	2000      	movcs	r0, #0
 8100c1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c1e:	bf00      	nop

08100c20 <__aeabi_dcmple>:
 8100c20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c24:	f7ff ffe0 	bl	8100be8 <__aeabi_cdcmpeq>
 8100c28:	bf94      	ite	ls
 8100c2a:	2001      	movls	r0, #1
 8100c2c:	2000      	movhi	r0, #0
 8100c2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c32:	bf00      	nop

08100c34 <__aeabi_dcmpge>:
 8100c34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c38:	f7ff ffce 	bl	8100bd8 <__aeabi_cdrcmple>
 8100c3c:	bf94      	ite	ls
 8100c3e:	2001      	movls	r0, #1
 8100c40:	2000      	movhi	r0, #0
 8100c42:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c46:	bf00      	nop

08100c48 <__aeabi_dcmpgt>:
 8100c48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c4c:	f7ff ffc4 	bl	8100bd8 <__aeabi_cdrcmple>
 8100c50:	bf34      	ite	cc
 8100c52:	2001      	movcc	r0, #1
 8100c54:	2000      	movcs	r0, #0
 8100c56:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c5a:	bf00      	nop

08100c5c <__aeabi_dcmpun>:
 8100c5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c64:	d102      	bne.n	8100c6c <__aeabi_dcmpun+0x10>
 8100c66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c6a:	d10a      	bne.n	8100c82 <__aeabi_dcmpun+0x26>
 8100c6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c74:	d102      	bne.n	8100c7c <__aeabi_dcmpun+0x20>
 8100c76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c7a:	d102      	bne.n	8100c82 <__aeabi_dcmpun+0x26>
 8100c7c:	f04f 0000 	mov.w	r0, #0
 8100c80:	4770      	bx	lr
 8100c82:	f04f 0001 	mov.w	r0, #1
 8100c86:	4770      	bx	lr

08100c88 <__aeabi_d2iz>:
 8100c88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8100c90:	d215      	bcs.n	8100cbe <__aeabi_d2iz+0x36>
 8100c92:	d511      	bpl.n	8100cb8 <__aeabi_d2iz+0x30>
 8100c94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8100c98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c9c:	d912      	bls.n	8100cc4 <__aeabi_d2iz+0x3c>
 8100c9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100ca2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8100ca6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100caa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8100cae:	fa23 f002 	lsr.w	r0, r3, r2
 8100cb2:	bf18      	it	ne
 8100cb4:	4240      	negne	r0, r0
 8100cb6:	4770      	bx	lr
 8100cb8:	f04f 0000 	mov.w	r0, #0
 8100cbc:	4770      	bx	lr
 8100cbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cc2:	d105      	bne.n	8100cd0 <__aeabi_d2iz+0x48>
 8100cc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8100cc8:	bf08      	it	eq
 8100cca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8100cce:	4770      	bx	lr
 8100cd0:	f04f 0000 	mov.w	r0, #0
 8100cd4:	4770      	bx	lr
 8100cd6:	bf00      	nop

08100cd8 <__aeabi_d2f>:
 8100cd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8100ce0:	bf24      	itt	cs
 8100ce2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8100ce6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8100cea:	d90d      	bls.n	8100d08 <__aeabi_d2f+0x30>
 8100cec:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8100cf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100cf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100cf8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8100cfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d00:	bf08      	it	eq
 8100d02:	f020 0001 	biceq.w	r0, r0, #1
 8100d06:	4770      	bx	lr
 8100d08:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8100d0c:	d121      	bne.n	8100d52 <__aeabi_d2f+0x7a>
 8100d0e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8100d12:	bfbc      	itt	lt
 8100d14:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8100d18:	4770      	bxlt	lr
 8100d1a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100d1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d22:	f1c2 0218 	rsb	r2, r2, #24
 8100d26:	f1c2 0c20 	rsb	ip, r2, #32
 8100d2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d2e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d32:	bf18      	it	ne
 8100d34:	f040 0001 	orrne.w	r0, r0, #1
 8100d38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d44:	ea40 000c 	orr.w	r0, r0, ip
 8100d48:	fa23 f302 	lsr.w	r3, r3, r2
 8100d4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d50:	e7cc      	b.n	8100cec <__aeabi_d2f+0x14>
 8100d52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d56:	d107      	bne.n	8100d68 <__aeabi_d2f+0x90>
 8100d58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d5c:	bf1e      	ittt	ne
 8100d5e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8100d62:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8100d66:	4770      	bxne	lr
 8100d68:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8100d6c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8100d70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8100d74:	4770      	bx	lr
 8100d76:	bf00      	nop

08100d78 <__aeabi_uldivmod>:
 8100d78:	b953      	cbnz	r3, 8100d90 <__aeabi_uldivmod+0x18>
 8100d7a:	b94a      	cbnz	r2, 8100d90 <__aeabi_uldivmod+0x18>
 8100d7c:	2900      	cmp	r1, #0
 8100d7e:	bf08      	it	eq
 8100d80:	2800      	cmpeq	r0, #0
 8100d82:	bf1c      	itt	ne
 8100d84:	f04f 31ff 	movne.w	r1, #4294967295
 8100d88:	f04f 30ff 	movne.w	r0, #4294967295
 8100d8c:	f000 b96a 	b.w	8101064 <__aeabi_idiv0>
 8100d90:	f1ad 0c08 	sub.w	ip, sp, #8
 8100d94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100d98:	f000 f806 	bl	8100da8 <__udivmoddi4>
 8100d9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100da0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100da4:	b004      	add	sp, #16
 8100da6:	4770      	bx	lr

08100da8 <__udivmoddi4>:
 8100da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100dac:	9d08      	ldr	r5, [sp, #32]
 8100dae:	460c      	mov	r4, r1
 8100db0:	2b00      	cmp	r3, #0
 8100db2:	d14e      	bne.n	8100e52 <__udivmoddi4+0xaa>
 8100db4:	4694      	mov	ip, r2
 8100db6:	458c      	cmp	ip, r1
 8100db8:	4686      	mov	lr, r0
 8100dba:	fab2 f282 	clz	r2, r2
 8100dbe:	d962      	bls.n	8100e86 <__udivmoddi4+0xde>
 8100dc0:	b14a      	cbz	r2, 8100dd6 <__udivmoddi4+0x2e>
 8100dc2:	f1c2 0320 	rsb	r3, r2, #32
 8100dc6:	4091      	lsls	r1, r2
 8100dc8:	fa20 f303 	lsr.w	r3, r0, r3
 8100dcc:	fa0c fc02 	lsl.w	ip, ip, r2
 8100dd0:	4319      	orrs	r1, r3
 8100dd2:	fa00 fe02 	lsl.w	lr, r0, r2
 8100dd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100dda:	fa1f f68c 	uxth.w	r6, ip
 8100dde:	fbb1 f4f7 	udiv	r4, r1, r7
 8100de2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100de6:	fb07 1114 	mls	r1, r7, r4, r1
 8100dea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100dee:	fb04 f106 	mul.w	r1, r4, r6
 8100df2:	4299      	cmp	r1, r3
 8100df4:	d90a      	bls.n	8100e0c <__udivmoddi4+0x64>
 8100df6:	eb1c 0303 	adds.w	r3, ip, r3
 8100dfa:	f104 30ff 	add.w	r0, r4, #4294967295
 8100dfe:	f080 8112 	bcs.w	8101026 <__udivmoddi4+0x27e>
 8100e02:	4299      	cmp	r1, r3
 8100e04:	f240 810f 	bls.w	8101026 <__udivmoddi4+0x27e>
 8100e08:	3c02      	subs	r4, #2
 8100e0a:	4463      	add	r3, ip
 8100e0c:	1a59      	subs	r1, r3, r1
 8100e0e:	fa1f f38e 	uxth.w	r3, lr
 8100e12:	fbb1 f0f7 	udiv	r0, r1, r7
 8100e16:	fb07 1110 	mls	r1, r7, r0, r1
 8100e1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100e1e:	fb00 f606 	mul.w	r6, r0, r6
 8100e22:	429e      	cmp	r6, r3
 8100e24:	d90a      	bls.n	8100e3c <__udivmoddi4+0x94>
 8100e26:	eb1c 0303 	adds.w	r3, ip, r3
 8100e2a:	f100 31ff 	add.w	r1, r0, #4294967295
 8100e2e:	f080 80fc 	bcs.w	810102a <__udivmoddi4+0x282>
 8100e32:	429e      	cmp	r6, r3
 8100e34:	f240 80f9 	bls.w	810102a <__udivmoddi4+0x282>
 8100e38:	4463      	add	r3, ip
 8100e3a:	3802      	subs	r0, #2
 8100e3c:	1b9b      	subs	r3, r3, r6
 8100e3e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8100e42:	2100      	movs	r1, #0
 8100e44:	b11d      	cbz	r5, 8100e4e <__udivmoddi4+0xa6>
 8100e46:	40d3      	lsrs	r3, r2
 8100e48:	2200      	movs	r2, #0
 8100e4a:	e9c5 3200 	strd	r3, r2, [r5]
 8100e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100e52:	428b      	cmp	r3, r1
 8100e54:	d905      	bls.n	8100e62 <__udivmoddi4+0xba>
 8100e56:	b10d      	cbz	r5, 8100e5c <__udivmoddi4+0xb4>
 8100e58:	e9c5 0100 	strd	r0, r1, [r5]
 8100e5c:	2100      	movs	r1, #0
 8100e5e:	4608      	mov	r0, r1
 8100e60:	e7f5      	b.n	8100e4e <__udivmoddi4+0xa6>
 8100e62:	fab3 f183 	clz	r1, r3
 8100e66:	2900      	cmp	r1, #0
 8100e68:	d146      	bne.n	8100ef8 <__udivmoddi4+0x150>
 8100e6a:	42a3      	cmp	r3, r4
 8100e6c:	d302      	bcc.n	8100e74 <__udivmoddi4+0xcc>
 8100e6e:	4290      	cmp	r0, r2
 8100e70:	f0c0 80f0 	bcc.w	8101054 <__udivmoddi4+0x2ac>
 8100e74:	1a86      	subs	r6, r0, r2
 8100e76:	eb64 0303 	sbc.w	r3, r4, r3
 8100e7a:	2001      	movs	r0, #1
 8100e7c:	2d00      	cmp	r5, #0
 8100e7e:	d0e6      	beq.n	8100e4e <__udivmoddi4+0xa6>
 8100e80:	e9c5 6300 	strd	r6, r3, [r5]
 8100e84:	e7e3      	b.n	8100e4e <__udivmoddi4+0xa6>
 8100e86:	2a00      	cmp	r2, #0
 8100e88:	f040 8090 	bne.w	8100fac <__udivmoddi4+0x204>
 8100e8c:	eba1 040c 	sub.w	r4, r1, ip
 8100e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100e94:	fa1f f78c 	uxth.w	r7, ip
 8100e98:	2101      	movs	r1, #1
 8100e9a:	fbb4 f6f8 	udiv	r6, r4, r8
 8100e9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100ea2:	fb08 4416 	mls	r4, r8, r6, r4
 8100ea6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100eaa:	fb07 f006 	mul.w	r0, r7, r6
 8100eae:	4298      	cmp	r0, r3
 8100eb0:	d908      	bls.n	8100ec4 <__udivmoddi4+0x11c>
 8100eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8100eb6:	f106 34ff 	add.w	r4, r6, #4294967295
 8100eba:	d202      	bcs.n	8100ec2 <__udivmoddi4+0x11a>
 8100ebc:	4298      	cmp	r0, r3
 8100ebe:	f200 80cd 	bhi.w	810105c <__udivmoddi4+0x2b4>
 8100ec2:	4626      	mov	r6, r4
 8100ec4:	1a1c      	subs	r4, r3, r0
 8100ec6:	fa1f f38e 	uxth.w	r3, lr
 8100eca:	fbb4 f0f8 	udiv	r0, r4, r8
 8100ece:	fb08 4410 	mls	r4, r8, r0, r4
 8100ed2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100ed6:	fb00 f707 	mul.w	r7, r0, r7
 8100eda:	429f      	cmp	r7, r3
 8100edc:	d908      	bls.n	8100ef0 <__udivmoddi4+0x148>
 8100ede:	eb1c 0303 	adds.w	r3, ip, r3
 8100ee2:	f100 34ff 	add.w	r4, r0, #4294967295
 8100ee6:	d202      	bcs.n	8100eee <__udivmoddi4+0x146>
 8100ee8:	429f      	cmp	r7, r3
 8100eea:	f200 80b0 	bhi.w	810104e <__udivmoddi4+0x2a6>
 8100eee:	4620      	mov	r0, r4
 8100ef0:	1bdb      	subs	r3, r3, r7
 8100ef2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100ef6:	e7a5      	b.n	8100e44 <__udivmoddi4+0x9c>
 8100ef8:	f1c1 0620 	rsb	r6, r1, #32
 8100efc:	408b      	lsls	r3, r1
 8100efe:	fa22 f706 	lsr.w	r7, r2, r6
 8100f02:	431f      	orrs	r7, r3
 8100f04:	fa20 fc06 	lsr.w	ip, r0, r6
 8100f08:	fa04 f301 	lsl.w	r3, r4, r1
 8100f0c:	ea43 030c 	orr.w	r3, r3, ip
 8100f10:	40f4      	lsrs	r4, r6
 8100f12:	fa00 f801 	lsl.w	r8, r0, r1
 8100f16:	0c38      	lsrs	r0, r7, #16
 8100f18:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8100f1c:	fbb4 fef0 	udiv	lr, r4, r0
 8100f20:	fa1f fc87 	uxth.w	ip, r7
 8100f24:	fb00 441e 	mls	r4, r0, lr, r4
 8100f28:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100f2c:	fb0e f90c 	mul.w	r9, lr, ip
 8100f30:	45a1      	cmp	r9, r4
 8100f32:	fa02 f201 	lsl.w	r2, r2, r1
 8100f36:	d90a      	bls.n	8100f4e <__udivmoddi4+0x1a6>
 8100f38:	193c      	adds	r4, r7, r4
 8100f3a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8100f3e:	f080 8084 	bcs.w	810104a <__udivmoddi4+0x2a2>
 8100f42:	45a1      	cmp	r9, r4
 8100f44:	f240 8081 	bls.w	810104a <__udivmoddi4+0x2a2>
 8100f48:	f1ae 0e02 	sub.w	lr, lr, #2
 8100f4c:	443c      	add	r4, r7
 8100f4e:	eba4 0409 	sub.w	r4, r4, r9
 8100f52:	fa1f f983 	uxth.w	r9, r3
 8100f56:	fbb4 f3f0 	udiv	r3, r4, r0
 8100f5a:	fb00 4413 	mls	r4, r0, r3, r4
 8100f5e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100f62:	fb03 fc0c 	mul.w	ip, r3, ip
 8100f66:	45a4      	cmp	ip, r4
 8100f68:	d907      	bls.n	8100f7a <__udivmoddi4+0x1d2>
 8100f6a:	193c      	adds	r4, r7, r4
 8100f6c:	f103 30ff 	add.w	r0, r3, #4294967295
 8100f70:	d267      	bcs.n	8101042 <__udivmoddi4+0x29a>
 8100f72:	45a4      	cmp	ip, r4
 8100f74:	d965      	bls.n	8101042 <__udivmoddi4+0x29a>
 8100f76:	3b02      	subs	r3, #2
 8100f78:	443c      	add	r4, r7
 8100f7a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8100f7e:	fba0 9302 	umull	r9, r3, r0, r2
 8100f82:	eba4 040c 	sub.w	r4, r4, ip
 8100f86:	429c      	cmp	r4, r3
 8100f88:	46ce      	mov	lr, r9
 8100f8a:	469c      	mov	ip, r3
 8100f8c:	d351      	bcc.n	8101032 <__udivmoddi4+0x28a>
 8100f8e:	d04e      	beq.n	810102e <__udivmoddi4+0x286>
 8100f90:	b155      	cbz	r5, 8100fa8 <__udivmoddi4+0x200>
 8100f92:	ebb8 030e 	subs.w	r3, r8, lr
 8100f96:	eb64 040c 	sbc.w	r4, r4, ip
 8100f9a:	fa04 f606 	lsl.w	r6, r4, r6
 8100f9e:	40cb      	lsrs	r3, r1
 8100fa0:	431e      	orrs	r6, r3
 8100fa2:	40cc      	lsrs	r4, r1
 8100fa4:	e9c5 6400 	strd	r6, r4, [r5]
 8100fa8:	2100      	movs	r1, #0
 8100faa:	e750      	b.n	8100e4e <__udivmoddi4+0xa6>
 8100fac:	f1c2 0320 	rsb	r3, r2, #32
 8100fb0:	fa20 f103 	lsr.w	r1, r0, r3
 8100fb4:	fa0c fc02 	lsl.w	ip, ip, r2
 8100fb8:	fa24 f303 	lsr.w	r3, r4, r3
 8100fbc:	4094      	lsls	r4, r2
 8100fbe:	430c      	orrs	r4, r1
 8100fc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100fc4:	fa00 fe02 	lsl.w	lr, r0, r2
 8100fc8:	fa1f f78c 	uxth.w	r7, ip
 8100fcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8100fd0:	fb08 3110 	mls	r1, r8, r0, r3
 8100fd4:	0c23      	lsrs	r3, r4, #16
 8100fd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100fda:	fb00 f107 	mul.w	r1, r0, r7
 8100fde:	4299      	cmp	r1, r3
 8100fe0:	d908      	bls.n	8100ff4 <__udivmoddi4+0x24c>
 8100fe2:	eb1c 0303 	adds.w	r3, ip, r3
 8100fe6:	f100 36ff 	add.w	r6, r0, #4294967295
 8100fea:	d22c      	bcs.n	8101046 <__udivmoddi4+0x29e>
 8100fec:	4299      	cmp	r1, r3
 8100fee:	d92a      	bls.n	8101046 <__udivmoddi4+0x29e>
 8100ff0:	3802      	subs	r0, #2
 8100ff2:	4463      	add	r3, ip
 8100ff4:	1a5b      	subs	r3, r3, r1
 8100ff6:	b2a4      	uxth	r4, r4
 8100ff8:	fbb3 f1f8 	udiv	r1, r3, r8
 8100ffc:	fb08 3311 	mls	r3, r8, r1, r3
 8101000:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8101004:	fb01 f307 	mul.w	r3, r1, r7
 8101008:	42a3      	cmp	r3, r4
 810100a:	d908      	bls.n	810101e <__udivmoddi4+0x276>
 810100c:	eb1c 0404 	adds.w	r4, ip, r4
 8101010:	f101 36ff 	add.w	r6, r1, #4294967295
 8101014:	d213      	bcs.n	810103e <__udivmoddi4+0x296>
 8101016:	42a3      	cmp	r3, r4
 8101018:	d911      	bls.n	810103e <__udivmoddi4+0x296>
 810101a:	3902      	subs	r1, #2
 810101c:	4464      	add	r4, ip
 810101e:	1ae4      	subs	r4, r4, r3
 8101020:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8101024:	e739      	b.n	8100e9a <__udivmoddi4+0xf2>
 8101026:	4604      	mov	r4, r0
 8101028:	e6f0      	b.n	8100e0c <__udivmoddi4+0x64>
 810102a:	4608      	mov	r0, r1
 810102c:	e706      	b.n	8100e3c <__udivmoddi4+0x94>
 810102e:	45c8      	cmp	r8, r9
 8101030:	d2ae      	bcs.n	8100f90 <__udivmoddi4+0x1e8>
 8101032:	ebb9 0e02 	subs.w	lr, r9, r2
 8101036:	eb63 0c07 	sbc.w	ip, r3, r7
 810103a:	3801      	subs	r0, #1
 810103c:	e7a8      	b.n	8100f90 <__udivmoddi4+0x1e8>
 810103e:	4631      	mov	r1, r6
 8101040:	e7ed      	b.n	810101e <__udivmoddi4+0x276>
 8101042:	4603      	mov	r3, r0
 8101044:	e799      	b.n	8100f7a <__udivmoddi4+0x1d2>
 8101046:	4630      	mov	r0, r6
 8101048:	e7d4      	b.n	8100ff4 <__udivmoddi4+0x24c>
 810104a:	46d6      	mov	lr, sl
 810104c:	e77f      	b.n	8100f4e <__udivmoddi4+0x1a6>
 810104e:	4463      	add	r3, ip
 8101050:	3802      	subs	r0, #2
 8101052:	e74d      	b.n	8100ef0 <__udivmoddi4+0x148>
 8101054:	4606      	mov	r6, r0
 8101056:	4623      	mov	r3, r4
 8101058:	4608      	mov	r0, r1
 810105a:	e70f      	b.n	8100e7c <__udivmoddi4+0xd4>
 810105c:	3e02      	subs	r6, #2
 810105e:	4463      	add	r3, ip
 8101060:	e730      	b.n	8100ec4 <__udivmoddi4+0x11c>
 8101062:	bf00      	nop

08101064 <__aeabi_idiv0>:
 8101064:	4770      	bx	lr
 8101066:	bf00      	nop

08101068 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101068:	b480      	push	{r7}
 810106a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 810106c:	4b09      	ldr	r3, [pc, #36]	@ (8101094 <SystemInit+0x2c>)
 810106e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8101072:	4a08      	ldr	r2, [pc, #32]	@ (8101094 <SystemInit+0x2c>)
 8101074:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8101078:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 810107c:	4b05      	ldr	r3, [pc, #20]	@ (8101094 <SystemInit+0x2c>)
 810107e:	691b      	ldr	r3, [r3, #16]
 8101080:	4a04      	ldr	r2, [pc, #16]	@ (8101094 <SystemInit+0x2c>)
 8101082:	f043 0310 	orr.w	r3, r3, #16
 8101086:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8101088:	bf00      	nop
 810108a:	46bd      	mov	sp, r7
 810108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101090:	4770      	bx	lr
 8101092:	bf00      	nop
 8101094:	e000ed00 	.word	0xe000ed00

08101098 <jsmn_alloc_token>:
#ifndef JSMN_HEADER
/**
 * Allocates a fresh unused token from the token pool.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser, jsmntok_t *tokens,
                                   const size_t num_tokens) {
 8101098:	b480      	push	{r7}
 810109a:	b087      	sub	sp, #28
 810109c:	af00      	add	r7, sp, #0
 810109e:	60f8      	str	r0, [r7, #12]
 81010a0:	60b9      	str	r1, [r7, #8]
 81010a2:	607a      	str	r2, [r7, #4]
  jsmntok_t *tok;
  if (parser->toknext >= num_tokens) {
 81010a4:	68fb      	ldr	r3, [r7, #12]
 81010a6:	685b      	ldr	r3, [r3, #4]
 81010a8:	687a      	ldr	r2, [r7, #4]
 81010aa:	429a      	cmp	r2, r3
 81010ac:	d801      	bhi.n	81010b2 <jsmn_alloc_token+0x1a>
    return NULL;
 81010ae:	2300      	movs	r3, #0
 81010b0:	e014      	b.n	81010dc <jsmn_alloc_token+0x44>
  }
  tok = &tokens[parser->toknext++];
 81010b2:	68fb      	ldr	r3, [r7, #12]
 81010b4:	685b      	ldr	r3, [r3, #4]
 81010b6:	1c59      	adds	r1, r3, #1
 81010b8:	68fa      	ldr	r2, [r7, #12]
 81010ba:	6051      	str	r1, [r2, #4]
 81010bc:	011b      	lsls	r3, r3, #4
 81010be:	68ba      	ldr	r2, [r7, #8]
 81010c0:	4413      	add	r3, r2
 81010c2:	617b      	str	r3, [r7, #20]
  tok->start = tok->end = -1;
 81010c4:	697b      	ldr	r3, [r7, #20]
 81010c6:	f04f 32ff 	mov.w	r2, #4294967295
 81010ca:	609a      	str	r2, [r3, #8]
 81010cc:	697b      	ldr	r3, [r7, #20]
 81010ce:	689a      	ldr	r2, [r3, #8]
 81010d0:	697b      	ldr	r3, [r7, #20]
 81010d2:	605a      	str	r2, [r3, #4]
  tok->size = 0;
 81010d4:	697b      	ldr	r3, [r7, #20]
 81010d6:	2200      	movs	r2, #0
 81010d8:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
  tok->parent = -1;
#endif
  return tok;
 81010da:	697b      	ldr	r3, [r7, #20]
}
 81010dc:	4618      	mov	r0, r3
 81010de:	371c      	adds	r7, #28
 81010e0:	46bd      	mov	sp, r7
 81010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010e6:	4770      	bx	lr

081010e8 <jsmn_fill_token>:

/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, const jsmntype_t type,
                            const int start, const int end) {
 81010e8:	b480      	push	{r7}
 81010ea:	b085      	sub	sp, #20
 81010ec:	af00      	add	r7, sp, #0
 81010ee:	60f8      	str	r0, [r7, #12]
 81010f0:	607a      	str	r2, [r7, #4]
 81010f2:	603b      	str	r3, [r7, #0]
 81010f4:	460b      	mov	r3, r1
 81010f6:	72fb      	strb	r3, [r7, #11]
  token->type = type;
 81010f8:	68fb      	ldr	r3, [r7, #12]
 81010fa:	7afa      	ldrb	r2, [r7, #11]
 81010fc:	701a      	strb	r2, [r3, #0]
  token->start = start;
 81010fe:	68fb      	ldr	r3, [r7, #12]
 8101100:	687a      	ldr	r2, [r7, #4]
 8101102:	605a      	str	r2, [r3, #4]
  token->end = end;
 8101104:	68fb      	ldr	r3, [r7, #12]
 8101106:	683a      	ldr	r2, [r7, #0]
 8101108:	609a      	str	r2, [r3, #8]
  token->size = 0;
 810110a:	68fb      	ldr	r3, [r7, #12]
 810110c:	2200      	movs	r2, #0
 810110e:	60da      	str	r2, [r3, #12]
}
 8101110:	bf00      	nop
 8101112:	3714      	adds	r7, #20
 8101114:	46bd      	mov	sp, r7
 8101116:	f85d 7b04 	ldr.w	r7, [sp], #4
 810111a:	4770      	bx	lr

0810111c <jsmn_parse_primitive>:
/**
 * Fills next available token with JSON primitive.
 */
static int jsmn_parse_primitive(jsmn_parser *parser, const char *js,
                                const size_t len, jsmntok_t *tokens,
                                const size_t num_tokens) {
 810111c:	b580      	push	{r7, lr}
 810111e:	b086      	sub	sp, #24
 8101120:	af00      	add	r7, sp, #0
 8101122:	60f8      	str	r0, [r7, #12]
 8101124:	60b9      	str	r1, [r7, #8]
 8101126:	607a      	str	r2, [r7, #4]
 8101128:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;
  int start;

  start = parser->pos;
 810112a:	68fb      	ldr	r3, [r7, #12]
 810112c:	681b      	ldr	r3, [r3, #0]
 810112e:	617b      	str	r3, [r7, #20]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8101130:	e03f      	b.n	81011b2 <jsmn_parse_primitive+0x96>
    switch (js[parser->pos]) {
 8101132:	68fb      	ldr	r3, [r7, #12]
 8101134:	681b      	ldr	r3, [r3, #0]
 8101136:	68ba      	ldr	r2, [r7, #8]
 8101138:	4413      	add	r3, r2
 810113a:	781b      	ldrb	r3, [r3, #0]
 810113c:	2b7d      	cmp	r3, #125	@ 0x7d
 810113e:	d045      	beq.n	81011cc <jsmn_parse_primitive+0xb0>
 8101140:	2b7d      	cmp	r3, #125	@ 0x7d
 8101142:	dc1c      	bgt.n	810117e <jsmn_parse_primitive+0x62>
 8101144:	2b5d      	cmp	r3, #93	@ 0x5d
 8101146:	d041      	beq.n	81011cc <jsmn_parse_primitive+0xb0>
 8101148:	2b5d      	cmp	r3, #93	@ 0x5d
 810114a:	dc18      	bgt.n	810117e <jsmn_parse_primitive+0x62>
 810114c:	2b3a      	cmp	r3, #58	@ 0x3a
 810114e:	dc16      	bgt.n	810117e <jsmn_parse_primitive+0x62>
 8101150:	2b20      	cmp	r3, #32
 8101152:	da04      	bge.n	810115e <jsmn_parse_primitive+0x42>
 8101154:	2b0a      	cmp	r3, #10
 8101156:	dc10      	bgt.n	810117a <jsmn_parse_primitive+0x5e>
 8101158:	2b09      	cmp	r3, #9
 810115a:	da37      	bge.n	81011cc <jsmn_parse_primitive+0xb0>
    case ']':
    case '}':
      goto found;
    default:
                   /* to quiet a warning from gcc*/
      break;
 810115c:	e00f      	b.n	810117e <jsmn_parse_primitive+0x62>
    switch (js[parser->pos]) {
 810115e:	3b20      	subs	r3, #32
 8101160:	4a31      	ldr	r2, [pc, #196]	@ (8101228 <jsmn_parse_primitive+0x10c>)
 8101162:	fa22 f303 	lsr.w	r3, r2, r3
 8101166:	f003 0301 	and.w	r3, r3, #1
 810116a:	2b00      	cmp	r3, #0
 810116c:	bf14      	ite	ne
 810116e:	2301      	movne	r3, #1
 8101170:	2300      	moveq	r3, #0
 8101172:	b2db      	uxtb	r3, r3
 8101174:	2b00      	cmp	r3, #0
 8101176:	d129      	bne.n	81011cc <jsmn_parse_primitive+0xb0>
      break;
 8101178:	e001      	b.n	810117e <jsmn_parse_primitive+0x62>
    switch (js[parser->pos]) {
 810117a:	2b0d      	cmp	r3, #13
 810117c:	d026      	beq.n	81011cc <jsmn_parse_primitive+0xb0>
      break;
 810117e:	bf00      	nop
    }
    if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
 8101180:	68fb      	ldr	r3, [r7, #12]
 8101182:	681b      	ldr	r3, [r3, #0]
 8101184:	68ba      	ldr	r2, [r7, #8]
 8101186:	4413      	add	r3, r2
 8101188:	781b      	ldrb	r3, [r3, #0]
 810118a:	2b1f      	cmp	r3, #31
 810118c:	d906      	bls.n	810119c <jsmn_parse_primitive+0x80>
 810118e:	68fb      	ldr	r3, [r7, #12]
 8101190:	681b      	ldr	r3, [r3, #0]
 8101192:	68ba      	ldr	r2, [r7, #8]
 8101194:	4413      	add	r3, r2
 8101196:	781b      	ldrb	r3, [r3, #0]
 8101198:	2b7e      	cmp	r3, #126	@ 0x7e
 810119a:	d905      	bls.n	81011a8 <jsmn_parse_primitive+0x8c>
      parser->pos = start;
 810119c:	697a      	ldr	r2, [r7, #20]
 810119e:	68fb      	ldr	r3, [r7, #12]
 81011a0:	601a      	str	r2, [r3, #0]
      return JSMN_ERROR_INVAL;
 81011a2:	f06f 0301 	mvn.w	r3, #1
 81011a6:	e03a      	b.n	810121e <jsmn_parse_primitive+0x102>
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 81011a8:	68fb      	ldr	r3, [r7, #12]
 81011aa:	681b      	ldr	r3, [r3, #0]
 81011ac:	1c5a      	adds	r2, r3, #1
 81011ae:	68fb      	ldr	r3, [r7, #12]
 81011b0:	601a      	str	r2, [r3, #0]
 81011b2:	68fb      	ldr	r3, [r7, #12]
 81011b4:	681b      	ldr	r3, [r3, #0]
 81011b6:	687a      	ldr	r2, [r7, #4]
 81011b8:	429a      	cmp	r2, r3
 81011ba:	d909      	bls.n	81011d0 <jsmn_parse_primitive+0xb4>
 81011bc:	68fb      	ldr	r3, [r7, #12]
 81011be:	681b      	ldr	r3, [r3, #0]
 81011c0:	68ba      	ldr	r2, [r7, #8]
 81011c2:	4413      	add	r3, r2
 81011c4:	781b      	ldrb	r3, [r3, #0]
 81011c6:	2b00      	cmp	r3, #0
 81011c8:	d1b3      	bne.n	8101132 <jsmn_parse_primitive+0x16>
  /* In strict mode primitive must be followed by a comma/object/array */
  parser->pos = start;
  return JSMN_ERROR_PART;
#endif

found:
 81011ca:	e001      	b.n	81011d0 <jsmn_parse_primitive+0xb4>
      goto found;
 81011cc:	bf00      	nop
 81011ce:	e000      	b.n	81011d2 <jsmn_parse_primitive+0xb6>
found:
 81011d0:	bf00      	nop
  if (tokens == NULL) {
 81011d2:	683b      	ldr	r3, [r7, #0]
 81011d4:	2b00      	cmp	r3, #0
 81011d6:	d106      	bne.n	81011e6 <jsmn_parse_primitive+0xca>
    parser->pos--;
 81011d8:	68fb      	ldr	r3, [r7, #12]
 81011da:	681b      	ldr	r3, [r3, #0]
 81011dc:	1e5a      	subs	r2, r3, #1
 81011de:	68fb      	ldr	r3, [r7, #12]
 81011e0:	601a      	str	r2, [r3, #0]
    return 0;
 81011e2:	2300      	movs	r3, #0
 81011e4:	e01b      	b.n	810121e <jsmn_parse_primitive+0x102>
  }
  token = jsmn_alloc_token(parser, tokens, num_tokens);
 81011e6:	6a3a      	ldr	r2, [r7, #32]
 81011e8:	6839      	ldr	r1, [r7, #0]
 81011ea:	68f8      	ldr	r0, [r7, #12]
 81011ec:	f7ff ff54 	bl	8101098 <jsmn_alloc_token>
 81011f0:	6138      	str	r0, [r7, #16]
  if (token == NULL) {
 81011f2:	693b      	ldr	r3, [r7, #16]
 81011f4:	2b00      	cmp	r3, #0
 81011f6:	d105      	bne.n	8101204 <jsmn_parse_primitive+0xe8>
    parser->pos = start;
 81011f8:	697a      	ldr	r2, [r7, #20]
 81011fa:	68fb      	ldr	r3, [r7, #12]
 81011fc:	601a      	str	r2, [r3, #0]
    return JSMN_ERROR_NOMEM;
 81011fe:	f04f 33ff 	mov.w	r3, #4294967295
 8101202:	e00c      	b.n	810121e <jsmn_parse_primitive+0x102>
  }
  jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
 8101204:	68fb      	ldr	r3, [r7, #12]
 8101206:	681b      	ldr	r3, [r3, #0]
 8101208:	697a      	ldr	r2, [r7, #20]
 810120a:	2108      	movs	r1, #8
 810120c:	6938      	ldr	r0, [r7, #16]
 810120e:	f7ff ff6b 	bl	81010e8 <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
  token->parent = parser->toksuper;
#endif
  parser->pos--;
 8101212:	68fb      	ldr	r3, [r7, #12]
 8101214:	681b      	ldr	r3, [r3, #0]
 8101216:	1e5a      	subs	r2, r3, #1
 8101218:	68fb      	ldr	r3, [r7, #12]
 810121a:	601a      	str	r2, [r3, #0]
  return 0;
 810121c:	2300      	movs	r3, #0
}
 810121e:	4618      	mov	r0, r3
 8101220:	3718      	adds	r7, #24
 8101222:	46bd      	mov	sp, r7
 8101224:	bd80      	pop	{r7, pc}
 8101226:	bf00      	nop
 8101228:	04001001 	.word	0x04001001

0810122c <jsmn_parse_string>:
/**
 * Fills next token with JSON string.
 */
static int jsmn_parse_string(jsmn_parser *parser, const char *js,
                             const size_t len, jsmntok_t *tokens,
                             const size_t num_tokens) {
 810122c:	b580      	push	{r7, lr}
 810122e:	b088      	sub	sp, #32
 8101230:	af00      	add	r7, sp, #0
 8101232:	60f8      	str	r0, [r7, #12]
 8101234:	60b9      	str	r1, [r7, #8]
 8101236:	607a      	str	r2, [r7, #4]
 8101238:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;

  int start = parser->pos;
 810123a:	68fb      	ldr	r3, [r7, #12]
 810123c:	681b      	ldr	r3, [r3, #0]
 810123e:	61bb      	str	r3, [r7, #24]
  
  /* Skip starting quote */
  parser->pos++;
 8101240:	68fb      	ldr	r3, [r7, #12]
 8101242:	681b      	ldr	r3, [r3, #0]
 8101244:	1c5a      	adds	r2, r3, #1
 8101246:	68fb      	ldr	r3, [r7, #12]
 8101248:	601a      	str	r2, [r3, #0]
  
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 810124a:	e0ba      	b.n	81013c2 <jsmn_parse_string+0x196>
    char c = js[parser->pos];
 810124c:	68fb      	ldr	r3, [r7, #12]
 810124e:	681b      	ldr	r3, [r3, #0]
 8101250:	68ba      	ldr	r2, [r7, #8]
 8101252:	4413      	add	r3, r2
 8101254:	781b      	ldrb	r3, [r3, #0]
 8101256:	75fb      	strb	r3, [r7, #23]

    /* Quote: end of string */
    if (c == '\"') {
 8101258:	7dfb      	ldrb	r3, [r7, #23]
 810125a:	2b22      	cmp	r3, #34	@ 0x22
 810125c:	d11d      	bne.n	810129a <jsmn_parse_string+0x6e>
      if (tokens == NULL) {
 810125e:	683b      	ldr	r3, [r7, #0]
 8101260:	2b00      	cmp	r3, #0
 8101262:	d101      	bne.n	8101268 <jsmn_parse_string+0x3c>
        return 0;
 8101264:	2300      	movs	r3, #0
 8101266:	e0be      	b.n	81013e6 <jsmn_parse_string+0x1ba>
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 8101268:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810126a:	6839      	ldr	r1, [r7, #0]
 810126c:	68f8      	ldr	r0, [r7, #12]
 810126e:	f7ff ff13 	bl	8101098 <jsmn_alloc_token>
 8101272:	6138      	str	r0, [r7, #16]
      if (token == NULL) {
 8101274:	693b      	ldr	r3, [r7, #16]
 8101276:	2b00      	cmp	r3, #0
 8101278:	d105      	bne.n	8101286 <jsmn_parse_string+0x5a>
        parser->pos = start;
 810127a:	69ba      	ldr	r2, [r7, #24]
 810127c:	68fb      	ldr	r3, [r7, #12]
 810127e:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_NOMEM;
 8101280:	f04f 33ff 	mov.w	r3, #4294967295
 8101284:	e0af      	b.n	81013e6 <jsmn_parse_string+0x1ba>
      }
      jsmn_fill_token(token, JSMN_STRING, start + 1, parser->pos);
 8101286:	69bb      	ldr	r3, [r7, #24]
 8101288:	1c5a      	adds	r2, r3, #1
 810128a:	68fb      	ldr	r3, [r7, #12]
 810128c:	681b      	ldr	r3, [r3, #0]
 810128e:	2104      	movs	r1, #4
 8101290:	6938      	ldr	r0, [r7, #16]
 8101292:	f7ff ff29 	bl	81010e8 <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
      token->parent = parser->toksuper;
#endif
      return 0;
 8101296:	2300      	movs	r3, #0
 8101298:	e0a5      	b.n	81013e6 <jsmn_parse_string+0x1ba>
    }

    /* Backslash: Quoted symbol expected */
    if (c == '\\' && parser->pos + 1 < len) {
 810129a:	7dfb      	ldrb	r3, [r7, #23]
 810129c:	2b5c      	cmp	r3, #92	@ 0x5c
 810129e:	f040 808b 	bne.w	81013b8 <jsmn_parse_string+0x18c>
 81012a2:	68fb      	ldr	r3, [r7, #12]
 81012a4:	681b      	ldr	r3, [r3, #0]
 81012a6:	3301      	adds	r3, #1
 81012a8:	687a      	ldr	r2, [r7, #4]
 81012aa:	429a      	cmp	r2, r3
 81012ac:	f240 8084 	bls.w	81013b8 <jsmn_parse_string+0x18c>
      int i;
      parser->pos++;
 81012b0:	68fb      	ldr	r3, [r7, #12]
 81012b2:	681b      	ldr	r3, [r3, #0]
 81012b4:	1c5a      	adds	r2, r3, #1
 81012b6:	68fb      	ldr	r3, [r7, #12]
 81012b8:	601a      	str	r2, [r3, #0]
      switch (js[parser->pos]) {
 81012ba:	68fb      	ldr	r3, [r7, #12]
 81012bc:	681b      	ldr	r3, [r3, #0]
 81012be:	68ba      	ldr	r2, [r7, #8]
 81012c0:	4413      	add	r3, r2
 81012c2:	781b      	ldrb	r3, [r3, #0]
 81012c4:	2b75      	cmp	r3, #117	@ 0x75
 81012c6:	dc70      	bgt.n	81013aa <jsmn_parse_string+0x17e>
 81012c8:	2b5c      	cmp	r3, #92	@ 0x5c
 81012ca:	da04      	bge.n	81012d6 <jsmn_parse_string+0xaa>
 81012cc:	2b22      	cmp	r3, #34	@ 0x22
 81012ce:	d072      	beq.n	81013b6 <jsmn_parse_string+0x18a>
 81012d0:	2b2f      	cmp	r3, #47	@ 0x2f
 81012d2:	d070      	beq.n	81013b6 <jsmn_parse_string+0x18a>
 81012d4:	e069      	b.n	81013aa <jsmn_parse_string+0x17e>
 81012d6:	3b5c      	subs	r3, #92	@ 0x5c
 81012d8:	2201      	movs	r2, #1
 81012da:	409a      	lsls	r2, r3
 81012dc:	4b44      	ldr	r3, [pc, #272]	@ (81013f0 <jsmn_parse_string+0x1c4>)
 81012de:	4013      	ands	r3, r2
 81012e0:	2b00      	cmp	r3, #0
 81012e2:	bf14      	ite	ne
 81012e4:	2301      	movne	r3, #1
 81012e6:	2300      	moveq	r3, #0
 81012e8:	b2db      	uxtb	r3, r3
 81012ea:	2b00      	cmp	r3, #0
 81012ec:	d163      	bne.n	81013b6 <jsmn_parse_string+0x18a>
 81012ee:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 81012f2:	2b00      	cmp	r3, #0
 81012f4:	bf14      	ite	ne
 81012f6:	2301      	movne	r3, #1
 81012f8:	2300      	moveq	r3, #0
 81012fa:	b2db      	uxtb	r3, r3
 81012fc:	2b00      	cmp	r3, #0
 81012fe:	d054      	beq.n	81013aa <jsmn_parse_string+0x17e>
      case 'n':
      case 't':
        break;
      /* Allows escaped symbol \uXXXX */
      case 'u':
        parser->pos++;
 8101300:	68fb      	ldr	r3, [r7, #12]
 8101302:	681b      	ldr	r3, [r3, #0]
 8101304:	1c5a      	adds	r2, r3, #1
 8101306:	68fb      	ldr	r3, [r7, #12]
 8101308:	601a      	str	r2, [r3, #0]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 810130a:	2300      	movs	r3, #0
 810130c:	61fb      	str	r3, [r7, #28]
 810130e:	e037      	b.n	8101380 <jsmn_parse_string+0x154>
             i++) {
          /* If it isn't a hex character we have an error */
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8101310:	68fb      	ldr	r3, [r7, #12]
 8101312:	681b      	ldr	r3, [r3, #0]
 8101314:	68ba      	ldr	r2, [r7, #8]
 8101316:	4413      	add	r3, r2
 8101318:	781b      	ldrb	r3, [r3, #0]
 810131a:	2b2f      	cmp	r3, #47	@ 0x2f
 810131c:	d906      	bls.n	810132c <jsmn_parse_string+0x100>
 810131e:	68fb      	ldr	r3, [r7, #12]
 8101320:	681b      	ldr	r3, [r3, #0]
 8101322:	68ba      	ldr	r2, [r7, #8]
 8101324:	4413      	add	r3, r2
 8101326:	781b      	ldrb	r3, [r3, #0]
 8101328:	2b39      	cmp	r3, #57	@ 0x39
 810132a:	d921      	bls.n	8101370 <jsmn_parse_string+0x144>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 810132c:	68fb      	ldr	r3, [r7, #12]
 810132e:	681b      	ldr	r3, [r3, #0]
 8101330:	68ba      	ldr	r2, [r7, #8]
 8101332:	4413      	add	r3, r2
 8101334:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8101336:	2b40      	cmp	r3, #64	@ 0x40
 8101338:	d906      	bls.n	8101348 <jsmn_parse_string+0x11c>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 810133a:	68fb      	ldr	r3, [r7, #12]
 810133c:	681b      	ldr	r3, [r3, #0]
 810133e:	68ba      	ldr	r2, [r7, #8]
 8101340:	4413      	add	r3, r2
 8101342:	781b      	ldrb	r3, [r3, #0]
 8101344:	2b46      	cmp	r3, #70	@ 0x46
 8101346:	d913      	bls.n	8101370 <jsmn_parse_string+0x144>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 8101348:	68fb      	ldr	r3, [r7, #12]
 810134a:	681b      	ldr	r3, [r3, #0]
 810134c:	68ba      	ldr	r2, [r7, #8]
 810134e:	4413      	add	r3, r2
 8101350:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8101352:	2b60      	cmp	r3, #96	@ 0x60
 8101354:	d906      	bls.n	8101364 <jsmn_parse_string+0x138>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 8101356:	68fb      	ldr	r3, [r7, #12]
 8101358:	681b      	ldr	r3, [r3, #0]
 810135a:	68ba      	ldr	r2, [r7, #8]
 810135c:	4413      	add	r3, r2
 810135e:	781b      	ldrb	r3, [r3, #0]
 8101360:	2b66      	cmp	r3, #102	@ 0x66
 8101362:	d905      	bls.n	8101370 <jsmn_parse_string+0x144>
            parser->pos = start;
 8101364:	69ba      	ldr	r2, [r7, #24]
 8101366:	68fb      	ldr	r3, [r7, #12]
 8101368:	601a      	str	r2, [r3, #0]
            return JSMN_ERROR_INVAL;
 810136a:	f06f 0301 	mvn.w	r3, #1
 810136e:	e03a      	b.n	81013e6 <jsmn_parse_string+0x1ba>
          }
          parser->pos++;
 8101370:	68fb      	ldr	r3, [r7, #12]
 8101372:	681b      	ldr	r3, [r3, #0]
 8101374:	1c5a      	adds	r2, r3, #1
 8101376:	68fb      	ldr	r3, [r7, #12]
 8101378:	601a      	str	r2, [r3, #0]
             i++) {
 810137a:	69fb      	ldr	r3, [r7, #28]
 810137c:	3301      	adds	r3, #1
 810137e:	61fb      	str	r3, [r7, #28]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 8101380:	69fb      	ldr	r3, [r7, #28]
 8101382:	2b03      	cmp	r3, #3
 8101384:	dc0b      	bgt.n	810139e <jsmn_parse_string+0x172>
 8101386:	68fb      	ldr	r3, [r7, #12]
 8101388:	681b      	ldr	r3, [r3, #0]
 810138a:	687a      	ldr	r2, [r7, #4]
 810138c:	429a      	cmp	r2, r3
 810138e:	d906      	bls.n	810139e <jsmn_parse_string+0x172>
 8101390:	68fb      	ldr	r3, [r7, #12]
 8101392:	681b      	ldr	r3, [r3, #0]
 8101394:	68ba      	ldr	r2, [r7, #8]
 8101396:	4413      	add	r3, r2
 8101398:	781b      	ldrb	r3, [r3, #0]
 810139a:	2b00      	cmp	r3, #0
 810139c:	d1b8      	bne.n	8101310 <jsmn_parse_string+0xe4>
        }
        parser->pos--;
 810139e:	68fb      	ldr	r3, [r7, #12]
 81013a0:	681b      	ldr	r3, [r3, #0]
 81013a2:	1e5a      	subs	r2, r3, #1
 81013a4:	68fb      	ldr	r3, [r7, #12]
 81013a6:	601a      	str	r2, [r3, #0]
        break;
 81013a8:	e006      	b.n	81013b8 <jsmn_parse_string+0x18c>
      /* Unexpected symbol */
      default:
        parser->pos = start;
 81013aa:	69ba      	ldr	r2, [r7, #24]
 81013ac:	68fb      	ldr	r3, [r7, #12]
 81013ae:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_INVAL;
 81013b0:	f06f 0301 	mvn.w	r3, #1
 81013b4:	e017      	b.n	81013e6 <jsmn_parse_string+0x1ba>
        break;
 81013b6:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 81013b8:	68fb      	ldr	r3, [r7, #12]
 81013ba:	681b      	ldr	r3, [r3, #0]
 81013bc:	1c5a      	adds	r2, r3, #1
 81013be:	68fb      	ldr	r3, [r7, #12]
 81013c0:	601a      	str	r2, [r3, #0]
 81013c2:	68fb      	ldr	r3, [r7, #12]
 81013c4:	681b      	ldr	r3, [r3, #0]
 81013c6:	687a      	ldr	r2, [r7, #4]
 81013c8:	429a      	cmp	r2, r3
 81013ca:	d907      	bls.n	81013dc <jsmn_parse_string+0x1b0>
 81013cc:	68fb      	ldr	r3, [r7, #12]
 81013ce:	681b      	ldr	r3, [r3, #0]
 81013d0:	68ba      	ldr	r2, [r7, #8]
 81013d2:	4413      	add	r3, r2
 81013d4:	781b      	ldrb	r3, [r3, #0]
 81013d6:	2b00      	cmp	r3, #0
 81013d8:	f47f af38 	bne.w	810124c <jsmn_parse_string+0x20>
      }
    }
  }
  parser->pos = start;
 81013dc:	69ba      	ldr	r2, [r7, #24]
 81013de:	68fb      	ldr	r3, [r7, #12]
 81013e0:	601a      	str	r2, [r3, #0]
  return JSMN_ERROR_PART;
 81013e2:	f06f 0302 	mvn.w	r3, #2
}
 81013e6:	4618      	mov	r0, r3
 81013e8:	3720      	adds	r7, #32
 81013ea:	46bd      	mov	sp, r7
 81013ec:	bd80      	pop	{r7, pc}
 81013ee:	bf00      	nop
 81013f0:	01440441 	.word	0x01440441

081013f4 <jsmn_parse>:

/**
 * Parse JSON string and fill tokens.
 */
JSMN_API int jsmn_parse(jsmn_parser *parser, const char *js, const size_t len,
                        jsmntok_t *tokens, const unsigned int num_tokens) {
 81013f4:	b580      	push	{r7, lr}
 81013f6:	b08c      	sub	sp, #48	@ 0x30
 81013f8:	af02      	add	r7, sp, #8
 81013fa:	60f8      	str	r0, [r7, #12]
 81013fc:	60b9      	str	r1, [r7, #8]
 81013fe:	607a      	str	r2, [r7, #4]
 8101400:	603b      	str	r3, [r7, #0]
  int r;
  int i;
  jsmntok_t *token;
  int count = parser->toknext;
 8101402:	68fb      	ldr	r3, [r7, #12]
 8101404:	685b      	ldr	r3, [r3, #4]
 8101406:	623b      	str	r3, [r7, #32]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8101408:	e176      	b.n	81016f8 <jsmn_parse+0x304>
    char c;
    jsmntype_t type;

    c = js[parser->pos];
 810140a:	68fb      	ldr	r3, [r7, #12]
 810140c:	681b      	ldr	r3, [r3, #0]
 810140e:	68ba      	ldr	r2, [r7, #8]
 8101410:	4413      	add	r3, r2
 8101412:	781b      	ldrb	r3, [r3, #0]
 8101414:	77fb      	strb	r3, [r7, #31]
    switch (c) {
 8101416:	7ffb      	ldrb	r3, [r7, #31]
 8101418:	2b7d      	cmp	r3, #125	@ 0x7d
 810141a:	d06c      	beq.n	81014f6 <jsmn_parse+0x102>
 810141c:	2b7d      	cmp	r3, #125	@ 0x7d
 810141e:	f300 8136 	bgt.w	810168e <jsmn_parse+0x29a>
 8101422:	2b7b      	cmp	r3, #123	@ 0x7b
 8101424:	d030      	beq.n	8101488 <jsmn_parse+0x94>
 8101426:	2b7b      	cmp	r3, #123	@ 0x7b
 8101428:	f300 8131 	bgt.w	810168e <jsmn_parse+0x29a>
 810142c:	2b5d      	cmp	r3, #93	@ 0x5d
 810142e:	d062      	beq.n	81014f6 <jsmn_parse+0x102>
 8101430:	2b5d      	cmp	r3, #93	@ 0x5d
 8101432:	f300 812c 	bgt.w	810168e <jsmn_parse+0x29a>
 8101436:	2b5b      	cmp	r3, #91	@ 0x5b
 8101438:	d026      	beq.n	8101488 <jsmn_parse+0x94>
 810143a:	2b5b      	cmp	r3, #91	@ 0x5b
 810143c:	f300 8127 	bgt.w	810168e <jsmn_parse+0x29a>
 8101440:	2b3a      	cmp	r3, #58	@ 0x3a
 8101442:	f000 80d6 	beq.w	81015f2 <jsmn_parse+0x1fe>
 8101446:	2b3a      	cmp	r3, #58	@ 0x3a
 8101448:	f300 8121 	bgt.w	810168e <jsmn_parse+0x29a>
 810144c:	2b2c      	cmp	r3, #44	@ 0x2c
 810144e:	f000 80d7 	beq.w	8101600 <jsmn_parse+0x20c>
 8101452:	2b2c      	cmp	r3, #44	@ 0x2c
 8101454:	f300 811b 	bgt.w	810168e <jsmn_parse+0x29a>
 8101458:	2b20      	cmp	r3, #32
 810145a:	dc11      	bgt.n	8101480 <jsmn_parse+0x8c>
 810145c:	2b09      	cmp	r3, #9
 810145e:	f2c0 8116 	blt.w	810168e <jsmn_parse+0x29a>
 8101462:	3b09      	subs	r3, #9
 8101464:	4a91      	ldr	r2, [pc, #580]	@ (81016ac <jsmn_parse+0x2b8>)
 8101466:	fa22 f303 	lsr.w	r3, r2, r3
 810146a:	f003 0301 	and.w	r3, r3, #1
 810146e:	2b00      	cmp	r3, #0
 8101470:	bf14      	ite	ne
 8101472:	2301      	movne	r3, #1
 8101474:	2300      	moveq	r3, #0
 8101476:	b2db      	uxtb	r3, r3
 8101478:	2b00      	cmp	r3, #0
 810147a:	f040 812d 	bne.w	81016d8 <jsmn_parse+0x2e4>
 810147e:	e106      	b.n	810168e <jsmn_parse+0x29a>
 8101480:	2b22      	cmp	r3, #34	@ 0x22
 8101482:	f000 8092 	beq.w	81015aa <jsmn_parse+0x1b6>
 8101486:	e102      	b.n	810168e <jsmn_parse+0x29a>
    case '{':
    case '[':
      count++;
 8101488:	6a3b      	ldr	r3, [r7, #32]
 810148a:	3301      	adds	r3, #1
 810148c:	623b      	str	r3, [r7, #32]
      if (tokens == NULL) {
 810148e:	683b      	ldr	r3, [r7, #0]
 8101490:	2b00      	cmp	r3, #0
 8101492:	f000 8123 	beq.w	81016dc <jsmn_parse+0x2e8>
        break;
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 8101496:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8101498:	6839      	ldr	r1, [r7, #0]
 810149a:	68f8      	ldr	r0, [r7, #12]
 810149c:	f7ff fdfc 	bl	8101098 <jsmn_alloc_token>
 81014a0:	61b8      	str	r0, [r7, #24]
      if (token == NULL) {
 81014a2:	69bb      	ldr	r3, [r7, #24]
 81014a4:	2b00      	cmp	r3, #0
 81014a6:	d102      	bne.n	81014ae <jsmn_parse+0xba>
        return JSMN_ERROR_NOMEM;
 81014a8:	f04f 33ff 	mov.w	r3, #4294967295
 81014ac:	e153      	b.n	8101756 <jsmn_parse+0x362>
      }
      if (parser->toksuper != -1) {
 81014ae:	68fb      	ldr	r3, [r7, #12]
 81014b0:	689b      	ldr	r3, [r3, #8]
 81014b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 81014b6:	d00a      	beq.n	81014ce <jsmn_parse+0xda>
        jsmntok_t *t = &tokens[parser->toksuper];
 81014b8:	68fb      	ldr	r3, [r7, #12]
 81014ba:	689b      	ldr	r3, [r3, #8]
 81014bc:	011b      	lsls	r3, r3, #4
 81014be:	683a      	ldr	r2, [r7, #0]
 81014c0:	4413      	add	r3, r2
 81014c2:	617b      	str	r3, [r7, #20]
        /* In strict mode an object or array can't become a key */
        if (t->type == JSMN_OBJECT) {
          return JSMN_ERROR_INVAL;
        }
#endif
        t->size++;
 81014c4:	697b      	ldr	r3, [r7, #20]
 81014c6:	68db      	ldr	r3, [r3, #12]
 81014c8:	1c5a      	adds	r2, r3, #1
 81014ca:	697b      	ldr	r3, [r7, #20]
 81014cc:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
        token->parent = parser->toksuper;
#endif
      }
      token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
 81014ce:	7ffb      	ldrb	r3, [r7, #31]
 81014d0:	2b7b      	cmp	r3, #123	@ 0x7b
 81014d2:	d101      	bne.n	81014d8 <jsmn_parse+0xe4>
 81014d4:	2201      	movs	r2, #1
 81014d6:	e000      	b.n	81014da <jsmn_parse+0xe6>
 81014d8:	2202      	movs	r2, #2
 81014da:	69bb      	ldr	r3, [r7, #24]
 81014dc:	701a      	strb	r2, [r3, #0]
      token->start = parser->pos;
 81014de:	68fb      	ldr	r3, [r7, #12]
 81014e0:	681b      	ldr	r3, [r3, #0]
 81014e2:	461a      	mov	r2, r3
 81014e4:	69bb      	ldr	r3, [r7, #24]
 81014e6:	605a      	str	r2, [r3, #4]
      parser->toksuper = parser->toknext - 1;
 81014e8:	68fb      	ldr	r3, [r7, #12]
 81014ea:	685b      	ldr	r3, [r3, #4]
 81014ec:	3b01      	subs	r3, #1
 81014ee:	461a      	mov	r2, r3
 81014f0:	68fb      	ldr	r3, [r7, #12]
 81014f2:	609a      	str	r2, [r3, #8]
      break;
 81014f4:	e0fb      	b.n	81016ee <jsmn_parse+0x2fa>
    case '}':
    case ']':
      if (tokens == NULL) {
 81014f6:	683b      	ldr	r3, [r7, #0]
 81014f8:	2b00      	cmp	r3, #0
 81014fa:	f000 80f1 	beq.w	81016e0 <jsmn_parse+0x2ec>
        break;
      }
      type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 81014fe:	7ffb      	ldrb	r3, [r7, #31]
 8101500:	2b7d      	cmp	r3, #125	@ 0x7d
 8101502:	d101      	bne.n	8101508 <jsmn_parse+0x114>
 8101504:	2301      	movs	r3, #1
 8101506:	e000      	b.n	810150a <jsmn_parse+0x116>
 8101508:	2302      	movs	r3, #2
 810150a:	77bb      	strb	r3, [r7, #30]
          break;
        }
        token = &tokens[token->parent];
      }
#else
      for (i = parser->toknext - 1; i >= 0; i--) {
 810150c:	68fb      	ldr	r3, [r7, #12]
 810150e:	685b      	ldr	r3, [r3, #4]
 8101510:	3b01      	subs	r3, #1
 8101512:	627b      	str	r3, [r7, #36]	@ 0x24
 8101514:	e024      	b.n	8101560 <jsmn_parse+0x16c>
        token = &tokens[i];
 8101516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101518:	011b      	lsls	r3, r3, #4
 810151a:	683a      	ldr	r2, [r7, #0]
 810151c:	4413      	add	r3, r2
 810151e:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 8101520:	69bb      	ldr	r3, [r7, #24]
 8101522:	685b      	ldr	r3, [r3, #4]
 8101524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101528:	d017      	beq.n	810155a <jsmn_parse+0x166>
 810152a:	69bb      	ldr	r3, [r7, #24]
 810152c:	689b      	ldr	r3, [r3, #8]
 810152e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101532:	d112      	bne.n	810155a <jsmn_parse+0x166>
          if (token->type != type) {
 8101534:	69bb      	ldr	r3, [r7, #24]
 8101536:	781b      	ldrb	r3, [r3, #0]
 8101538:	7fba      	ldrb	r2, [r7, #30]
 810153a:	429a      	cmp	r2, r3
 810153c:	d002      	beq.n	8101544 <jsmn_parse+0x150>
            return JSMN_ERROR_INVAL;
 810153e:	f06f 0301 	mvn.w	r3, #1
 8101542:	e108      	b.n	8101756 <jsmn_parse+0x362>
          }
          parser->toksuper = -1;
 8101544:	68fb      	ldr	r3, [r7, #12]
 8101546:	f04f 32ff 	mov.w	r2, #4294967295
 810154a:	609a      	str	r2, [r3, #8]
          token->end = parser->pos + 1;
 810154c:	68fb      	ldr	r3, [r7, #12]
 810154e:	681b      	ldr	r3, [r3, #0]
 8101550:	3301      	adds	r3, #1
 8101552:	461a      	mov	r2, r3
 8101554:	69bb      	ldr	r3, [r7, #24]
 8101556:	609a      	str	r2, [r3, #8]
          break;
 8101558:	e005      	b.n	8101566 <jsmn_parse+0x172>
      for (i = parser->toknext - 1; i >= 0; i--) {
 810155a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810155c:	3b01      	subs	r3, #1
 810155e:	627b      	str	r3, [r7, #36]	@ 0x24
 8101560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101562:	2b00      	cmp	r3, #0
 8101564:	dad7      	bge.n	8101516 <jsmn_parse+0x122>
        }
      }
      /* Error if unmatched closing bracket */
      if (i == -1) {
 8101566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101568:	f1b3 3fff 	cmp.w	r3, #4294967295
 810156c:	d119      	bne.n	81015a2 <jsmn_parse+0x1ae>
        return JSMN_ERROR_INVAL;
 810156e:	f06f 0301 	mvn.w	r3, #1
 8101572:	e0f0      	b.n	8101756 <jsmn_parse+0x362>
      }
      for (; i >= 0; i--) {
        token = &tokens[i];
 8101574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101576:	011b      	lsls	r3, r3, #4
 8101578:	683a      	ldr	r2, [r7, #0]
 810157a:	4413      	add	r3, r2
 810157c:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 810157e:	69bb      	ldr	r3, [r7, #24]
 8101580:	685b      	ldr	r3, [r3, #4]
 8101582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101586:	d009      	beq.n	810159c <jsmn_parse+0x1a8>
 8101588:	69bb      	ldr	r3, [r7, #24]
 810158a:	689b      	ldr	r3, [r3, #8]
 810158c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101590:	d104      	bne.n	810159c <jsmn_parse+0x1a8>
          parser->toksuper = i;
 8101592:	68fb      	ldr	r3, [r7, #12]
 8101594:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8101596:	609a      	str	r2, [r3, #8]
          break;
 8101598:	bf00      	nop
        }
      }
#endif
      break;
 810159a:	e0a8      	b.n	81016ee <jsmn_parse+0x2fa>
      for (; i >= 0; i--) {
 810159c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810159e:	3b01      	subs	r3, #1
 81015a0:	627b      	str	r3, [r7, #36]	@ 0x24
 81015a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81015a4:	2b00      	cmp	r3, #0
 81015a6:	dae5      	bge.n	8101574 <jsmn_parse+0x180>
      break;
 81015a8:	e0a1      	b.n	81016ee <jsmn_parse+0x2fa>
    case '\"':
      r = jsmn_parse_string(parser, js, len, tokens, num_tokens);
 81015aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81015ac:	9300      	str	r3, [sp, #0]
 81015ae:	683b      	ldr	r3, [r7, #0]
 81015b0:	687a      	ldr	r2, [r7, #4]
 81015b2:	68b9      	ldr	r1, [r7, #8]
 81015b4:	68f8      	ldr	r0, [r7, #12]
 81015b6:	f7ff fe39 	bl	810122c <jsmn_parse_string>
 81015ba:	6138      	str	r0, [r7, #16]
      if (r < 0) {
 81015bc:	693b      	ldr	r3, [r7, #16]
 81015be:	2b00      	cmp	r3, #0
 81015c0:	da01      	bge.n	81015c6 <jsmn_parse+0x1d2>
        return r;
 81015c2:	693b      	ldr	r3, [r7, #16]
 81015c4:	e0c7      	b.n	8101756 <jsmn_parse+0x362>
      }
      count++;
 81015c6:	6a3b      	ldr	r3, [r7, #32]
 81015c8:	3301      	adds	r3, #1
 81015ca:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 81015cc:	68fb      	ldr	r3, [r7, #12]
 81015ce:	689b      	ldr	r3, [r3, #8]
 81015d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 81015d4:	f000 8086 	beq.w	81016e4 <jsmn_parse+0x2f0>
 81015d8:	683b      	ldr	r3, [r7, #0]
 81015da:	2b00      	cmp	r3, #0
 81015dc:	f000 8082 	beq.w	81016e4 <jsmn_parse+0x2f0>
        tokens[parser->toksuper].size++;
 81015e0:	68fb      	ldr	r3, [r7, #12]
 81015e2:	689b      	ldr	r3, [r3, #8]
 81015e4:	011b      	lsls	r3, r3, #4
 81015e6:	683a      	ldr	r2, [r7, #0]
 81015e8:	4413      	add	r3, r2
 81015ea:	68da      	ldr	r2, [r3, #12]
 81015ec:	3201      	adds	r2, #1
 81015ee:	60da      	str	r2, [r3, #12]
      }
      break;
 81015f0:	e078      	b.n	81016e4 <jsmn_parse+0x2f0>
    case '\r':
    case '\n':
    case ' ':
      break;
    case ':':
      parser->toksuper = parser->toknext - 1;
 81015f2:	68fb      	ldr	r3, [r7, #12]
 81015f4:	685b      	ldr	r3, [r3, #4]
 81015f6:	3b01      	subs	r3, #1
 81015f8:	461a      	mov	r2, r3
 81015fa:	68fb      	ldr	r3, [r7, #12]
 81015fc:	609a      	str	r2, [r3, #8]
      break;
 81015fe:	e076      	b.n	81016ee <jsmn_parse+0x2fa>
    case ',':
      if (tokens != NULL && parser->toksuper != -1 &&
 8101600:	683b      	ldr	r3, [r7, #0]
 8101602:	2b00      	cmp	r3, #0
 8101604:	d070      	beq.n	81016e8 <jsmn_parse+0x2f4>
 8101606:	68fb      	ldr	r3, [r7, #12]
 8101608:	689b      	ldr	r3, [r3, #8]
 810160a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810160e:	d06b      	beq.n	81016e8 <jsmn_parse+0x2f4>
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 8101610:	68fb      	ldr	r3, [r7, #12]
 8101612:	689b      	ldr	r3, [r3, #8]
 8101614:	011b      	lsls	r3, r3, #4
 8101616:	683a      	ldr	r2, [r7, #0]
 8101618:	4413      	add	r3, r2
 810161a:	781b      	ldrb	r3, [r3, #0]
      if (tokens != NULL && parser->toksuper != -1 &&
 810161c:	2b02      	cmp	r3, #2
 810161e:	d063      	beq.n	81016e8 <jsmn_parse+0x2f4>
          tokens[parser->toksuper].type != JSMN_OBJECT) {
 8101620:	68fb      	ldr	r3, [r7, #12]
 8101622:	689b      	ldr	r3, [r3, #8]
 8101624:	011b      	lsls	r3, r3, #4
 8101626:	683a      	ldr	r2, [r7, #0]
 8101628:	4413      	add	r3, r2
 810162a:	781b      	ldrb	r3, [r3, #0]
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 810162c:	2b01      	cmp	r3, #1
 810162e:	d05b      	beq.n	81016e8 <jsmn_parse+0x2f4>
#ifdef JSMN_PARENT_LINKS
        parser->toksuper = tokens[parser->toksuper].parent;
#else
        for (i = parser->toknext - 1; i >= 0; i--) {
 8101630:	68fb      	ldr	r3, [r7, #12]
 8101632:	685b      	ldr	r3, [r3, #4]
 8101634:	3b01      	subs	r3, #1
 8101636:	627b      	str	r3, [r7, #36]	@ 0x24
 8101638:	e025      	b.n	8101686 <jsmn_parse+0x292>
          if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
 810163a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810163c:	011b      	lsls	r3, r3, #4
 810163e:	683a      	ldr	r2, [r7, #0]
 8101640:	4413      	add	r3, r2
 8101642:	781b      	ldrb	r3, [r3, #0]
 8101644:	2b02      	cmp	r3, #2
 8101646:	d006      	beq.n	8101656 <jsmn_parse+0x262>
 8101648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810164a:	011b      	lsls	r3, r3, #4
 810164c:	683a      	ldr	r2, [r7, #0]
 810164e:	4413      	add	r3, r2
 8101650:	781b      	ldrb	r3, [r3, #0]
 8101652:	2b01      	cmp	r3, #1
 8101654:	d114      	bne.n	8101680 <jsmn_parse+0x28c>
            if (tokens[i].start != -1 && tokens[i].end == -1) {
 8101656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101658:	011b      	lsls	r3, r3, #4
 810165a:	683a      	ldr	r2, [r7, #0]
 810165c:	4413      	add	r3, r2
 810165e:	685b      	ldr	r3, [r3, #4]
 8101660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101664:	d00c      	beq.n	8101680 <jsmn_parse+0x28c>
 8101666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101668:	011b      	lsls	r3, r3, #4
 810166a:	683a      	ldr	r2, [r7, #0]
 810166c:	4413      	add	r3, r2
 810166e:	689b      	ldr	r3, [r3, #8]
 8101670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101674:	d104      	bne.n	8101680 <jsmn_parse+0x28c>
              parser->toksuper = i;
 8101676:	68fb      	ldr	r3, [r7, #12]
 8101678:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810167a:	609a      	str	r2, [r3, #8]
              break;
 810167c:	bf00      	nop
            }
          }
        }
#endif
      }
      break;
 810167e:	e033      	b.n	81016e8 <jsmn_parse+0x2f4>
        for (i = parser->toknext - 1; i >= 0; i--) {
 8101680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101682:	3b01      	subs	r3, #1
 8101684:	627b      	str	r3, [r7, #36]	@ 0x24
 8101686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101688:	2b00      	cmp	r3, #0
 810168a:	dad6      	bge.n	810163a <jsmn_parse+0x246>
      break;
 810168c:	e02c      	b.n	81016e8 <jsmn_parse+0x2f4>
      }
#else
    /* In non-strict mode every unquoted value is a primitive */
    default:
#endif
      r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
 810168e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8101690:	9300      	str	r3, [sp, #0]
 8101692:	683b      	ldr	r3, [r7, #0]
 8101694:	687a      	ldr	r2, [r7, #4]
 8101696:	68b9      	ldr	r1, [r7, #8]
 8101698:	68f8      	ldr	r0, [r7, #12]
 810169a:	f7ff fd3f 	bl	810111c <jsmn_parse_primitive>
 810169e:	6138      	str	r0, [r7, #16]
      if (r < 0) {
 81016a0:	693b      	ldr	r3, [r7, #16]
 81016a2:	2b00      	cmp	r3, #0
 81016a4:	da04      	bge.n	81016b0 <jsmn_parse+0x2bc>
        return r;
 81016a6:	693b      	ldr	r3, [r7, #16]
 81016a8:	e055      	b.n	8101756 <jsmn_parse+0x362>
 81016aa:	bf00      	nop
 81016ac:	00800013 	.word	0x00800013
      }
      count++;
 81016b0:	6a3b      	ldr	r3, [r7, #32]
 81016b2:	3301      	adds	r3, #1
 81016b4:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 81016b6:	68fb      	ldr	r3, [r7, #12]
 81016b8:	689b      	ldr	r3, [r3, #8]
 81016ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 81016be:	d015      	beq.n	81016ec <jsmn_parse+0x2f8>
 81016c0:	683b      	ldr	r3, [r7, #0]
 81016c2:	2b00      	cmp	r3, #0
 81016c4:	d012      	beq.n	81016ec <jsmn_parse+0x2f8>
        tokens[parser->toksuper].size++;
 81016c6:	68fb      	ldr	r3, [r7, #12]
 81016c8:	689b      	ldr	r3, [r3, #8]
 81016ca:	011b      	lsls	r3, r3, #4
 81016cc:	683a      	ldr	r2, [r7, #0]
 81016ce:	4413      	add	r3, r2
 81016d0:	68da      	ldr	r2, [r3, #12]
 81016d2:	3201      	adds	r2, #1
 81016d4:	60da      	str	r2, [r3, #12]
      }
      break;
 81016d6:	e009      	b.n	81016ec <jsmn_parse+0x2f8>
      break;
 81016d8:	bf00      	nop
 81016da:	e008      	b.n	81016ee <jsmn_parse+0x2fa>
        break;
 81016dc:	bf00      	nop
 81016de:	e006      	b.n	81016ee <jsmn_parse+0x2fa>
        break;
 81016e0:	bf00      	nop
 81016e2:	e004      	b.n	81016ee <jsmn_parse+0x2fa>
      break;
 81016e4:	bf00      	nop
 81016e6:	e002      	b.n	81016ee <jsmn_parse+0x2fa>
      break;
 81016e8:	bf00      	nop
 81016ea:	e000      	b.n	81016ee <jsmn_parse+0x2fa>
      break;
 81016ec:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 81016ee:	68fb      	ldr	r3, [r7, #12]
 81016f0:	681b      	ldr	r3, [r3, #0]
 81016f2:	1c5a      	adds	r2, r3, #1
 81016f4:	68fb      	ldr	r3, [r7, #12]
 81016f6:	601a      	str	r2, [r3, #0]
 81016f8:	68fb      	ldr	r3, [r7, #12]
 81016fa:	681b      	ldr	r3, [r3, #0]
 81016fc:	687a      	ldr	r2, [r7, #4]
 81016fe:	429a      	cmp	r2, r3
 8101700:	d907      	bls.n	8101712 <jsmn_parse+0x31e>
 8101702:	68fb      	ldr	r3, [r7, #12]
 8101704:	681b      	ldr	r3, [r3, #0]
 8101706:	68ba      	ldr	r2, [r7, #8]
 8101708:	4413      	add	r3, r2
 810170a:	781b      	ldrb	r3, [r3, #0]
 810170c:	2b00      	cmp	r3, #0
 810170e:	f47f ae7c 	bne.w	810140a <jsmn_parse+0x16>
      return JSMN_ERROR_INVAL;
#endif
    }
  }

  if (tokens != NULL) {
 8101712:	683b      	ldr	r3, [r7, #0]
 8101714:	2b00      	cmp	r3, #0
 8101716:	d01d      	beq.n	8101754 <jsmn_parse+0x360>
    for (i = parser->toknext - 1; i >= 0; i--) {
 8101718:	68fb      	ldr	r3, [r7, #12]
 810171a:	685b      	ldr	r3, [r3, #4]
 810171c:	3b01      	subs	r3, #1
 810171e:	627b      	str	r3, [r7, #36]	@ 0x24
 8101720:	e015      	b.n	810174e <jsmn_parse+0x35a>
      /* Unmatched opened object or array */
      if (tokens[i].start != -1 && tokens[i].end == -1) {
 8101722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101724:	011b      	lsls	r3, r3, #4
 8101726:	683a      	ldr	r2, [r7, #0]
 8101728:	4413      	add	r3, r2
 810172a:	685b      	ldr	r3, [r3, #4]
 810172c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101730:	d00a      	beq.n	8101748 <jsmn_parse+0x354>
 8101732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101734:	011b      	lsls	r3, r3, #4
 8101736:	683a      	ldr	r2, [r7, #0]
 8101738:	4413      	add	r3, r2
 810173a:	689b      	ldr	r3, [r3, #8]
 810173c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101740:	d102      	bne.n	8101748 <jsmn_parse+0x354>
        return JSMN_ERROR_PART;
 8101742:	f06f 0302 	mvn.w	r3, #2
 8101746:	e006      	b.n	8101756 <jsmn_parse+0x362>
    for (i = parser->toknext - 1; i >= 0; i--) {
 8101748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810174a:	3b01      	subs	r3, #1
 810174c:	627b      	str	r3, [r7, #36]	@ 0x24
 810174e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101750:	2b00      	cmp	r3, #0
 8101752:	dae6      	bge.n	8101722 <jsmn_parse+0x32e>
      }
    }
  }

  return count;
 8101754:	6a3b      	ldr	r3, [r7, #32]
}
 8101756:	4618      	mov	r0, r3
 8101758:	3728      	adds	r7, #40	@ 0x28
 810175a:	46bd      	mov	sp, r7
 810175c:	bd80      	pop	{r7, pc}
 810175e:	bf00      	nop

08101760 <jsmn_init>:

/**
 * Creates a new parser based over a given buffer with an array of tokens
 * available.
 */
JSMN_API void jsmn_init(jsmn_parser *parser) {
 8101760:	b480      	push	{r7}
 8101762:	b083      	sub	sp, #12
 8101764:	af00      	add	r7, sp, #0
 8101766:	6078      	str	r0, [r7, #4]
  parser->pos = 0;
 8101768:	687b      	ldr	r3, [r7, #4]
 810176a:	2200      	movs	r2, #0
 810176c:	601a      	str	r2, [r3, #0]
  parser->toknext = 0;
 810176e:	687b      	ldr	r3, [r7, #4]
 8101770:	2200      	movs	r2, #0
 8101772:	605a      	str	r2, [r3, #4]
  parser->toksuper = -1;
 8101774:	687b      	ldr	r3, [r7, #4]
 8101776:	f04f 32ff 	mov.w	r2, #4294967295
 810177a:	609a      	str	r2, [r3, #8]
}
 810177c:	bf00      	nop
 810177e:	370c      	adds	r7, #12
 8101780:	46bd      	mov	sp, r7
 8101782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101786:	4770      	bx	lr

08101788 <parse_and_print_json>:
}

#endif /* JSMN_HEADER */


void parse_and_print_json(const char *json_string) {
 8101788:	b590      	push	{r4, r7, lr}
 810178a:	f6ad 1d04 	subw	sp, sp, #2308	@ 0x904
 810178e:	af02      	add	r7, sp, #8
 8101790:	f607 03f8 	addw	r3, r7, #2296	@ 0x8f8
 8101794:	f6a3 03f4 	subw	r3, r3, #2292	@ 0x8f4
 8101798:	6018      	str	r0, [r3, #0]
    jsmn_parser parser;
    jsmntok_t tokens[128];
    jsmn_init(&parser);
 810179a:	f607 03b4 	addw	r3, r7, #2228	@ 0x8b4
 810179e:	4618      	mov	r0, r3
 81017a0:	f7ff ffde 	bl	8101760 <jsmn_init>

    int token_count = jsmn_parse(&parser, json_string, strlen(json_string), tokens, sizeof(tokens) / sizeof(tokens[0]));
 81017a4:	f607 03f8 	addw	r3, r7, #2296	@ 0x8f8
 81017a8:	f6a3 03f4 	subw	r3, r3, #2292	@ 0x8f4
 81017ac:	6818      	ldr	r0, [r3, #0]
 81017ae:	f7fe fdf7 	bl	81003a0 <strlen>
 81017b2:	4604      	mov	r4, r0
 81017b4:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 81017b8:	f607 02f8 	addw	r2, r7, #2296	@ 0x8f8
 81017bc:	f6a2 01f4 	subw	r1, r2, #2292	@ 0x8f4
 81017c0:	f607 00b4 	addw	r0, r7, #2228	@ 0x8b4
 81017c4:	2280      	movs	r2, #128	@ 0x80
 81017c6:	9200      	str	r2, [sp, #0]
 81017c8:	4622      	mov	r2, r4
 81017ca:	6809      	ldr	r1, [r1, #0]
 81017cc:	f7ff fe12 	bl	81013f4 <jsmn_parse>
 81017d0:	f8c7 08ec 	str.w	r0, [r7, #2284]	@ 0x8ec

    if (token_count < 0) {
 81017d4:	f8d7 38ec 	ldr.w	r3, [r7, #2284]	@ 0x8ec
 81017d8:	2b00      	cmp	r3, #0
 81017da:	da05      	bge.n	81017e8 <parse_and_print_json+0x60>
        printf("Failed to parse JSON: %d\r\n", token_count);
 81017dc:	f8d7 18ec 	ldr.w	r1, [r7, #2284]	@ 0x8ec
 81017e0:	4821      	ldr	r0, [pc, #132]	@ (8101868 <parse_and_print_json+0xe0>)
 81017e2:	f007 f9a9 	bl	8108b38 <iprintf>
        return;
 81017e6:	e31b      	b.n	8101e20 <parse_and_print_json+0x698>
    }

    if (token_count < 1 || tokens[0].type != JSMN_OBJECT) {
 81017e8:	f8d7 38ec 	ldr.w	r3, [r7, #2284]	@ 0x8ec
 81017ec:	2b00      	cmp	r3, #0
 81017ee:	dd06      	ble.n	81017fe <parse_and_print_json+0x76>
 81017f0:	f607 03f8 	addw	r3, r7, #2296	@ 0x8f8
 81017f4:	f6a3 0344 	subw	r3, r3, #2116	@ 0x844
 81017f8:	781b      	ldrb	r3, [r3, #0]
 81017fa:	2b01      	cmp	r3, #1
 81017fc:	d003      	beq.n	8101806 <parse_and_print_json+0x7e>
        printf("Object expected\r\n");
 81017fe:	481b      	ldr	r0, [pc, #108]	@ (810186c <parse_and_print_json+0xe4>)
 8101800:	f007 fa02 	bl	8108c08 <puts>
        return;
 8101804:	e30c      	b.n	8101e20 <parse_and_print_json+0x698>
    }

    char key[32] = {0};
 8101806:	f607 03f8 	addw	r3, r7, #2296	@ 0x8f8
 810180a:	f6a3 0364 	subw	r3, r3, #2148	@ 0x864
 810180e:	2200      	movs	r2, #0
 8101810:	601a      	str	r2, [r3, #0]
 8101812:	3304      	adds	r3, #4
 8101814:	2200      	movs	r2, #0
 8101816:	601a      	str	r2, [r3, #0]
 8101818:	605a      	str	r2, [r3, #4]
 810181a:	609a      	str	r2, [r3, #8]
 810181c:	60da      	str	r2, [r3, #12]
 810181e:	611a      	str	r2, [r3, #16]
 8101820:	615a      	str	r2, [r3, #20]
 8101822:	619a      	str	r2, [r3, #24]
    char cmd[32] = {0};
 8101824:	f607 03f8 	addw	r3, r7, #2296	@ 0x8f8
 8101828:	f6a3 0384 	subw	r3, r3, #2180	@ 0x884
 810182c:	2200      	movs	r2, #0
 810182e:	601a      	str	r2, [r3, #0]
 8101830:	3304      	adds	r3, #4
 8101832:	2200      	movs	r2, #0
 8101834:	601a      	str	r2, [r3, #0]
 8101836:	605a      	str	r2, [r3, #4]
 8101838:	609a      	str	r2, [r3, #8]
 810183a:	60da      	str	r2, [r3, #12]
 810183c:	611a      	str	r2, [r3, #16]
 810183e:	615a      	str	r2, [r3, #20]
 8101840:	619a      	str	r2, [r3, #24]
    char data[32] = {0};
 8101842:	f607 03f8 	addw	r3, r7, #2296	@ 0x8f8
 8101846:	f6a3 03a4 	subw	r3, r3, #2212	@ 0x8a4
 810184a:	2200      	movs	r2, #0
 810184c:	601a      	str	r2, [r3, #0]
 810184e:	3304      	adds	r3, #4
 8101850:	2200      	movs	r2, #0
 8101852:	601a      	str	r2, [r3, #0]
 8101854:	605a      	str	r2, [r3, #4]
 8101856:	609a      	str	r2, [r3, #8]
 8101858:	60da      	str	r2, [r3, #12]
 810185a:	611a      	str	r2, [r3, #16]
 810185c:	615a      	str	r2, [r3, #20]
 810185e:	619a      	str	r2, [r3, #24]

    for (int i = 0; i < token_count; i++) {
 8101860:	2300      	movs	r3, #0
 8101862:	f8c7 38f4 	str.w	r3, [r7, #2292]	@ 0x8f4
 8101866:	e0e3      	b.n	8101a30 <parse_and_print_json+0x2a8>
 8101868:	0810aed8 	.word	0x0810aed8
 810186c:	0810aef4 	.word	0x0810aef4
        if (i == 1) { // Token 1
 8101870:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	@ 0x8f4
 8101874:	2b01      	cmp	r3, #1
 8101876:	d144      	bne.n	8101902 <parse_and_print_json+0x17a>
            snprintf(key, tokens[i].end - tokens[i].start + 1, "%.*s", tokens[i].end - tokens[i].start, json_string + tokens[i].start);
 8101878:	f607 03f8 	addw	r3, r7, #2296	@ 0x8f8
 810187c:	f6a3 0244 	subw	r2, r3, #2116	@ 0x844
 8101880:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	@ 0x8f4
 8101884:	011b      	lsls	r3, r3, #4
 8101886:	4413      	add	r3, r2
 8101888:	3308      	adds	r3, #8
 810188a:	681a      	ldr	r2, [r3, #0]
 810188c:	f607 03f8 	addw	r3, r7, #2296	@ 0x8f8
 8101890:	f6a3 0144 	subw	r1, r3, #2116	@ 0x844
 8101894:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	@ 0x8f4
 8101898:	011b      	lsls	r3, r3, #4
 810189a:	440b      	add	r3, r1
 810189c:	3304      	adds	r3, #4
 810189e:	681b      	ldr	r3, [r3, #0]
 81018a0:	1ad3      	subs	r3, r2, r3
 81018a2:	3301      	adds	r3, #1
 81018a4:	461c      	mov	r4, r3
 81018a6:	f607 03f8 	addw	r3, r7, #2296	@ 0x8f8
 81018aa:	f6a3 0244 	subw	r2, r3, #2116	@ 0x844
 81018ae:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	@ 0x8f4
 81018b2:	011b      	lsls	r3, r3, #4
 81018b4:	4413      	add	r3, r2
 81018b6:	3308      	adds	r3, #8
 81018b8:	681a      	ldr	r2, [r3, #0]
 81018ba:	f607 03f8 	addw	r3, r7, #2296	@ 0x8f8
 81018be:	f6a3 0144 	subw	r1, r3, #2116	@ 0x844
 81018c2:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	@ 0x8f4
 81018c6:	011b      	lsls	r3, r3, #4
 81018c8:	440b      	add	r3, r1
 81018ca:	3304      	adds	r3, #4
 81018cc:	681b      	ldr	r3, [r3, #0]
 81018ce:	1ad1      	subs	r1, r2, r3
 81018d0:	f607 03f8 	addw	r3, r7, #2296	@ 0x8f8
 81018d4:	f6a3 0244 	subw	r2, r3, #2116	@ 0x844
 81018d8:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	@ 0x8f4
 81018dc:	011b      	lsls	r3, r3, #4
 81018de:	4413      	add	r3, r2
 81018e0:	3304      	adds	r3, #4
 81018e2:	681b      	ldr	r3, [r3, #0]
 81018e4:	461a      	mov	r2, r3
 81018e6:	f607 03f8 	addw	r3, r7, #2296	@ 0x8f8
 81018ea:	f6a3 03f4 	subw	r3, r3, #2292	@ 0x8f4
 81018ee:	681b      	ldr	r3, [r3, #0]
 81018f0:	4413      	add	r3, r2
 81018f2:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 81018f6:	9300      	str	r3, [sp, #0]
 81018f8:	460b      	mov	r3, r1
 81018fa:	4ac9      	ldr	r2, [pc, #804]	@ (8101c20 <parse_and_print_json+0x498>)
 81018fc:	4621      	mov	r1, r4
 81018fe:	f007 f98b 	bl	8108c18 <sniprintf>
        }
        if (i == 3) { // Token 2
 8101902:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	@ 0x8f4
 8101906:	2b03      	cmp	r3, #3
 8101908:	d144      	bne.n	8101994 <parse_and_print_json+0x20c>
            snprintf(cmd, tokens[i].end - tokens[i].start + 1, "%.*s", tokens[i].end - tokens[i].start, json_string + tokens[i].start);
 810190a:	f607 03f8 	addw	r3, r7, #2296	@ 0x8f8
 810190e:	f6a3 0244 	subw	r2, r3, #2116	@ 0x844
 8101912:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	@ 0x8f4
 8101916:	011b      	lsls	r3, r3, #4
 8101918:	4413      	add	r3, r2
 810191a:	3308      	adds	r3, #8
 810191c:	681a      	ldr	r2, [r3, #0]
 810191e:	f607 03f8 	addw	r3, r7, #2296	@ 0x8f8
 8101922:	f6a3 0144 	subw	r1, r3, #2116	@ 0x844
 8101926:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	@ 0x8f4
 810192a:	011b      	lsls	r3, r3, #4
 810192c:	440b      	add	r3, r1
 810192e:	3304      	adds	r3, #4
 8101930:	681b      	ldr	r3, [r3, #0]
 8101932:	1ad3      	subs	r3, r2, r3
 8101934:	3301      	adds	r3, #1
 8101936:	461c      	mov	r4, r3
 8101938:	f607 03f8 	addw	r3, r7, #2296	@ 0x8f8
 810193c:	f6a3 0244 	subw	r2, r3, #2116	@ 0x844
 8101940:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	@ 0x8f4
 8101944:	011b      	lsls	r3, r3, #4
 8101946:	4413      	add	r3, r2
 8101948:	3308      	adds	r3, #8
 810194a:	681a      	ldr	r2, [r3, #0]
 810194c:	f607 03f8 	addw	r3, r7, #2296	@ 0x8f8
 8101950:	f6a3 0144 	subw	r1, r3, #2116	@ 0x844
 8101954:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	@ 0x8f4
 8101958:	011b      	lsls	r3, r3, #4
 810195a:	440b      	add	r3, r1
 810195c:	3304      	adds	r3, #4
 810195e:	681b      	ldr	r3, [r3, #0]
 8101960:	1ad1      	subs	r1, r2, r3
 8101962:	f607 03f8 	addw	r3, r7, #2296	@ 0x8f8
 8101966:	f6a3 0244 	subw	r2, r3, #2116	@ 0x844
 810196a:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	@ 0x8f4
 810196e:	011b      	lsls	r3, r3, #4
 8101970:	4413      	add	r3, r2
 8101972:	3304      	adds	r3, #4
 8101974:	681b      	ldr	r3, [r3, #0]
 8101976:	461a      	mov	r2, r3
 8101978:	f607 03f8 	addw	r3, r7, #2296	@ 0x8f8
 810197c:	f6a3 03f4 	subw	r3, r3, #2292	@ 0x8f4
 8101980:	681b      	ldr	r3, [r3, #0]
 8101982:	4413      	add	r3, r2
 8101984:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 8101988:	9300      	str	r3, [sp, #0]
 810198a:	460b      	mov	r3, r1
 810198c:	4aa4      	ldr	r2, [pc, #656]	@ (8101c20 <parse_and_print_json+0x498>)
 810198e:	4621      	mov	r1, r4
 8101990:	f007 f942 	bl	8108c18 <sniprintf>
        }
        if (i == 4) { // Token 4
 8101994:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	@ 0x8f4
 8101998:	2b04      	cmp	r3, #4
 810199a:	d144      	bne.n	8101a26 <parse_and_print_json+0x29e>
            snprintf(data, tokens[i].end - tokens[i].start + 1, "%.*s", tokens[i].end - tokens[i].start, json_string + tokens[i].start);
 810199c:	f607 03f8 	addw	r3, r7, #2296	@ 0x8f8
 81019a0:	f6a3 0244 	subw	r2, r3, #2116	@ 0x844
 81019a4:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	@ 0x8f4
 81019a8:	011b      	lsls	r3, r3, #4
 81019aa:	4413      	add	r3, r2
 81019ac:	3308      	adds	r3, #8
 81019ae:	681a      	ldr	r2, [r3, #0]
 81019b0:	f607 03f8 	addw	r3, r7, #2296	@ 0x8f8
 81019b4:	f6a3 0144 	subw	r1, r3, #2116	@ 0x844
 81019b8:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	@ 0x8f4
 81019bc:	011b      	lsls	r3, r3, #4
 81019be:	440b      	add	r3, r1
 81019c0:	3304      	adds	r3, #4
 81019c2:	681b      	ldr	r3, [r3, #0]
 81019c4:	1ad3      	subs	r3, r2, r3
 81019c6:	3301      	adds	r3, #1
 81019c8:	461c      	mov	r4, r3
 81019ca:	f607 03f8 	addw	r3, r7, #2296	@ 0x8f8
 81019ce:	f6a3 0244 	subw	r2, r3, #2116	@ 0x844
 81019d2:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	@ 0x8f4
 81019d6:	011b      	lsls	r3, r3, #4
 81019d8:	4413      	add	r3, r2
 81019da:	3308      	adds	r3, #8
 81019dc:	681a      	ldr	r2, [r3, #0]
 81019de:	f607 03f8 	addw	r3, r7, #2296	@ 0x8f8
 81019e2:	f6a3 0144 	subw	r1, r3, #2116	@ 0x844
 81019e6:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	@ 0x8f4
 81019ea:	011b      	lsls	r3, r3, #4
 81019ec:	440b      	add	r3, r1
 81019ee:	3304      	adds	r3, #4
 81019f0:	681b      	ldr	r3, [r3, #0]
 81019f2:	1ad1      	subs	r1, r2, r3
 81019f4:	f607 03f8 	addw	r3, r7, #2296	@ 0x8f8
 81019f8:	f6a3 0244 	subw	r2, r3, #2116	@ 0x844
 81019fc:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	@ 0x8f4
 8101a00:	011b      	lsls	r3, r3, #4
 8101a02:	4413      	add	r3, r2
 8101a04:	3304      	adds	r3, #4
 8101a06:	681b      	ldr	r3, [r3, #0]
 8101a08:	461a      	mov	r2, r3
 8101a0a:	f607 03f8 	addw	r3, r7, #2296	@ 0x8f8
 8101a0e:	f6a3 03f4 	subw	r3, r3, #2292	@ 0x8f4
 8101a12:	681b      	ldr	r3, [r3, #0]
 8101a14:	4413      	add	r3, r2
 8101a16:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8101a1a:	9300      	str	r3, [sp, #0]
 8101a1c:	460b      	mov	r3, r1
 8101a1e:	4a80      	ldr	r2, [pc, #512]	@ (8101c20 <parse_and_print_json+0x498>)
 8101a20:	4621      	mov	r1, r4
 8101a22:	f007 f8f9 	bl	8108c18 <sniprintf>
    for (int i = 0; i < token_count; i++) {
 8101a26:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	@ 0x8f4
 8101a2a:	3301      	adds	r3, #1
 8101a2c:	f8c7 38f4 	str.w	r3, [r7, #2292]	@ 0x8f4
 8101a30:	f8d7 28f4 	ldr.w	r2, [r7, #2292]	@ 0x8f4
 8101a34:	f8d7 38ec 	ldr.w	r3, [r7, #2284]	@ 0x8ec
 8101a38:	429a      	cmp	r2, r3
 8101a3a:	f6ff af19 	blt.w	8101870 <parse_and_print_json+0xe8>
        }
    }


    if (strcmp(key, "i2c") == 0) {
 8101a3e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8101a42:	4978      	ldr	r1, [pc, #480]	@ (8101c24 <parse_and_print_json+0x49c>)
 8101a44:	4618      	mov	r0, r3
 8101a46:	f7fe fc4b 	bl	81002e0 <strcmp>
 8101a4a:	4603      	mov	r3, r0
 8101a4c:	2b00      	cmp	r3, #0
 8101a4e:	f040 80b2 	bne.w	8101bb6 <parse_and_print_json+0x42e>
    	printf("Got I2C Laser CMD\r\n");
 8101a52:	4875      	ldr	r0, [pc, #468]	@ (8101c28 <parse_and_print_json+0x4a0>)
 8101a54:	f007 f8d8 	bl	8108c08 <puts>
    	uint8_t numeric_value = (uint8_t)atoi(data);
 8101a58:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8101a5c:	4618      	mov	r0, r3
 8101a5e:	f006 fa8b 	bl	8107f78 <atoi>
 8101a62:	4603      	mov	r3, r0
 8101a64:	b2da      	uxtb	r2, r3
 8101a66:	f607 03f8 	addw	r3, r7, #2296	@ 0x8f8
 8101a6a:	f6a3 03a5 	subw	r3, r3, #2213	@ 0x8a5
 8101a6e:	701a      	strb	r2, [r3, #0]
        if (strcmp(cmd, "laser") == 0) {
 8101a70:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8101a74:	496d      	ldr	r1, [pc, #436]	@ (8101c2c <parse_and_print_json+0x4a4>)
 8101a76:	4618      	mov	r0, r3
 8101a78:	f7fe fc32 	bl	81002e0 <strcmp>
 8101a7c:	4603      	mov	r3, r0
 8101a7e:	2b00      	cmp	r3, #0
 8101a80:	d115      	bne.n	8101aae <parse_and_print_json+0x326>
			int ret = 0;
 8101a82:	2300      	movs	r3, #0
 8101a84:	f8c7 38e8 	str.w	r3, [r7, #2280]	@ 0x8e8
        	ret = I2C_Write(&ll_i2c4, 0x26, 0, &numeric_value, 1);
 8101a88:	f107 0353 	add.w	r3, r7, #83	@ 0x53
 8101a8c:	2201      	movs	r2, #1
 8101a8e:	9200      	str	r2, [sp, #0]
 8101a90:	2200      	movs	r2, #0
 8101a92:	2126      	movs	r1, #38	@ 0x26
 8101a94:	4866      	ldr	r0, [pc, #408]	@ (8101c30 <parse_and_print_json+0x4a8>)
 8101a96:	f000 ff37 	bl	8102908 <I2C_Write>
 8101a9a:	4603      	mov	r3, r0
 8101a9c:	f8c7 38e8 	str.w	r3, [r7, #2280]	@ 0x8e8
        	if(ret!= Status_OK){
 8101aa0:	f8d7 38e8 	ldr.w	r3, [r7, #2280]	@ 0x8e8
 8101aa4:	2b00      	cmp	r3, #0
 8101aa6:	d002      	beq.n	8101aae <parse_and_print_json+0x326>
        		printf("I2C Error \r\n");
 8101aa8:	4862      	ldr	r0, [pc, #392]	@ (8101c34 <parse_and_print_json+0x4ac>)
 8101aaa:	f007 f8ad 	bl	8108c08 <puts>
        	}
        }
        if (strcmp(cmd, "dac") == 0) {
 8101aae:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8101ab2:	4961      	ldr	r1, [pc, #388]	@ (8101c38 <parse_and_print_json+0x4b0>)
 8101ab4:	4618      	mov	r0, r3
 8101ab6:	f7fe fc13 	bl	81002e0 <strcmp>
 8101aba:	4603      	mov	r3, r0
 8101abc:	2b00      	cmp	r3, #0
 8101abe:	d10f      	bne.n	8101ae0 <parse_and_print_json+0x358>
        	dac_fake = numeric_value;
 8101ac0:	f607 03f8 	addw	r3, r7, #2296	@ 0x8f8
 8101ac4:	f6a3 03a5 	subw	r3, r3, #2213	@ 0x8a5
 8101ac8:	781a      	ldrb	r2, [r3, #0]
 8101aca:	4b5c      	ldr	r3, [pc, #368]	@ (8101c3c <parse_and_print_json+0x4b4>)
 8101acc:	701a      	strb	r2, [r3, #0]
			I2C_Write(&ll_i2c4, 0x26, 1, &numeric_value, 1);
 8101ace:	f107 0353 	add.w	r3, r7, #83	@ 0x53
 8101ad2:	2201      	movs	r2, #1
 8101ad4:	9200      	str	r2, [sp, #0]
 8101ad6:	2201      	movs	r2, #1
 8101ad8:	2126      	movs	r1, #38	@ 0x26
 8101ada:	4855      	ldr	r0, [pc, #340]	@ (8101c30 <parse_and_print_json+0x4a8>)
 8101adc:	f000 ff14 	bl	8102908 <I2C_Write>
        }
        if (strcmp(cmd, "ampe") == 0) {
 8101ae0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8101ae4:	4956      	ldr	r1, [pc, #344]	@ (8101c40 <parse_and_print_json+0x4b8>)
 8101ae6:	4618      	mov	r0, r3
 8101ae8:	f7fe fbfa 	bl	81002e0 <strcmp>
 8101aec:	4603      	mov	r3, r0
 8101aee:	2b00      	cmp	r3, #0
 8101af0:	d161      	bne.n	8101bb6 <parse_and_print_json+0x42e>
        	uint8_t ampemsb=0;
 8101af2:	f607 03f8 	addw	r3, r7, #2296	@ 0x8f8
 8101af6:	f6a3 03a6 	subw	r3, r3, #2214	@ 0x8a6
 8101afa:	2200      	movs	r2, #0
 8101afc:	701a      	strb	r2, [r3, #0]
        	uint8_t ampelsb=0;
 8101afe:	f607 03f8 	addw	r3, r7, #2296	@ 0x8f8
 8101b02:	f6a3 03a7 	subw	r3, r3, #2215	@ 0x8a7
 8101b06:	2200      	movs	r2, #0
 8101b08:	701a      	strb	r2, [r3, #0]
        	int ret = 0;
 8101b0a:	2300      	movs	r3, #0
 8101b0c:	f8c7 38e4 	str.w	r3, [r7, #2276]	@ 0x8e4
        	ret = I2C_Read_NOSTOP(&ll_i2c4, 0x26, 4, &ampemsb, 1);
 8101b10:	f107 0352 	add.w	r3, r7, #82	@ 0x52
 8101b14:	2201      	movs	r2, #1
 8101b16:	9200      	str	r2, [sp, #0]
 8101b18:	2204      	movs	r2, #4
 8101b1a:	2126      	movs	r1, #38	@ 0x26
 8101b1c:	4844      	ldr	r0, [pc, #272]	@ (8101c30 <parse_and_print_json+0x4a8>)
 8101b1e:	f000 ffb9 	bl	8102a94 <I2C_Read_NOSTOP>
 8101b22:	4603      	mov	r3, r0
 8101b24:	f8c7 38e4 	str.w	r3, [r7, #2276]	@ 0x8e4
        	if(ret!= Status_OK){
 8101b28:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	@ 0x8e4
 8101b2c:	2b00      	cmp	r3, #0
 8101b2e:	d002      	beq.n	8101b36 <parse_and_print_json+0x3ae>
        		printf("I2C Error \r\n");
 8101b30:	4840      	ldr	r0, [pc, #256]	@ (8101c34 <parse_and_print_json+0x4ac>)
 8101b32:	f007 f869 	bl	8108c08 <puts>
        	}
        	ret = I2C_Read_NOSTOP(&ll_i2c4, 0x26, 5, &ampelsb, 1);
 8101b36:	f107 0351 	add.w	r3, r7, #81	@ 0x51
 8101b3a:	2201      	movs	r2, #1
 8101b3c:	9200      	str	r2, [sp, #0]
 8101b3e:	2205      	movs	r2, #5
 8101b40:	2126      	movs	r1, #38	@ 0x26
 8101b42:	483b      	ldr	r0, [pc, #236]	@ (8101c30 <parse_and_print_json+0x4a8>)
 8101b44:	f000 ffa6 	bl	8102a94 <I2C_Read_NOSTOP>
 8101b48:	4603      	mov	r3, r0
 8101b4a:	f8c7 38e4 	str.w	r3, [r7, #2276]	@ 0x8e4
        	if(ret!= Status_OK){
 8101b4e:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	@ 0x8e4
 8101b52:	2b00      	cmp	r3, #0
 8101b54:	d002      	beq.n	8101b5c <parse_and_print_json+0x3d4>
        		printf("I2C Error \r\n");
 8101b56:	4837      	ldr	r0, [pc, #220]	@ (8101c34 <parse_and_print_json+0x4ac>)
 8101b58:	f007 f856 	bl	8108c08 <puts>
        	}
        	uint16_t ampe = ((uint16_t)ampemsb << 8) | (uint16_t)ampelsb;
 8101b5c:	f607 03f8 	addw	r3, r7, #2296	@ 0x8f8
 8101b60:	f6a3 03a6 	subw	r3, r3, #2214	@ 0x8a6
 8101b64:	781b      	ldrb	r3, [r3, #0]
 8101b66:	021b      	lsls	r3, r3, #8
 8101b68:	b21a      	sxth	r2, r3
 8101b6a:	f607 03f8 	addw	r3, r7, #2296	@ 0x8f8
 8101b6e:	f6a3 03a7 	subw	r3, r3, #2215	@ 0x8a7
 8101b72:	781b      	ldrb	r3, [r3, #0]
 8101b74:	b21b      	sxth	r3, r3
 8101b76:	4313      	orrs	r3, r2
 8101b78:	b21b      	sxth	r3, r3
 8101b7a:	f8a7 38e2 	strh.w	r3, [r7, #2274]	@ 0x8e2
        	printf("Current: %d ma", ampe);
 8101b7e:	f8b7 38e2 	ldrh.w	r3, [r7, #2274]	@ 0x8e2
 8101b82:	4619      	mov	r1, r3
 8101b84:	482f      	ldr	r0, [pc, #188]	@ (8101c44 <parse_and_print_json+0x4bc>)
 8101b86:	f006 ffd7 	bl	8108b38 <iprintf>
            char conxtent[64];
            snprintf(conxtent, sizeof(conxtent), "\r\n --->[CM4]: Laser Current: %d mA", ampe);
 8101b8a:	f8b7 38e2 	ldrh.w	r3, [r7, #2274]	@ 0x8e2
 8101b8e:	f107 000c 	add.w	r0, r7, #12
 8101b92:	4a2d      	ldr	r2, [pc, #180]	@ (8101c48 <parse_and_print_json+0x4c0>)
 8101b94:	2140      	movs	r1, #64	@ 0x40
 8101b96:	f007 f83f 	bl	8108c18 <sniprintf>
            ringbuff_write(rb_cm4_to_cm7, conxtent, strlen(conxtent));
 8101b9a:	4b2c      	ldr	r3, [pc, #176]	@ (8101c4c <parse_and_print_json+0x4c4>)
 8101b9c:	681c      	ldr	r4, [r3, #0]
 8101b9e:	f107 030c 	add.w	r3, r7, #12
 8101ba2:	4618      	mov	r0, r3
 8101ba4:	f7fe fbfc 	bl	81003a0 <strlen>
 8101ba8:	4602      	mov	r2, r0
 8101baa:	f107 030c 	add.w	r3, r7, #12
 8101bae:	4619      	mov	r1, r3
 8101bb0:	4620      	mov	r0, r4
 8101bb2:	f000 fbd0 	bl	8102356 <ringbuff_write>
        }
    }

    if (strcmp(key, "spi") == 0) {
 8101bb6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8101bba:	4925      	ldr	r1, [pc, #148]	@ (8101c50 <parse_and_print_json+0x4c8>)
 8101bbc:	4618      	mov	r0, r3
 8101bbe:	f7fe fb8f 	bl	81002e0 <strcmp>
 8101bc2:	4603      	mov	r3, r0
 8101bc4:	2b00      	cmp	r3, #0
 8101bc6:	f040 812b 	bne.w	8101e20 <parse_and_print_json+0x698>
    	printf("Got SPI Photodiode CMD\r\n");
 8101bca:	4822      	ldr	r0, [pc, #136]	@ (8101c54 <parse_and_print_json+0x4cc>)
 8101bcc:	f007 f81c 	bl	8108c08 <puts>
    	uint8_t numeric_value = atoi(data);
 8101bd0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8101bd4:	4618      	mov	r0, r3
 8101bd6:	f006 f9cf 	bl	8107f78 <atoi>
 8101bda:	4603      	mov	r3, r0
 8101bdc:	f887 38e1 	strb.w	r3, [r7, #2273]	@ 0x8e1
    	uint8_t fake = 0;
 8101be0:	2300      	movs	r3, #0
 8101be2:	f887 38f3 	strb.w	r3, [r7, #2291]	@ 0x8f3
        if (strcmp(cmd, "read") == 0) {
 8101be6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8101bea:	491b      	ldr	r1, [pc, #108]	@ (8101c58 <parse_and_print_json+0x4d0>)
 8101bec:	4618      	mov	r0, r3
 8101bee:	f7fe fb77 	bl	81002e0 <strcmp>
 8101bf2:	4603      	mov	r3, r0
 8101bf4:	2b00      	cmp	r3, #0
 8101bf6:	f040 8113 	bne.w	8101e20 <parse_and_print_json+0x698>
        	int status_i2c = 0;
 8101bfa:	2300      	movs	r3, #0
 8101bfc:	f8c7 38dc 	str.w	r3, [r7, #2268]	@ 0x8dc
        	status_i2c = activate_port(numeric_value);
 8101c00:	f897 38e1 	ldrb.w	r3, [r7, #2273]	@ 0x8e1
 8101c04:	4618      	mov	r0, r3
 8101c06:	f000 f955 	bl	8101eb4 <activate_port>
 8101c0a:	f8c7 08dc 	str.w	r0, [r7, #2268]	@ 0x8dc
        	if(status_i2c != 0){
 8101c0e:	f8d7 38dc 	ldr.w	r3, [r7, #2268]	@ 0x8dc
 8101c12:	2b00      	cmp	r3, #0
 8101c14:	d022      	beq.n	8101c5c <parse_and_print_json+0x4d4>
        		fake = 1;
 8101c16:	2301      	movs	r3, #1
 8101c18:	f887 38f3 	strb.w	r3, [r7, #2291]	@ 0x8f3
 8101c1c:	e021      	b.n	8101c62 <parse_and_print_json+0x4da>
 8101c1e:	bf00      	nop
 8101c20:	0810af08 	.word	0x0810af08
 8101c24:	0810af10 	.word	0x0810af10
 8101c28:	0810af14 	.word	0x0810af14
 8101c2c:	0810af28 	.word	0x0810af28
 8101c30:	100004d8 	.word	0x100004d8
 8101c34:	0810af30 	.word	0x0810af30
 8101c38:	0810af3c 	.word	0x0810af3c
 8101c3c:	1000023c 	.word	0x1000023c
 8101c40:	0810af40 	.word	0x0810af40
 8101c44:	0810af48 	.word	0x0810af48
 8101c48:	0810af58 	.word	0x0810af58
 8101c4c:	10000008 	.word	0x10000008
 8101c50:	0810af7c 	.word	0x0810af7c
 8101c54:	0810af80 	.word	0x0810af80
 8101c58:	0810af98 	.word	0x0810af98
        	}else{
        		fake = 0;
 8101c5c:	2300      	movs	r3, #0
 8101c5e:	f887 38f3 	strb.w	r3, [r7, #2291]	@ 0x8f3
        	}

        	if(fake == 1){
 8101c62:	f897 38f3 	ldrb.w	r3, [r7, #2291]	@ 0x8f3
 8101c66:	2b01      	cmp	r3, #1
 8101c68:	d13f      	bne.n	8101cea <parse_and_print_json+0x562>
        		float dfake = (float)dac_fake / 85.0;
 8101c6a:	4b6f      	ldr	r3, [pc, #444]	@ (8101e28 <parse_and_print_json+0x6a0>)
 8101c6c:	781b      	ldrb	r3, [r3, #0]
 8101c6e:	ee07 3a90 	vmov	s15, r3
 8101c72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8101c76:	eddf 6a6d 	vldr	s13, [pc, #436]	@ 8101e2c <parse_and_print_json+0x6a4>
 8101c7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8101c7e:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 8101c82:	edc3 7a00 	vstr	s15, [r3]
        		float random_delta = get_random_delta();
 8101c86:	f000 f8df 	bl	8101e48 <get_random_delta>
 8101c8a:	f607 03c4 	addw	r3, r7, #2244	@ 0x8c4
 8101c8e:	ed83 0a00 	vstr	s0, [r3]
        		float value = dfake+ random_delta;
 8101c92:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 8101c96:	ed93 7a00 	vldr	s14, [r3]
 8101c9a:	f607 03c4 	addw	r3, r7, #2244	@ 0x8c4
 8101c9e:	edd3 7a00 	vldr	s15, [r3]
 8101ca2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101ca6:	f507 630c 	add.w	r3, r7, #2240	@ 0x8c0
 8101caa:	edc3 7a00 	vstr	s15, [r3]
        		char conxtent[64];
        		snprintf(conxtent, sizeof(conxtent), "\r\n --->[CM4]: *Photodiode Voltage: %.2f V", value);
 8101cae:	f507 630c 	add.w	r3, r7, #2240	@ 0x8c0
 8101cb2:	6818      	ldr	r0, [r3, #0]
 8101cb4:	f7fe fce0 	bl	8100678 <__aeabi_f2d>
 8101cb8:	4602      	mov	r2, r0
 8101cba:	460b      	mov	r3, r1
 8101cbc:	f107 000c 	add.w	r0, r7, #12
 8101cc0:	e9cd 2300 	strd	r2, r3, [sp]
 8101cc4:	4a5a      	ldr	r2, [pc, #360]	@ (8101e30 <parse_and_print_json+0x6a8>)
 8101cc6:	2140      	movs	r1, #64	@ 0x40
 8101cc8:	f006 ffa6 	bl	8108c18 <sniprintf>
        		ringbuff_write(rb_cm4_to_cm7, conxtent, strlen(conxtent));
 8101ccc:	4b59      	ldr	r3, [pc, #356]	@ (8101e34 <parse_and_print_json+0x6ac>)
 8101cce:	681c      	ldr	r4, [r3, #0]
 8101cd0:	f107 030c 	add.w	r3, r7, #12
 8101cd4:	4618      	mov	r0, r3
 8101cd6:	f7fe fb63 	bl	81003a0 <strlen>
 8101cda:	4602      	mov	r2, r0
 8101cdc:	f107 030c 	add.w	r3, r7, #12
 8101ce0:	4619      	mov	r1, r3
 8101ce2:	4620      	mov	r0, r4
 8101ce4:	f000 fb37 	bl	8102356 <ringbuff_write>
 8101ce8:	e09a      	b.n	8101e20 <parse_and_print_json+0x698>
        		return;
        	}

        	 uint16_t adc_value = 0;
 8101cea:	f607 03f8 	addw	r3, r7, #2296	@ 0x8f8
 8101cee:	f6a3 03aa 	subw	r3, r3, #2218	@ 0x8aa
 8101cf2:	2200      	movs	r2, #0
 8101cf4:	801a      	strh	r2, [r3, #0]
        	 ADS8327_Read(&adc_value);
 8101cf6:	f107 034e 	add.w	r3, r7, #78	@ 0x4e
 8101cfa:	4618      	mov	r0, r3
 8101cfc:	f001 fa28 	bl	8103150 <ADS8327_Read>
        	 if((adc_value == 0) ||(adc_value == 0xFF)){
 8101d00:	f607 03f8 	addw	r3, r7, #2296	@ 0x8f8
 8101d04:	f6a3 03aa 	subw	r3, r3, #2218	@ 0x8aa
 8101d08:	881b      	ldrh	r3, [r3, #0]
 8101d0a:	2b00      	cmp	r3, #0
 8101d0c:	d006      	beq.n	8101d1c <parse_and_print_json+0x594>
 8101d0e:	f607 03f8 	addw	r3, r7, #2296	@ 0x8f8
 8101d12:	f6a3 03aa 	subw	r3, r3, #2218	@ 0x8aa
 8101d16:	881b      	ldrh	r3, [r3, #0]
 8101d18:	2bff      	cmp	r3, #255	@ 0xff
 8101d1a:	d103      	bne.n	8101d24 <parse_and_print_json+0x59c>
           		fake = 1;
 8101d1c:	2301      	movs	r3, #1
 8101d1e:	f887 38f3 	strb.w	r3, [r7, #2291]	@ 0x8f3
 8101d22:	e002      	b.n	8101d2a <parse_and_print_json+0x5a2>
             }else{
             	fake = 0;
 8101d24:	2300      	movs	r3, #0
 8101d26:	f887 38f3 	strb.w	r3, [r7, #2291]	@ 0x8f3
             }
         	if(fake == 1){
 8101d2a:	f897 38f3 	ldrb.w	r3, [r7, #2291]	@ 0x8f3
 8101d2e:	2b01      	cmp	r3, #1
 8101d30:	d13f      	bne.n	8101db2 <parse_and_print_json+0x62a>
         		float dfake = (float)dac_fake / 85.0;
 8101d32:	4b3d      	ldr	r3, [pc, #244]	@ (8101e28 <parse_and_print_json+0x6a0>)
 8101d34:	781b      	ldrb	r3, [r3, #0]
 8101d36:	ee07 3a90 	vmov	s15, r3
 8101d3a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8101d3e:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8101e2c <parse_and_print_json+0x6a4>
 8101d42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8101d46:	f607 03d4 	addw	r3, r7, #2260	@ 0x8d4
 8101d4a:	edc3 7a00 	vstr	s15, [r3]
         		float random_delta = get_random_delta();
 8101d4e:	f000 f87b 	bl	8101e48 <get_random_delta>
 8101d52:	f507 630d 	add.w	r3, r7, #2256	@ 0x8d0
 8101d56:	ed83 0a00 	vstr	s0, [r3]
         		float value = dfake+ random_delta;
 8101d5a:	f607 03d4 	addw	r3, r7, #2260	@ 0x8d4
 8101d5e:	ed93 7a00 	vldr	s14, [r3]
 8101d62:	f507 630d 	add.w	r3, r7, #2256	@ 0x8d0
 8101d66:	edd3 7a00 	vldr	s15, [r3]
 8101d6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101d6e:	f607 03cc 	addw	r3, r7, #2252	@ 0x8cc
 8101d72:	edc3 7a00 	vstr	s15, [r3]
         		char conxtent[64];
         		snprintf(conxtent, sizeof(conxtent), "\r\n --->[CM4]: *Photodiode Voltage: %.2f V", value);
 8101d76:	f607 03cc 	addw	r3, r7, #2252	@ 0x8cc
 8101d7a:	6818      	ldr	r0, [r3, #0]
 8101d7c:	f7fe fc7c 	bl	8100678 <__aeabi_f2d>
 8101d80:	4602      	mov	r2, r0
 8101d82:	460b      	mov	r3, r1
 8101d84:	f107 000c 	add.w	r0, r7, #12
 8101d88:	e9cd 2300 	strd	r2, r3, [sp]
 8101d8c:	4a28      	ldr	r2, [pc, #160]	@ (8101e30 <parse_and_print_json+0x6a8>)
 8101d8e:	2140      	movs	r1, #64	@ 0x40
 8101d90:	f006 ff42 	bl	8108c18 <sniprintf>
         		ringbuff_write(rb_cm4_to_cm7, conxtent, strlen(conxtent));
 8101d94:	4b27      	ldr	r3, [pc, #156]	@ (8101e34 <parse_and_print_json+0x6ac>)
 8101d96:	681c      	ldr	r4, [r3, #0]
 8101d98:	f107 030c 	add.w	r3, r7, #12
 8101d9c:	4618      	mov	r0, r3
 8101d9e:	f7fe faff 	bl	81003a0 <strlen>
 8101da2:	4602      	mov	r2, r0
 8101da4:	f107 030c 	add.w	r3, r7, #12
 8101da8:	4619      	mov	r1, r3
 8101daa:	4620      	mov	r0, r4
 8101dac:	f000 fad3 	bl	8102356 <ringbuff_write>
 8101db0:	e036      	b.n	8101e20 <parse_and_print_json+0x698>
         		return;
         	}
        	 printf("adc value = %d \r\n", adc_value);
 8101db2:	f607 03f8 	addw	r3, r7, #2296	@ 0x8f8
 8101db6:	f6a3 03aa 	subw	r3, r3, #2218	@ 0x8aa
 8101dba:	881b      	ldrh	r3, [r3, #0]
 8101dbc:	4619      	mov	r1, r3
 8101dbe:	481e      	ldr	r0, [pc, #120]	@ (8101e38 <parse_and_print_json+0x6b0>)
 8101dc0:	f006 feba 	bl	8108b38 <iprintf>
        	 float value = (float)adc_value / 21845.0;
 8101dc4:	f607 03f8 	addw	r3, r7, #2296	@ 0x8f8
 8101dc8:	f6a3 03aa 	subw	r3, r3, #2218	@ 0x8aa
 8101dcc:	881b      	ldrh	r3, [r3, #0]
 8101dce:	ee07 3a90 	vmov	s15, r3
 8101dd2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8101dd6:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8101e3c <parse_and_print_json+0x6b4>
 8101dda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8101dde:	f607 03d8 	addw	r3, r7, #2264	@ 0x8d8
 8101de2:	edc3 7a00 	vstr	s15, [r3]
        	 char conxtent[64];
        	 snprintf(conxtent, sizeof(conxtent), "\r\n --->[CM4]: RPhotodiode Voltage: %.2f V", value);
 8101de6:	f607 03d8 	addw	r3, r7, #2264	@ 0x8d8
 8101dea:	6818      	ldr	r0, [r3, #0]
 8101dec:	f7fe fc44 	bl	8100678 <__aeabi_f2d>
 8101df0:	4602      	mov	r2, r0
 8101df2:	460b      	mov	r3, r1
 8101df4:	f107 000c 	add.w	r0, r7, #12
 8101df8:	e9cd 2300 	strd	r2, r3, [sp]
 8101dfc:	4a10      	ldr	r2, [pc, #64]	@ (8101e40 <parse_and_print_json+0x6b8>)
 8101dfe:	2140      	movs	r1, #64	@ 0x40
 8101e00:	f006 ff0a 	bl	8108c18 <sniprintf>
        	 ringbuff_write(rb_cm4_to_cm7, conxtent, strlen(conxtent));
 8101e04:	4b0b      	ldr	r3, [pc, #44]	@ (8101e34 <parse_and_print_json+0x6ac>)
 8101e06:	681c      	ldr	r4, [r3, #0]
 8101e08:	f107 030c 	add.w	r3, r7, #12
 8101e0c:	4618      	mov	r0, r3
 8101e0e:	f7fe fac7 	bl	81003a0 <strlen>
 8101e12:	4602      	mov	r2, r0
 8101e14:	f107 030c 	add.w	r3, r7, #12
 8101e18:	4619      	mov	r1, r3
 8101e1a:	4620      	mov	r0, r4
 8101e1c:	f000 fa9b 	bl	8102356 <ringbuff_write>
//        printf("tumotden5\r\n");
//    }
//    if (strcmp(data, "1") == 0) {
//        printf("mot\r\n");
//    }
}
 8101e20:	f607 07fc 	addw	r7, r7, #2300	@ 0x8fc
 8101e24:	46bd      	mov	sp, r7
 8101e26:	bd90      	pop	{r4, r7, pc}
 8101e28:	1000023c 	.word	0x1000023c
 8101e2c:	42aa0000 	.word	0x42aa0000
 8101e30:	0810afa0 	.word	0x0810afa0
 8101e34:	10000008 	.word	0x10000008
 8101e38:	0810afcc 	.word	0x0810afcc
 8101e3c:	46aaaa00 	.word	0x46aaaa00
 8101e40:	0810afe0 	.word	0x0810afe0
 8101e44:	00000000 	.word	0x00000000

08101e48 <get_random_delta>:

float get_random_delta() { return ((float)rand() / RAND_MAX) * 0.4 - 0.2;}
 8101e48:	b580      	push	{r7, lr}
 8101e4a:	af00      	add	r7, sp, #0
 8101e4c:	f006 f898 	bl	8107f80 <rand>
 8101e50:	ee07 0a90 	vmov	s15, r0
 8101e54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8101e58:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8101eb0 <get_random_delta+0x68>
 8101e5c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8101e60:	ee16 0a90 	vmov	r0, s13
 8101e64:	f7fe fc08 	bl	8100678 <__aeabi_f2d>
 8101e68:	a30d      	add	r3, pc, #52	@ (adr r3, 8101ea0 <get_random_delta+0x58>)
 8101e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101e6e:	f7fe fc5b 	bl	8100728 <__aeabi_dmul>
 8101e72:	4602      	mov	r2, r0
 8101e74:	460b      	mov	r3, r1
 8101e76:	4610      	mov	r0, r2
 8101e78:	4619      	mov	r1, r3
 8101e7a:	a30b      	add	r3, pc, #44	@ (adr r3, 8101ea8 <get_random_delta+0x60>)
 8101e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101e80:	f7fe fa9a 	bl	81003b8 <__aeabi_dsub>
 8101e84:	4602      	mov	r2, r0
 8101e86:	460b      	mov	r3, r1
 8101e88:	4610      	mov	r0, r2
 8101e8a:	4619      	mov	r1, r3
 8101e8c:	f7fe ff24 	bl	8100cd8 <__aeabi_d2f>
 8101e90:	4603      	mov	r3, r0
 8101e92:	ee07 3a90 	vmov	s15, r3
 8101e96:	eeb0 0a67 	vmov.f32	s0, s15
 8101e9a:	bd80      	pop	{r7, pc}
 8101e9c:	f3af 8000 	nop.w
 8101ea0:	9999999a 	.word	0x9999999a
 8101ea4:	3fd99999 	.word	0x3fd99999
 8101ea8:	9999999a 	.word	0x9999999a
 8101eac:	3fc99999 	.word	0x3fc99999
 8101eb0:	4f000000 	.word	0x4f000000

08101eb4 <activate_port>:

int activate_port(int value) {
 8101eb4:	b580      	push	{r7, lr}
 8101eb6:	b086      	sub	sp, #24
 8101eb8:	af00      	add	r7, sp, #0
 8101eba:	6078      	str	r0, [r7, #4]
    if (value < 0 || value > 47) {
 8101ebc:	687b      	ldr	r3, [r7, #4]
 8101ebe:	2b00      	cmp	r3, #0
 8101ec0:	db02      	blt.n	8101ec8 <activate_port+0x14>
 8101ec2:	687b      	ldr	r3, [r7, #4]
 8101ec4:	2b2f      	cmp	r3, #47	@ 0x2f
 8101ec6:	dd06      	ble.n	8101ed6 <activate_port+0x22>
        printf("Value out of range: %d\r\n", value);
 8101ec8:	6879      	ldr	r1, [r7, #4]
 8101eca:	484f      	ldr	r0, [pc, #316]	@ (8102008 <activate_port+0x154>)
 8101ecc:	f006 fe34 	bl	8108b38 <iprintf>
        return -1;
 8101ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8101ed4:	e094      	b.n	8102000 <activate_port+0x14c>
    }

    // Tách giá trị ENA và giá trị bên trong
    int ena_index = value / 16; // 0: ENA1, 1: ENA2, 2: ENA3
 8101ed6:	687b      	ldr	r3, [r7, #4]
 8101ed8:	2b00      	cmp	r3, #0
 8101eda:	da00      	bge.n	8101ede <activate_port+0x2a>
 8101edc:	330f      	adds	r3, #15
 8101ede:	111b      	asrs	r3, r3, #4
 8101ee0:	617b      	str	r3, [r7, #20]
    int pin_index = value % 16; // Giá trị cụ thể trong ENA (0-15)
 8101ee2:	687b      	ldr	r3, [r7, #4]
 8101ee4:	425a      	negs	r2, r3
 8101ee6:	f003 030f 	and.w	r3, r3, #15
 8101eea:	f002 020f 	and.w	r2, r2, #15
 8101eee:	bf58      	it	pl
 8101ef0:	4253      	negpl	r3, r2
 8101ef2:	613b      	str	r3, [r7, #16]

    // Đặt ENA pins
    int ret = 0;
 8101ef4:	2300      	movs	r3, #0
 8101ef6:	60fb      	str	r3, [r7, #12]
    ret = MCP23017_DigitalWrite(MCP23017_GPA6_Pin, (ena_index & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET); // Bit 2
 8101ef8:	697b      	ldr	r3, [r7, #20]
 8101efa:	109b      	asrs	r3, r3, #2
 8101efc:	b2db      	uxtb	r3, r3
 8101efe:	f003 0301 	and.w	r3, r3, #1
 8101f02:	b2db      	uxtb	r3, r3
 8101f04:	4619      	mov	r1, r3
 8101f06:	2006      	movs	r0, #6
 8101f08:	f000 ffec 	bl	8102ee4 <MCP23017_DigitalWrite>
 8101f0c:	4603      	mov	r3, r0
 8101f0e:	60fb      	str	r3, [r7, #12]
    if (ret!=0){
 8101f10:	68fb      	ldr	r3, [r7, #12]
 8101f12:	2b00      	cmp	r3, #0
 8101f14:	d002      	beq.n	8101f1c <activate_port+0x68>
    	return -1;
 8101f16:	f04f 33ff 	mov.w	r3, #4294967295
 8101f1a:	e071      	b.n	8102000 <activate_port+0x14c>
    }
    ret = MCP23017_DigitalWrite(MCP23017_GPA5_Pin, (ena_index & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET); // Bit 1
 8101f1c:	697b      	ldr	r3, [r7, #20]
 8101f1e:	105b      	asrs	r3, r3, #1
 8101f20:	b2db      	uxtb	r3, r3
 8101f22:	f003 0301 	and.w	r3, r3, #1
 8101f26:	b2db      	uxtb	r3, r3
 8101f28:	4619      	mov	r1, r3
 8101f2a:	2005      	movs	r0, #5
 8101f2c:	f000 ffda 	bl	8102ee4 <MCP23017_DigitalWrite>
 8101f30:	4603      	mov	r3, r0
 8101f32:	60fb      	str	r3, [r7, #12]
    if (ret!=0){
 8101f34:	68fb      	ldr	r3, [r7, #12]
 8101f36:	2b00      	cmp	r3, #0
 8101f38:	d002      	beq.n	8101f40 <activate_port+0x8c>
    	return -1;
 8101f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8101f3e:	e05f      	b.n	8102000 <activate_port+0x14c>
    }
    ret = MCP23017_DigitalWrite(MCP23017_GPA4_Pin, (ena_index & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET); // Bit 0
 8101f40:	697b      	ldr	r3, [r7, #20]
 8101f42:	b2db      	uxtb	r3, r3
 8101f44:	f003 0301 	and.w	r3, r3, #1
 8101f48:	b2db      	uxtb	r3, r3
 8101f4a:	4619      	mov	r1, r3
 8101f4c:	2004      	movs	r0, #4
 8101f4e:	f000 ffc9 	bl	8102ee4 <MCP23017_DigitalWrite>
 8101f52:	4603      	mov	r3, r0
 8101f54:	60fb      	str	r3, [r7, #12]
    if (ret!=0){
 8101f56:	68fb      	ldr	r3, [r7, #12]
 8101f58:	2b00      	cmp	r3, #0
 8101f5a:	d002      	beq.n	8101f62 <activate_port+0xae>
    	return -1;
 8101f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8101f60:	e04e      	b.n	8102000 <activate_port+0x14c>
    }

    // Đặt các giá trị 4 bit thấp
    ret = MCP23017_DigitalWrite(MCP23017_GPA0_Pin, (pin_index & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET); // Bit 0
 8101f62:	693b      	ldr	r3, [r7, #16]
 8101f64:	b2db      	uxtb	r3, r3
 8101f66:	f003 0301 	and.w	r3, r3, #1
 8101f6a:	b2db      	uxtb	r3, r3
 8101f6c:	4619      	mov	r1, r3
 8101f6e:	2000      	movs	r0, #0
 8101f70:	f000 ffb8 	bl	8102ee4 <MCP23017_DigitalWrite>
 8101f74:	4603      	mov	r3, r0
 8101f76:	60fb      	str	r3, [r7, #12]
    if (ret!=0){
 8101f78:	68fb      	ldr	r3, [r7, #12]
 8101f7a:	2b00      	cmp	r3, #0
 8101f7c:	d002      	beq.n	8101f84 <activate_port+0xd0>
    	return -1;
 8101f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8101f82:	e03d      	b.n	8102000 <activate_port+0x14c>
    }
    ret = MCP23017_DigitalWrite(MCP23017_GPA1_Pin, (pin_index & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET); // Bit 1
 8101f84:	693b      	ldr	r3, [r7, #16]
 8101f86:	105b      	asrs	r3, r3, #1
 8101f88:	b2db      	uxtb	r3, r3
 8101f8a:	f003 0301 	and.w	r3, r3, #1
 8101f8e:	b2db      	uxtb	r3, r3
 8101f90:	4619      	mov	r1, r3
 8101f92:	2001      	movs	r0, #1
 8101f94:	f000 ffa6 	bl	8102ee4 <MCP23017_DigitalWrite>
 8101f98:	4603      	mov	r3, r0
 8101f9a:	60fb      	str	r3, [r7, #12]
    if (ret!=0){
 8101f9c:	68fb      	ldr	r3, [r7, #12]
 8101f9e:	2b00      	cmp	r3, #0
 8101fa0:	d002      	beq.n	8101fa8 <activate_port+0xf4>
    	return -1;
 8101fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8101fa6:	e02b      	b.n	8102000 <activate_port+0x14c>
    }
    ret = MCP23017_DigitalWrite(MCP23017_GPA2_Pin, (pin_index & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET); // Bit 2
 8101fa8:	693b      	ldr	r3, [r7, #16]
 8101faa:	109b      	asrs	r3, r3, #2
 8101fac:	b2db      	uxtb	r3, r3
 8101fae:	f003 0301 	and.w	r3, r3, #1
 8101fb2:	b2db      	uxtb	r3, r3
 8101fb4:	4619      	mov	r1, r3
 8101fb6:	2002      	movs	r0, #2
 8101fb8:	f000 ff94 	bl	8102ee4 <MCP23017_DigitalWrite>
 8101fbc:	4603      	mov	r3, r0
 8101fbe:	60fb      	str	r3, [r7, #12]
    if (ret!=0){
 8101fc0:	68fb      	ldr	r3, [r7, #12]
 8101fc2:	2b00      	cmp	r3, #0
 8101fc4:	d002      	beq.n	8101fcc <activate_port+0x118>
    	return -1;
 8101fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8101fca:	e019      	b.n	8102000 <activate_port+0x14c>
    }
    ret = MCP23017_DigitalWrite(MCP23017_GPA3_Pin, (pin_index & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET); // Bit 3
 8101fcc:	693b      	ldr	r3, [r7, #16]
 8101fce:	10db      	asrs	r3, r3, #3
 8101fd0:	b2db      	uxtb	r3, r3
 8101fd2:	f003 0301 	and.w	r3, r3, #1
 8101fd6:	b2db      	uxtb	r3, r3
 8101fd8:	4619      	mov	r1, r3
 8101fda:	2003      	movs	r0, #3
 8101fdc:	f000 ff82 	bl	8102ee4 <MCP23017_DigitalWrite>
 8101fe0:	4603      	mov	r3, r0
 8101fe2:	60fb      	str	r3, [r7, #12]
    if (ret!=0){
 8101fe4:	68fb      	ldr	r3, [r7, #12]
 8101fe6:	2b00      	cmp	r3, #0
 8101fe8:	d002      	beq.n	8101ff0 <activate_port+0x13c>
    	return -1;
 8101fea:	f04f 33ff 	mov.w	r3, #4294967295
 8101fee:	e007      	b.n	8102000 <activate_port+0x14c>
    }

    printf("Activated ENA%d, Pin %d\r\n", ena_index + 1, pin_index);
 8101ff0:	697b      	ldr	r3, [r7, #20]
 8101ff2:	3301      	adds	r3, #1
 8101ff4:	693a      	ldr	r2, [r7, #16]
 8101ff6:	4619      	mov	r1, r3
 8101ff8:	4804      	ldr	r0, [pc, #16]	@ (810200c <activate_port+0x158>)
 8101ffa:	f006 fd9d 	bl	8108b38 <iprintf>
    return 0;
 8101ffe:	2300      	movs	r3, #0
}
 8102000:	4618      	mov	r0, r3
 8102002:	3718      	adds	r7, #24
 8102004:	46bd      	mov	sp, r7
 8102006:	bd80      	pop	{r7, pc}
 8102008:	0810b00c 	.word	0x0810b00c
 810200c:	0810b028 	.word	0x0810b028

08102010 <SCH_Initialize>:
  * @param  None
  * @retval None
  *****************************************************************************/

void SCH_Initialize(void)
{
 8102010:	b580      	push	{r7, lr}
 8102012:	af00      	add	r7, sp, #0
  s_SystemTick = RESET;
 8102014:	4b0d      	ldr	r3, [pc, #52]	@ (810204c <SCH_Initialize+0x3c>)
 8102016:	2200      	movs	r2, #0
 8102018:	601a      	str	r2, [r3, #0]
  s_NumOfTaskScheduled = RESET;
 810201a:	4b0d      	ldr	r3, [pc, #52]	@ (8102050 <SCH_Initialize+0x40>)
 810201c:	2200      	movs	r2, #0
 810201e:	701a      	strb	r2, [r3, #0]
  s_NumOfTimers = RESET;
 8102020:	4b0c      	ldr	r3, [pc, #48]	@ (8102054 <SCH_Initialize+0x44>)
 8102022:	2200      	movs	r2, #0
 8102024:	701a      	strb	r2, [r3, #0]

  // Initial Scheduler Context
  memset((uint8_t*)&s_TaskContext[0], RESET, (sizeof(SCH_TaskContextTypedef) * MAX_TASK));
 8102026:	22f0      	movs	r2, #240	@ 0xf0
 8102028:	2100      	movs	r1, #0
 810202a:	480b      	ldr	r0, [pc, #44]	@ (8102058 <SCH_Initialize+0x48>)
 810202c:	f006 ff00 	bl	8108e30 <memset>
  memset((uint8_t*)&s_TimerContext[0], RESET, (sizeof(SCH_TimerContextTypedef) * MAX_TIMERS));
 8102030:	22f0      	movs	r2, #240	@ 0xf0
 8102032:	2100      	movs	r1, #0
 8102034:	4809      	ldr	r0, [pc, #36]	@ (810205c <SCH_Initialize+0x4c>)
 8102036:	f006 fefb 	bl	8108e30 <memset>
  memset((uint8_t*)&s_SoftTimers[0], RESET, (sizeof(uint32_t) * SCH_TIM_LAST));
 810203a:	2208      	movs	r2, #8
 810203c:	2100      	movs	r1, #0
 810203e:	4808      	ldr	r0, [pc, #32]	@ (8102060 <SCH_Initialize+0x50>)
 8102040:	f006 fef6 	bl	8108e30 <memset>

    // Initialize Scheduler context
  systick_timer_init();
 8102044:	f000 fb58 	bl	81026f8 <systick_timer_init>
}
 8102048:	bf00      	nop
 810204a:	bd80      	pop	{r7, pc}
 810204c:	10000428 	.word	0x10000428
 8102050:	10000330 	.word	0x10000330
 8102054:	10000424 	.word	0x10000424
 8102058:	10000240 	.word	0x10000240
 810205c:	10000334 	.word	0x10000334
 8102060:	1000042c 	.word	0x1000042c

08102064 <SCH_TIM_Start>:
  * @param  const SCH_SoftTimerTypedef timer - type of soft timer
  *         const uint32_t timeInMs - time in mSec
  * @retval None
  *****************************************************************************/
void SCH_TIM_Start(const SCH_SoftTimerTypedef timer, const uint32_t timeInMs)
{
 8102064:	b480      	push	{r7}
 8102066:	b083      	sub	sp, #12
 8102068:	af00      	add	r7, sp, #0
 810206a:	4603      	mov	r3, r0
 810206c:	6039      	str	r1, [r7, #0]
 810206e:	71fb      	strb	r3, [r7, #7]
  if(timer < SCH_TIM_LAST)
 8102070:	79fb      	ldrb	r3, [r7, #7]
 8102072:	2b01      	cmp	r3, #1
 8102074:	d804      	bhi.n	8102080 <SCH_TIM_Start+0x1c>
  {
	//s_SoftTimers[timer] = timeInMs + s_SystemTick;
    s_SoftTimers[timer] = timeInMs;
 8102076:	79fb      	ldrb	r3, [r7, #7]
 8102078:	4904      	ldr	r1, [pc, #16]	@ (810208c <SCH_TIM_Start+0x28>)
 810207a:	683a      	ldr	r2, [r7, #0]
 810207c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8102080:	bf00      	nop
 8102082:	370c      	adds	r7, #12
 8102084:	46bd      	mov	sp, r7
 8102086:	f85d 7b04 	ldr.w	r7, [sp], #4
 810208a:	4770      	bx	lr
 810208c:	1000042c 	.word	0x1000042c

08102090 <SCH_TIM_HasCompleted>:
  * @param  const SCH_SoftTimerTypedef timer - type of soft timer
  * @retval TRUE / FALSE
  *****************************************************************************/

uint16_t SCH_TIM_HasCompleted(const SCH_SoftTimerTypedef timer)
{
 8102090:	b480      	push	{r7}
 8102092:	b083      	sub	sp, #12
 8102094:	af00      	add	r7, sp, #0
 8102096:	4603      	mov	r3, r0
 8102098:	71fb      	strb	r3, [r7, #7]
  return (s_SoftTimers[timer] == 0 ? 1:0 ) ;
 810209a:	79fb      	ldrb	r3, [r7, #7]
 810209c:	4a06      	ldr	r2, [pc, #24]	@ (81020b8 <SCH_TIM_HasCompleted+0x28>)
 810209e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81020a2:	2b00      	cmp	r3, #0
 81020a4:	bf0c      	ite	eq
 81020a6:	2301      	moveq	r3, #1
 81020a8:	2300      	movne	r3, #0
 81020aa:	b2db      	uxtb	r3, r3
}
 81020ac:	4618      	mov	r0, r3
 81020ae:	370c      	adds	r7, #12
 81020b0:	46bd      	mov	sp, r7
 81020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020b6:	4770      	bx	lr
 81020b8:	1000042c 	.word	0x1000042c

081020bc <SCH_TASK_CreateTask>:
  * @param  SCH_TASK_HANDLE* pHandle - pointer to task handle
  *         SCH_TaskPropertyTypedef* pTaskProperty - pointer to task property
  * @retval status
  *****************************************************************************/
t_Status SCH_TASK_CreateTask(SCH_TASK_HANDLE* pHandle, SCH_TaskPropertyTypedef* pTaskProperty)
{
 81020bc:	b480      	push	{r7}
 81020be:	b085      	sub	sp, #20
 81020c0:	af00      	add	r7, sp, #0
 81020c2:	6078      	str	r0, [r7, #4]
 81020c4:	6039      	str	r1, [r7, #0]
  t_Status                      status = STS_ERROR;
 81020c6:	2301      	movs	r3, #1
 81020c8:	73fb      	strb	r3, [r7, #15]

  // make sure that we have valid parameters
  if((pHandle) && (pTaskProperty))
 81020ca:	687b      	ldr	r3, [r7, #4]
 81020cc:	2b00      	cmp	r3, #0
 81020ce:	d029      	beq.n	8102124 <SCH_TASK_CreateTask+0x68>
 81020d0:	683b      	ldr	r3, [r7, #0]
 81020d2:	2b00      	cmp	r3, #0
 81020d4:	d026      	beq.n	8102124 <SCH_TASK_CreateTask+0x68>
  {
    // Check for number of task defined
    if(s_NumOfTaskScheduled < (MAX_TASK - 1))
 81020d6:	4b17      	ldr	r3, [pc, #92]	@ (8102134 <SCH_TASK_CreateTask+0x78>)
 81020d8:	781b      	ldrb	r3, [r3, #0]
 81020da:	2b12      	cmp	r3, #18
 81020dc:	d822      	bhi.n	8102124 <SCH_TASK_CreateTask+0x68>
    {
      SCH_TaskContextTypedef* pTaskContext = &s_TaskContext[s_NumOfTaskScheduled];
 81020de:	4b15      	ldr	r3, [pc, #84]	@ (8102134 <SCH_TASK_CreateTask+0x78>)
 81020e0:	781b      	ldrb	r3, [r3, #0]
 81020e2:	461a      	mov	r2, r3
 81020e4:	4613      	mov	r3, r2
 81020e6:	005b      	lsls	r3, r3, #1
 81020e8:	4413      	add	r3, r2
 81020ea:	009b      	lsls	r3, r3, #2
 81020ec:	4a12      	ldr	r2, [pc, #72]	@ (8102138 <SCH_TASK_CreateTask+0x7c>)
 81020ee:	4413      	add	r3, r2
 81020f0:	60bb      	str	r3, [r7, #8]
      // get task context
      // memcpy((uint8_t*)pTaskContext->pTaskProperty, (uint8_t*)pTaskProperty, sizeof(SCH_TaskPropertyTypedef));
      pTaskContext->pTaskProperty = pTaskProperty;
 81020f2:	68bb      	ldr	r3, [r7, #8]
 81020f4:	683a      	ldr	r2, [r7, #0]
 81020f6:	609a      	str	r2, [r3, #8]
      // Make sure we are initializing other members of task context
      pTaskContext->taskFlag = FALSE;
 81020f8:	68bb      	ldr	r3, [r7, #8]
 81020fa:	2200      	movs	r2, #0
 81020fc:	805a      	strh	r2, [r3, #2]
      pTaskContext->taskTick = pTaskProperty->taskTick;;
 81020fe:	683b      	ldr	r3, [r7, #0]
 8102100:	68da      	ldr	r2, [r3, #12]
 8102102:	68bb      	ldr	r3, [r7, #8]
 8102104:	605a      	str	r2, [r3, #4]
      // Put task in Ready State
      pTaskContext->taskState = TASK_StateReady;
 8102106:	68bb      	ldr	r3, [r7, #8]
 8102108:	2201      	movs	r2, #1
 810210a:	701a      	strb	r2, [r3, #0]

      // Give Task Handle back to caller
      *pHandle = s_NumOfTaskScheduled;
 810210c:	4b09      	ldr	r3, [pc, #36]	@ (8102134 <SCH_TASK_CreateTask+0x78>)
 810210e:	781a      	ldrb	r2, [r3, #0]
 8102110:	687b      	ldr	r3, [r7, #4]
 8102112:	701a      	strb	r2, [r3, #0]

      s_NumOfTaskScheduled++;
 8102114:	4b07      	ldr	r3, [pc, #28]	@ (8102134 <SCH_TASK_CreateTask+0x78>)
 8102116:	781b      	ldrb	r3, [r3, #0]
 8102118:	3301      	adds	r3, #1
 810211a:	b2da      	uxtb	r2, r3
 810211c:	4b05      	ldr	r3, [pc, #20]	@ (8102134 <SCH_TASK_CreateTask+0x78>)
 810211e:	701a      	strb	r2, [r3, #0]
      // We were able to register task with schedular
      status = STS_DONE;
 8102120:	2300      	movs	r3, #0
 8102122:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8102124:	7bfb      	ldrb	r3, [r7, #15]
}
 8102126:	4618      	mov	r0, r3
 8102128:	3714      	adds	r7, #20
 810212a:	46bd      	mov	sp, r7
 810212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102130:	4770      	bx	lr
 8102132:	bf00      	nop
 8102134:	10000330 	.word	0x10000330
 8102138:	10000240 	.word	0x10000240

0810213c <SCH_RunSystemTickTimer>:
  * @brief  Function handles system tick timer
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_RunSystemTickTimer(void)
{
 810213c:	b480      	push	{r7}
 810213e:	b085      	sub	sp, #20
 8102140:	af00      	add	r7, sp, #0
  uint8_t                       timerIndex;
  SCH_TimerContextTypedef*      pTimerContext;

  // Increment System Tick counter

  s_SystemTick++;
 8102142:	4b42      	ldr	r3, [pc, #264]	@ (810224c <SCH_RunSystemTickTimer+0x110>)
 8102144:	681b      	ldr	r3, [r3, #0]
 8102146:	3301      	adds	r3, #1
 8102148:	4a40      	ldr	r2, [pc, #256]	@ (810224c <SCH_RunSystemTickTimer+0x110>)
 810214a:	6013      	str	r3, [r2, #0]
//  if(s_SystemTick > 100000){
//	  LL_GPIO_SetOutputPin(GPIOD, LL_GPIO_PIN_15);
//  }
  // Check Status of other Periodic Task
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 810214c:	2300      	movs	r3, #0
 810214e:	73fb      	strb	r3, [r7, #15]
 8102150:	e025      	b.n	810219e <SCH_RunSystemTickTimer+0x62>
  {
    // Get Task Context
    pTaskContext = &s_TaskContext[taskIndex];
 8102152:	7bfa      	ldrb	r2, [r7, #15]
 8102154:	4613      	mov	r3, r2
 8102156:	005b      	lsls	r3, r3, #1
 8102158:	4413      	add	r3, r2
 810215a:	009b      	lsls	r3, r3, #2
 810215c:	4a3c      	ldr	r2, [pc, #240]	@ (8102250 <SCH_RunSystemTickTimer+0x114>)
 810215e:	4413      	add	r3, r2
 8102160:	607b      	str	r3, [r7, #4]

    // Check type and State of the task
    if((SCH_TASK_SYNC == pTaskContext->pTaskProperty->taskType) && (TASK_StateReady == pTaskContext->taskState))
 8102162:	687b      	ldr	r3, [r7, #4]
 8102164:	689b      	ldr	r3, [r3, #8]
 8102166:	781b      	ldrb	r3, [r3, #0]
 8102168:	2b01      	cmp	r3, #1
 810216a:	d115      	bne.n	8102198 <SCH_RunSystemTickTimer+0x5c>
 810216c:	687b      	ldr	r3, [r7, #4]
 810216e:	781b      	ldrb	r3, [r3, #0]
 8102170:	2b01      	cmp	r3, #1
 8102172:	d111      	bne.n	8102198 <SCH_RunSystemTickTimer+0x5c>
    {
      // Increment task tick
      pTaskContext->taskTick += 1;
 8102174:	687b      	ldr	r3, [r7, #4]
 8102176:	685b      	ldr	r3, [r3, #4]
 8102178:	1c5a      	adds	r2, r3, #1
 810217a:	687b      	ldr	r3, [r7, #4]
 810217c:	605a      	str	r2, [r3, #4]

      // Check if we reached task period
      if(pTaskContext->taskTick >= pTaskContext->pTaskProperty->taskPeriodInMS)
 810217e:	687b      	ldr	r3, [r7, #4]
 8102180:	685a      	ldr	r2, [r3, #4]
 8102182:	687b      	ldr	r3, [r7, #4]
 8102184:	689b      	ldr	r3, [r3, #8]
 8102186:	685b      	ldr	r3, [r3, #4]
 8102188:	429a      	cmp	r2, r3
 810218a:	d305      	bcc.n	8102198 <SCH_RunSystemTickTimer+0x5c>
      {
        // Yes
        // Reset Task tick timer
        pTaskContext->taskTick = RESET;
 810218c:	687b      	ldr	r3, [r7, #4]
 810218e:	2200      	movs	r2, #0
 8102190:	605a      	str	r2, [r3, #4]
        // Enable Flag
        pTaskContext->taskFlag = TRUE;
 8102192:	687b      	ldr	r3, [r7, #4]
 8102194:	2201      	movs	r2, #1
 8102196:	805a      	strh	r2, [r3, #2]
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8102198:	7bfb      	ldrb	r3, [r7, #15]
 810219a:	3301      	adds	r3, #1
 810219c:	73fb      	strb	r3, [r7, #15]
 810219e:	4b2d      	ldr	r3, [pc, #180]	@ (8102254 <SCH_RunSystemTickTimer+0x118>)
 81021a0:	781b      	ldrb	r3, [r3, #0]
 81021a2:	7bfa      	ldrb	r2, [r7, #15]
 81021a4:	429a      	cmp	r2, r3
 81021a6:	d3d4      	bcc.n	8102152 <SCH_RunSystemTickTimer+0x16>
      }
    }
  }

  // Check Status of other Periodic Task
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 81021a8:	2300      	movs	r3, #0
 81021aa:	73bb      	strb	r3, [r7, #14]
 81021ac:	e02b      	b.n	8102206 <SCH_RunSystemTickTimer+0xca>
  {
    // Get Task Context
    pTimerContext = &s_TimerContext[timerIndex];
 81021ae:	7bba      	ldrb	r2, [r7, #14]
 81021b0:	4613      	mov	r3, r2
 81021b2:	005b      	lsls	r3, r3, #1
 81021b4:	4413      	add	r3, r2
 81021b6:	009b      	lsls	r3, r3, #2
 81021b8:	4a27      	ldr	r2, [pc, #156]	@ (8102258 <SCH_RunSystemTickTimer+0x11c>)
 81021ba:	4413      	add	r3, r2
 81021bc:	60bb      	str	r3, [r7, #8]

    // Check type and State of the task
    if(TIM_StateRun == pTimerContext->timerState)
 81021be:	68bb      	ldr	r3, [r7, #8]
 81021c0:	781b      	ldrb	r3, [r3, #0]
 81021c2:	2b01      	cmp	r3, #1
 81021c4:	d11c      	bne.n	8102200 <SCH_RunSystemTickTimer+0xc4>
    {
      // Increment task tick
      pTimerContext->timerTick += 1;
 81021c6:	68bb      	ldr	r3, [r7, #8]
 81021c8:	685b      	ldr	r3, [r3, #4]
 81021ca:	1c5a      	adds	r2, r3, #1
 81021cc:	68bb      	ldr	r3, [r7, #8]
 81021ce:	605a      	str	r2, [r3, #4]

      // Check if we reached task period
      if(pTimerContext->timerTick >= pTimerContext->pTimerProperty->timerPeriodInMS)
 81021d0:	68bb      	ldr	r3, [r7, #8]
 81021d2:	685a      	ldr	r2, [r3, #4]
 81021d4:	68bb      	ldr	r3, [r7, #8]
 81021d6:	689b      	ldr	r3, [r3, #8]
 81021d8:	685b      	ldr	r3, [r3, #4]
 81021da:	429a      	cmp	r2, r3
 81021dc:	d310      	bcc.n	8102200 <SCH_RunSystemTickTimer+0xc4>
      {
        // Yes
        // Enable Flag
        pTimerContext->timerFlag = TRUE;
 81021de:	68bb      	ldr	r3, [r7, #8]
 81021e0:	2201      	movs	r2, #1
 81021e2:	805a      	strh	r2, [r3, #2]
        // Reset tick timer
        pTimerContext->timerTick = RESET;
 81021e4:	68bb      	ldr	r3, [r7, #8]
 81021e6:	2200      	movs	r2, #0
 81021e8:	605a      	str	r2, [r3, #4]
        // Check timer type and change the state
        pTimerContext->timerState = (SCH_TIMER_PERIODIC == pTimerContext->pTimerProperty->timerType)?TIM_StateRun:TIM_StateStop;
 81021ea:	68bb      	ldr	r3, [r7, #8]
 81021ec:	689b      	ldr	r3, [r3, #8]
 81021ee:	781b      	ldrb	r3, [r3, #0]
 81021f0:	2b02      	cmp	r3, #2
 81021f2:	bf0c      	ite	eq
 81021f4:	2301      	moveq	r3, #1
 81021f6:	2300      	movne	r3, #0
 81021f8:	b2db      	uxtb	r3, r3
 81021fa:	461a      	mov	r2, r3
 81021fc:	68bb      	ldr	r3, [r7, #8]
 81021fe:	701a      	strb	r2, [r3, #0]
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8102200:	7bbb      	ldrb	r3, [r7, #14]
 8102202:	3301      	adds	r3, #1
 8102204:	73bb      	strb	r3, [r7, #14]
 8102206:	4b15      	ldr	r3, [pc, #84]	@ (810225c <SCH_RunSystemTickTimer+0x120>)
 8102208:	781b      	ldrb	r3, [r3, #0]
 810220a:	7bba      	ldrb	r2, [r7, #14]
 810220c:	429a      	cmp	r2, r3
 810220e:	d3ce      	bcc.n	81021ae <SCH_RunSystemTickTimer+0x72>
      }
    }
  }
  // Update software timer
   for(timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 8102210:	2300      	movs	r3, #0
 8102212:	73bb      	strb	r3, [r7, #14]
 8102214:	e010      	b.n	8102238 <SCH_RunSystemTickTimer+0xfc>
 	if (s_SoftTimers[timerIndex] > 0)	s_SoftTimers[timerIndex] --;
 8102216:	7bbb      	ldrb	r3, [r7, #14]
 8102218:	4a11      	ldr	r2, [pc, #68]	@ (8102260 <SCH_RunSystemTickTimer+0x124>)
 810221a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810221e:	2b00      	cmp	r3, #0
 8102220:	d007      	beq.n	8102232 <SCH_RunSystemTickTimer+0xf6>
 8102222:	7bbb      	ldrb	r3, [r7, #14]
 8102224:	4a0e      	ldr	r2, [pc, #56]	@ (8102260 <SCH_RunSystemTickTimer+0x124>)
 8102226:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 810222a:	3a01      	subs	r2, #1
 810222c:	490c      	ldr	r1, [pc, #48]	@ (8102260 <SCH_RunSystemTickTimer+0x124>)
 810222e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   for(timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 8102232:	7bbb      	ldrb	r3, [r7, #14]
 8102234:	3301      	adds	r3, #1
 8102236:	73bb      	strb	r3, [r7, #14]
 8102238:	7bbb      	ldrb	r3, [r7, #14]
 810223a:	2b01      	cmp	r3, #1
 810223c:	d9eb      	bls.n	8102216 <SCH_RunSystemTickTimer+0xda>
}
 810223e:	bf00      	nop
 8102240:	bf00      	nop
 8102242:	3714      	adds	r7, #20
 8102244:	46bd      	mov	sp, r7
 8102246:	f85d 7b04 	ldr.w	r7, [sp], #4
 810224a:	4770      	bx	lr
 810224c:	10000428 	.word	0x10000428
 8102250:	10000240 	.word	0x10000240
 8102254:	10000330 	.word	0x10000330
 8102258:	10000334 	.word	0x10000334
 810225c:	10000424 	.word	0x10000424
 8102260:	1000042c 	.word	0x1000042c

08102264 <SCH_StartSchedular>:
  * @brief  Start schedular
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_StartSchedular(void)
{
 8102264:	b580      	push	{r7, lr}
 8102266:	af00      	add	r7, sp, #0
  // Start Schedular..i.e. start system tick timer
  SCH_START;
 8102268:	f000 fa36 	bl	81026d8 <systick_timer_start>
}
 810226c:	bf00      	nop
 810226e:	bd80      	pop	{r7, pc}

08102270 <SCH_HandleScheduledTask>:
  * @brief  Function handles scheduled task and timer events
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_HandleScheduledTask(void)
{
 8102270:	b580      	push	{r7, lr}
 8102272:	b084      	sub	sp, #16
 8102274:	af00      	add	r7, sp, #0
  SCH_TaskContextTypedef*       pTaskContext;
  uint8_t                       timerIndex;
  SCH_TimerContextTypedef*      pTimerContext;

  // check for schedule flag
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8102276:	2300      	movs	r3, #0
 8102278:	73fb      	strb	r3, [r7, #15]
 810227a:	e01e      	b.n	81022ba <SCH_HandleScheduledTask+0x4a>
  {
    // Get Task Context
    pTaskContext = &s_TaskContext[taskIndex];
 810227c:	7bfa      	ldrb	r2, [r7, #15]
 810227e:	4613      	mov	r3, r2
 8102280:	005b      	lsls	r3, r3, #1
 8102282:	4413      	add	r3, r2
 8102284:	009b      	lsls	r3, r3, #2
 8102286:	4a23      	ldr	r2, [pc, #140]	@ (8102314 <SCH_HandleScheduledTask+0xa4>)
 8102288:	4413      	add	r3, r2
 810228a:	607b      	str	r3, [r7, #4]

    // Check type and State of the task
    if((TRUE == pTaskContext->taskFlag) && (TASK_StateReady == pTaskContext->taskState))
 810228c:	687b      	ldr	r3, [r7, #4]
 810228e:	885b      	ldrh	r3, [r3, #2]
 8102290:	2b01      	cmp	r3, #1
 8102292:	d10f      	bne.n	81022b4 <SCH_HandleScheduledTask+0x44>
 8102294:	687b      	ldr	r3, [r7, #4]
 8102296:	781b      	ldrb	r3, [r3, #0]
 8102298:	2b01      	cmp	r3, #1
 810229a:	d10b      	bne.n	81022b4 <SCH_HandleScheduledTask+0x44>
    {
      pTaskContext->taskFlag = FALSE;
 810229c:	687b      	ldr	r3, [r7, #4]
 810229e:	2200      	movs	r2, #0
 81022a0:	805a      	strh	r2, [r3, #2]
      if(pTaskContext->pTaskProperty->taskFunction)
 81022a2:	687b      	ldr	r3, [r7, #4]
 81022a4:	689b      	ldr	r3, [r3, #8]
 81022a6:	689b      	ldr	r3, [r3, #8]
 81022a8:	2b00      	cmp	r3, #0
 81022aa:	d003      	beq.n	81022b4 <SCH_HandleScheduledTask+0x44>
      {
        pTaskContext->pTaskProperty->taskFunction();
 81022ac:	687b      	ldr	r3, [r7, #4]
 81022ae:	689b      	ldr	r3, [r3, #8]
 81022b0:	689b      	ldr	r3, [r3, #8]
 81022b2:	4798      	blx	r3
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 81022b4:	7bfb      	ldrb	r3, [r7, #15]
 81022b6:	3301      	adds	r3, #1
 81022b8:	73fb      	strb	r3, [r7, #15]
 81022ba:	4b17      	ldr	r3, [pc, #92]	@ (8102318 <SCH_HandleScheduledTask+0xa8>)
 81022bc:	781b      	ldrb	r3, [r3, #0]
 81022be:	7bfa      	ldrb	r2, [r7, #15]
 81022c0:	429a      	cmp	r2, r3
 81022c2:	d3db      	bcc.n	810227c <SCH_HandleScheduledTask+0xc>
      }
    }
  }

  // check for timer flag
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 81022c4:	2300      	movs	r3, #0
 81022c6:	73bb      	strb	r3, [r7, #14]
 81022c8:	e01a      	b.n	8102300 <SCH_HandleScheduledTask+0x90>
  {
    // Get Timer Context
    pTimerContext = &s_TimerContext[timerIndex];
 81022ca:	7bba      	ldrb	r2, [r7, #14]
 81022cc:	4613      	mov	r3, r2
 81022ce:	005b      	lsls	r3, r3, #1
 81022d0:	4413      	add	r3, r2
 81022d2:	009b      	lsls	r3, r3, #2
 81022d4:	4a11      	ldr	r2, [pc, #68]	@ (810231c <SCH_HandleScheduledTask+0xac>)
 81022d6:	4413      	add	r3, r2
 81022d8:	60bb      	str	r3, [r7, #8]

    // Check timer flag
    if(TRUE == pTimerContext->timerFlag)
 81022da:	68bb      	ldr	r3, [r7, #8]
 81022dc:	885b      	ldrh	r3, [r3, #2]
 81022de:	2b01      	cmp	r3, #1
 81022e0:	d10b      	bne.n	81022fa <SCH_HandleScheduledTask+0x8a>
    {
      pTimerContext->timerFlag = FALSE;
 81022e2:	68bb      	ldr	r3, [r7, #8]
 81022e4:	2200      	movs	r2, #0
 81022e6:	805a      	strh	r2, [r3, #2]
      if(pTimerContext->pTimerProperty->timerCallbackFunction)
 81022e8:	68bb      	ldr	r3, [r7, #8]
 81022ea:	689b      	ldr	r3, [r3, #8]
 81022ec:	689b      	ldr	r3, [r3, #8]
 81022ee:	2b00      	cmp	r3, #0
 81022f0:	d003      	beq.n	81022fa <SCH_HandleScheduledTask+0x8a>
      {
        pTimerContext->pTimerProperty->timerCallbackFunction();
 81022f2:	68bb      	ldr	r3, [r7, #8]
 81022f4:	689b      	ldr	r3, [r3, #8]
 81022f6:	689b      	ldr	r3, [r3, #8]
 81022f8:	4798      	blx	r3
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 81022fa:	7bbb      	ldrb	r3, [r7, #14]
 81022fc:	3301      	adds	r3, #1
 81022fe:	73bb      	strb	r3, [r7, #14]
 8102300:	4b07      	ldr	r3, [pc, #28]	@ (8102320 <SCH_HandleScheduledTask+0xb0>)
 8102302:	781b      	ldrb	r3, [r3, #0]
 8102304:	7bba      	ldrb	r2, [r7, #14]
 8102306:	429a      	cmp	r2, r3
 8102308:	d3df      	bcc.n	81022ca <SCH_HandleScheduledTask+0x5a>
      }
    }
  }
}
 810230a:	bf00      	nop
 810230c:	bf00      	nop
 810230e:	3710      	adds	r7, #16
 8102310:	46bd      	mov	sp, r7
 8102312:	bd80      	pop	{r7, pc}
 8102314:	10000240 	.word	0x10000240
 8102318:	10000330 	.word	0x10000330
 810231c:	10000334 	.word	0x10000334
 8102320:	10000424 	.word	0x10000424

08102324 <ringbuff_is_ready>:
 * \brief           Check if ringbuff is initialized and ready to use
 * \param[in]       buff: Buffer handle
 * \return          `1` if ready, `0` otherwise
 */
uint8_t
ringbuff_is_ready(RINGBUFF_VOLATILE ringbuff_t* buff) {
 8102324:	b480      	push	{r7}
 8102326:	b083      	sub	sp, #12
 8102328:	af00      	add	r7, sp, #0
 810232a:	6078      	str	r0, [r7, #4]
    return BUF_IS_VALID(buff);
 810232c:	687b      	ldr	r3, [r7, #4]
 810232e:	2b00      	cmp	r3, #0
 8102330:	d009      	beq.n	8102346 <ringbuff_is_ready+0x22>
 8102332:	687b      	ldr	r3, [r7, #4]
 8102334:	681b      	ldr	r3, [r3, #0]
 8102336:	2b00      	cmp	r3, #0
 8102338:	d005      	beq.n	8102346 <ringbuff_is_ready+0x22>
 810233a:	687b      	ldr	r3, [r7, #4]
 810233c:	685b      	ldr	r3, [r3, #4]
 810233e:	2b00      	cmp	r3, #0
 8102340:	d001      	beq.n	8102346 <ringbuff_is_ready+0x22>
 8102342:	2301      	movs	r3, #1
 8102344:	e000      	b.n	8102348 <ringbuff_is_ready+0x24>
 8102346:	2300      	movs	r3, #0
 8102348:	b2db      	uxtb	r3, r3
}
 810234a:	4618      	mov	r0, r3
 810234c:	370c      	adds	r7, #12
 810234e:	46bd      	mov	sp, r7
 8102350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102354:	4770      	bx	lr

08102356 <ringbuff_write>:
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was no enough memory available
 *                      to copy full data array
 */
size_t
ringbuff_write(RINGBUFF_VOLATILE ringbuff_t* buff, const void* data, size_t btw) {
 8102356:	b580      	push	{r7, lr}
 8102358:	b088      	sub	sp, #32
 810235a:	af00      	add	r7, sp, #0
 810235c:	60f8      	str	r0, [r7, #12]
 810235e:	60b9      	str	r1, [r7, #8]
 8102360:	607a      	str	r2, [r7, #4]
    size_t tocopy, free;
    const uint8_t* d = data;
 8102362:	68bb      	ldr	r3, [r7, #8]
 8102364:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 8102366:	68fb      	ldr	r3, [r7, #12]
 8102368:	2b00      	cmp	r3, #0
 810236a:	d00d      	beq.n	8102388 <ringbuff_write+0x32>
 810236c:	68fb      	ldr	r3, [r7, #12]
 810236e:	681b      	ldr	r3, [r3, #0]
 8102370:	2b00      	cmp	r3, #0
 8102372:	d009      	beq.n	8102388 <ringbuff_write+0x32>
 8102374:	68fb      	ldr	r3, [r7, #12]
 8102376:	685b      	ldr	r3, [r3, #4]
 8102378:	2b00      	cmp	r3, #0
 810237a:	d005      	beq.n	8102388 <ringbuff_write+0x32>
 810237c:	68bb      	ldr	r3, [r7, #8]
 810237e:	2b00      	cmp	r3, #0
 8102380:	d002      	beq.n	8102388 <ringbuff_write+0x32>
 8102382:	687b      	ldr	r3, [r7, #4]
 8102384:	2b00      	cmp	r3, #0
 8102386:	d101      	bne.n	810238c <ringbuff_write+0x36>
        return 0;
 8102388:	2300      	movs	r3, #0
 810238a:	e059      	b.n	8102440 <ringbuff_write+0xea>
    }

    /* Calculate maximum number of bytes available to write */
    free = ringbuff_get_free(buff);
 810238c:	68f8      	ldr	r0, [r7, #12]
 810238e:	f000 f85b 	bl	8102448 <ringbuff_get_free>
 8102392:	61b8      	str	r0, [r7, #24]
    btw = BUF_MIN(free, btw);
 8102394:	687a      	ldr	r2, [r7, #4]
 8102396:	69bb      	ldr	r3, [r7, #24]
 8102398:	4293      	cmp	r3, r2
 810239a:	bf28      	it	cs
 810239c:	4613      	movcs	r3, r2
 810239e:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 81023a0:	687b      	ldr	r3, [r7, #4]
 81023a2:	2b00      	cmp	r3, #0
 81023a4:	d101      	bne.n	81023aa <ringbuff_write+0x54>
        return 0;
 81023a6:	2300      	movs	r3, #0
 81023a8:	e04a      	b.n	8102440 <ringbuff_write+0xea>
    }

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff->w, btw);
 81023aa:	68fb      	ldr	r3, [r7, #12]
 81023ac:	685a      	ldr	r2, [r3, #4]
 81023ae:	68fb      	ldr	r3, [r7, #12]
 81023b0:	68db      	ldr	r3, [r3, #12]
 81023b2:	1ad3      	subs	r3, r2, r3
 81023b4:	687a      	ldr	r2, [r7, #4]
 81023b6:	429a      	cmp	r2, r3
 81023b8:	d905      	bls.n	81023c6 <ringbuff_write+0x70>
 81023ba:	68fb      	ldr	r3, [r7, #12]
 81023bc:	685a      	ldr	r2, [r3, #4]
 81023be:	68fb      	ldr	r3, [r7, #12]
 81023c0:	68db      	ldr	r3, [r3, #12]
 81023c2:	1ad3      	subs	r3, r2, r3
 81023c4:	e000      	b.n	81023c8 <ringbuff_write+0x72>
 81023c6:	687b      	ldr	r3, [r7, #4]
 81023c8:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 81023ca:	68fb      	ldr	r3, [r7, #12]
 81023cc:	681a      	ldr	r2, [r3, #0]
 81023ce:	68fb      	ldr	r3, [r7, #12]
 81023d0:	68db      	ldr	r3, [r3, #12]
 81023d2:	4413      	add	r3, r2
 81023d4:	697a      	ldr	r2, [r7, #20]
 81023d6:	69f9      	ldr	r1, [r7, #28]
 81023d8:	4618      	mov	r0, r3
 81023da:	f006 fdbc 	bl	8108f56 <memcpy>
    buff->w += tocopy;
 81023de:	68fb      	ldr	r3, [r7, #12]
 81023e0:	68da      	ldr	r2, [r3, #12]
 81023e2:	697b      	ldr	r3, [r7, #20]
 81023e4:	441a      	add	r2, r3
 81023e6:	68fb      	ldr	r3, [r7, #12]
 81023e8:	60da      	str	r2, [r3, #12]
    btw -= tocopy;
 81023ea:	687a      	ldr	r2, [r7, #4]
 81023ec:	697b      	ldr	r3, [r7, #20]
 81023ee:	1ad3      	subs	r3, r2, r3
 81023f0:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 81023f2:	687b      	ldr	r3, [r7, #4]
 81023f4:	2b00      	cmp	r3, #0
 81023f6:	d00b      	beq.n	8102410 <ringbuff_write+0xba>
        BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 81023f8:	68fb      	ldr	r3, [r7, #12]
 81023fa:	6818      	ldr	r0, [r3, #0]
 81023fc:	69fa      	ldr	r2, [r7, #28]
 81023fe:	697b      	ldr	r3, [r7, #20]
 8102400:	4413      	add	r3, r2
 8102402:	687a      	ldr	r2, [r7, #4]
 8102404:	4619      	mov	r1, r3
 8102406:	f006 fda6 	bl	8108f56 <memcpy>
        buff->w = btw;
 810240a:	68fb      	ldr	r3, [r7, #12]
 810240c:	687a      	ldr	r2, [r7, #4]
 810240e:	60da      	str	r2, [r3, #12]
    }

    /* Step 3: Check end of buffer */
    if (buff->w >= buff->size) {
 8102410:	68fb      	ldr	r3, [r7, #12]
 8102412:	68da      	ldr	r2, [r3, #12]
 8102414:	68fb      	ldr	r3, [r7, #12]
 8102416:	685b      	ldr	r3, [r3, #4]
 8102418:	429a      	cmp	r2, r3
 810241a:	d302      	bcc.n	8102422 <ringbuff_write+0xcc>
        buff->w = 0;
 810241c:	68fb      	ldr	r3, [r7, #12]
 810241e:	2200      	movs	r2, #0
 8102420:	60da      	str	r2, [r3, #12]
    }
    BUF_SEND_EVT(buff, RINGBUFF_EVT_WRITE, tocopy + btw);
 8102422:	68fb      	ldr	r3, [r7, #12]
 8102424:	691b      	ldr	r3, [r3, #16]
 8102426:	2b00      	cmp	r3, #0
 8102428:	d007      	beq.n	810243a <ringbuff_write+0xe4>
 810242a:	68fb      	ldr	r3, [r7, #12]
 810242c:	691b      	ldr	r3, [r3, #16]
 810242e:	6979      	ldr	r1, [r7, #20]
 8102430:	687a      	ldr	r2, [r7, #4]
 8102432:	440a      	add	r2, r1
 8102434:	2101      	movs	r1, #1
 8102436:	68f8      	ldr	r0, [r7, #12]
 8102438:	4798      	blx	r3
    return tocopy + btw;
 810243a:	697a      	ldr	r2, [r7, #20]
 810243c:	687b      	ldr	r3, [r7, #4]
 810243e:	4413      	add	r3, r2
}
 8102440:	4618      	mov	r0, r3
 8102442:	3720      	adds	r7, #32
 8102444:	46bd      	mov	sp, r7
 8102446:	bd80      	pop	{r7, pc}

08102448 <ringbuff_get_free>:
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t
ringbuff_get_free(RINGBUFF_VOLATILE ringbuff_t* buff) {
 8102448:	b480      	push	{r7}
 810244a:	b087      	sub	sp, #28
 810244c:	af00      	add	r7, sp, #0
 810244e:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 8102450:	687b      	ldr	r3, [r7, #4]
 8102452:	2b00      	cmp	r3, #0
 8102454:	d007      	beq.n	8102466 <ringbuff_get_free+0x1e>
 8102456:	687b      	ldr	r3, [r7, #4]
 8102458:	681b      	ldr	r3, [r3, #0]
 810245a:	2b00      	cmp	r3, #0
 810245c:	d003      	beq.n	8102466 <ringbuff_get_free+0x1e>
 810245e:	687b      	ldr	r3, [r7, #4]
 8102460:	685b      	ldr	r3, [r3, #4]
 8102462:	2b00      	cmp	r3, #0
 8102464:	d101      	bne.n	810246a <ringbuff_get_free+0x22>
        return 0;
 8102466:	2300      	movs	r3, #0
 8102468:	e01f      	b.n	81024aa <ringbuff_get_free+0x62>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 810246a:	687b      	ldr	r3, [r7, #4]
 810246c:	68db      	ldr	r3, [r3, #12]
 810246e:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8102470:	687b      	ldr	r3, [r7, #4]
 8102472:	689b      	ldr	r3, [r3, #8]
 8102474:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 8102476:	693a      	ldr	r2, [r7, #16]
 8102478:	68fb      	ldr	r3, [r7, #12]
 810247a:	429a      	cmp	r2, r3
 810247c:	d103      	bne.n	8102486 <ringbuff_get_free+0x3e>
        size = buff->size;
 810247e:	687b      	ldr	r3, [r7, #4]
 8102480:	685b      	ldr	r3, [r3, #4]
 8102482:	617b      	str	r3, [r7, #20]
 8102484:	e00f      	b.n	81024a6 <ringbuff_get_free+0x5e>
    } else if (r > w) {
 8102486:	68fa      	ldr	r2, [r7, #12]
 8102488:	693b      	ldr	r3, [r7, #16]
 810248a:	429a      	cmp	r2, r3
 810248c:	d904      	bls.n	8102498 <ringbuff_get_free+0x50>
        size = r - w;
 810248e:	68fa      	ldr	r2, [r7, #12]
 8102490:	693b      	ldr	r3, [r7, #16]
 8102492:	1ad3      	subs	r3, r2, r3
 8102494:	617b      	str	r3, [r7, #20]
 8102496:	e006      	b.n	81024a6 <ringbuff_get_free+0x5e>
    } else {
        size = buff->size - (w - r);
 8102498:	687b      	ldr	r3, [r7, #4]
 810249a:	685a      	ldr	r2, [r3, #4]
 810249c:	68f9      	ldr	r1, [r7, #12]
 810249e:	693b      	ldr	r3, [r7, #16]
 81024a0:	1acb      	subs	r3, r1, r3
 81024a2:	4413      	add	r3, r2
 81024a4:	617b      	str	r3, [r7, #20]
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 81024a6:	697b      	ldr	r3, [r7, #20]
 81024a8:	3b01      	subs	r3, #1
}
 81024aa:	4618      	mov	r0, r3
 81024ac:	371c      	adds	r7, #28
 81024ae:	46bd      	mov	sp, r7
 81024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024b4:	4770      	bx	lr

081024b6 <ringbuff_get_full>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
ringbuff_get_full(RINGBUFF_VOLATILE ringbuff_t* buff) {
 81024b6:	b480      	push	{r7}
 81024b8:	b087      	sub	sp, #28
 81024ba:	af00      	add	r7, sp, #0
 81024bc:	6078      	str	r0, [r7, #4]
    size_t w, r, size;

    if (!BUF_IS_VALID(buff)) {
 81024be:	687b      	ldr	r3, [r7, #4]
 81024c0:	2b00      	cmp	r3, #0
 81024c2:	d007      	beq.n	81024d4 <ringbuff_get_full+0x1e>
 81024c4:	687b      	ldr	r3, [r7, #4]
 81024c6:	681b      	ldr	r3, [r3, #0]
 81024c8:	2b00      	cmp	r3, #0
 81024ca:	d003      	beq.n	81024d4 <ringbuff_get_full+0x1e>
 81024cc:	687b      	ldr	r3, [r7, #4]
 81024ce:	685b      	ldr	r3, [r3, #4]
 81024d0:	2b00      	cmp	r3, #0
 81024d2:	d101      	bne.n	81024d8 <ringbuff_get_full+0x22>
        return 0;
 81024d4:	2300      	movs	r3, #0
 81024d6:	e01d      	b.n	8102514 <ringbuff_get_full+0x5e>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 81024d8:	687b      	ldr	r3, [r7, #4]
 81024da:	68db      	ldr	r3, [r3, #12]
 81024dc:	613b      	str	r3, [r7, #16]
    r = buff->r;
 81024de:	687b      	ldr	r3, [r7, #4]
 81024e0:	689b      	ldr	r3, [r3, #8]
 81024e2:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 81024e4:	693a      	ldr	r2, [r7, #16]
 81024e6:	68fb      	ldr	r3, [r7, #12]
 81024e8:	429a      	cmp	r2, r3
 81024ea:	d102      	bne.n	81024f2 <ringbuff_get_full+0x3c>
        size = 0;
 81024ec:	2300      	movs	r3, #0
 81024ee:	617b      	str	r3, [r7, #20]
 81024f0:	e00f      	b.n	8102512 <ringbuff_get_full+0x5c>
    } else if (w > r) {
 81024f2:	693a      	ldr	r2, [r7, #16]
 81024f4:	68fb      	ldr	r3, [r7, #12]
 81024f6:	429a      	cmp	r2, r3
 81024f8:	d904      	bls.n	8102504 <ringbuff_get_full+0x4e>
        size = w - r;
 81024fa:	693a      	ldr	r2, [r7, #16]
 81024fc:	68fb      	ldr	r3, [r7, #12]
 81024fe:	1ad3      	subs	r3, r2, r3
 8102500:	617b      	str	r3, [r7, #20]
 8102502:	e006      	b.n	8102512 <ringbuff_get_full+0x5c>
    } else {
        size = buff->size - (r - w);
 8102504:	687b      	ldr	r3, [r7, #4]
 8102506:	685a      	ldr	r2, [r3, #4]
 8102508:	6939      	ldr	r1, [r7, #16]
 810250a:	68fb      	ldr	r3, [r7, #12]
 810250c:	1acb      	subs	r3, r1, r3
 810250e:	4413      	add	r3, r2
 8102510:	617b      	str	r3, [r7, #20]
    }
    return size;
 8102512:	697b      	ldr	r3, [r7, #20]
}
 8102514:	4618      	mov	r0, r3
 8102516:	371c      	adds	r7, #28
 8102518:	46bd      	mov	sp, r7
 810251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810251e:	4770      	bx	lr

08102520 <ringbuff_get_linear_block_read_address>:
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
void *
ringbuff_get_linear_block_read_address(RINGBUFF_VOLATILE ringbuff_t* buff) {
 8102520:	b480      	push	{r7}
 8102522:	b083      	sub	sp, #12
 8102524:	af00      	add	r7, sp, #0
 8102526:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID(buff)) {
 8102528:	687b      	ldr	r3, [r7, #4]
 810252a:	2b00      	cmp	r3, #0
 810252c:	d007      	beq.n	810253e <ringbuff_get_linear_block_read_address+0x1e>
 810252e:	687b      	ldr	r3, [r7, #4]
 8102530:	681b      	ldr	r3, [r3, #0]
 8102532:	2b00      	cmp	r3, #0
 8102534:	d003      	beq.n	810253e <ringbuff_get_linear_block_read_address+0x1e>
 8102536:	687b      	ldr	r3, [r7, #4]
 8102538:	685b      	ldr	r3, [r3, #4]
 810253a:	2b00      	cmp	r3, #0
 810253c:	d101      	bne.n	8102542 <ringbuff_get_linear_block_read_address+0x22>
        return NULL;
 810253e:	2300      	movs	r3, #0
 8102540:	e004      	b.n	810254c <ringbuff_get_linear_block_read_address+0x2c>
    }
    return &buff->buff[buff->r];
 8102542:	687b      	ldr	r3, [r7, #4]
 8102544:	681a      	ldr	r2, [r3, #0]
 8102546:	687b      	ldr	r3, [r7, #4]
 8102548:	689b      	ldr	r3, [r3, #8]
 810254a:	4413      	add	r3, r2
}
 810254c:	4618      	mov	r0, r3
 810254e:	370c      	adds	r7, #12
 8102550:	46bd      	mov	sp, r7
 8102552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102556:	4770      	bx	lr

08102558 <ringbuff_get_linear_block_read_length>:
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer size in units of bytes for read operation
 */
size_t
ringbuff_get_linear_block_read_length(RINGBUFF_VOLATILE ringbuff_t* buff) {
 8102558:	b480      	push	{r7}
 810255a:	b087      	sub	sp, #28
 810255c:	af00      	add	r7, sp, #0
 810255e:	6078      	str	r0, [r7, #4]
    size_t w, r, len;

    if (!BUF_IS_VALID(buff)) {
 8102560:	687b      	ldr	r3, [r7, #4]
 8102562:	2b00      	cmp	r3, #0
 8102564:	d007      	beq.n	8102576 <ringbuff_get_linear_block_read_length+0x1e>
 8102566:	687b      	ldr	r3, [r7, #4]
 8102568:	681b      	ldr	r3, [r3, #0]
 810256a:	2b00      	cmp	r3, #0
 810256c:	d003      	beq.n	8102576 <ringbuff_get_linear_block_read_length+0x1e>
 810256e:	687b      	ldr	r3, [r7, #4]
 8102570:	685b      	ldr	r3, [r3, #4]
 8102572:	2b00      	cmp	r3, #0
 8102574:	d101      	bne.n	810257a <ringbuff_get_linear_block_read_length+0x22>
        return 0;
 8102576:	2300      	movs	r3, #0
 8102578:	e01b      	b.n	81025b2 <ringbuff_get_linear_block_read_length+0x5a>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 810257a:	687b      	ldr	r3, [r7, #4]
 810257c:	68db      	ldr	r3, [r3, #12]
 810257e:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8102580:	687b      	ldr	r3, [r7, #4]
 8102582:	689b      	ldr	r3, [r3, #8]
 8102584:	60fb      	str	r3, [r7, #12]
    if (w > r) {
 8102586:	693a      	ldr	r2, [r7, #16]
 8102588:	68fb      	ldr	r3, [r7, #12]
 810258a:	429a      	cmp	r2, r3
 810258c:	d904      	bls.n	8102598 <ringbuff_get_linear_block_read_length+0x40>
        len = w - r;
 810258e:	693a      	ldr	r2, [r7, #16]
 8102590:	68fb      	ldr	r3, [r7, #12]
 8102592:	1ad3      	subs	r3, r2, r3
 8102594:	617b      	str	r3, [r7, #20]
 8102596:	e00b      	b.n	81025b0 <ringbuff_get_linear_block_read_length+0x58>
    } else if (r > w) {
 8102598:	68fa      	ldr	r2, [r7, #12]
 810259a:	693b      	ldr	r3, [r7, #16]
 810259c:	429a      	cmp	r2, r3
 810259e:	d905      	bls.n	81025ac <ringbuff_get_linear_block_read_length+0x54>
        len = buff->size - r;
 81025a0:	687b      	ldr	r3, [r7, #4]
 81025a2:	685a      	ldr	r2, [r3, #4]
 81025a4:	68fb      	ldr	r3, [r7, #12]
 81025a6:	1ad3      	subs	r3, r2, r3
 81025a8:	617b      	str	r3, [r7, #20]
 81025aa:	e001      	b.n	81025b0 <ringbuff_get_linear_block_read_length+0x58>
    } else {
        len = 0;
 81025ac:	2300      	movs	r3, #0
 81025ae:	617b      	str	r3, [r7, #20]
    }
    return len;
 81025b0:	697b      	ldr	r3, [r7, #20]
}
 81025b2:	4618      	mov	r0, r3
 81025b4:	371c      	adds	r7, #28
 81025b6:	46bd      	mov	sp, r7
 81025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025bc:	4770      	bx	lr

081025be <ringbuff_skip>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t
ringbuff_skip(RINGBUFF_VOLATILE ringbuff_t* buff, size_t len) {
 81025be:	b580      	push	{r7, lr}
 81025c0:	b084      	sub	sp, #16
 81025c2:	af00      	add	r7, sp, #0
 81025c4:	6078      	str	r0, [r7, #4]
 81025c6:	6039      	str	r1, [r7, #0]
    size_t full;

    if (!BUF_IS_VALID(buff) || len == 0) {
 81025c8:	687b      	ldr	r3, [r7, #4]
 81025ca:	2b00      	cmp	r3, #0
 81025cc:	d00a      	beq.n	81025e4 <ringbuff_skip+0x26>
 81025ce:	687b      	ldr	r3, [r7, #4]
 81025d0:	681b      	ldr	r3, [r3, #0]
 81025d2:	2b00      	cmp	r3, #0
 81025d4:	d006      	beq.n	81025e4 <ringbuff_skip+0x26>
 81025d6:	687b      	ldr	r3, [r7, #4]
 81025d8:	685b      	ldr	r3, [r3, #4]
 81025da:	2b00      	cmp	r3, #0
 81025dc:	d002      	beq.n	81025e4 <ringbuff_skip+0x26>
 81025de:	683b      	ldr	r3, [r7, #0]
 81025e0:	2b00      	cmp	r3, #0
 81025e2:	d101      	bne.n	81025e8 <ringbuff_skip+0x2a>
        return 0;
 81025e4:	2300      	movs	r3, #0
 81025e6:	e027      	b.n	8102638 <ringbuff_skip+0x7a>
    }

    full = ringbuff_get_full(buff);             /* Get buffer used length */
 81025e8:	6878      	ldr	r0, [r7, #4]
 81025ea:	f7ff ff64 	bl	81024b6 <ringbuff_get_full>
 81025ee:	60f8      	str	r0, [r7, #12]
    len = BUF_MIN(len, full);                   /* Calculate max skip */
 81025f0:	683a      	ldr	r2, [r7, #0]
 81025f2:	68fb      	ldr	r3, [r7, #12]
 81025f4:	4293      	cmp	r3, r2
 81025f6:	bf28      	it	cs
 81025f8:	4613      	movcs	r3, r2
 81025fa:	603b      	str	r3, [r7, #0]
    buff->r += len;                             /* Advance read pointer */
 81025fc:	687b      	ldr	r3, [r7, #4]
 81025fe:	689a      	ldr	r2, [r3, #8]
 8102600:	683b      	ldr	r3, [r7, #0]
 8102602:	441a      	add	r2, r3
 8102604:	687b      	ldr	r3, [r7, #4]
 8102606:	609a      	str	r2, [r3, #8]
    if (buff->r >= buff->size) {                /* Subtract possible overflow */
 8102608:	687b      	ldr	r3, [r7, #4]
 810260a:	689a      	ldr	r2, [r3, #8]
 810260c:	687b      	ldr	r3, [r7, #4]
 810260e:	685b      	ldr	r3, [r3, #4]
 8102610:	429a      	cmp	r2, r3
 8102612:	d306      	bcc.n	8102622 <ringbuff_skip+0x64>
        buff->r -= buff->size;
 8102614:	687b      	ldr	r3, [r7, #4]
 8102616:	685b      	ldr	r3, [r3, #4]
 8102618:	687a      	ldr	r2, [r7, #4]
 810261a:	6892      	ldr	r2, [r2, #8]
 810261c:	1ad2      	subs	r2, r2, r3
 810261e:	687b      	ldr	r3, [r7, #4]
 8102620:	609a      	str	r2, [r3, #8]
    }
    BUF_SEND_EVT(buff, RINGBUFF_EVT_READ, len);
 8102622:	687b      	ldr	r3, [r7, #4]
 8102624:	691b      	ldr	r3, [r3, #16]
 8102626:	2b00      	cmp	r3, #0
 8102628:	d005      	beq.n	8102636 <ringbuff_skip+0x78>
 810262a:	687b      	ldr	r3, [r7, #4]
 810262c:	691b      	ldr	r3, [r3, #16]
 810262e:	683a      	ldr	r2, [r7, #0]
 8102630:	2100      	movs	r1, #0
 8102632:	6878      	ldr	r0, [r7, #4]
 8102634:	4798      	blx	r3
    return len;
 8102636:	683b      	ldr	r3, [r7, #0]
}
 8102638:	4618      	mov	r0, r3
 810263a:	3710      	adds	r7, #16
 810263c:	46bd      	mov	sp, r7
 810263e:	bd80      	pop	{r7, pc}

08102640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8102640:	b480      	push	{r7}
 8102642:	b083      	sub	sp, #12
 8102644:	af00      	add	r7, sp, #0
 8102646:	4603      	mov	r3, r0
 8102648:	6039      	str	r1, [r7, #0]
 810264a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810264c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102650:	2b00      	cmp	r3, #0
 8102652:	db0a      	blt.n	810266a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102654:	683b      	ldr	r3, [r7, #0]
 8102656:	b2da      	uxtb	r2, r3
 8102658:	490c      	ldr	r1, [pc, #48]	@ (810268c <__NVIC_SetPriority+0x4c>)
 810265a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810265e:	0112      	lsls	r2, r2, #4
 8102660:	b2d2      	uxtb	r2, r2
 8102662:	440b      	add	r3, r1
 8102664:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8102668:	e00a      	b.n	8102680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810266a:	683b      	ldr	r3, [r7, #0]
 810266c:	b2da      	uxtb	r2, r3
 810266e:	4908      	ldr	r1, [pc, #32]	@ (8102690 <__NVIC_SetPriority+0x50>)
 8102670:	88fb      	ldrh	r3, [r7, #6]
 8102672:	f003 030f 	and.w	r3, r3, #15
 8102676:	3b04      	subs	r3, #4
 8102678:	0112      	lsls	r2, r2, #4
 810267a:	b2d2      	uxtb	r2, r2
 810267c:	440b      	add	r3, r1
 810267e:	761a      	strb	r2, [r3, #24]
}
 8102680:	bf00      	nop
 8102682:	370c      	adds	r7, #12
 8102684:	46bd      	mov	sp, r7
 8102686:	f85d 7b04 	ldr.w	r7, [sp], #4
 810268a:	4770      	bx	lr
 810268c:	e000e100 	.word	0xe000e100
 8102690:	e000ed00 	.word	0xe000ed00

08102694 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8102694:	b580      	push	{r7, lr}
 8102696:	b082      	sub	sp, #8
 8102698:	af00      	add	r7, sp, #0
 810269a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 810269c:	687b      	ldr	r3, [r7, #4]
 810269e:	3b01      	subs	r3, #1
 81026a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 81026a4:	d301      	bcc.n	81026aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 81026a6:	2301      	movs	r3, #1
 81026a8:	e00f      	b.n	81026ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81026aa:	4a0a      	ldr	r2, [pc, #40]	@ (81026d4 <SysTick_Config+0x40>)
 81026ac:	687b      	ldr	r3, [r7, #4]
 81026ae:	3b01      	subs	r3, #1
 81026b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 81026b2:	210f      	movs	r1, #15
 81026b4:	f04f 30ff 	mov.w	r0, #4294967295
 81026b8:	f7ff ffc2 	bl	8102640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 81026bc:	4b05      	ldr	r3, [pc, #20]	@ (81026d4 <SysTick_Config+0x40>)
 81026be:	2200      	movs	r2, #0
 81026c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 81026c2:	4b04      	ldr	r3, [pc, #16]	@ (81026d4 <SysTick_Config+0x40>)
 81026c4:	2207      	movs	r2, #7
 81026c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 81026c8:	2300      	movs	r3, #0
}
 81026ca:	4618      	mov	r0, r3
 81026cc:	3708      	adds	r7, #8
 81026ce:	46bd      	mov	sp, r7
 81026d0:	bd80      	pop	{r7, pc}
 81026d2:	bf00      	nop
 81026d4:	e000e010 	.word	0xe000e010

081026d8 <systick_timer_start>:

#include "systick.h"
#include "stm32h7xx.h"

void systick_timer_start(void)
{
 81026d8:	b480      	push	{r7}
 81026da:	af00      	add	r7, sp, #0
    // Reset SysTick counter value
   // SysTick->VAL = 0;

    // Enable SysTick counter
    SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 81026dc:	4b05      	ldr	r3, [pc, #20]	@ (81026f4 <systick_timer_start+0x1c>)
 81026de:	681b      	ldr	r3, [r3, #0]
 81026e0:	4a04      	ldr	r2, [pc, #16]	@ (81026f4 <systick_timer_start+0x1c>)
 81026e2:	f043 0301 	orr.w	r3, r3, #1
 81026e6:	6013      	str	r3, [r2, #0]
}
 81026e8:	bf00      	nop
 81026ea:	46bd      	mov	sp, r7
 81026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81026f0:	4770      	bx	lr
 81026f2:	bf00      	nop
 81026f4:	e000e010 	.word	0xe000e010

081026f8 <systick_timer_init>:
    // Disable SysTick counter
   // SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
}

void systick_timer_init(void)
{
 81026f8:	b580      	push	{r7, lr}
 81026fa:	af00      	add	r7, sp, #0
    // Set SysTick to trigger interrupt every 1ms
    SysTick_Config(SystemCoreClock/1000);
 81026fc:	4b05      	ldr	r3, [pc, #20]	@ (8102714 <systick_timer_init+0x1c>)
 81026fe:	681b      	ldr	r3, [r3, #0]
 8102700:	4a05      	ldr	r2, [pc, #20]	@ (8102718 <systick_timer_init+0x20>)
 8102702:	fba2 2303 	umull	r2, r3, r2, r3
 8102706:	099b      	lsrs	r3, r3, #6
 8102708:	4618      	mov	r0, r3
 810270a:	f7ff ffc3 	bl	8102694 <SysTick_Config>
}
 810270e:	bf00      	nop
 8102710:	bd80      	pop	{r7, pc}
 8102712:	bf00      	nop
 8102714:	10000000 	.word	0x10000000
 8102718:	10624dd3 	.word	0x10624dd3

0810271c <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(const I2C_TypeDef *I2Cx)
{
 810271c:	b480      	push	{r7}
 810271e:	b083      	sub	sp, #12
 8102720:	af00      	add	r7, sp, #0
 8102722:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXE) == (I2C_ISR_TXE)) ? 1UL : 0UL);
 8102724:	687b      	ldr	r3, [r7, #4]
 8102726:	699b      	ldr	r3, [r3, #24]
 8102728:	f003 0301 	and.w	r3, r3, #1
 810272c:	2b01      	cmp	r3, #1
 810272e:	d101      	bne.n	8102734 <LL_I2C_IsActiveFlag_TXE+0x18>
 8102730:	2301      	movs	r3, #1
 8102732:	e000      	b.n	8102736 <LL_I2C_IsActiveFlag_TXE+0x1a>
 8102734:	2300      	movs	r3, #0
}
 8102736:	4618      	mov	r0, r3
 8102738:	370c      	adds	r7, #12
 810273a:	46bd      	mov	sp, r7
 810273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102740:	4770      	bx	lr

08102742 <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(const I2C_TypeDef *I2Cx)
{
 8102742:	b480      	push	{r7}
 8102744:	b083      	sub	sp, #12
 8102746:	af00      	add	r7, sp, #0
 8102748:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 810274a:	687b      	ldr	r3, [r7, #4]
 810274c:	699b      	ldr	r3, [r3, #24]
 810274e:	f003 0302 	and.w	r3, r3, #2
 8102752:	2b02      	cmp	r3, #2
 8102754:	d101      	bne.n	810275a <LL_I2C_IsActiveFlag_TXIS+0x18>
 8102756:	2301      	movs	r3, #1
 8102758:	e000      	b.n	810275c <LL_I2C_IsActiveFlag_TXIS+0x1a>
 810275a:	2300      	movs	r3, #0
}
 810275c:	4618      	mov	r0, r3
 810275e:	370c      	adds	r7, #12
 8102760:	46bd      	mov	sp, r7
 8102762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102766:	4770      	bx	lr

08102768 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(const I2C_TypeDef *I2Cx)
{
 8102768:	b480      	push	{r7}
 810276a:	b083      	sub	sp, #12
 810276c:	af00      	add	r7, sp, #0
 810276e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8102770:	687b      	ldr	r3, [r7, #4]
 8102772:	699b      	ldr	r3, [r3, #24]
 8102774:	f003 0304 	and.w	r3, r3, #4
 8102778:	2b04      	cmp	r3, #4
 810277a:	d101      	bne.n	8102780 <LL_I2C_IsActiveFlag_RXNE+0x18>
 810277c:	2301      	movs	r3, #1
 810277e:	e000      	b.n	8102782 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8102780:	2300      	movs	r3, #0
}
 8102782:	4618      	mov	r0, r3
 8102784:	370c      	adds	r7, #12
 8102786:	46bd      	mov	sp, r7
 8102788:	f85d 7b04 	ldr.w	r7, [sp], #4
 810278c:	4770      	bx	lr

0810278e <LL_I2C_IsActiveFlag_NACK>:
  * @rmtoll ISR          NACKF         LL_I2C_IsActiveFlag_NACK
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_NACK(const I2C_TypeDef *I2Cx)
{
 810278e:	b480      	push	{r7}
 8102790:	b083      	sub	sp, #12
 8102792:	af00      	add	r7, sp, #0
 8102794:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_NACKF) == (I2C_ISR_NACKF)) ? 1UL : 0UL);
 8102796:	687b      	ldr	r3, [r7, #4]
 8102798:	699b      	ldr	r3, [r3, #24]
 810279a:	f003 0310 	and.w	r3, r3, #16
 810279e:	2b10      	cmp	r3, #16
 81027a0:	d101      	bne.n	81027a6 <LL_I2C_IsActiveFlag_NACK+0x18>
 81027a2:	2301      	movs	r3, #1
 81027a4:	e000      	b.n	81027a8 <LL_I2C_IsActiveFlag_NACK+0x1a>
 81027a6:	2300      	movs	r3, #0
}
 81027a8:	4618      	mov	r0, r3
 81027aa:	370c      	adds	r7, #12
 81027ac:	46bd      	mov	sp, r7
 81027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027b2:	4770      	bx	lr

081027b4 <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(const I2C_TypeDef *I2Cx)
{
 81027b4:	b480      	push	{r7}
 81027b6:	b083      	sub	sp, #12
 81027b8:	af00      	add	r7, sp, #0
 81027ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 81027bc:	687b      	ldr	r3, [r7, #4]
 81027be:	699b      	ldr	r3, [r3, #24]
 81027c0:	f003 0320 	and.w	r3, r3, #32
 81027c4:	2b20      	cmp	r3, #32
 81027c6:	d101      	bne.n	81027cc <LL_I2C_IsActiveFlag_STOP+0x18>
 81027c8:	2301      	movs	r3, #1
 81027ca:	e000      	b.n	81027ce <LL_I2C_IsActiveFlag_STOP+0x1a>
 81027cc:	2300      	movs	r3, #0
}
 81027ce:	4618      	mov	r0, r3
 81027d0:	370c      	adds	r7, #12
 81027d2:	46bd      	mov	sp, r7
 81027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027d8:	4770      	bx	lr

081027da <LL_I2C_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_I2C_IsActiveFlag_TC
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TC(const I2C_TypeDef *I2Cx)
{
 81027da:	b480      	push	{r7}
 81027dc:	b083      	sub	sp, #12
 81027de:	af00      	add	r7, sp, #0
 81027e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TC) == (I2C_ISR_TC)) ? 1UL : 0UL);
 81027e2:	687b      	ldr	r3, [r7, #4]
 81027e4:	699b      	ldr	r3, [r3, #24]
 81027e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81027ea:	2b40      	cmp	r3, #64	@ 0x40
 81027ec:	d101      	bne.n	81027f2 <LL_I2C_IsActiveFlag_TC+0x18>
 81027ee:	2301      	movs	r3, #1
 81027f0:	e000      	b.n	81027f4 <LL_I2C_IsActiveFlag_TC+0x1a>
 81027f2:	2300      	movs	r3, #0
}
 81027f4:	4618      	mov	r0, r3
 81027f6:	370c      	adds	r7, #12
 81027f8:	46bd      	mov	sp, r7
 81027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027fe:	4770      	bx	lr

08102800 <LL_I2C_IsActiveFlag_BUSY>:
  * @rmtoll ISR          BUSY          LL_I2C_IsActiveFlag_BUSY
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BUSY(const I2C_TypeDef *I2Cx)
{
 8102800:	b480      	push	{r7}
 8102802:	b083      	sub	sp, #12
 8102804:	af00      	add	r7, sp, #0
 8102806:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_BUSY) == (I2C_ISR_BUSY)) ? 1UL : 0UL);
 8102808:	687b      	ldr	r3, [r7, #4]
 810280a:	699b      	ldr	r3, [r3, #24]
 810280c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8102810:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8102814:	d101      	bne.n	810281a <LL_I2C_IsActiveFlag_BUSY+0x1a>
 8102816:	2301      	movs	r3, #1
 8102818:	e000      	b.n	810281c <LL_I2C_IsActiveFlag_BUSY+0x1c>
 810281a:	2300      	movs	r3, #0
}
 810281c:	4618      	mov	r0, r3
 810281e:	370c      	adds	r7, #12
 8102820:	46bd      	mov	sp, r7
 8102822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102826:	4770      	bx	lr

08102828 <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 8102828:	b480      	push	{r7}
 810282a:	b083      	sub	sp, #12
 810282c:	af00      	add	r7, sp, #0
 810282e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8102830:	687b      	ldr	r3, [r7, #4]
 8102832:	69db      	ldr	r3, [r3, #28]
 8102834:	f043 0220 	orr.w	r2, r3, #32
 8102838:	687b      	ldr	r3, [r7, #4]
 810283a:	61da      	str	r2, [r3, #28]
}
 810283c:	bf00      	nop
 810283e:	370c      	adds	r7, #12
 8102840:	46bd      	mov	sp, r7
 8102842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102846:	4770      	bx	lr

08102848 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8102848:	b480      	push	{r7}
 810284a:	b083      	sub	sp, #12
 810284c:	af00      	add	r7, sp, #0
 810284e:	6078      	str	r0, [r7, #4]
 8102850:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8102852:	687b      	ldr	r3, [r7, #4]
 8102854:	685b      	ldr	r3, [r3, #4]
 8102856:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 810285a:	683b      	ldr	r3, [r7, #0]
 810285c:	431a      	orrs	r2, r3
 810285e:	687b      	ldr	r3, [r7, #4]
 8102860:	605a      	str	r2, [r3, #4]
}
 8102862:	bf00      	nop
 8102864:	370c      	adds	r7, #12
 8102866:	46bd      	mov	sp, r7
 8102868:	f85d 7b04 	ldr.w	r7, [sp], #4
 810286c:	4770      	bx	lr
	...

08102870 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8102870:	b480      	push	{r7}
 8102872:	b087      	sub	sp, #28
 8102874:	af00      	add	r7, sp, #0
 8102876:	60f8      	str	r0, [r7, #12]
 8102878:	60b9      	str	r1, [r7, #8]
 810287a:	607a      	str	r2, [r7, #4]
 810287c:	603b      	str	r3, [r7, #0]
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 810287e:	68bb      	ldr	r3, [r7, #8]
 8102880:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 8102884:	687b      	ldr	r3, [r7, #4]
 8102886:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 810288a:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 810288c:	683b      	ldr	r3, [r7, #0]
 810288e:	041b      	lsls	r3, r3, #16
 8102890:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 8102894:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8102896:	6a3b      	ldr	r3, [r7, #32]
 8102898:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 810289a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810289c:	4313      	orrs	r3, r2
 810289e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 81028a2:	617b      	str	r3, [r7, #20]
                             (uint32_t)EndMode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 81028a4:	68fb      	ldr	r3, [r7, #12]
 81028a6:	685a      	ldr	r2, [r3, #4]
 81028a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81028aa:	0d5b      	lsrs	r3, r3, #21
 81028ac:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 81028b0:	4b06      	ldr	r3, [pc, #24]	@ (81028cc <LL_I2C_HandleTransfer+0x5c>)
 81028b2:	430b      	orrs	r3, r1
 81028b4:	43db      	mvns	r3, r3
 81028b6:	401a      	ands	r2, r3
 81028b8:	697b      	ldr	r3, [r7, #20]
 81028ba:	431a      	orrs	r2, r3
 81028bc:	68fb      	ldr	r3, [r7, #12]
 81028be:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             tmp);
}
 81028c0:	bf00      	nop
 81028c2:	371c      	adds	r7, #28
 81028c4:	46bd      	mov	sp, r7
 81028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81028ca:	4770      	bx	lr
 81028cc:	03ff7bff 	.word	0x03ff7bff

081028d0 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(const I2C_TypeDef *I2Cx)
{
 81028d0:	b480      	push	{r7}
 81028d2:	b083      	sub	sp, #12
 81028d4:	af00      	add	r7, sp, #0
 81028d6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 81028d8:	687b      	ldr	r3, [r7, #4]
 81028da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81028dc:	b2db      	uxtb	r3, r3
}
 81028de:	4618      	mov	r0, r3
 81028e0:	370c      	adds	r7, #12
 81028e2:	46bd      	mov	sp, r7
 81028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81028e8:	4770      	bx	lr

081028ea <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 81028ea:	b480      	push	{r7}
 81028ec:	b083      	sub	sp, #12
 81028ee:	af00      	add	r7, sp, #0
 81028f0:	6078      	str	r0, [r7, #4]
 81028f2:	460b      	mov	r3, r1
 81028f4:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 81028f6:	78fa      	ldrb	r2, [r7, #3]
 81028f8:	687b      	ldr	r3, [r7, #4]
 81028fa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 81028fc:	bf00      	nop
 81028fe:	370c      	adds	r7, #12
 8102900:	46bd      	mov	sp, r7
 8102902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102906:	4770      	bx	lr

08102908 <I2C_Write>:
  return ((READ_BIT(I2Cx->ISR, LL_I2C_ISR_BUSY) == LL_I2C_ISR_BUSY) ? 1UL : 0UL);
}

Peripheral_StatusTypeDef I2C_Write(LL_I2C_HandleTypeDef *i2c, uint8_t Slave_address, uint8_t Reg_address,
															uint8_t *pData, uint8_t Length)
{
 8102908:	b580      	push	{r7, lr}
 810290a:	b088      	sub	sp, #32
 810290c:	af02      	add	r7, sp, #8
 810290e:	60f8      	str	r0, [r7, #12]
 8102910:	607b      	str	r3, [r7, #4]
 8102912:	460b      	mov	r3, r1
 8102914:	72fb      	strb	r3, [r7, #11]
 8102916:	4613      	mov	r3, r2
 8102918:	72bb      	strb	r3, [r7, #10]
	uint32_t tickstart;
    tickstart = HAL_GetTick();
 810291a:	f001 feeb 	bl	81046f4 <HAL_GetTick>
 810291e:	6138      	str	r0, [r7, #16]
    while(LL_I2C_IsActiveFlag_BUSY(i2c->Instance))
 8102920:	e00a      	b.n	8102938 <I2C_Write+0x30>
    {
		if(HAL_GetTick() - tickstart > I2C_TIMEOUT){
 8102922:	f001 fee7 	bl	81046f4 <HAL_GetTick>
 8102926:	4602      	mov	r2, r0
 8102928:	693b      	ldr	r3, [r7, #16]
 810292a:	1ad3      	subs	r3, r2, r3
 810292c:	2b14      	cmp	r3, #20
 810292e:	d903      	bls.n	8102938 <I2C_Write+0x30>
			I2C4_ReInit();
 8102930:	f000 ff76 	bl	8103820 <I2C4_ReInit>
		      return Status_BUSY;
 8102934:	2302      	movs	r3, #2
 8102936:	e0a7      	b.n	8102a88 <I2C_Write+0x180>
    while(LL_I2C_IsActiveFlag_BUSY(i2c->Instance))
 8102938:	68fb      	ldr	r3, [r7, #12]
 810293a:	681b      	ldr	r3, [r3, #0]
 810293c:	4618      	mov	r0, r3
 810293e:	f7ff ff5f 	bl	8102800 <LL_I2C_IsActiveFlag_BUSY>
 8102942:	4603      	mov	r3, r0
 8102944:	2b00      	cmp	r3, #0
 8102946:	d1ec      	bne.n	8102922 <I2C_Write+0x1a>
		}
    }
    LL_I2C_HandleTransfer((i2c->Instance), (Slave_address << 1), LL_I2C_ADDRSLAVE_7BIT, Length+1 ,LL_I2C_MODE_AUTOEND,LL_I2C_GENERATE_START_WRITE );
 8102948:	68fb      	ldr	r3, [r7, #12]
 810294a:	6818      	ldr	r0, [r3, #0]
 810294c:	7afb      	ldrb	r3, [r7, #11]
 810294e:	0059      	lsls	r1, r3, #1
 8102950:	f897 3020 	ldrb.w	r3, [r7, #32]
 8102954:	3301      	adds	r3, #1
 8102956:	461a      	mov	r2, r3
 8102958:	4b4d      	ldr	r3, [pc, #308]	@ (8102a90 <I2C_Write+0x188>)
 810295a:	9301      	str	r3, [sp, #4]
 810295c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8102960:	9300      	str	r3, [sp, #0]
 8102962:	4613      	mov	r3, r2
 8102964:	2200      	movs	r2, #0
 8102966:	f7ff ff83 	bl	8102870 <LL_I2C_HandleTransfer>

    tickstart = HAL_GetTick();
 810296a:	f001 fec3 	bl	81046f4 <HAL_GetTick>
 810296e:	6138      	str	r0, [r7, #16]

	while(!LL_I2C_IsActiveFlag_TXIS(i2c->Instance)){
 8102970:	e014      	b.n	810299c <I2C_Write+0x94>
		/* check if slave acknowledged */
		if(LL_I2C_IsActiveFlag_NACK(i2c->Instance)){
 8102972:	68fb      	ldr	r3, [r7, #12]
 8102974:	681b      	ldr	r3, [r3, #0]
 8102976:	4618      	mov	r0, r3
 8102978:	f7ff ff09 	bl	810278e <LL_I2C_IsActiveFlag_NACK>
 810297c:	4603      	mov	r3, r0
 810297e:	2b00      	cmp	r3, #0
 8102980:	d001      	beq.n	8102986 <I2C_Write+0x7e>
			return Status_ERROR;
 8102982:	2301      	movs	r3, #1
 8102984:	e080      	b.n	8102a88 <I2C_Write+0x180>
		}
		if(HAL_GetTick() - tickstart > I2C_TIMEOUT){
 8102986:	f001 feb5 	bl	81046f4 <HAL_GetTick>
 810298a:	4602      	mov	r2, r0
 810298c:	693b      	ldr	r3, [r7, #16]
 810298e:	1ad3      	subs	r3, r2, r3
 8102990:	2b14      	cmp	r3, #20
 8102992:	d903      	bls.n	810299c <I2C_Write+0x94>
			I2C4_ReInit();
 8102994:	f000 ff44 	bl	8103820 <I2C4_ReInit>
			return Status_TIMEOUT;
 8102998:	2303      	movs	r3, #3
 810299a:	e075      	b.n	8102a88 <I2C_Write+0x180>
	while(!LL_I2C_IsActiveFlag_TXIS(i2c->Instance)){
 810299c:	68fb      	ldr	r3, [r7, #12]
 810299e:	681b      	ldr	r3, [r3, #0]
 81029a0:	4618      	mov	r0, r3
 81029a2:	f7ff fece 	bl	8102742 <LL_I2C_IsActiveFlag_TXIS>
 81029a6:	4603      	mov	r3, r0
 81029a8:	2b00      	cmp	r3, #0
 81029aa:	d0e2      	beq.n	8102972 <I2C_Write+0x6a>
		}
	}

	LL_I2C_TransmitData8((i2c->Instance), Reg_address);
 81029ac:	68fb      	ldr	r3, [r7, #12]
 81029ae:	681b      	ldr	r3, [r3, #0]
 81029b0:	7aba      	ldrb	r2, [r7, #10]
 81029b2:	4611      	mov	r1, r2
 81029b4:	4618      	mov	r0, r3
 81029b6:	f7ff ff98 	bl	81028ea <LL_I2C_TransmitData8>

	tickstart = HAL_GetTick();
 81029ba:	f001 fe9b 	bl	81046f4 <HAL_GetTick>
 81029be:	6138      	str	r0, [r7, #16]

	while(!LL_I2C_IsActiveFlag_TXIS(i2c->Instance)){
 81029c0:	e014      	b.n	81029ec <I2C_Write+0xe4>
		/* check if slave acknowledged */
		if(LL_I2C_IsActiveFlag_NACK(i2c->Instance)){
 81029c2:	68fb      	ldr	r3, [r7, #12]
 81029c4:	681b      	ldr	r3, [r3, #0]
 81029c6:	4618      	mov	r0, r3
 81029c8:	f7ff fee1 	bl	810278e <LL_I2C_IsActiveFlag_NACK>
 81029cc:	4603      	mov	r3, r0
 81029ce:	2b00      	cmp	r3, #0
 81029d0:	d001      	beq.n	81029d6 <I2C_Write+0xce>
			return Status_ERROR;
 81029d2:	2301      	movs	r3, #1
 81029d4:	e058      	b.n	8102a88 <I2C_Write+0x180>
		}
		if(HAL_GetTick() - tickstart > I2C_TIMEOUT){
 81029d6:	f001 fe8d 	bl	81046f4 <HAL_GetTick>
 81029da:	4602      	mov	r2, r0
 81029dc:	693b      	ldr	r3, [r7, #16]
 81029de:	1ad3      	subs	r3, r2, r3
 81029e0:	2b14      	cmp	r3, #20
 81029e2:	d903      	bls.n	81029ec <I2C_Write+0xe4>
			I2C4_ReInit();
 81029e4:	f000 ff1c 	bl	8103820 <I2C4_ReInit>
			return Status_TIMEOUT;
 81029e8:	2303      	movs	r3, #3
 81029ea:	e04d      	b.n	8102a88 <I2C_Write+0x180>
	while(!LL_I2C_IsActiveFlag_TXIS(i2c->Instance)){
 81029ec:	68fb      	ldr	r3, [r7, #12]
 81029ee:	681b      	ldr	r3, [r3, #0]
 81029f0:	4618      	mov	r0, r3
 81029f2:	f7ff fea6 	bl	8102742 <LL_I2C_IsActiveFlag_TXIS>
 81029f6:	4603      	mov	r3, r0
 81029f8:	2b00      	cmp	r3, #0
 81029fa:	d0e2      	beq.n	81029c2 <I2C_Write+0xba>
		}
	}

    for(uint8_t i = 0; i < Length; i++)
 81029fc:	2300      	movs	r3, #0
 81029fe:	75fb      	strb	r3, [r7, #23]
 8102a00:	e028      	b.n	8102a54 <I2C_Write+0x14c>
    {
        // check if the TXIS flag is set
    	while(!LL_I2C_IsActiveFlag_TXIS(i2c->Instance)){
    		/* check if slave acknowledged */
    		if(LL_I2C_IsActiveFlag_NACK(i2c->Instance)){
 8102a02:	68fb      	ldr	r3, [r7, #12]
 8102a04:	681b      	ldr	r3, [r3, #0]
 8102a06:	4618      	mov	r0, r3
 8102a08:	f7ff fec1 	bl	810278e <LL_I2C_IsActiveFlag_NACK>
 8102a0c:	4603      	mov	r3, r0
 8102a0e:	2b00      	cmp	r3, #0
 8102a10:	d001      	beq.n	8102a16 <I2C_Write+0x10e>
    			return Status_ERROR;
 8102a12:	2301      	movs	r3, #1
 8102a14:	e038      	b.n	8102a88 <I2C_Write+0x180>
    		}
    		if(HAL_GetTick() - tickstart > I2C_TIMEOUT){
 8102a16:	f001 fe6d 	bl	81046f4 <HAL_GetTick>
 8102a1a:	4602      	mov	r2, r0
 8102a1c:	693b      	ldr	r3, [r7, #16]
 8102a1e:	1ad3      	subs	r3, r2, r3
 8102a20:	2b14      	cmp	r3, #20
 8102a22:	d903      	bls.n	8102a2c <I2C_Write+0x124>
    			I2C4_ReInit();
 8102a24:	f000 fefc 	bl	8103820 <I2C4_ReInit>
    			return Status_TIMEOUT;
 8102a28:	2303      	movs	r3, #3
 8102a2a:	e02d      	b.n	8102a88 <I2C_Write+0x180>
    	while(!LL_I2C_IsActiveFlag_TXIS(i2c->Instance)){
 8102a2c:	68fb      	ldr	r3, [r7, #12]
 8102a2e:	681b      	ldr	r3, [r3, #0]
 8102a30:	4618      	mov	r0, r3
 8102a32:	f7ff fe86 	bl	8102742 <LL_I2C_IsActiveFlag_TXIS>
 8102a36:	4603      	mov	r3, r0
 8102a38:	2b00      	cmp	r3, #0
 8102a3a:	d0e2      	beq.n	8102a02 <I2C_Write+0xfa>
    		}
    	}
        // Write in the DR register the data to be sent
        LL_I2C_TransmitData8((i2c->Instance), pData[i]);
 8102a3c:	68fb      	ldr	r3, [r7, #12]
 8102a3e:	6818      	ldr	r0, [r3, #0]
 8102a40:	7dfb      	ldrb	r3, [r7, #23]
 8102a42:	687a      	ldr	r2, [r7, #4]
 8102a44:	4413      	add	r3, r2
 8102a46:	781b      	ldrb	r3, [r3, #0]
 8102a48:	4619      	mov	r1, r3
 8102a4a:	f7ff ff4e 	bl	81028ea <LL_I2C_TransmitData8>
    for(uint8_t i = 0; i < Length; i++)
 8102a4e:	7dfb      	ldrb	r3, [r7, #23]
 8102a50:	3301      	adds	r3, #1
 8102a52:	75fb      	strb	r3, [r7, #23]
 8102a54:	7dfa      	ldrb	r2, [r7, #23]
 8102a56:	f897 3020 	ldrb.w	r3, [r7, #32]
 8102a5a:	429a      	cmp	r2, r3
 8102a5c:	d3e6      	bcc.n	8102a2c <I2C_Write+0x124>

    }

	while(!LL_I2C_IsActiveFlag_TXE(i2c->Instance)){
 8102a5e:	e00a      	b.n	8102a76 <I2C_Write+0x16e>
		if(HAL_GetTick() - tickstart > I2C_TIMEOUT){
 8102a60:	f001 fe48 	bl	81046f4 <HAL_GetTick>
 8102a64:	4602      	mov	r2, r0
 8102a66:	693b      	ldr	r3, [r7, #16]
 8102a68:	1ad3      	subs	r3, r2, r3
 8102a6a:	2b14      	cmp	r3, #20
 8102a6c:	d903      	bls.n	8102a76 <I2C_Write+0x16e>
			I2C4_ReInit();
 8102a6e:	f000 fed7 	bl	8103820 <I2C4_ReInit>
			return Status_TIMEOUT;
 8102a72:	2303      	movs	r3, #3
 8102a74:	e008      	b.n	8102a88 <I2C_Write+0x180>
	while(!LL_I2C_IsActiveFlag_TXE(i2c->Instance)){
 8102a76:	68fb      	ldr	r3, [r7, #12]
 8102a78:	681b      	ldr	r3, [r3, #0]
 8102a7a:	4618      	mov	r0, r3
 8102a7c:	f7ff fe4e 	bl	810271c <LL_I2C_IsActiveFlag_TXE>
 8102a80:	4603      	mov	r3, r0
 8102a82:	2b00      	cmp	r3, #0
 8102a84:	d0ec      	beq.n	8102a60 <I2C_Write+0x158>
		}
	}

	return Status_OK;
 8102a86:	2300      	movs	r3, #0
}
 8102a88:	4618      	mov	r0, r3
 8102a8a:	3718      	adds	r7, #24
 8102a8c:	46bd      	mov	sp, r7
 8102a8e:	bd80      	pop	{r7, pc}
 8102a90:	80002000 	.word	0x80002000

08102a94 <I2C_Read_NOSTOP>:

Peripheral_StatusTypeDef I2C_Read_NOSTOP(LL_I2C_HandleTypeDef *i2c, uint8_t Slave_address, uint8_t Reg_address,
                                           uint8_t *pData, uint8_t Length)
{
 8102a94:	b590      	push	{r4, r7, lr}
 8102a96:	b089      	sub	sp, #36	@ 0x24
 8102a98:	af02      	add	r7, sp, #8
 8102a9a:	60f8      	str	r0, [r7, #12]
 8102a9c:	607b      	str	r3, [r7, #4]
 8102a9e:	460b      	mov	r3, r1
 8102aa0:	72fb      	strb	r3, [r7, #11]
 8102aa2:	4613      	mov	r3, r2
 8102aa4:	72bb      	strb	r3, [r7, #10]
    uint32_t tickstart;

    // 1. Chờ đến khi I2C không bận
    tickstart = HAL_GetTick();
 8102aa6:	f001 fe25 	bl	81046f4 <HAL_GetTick>
 8102aaa:	6138      	str	r0, [r7, #16]
    while (LL_I2C_IsActiveFlag_BUSY(i2c->Instance))
 8102aac:	e00a      	b.n	8102ac4 <I2C_Read_NOSTOP+0x30>
    {
        if (HAL_GetTick() - tickstart > I2C_TIMEOUT)
 8102aae:	f001 fe21 	bl	81046f4 <HAL_GetTick>
 8102ab2:	4602      	mov	r2, r0
 8102ab4:	693b      	ldr	r3, [r7, #16]
 8102ab6:	1ad3      	subs	r3, r2, r3
 8102ab8:	2b14      	cmp	r3, #20
 8102aba:	d903      	bls.n	8102ac4 <I2C_Read_NOSTOP+0x30>
        {
            I2C4_ReInit();
 8102abc:	f000 feb0 	bl	8103820 <I2C4_ReInit>
            return Status_BUSY;
 8102ac0:	2302      	movs	r3, #2
 8102ac2:	e0b3      	b.n	8102c2c <I2C_Read_NOSTOP+0x198>
    while (LL_I2C_IsActiveFlag_BUSY(i2c->Instance))
 8102ac4:	68fb      	ldr	r3, [r7, #12]
 8102ac6:	681b      	ldr	r3, [r3, #0]
 8102ac8:	4618      	mov	r0, r3
 8102aca:	f7ff fe99 	bl	8102800 <LL_I2C_IsActiveFlag_BUSY>
 8102ace:	4603      	mov	r3, r0
 8102ad0:	2b00      	cmp	r3, #0
 8102ad2:	d1ec      	bne.n	8102aae <I2C_Read_NOSTOP+0x1a>
        }
    }

    // 2. Gửi START condition + Địa chỉ slave (Write mode)
    LL_I2C_HandleTransfer(i2c->Instance, Slave_address << 1, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_SOFTEND, LL_I2C_GENERATE_START_WRITE);
 8102ad4:	68fb      	ldr	r3, [r7, #12]
 8102ad6:	6818      	ldr	r0, [r3, #0]
 8102ad8:	7afb      	ldrb	r3, [r7, #11]
 8102ada:	0059      	lsls	r1, r3, #1
 8102adc:	4b55      	ldr	r3, [pc, #340]	@ (8102c34 <I2C_Read_NOSTOP+0x1a0>)
 8102ade:	9301      	str	r3, [sp, #4]
 8102ae0:	2300      	movs	r3, #0
 8102ae2:	9300      	str	r3, [sp, #0]
 8102ae4:	2301      	movs	r3, #1
 8102ae6:	2200      	movs	r2, #0
 8102ae8:	f7ff fec2 	bl	8102870 <LL_I2C_HandleTransfer>

    tickstart = HAL_GetTick();
 8102aec:	f001 fe02 	bl	81046f4 <HAL_GetTick>
 8102af0:	6138      	str	r0, [r7, #16]
    while (!LL_I2C_IsActiveFlag_TXIS(i2c->Instance))
 8102af2:	e014      	b.n	8102b1e <I2C_Read_NOSTOP+0x8a>
    {
        if (LL_I2C_IsActiveFlag_NACK(i2c->Instance))
 8102af4:	68fb      	ldr	r3, [r7, #12]
 8102af6:	681b      	ldr	r3, [r3, #0]
 8102af8:	4618      	mov	r0, r3
 8102afa:	f7ff fe48 	bl	810278e <LL_I2C_IsActiveFlag_NACK>
 8102afe:	4603      	mov	r3, r0
 8102b00:	2b00      	cmp	r3, #0
 8102b02:	d001      	beq.n	8102b08 <I2C_Read_NOSTOP+0x74>
            return Status_ERROR;
 8102b04:	2301      	movs	r3, #1
 8102b06:	e091      	b.n	8102c2c <I2C_Read_NOSTOP+0x198>
        if (HAL_GetTick() - tickstart > I2C_TIMEOUT)
 8102b08:	f001 fdf4 	bl	81046f4 <HAL_GetTick>
 8102b0c:	4602      	mov	r2, r0
 8102b0e:	693b      	ldr	r3, [r7, #16]
 8102b10:	1ad3      	subs	r3, r2, r3
 8102b12:	2b14      	cmp	r3, #20
 8102b14:	d903      	bls.n	8102b1e <I2C_Read_NOSTOP+0x8a>
        {
            I2C4_ReInit();
 8102b16:	f000 fe83 	bl	8103820 <I2C4_ReInit>
            return Status_TIMEOUT;
 8102b1a:	2303      	movs	r3, #3
 8102b1c:	e086      	b.n	8102c2c <I2C_Read_NOSTOP+0x198>
    while (!LL_I2C_IsActiveFlag_TXIS(i2c->Instance))
 8102b1e:	68fb      	ldr	r3, [r7, #12]
 8102b20:	681b      	ldr	r3, [r3, #0]
 8102b22:	4618      	mov	r0, r3
 8102b24:	f7ff fe0d 	bl	8102742 <LL_I2C_IsActiveFlag_TXIS>
 8102b28:	4603      	mov	r3, r0
 8102b2a:	2b00      	cmp	r3, #0
 8102b2c:	d0e2      	beq.n	8102af4 <I2C_Read_NOSTOP+0x60>
        }
    }

    // 3. Gửi địa chỉ thanh ghi
    LL_I2C_TransmitData8(i2c->Instance, Reg_address);
 8102b2e:	68fb      	ldr	r3, [r7, #12]
 8102b30:	681b      	ldr	r3, [r3, #0]
 8102b32:	7aba      	ldrb	r2, [r7, #10]
 8102b34:	4611      	mov	r1, r2
 8102b36:	4618      	mov	r0, r3
 8102b38:	f7ff fed7 	bl	81028ea <LL_I2C_TransmitData8>

    tickstart = HAL_GetTick();
 8102b3c:	f001 fdda 	bl	81046f4 <HAL_GetTick>
 8102b40:	6138      	str	r0, [r7, #16]
    while (!LL_I2C_IsActiveFlag_TC(i2c->Instance)) // Chờ hoàn thành gửi địa chỉ thanh ghi
 8102b42:	e00a      	b.n	8102b5a <I2C_Read_NOSTOP+0xc6>
    {
        if (HAL_GetTick() - tickstart > I2C_TIMEOUT)
 8102b44:	f001 fdd6 	bl	81046f4 <HAL_GetTick>
 8102b48:	4602      	mov	r2, r0
 8102b4a:	693b      	ldr	r3, [r7, #16]
 8102b4c:	1ad3      	subs	r3, r2, r3
 8102b4e:	2b14      	cmp	r3, #20
 8102b50:	d903      	bls.n	8102b5a <I2C_Read_NOSTOP+0xc6>
        {
            I2C4_ReInit();
 8102b52:	f000 fe65 	bl	8103820 <I2C4_ReInit>
            return Status_TIMEOUT;
 8102b56:	2303      	movs	r3, #3
 8102b58:	e068      	b.n	8102c2c <I2C_Read_NOSTOP+0x198>
    while (!LL_I2C_IsActiveFlag_TC(i2c->Instance)) // Chờ hoàn thành gửi địa chỉ thanh ghi
 8102b5a:	68fb      	ldr	r3, [r7, #12]
 8102b5c:	681b      	ldr	r3, [r3, #0]
 8102b5e:	4618      	mov	r0, r3
 8102b60:	f7ff fe3b 	bl	81027da <LL_I2C_IsActiveFlag_TC>
 8102b64:	4603      	mov	r3, r0
 8102b66:	2b00      	cmp	r3, #0
 8102b68:	d0ec      	beq.n	8102b44 <I2C_Read_NOSTOP+0xb0>
        }
    }

    // 4. Gửi START condition + Địa chỉ slave (Read mode)
    LL_I2C_HandleTransfer(i2c->Instance, Slave_address << 1, LL_I2C_ADDRSLAVE_7BIT, Length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8102b6a:	68fb      	ldr	r3, [r7, #12]
 8102b6c:	6818      	ldr	r0, [r3, #0]
 8102b6e:	7afb      	ldrb	r3, [r7, #11]
 8102b70:	0059      	lsls	r1, r3, #1
 8102b72:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8102b76:	4a30      	ldr	r2, [pc, #192]	@ (8102c38 <I2C_Read_NOSTOP+0x1a4>)
 8102b78:	9201      	str	r2, [sp, #4]
 8102b7a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8102b7e:	9200      	str	r2, [sp, #0]
 8102b80:	2200      	movs	r2, #0
 8102b82:	f7ff fe75 	bl	8102870 <LL_I2C_HandleTransfer>

    // 5. Đọc dữ liệu từ RXDR
    for (int i = 0; i < Length; i++)
 8102b86:	2300      	movs	r3, #0
 8102b88:	617b      	str	r3, [r7, #20]
 8102b8a:	e02d      	b.n	8102be8 <I2C_Read_NOSTOP+0x154>
    {
        tickstart = HAL_GetTick();
 8102b8c:	f001 fdb2 	bl	81046f4 <HAL_GetTick>
 8102b90:	6138      	str	r0, [r7, #16]
        while (!LL_I2C_IsActiveFlag_RXNE(i2c->Instance))
 8102b92:	e014      	b.n	8102bbe <I2C_Read_NOSTOP+0x12a>
        {
            if (LL_I2C_IsActiveFlag_NACK(i2c->Instance))
 8102b94:	68fb      	ldr	r3, [r7, #12]
 8102b96:	681b      	ldr	r3, [r3, #0]
 8102b98:	4618      	mov	r0, r3
 8102b9a:	f7ff fdf8 	bl	810278e <LL_I2C_IsActiveFlag_NACK>
 8102b9e:	4603      	mov	r3, r0
 8102ba0:	2b00      	cmp	r3, #0
 8102ba2:	d001      	beq.n	8102ba8 <I2C_Read_NOSTOP+0x114>
                return Status_ERROR;
 8102ba4:	2301      	movs	r3, #1
 8102ba6:	e041      	b.n	8102c2c <I2C_Read_NOSTOP+0x198>
            if (HAL_GetTick() - tickstart > I2C_TIMEOUT)
 8102ba8:	f001 fda4 	bl	81046f4 <HAL_GetTick>
 8102bac:	4602      	mov	r2, r0
 8102bae:	693b      	ldr	r3, [r7, #16]
 8102bb0:	1ad3      	subs	r3, r2, r3
 8102bb2:	2b14      	cmp	r3, #20
 8102bb4:	d903      	bls.n	8102bbe <I2C_Read_NOSTOP+0x12a>
            {
                I2C4_ReInit();
 8102bb6:	f000 fe33 	bl	8103820 <I2C4_ReInit>
                return Status_TIMEOUT;
 8102bba:	2303      	movs	r3, #3
 8102bbc:	e036      	b.n	8102c2c <I2C_Read_NOSTOP+0x198>
        while (!LL_I2C_IsActiveFlag_RXNE(i2c->Instance))
 8102bbe:	68fb      	ldr	r3, [r7, #12]
 8102bc0:	681b      	ldr	r3, [r3, #0]
 8102bc2:	4618      	mov	r0, r3
 8102bc4:	f7ff fdd0 	bl	8102768 <LL_I2C_IsActiveFlag_RXNE>
 8102bc8:	4603      	mov	r3, r0
 8102bca:	2b00      	cmp	r3, #0
 8102bcc:	d0e2      	beq.n	8102b94 <I2C_Read_NOSTOP+0x100>
            }
        }
        pData[i] = LL_I2C_ReceiveData8(i2c->Instance);
 8102bce:	68fb      	ldr	r3, [r7, #12]
 8102bd0:	6819      	ldr	r1, [r3, #0]
 8102bd2:	697b      	ldr	r3, [r7, #20]
 8102bd4:	687a      	ldr	r2, [r7, #4]
 8102bd6:	18d4      	adds	r4, r2, r3
 8102bd8:	4608      	mov	r0, r1
 8102bda:	f7ff fe79 	bl	81028d0 <LL_I2C_ReceiveData8>
 8102bde:	4603      	mov	r3, r0
 8102be0:	7023      	strb	r3, [r4, #0]
    for (int i = 0; i < Length; i++)
 8102be2:	697b      	ldr	r3, [r7, #20]
 8102be4:	3301      	adds	r3, #1
 8102be6:	617b      	str	r3, [r7, #20]
 8102be8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8102bec:	697a      	ldr	r2, [r7, #20]
 8102bee:	429a      	cmp	r2, r3
 8102bf0:	dbcc      	blt.n	8102b8c <I2C_Read_NOSTOP+0xf8>
    }

    // 6. Chờ STOP condition
    tickstart = HAL_GetTick();
 8102bf2:	f001 fd7f 	bl	81046f4 <HAL_GetTick>
 8102bf6:	6138      	str	r0, [r7, #16]
    while (!LL_I2C_IsActiveFlag_STOP(i2c->Instance))
 8102bf8:	e00a      	b.n	8102c10 <I2C_Read_NOSTOP+0x17c>
    {
        if (HAL_GetTick() - tickstart > I2C_TIMEOUT)
 8102bfa:	f001 fd7b 	bl	81046f4 <HAL_GetTick>
 8102bfe:	4602      	mov	r2, r0
 8102c00:	693b      	ldr	r3, [r7, #16]
 8102c02:	1ad3      	subs	r3, r2, r3
 8102c04:	2b14      	cmp	r3, #20
 8102c06:	d903      	bls.n	8102c10 <I2C_Read_NOSTOP+0x17c>
        {
            I2C4_ReInit();
 8102c08:	f000 fe0a 	bl	8103820 <I2C4_ReInit>
            return Status_TIMEOUT;
 8102c0c:	2303      	movs	r3, #3
 8102c0e:	e00d      	b.n	8102c2c <I2C_Read_NOSTOP+0x198>
    while (!LL_I2C_IsActiveFlag_STOP(i2c->Instance))
 8102c10:	68fb      	ldr	r3, [r7, #12]
 8102c12:	681b      	ldr	r3, [r3, #0]
 8102c14:	4618      	mov	r0, r3
 8102c16:	f7ff fdcd 	bl	81027b4 <LL_I2C_IsActiveFlag_STOP>
 8102c1a:	4603      	mov	r3, r0
 8102c1c:	2b00      	cmp	r3, #0
 8102c1e:	d0ec      	beq.n	8102bfa <I2C_Read_NOSTOP+0x166>
        }
    }
    LL_I2C_ClearFlag_STOP(i2c->Instance);
 8102c20:	68fb      	ldr	r3, [r7, #12]
 8102c22:	681b      	ldr	r3, [r3, #0]
 8102c24:	4618      	mov	r0, r3
 8102c26:	f7ff fdff 	bl	8102828 <LL_I2C_ClearFlag_STOP>

    return Status_OK;
 8102c2a:	2300      	movs	r3, #0
}
 8102c2c:	4618      	mov	r0, r3
 8102c2e:	371c      	adds	r7, #28
 8102c30:	46bd      	mov	sp, r7
 8102c32:	bd90      	pop	{r4, r7, pc}
 8102c34:	80002000 	.word	0x80002000
 8102c38:	80002400 	.word	0x80002400

08102c3c <I2C_Read>:



Peripheral_StatusTypeDef I2C_Read(LL_I2C_HandleTypeDef *i2c, uint8_t Slave_address, uint8_t Reg_address,
															uint8_t *pData, uint8_t Length)
{
 8102c3c:	b590      	push	{r4, r7, lr}
 8102c3e:	b089      	sub	sp, #36	@ 0x24
 8102c40:	af02      	add	r7, sp, #8
 8102c42:	60f8      	str	r0, [r7, #12]
 8102c44:	607b      	str	r3, [r7, #4]
 8102c46:	460b      	mov	r3, r1
 8102c48:	72fb      	strb	r3, [r7, #11]
 8102c4a:	4613      	mov	r3, r2
 8102c4c:	72bb      	strb	r3, [r7, #10]
	uint32_t tickstart;
    tickstart = HAL_GetTick();
 8102c4e:	f001 fd51 	bl	81046f4 <HAL_GetTick>
 8102c52:	6138      	str	r0, [r7, #16]
    while(LL_I2C_IsActiveFlag_BUSY(i2c->Instance))
 8102c54:	e00a      	b.n	8102c6c <I2C_Read+0x30>
    {
		if(HAL_GetTick() - tickstart > I2C_TIMEOUT){
 8102c56:	f001 fd4d 	bl	81046f4 <HAL_GetTick>
 8102c5a:	4602      	mov	r2, r0
 8102c5c:	693b      	ldr	r3, [r7, #16]
 8102c5e:	1ad3      	subs	r3, r2, r3
 8102c60:	2b14      	cmp	r3, #20
 8102c62:	d903      	bls.n	8102c6c <I2C_Read+0x30>
			I2C4_ReInit();
 8102c64:	f000 fddc 	bl	8103820 <I2C4_ReInit>
		      return Status_BUSY;
 8102c68:	2302      	movs	r3, #2
 8102c6a:	e0b1      	b.n	8102dd0 <I2C_Read+0x194>
    while(LL_I2C_IsActiveFlag_BUSY(i2c->Instance))
 8102c6c:	68fb      	ldr	r3, [r7, #12]
 8102c6e:	681b      	ldr	r3, [r3, #0]
 8102c70:	4618      	mov	r0, r3
 8102c72:	f7ff fdc5 	bl	8102800 <LL_I2C_IsActiveFlag_BUSY>
 8102c76:	4603      	mov	r3, r0
 8102c78:	2b00      	cmp	r3, #0
 8102c7a:	d1ec      	bne.n	8102c56 <I2C_Read+0x1a>
		}
    }

    LL_I2C_HandleTransfer((i2c->Instance), (Slave_address << 1), LL_I2C_ADDRSLAVE_7BIT, 1,LL_I2C_MODE_SOFTEND,LL_I2C_GENERATE_START_WRITE);
 8102c7c:	68fb      	ldr	r3, [r7, #12]
 8102c7e:	6818      	ldr	r0, [r3, #0]
 8102c80:	7afb      	ldrb	r3, [r7, #11]
 8102c82:	0059      	lsls	r1, r3, #1
 8102c84:	4b54      	ldr	r3, [pc, #336]	@ (8102dd8 <I2C_Read+0x19c>)
 8102c86:	9301      	str	r3, [sp, #4]
 8102c88:	2300      	movs	r3, #0
 8102c8a:	9300      	str	r3, [sp, #0]
 8102c8c:	2301      	movs	r3, #1
 8102c8e:	2200      	movs	r2, #0
 8102c90:	f7ff fdee 	bl	8102870 <LL_I2C_HandleTransfer>

    tickstart = HAL_GetTick();
 8102c94:	f001 fd2e 	bl	81046f4 <HAL_GetTick>
 8102c98:	6138      	str	r0, [r7, #16]

	while(!LL_I2C_IsActiveFlag_TXIS(i2c->Instance)){
 8102c9a:	e014      	b.n	8102cc6 <I2C_Read+0x8a>
		/* check if slave acknowledged */
		if(LL_I2C_IsActiveFlag_NACK(i2c->Instance)){
 8102c9c:	68fb      	ldr	r3, [r7, #12]
 8102c9e:	681b      	ldr	r3, [r3, #0]
 8102ca0:	4618      	mov	r0, r3
 8102ca2:	f7ff fd74 	bl	810278e <LL_I2C_IsActiveFlag_NACK>
 8102ca6:	4603      	mov	r3, r0
 8102ca8:	2b00      	cmp	r3, #0
 8102caa:	d001      	beq.n	8102cb0 <I2C_Read+0x74>
			return Status_ERROR;
 8102cac:	2301      	movs	r3, #1
 8102cae:	e08f      	b.n	8102dd0 <I2C_Read+0x194>
		}
		if(HAL_GetTick() - tickstart > I2C_TIMEOUT){
 8102cb0:	f001 fd20 	bl	81046f4 <HAL_GetTick>
 8102cb4:	4602      	mov	r2, r0
 8102cb6:	693b      	ldr	r3, [r7, #16]
 8102cb8:	1ad3      	subs	r3, r2, r3
 8102cba:	2b14      	cmp	r3, #20
 8102cbc:	d903      	bls.n	8102cc6 <I2C_Read+0x8a>
			I2C4_ReInit();
 8102cbe:	f000 fdaf 	bl	8103820 <I2C4_ReInit>

			return Status_TIMEOUT;
 8102cc2:	2303      	movs	r3, #3
 8102cc4:	e084      	b.n	8102dd0 <I2C_Read+0x194>
	while(!LL_I2C_IsActiveFlag_TXIS(i2c->Instance)){
 8102cc6:	68fb      	ldr	r3, [r7, #12]
 8102cc8:	681b      	ldr	r3, [r3, #0]
 8102cca:	4618      	mov	r0, r3
 8102ccc:	f7ff fd39 	bl	8102742 <LL_I2C_IsActiveFlag_TXIS>
 8102cd0:	4603      	mov	r3, r0
 8102cd2:	2b00      	cmp	r3, #0
 8102cd4:	d0e2      	beq.n	8102c9c <I2C_Read+0x60>
		}
	}

	LL_I2C_TransmitData8((i2c->Instance), Reg_address);
 8102cd6:	68fb      	ldr	r3, [r7, #12]
 8102cd8:	681b      	ldr	r3, [r3, #0]
 8102cda:	7aba      	ldrb	r2, [r7, #10]
 8102cdc:	4611      	mov	r1, r2
 8102cde:	4618      	mov	r0, r3
 8102ce0:	f7ff fe03 	bl	81028ea <LL_I2C_TransmitData8>

    tickstart = HAL_GetTick();
 8102ce4:	f001 fd06 	bl	81046f4 <HAL_GetTick>
 8102ce8:	6138      	str	r0, [r7, #16]

	while(!LL_I2C_IsActiveFlag_TXE(i2c->Instance)){
 8102cea:	e014      	b.n	8102d16 <I2C_Read+0xda>
		/* check if slave acknowledged */
		if(LL_I2C_IsActiveFlag_NACK(i2c->Instance)){
 8102cec:	68fb      	ldr	r3, [r7, #12]
 8102cee:	681b      	ldr	r3, [r3, #0]
 8102cf0:	4618      	mov	r0, r3
 8102cf2:	f7ff fd4c 	bl	810278e <LL_I2C_IsActiveFlag_NACK>
 8102cf6:	4603      	mov	r3, r0
 8102cf8:	2b00      	cmp	r3, #0
 8102cfa:	d001      	beq.n	8102d00 <I2C_Read+0xc4>
			return Status_ERROR;
 8102cfc:	2301      	movs	r3, #1
 8102cfe:	e067      	b.n	8102dd0 <I2C_Read+0x194>
		}
		if(HAL_GetTick() - tickstart > I2C_TIMEOUT){
 8102d00:	f001 fcf8 	bl	81046f4 <HAL_GetTick>
 8102d04:	4602      	mov	r2, r0
 8102d06:	693b      	ldr	r3, [r7, #16]
 8102d08:	1ad3      	subs	r3, r2, r3
 8102d0a:	2b14      	cmp	r3, #20
 8102d0c:	d903      	bls.n	8102d16 <I2C_Read+0xda>
			I2C4_ReInit();
 8102d0e:	f000 fd87 	bl	8103820 <I2C4_ReInit>
			return Status_TIMEOUT;
 8102d12:	2303      	movs	r3, #3
 8102d14:	e05c      	b.n	8102dd0 <I2C_Read+0x194>
	while(!LL_I2C_IsActiveFlag_TXE(i2c->Instance)){
 8102d16:	68fb      	ldr	r3, [r7, #12]
 8102d18:	681b      	ldr	r3, [r3, #0]
 8102d1a:	4618      	mov	r0, r3
 8102d1c:	f7ff fcfe 	bl	810271c <LL_I2C_IsActiveFlag_TXE>
 8102d20:	4603      	mov	r3, r0
 8102d22:	2b00      	cmp	r3, #0
 8102d24:	d0e2      	beq.n	8102cec <I2C_Read+0xb0>
		}
	}
    LL_I2C_AcknowledgeNextData((i2c->Instance), LL_I2C_ACK);
 8102d26:	68fb      	ldr	r3, [r7, #12]
 8102d28:	681b      	ldr	r3, [r3, #0]
 8102d2a:	2100      	movs	r1, #0
 8102d2c:	4618      	mov	r0, r3
 8102d2e:	f7ff fd8b 	bl	8102848 <LL_I2C_AcknowledgeNextData>

    LL_I2C_HandleTransfer((i2c->Instance), (Slave_address << 1), ((Slave_address << 1) | 1), Length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8102d32:	68fb      	ldr	r3, [r7, #12]
 8102d34:	6818      	ldr	r0, [r3, #0]
 8102d36:	7afb      	ldrb	r3, [r7, #11]
 8102d38:	0059      	lsls	r1, r3, #1
 8102d3a:	7afb      	ldrb	r3, [r7, #11]
 8102d3c:	005b      	lsls	r3, r3, #1
 8102d3e:	f043 0301 	orr.w	r3, r3, #1
 8102d42:	461c      	mov	r4, r3
 8102d44:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8102d48:	4a24      	ldr	r2, [pc, #144]	@ (8102ddc <I2C_Read+0x1a0>)
 8102d4a:	9201      	str	r2, [sp, #4]
 8102d4c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8102d50:	9200      	str	r2, [sp, #0]
 8102d52:	4622      	mov	r2, r4
 8102d54:	f7ff fd8c 	bl	8102870 <LL_I2C_HandleTransfer>

    LL_I2C_AcknowledgeNextData((i2c->Instance), LL_I2C_ACK);
 8102d58:	68fb      	ldr	r3, [r7, #12]
 8102d5a:	681b      	ldr	r3, [r3, #0]
 8102d5c:	2100      	movs	r1, #0
 8102d5e:	4618      	mov	r0, r3
 8102d60:	f7ff fd72 	bl	8102848 <LL_I2C_AcknowledgeNextData>

    tickstart = HAL_GetTick();
 8102d64:	f001 fcc6 	bl	81046f4 <HAL_GetTick>
 8102d68:	6138      	str	r0, [r7, #16]

    for(int i = 0; i < Length; i++){
 8102d6a:	2300      	movs	r3, #0
 8102d6c:	617b      	str	r3, [r7, #20]
 8102d6e:	e029      	b.n	8102dc4 <I2C_Read+0x188>
		while(!LL_I2C_IsActiveFlag_RXNE(i2c->Instance)){
			/* check if slave acknowledged */
			if(LL_I2C_IsActiveFlag_NACK(i2c->Instance)){
 8102d70:	68fb      	ldr	r3, [r7, #12]
 8102d72:	681b      	ldr	r3, [r3, #0]
 8102d74:	4618      	mov	r0, r3
 8102d76:	f7ff fd0a 	bl	810278e <LL_I2C_IsActiveFlag_NACK>
 8102d7a:	4603      	mov	r3, r0
 8102d7c:	2b00      	cmp	r3, #0
 8102d7e:	d001      	beq.n	8102d84 <I2C_Read+0x148>
				return Status_ERROR;
 8102d80:	2301      	movs	r3, #1
 8102d82:	e025      	b.n	8102dd0 <I2C_Read+0x194>
			}
			if(HAL_GetTick() - tickstart > I2C_TIMEOUT){
 8102d84:	f001 fcb6 	bl	81046f4 <HAL_GetTick>
 8102d88:	4602      	mov	r2, r0
 8102d8a:	693b      	ldr	r3, [r7, #16]
 8102d8c:	1ad3      	subs	r3, r2, r3
 8102d8e:	2b14      	cmp	r3, #20
 8102d90:	d903      	bls.n	8102d9a <I2C_Read+0x15e>
				I2C4_ReInit();
 8102d92:	f000 fd45 	bl	8103820 <I2C4_ReInit>
				return Status_TIMEOUT;
 8102d96:	2303      	movs	r3, #3
 8102d98:	e01a      	b.n	8102dd0 <I2C_Read+0x194>
		while(!LL_I2C_IsActiveFlag_RXNE(i2c->Instance)){
 8102d9a:	68fb      	ldr	r3, [r7, #12]
 8102d9c:	681b      	ldr	r3, [r3, #0]
 8102d9e:	4618      	mov	r0, r3
 8102da0:	f7ff fce2 	bl	8102768 <LL_I2C_IsActiveFlag_RXNE>
 8102da4:	4603      	mov	r3, r0
 8102da6:	2b00      	cmp	r3, #0
 8102da8:	d0e2      	beq.n	8102d70 <I2C_Read+0x134>
			}
		}
		 pData[i]=LL_I2C_ReceiveData8(i2c->Instance);
 8102daa:	68fb      	ldr	r3, [r7, #12]
 8102dac:	6819      	ldr	r1, [r3, #0]
 8102dae:	697b      	ldr	r3, [r7, #20]
 8102db0:	687a      	ldr	r2, [r7, #4]
 8102db2:	18d4      	adds	r4, r2, r3
 8102db4:	4608      	mov	r0, r1
 8102db6:	f7ff fd8b 	bl	81028d0 <LL_I2C_ReceiveData8>
 8102dba:	4603      	mov	r3, r0
 8102dbc:	7023      	strb	r3, [r4, #0]
    for(int i = 0; i < Length; i++){
 8102dbe:	697b      	ldr	r3, [r7, #20]
 8102dc0:	3301      	adds	r3, #1
 8102dc2:	617b      	str	r3, [r7, #20]
 8102dc4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8102dc8:	697a      	ldr	r2, [r7, #20]
 8102dca:	429a      	cmp	r2, r3
 8102dcc:	dbe5      	blt.n	8102d9a <I2C_Read+0x15e>
    }
    return Status_OK;
 8102dce:	2300      	movs	r3, #0
}
 8102dd0:	4618      	mov	r0, r3
 8102dd2:	371c      	adds	r7, #28
 8102dd4:	46bd      	mov	sp, r7
 8102dd6:	bd90      	pop	{r4, r7, pc}
 8102dd8:	80002000 	.word	0x80002000
 8102ddc:	80002400 	.word	0x80002400

08102de0 <MCP23017_RegForPin>:
#define MCP23017_GPIOB 			0x13	///< Reflects the value on the port B.
#define MCP23017_OLATB 			0x15	///< Provides access to the port B output latches.

#define MCP23017_INT_ERR		0xFF

static uint8_t MCP23017_RegForPin (uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
 8102de0:	b480      	push	{r7}
 8102de2:	b083      	sub	sp, #12
 8102de4:	af00      	add	r7, sp, #0
 8102de6:	4603      	mov	r3, r0
 8102de8:	71fb      	strb	r3, [r7, #7]
 8102dea:	460b      	mov	r3, r1
 8102dec:	71bb      	strb	r3, [r7, #6]
 8102dee:	4613      	mov	r3, r2
 8102df0:	717b      	strb	r3, [r7, #5]
	return(pin<8) ? portAaddr : portBaddr;
 8102df2:	79fb      	ldrb	r3, [r7, #7]
 8102df4:	2b07      	cmp	r3, #7
 8102df6:	d801      	bhi.n	8102dfc <MCP23017_RegForPin+0x1c>
 8102df8:	79bb      	ldrb	r3, [r7, #6]
 8102dfa:	e000      	b.n	8102dfe <MCP23017_RegForPin+0x1e>
 8102dfc:	797b      	ldrb	r3, [r7, #5]
}
 8102dfe:	4618      	mov	r0, r3
 8102e00:	370c      	adds	r7, #12
 8102e02:	46bd      	mov	sp, r7
 8102e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e08:	4770      	bx	lr

08102e0a <MCP23017_BitForPin>:

static uint8_t MCP23017_BitForPin(uint8_t pin){
 8102e0a:	b480      	push	{r7}
 8102e0c:	b083      	sub	sp, #12
 8102e0e:	af00      	add	r7, sp, #0
 8102e10:	4603      	mov	r3, r0
 8102e12:	71fb      	strb	r3, [r7, #7]
	return pin % 8;
 8102e14:	79fb      	ldrb	r3, [r7, #7]
 8102e16:	f003 0307 	and.w	r3, r3, #7
 8102e1a:	b2db      	uxtb	r3, r3
}
 8102e1c:	4618      	mov	r0, r3
 8102e1e:	370c      	adds	r7, #12
 8102e20:	46bd      	mov	sp, r7
 8102e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e26:	4770      	bx	lr

08102e28 <MCP23017_ReadRegister>:
	bitWrite(regValue,bit,pValue);

	return (MCP23017_WriteRegister(regAddr,regValue));
}

Peripheral_StatusTypeDef MCP23017_ReadRegister(uint8_t addr, uint8_t *data) {
 8102e28:	b580      	push	{r7, lr}
 8102e2a:	b086      	sub	sp, #24
 8102e2c:	af02      	add	r7, sp, #8
 8102e2e:	4603      	mov	r3, r0
 8102e30:	6039      	str	r1, [r7, #0]
 8102e32:	71fb      	strb	r3, [r7, #7]
	Peripheral_StatusTypeDef ret;
	// read the current GPINTEN
	ret = I2C_Read(&ll_i2c4, MCP23017_ADDRESS, addr, data, 1);
 8102e34:	79fa      	ldrb	r2, [r7, #7]
 8102e36:	2301      	movs	r3, #1
 8102e38:	9300      	str	r3, [sp, #0]
 8102e3a:	683b      	ldr	r3, [r7, #0]
 8102e3c:	2123      	movs	r1, #35	@ 0x23
 8102e3e:	4805      	ldr	r0, [pc, #20]	@ (8102e54 <MCP23017_ReadRegister+0x2c>)
 8102e40:	f7ff fefc 	bl	8102c3c <I2C_Read>
 8102e44:	4603      	mov	r3, r0
 8102e46:	73fb      	strb	r3, [r7, #15]
	return ret;
 8102e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8102e4a:	4618      	mov	r0, r3
 8102e4c:	3710      	adds	r7, #16
 8102e4e:	46bd      	mov	sp, r7
 8102e50:	bd80      	pop	{r7, pc}
 8102e52:	bf00      	nop
 8102e54:	100004d8 	.word	0x100004d8

08102e58 <MCP23017_WriteRegister>:

static Peripheral_StatusTypeDef MCP23017_WriteRegister(uint8_t regAddr, uint8_t regValue)
{
 8102e58:	b580      	push	{r7, lr}
 8102e5a:	b086      	sub	sp, #24
 8102e5c:	af02      	add	r7, sp, #8
 8102e5e:	4603      	mov	r3, r0
 8102e60:	460a      	mov	r2, r1
 8102e62:	71fb      	strb	r3, [r7, #7]
 8102e64:	4613      	mov	r3, r2
 8102e66:	71bb      	strb	r3, [r7, #6]
	Peripheral_StatusTypeDef ret;
	ret = I2C_Write(&ll_i2c4, MCP23017_ADDRESS, regAddr, &regValue, 1);
 8102e68:	1dbb      	adds	r3, r7, #6
 8102e6a:	79fa      	ldrb	r2, [r7, #7]
 8102e6c:	2101      	movs	r1, #1
 8102e6e:	9100      	str	r1, [sp, #0]
 8102e70:	2123      	movs	r1, #35	@ 0x23
 8102e72:	4805      	ldr	r0, [pc, #20]	@ (8102e88 <MCP23017_WriteRegister+0x30>)
 8102e74:	f7ff fd48 	bl	8102908 <I2C_Write>
 8102e78:	4603      	mov	r3, r0
 8102e7a:	73fb      	strb	r3, [r7, #15]
	return ret;
 8102e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8102e7e:	4618      	mov	r0, r3
 8102e80:	3710      	adds	r7, #16
 8102e82:	46bd      	mov	sp, r7
 8102e84:	bd80      	pop	{r7, pc}
 8102e86:	bf00      	nop
 8102e88:	100004d8 	.word	0x100004d8

08102e8c <MCP23017_DigitalRead>:
	if (ret != Status_OK) return ret;

	return Status_OK;
}

Peripheral_StatusTypeDef MCP23017_DigitalRead(uint8_t pin, uint8_t *data) {
 8102e8c:	b580      	push	{r7, lr}
 8102e8e:	b084      	sub	sp, #16
 8102e90:	af00      	add	r7, sp, #0
 8102e92:	4603      	mov	r3, r0
 8102e94:	6039      	str	r1, [r7, #0]
 8102e96:	71fb      	strb	r3, [r7, #7]
	uint8_t bit = MCP23017_BitForPin(pin);
 8102e98:	79fb      	ldrb	r3, [r7, #7]
 8102e9a:	4618      	mov	r0, r3
 8102e9c:	f7ff ffb5 	bl	8102e0a <MCP23017_BitForPin>
 8102ea0:	4603      	mov	r3, r0
 8102ea2:	73fb      	strb	r3, [r7, #15]
	uint8_t regAddr = MCP23017_RegForPin(pin, MCP23017_GPIOA, MCP23017_GPIOB);
 8102ea4:	79fb      	ldrb	r3, [r7, #7]
 8102ea6:	2213      	movs	r2, #19
 8102ea8:	2112      	movs	r1, #18
 8102eaa:	4618      	mov	r0, r3
 8102eac:	f7ff ff98 	bl	8102de0 <MCP23017_RegForPin>
 8102eb0:	4603      	mov	r3, r0
 8102eb2:	73bb      	strb	r3, [r7, #14]
	Peripheral_StatusTypeDef ret = MCP23017_ReadRegister(regAddr, data);
 8102eb4:	7bbb      	ldrb	r3, [r7, #14]
 8102eb6:	6839      	ldr	r1, [r7, #0]
 8102eb8:	4618      	mov	r0, r3
 8102eba:	f7ff ffb5 	bl	8102e28 <MCP23017_ReadRegister>
 8102ebe:	4603      	mov	r3, r0
 8102ec0:	737b      	strb	r3, [r7, #13]
	*data = (*data >> bit) & 0x1;
 8102ec2:	683b      	ldr	r3, [r7, #0]
 8102ec4:	781b      	ldrb	r3, [r3, #0]
 8102ec6:	461a      	mov	r2, r3
 8102ec8:	7bfb      	ldrb	r3, [r7, #15]
 8102eca:	fa42 f303 	asr.w	r3, r2, r3
 8102ece:	b2db      	uxtb	r3, r3
 8102ed0:	f003 0301 	and.w	r3, r3, #1
 8102ed4:	b2da      	uxtb	r2, r3
 8102ed6:	683b      	ldr	r3, [r7, #0]
 8102ed8:	701a      	strb	r2, [r3, #0]
	return ret;
 8102eda:	7b7b      	ldrb	r3, [r7, #13]
}
 8102edc:	4618      	mov	r0, r3
 8102ede:	3710      	adds	r7, #16
 8102ee0:	46bd      	mov	sp, r7
 8102ee2:	bd80      	pop	{r7, pc}

08102ee4 <MCP23017_DigitalWrite>:

Peripheral_StatusTypeDef MCP23017_DigitalWrite(uint8_t pin, GPIO_PinState pinState)
{
 8102ee4:	b580      	push	{r7, lr}
 8102ee6:	b084      	sub	sp, #16
 8102ee8:	af00      	add	r7, sp, #0
 8102eea:	4603      	mov	r3, r0
 8102eec:	460a      	mov	r2, r1
 8102eee:	71fb      	strb	r3, [r7, #7]
 8102ef0:	4613      	mov	r3, r2
 8102ef2:	71bb      	strb	r3, [r7, #6]
	uint8_t data;
	Peripheral_StatusTypeDef ret;
	uint8_t bit = MCP23017_BitForPin(pin);
 8102ef4:	79fb      	ldrb	r3, [r7, #7]
 8102ef6:	4618      	mov	r0, r3
 8102ef8:	f7ff ff87 	bl	8102e0a <MCP23017_BitForPin>
 8102efc:	4603      	mov	r3, r0
 8102efe:	73fb      	strb	r3, [r7, #15]

	// read the current GPIO output latches
	uint8_t regAddr = MCP23017_RegForPin(pin, MCP23017_OLATA, MCP23017_OLATB);
 8102f00:	79fb      	ldrb	r3, [r7, #7]
 8102f02:	2215      	movs	r2, #21
 8102f04:	2114      	movs	r1, #20
 8102f06:	4618      	mov	r0, r3
 8102f08:	f7ff ff6a 	bl	8102de0 <MCP23017_RegForPin>
 8102f0c:	4603      	mov	r3, r0
 8102f0e:	73bb      	strb	r3, [r7, #14]
	ret = MCP23017_ReadRegister(regAddr, &data);
 8102f10:	f107 020c 	add.w	r2, r7, #12
 8102f14:	7bbb      	ldrb	r3, [r7, #14]
 8102f16:	4611      	mov	r1, r2
 8102f18:	4618      	mov	r0, r3
 8102f1a:	f7ff ff85 	bl	8102e28 <MCP23017_ReadRegister>
 8102f1e:	4603      	mov	r3, r0
 8102f20:	737b      	strb	r3, [r7, #13]
	if (ret != Status_OK) return ret;
 8102f22:	7b7b      	ldrb	r3, [r7, #13]
 8102f24:	2b00      	cmp	r3, #0
 8102f26:	d001      	beq.n	8102f2c <MCP23017_DigitalWrite+0x48>
 8102f28:	7b7b      	ldrb	r3, [r7, #13]
 8102f2a:	e026      	b.n	8102f7a <MCP23017_DigitalWrite+0x96>

	// set the pin and direction
	bitWrite(data, bit, pinState);
 8102f2c:	79bb      	ldrb	r3, [r7, #6]
 8102f2e:	2b00      	cmp	r3, #0
 8102f30:	d009      	beq.n	8102f46 <MCP23017_DigitalWrite+0x62>
 8102f32:	7bfb      	ldrb	r3, [r7, #15]
 8102f34:	2201      	movs	r2, #1
 8102f36:	fa02 f303 	lsl.w	r3, r2, r3
 8102f3a:	b2da      	uxtb	r2, r3
 8102f3c:	7b3b      	ldrb	r3, [r7, #12]
 8102f3e:	4313      	orrs	r3, r2
 8102f40:	b2db      	uxtb	r3, r3
 8102f42:	733b      	strb	r3, [r7, #12]
 8102f44:	e00a      	b.n	8102f5c <MCP23017_DigitalWrite+0x78>
 8102f46:	7bfb      	ldrb	r3, [r7, #15]
 8102f48:	2201      	movs	r2, #1
 8102f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8102f4e:	b2db      	uxtb	r3, r3
 8102f50:	43db      	mvns	r3, r3
 8102f52:	b2da      	uxtb	r2, r3
 8102f54:	7b3b      	ldrb	r3, [r7, #12]
 8102f56:	4013      	ands	r3, r2
 8102f58:	b2db      	uxtb	r3, r3
 8102f5a:	733b      	strb	r3, [r7, #12]

	// write the new GPIO
	regAddr = MCP23017_RegForPin(pin, MCP23017_GPIOA, MCP23017_GPIOB);
 8102f5c:	79fb      	ldrb	r3, [r7, #7]
 8102f5e:	2213      	movs	r2, #19
 8102f60:	2112      	movs	r1, #18
 8102f62:	4618      	mov	r0, r3
 8102f64:	f7ff ff3c 	bl	8102de0 <MCP23017_RegForPin>
 8102f68:	4603      	mov	r3, r0
 8102f6a:	73bb      	strb	r3, [r7, #14]
	return (MCP23017_WriteRegister(regAddr, data));
 8102f6c:	7b3a      	ldrb	r2, [r7, #12]
 8102f6e:	7bbb      	ldrb	r3, [r7, #14]
 8102f70:	4611      	mov	r1, r2
 8102f72:	4618      	mov	r0, r3
 8102f74:	f7ff ff70 	bl	8102e58 <MCP23017_WriteRegister>
 8102f78:	4603      	mov	r3, r0
}
 8102f7a:	4618      	mov	r0, r3
 8102f7c:	3710      	adds	r7, #16
 8102f7e:	46bd      	mov	sp, r7
 8102f80:	bd80      	pop	{r7, pc}

08102f82 <LL_SPI_IsActiveFlag_TXC>:
  * @rmtoll SR           TXC           LL_SPI_IsActiveFlag_TXC
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXC(const SPI_TypeDef *SPIx)
{
 8102f82:	b480      	push	{r7}
 8102f84:	b083      	sub	sp, #12
 8102f86:	af00      	add	r7, sp, #0
 8102f88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXC) == (SPI_SR_TXC)) ? 1UL : 0UL);
 8102f8a:	687b      	ldr	r3, [r7, #4]
 8102f8c:	695b      	ldr	r3, [r3, #20]
 8102f8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8102f92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8102f96:	d101      	bne.n	8102f9c <LL_SPI_IsActiveFlag_TXC+0x1a>
 8102f98:	2301      	movs	r3, #1
 8102f9a:	e000      	b.n	8102f9e <LL_SPI_IsActiveFlag_TXC+0x1c>
 8102f9c:	2300      	movs	r3, #0
}
 8102f9e:	4618      	mov	r0, r3
 8102fa0:	370c      	adds	r7, #12
 8102fa2:	46bd      	mov	sp, r7
 8102fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102fa8:	4770      	bx	lr

08102faa <LL_SPI_IsActiveFlag_RXWNE>:
  * @rmtoll SR           RXWNE         LL_SPI_IsActiveFlag_RXWNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0)
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXWNE(const SPI_TypeDef *SPIx)
{
 8102faa:	b480      	push	{r7}
 8102fac:	b083      	sub	sp, #12
 8102fae:	af00      	add	r7, sp, #0
 8102fb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXWNE) == (SPI_SR_RXWNE)) ? 1UL : 0UL);
 8102fb2:	687b      	ldr	r3, [r7, #4]
 8102fb4:	695b      	ldr	r3, [r3, #20]
 8102fb6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8102fba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8102fbe:	d101      	bne.n	8102fc4 <LL_SPI_IsActiveFlag_RXWNE+0x1a>
 8102fc0:	2301      	movs	r3, #1
 8102fc2:	e000      	b.n	8102fc6 <LL_SPI_IsActiveFlag_RXWNE+0x1c>
 8102fc4:	2300      	movs	r3, #0
}
 8102fc6:	4618      	mov	r0, r3
 8102fc8:	370c      	adds	r7, #12
 8102fca:	46bd      	mov	sp, r7
 8102fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102fd0:	4770      	bx	lr

08102fd2 <LL_SPI_ReceiveData8>:
  * @rmtoll RXDR         .       LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval 0..0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx) /* Derogation MISRAC2012-Rule-8.13 */
{
 8102fd2:	b480      	push	{r7}
 8102fd4:	b083      	sub	sp, #12
 8102fd6:	af00      	add	r7, sp, #0
 8102fd8:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->RXDR));
 8102fda:	687b      	ldr	r3, [r7, #4]
 8102fdc:	3330      	adds	r3, #48	@ 0x30
 8102fde:	781b      	ldrb	r3, [r3, #0]
 8102fe0:	b2db      	uxtb	r3, r3
}
 8102fe2:	4618      	mov	r0, r3
 8102fe4:	370c      	adds	r7, #12
 8102fe6:	46bd      	mov	sp, r7
 8102fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102fec:	4770      	bx	lr

08102fee <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData 0..0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8102fee:	b480      	push	{r7}
 8102ff0:	b083      	sub	sp, #12
 8102ff2:	af00      	add	r7, sp, #0
 8102ff4:	6078      	str	r0, [r7, #4]
 8102ff6:	460b      	mov	r3, r1
 8102ff8:	70fb      	strb	r3, [r7, #3]
  *((__IO uint8_t *)&SPIx->TXDR) = TxData;
 8102ffa:	687b      	ldr	r3, [r7, #4]
 8102ffc:	3320      	adds	r3, #32
 8102ffe:	78fa      	ldrb	r2, [r7, #3]
 8103000:	701a      	strb	r2, [r3, #0]
}
 8103002:	bf00      	nop
 8103004:	370c      	adds	r7, #12
 8103006:	46bd      	mov	sp, r7
 8103008:	f85d 7b04 	ldr.w	r7, [sp], #4
 810300c:	4770      	bx	lr
	...

08103010 <SPI_LL_Transmit>:
#include "spi.h"
#include "stdio.h"

#define SPI_TIMEOUT 500000

uint8_t SPI_LL_Transmit(SPI_TypeDef *SPIx, uint8_t data){
 8103010:	b580      	push	{r7, lr}
 8103012:	b084      	sub	sp, #16
 8103014:	af00      	add	r7, sp, #0
 8103016:	6078      	str	r0, [r7, #4]
 8103018:	460b      	mov	r3, r1
 810301a:	70fb      	strb	r3, [r7, #3]
	uint32_t timeout = SPI_TIMEOUT;
 810301c:	4b1b      	ldr	r3, [pc, #108]	@ (810308c <SPI_LL_Transmit+0x7c>)
 810301e:	60fb      	str	r3, [r7, #12]
	LL_SPI_TransmitData8(SPIx, data);
 8103020:	78fb      	ldrb	r3, [r7, #3]
 8103022:	4619      	mov	r1, r3
 8103024:	6878      	ldr	r0, [r7, #4]
 8103026:	f7ff ffe2 	bl	8102fee <LL_SPI_TransmitData8>

	while(LL_SPI_IsActiveFlag_TXC(SPIx) && timeout--);
 810302a:	bf00      	nop
 810302c:	6878      	ldr	r0, [r7, #4]
 810302e:	f7ff ffa8 	bl	8102f82 <LL_SPI_IsActiveFlag_TXC>
 8103032:	4603      	mov	r3, r0
 8103034:	2b00      	cmp	r3, #0
 8103036:	d004      	beq.n	8103042 <SPI_LL_Transmit+0x32>
 8103038:	68fb      	ldr	r3, [r7, #12]
 810303a:	1e5a      	subs	r2, r3, #1
 810303c:	60fa      	str	r2, [r7, #12]
 810303e:	2b00      	cmp	r3, #0
 8103040:	d1f4      	bne.n	810302c <SPI_LL_Transmit+0x1c>
    if (timeout == 0) {
 8103042:	68fb      	ldr	r3, [r7, #12]
 8103044:	2b00      	cmp	r3, #0
 8103046:	d104      	bne.n	8103052 <SPI_LL_Transmit+0x42>
        printf("SPI Timeout during TX getting data\r\n");
 8103048:	4811      	ldr	r0, [pc, #68]	@ (8103090 <SPI_LL_Transmit+0x80>)
 810304a:	f005 fddd 	bl	8108c08 <puts>
        return ERROR_SPI_TRANS;
 810304e:	23fe      	movs	r3, #254	@ 0xfe
 8103050:	e017      	b.n	8103082 <SPI_LL_Transmit+0x72>
    }

    while(LL_SPI_IsActiveFlag_RXWNE(SPIx) && timeout--);
 8103052:	bf00      	nop
 8103054:	6878      	ldr	r0, [r7, #4]
 8103056:	f7ff ffa8 	bl	8102faa <LL_SPI_IsActiveFlag_RXWNE>
 810305a:	4603      	mov	r3, r0
 810305c:	2b00      	cmp	r3, #0
 810305e:	d004      	beq.n	810306a <SPI_LL_Transmit+0x5a>
 8103060:	68fb      	ldr	r3, [r7, #12]
 8103062:	1e5a      	subs	r2, r3, #1
 8103064:	60fa      	str	r2, [r7, #12]
 8103066:	2b00      	cmp	r3, #0
 8103068:	d1f4      	bne.n	8103054 <SPI_LL_Transmit+0x44>
    if (timeout == 0) {
 810306a:	68fb      	ldr	r3, [r7, #12]
 810306c:	2b00      	cmp	r3, #0
 810306e:	d104      	bne.n	810307a <SPI_LL_Transmit+0x6a>
        printf("SPI Timeout during RX getting data\r\n");
 8103070:	4808      	ldr	r0, [pc, #32]	@ (8103094 <SPI_LL_Transmit+0x84>)
 8103072:	f005 fdc9 	bl	8108c08 <puts>
        return ERROR_SPI_RECV;
 8103076:	23ff      	movs	r3, #255	@ 0xff
 8103078:	e003      	b.n	8103082 <SPI_LL_Transmit+0x72>
    }
//    	  printf("Timeout Cost: %lu", (SPI_TIMEOUT - timeout));
//    printf("Hello!");
	return LL_SPI_ReceiveData8(SPIx);
 810307a:	6878      	ldr	r0, [r7, #4]
 810307c:	f7ff ffa9 	bl	8102fd2 <LL_SPI_ReceiveData8>
 8103080:	4603      	mov	r3, r0
}
 8103082:	4618      	mov	r0, r3
 8103084:	3710      	adds	r7, #16
 8103086:	46bd      	mov	sp, r7
 8103088:	bd80      	pop	{r7, pc}
 810308a:	bf00      	nop
 810308c:	0007a120 	.word	0x0007a120
 8103090:	0810b044 	.word	0x0810b044
 8103094:	0810b068 	.word	0x0810b068

08103098 <SPI_LL_Write>:
//    	  printf("Timeout Cost: %lu", (SPI_TIMEOUT - timeout));
//    printf("Hello!");
	return LL_SPI_ReceiveData16(SPIx);
}

int8_t SPI_LL_Write(SPI_TypeDef *SPIx, uint8_t data){
 8103098:	b580      	push	{r7, lr}
 810309a:	b084      	sub	sp, #16
 810309c:	af00      	add	r7, sp, #0
 810309e:	6078      	str	r0, [r7, #4]
 81030a0:	460b      	mov	r3, r1
 81030a2:	70fb      	strb	r3, [r7, #3]
	uint32_t timeout = SPI_TIMEOUT;
 81030a4:	4b10      	ldr	r3, [pc, #64]	@ (81030e8 <SPI_LL_Write+0x50>)
 81030a6:	60fb      	str	r3, [r7, #12]
	LL_SPI_TransmitData8(SPIx, data);
 81030a8:	78fb      	ldrb	r3, [r7, #3]
 81030aa:	4619      	mov	r1, r3
 81030ac:	6878      	ldr	r0, [r7, #4]
 81030ae:	f7ff ff9e 	bl	8102fee <LL_SPI_TransmitData8>

	while(LL_SPI_IsActiveFlag_TXC(SPIx) && timeout--);
 81030b2:	bf00      	nop
 81030b4:	6878      	ldr	r0, [r7, #4]
 81030b6:	f7ff ff64 	bl	8102f82 <LL_SPI_IsActiveFlag_TXC>
 81030ba:	4603      	mov	r3, r0
 81030bc:	2b00      	cmp	r3, #0
 81030be:	d004      	beq.n	81030ca <SPI_LL_Write+0x32>
 81030c0:	68fb      	ldr	r3, [r7, #12]
 81030c2:	1e5a      	subs	r2, r3, #1
 81030c4:	60fa      	str	r2, [r7, #12]
 81030c6:	2b00      	cmp	r3, #0
 81030c8:	d1f4      	bne.n	81030b4 <SPI_LL_Write+0x1c>
    if (timeout == 0) {
 81030ca:	68fb      	ldr	r3, [r7, #12]
 81030cc:	2b00      	cmp	r3, #0
 81030ce:	d102      	bne.n	81030d6 <SPI_LL_Write+0x3e>
    	  return -1;
 81030d0:	f04f 33ff 	mov.w	r3, #4294967295
 81030d4:	e003      	b.n	81030de <SPI_LL_Write+0x46>
        printf("SPI Timeout during getting data\r\n");
    }
    LL_SPI_ReceiveData8(SPIx);
 81030d6:	6878      	ldr	r0, [r7, #4]
 81030d8:	f7ff ff7b 	bl	8102fd2 <LL_SPI_ReceiveData8>
    return 0;
 81030dc:	2300      	movs	r3, #0
}
 81030de:	4618      	mov	r0, r3
 81030e0:	3710      	adds	r7, #16
 81030e2:	46bd      	mov	sp, r7
 81030e4:	bd80      	pop	{r7, pc}
 81030e6:	bf00      	nop
 81030e8:	0007a120 	.word	0x0007a120

081030ec <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 81030ec:	b480      	push	{r7}
 81030ee:	b083      	sub	sp, #12
 81030f0:	af00      	add	r7, sp, #0
 81030f2:	6078      	str	r0, [r7, #4]
 81030f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 81030f6:	687b      	ldr	r3, [r7, #4]
 81030f8:	683a      	ldr	r2, [r7, #0]
 81030fa:	619a      	str	r2, [r3, #24]
}
 81030fc:	bf00      	nop
 81030fe:	370c      	adds	r7, #12
 8103100:	46bd      	mov	sp, r7
 8103102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103106:	4770      	bx	lr

08103108 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8103108:	b480      	push	{r7}
 810310a:	b083      	sub	sp, #12
 810310c:	af00      	add	r7, sp, #0
 810310e:	6078      	str	r0, [r7, #4]
 8103110:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 8103112:	683b      	ldr	r3, [r7, #0]
 8103114:	041a      	lsls	r2, r3, #16
 8103116:	687b      	ldr	r3, [r7, #4]
 8103118:	619a      	str	r2, [r3, #24]
}
 810311a:	bf00      	nop
 810311c:	370c      	adds	r7, #12
 810311e:	46bd      	mov	sp, r7
 8103120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103124:	4770      	bx	lr
	...

08103128 <ADS8327_SPI_Select>:
 *  																					Hex---> D
 * */

// NOTE: pinSet(ADS8327_CONVST_PORT, ADS8327_CONVST_PIN); Must be high
// NOTE: pinSet(ADS8327_CONVST_PORT, ADS8327_CONVST_PIN); Must be high
static inline void ADS8327_SPI_Select(void){
 8103128:	b580      	push	{r7, lr}
 810312a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SPI6_ISO_CS_GPIO_Port, SPI6_ISO_CS_Pin);
 810312c:	2108      	movs	r1, #8
 810312e:	4802      	ldr	r0, [pc, #8]	@ (8103138 <ADS8327_SPI_Select+0x10>)
 8103130:	f7ff ffea 	bl	8103108 <LL_GPIO_ResetOutputPin>
}
 8103134:	bf00      	nop
 8103136:	bd80      	pop	{r7, pc}
 8103138:	58021000 	.word	0x58021000

0810313c <ADS8327_SPI_Deselect>:

static inline void ADS8327_SPI_Deselect(void){
 810313c:	b580      	push	{r7, lr}
 810313e:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(SPI6_ISO_CS_GPIO_Port, SPI6_ISO_CS_Pin);
 8103140:	2108      	movs	r1, #8
 8103142:	4802      	ldr	r0, [pc, #8]	@ (810314c <ADS8327_SPI_Deselect+0x10>)
 8103144:	f7ff ffd2 	bl	81030ec <LL_GPIO_SetOutputPin>
}
 8103148:	bf00      	nop
 810314a:	bd80      	pop	{r7, pc}
 810314c:	58021000 	.word	0x58021000

08103150 <ADS8327_Read>:
}

/*NOP CALL*/

int8_t ADS8327_Read(uint16_t *value)
{
 8103150:	b580      	push	{r7, lr}
 8103152:	b086      	sub	sp, #24
 8103154:	af00      	add	r7, sp, #0
 8103156:	6078      	str	r0, [r7, #4]
    // wait for previous conversion to end
    //while (!pinRead(ADS8327_EOC_PORT, ADS8327_EOC_PIN));
    uint8_t dummy[1];
    dummy[0] = READ_DATA << 4;
 8103158:	23d0      	movs	r3, #208	@ 0xd0
 810315a:	733b      	strb	r3, [r7, #12]

    ADS8327_SPI_Select();
 810315c:	f7ff ffe4 	bl	8103128 <ADS8327_SPI_Select>
    for(int i = 0; i < sizeof(dummy); i++){
 8103160:	2300      	movs	r3, #0
 8103162:	617b      	str	r3, [r7, #20]
 8103164:	e00b      	b.n	810317e <ADS8327_Read+0x2e>
    	SPI_LL_Write(ADC_SPI, dummy[i]);
 8103166:	f107 020c 	add.w	r2, r7, #12
 810316a:	697b      	ldr	r3, [r7, #20]
 810316c:	4413      	add	r3, r2
 810316e:	781b      	ldrb	r3, [r3, #0]
 8103170:	4619      	mov	r1, r3
 8103172:	4833      	ldr	r0, [pc, #204]	@ (8103240 <ADS8327_Read+0xf0>)
 8103174:	f7ff ff90 	bl	8103098 <SPI_LL_Write>
    for(int i = 0; i < sizeof(dummy); i++){
 8103178:	697b      	ldr	r3, [r7, #20]
 810317a:	3301      	adds	r3, #1
 810317c:	617b      	str	r3, [r7, #20]
 810317e:	697b      	ldr	r3, [r7, #20]
 8103180:	2b00      	cmp	r3, #0
 8103182:	d0f0      	beq.n	8103166 <ADS8327_Read+0x16>
    }
    ADS8327_SPI_Deselect();
 8103184:	f7ff ffda 	bl	810313c <ADS8327_SPI_Deselect>


    // start the conversion
	MCP23017_DigitalWrite(ADS8327_CONVST_PIN, GPIO_PIN_RESET);
 8103188:	2100      	movs	r1, #0
 810318a:	200a      	movs	r0, #10
 810318c:	f7ff feaa 	bl	8102ee4 <MCP23017_DigitalWrite>
//    pinClear(ADS8327_CONVST_PORT, ADS8327_CONVST_PIN);
//
	uint8_t abc;
    (void)MCP23017_DigitalRead(MCP23017_GPB1_Pin, &abc);
 8103190:	f107 030b 	add.w	r3, r7, #11
 8103194:	4619      	mov	r1, r3
 8103196:	2009      	movs	r0, #9
 8103198:	f7ff fe78 	bl	8102e8c <MCP23017_DigitalRead>
    printf("DataPin 1st: %d\r\n", abc);
 810319c:	7afb      	ldrb	r3, [r7, #11]
 810319e:	4619      	mov	r1, r3
 81031a0:	4828      	ldr	r0, [pc, #160]	@ (8103244 <ADS8327_Read+0xf4>)
 81031a2:	f005 fcc9 	bl	8108b38 <iprintf>
    __asm__("NOP");
 81031a6:	bf00      	nop
    __asm__("NOP");
 81031a8:	bf00      	nop
    __asm__("NOP");
 81031aa:	bf00      	nop

//
	MCP23017_DigitalWrite(ADS8327_CONVST_PIN, GPIO_PIN_SET);
 81031ac:	2101      	movs	r1, #1
 81031ae:	200a      	movs	r0, #10
 81031b0:	f7ff fe98 	bl	8102ee4 <MCP23017_DigitalWrite>
//
//    // wait for end of conversion
//    while (!pinRead(ADS8328_EOC_PORT, ADS8328_EOC_PIN));
//

    (void)MCP23017_DigitalRead(MCP23017_GPB1_Pin, &abc);
 81031b4:	f107 030b 	add.w	r3, r7, #11
 81031b8:	4619      	mov	r1, r3
 81031ba:	2009      	movs	r0, #9
 81031bc:	f7ff fe66 	bl	8102e8c <MCP23017_DigitalRead>
    printf("DataPin2nd: %d\r\n", abc);
 81031c0:	7afb      	ldrb	r3, [r7, #11]
 81031c2:	4619      	mov	r1, r3
 81031c4:	4820      	ldr	r0, [pc, #128]	@ (8103248 <ADS8327_Read+0xf8>)
 81031c6:	f005 fcb7 	bl	8108b38 <iprintf>

    __asm__("NOP");
 81031ca:	bf00      	nop
    __asm__("NOP");
 81031cc:	bf00      	nop
    __asm__("NOP");
 81031ce:	bf00      	nop
    uint8_t array[2];
    array[0]=0;
 81031d0:	2300      	movs	r3, #0
 81031d2:	723b      	strb	r3, [r7, #8]
	array[1]=0;
 81031d4:	2300      	movs	r3, #0
 81031d6:	727b      	strb	r3, [r7, #9]
    ADS8327_SPI_Select();
 81031d8:	f7ff ffa6 	bl	8103128 <ADS8327_SPI_Select>

    for(int i = 0; i < sizeof(array); i++){
 81031dc:	2300      	movs	r3, #0
 81031de:	613b      	str	r3, [r7, #16]
 81031e0:	e013      	b.n	810320a <ADS8327_Read+0xba>
    	array[i] = SPI_LL_Transmit(ADC_SPI, array[i]);
 81031e2:	f107 0208 	add.w	r2, r7, #8
 81031e6:	693b      	ldr	r3, [r7, #16]
 81031e8:	4413      	add	r3, r2
 81031ea:	781b      	ldrb	r3, [r3, #0]
 81031ec:	4619      	mov	r1, r3
 81031ee:	4814      	ldr	r0, [pc, #80]	@ (8103240 <ADS8327_Read+0xf0>)
 81031f0:	f7ff ff0e 	bl	8103010 <SPI_LL_Transmit>
 81031f4:	4603      	mov	r3, r0
 81031f6:	4619      	mov	r1, r3
 81031f8:	f107 0208 	add.w	r2, r7, #8
 81031fc:	693b      	ldr	r3, [r7, #16]
 81031fe:	4413      	add	r3, r2
 8103200:	460a      	mov	r2, r1
 8103202:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < sizeof(array); i++){
 8103204:	693b      	ldr	r3, [r7, #16]
 8103206:	3301      	adds	r3, #1
 8103208:	613b      	str	r3, [r7, #16]
 810320a:	693b      	ldr	r3, [r7, #16]
 810320c:	2b01      	cmp	r3, #1
 810320e:	d9e8      	bls.n	81031e2 <ADS8327_Read+0x92>
    }
    ADS8327_SPI_Deselect();
 8103210:	f7ff ff94 	bl	810313c <ADS8327_SPI_Deselect>


    *value = array[0];
 8103214:	7a3b      	ldrb	r3, [r7, #8]
 8103216:	461a      	mov	r2, r3
 8103218:	687b      	ldr	r3, [r7, #4]
 810321a:	801a      	strh	r2, [r3, #0]
    *value <<= 8;
 810321c:	687b      	ldr	r3, [r7, #4]
 810321e:	881b      	ldrh	r3, [r3, #0]
 8103220:	021b      	lsls	r3, r3, #8
 8103222:	b29a      	uxth	r2, r3
 8103224:	687b      	ldr	r3, [r7, #4]
 8103226:	801a      	strh	r2, [r3, #0]
    *value |= array[1];
 8103228:	687b      	ldr	r3, [r7, #4]
 810322a:	881b      	ldrh	r3, [r3, #0]
 810322c:	7a7a      	ldrb	r2, [r7, #9]
 810322e:	4313      	orrs	r3, r2
 8103230:	b29a      	uxth	r2, r3
 8103232:	687b      	ldr	r3, [r7, #4]
 8103234:	801a      	strh	r2, [r3, #0]

    return 0;
 8103236:	2300      	movs	r3, #0
}
 8103238:	4618      	mov	r0, r3
 810323a:	3718      	adds	r7, #24
 810323c:	46bd      	mov	sp, r7
 810323e:	bd80      	pop	{r7, pc}
 8103240:	58001400 	.word	0x58001400
 8103244:	0810b0a8 	.word	0x0810b0a8
 8103248:	0810b0bc 	.word	0x0810b0bc

0810324c <__NVIC_GetPriorityGrouping>:
{
 810324c:	b480      	push	{r7}
 810324e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8103250:	4b04      	ldr	r3, [pc, #16]	@ (8103264 <__NVIC_GetPriorityGrouping+0x18>)
 8103252:	68db      	ldr	r3, [r3, #12]
 8103254:	0a1b      	lsrs	r3, r3, #8
 8103256:	f003 0307 	and.w	r3, r3, #7
}
 810325a:	4618      	mov	r0, r3
 810325c:	46bd      	mov	sp, r7
 810325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103262:	4770      	bx	lr
 8103264:	e000ed00 	.word	0xe000ed00

08103268 <__NVIC_EnableIRQ>:
{
 8103268:	b480      	push	{r7}
 810326a:	b083      	sub	sp, #12
 810326c:	af00      	add	r7, sp, #0
 810326e:	4603      	mov	r3, r0
 8103270:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8103272:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103276:	2b00      	cmp	r3, #0
 8103278:	db0b      	blt.n	8103292 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810327a:	88fb      	ldrh	r3, [r7, #6]
 810327c:	f003 021f 	and.w	r2, r3, #31
 8103280:	4907      	ldr	r1, [pc, #28]	@ (81032a0 <__NVIC_EnableIRQ+0x38>)
 8103282:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103286:	095b      	lsrs	r3, r3, #5
 8103288:	2001      	movs	r0, #1
 810328a:	fa00 f202 	lsl.w	r2, r0, r2
 810328e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8103292:	bf00      	nop
 8103294:	370c      	adds	r7, #12
 8103296:	46bd      	mov	sp, r7
 8103298:	f85d 7b04 	ldr.w	r7, [sp], #4
 810329c:	4770      	bx	lr
 810329e:	bf00      	nop
 81032a0:	e000e100 	.word	0xe000e100

081032a4 <__NVIC_SetPriority>:
{
 81032a4:	b480      	push	{r7}
 81032a6:	b083      	sub	sp, #12
 81032a8:	af00      	add	r7, sp, #0
 81032aa:	4603      	mov	r3, r0
 81032ac:	6039      	str	r1, [r7, #0]
 81032ae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81032b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81032b4:	2b00      	cmp	r3, #0
 81032b6:	db0a      	blt.n	81032ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81032b8:	683b      	ldr	r3, [r7, #0]
 81032ba:	b2da      	uxtb	r2, r3
 81032bc:	490c      	ldr	r1, [pc, #48]	@ (81032f0 <__NVIC_SetPriority+0x4c>)
 81032be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81032c2:	0112      	lsls	r2, r2, #4
 81032c4:	b2d2      	uxtb	r2, r2
 81032c6:	440b      	add	r3, r1
 81032c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 81032cc:	e00a      	b.n	81032e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81032ce:	683b      	ldr	r3, [r7, #0]
 81032d0:	b2da      	uxtb	r2, r3
 81032d2:	4908      	ldr	r1, [pc, #32]	@ (81032f4 <__NVIC_SetPriority+0x50>)
 81032d4:	88fb      	ldrh	r3, [r7, #6]
 81032d6:	f003 030f 	and.w	r3, r3, #15
 81032da:	3b04      	subs	r3, #4
 81032dc:	0112      	lsls	r2, r2, #4
 81032de:	b2d2      	uxtb	r2, r2
 81032e0:	440b      	add	r3, r1
 81032e2:	761a      	strb	r2, [r3, #24]
}
 81032e4:	bf00      	nop
 81032e6:	370c      	adds	r7, #12
 81032e8:	46bd      	mov	sp, r7
 81032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81032ee:	4770      	bx	lr
 81032f0:	e000e100 	.word	0xe000e100
 81032f4:	e000ed00 	.word	0xe000ed00

081032f8 <NVIC_EncodePriority>:
{
 81032f8:	b480      	push	{r7}
 81032fa:	b089      	sub	sp, #36	@ 0x24
 81032fc:	af00      	add	r7, sp, #0
 81032fe:	60f8      	str	r0, [r7, #12]
 8103300:	60b9      	str	r1, [r7, #8]
 8103302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8103304:	68fb      	ldr	r3, [r7, #12]
 8103306:	f003 0307 	and.w	r3, r3, #7
 810330a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 810330c:	69fb      	ldr	r3, [r7, #28]
 810330e:	f1c3 0307 	rsb	r3, r3, #7
 8103312:	2b04      	cmp	r3, #4
 8103314:	bf28      	it	cs
 8103316:	2304      	movcs	r3, #4
 8103318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810331a:	69fb      	ldr	r3, [r7, #28]
 810331c:	3304      	adds	r3, #4
 810331e:	2b06      	cmp	r3, #6
 8103320:	d902      	bls.n	8103328 <NVIC_EncodePriority+0x30>
 8103322:	69fb      	ldr	r3, [r7, #28]
 8103324:	3b03      	subs	r3, #3
 8103326:	e000      	b.n	810332a <NVIC_EncodePriority+0x32>
 8103328:	2300      	movs	r3, #0
 810332a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810332c:	f04f 32ff 	mov.w	r2, #4294967295
 8103330:	69bb      	ldr	r3, [r7, #24]
 8103332:	fa02 f303 	lsl.w	r3, r2, r3
 8103336:	43da      	mvns	r2, r3
 8103338:	68bb      	ldr	r3, [r7, #8]
 810333a:	401a      	ands	r2, r3
 810333c:	697b      	ldr	r3, [r7, #20]
 810333e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8103340:	f04f 31ff 	mov.w	r1, #4294967295
 8103344:	697b      	ldr	r3, [r7, #20]
 8103346:	fa01 f303 	lsl.w	r3, r1, r3
 810334a:	43d9      	mvns	r1, r3
 810334c:	687b      	ldr	r3, [r7, #4]
 810334e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103350:	4313      	orrs	r3, r2
}
 8103352:	4618      	mov	r0, r3
 8103354:	3724      	adds	r7, #36	@ 0x24
 8103356:	46bd      	mov	sp, r7
 8103358:	f85d 7b04 	ldr.w	r7, [sp], #4
 810335c:	4770      	bx	lr

0810335e <LL_I2C_Enable>:
{
 810335e:	b480      	push	{r7}
 8103360:	b083      	sub	sp, #12
 8103362:	af00      	add	r7, sp, #0
 8103364:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8103366:	687b      	ldr	r3, [r7, #4]
 8103368:	681b      	ldr	r3, [r3, #0]
 810336a:	f043 0201 	orr.w	r2, r3, #1
 810336e:	687b      	ldr	r3, [r7, #4]
 8103370:	601a      	str	r2, [r3, #0]
}
 8103372:	bf00      	nop
 8103374:	370c      	adds	r7, #12
 8103376:	46bd      	mov	sp, r7
 8103378:	f85d 7b04 	ldr.w	r7, [sp], #4
 810337c:	4770      	bx	lr

0810337e <LL_I2C_Disable>:
{
 810337e:	b480      	push	{r7}
 8103380:	b083      	sub	sp, #12
 8103382:	af00      	add	r7, sp, #0
 8103384:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8103386:	687b      	ldr	r3, [r7, #4]
 8103388:	681b      	ldr	r3, [r3, #0]
 810338a:	f023 0201 	bic.w	r2, r3, #1
 810338e:	687b      	ldr	r3, [r7, #4]
 8103390:	601a      	str	r2, [r3, #0]
}
 8103392:	bf00      	nop
 8103394:	370c      	adds	r7, #12
 8103396:	46bd      	mov	sp, r7
 8103398:	f85d 7b04 	ldr.w	r7, [sp], #4
 810339c:	4770      	bx	lr

0810339e <LL_I2C_EnableClockStretching>:
{
 810339e:	b480      	push	{r7}
 81033a0:	b083      	sub	sp, #12
 81033a2:	af00      	add	r7, sp, #0
 81033a4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 81033a6:	687b      	ldr	r3, [r7, #4]
 81033a8:	681b      	ldr	r3, [r3, #0]
 81033aa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 81033ae:	687b      	ldr	r3, [r7, #4]
 81033b0:	601a      	str	r2, [r3, #0]
}
 81033b2:	bf00      	nop
 81033b4:	370c      	adds	r7, #12
 81033b6:	46bd      	mov	sp, r7
 81033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81033bc:	4770      	bx	lr

081033be <LL_I2C_DisableGeneralCall>:
{
 81033be:	b480      	push	{r7}
 81033c0:	b083      	sub	sp, #12
 81033c2:	af00      	add	r7, sp, #0
 81033c4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 81033c6:	687b      	ldr	r3, [r7, #4]
 81033c8:	681b      	ldr	r3, [r3, #0]
 81033ca:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 81033ce:	687b      	ldr	r3, [r7, #4]
 81033d0:	601a      	str	r2, [r3, #0]
}
 81033d2:	bf00      	nop
 81033d4:	370c      	adds	r7, #12
 81033d6:	46bd      	mov	sp, r7
 81033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81033dc:	4770      	bx	lr

081033de <LL_I2C_SetOwnAddress2>:
{
 81033de:	b480      	push	{r7}
 81033e0:	b085      	sub	sp, #20
 81033e2:	af00      	add	r7, sp, #0
 81033e4:	60f8      	str	r0, [r7, #12]
 81033e6:	60b9      	str	r1, [r7, #8]
 81033e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 81033ea:	68fb      	ldr	r3, [r7, #12]
 81033ec:	68db      	ldr	r3, [r3, #12]
 81033ee:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 81033f2:	f023 0306 	bic.w	r3, r3, #6
 81033f6:	68b9      	ldr	r1, [r7, #8]
 81033f8:	687a      	ldr	r2, [r7, #4]
 81033fa:	430a      	orrs	r2, r1
 81033fc:	431a      	orrs	r2, r3
 81033fe:	68fb      	ldr	r3, [r7, #12]
 8103400:	60da      	str	r2, [r3, #12]
}
 8103402:	bf00      	nop
 8103404:	3714      	adds	r7, #20
 8103406:	46bd      	mov	sp, r7
 8103408:	f85d 7b04 	ldr.w	r7, [sp], #4
 810340c:	4770      	bx	lr

0810340e <LL_I2C_DisableOwnAddress2>:
{
 810340e:	b480      	push	{r7}
 8103410:	b083      	sub	sp, #12
 8103412:	af00      	add	r7, sp, #0
 8103414:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8103416:	687b      	ldr	r3, [r7, #4]
 8103418:	68db      	ldr	r3, [r3, #12]
 810341a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 810341e:	687b      	ldr	r3, [r7, #4]
 8103420:	60da      	str	r2, [r3, #12]
}
 8103422:	bf00      	nop
 8103424:	370c      	adds	r7, #12
 8103426:	46bd      	mov	sp, r7
 8103428:	f85d 7b04 	ldr.w	r7, [sp], #4
 810342c:	4770      	bx	lr

0810342e <LL_I2C_EnableAutoEndMode>:
{
 810342e:	b480      	push	{r7}
 8103430:	b083      	sub	sp, #12
 8103432:	af00      	add	r7, sp, #0
 8103434:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8103436:	687b      	ldr	r3, [r7, #4]
 8103438:	685b      	ldr	r3, [r3, #4]
 810343a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 810343e:	687b      	ldr	r3, [r7, #4]
 8103440:	605a      	str	r2, [r3, #4]
}
 8103442:	bf00      	nop
 8103444:	370c      	adds	r7, #12
 8103446:	46bd      	mov	sp, r7
 8103448:	f85d 7b04 	ldr.w	r7, [sp], #4
 810344c:	4770      	bx	lr
	...

08103450 <LL_RCC_SetClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClockSource(uint32_t ClkSource)
{
 8103450:	b480      	push	{r7}
 8103452:	b085      	sub	sp, #20
 8103454:	af00      	add	r7, sp, #0
 8103456:	6078      	str	r0, [r7, #4]
#if defined(RCC_D1CCIPR_FMCSEL)
  uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->D1CCIPR + LL_CLKSOURCE_REG(ClkSource));
 8103458:	687b      	ldr	r3, [r7, #4]
 810345a:	b2da      	uxtb	r2, r3
 810345c:	4b10      	ldr	r3, [pc, #64]	@ (81034a0 <LL_RCC_SetClockSource+0x50>)
 810345e:	4413      	add	r3, r2
 8103460:	60fb      	str	r3, [r7, #12]
#else
  uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->CDCCIPR + LL_CLKSOURCE_REG(ClkSource));
#endif /*  */
  MODIFY_REG(*pReg, LL_CLKSOURCE_MASK(ClkSource), LL_CLKSOURCE_CONFIG(ClkSource));
 8103462:	68fb      	ldr	r3, [r7, #12]
 8103464:	681a      	ldr	r2, [r3, #0]
 8103466:	687b      	ldr	r3, [r7, #4]
 8103468:	0e19      	lsrs	r1, r3, #24
 810346a:	687b      	ldr	r3, [r7, #4]
 810346c:	0a1b      	lsrs	r3, r3, #8
 810346e:	f003 031f 	and.w	r3, r3, #31
 8103472:	fa01 f303 	lsl.w	r3, r1, r3
 8103476:	43db      	mvns	r3, r3
 8103478:	401a      	ands	r2, r3
 810347a:	687b      	ldr	r3, [r7, #4]
 810347c:	0c1b      	lsrs	r3, r3, #16
 810347e:	b2d9      	uxtb	r1, r3
 8103480:	687b      	ldr	r3, [r7, #4]
 8103482:	0a1b      	lsrs	r3, r3, #8
 8103484:	f003 031f 	and.w	r3, r3, #31
 8103488:	fa01 f303 	lsl.w	r3, r1, r3
 810348c:	431a      	orrs	r2, r3
 810348e:	68fb      	ldr	r3, [r7, #12]
 8103490:	601a      	str	r2, [r3, #0]
}
 8103492:	bf00      	nop
 8103494:	3714      	adds	r7, #20
 8103496:	46bd      	mov	sp, r7
 8103498:	f85d 7b04 	ldr.w	r7, [sp], #4
 810349c:	4770      	bx	lr
 810349e:	bf00      	nop
 81034a0:	5802444c 	.word	0x5802444c

081034a4 <LL_RCC_SetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_CSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t ClkSource)
{
 81034a4:	b580      	push	{r7, lr}
 81034a6:	b082      	sub	sp, #8
 81034a8:	af00      	add	r7, sp, #0
 81034aa:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
 81034ac:	6878      	ldr	r0, [r7, #4]
 81034ae:	f7ff ffcf 	bl	8103450 <LL_RCC_SetClockSource>
}
 81034b2:	bf00      	nop
 81034b4:	3708      	adds	r7, #8
 81034b6:	46bd      	mov	sp, r7
 81034b8:	bd80      	pop	{r7, pc}

081034ba <LL_RCC_SetI2CClockSource>:
  *         @arg @ref LL_RCC_I2C4_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_I2C4_CLKSOURCE_CSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t ClkSource)
{
 81034ba:	b580      	push	{r7, lr}
 81034bc:	b082      	sub	sp, #8
 81034be:	af00      	add	r7, sp, #0
 81034c0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
 81034c2:	6878      	ldr	r0, [r7, #4]
 81034c4:	f7ff ffc4 	bl	8103450 <LL_RCC_SetClockSource>
}
 81034c8:	bf00      	nop
 81034ca:	3708      	adds	r7, #8
 81034cc:	46bd      	mov	sp, r7
 81034ce:	bd80      	pop	{r7, pc}

081034d0 <LL_RCC_SetSPIClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSPIClockSource(uint32_t ClkSource)
{
 81034d0:	b580      	push	{r7, lr}
 81034d2:	b082      	sub	sp, #8
 81034d4:	af00      	add	r7, sp, #0
 81034d6:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
 81034d8:	6878      	ldr	r0, [r7, #4]
 81034da:	f7ff ffb9 	bl	8103450 <LL_RCC_SetClockSource>
}
 81034de:	bf00      	nop
 81034e0:	3708      	adds	r7, #8
 81034e2:	46bd      	mov	sp, r7
 81034e4:	bd80      	pop	{r7, pc}
	...

081034e8 <LL_AHB4_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
 81034e8:	b480      	push	{r7}
 81034ea:	b085      	sub	sp, #20
 81034ec:	af00      	add	r7, sp, #0
 81034ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB4ENR, Periphs);
 81034f0:	4b0a      	ldr	r3, [pc, #40]	@ (810351c <LL_AHB4_GRP1_EnableClock+0x34>)
 81034f2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 81034f6:	4909      	ldr	r1, [pc, #36]	@ (810351c <LL_AHB4_GRP1_EnableClock+0x34>)
 81034f8:	687b      	ldr	r3, [r7, #4]
 81034fa:	4313      	orrs	r3, r2
 81034fc:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 8103500:	4b06      	ldr	r3, [pc, #24]	@ (810351c <LL_AHB4_GRP1_EnableClock+0x34>)
 8103502:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8103506:	687b      	ldr	r3, [r7, #4]
 8103508:	4013      	ands	r3, r2
 810350a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 810350c:	68fb      	ldr	r3, [r7, #12]
}
 810350e:	bf00      	nop
 8103510:	3714      	adds	r7, #20
 8103512:	46bd      	mov	sp, r7
 8103514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103518:	4770      	bx	lr
 810351a:	bf00      	nop
 810351c:	58024400 	.word	0x58024400

08103520 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8103520:	b480      	push	{r7}
 8103522:	b085      	sub	sp, #20
 8103524:	af00      	add	r7, sp, #0
 8103526:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1LENR, Periphs);
 8103528:	4b0a      	ldr	r3, [pc, #40]	@ (8103554 <LL_APB1_GRP1_EnableClock+0x34>)
 810352a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 810352e:	4909      	ldr	r1, [pc, #36]	@ (8103554 <LL_APB1_GRP1_EnableClock+0x34>)
 8103530:	687b      	ldr	r3, [r7, #4]
 8103532:	4313      	orrs	r3, r2
 8103534:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 8103538:	4b06      	ldr	r3, [pc, #24]	@ (8103554 <LL_APB1_GRP1_EnableClock+0x34>)
 810353a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 810353e:	687b      	ldr	r3, [r7, #4]
 8103540:	4013      	ands	r3, r2
 8103542:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8103544:	68fb      	ldr	r3, [r7, #12]
}
 8103546:	bf00      	nop
 8103548:	3714      	adds	r7, #20
 810354a:	46bd      	mov	sp, r7
 810354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103550:	4770      	bx	lr
 8103552:	bf00      	nop
 8103554:	58024400 	.word	0x58024400

08103558 <LL_APB4_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB4_GRP1_EnableClock(uint32_t Periphs)
{
 8103558:	b480      	push	{r7}
 810355a:	b085      	sub	sp, #20
 810355c:	af00      	add	r7, sp, #0
 810355e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB4ENR, Periphs);
 8103560:	4b0a      	ldr	r3, [pc, #40]	@ (810358c <LL_APB4_GRP1_EnableClock+0x34>)
 8103562:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8103566:	4909      	ldr	r1, [pc, #36]	@ (810358c <LL_APB4_GRP1_EnableClock+0x34>)
 8103568:	687b      	ldr	r3, [r7, #4]
 810356a:	4313      	orrs	r3, r2
 810356c:	f8c1 30f4 	str.w	r3, [r1, #244]	@ 0xf4
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB4ENR, Periphs);
 8103570:	4b06      	ldr	r3, [pc, #24]	@ (810358c <LL_APB4_GRP1_EnableClock+0x34>)
 8103572:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8103576:	687b      	ldr	r3, [r7, #4]
 8103578:	4013      	ands	r3, r2
 810357a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 810357c:	68fb      	ldr	r3, [r7, #12]
}
 810357e:	bf00      	nop
 8103580:	3714      	adds	r7, #20
 8103582:	46bd      	mov	sp, r7
 8103584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103588:	4770      	bx	lr
 810358a:	bf00      	nop
 810358c:	58024400 	.word	0x58024400

08103590 <LL_MPU_Enable>:
  *         @arg @ref LL_MPU_CTRL_PRIVILEGED_DEFAULT
  *         @arg @ref LL_MPU_CTRL_HFNMI_PRIVDEF
  * @retval None
  */
__STATIC_INLINE void LL_MPU_Enable(uint32_t Options)
{
 8103590:	b480      	push	{r7}
 8103592:	b083      	sub	sp, #12
 8103594:	af00      	add	r7, sp, #0
 8103596:	6078      	str	r0, [r7, #4]
  /* Enable the MPU*/
  WRITE_REG(MPU->CTRL, (MPU_CTRL_ENABLE_Msk | Options));
 8103598:	4a08      	ldr	r2, [pc, #32]	@ (81035bc <LL_MPU_Enable+0x2c>)
 810359a:	687b      	ldr	r3, [r7, #4]
 810359c:	f043 0301 	orr.w	r3, r3, #1
 81035a0:	6053      	str	r3, [r2, #4]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 81035a2:	f3bf 8f4f 	dsb	sy
}
 81035a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81035a8:	f3bf 8f6f 	isb	sy
}
 81035ac:	bf00      	nop
  /* Ensure MPU settings take effects */
  __DSB();
  /* Sequence instruction fetches using update settings */
  __ISB();
}
 81035ae:	bf00      	nop
 81035b0:	370c      	adds	r7, #12
 81035b2:	46bd      	mov	sp, r7
 81035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035b8:	4770      	bx	lr
 81035ba:	bf00      	nop
 81035bc:	e000ed90 	.word	0xe000ed90

081035c0 <LL_MPU_Disable>:
  * @brief  Disable MPU
  * @rmtoll MPU_CTRL     ENABLE        LL_MPU_Disable
  * @retval None
  */
__STATIC_INLINE void LL_MPU_Disable(void)
{
 81035c0:	b480      	push	{r7}
 81035c2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 81035c4:	f3bf 8f5f 	dmb	sy
}
 81035c8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();
  /* Disable MPU*/
  WRITE_REG(MPU->CTRL, 0U);
 81035ca:	4b04      	ldr	r3, [pc, #16]	@ (81035dc <LL_MPU_Disable+0x1c>)
 81035cc:	2200      	movs	r2, #0
 81035ce:	605a      	str	r2, [r3, #4]
}
 81035d0:	bf00      	nop
 81035d2:	46bd      	mov	sp, r7
 81035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035d8:	4770      	bx	lr
 81035da:	bf00      	nop
 81035dc:	e000ed90 	.word	0xe000ed90

081035e0 <LL_SPI_Enable>:
{
 81035e0:	b480      	push	{r7}
 81035e2:	b083      	sub	sp, #12
 81035e4:	af00      	add	r7, sp, #0
 81035e6:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 81035e8:	687b      	ldr	r3, [r7, #4]
 81035ea:	681b      	ldr	r3, [r3, #0]
 81035ec:	f043 0201 	orr.w	r2, r3, #1
 81035f0:	687b      	ldr	r3, [r7, #4]
 81035f2:	601a      	str	r2, [r3, #0]
}
 81035f4:	bf00      	nop
 81035f6:	370c      	adds	r7, #12
 81035f8:	46bd      	mov	sp, r7
 81035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035fe:	4770      	bx	lr

08103600 <LL_SPI_StartMasterTransfer>:
{
 8103600:	b480      	push	{r7}
 8103602:	b083      	sub	sp, #12
 8103604:	af00      	add	r7, sp, #0
 8103606:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_CSTART);
 8103608:	687b      	ldr	r3, [r7, #4]
 810360a:	681b      	ldr	r3, [r3, #0]
 810360c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8103610:	687b      	ldr	r3, [r7, #4]
 8103612:	601a      	str	r2, [r3, #0]
}
 8103614:	bf00      	nop
 8103616:	370c      	adds	r7, #12
 8103618:	46bd      	mov	sp, r7
 810361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810361e:	4770      	bx	lr

08103620 <LL_SPI_SetStandard>:
{
 8103620:	b480      	push	{r7}
 8103622:	b083      	sub	sp, #12
 8103624:	af00      	add	r7, sp, #0
 8103626:	6078      	str	r0, [r7, #4]
 8103628:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_SP, Standard);
 810362a:	687b      	ldr	r3, [r7, #4]
 810362c:	68db      	ldr	r3, [r3, #12]
 810362e:	f423 1260 	bic.w	r2, r3, #3670016	@ 0x380000
 8103632:	683b      	ldr	r3, [r7, #0]
 8103634:	431a      	orrs	r2, r3
 8103636:	687b      	ldr	r3, [r7, #4]
 8103638:	60da      	str	r2, [r3, #12]
}
 810363a:	bf00      	nop
 810363c:	370c      	adds	r7, #12
 810363e:	46bd      	mov	sp, r7
 8103640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103644:	4770      	bx	lr

08103646 <LL_SPI_SetFIFOThreshold>:
{
 8103646:	b480      	push	{r7}
 8103648:	b083      	sub	sp, #12
 810364a:	af00      	add	r7, sp, #0
 810364c:	6078      	str	r0, [r7, #4]
 810364e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG1, SPI_CFG1_FTHLV, Threshold);
 8103650:	687b      	ldr	r3, [r7, #4]
 8103652:	689b      	ldr	r3, [r3, #8]
 8103654:	f423 72f0 	bic.w	r2, r3, #480	@ 0x1e0
 8103658:	683b      	ldr	r3, [r7, #0]
 810365a:	431a      	orrs	r2, r3
 810365c:	687b      	ldr	r3, [r7, #4]
 810365e:	609a      	str	r2, [r3, #8]
}
 8103660:	bf00      	nop
 8103662:	370c      	adds	r7, #12
 8103664:	46bd      	mov	sp, r7
 8103666:	f85d 7b04 	ldr.w	r7, [sp], #4
 810366a:	4770      	bx	lr

0810366c <LL_SPI_EnableNSSPulseMgt>:
{
 810366c:	b480      	push	{r7}
 810366e:	b083      	sub	sp, #12
 8103670:	af00      	add	r7, sp, #0
 8103672:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CFG2, SPI_CFG2_SSOM);
 8103674:	687b      	ldr	r3, [r7, #4]
 8103676:	68db      	ldr	r3, [r3, #12]
 8103678:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 810367c:	687b      	ldr	r3, [r7, #4]
 810367e:	60da      	str	r2, [r3, #12]
}
 8103680:	bf00      	nop
 8103682:	370c      	adds	r7, #12
 8103684:	46bd      	mov	sp, r7
 8103686:	f85d 7b04 	ldr.w	r7, [sp], #4
 810368a:	4770      	bx	lr

0810368c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 810368c:	b480      	push	{r7}
 810368e:	b083      	sub	sp, #12
 8103690:	af00      	add	r7, sp, #0
 8103692:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8103694:	687b      	ldr	r3, [r7, #4]
 8103696:	681b      	ldr	r3, [r3, #0]
 8103698:	f043 0201 	orr.w	r2, r3, #1
 810369c:	687b      	ldr	r3, [r7, #4]
 810369e:	601a      	str	r2, [r3, #0]
}
 81036a0:	bf00      	nop
 81036a2:	370c      	adds	r7, #12
 81036a4:	46bd      	mov	sp, r7
 81036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81036aa:	4770      	bx	lr

081036ac <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 81036ac:	b480      	push	{r7}
 81036ae:	b083      	sub	sp, #12
 81036b0:	af00      	add	r7, sp, #0
 81036b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 81036b4:	687b      	ldr	r3, [r7, #4]
 81036b6:	681b      	ldr	r3, [r3, #0]
 81036b8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 81036bc:	687b      	ldr	r3, [r7, #4]
 81036be:	601a      	str	r2, [r3, #0]
}
 81036c0:	bf00      	nop
 81036c2:	370c      	adds	r7, #12
 81036c4:	46bd      	mov	sp, r7
 81036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81036ca:	4770      	bx	lr

081036cc <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 81036cc:	b480      	push	{r7}
 81036ce:	b089      	sub	sp, #36	@ 0x24
 81036d0:	af00      	add	r7, sp, #0
 81036d2:	6078      	str	r0, [r7, #4]
 81036d4:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 81036d6:	687b      	ldr	r3, [r7, #4]
 81036d8:	3308      	adds	r3, #8
 81036da:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81036dc:	68fb      	ldr	r3, [r7, #12]
 81036de:	e853 3f00 	ldrex	r3, [r3]
 81036e2:	60bb      	str	r3, [r7, #8]
   return(result);
 81036e4:	68bb      	ldr	r3, [r7, #8]
 81036e6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 81036ea:	683b      	ldr	r3, [r7, #0]
 81036ec:	075b      	lsls	r3, r3, #29
 81036ee:	4313      	orrs	r3, r2
 81036f0:	61fb      	str	r3, [r7, #28]
 81036f2:	687b      	ldr	r3, [r7, #4]
 81036f4:	3308      	adds	r3, #8
 81036f6:	69fa      	ldr	r2, [r7, #28]
 81036f8:	61ba      	str	r2, [r7, #24]
 81036fa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81036fc:	6979      	ldr	r1, [r7, #20]
 81036fe:	69ba      	ldr	r2, [r7, #24]
 8103700:	e841 2300 	strex	r3, r2, [r1]
 8103704:	613b      	str	r3, [r7, #16]
   return(result);
 8103706:	693b      	ldr	r3, [r7, #16]
 8103708:	2b00      	cmp	r3, #0
 810370a:	d1e4      	bne.n	81036d6 <LL_USART_SetTXFIFOThreshold+0xa>
}
 810370c:	bf00      	nop
 810370e:	bf00      	nop
 8103710:	3724      	adds	r7, #36	@ 0x24
 8103712:	46bd      	mov	sp, r7
 8103714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103718:	4770      	bx	lr

0810371a <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 810371a:	b480      	push	{r7}
 810371c:	b089      	sub	sp, #36	@ 0x24
 810371e:	af00      	add	r7, sp, #0
 8103720:	6078      	str	r0, [r7, #4]
 8103722:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8103724:	687b      	ldr	r3, [r7, #4]
 8103726:	3308      	adds	r3, #8
 8103728:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810372a:	68fb      	ldr	r3, [r7, #12]
 810372c:	e853 3f00 	ldrex	r3, [r3]
 8103730:	60bb      	str	r3, [r7, #8]
   return(result);
 8103732:	68bb      	ldr	r3, [r7, #8]
 8103734:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8103738:	683b      	ldr	r3, [r7, #0]
 810373a:	065b      	lsls	r3, r3, #25
 810373c:	4313      	orrs	r3, r2
 810373e:	61fb      	str	r3, [r7, #28]
 8103740:	687b      	ldr	r3, [r7, #4]
 8103742:	3308      	adds	r3, #8
 8103744:	69fa      	ldr	r2, [r7, #28]
 8103746:	61ba      	str	r2, [r7, #24]
 8103748:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810374a:	6979      	ldr	r1, [r7, #20]
 810374c:	69ba      	ldr	r2, [r7, #24]
 810374e:	e841 2300 	strex	r3, r2, [r1]
 8103752:	613b      	str	r3, [r7, #16]
   return(result);
 8103754:	693b      	ldr	r3, [r7, #16]
 8103756:	2b00      	cmp	r3, #0
 8103758:	d1e4      	bne.n	8103724 <LL_USART_SetRXFIFOThreshold+0xa>
}
 810375a:	bf00      	nop
 810375c:	bf00      	nop
 810375e:	3724      	adds	r7, #36	@ 0x24
 8103760:	46bd      	mov	sp, r7
 8103762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103766:	4770      	bx	lr

08103768 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8103768:	b480      	push	{r7}
 810376a:	b083      	sub	sp, #12
 810376c:	af00      	add	r7, sp, #0
 810376e:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8103770:	687b      	ldr	r3, [r7, #4]
 8103772:	685b      	ldr	r3, [r3, #4]
 8103774:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8103778:	687b      	ldr	r3, [r7, #4]
 810377a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 810377c:	687b      	ldr	r3, [r7, #4]
 810377e:	689b      	ldr	r3, [r3, #8]
 8103780:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8103784:	687b      	ldr	r3, [r7, #4]
 8103786:	609a      	str	r2, [r3, #8]
}
 8103788:	bf00      	nop
 810378a:	370c      	adds	r7, #12
 810378c:	46bd      	mov	sp, r7
 810378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103792:	4770      	bx	lr

08103794 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(const USART_TypeDef *USARTx)
{
 8103794:	b480      	push	{r7}
 8103796:	b083      	sub	sp, #12
 8103798:	af00      	add	r7, sp, #0
 810379a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 810379c:	687b      	ldr	r3, [r7, #4]
 810379e:	69db      	ldr	r3, [r3, #28]
 81037a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 81037a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81037a8:	d101      	bne.n	81037ae <LL_USART_IsActiveFlag_TEACK+0x1a>
 81037aa:	2301      	movs	r3, #1
 81037ac:	e000      	b.n	81037b0 <LL_USART_IsActiveFlag_TEACK+0x1c>
 81037ae:	2300      	movs	r3, #0
}
 81037b0:	4618      	mov	r0, r3
 81037b2:	370c      	adds	r7, #12
 81037b4:	46bd      	mov	sp, r7
 81037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037ba:	4770      	bx	lr

081037bc <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(const USART_TypeDef *USARTx)
{
 81037bc:	b480      	push	{r7}
 81037be:	b083      	sub	sp, #12
 81037c0:	af00      	add	r7, sp, #0
 81037c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 81037c4:	687b      	ldr	r3, [r7, #4]
 81037c6:	69db      	ldr	r3, [r3, #28]
 81037c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 81037cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81037d0:	d101      	bne.n	81037d6 <LL_USART_IsActiveFlag_REACK+0x1a>
 81037d2:	2301      	movs	r3, #1
 81037d4:	e000      	b.n	81037d8 <LL_USART_IsActiveFlag_REACK+0x1c>
 81037d6:	2300      	movs	r3, #0
}
 81037d8:	4618      	mov	r0, r3
 81037da:	370c      	adds	r7, #12
 81037dc:	46bd      	mov	sp, r7
 81037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037e2:	4770      	bx	lr

081037e4 <LL_GPIO_SetOutputPin>:
{
 81037e4:	b480      	push	{r7}
 81037e6:	b083      	sub	sp, #12
 81037e8:	af00      	add	r7, sp, #0
 81037ea:	6078      	str	r0, [r7, #4]
 81037ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 81037ee:	687b      	ldr	r3, [r7, #4]
 81037f0:	683a      	ldr	r2, [r7, #0]
 81037f2:	619a      	str	r2, [r3, #24]
}
 81037f4:	bf00      	nop
 81037f6:	370c      	adds	r7, #12
 81037f8:	46bd      	mov	sp, r7
 81037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037fe:	4770      	bx	lr

08103800 <LL_GPIO_ResetOutputPin>:
{
 8103800:	b480      	push	{r7}
 8103802:	b083      	sub	sp, #12
 8103804:	af00      	add	r7, sp, #0
 8103806:	6078      	str	r0, [r7, #4]
 8103808:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 810380a:	683b      	ldr	r3, [r7, #0]
 810380c:	041a      	lsls	r2, r3, #16
 810380e:	687b      	ldr	r3, [r7, #4]
 8103810:	619a      	str	r2, [r3, #24]
}
 8103812:	bf00      	nop
 8103814:	370c      	adds	r7, #12
 8103816:	46bd      	mov	sp, r7
 8103818:	f85d 7b04 	ldr.w	r7, [sp], #4
 810381c:	4770      	bx	lr
	...

08103820 <I2C4_ReInit>:
//      Error_Handler();
//    }
//  }
//}

void I2C4_ReInit(void) {
 8103820:	b580      	push	{r7, lr}
 8103822:	af00      	add	r7, sp, #0
    LL_I2C_Disable(I2C4);
 8103824:	4803      	ldr	r0, [pc, #12]	@ (8103834 <I2C4_ReInit+0x14>)
 8103826:	f7ff fdaa 	bl	810337e <LL_I2C_Disable>
    MX_I2C4_Init();
 810382a:	f000 f945 	bl	8103ab8 <MX_I2C4_Init>
}
 810382e:	bf00      	nop
 8103830:	bd80      	pop	{r7, pc}
 8103832:	bf00      	nop
 8103834:	58001c00 	.word	0x58001c00

08103838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8103838:	b580      	push	{r7, lr}
 810383a:	b082      	sub	sp, #8
 810383c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 810383e:	f000 fb73 	bl	8103f28 <MPU_Config>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8103842:	4b56      	ldr	r3, [pc, #344]	@ (810399c <main+0x164>)
 8103844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103848:	4a54      	ldr	r2, [pc, #336]	@ (810399c <main+0x164>)
 810384a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 810384e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103852:	4b52      	ldr	r3, [pc, #328]	@ (810399c <main+0x164>)
 8103854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103858:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810385c:	603b      	str	r3, [r7, #0]
 810385e:	683b      	ldr	r3, [r7, #0]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8103860:	2001      	movs	r0, #1
 8103862:	f001 fa1f 	bl	8104ca4 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8103866:	f001 faa9 	bl	8104dbc <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810386a:	2201      	movs	r2, #1
 810386c:	2102      	movs	r1, #2
 810386e:	2000      	movs	r0, #0
 8103870:	f001 fa2a 	bl	8104cc8 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8103874:	4b4a      	ldr	r3, [pc, #296]	@ (81039a0 <main+0x168>)
 8103876:	681b      	ldr	r3, [r3, #0]
 8103878:	091b      	lsrs	r3, r3, #4
 810387a:	f003 030f 	and.w	r3, r3, #15
 810387e:	2b07      	cmp	r3, #7
 8103880:	d108      	bne.n	8103894 <main+0x5c>
 8103882:	4b48      	ldr	r3, [pc, #288]	@ (81039a4 <main+0x16c>)
 8103884:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8103888:	4a46      	ldr	r2, [pc, #280]	@ (81039a4 <main+0x16c>)
 810388a:	f043 0301 	orr.w	r3, r3, #1
 810388e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 8103892:	e007      	b.n	81038a4 <main+0x6c>
 8103894:	4b43      	ldr	r3, [pc, #268]	@ (81039a4 <main+0x16c>)
 8103896:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 810389a:	4a42      	ldr	r2, [pc, #264]	@ (81039a4 <main+0x16c>)
 810389c:	f043 0301 	orr.w	r3, r3, #1
 81038a0:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81038a4:	f000 fe7e 	bl	81045a4 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81038a8:	f000 fa9c 	bl	8103de4 <MX_GPIO_Init>
  MX_UART7_Init();
 81038ac:	f000 f9ce 	bl	8103c4c <MX_UART7_Init>
  MX_USART1_UART_Init();
 81038b0:	f000 fa4c 	bl	8103d4c <MX_USART1_UART_Init>
  MX_I2C4_Init();
 81038b4:	f000 f900 	bl	8103ab8 <MX_I2C4_Init>
  MX_I2C1_Init();
 81038b8:	f000 f89a 	bl	81039f0 <MX_I2C1_Init>
  MX_SPI6_Init();
 81038bc:	f000 f960 	bl	8103b80 <MX_SPI6_Init>
  /* USER CODE BEGIN 2 */

  ll_i2c1.Instance = I2C1;
 81038c0:	4b39      	ldr	r3, [pc, #228]	@ (81039a8 <main+0x170>)
 81038c2:	4a3a      	ldr	r2, [pc, #232]	@ (81039ac <main+0x174>)
 81038c4:	601a      	str	r2, [r3, #0]
  ll_i2c1.State = I2C_STATE_READY;
 81038c6:	4b38      	ldr	r3, [pc, #224]	@ (81039a8 <main+0x170>)
 81038c8:	2201      	movs	r2, #1
 81038ca:	729a      	strb	r2, [r3, #10]
  ll_i2c1.Process = I2C_DONE;
 81038cc:	4b36      	ldr	r3, [pc, #216]	@ (81039a8 <main+0x170>)
 81038ce:	2210      	movs	r2, #16
 81038d0:	72da      	strb	r2, [r3, #11]

  ll_i2c4.Instance = I2C4;
 81038d2:	4b37      	ldr	r3, [pc, #220]	@ (81039b0 <main+0x178>)
 81038d4:	4a37      	ldr	r2, [pc, #220]	@ (81039b4 <main+0x17c>)
 81038d6:	601a      	str	r2, [r3, #0]
  ll_i2c4.State = I2C_STATE_READY;
 81038d8:	4b35      	ldr	r3, [pc, #212]	@ (81039b0 <main+0x178>)
 81038da:	2201      	movs	r2, #1
 81038dc:	729a      	strb	r2, [r3, #10]
  ll_i2c4.Process = I2C_DONE;
 81038de:	4b34      	ldr	r3, [pc, #208]	@ (81039b0 <main+0x178>)
 81038e0:	2210      	movs	r2, #16
 81038e2:	72da      	strb	r2, [r3, #11]
//  LL_GPIO_SetOutputPin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
//  HAL_Delay(500);
//  LL_GPIO_ResetOutputPin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
//  HAL_Delay(500);

  LL_GPIO_SetOutputPin(CAM_SPI_CS_GPIO_Port, CAM_SPI_CS_Pin);
 81038e4:	2140      	movs	r1, #64	@ 0x40
 81038e6:	4834      	ldr	r0, [pc, #208]	@ (81039b8 <main+0x180>)
 81038e8:	f7ff ff7c 	bl	81037e4 <LL_GPIO_SetOutputPin>
  LL_GPIO_SetOutputPin(USB_CTRL_GPIO_Port, USB_CTRL_Pin);
 81038ec:	2180      	movs	r1, #128	@ 0x80
 81038ee:	4833      	ldr	r0, [pc, #204]	@ (81039bc <main+0x184>)
 81038f0:	f7ff ff78 	bl	81037e4 <LL_GPIO_SetOutputPin>
  LL_GPIO_SetOutputPin(SERIAL_ENA_GPIO_Port, SERIAL_ENA_Pin);
 81038f4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 81038f8:	4831      	ldr	r0, [pc, #196]	@ (81039c0 <main+0x188>)
 81038fa:	f7ff ff73 	bl	81037e4 <LL_GPIO_SetOutputPin>
  LL_GPIO_SetOutputPin(MCU_CTRL_SRC_ISO_GPIO_Port, MCU_CTRL_SRC_ISO_Pin);
 81038fe:	2140      	movs	r1, #64	@ 0x40
 8103900:	4830      	ldr	r0, [pc, #192]	@ (81039c4 <main+0x18c>)
 8103902:	f7ff ff6f 	bl	81037e4 <LL_GPIO_SetOutputPin>
////	  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_7);
//	  HAL_Delay(50);
//  }


  SCH_Initialize();
 8103906:	f7fe fb83 	bl	8102010 <SCH_Initialize>

  Watchdog_M4_create_task();
 810390a:	f000 fe0f 	bl	810452c <Watchdog_M4_create_task>
  status_led_create_task();
 810390e:	f000 fd57 	bl	81043c0 <status_led_create_task>
  DUALCORECMD_create_task();
 8103912:	f000 fd6f 	bl	81043f4 <DUALCORECMD_create_task>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_StartSchedular();
 8103916:	f7fe fca5 	bl	8102264 <SCH_StartSchedular>
//	  printf("Write Timeout \r\n");
//  } else{
//	  printf("Write Error \r\n");
//  }
//  uint8_t abc[3];
  printf("Init!\r\n");
 810391a:	482b      	ldr	r0, [pc, #172]	@ (81039c8 <main+0x190>)
 810391c:	f005 f974 	bl	8108c08 <puts>
  HAL_Delay(1000);
 8103920:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8103924:	f000 fef2 	bl	810470c <HAL_Delay>

  while (!ringbuff_is_ready(rb_cm7_to_cm4)) {printf("CM7 to CM4 not ready"); HAL_Delay(50);}
 8103928:	e005      	b.n	8103936 <main+0xfe>
 810392a:	4828      	ldr	r0, [pc, #160]	@ (81039cc <main+0x194>)
 810392c:	f005 f904 	bl	8108b38 <iprintf>
 8103930:	2032      	movs	r0, #50	@ 0x32
 8103932:	f000 feeb 	bl	810470c <HAL_Delay>
 8103936:	4b26      	ldr	r3, [pc, #152]	@ (81039d0 <main+0x198>)
 8103938:	681b      	ldr	r3, [r3, #0]
 810393a:	4618      	mov	r0, r3
 810393c:	f7fe fcf2 	bl	8102324 <ringbuff_is_ready>
 8103940:	4603      	mov	r3, r0
 8103942:	2b00      	cmp	r3, #0
 8103944:	d0f1      	beq.n	810392a <main+0xf2>
  while (!ringbuff_is_ready(rb_cm4_to_cm7)) {printf("CM4 to CM7 not ready"); HAL_Delay(50);}
 8103946:	e005      	b.n	8103954 <main+0x11c>
 8103948:	4822      	ldr	r0, [pc, #136]	@ (81039d4 <main+0x19c>)
 810394a:	f005 f8f5 	bl	8108b38 <iprintf>
 810394e:	2032      	movs	r0, #50	@ 0x32
 8103950:	f000 fedc 	bl	810470c <HAL_Delay>
 8103954:	4b20      	ldr	r3, [pc, #128]	@ (81039d8 <main+0x1a0>)
 8103956:	681b      	ldr	r3, [r3, #0]
 8103958:	4618      	mov	r0, r3
 810395a:	f7fe fce3 	bl	8102324 <ringbuff_is_ready>
 810395e:	4603      	mov	r3, r0
 8103960:	2b00      	cmp	r3, #0
 8103962:	d0f1      	beq.n	8103948 <main+0x110>

  printf("OK CM4!\r\n");
 8103964:	481d      	ldr	r0, [pc, #116]	@ (81039dc <main+0x1a4>)
 8103966:	f005 f94f 	bl	8108c08 <puts>
  ringbuff_write(rb_cm4_to_cm7, "[CM4] Core ready\r\n", 18);
 810396a:	4b1b      	ldr	r3, [pc, #108]	@ (81039d8 <main+0x1a0>)
 810396c:	681b      	ldr	r3, [r3, #0]
 810396e:	2212      	movs	r2, #18
 8103970:	491b      	ldr	r1, [pc, #108]	@ (81039e0 <main+0x1a8>)
 8103972:	4618      	mov	r0, r3
 8103974:	f7fe fcef 	bl	8102356 <ringbuff_write>
//  uint32_t i = 0, time, t1, t2;
//  time = t1 = t2 = HAL_GetTick();

  int retk = Status_OK;
 8103978:	2300      	movs	r3, #0
 810397a:	607b      	str	r3, [r7, #4]
//  retk = MCP23017_Init();
  if(retk == Status_OK){
 810397c:	687b      	ldr	r3, [r7, #4]
 810397e:	2b00      	cmp	r3, #0
 8103980:	d103      	bne.n	810398a <main+0x152>
	  printf("I2C Init OK! \r\n");
 8103982:	4818      	ldr	r0, [pc, #96]	@ (81039e4 <main+0x1ac>)
 8103984:	f005 f940 	bl	8108c08 <puts>
 8103988:	e002      	b.n	8103990 <main+0x158>
  }else{
	  printf("I2C Init Error! \r\n");
 810398a:	4817      	ldr	r0, [pc, #92]	@ (81039e8 <main+0x1b0>)
 810398c:	f005 f93c 	bl	8108c08 <puts>
  }

    printf("Let's start\r\n");
 8103990:	4816      	ldr	r0, [pc, #88]	@ (81039ec <main+0x1b4>)
 8103992:	f005 f939 	bl	8108c08 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SCH_HandleScheduledTask();
 8103996:	f7fe fc6b 	bl	8102270 <SCH_HandleScheduledTask>
 810399a:	e7fc      	b.n	8103996 <main+0x15e>
 810399c:	58024400 	.word	0x58024400
 81039a0:	e000ed00 	.word	0xe000ed00
 81039a4:	58026400 	.word	0x58026400
 81039a8:	100004c8 	.word	0x100004c8
 81039ac:	40005400 	.word	0x40005400
 81039b0:	100004d8 	.word	0x100004d8
 81039b4:	58001c00 	.word	0x58001c00
 81039b8:	58021400 	.word	0x58021400
 81039bc:	58020800 	.word	0x58020800
 81039c0:	58020c00 	.word	0x58020c00
 81039c4:	58020000 	.word	0x58020000
 81039c8:	0810b0d0 	.word	0x0810b0d0
 81039cc:	0810b0d8 	.word	0x0810b0d8
 81039d0:	1000000c 	.word	0x1000000c
 81039d4:	0810b0f0 	.word	0x0810b0f0
 81039d8:	10000008 	.word	0x10000008
 81039dc:	0810b108 	.word	0x0810b108
 81039e0:	0810b114 	.word	0x0810b114
 81039e4:	0810b128 	.word	0x0810b128
 81039e8:	0810b138 	.word	0x0810b138
 81039ec:	0810b14c 	.word	0x0810b14c

081039f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 81039f0:	b580      	push	{r7, lr}
 81039f2:	b08e      	sub	sp, #56	@ 0x38
 81039f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 81039f6:	f107 031c 	add.w	r3, r7, #28
 81039fa:	2200      	movs	r2, #0
 81039fc:	601a      	str	r2, [r3, #0]
 81039fe:	605a      	str	r2, [r3, #4]
 8103a00:	609a      	str	r2, [r3, #8]
 8103a02:	60da      	str	r2, [r3, #12]
 8103a04:	611a      	str	r2, [r3, #16]
 8103a06:	615a      	str	r2, [r3, #20]
 8103a08:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8103a0a:	1d3b      	adds	r3, r7, #4
 8103a0c:	2200      	movs	r2, #0
 8103a0e:	601a      	str	r2, [r3, #0]
 8103a10:	605a      	str	r2, [r3, #4]
 8103a12:	609a      	str	r2, [r3, #8]
 8103a14:	60da      	str	r2, [r3, #12]
 8103a16:	611a      	str	r2, [r3, #16]
 8103a18:	615a      	str	r2, [r3, #20]

  LL_RCC_SetI2CClockSource(LL_RCC_I2C123_CLKSOURCE_PCLK1);
 8103a1a:	4823      	ldr	r0, [pc, #140]	@ (8103aa8 <MX_I2C1_Init+0xb8>)
 8103a1c:	f7ff fd4d 	bl	81034ba <LL_RCC_SetI2CClockSource>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOB);
 8103a20:	2002      	movs	r0, #2
 8103a22:	f7ff fd61 	bl	81034e8 <LL_AHB4_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8103a26:	23c0      	movs	r3, #192	@ 0xc0
 8103a28:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8103a2a:	2302      	movs	r3, #2
 8103a2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8103a2e:	2302      	movs	r3, #2
 8103a30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8103a32:	2301      	movs	r3, #1
 8103a34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8103a36:	2300      	movs	r3, #0
 8103a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8103a3a:	2304      	movs	r3, #4
 8103a3c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8103a3e:	1d3b      	adds	r3, r7, #4
 8103a40:	4619      	mov	r1, r3
 8103a42:	481a      	ldr	r0, [pc, #104]	@ (8103aac <MX_I2C1_Init+0xbc>)
 8103a44:	f003 f8a0 	bl	8106b88 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8103a48:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8103a4c:	f7ff fd68 	bl	8103520 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8103a50:	4817      	ldr	r0, [pc, #92]	@ (8103ab0 <MX_I2C1_Init+0xc0>)
 8103a52:	f7ff fcec 	bl	810342e <LL_I2C_EnableAutoEndMode>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8103a56:	2200      	movs	r2, #0
 8103a58:	2100      	movs	r1, #0
 8103a5a:	4815      	ldr	r0, [pc, #84]	@ (8103ab0 <MX_I2C1_Init+0xc0>)
 8103a5c:	f7ff fcbf 	bl	81033de <LL_I2C_SetOwnAddress2>
  LL_I2C_DisableOwnAddress2(I2C1);
 8103a60:	4813      	ldr	r0, [pc, #76]	@ (8103ab0 <MX_I2C1_Init+0xc0>)
 8103a62:	f7ff fcd4 	bl	810340e <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8103a66:	4812      	ldr	r0, [pc, #72]	@ (8103ab0 <MX_I2C1_Init+0xc0>)
 8103a68:	f7ff fca9 	bl	81033be <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8103a6c:	4810      	ldr	r0, [pc, #64]	@ (8103ab0 <MX_I2C1_Init+0xc0>)
 8103a6e:	f7ff fc96 	bl	810339e <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8103a72:	2300      	movs	r3, #0
 8103a74:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x40E02E3A;
 8103a76:	4b0f      	ldr	r3, [pc, #60]	@ (8103ab4 <MX_I2C1_Init+0xc4>)
 8103a78:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8103a7a:	2300      	movs	r3, #0
 8103a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8103a7e:	2300      	movs	r3, #0
 8103a80:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 8103a82:	2300      	movs	r3, #0
 8103a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8103a86:	2300      	movs	r3, #0
 8103a88:	633b      	str	r3, [r7, #48]	@ 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8103a8a:	2300      	movs	r3, #0
 8103a8c:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8103a8e:	f107 031c 	add.w	r3, r7, #28
 8103a92:	4619      	mov	r1, r3
 8103a94:	4806      	ldr	r0, [pc, #24]	@ (8103ab0 <MX_I2C1_Init+0xc0>)
 8103a96:	f003 f988 	bl	8106daa <LL_I2C_Init>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 8103a9a:	4805      	ldr	r0, [pc, #20]	@ (8103ab0 <MX_I2C1_Init+0xc0>)
 8103a9c:	f7ff fc5f 	bl	810335e <LL_I2C_Enable>

  /* USER CODE END I2C1_Init 2 */

}
 8103aa0:	bf00      	nop
 8103aa2:	3738      	adds	r7, #56	@ 0x38
 8103aa4:	46bd      	mov	sp, r7
 8103aa6:	bd80      	pop	{r7, pc}
 8103aa8:	03000c08 	.word	0x03000c08
 8103aac:	58020400 	.word	0x58020400
 8103ab0:	40005400 	.word	0x40005400
 8103ab4:	40e02e3a 	.word	0x40e02e3a

08103ab8 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8103ab8:	b580      	push	{r7, lr}
 8103aba:	b08e      	sub	sp, #56	@ 0x38
 8103abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C4_Init 0 */

  /* USER CODE END I2C4_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8103abe:	f107 031c 	add.w	r3, r7, #28
 8103ac2:	2200      	movs	r2, #0
 8103ac4:	601a      	str	r2, [r3, #0]
 8103ac6:	605a      	str	r2, [r3, #4]
 8103ac8:	609a      	str	r2, [r3, #8]
 8103aca:	60da      	str	r2, [r3, #12]
 8103acc:	611a      	str	r2, [r3, #16]
 8103ace:	615a      	str	r2, [r3, #20]
 8103ad0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8103ad2:	1d3b      	adds	r3, r7, #4
 8103ad4:	2200      	movs	r2, #0
 8103ad6:	601a      	str	r2, [r3, #0]
 8103ad8:	605a      	str	r2, [r3, #4]
 8103ada:	609a      	str	r2, [r3, #8]
 8103adc:	60da      	str	r2, [r3, #12]
 8103ade:	611a      	str	r2, [r3, #16]
 8103ae0:	615a      	str	r2, [r3, #20]

  LL_RCC_SetI2CClockSource(LL_RCC_I2C4_CLKSOURCE_PCLK4);
 8103ae2:	4823      	ldr	r0, [pc, #140]	@ (8103b70 <MX_I2C4_Init+0xb8>)
 8103ae4:	f7ff fce9 	bl	81034ba <LL_RCC_SetI2CClockSource>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOF);
 8103ae8:	2020      	movs	r0, #32
 8103aea:	f7ff fcfd 	bl	81034e8 <LL_AHB4_GRP1_EnableClock>
  /**I2C4 GPIO Configuration
  PF14   ------> I2C4_SCL
  PF15   ------> I2C4_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8103aee:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8103af2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8103af4:	2302      	movs	r3, #2
 8103af6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8103af8:	2302      	movs	r3, #2
 8103afa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8103afc:	2301      	movs	r3, #1
 8103afe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8103b00:	2300      	movs	r3, #0
 8103b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8103b04:	2304      	movs	r3, #4
 8103b06:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8103b08:	1d3b      	adds	r3, r7, #4
 8103b0a:	4619      	mov	r1, r3
 8103b0c:	4819      	ldr	r0, [pc, #100]	@ (8103b74 <MX_I2C4_Init+0xbc>)
 8103b0e:	f003 f83b 	bl	8106b88 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB4_GRP1_EnableClock(LL_APB4_GRP1_PERIPH_I2C4);
 8103b12:	2080      	movs	r0, #128	@ 0x80
 8103b14:	f7ff fd20 	bl	8103558 <LL_APB4_GRP1_EnableClock>

  /* USER CODE END I2C4_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C4);
 8103b18:	4817      	ldr	r0, [pc, #92]	@ (8103b78 <MX_I2C4_Init+0xc0>)
 8103b1a:	f7ff fc88 	bl	810342e <LL_I2C_EnableAutoEndMode>
  LL_I2C_SetOwnAddress2(I2C4, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8103b1e:	2200      	movs	r2, #0
 8103b20:	2100      	movs	r1, #0
 8103b22:	4815      	ldr	r0, [pc, #84]	@ (8103b78 <MX_I2C4_Init+0xc0>)
 8103b24:	f7ff fc5b 	bl	81033de <LL_I2C_SetOwnAddress2>
  LL_I2C_DisableOwnAddress2(I2C4);
 8103b28:	4813      	ldr	r0, [pc, #76]	@ (8103b78 <MX_I2C4_Init+0xc0>)
 8103b2a:	f7ff fc70 	bl	810340e <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C4);
 8103b2e:	4812      	ldr	r0, [pc, #72]	@ (8103b78 <MX_I2C4_Init+0xc0>)
 8103b30:	f7ff fc45 	bl	81033be <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C4);
 8103b34:	4810      	ldr	r0, [pc, #64]	@ (8103b78 <MX_I2C4_Init+0xc0>)
 8103b36:	f7ff fc32 	bl	810339e <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8103b3a:	2300      	movs	r3, #0
 8103b3c:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x40E32E37;
 8103b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8103b7c <MX_I2C4_Init+0xc4>)
 8103b40:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8103b42:	2300      	movs	r3, #0
 8103b44:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8103b46:	2300      	movs	r3, #0
 8103b48:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 8103b4a:	2300      	movs	r3, #0
 8103b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8103b4e:	2300      	movs	r3, #0
 8103b50:	633b      	str	r3, [r7, #48]	@ 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8103b52:	2300      	movs	r3, #0
 8103b54:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_I2C_Init(I2C4, &I2C_InitStruct);
 8103b56:	f107 031c 	add.w	r3, r7, #28
 8103b5a:	4619      	mov	r1, r3
 8103b5c:	4806      	ldr	r0, [pc, #24]	@ (8103b78 <MX_I2C4_Init+0xc0>)
 8103b5e:	f003 f924 	bl	8106daa <LL_I2C_Init>
  /* USER CODE BEGIN I2C4_Init 2 */
  LL_I2C_Enable(I2C4);
 8103b62:	4805      	ldr	r0, [pc, #20]	@ (8103b78 <MX_I2C4_Init+0xc0>)
 8103b64:	f7ff fbfb 	bl	810335e <LL_I2C_Enable>

  /* USER CODE END I2C4_Init 2 */

}
 8103b68:	bf00      	nop
 8103b6a:	3738      	adds	r7, #56	@ 0x38
 8103b6c:	46bd      	mov	sp, r7
 8103b6e:	bd80      	pop	{r7, pc}
 8103b70:	0300080c 	.word	0x0300080c
 8103b74:	58021400 	.word	0x58021400
 8103b78:	58001c00 	.word	0x58001c00
 8103b7c:	40e32e37 	.word	0x40e32e37

08103b80 <MX_SPI6_Init>:
  * @brief SPI6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI6_Init(void)
{
 8103b80:	b580      	push	{r7, lr}
 8103b82:	b090      	sub	sp, #64	@ 0x40
 8103b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI6_Init 0 */

  /* USER CODE END SPI6_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8103b86:	f107 0318 	add.w	r3, r7, #24
 8103b8a:	2228      	movs	r2, #40	@ 0x28
 8103b8c:	2100      	movs	r1, #0
 8103b8e:	4618      	mov	r0, r3
 8103b90:	f005 f94e 	bl	8108e30 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8103b94:	463b      	mov	r3, r7
 8103b96:	2200      	movs	r2, #0
 8103b98:	601a      	str	r2, [r3, #0]
 8103b9a:	605a      	str	r2, [r3, #4]
 8103b9c:	609a      	str	r2, [r3, #8]
 8103b9e:	60da      	str	r2, [r3, #12]
 8103ba0:	611a      	str	r2, [r3, #16]
 8103ba2:	615a      	str	r2, [r3, #20]

  LL_RCC_SetSPIClockSource(LL_RCC_SPI6_CLKSOURCE_PCLK4);
 8103ba4:	4826      	ldr	r0, [pc, #152]	@ (8103c40 <MX_SPI6_Init+0xc0>)
 8103ba6:	f7ff fc93 	bl	81034d0 <LL_RCC_SetSPIClockSource>

  /* Peripheral clock enable */
  LL_APB4_GRP1_EnableClock(LL_APB4_GRP1_PERIPH_SPI6);
 8103baa:	2020      	movs	r0, #32
 8103bac:	f7ff fcd4 	bl	8103558 <LL_APB4_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOG);
 8103bb0:	2040      	movs	r0, #64	@ 0x40
 8103bb2:	f7ff fc99 	bl	81034e8 <LL_AHB4_GRP1_EnableClock>
  /**SPI6 GPIO Configuration
  PG12   ------> SPI6_MISO
  PG13   ------> SPI6_SCK
  PG14   ------> SPI6_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14;
 8103bb6:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8103bba:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8103bbc:	2302      	movs	r3, #2
 8103bbe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8103bc0:	2303      	movs	r3, #3
 8103bc2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8103bc4:	2300      	movs	r3, #0
 8103bc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8103bc8:	2300      	movs	r3, #0
 8103bca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8103bcc:	2305      	movs	r3, #5
 8103bce:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8103bd0:	463b      	mov	r3, r7
 8103bd2:	4619      	mov	r1, r3
 8103bd4:	481b      	ldr	r0, [pc, #108]	@ (8103c44 <MX_SPI6_Init+0xc4>)
 8103bd6:	f002 ffd7 	bl	8106b88 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  /* SPI6 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8103bda:	2300      	movs	r3, #0
 8103bdc:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8103bde:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8103be2:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8103be4:	2307      	movs	r3, #7
 8103be6:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8103be8:	2300      	movs	r3, #0
 8103bea:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8103bec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8103bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8103bf2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8103bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32;
 8103bf8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8103bfc:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8103bfe:	2300      	movs	r3, #0
 8103c00:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8103c02:	2300      	movs	r3, #0
 8103c04:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 0x0;
 8103c06:	2300      	movs	r3, #0
 8103c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI6, &SPI_InitStruct);
 8103c0a:	f107 0318 	add.w	r3, r7, #24
 8103c0e:	4619      	mov	r1, r3
 8103c10:	480d      	ldr	r0, [pc, #52]	@ (8103c48 <MX_SPI6_Init+0xc8>)
 8103c12:	f003 ffeb 	bl	8107bec <LL_SPI_Init>
  LL_SPI_SetStandard(SPI6, LL_SPI_PROTOCOL_MOTOROLA);
 8103c16:	2100      	movs	r1, #0
 8103c18:	480b      	ldr	r0, [pc, #44]	@ (8103c48 <MX_SPI6_Init+0xc8>)
 8103c1a:	f7ff fd01 	bl	8103620 <LL_SPI_SetStandard>
  LL_SPI_SetFIFOThreshold(SPI6, LL_SPI_FIFO_TH_01DATA);
 8103c1e:	2100      	movs	r1, #0
 8103c20:	4809      	ldr	r0, [pc, #36]	@ (8103c48 <MX_SPI6_Init+0xc8>)
 8103c22:	f7ff fd10 	bl	8103646 <LL_SPI_SetFIFOThreshold>
  LL_SPI_EnableNSSPulseMgt(SPI6);
 8103c26:	4808      	ldr	r0, [pc, #32]	@ (8103c48 <MX_SPI6_Init+0xc8>)
 8103c28:	f7ff fd20 	bl	810366c <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI6_Init 2 */
  LL_SPI_Enable(SPI6);
 8103c2c:	4806      	ldr	r0, [pc, #24]	@ (8103c48 <MX_SPI6_Init+0xc8>)
 8103c2e:	f7ff fcd7 	bl	81035e0 <LL_SPI_Enable>
  LL_SPI_StartMasterTransfer(SPI6);
 8103c32:	4805      	ldr	r0, [pc, #20]	@ (8103c48 <MX_SPI6_Init+0xc8>)
 8103c34:	f7ff fce4 	bl	8103600 <LL_SPI_StartMasterTransfer>
  /* USER CODE END SPI6_Init 2 */

}
 8103c38:	bf00      	nop
 8103c3a:	3740      	adds	r7, #64	@ 0x40
 8103c3c:	46bd      	mov	sp, r7
 8103c3e:	bd80      	pop	{r7, pc}
 8103c40:	07001c0c 	.word	0x07001c0c
 8103c44:	58021800 	.word	0x58021800
 8103c48:	58001400 	.word	0x58001400

08103c4c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8103c4c:	b580      	push	{r7, lr}
 8103c4e:	b08e      	sub	sp, #56	@ 0x38
 8103c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART7_Init 0 */

  /* USER CODE END UART7_Init 0 */

  LL_USART_InitTypeDef UART_InitStruct = {0};
 8103c52:	f107 0318 	add.w	r3, r7, #24
 8103c56:	2220      	movs	r2, #32
 8103c58:	2100      	movs	r1, #0
 8103c5a:	4618      	mov	r0, r3
 8103c5c:	f005 f8e8 	bl	8108e30 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8103c60:	463b      	mov	r3, r7
 8103c62:	2200      	movs	r2, #0
 8103c64:	601a      	str	r2, [r3, #0]
 8103c66:	605a      	str	r2, [r3, #4]
 8103c68:	609a      	str	r2, [r3, #8]
 8103c6a:	60da      	str	r2, [r3, #12]
 8103c6c:	611a      	str	r2, [r3, #16]
 8103c6e:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART234578_CLKSOURCE_PCLK1);
 8103c70:	4832      	ldr	r0, [pc, #200]	@ (8103d3c <MX_UART7_Init+0xf0>)
 8103c72:	f7ff fc17 	bl	81034a4 <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART7);
 8103c76:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8103c7a:	f7ff fc51 	bl	8103520 <LL_APB1_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOE);
 8103c7e:	2010      	movs	r0, #16
 8103c80:	f7ff fc32 	bl	81034e8 <LL_AHB4_GRP1_EnableClock>
  /**UART7 GPIO Configuration
  PE7   ------> UART7_RX
  PE8   ------> UART7_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7|LL_GPIO_PIN_8;
 8103c84:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8103c88:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8103c8a:	2302      	movs	r3, #2
 8103c8c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8103c8e:	2300      	movs	r3, #0
 8103c90:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8103c92:	2300      	movs	r3, #0
 8103c94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8103c96:	2300      	movs	r3, #0
 8103c98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8103c9a:	2307      	movs	r3, #7
 8103c9c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8103c9e:	463b      	mov	r3, r7
 8103ca0:	4619      	mov	r1, r3
 8103ca2:	4827      	ldr	r0, [pc, #156]	@ (8103d40 <MX_UART7_Init+0xf4>)
 8103ca4:	f002 ff70 	bl	8106b88 <LL_GPIO_Init>

  /* UART7 interrupt Init */
  NVIC_SetPriority(UART7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8103ca8:	f7ff fad0 	bl	810324c <__NVIC_GetPriorityGrouping>
 8103cac:	4603      	mov	r3, r0
 8103cae:	2200      	movs	r2, #0
 8103cb0:	2100      	movs	r1, #0
 8103cb2:	4618      	mov	r0, r3
 8103cb4:	f7ff fb20 	bl	81032f8 <NVIC_EncodePriority>
 8103cb8:	4603      	mov	r3, r0
 8103cba:	4619      	mov	r1, r3
 8103cbc:	2052      	movs	r0, #82	@ 0x52
 8103cbe:	f7ff faf1 	bl	81032a4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART7_IRQn);
 8103cc2:	2052      	movs	r0, #82	@ 0x52
 8103cc4:	f7ff fad0 	bl	8103268 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  UART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8103cc8:	2300      	movs	r3, #0
 8103cca:	61bb      	str	r3, [r7, #24]
  UART_InitStruct.BaudRate = 1000000;
 8103ccc:	4b1d      	ldr	r3, [pc, #116]	@ (8103d44 <MX_UART7_Init+0xf8>)
 8103cce:	61fb      	str	r3, [r7, #28]
  UART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8103cd0:	2300      	movs	r3, #0
 8103cd2:	623b      	str	r3, [r7, #32]
  UART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8103cd4:	2300      	movs	r3, #0
 8103cd6:	627b      	str	r3, [r7, #36]	@ 0x24
  UART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8103cd8:	2300      	movs	r3, #0
 8103cda:	62bb      	str	r3, [r7, #40]	@ 0x28
  UART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8103cdc:	230c      	movs	r3, #12
 8103cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  UART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8103ce0:	2300      	movs	r3, #0
 8103ce2:	633b      	str	r3, [r7, #48]	@ 0x30
  UART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8103ce4:	2300      	movs	r3, #0
 8103ce6:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART7, &UART_InitStruct);
 8103ce8:	f107 0318 	add.w	r3, r7, #24
 8103cec:	4619      	mov	r1, r3
 8103cee:	4816      	ldr	r0, [pc, #88]	@ (8103d48 <MX_UART7_Init+0xfc>)
 8103cf0:	f004 f898 	bl	8107e24 <LL_USART_Init>
  LL_USART_DisableFIFO(UART7);
 8103cf4:	4814      	ldr	r0, [pc, #80]	@ (8103d48 <MX_UART7_Init+0xfc>)
 8103cf6:	f7ff fcd9 	bl	81036ac <LL_USART_DisableFIFO>
  LL_USART_SetTXFIFOThreshold(UART7, LL_USART_FIFOTHRESHOLD_1_8);
 8103cfa:	2100      	movs	r1, #0
 8103cfc:	4812      	ldr	r0, [pc, #72]	@ (8103d48 <MX_UART7_Init+0xfc>)
 8103cfe:	f7ff fce5 	bl	81036cc <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(UART7, LL_USART_FIFOTHRESHOLD_1_8);
 8103d02:	2100      	movs	r1, #0
 8103d04:	4810      	ldr	r0, [pc, #64]	@ (8103d48 <MX_UART7_Init+0xfc>)
 8103d06:	f7ff fd08 	bl	810371a <LL_USART_SetRXFIFOThreshold>
  LL_USART_ConfigAsyncMode(UART7);
 8103d0a:	480f      	ldr	r0, [pc, #60]	@ (8103d48 <MX_UART7_Init+0xfc>)
 8103d0c:	f7ff fd2c 	bl	8103768 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType UART7 */

  /* USER CODE END WKUPType UART7 */

  LL_USART_Enable(UART7);
 8103d10:	480d      	ldr	r0, [pc, #52]	@ (8103d48 <MX_UART7_Init+0xfc>)
 8103d12:	f7ff fcbb 	bl	810368c <LL_USART_Enable>

  /* Polling UART7 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(UART7))) || (!(LL_USART_IsActiveFlag_REACK(UART7))))
 8103d16:	bf00      	nop
 8103d18:	480b      	ldr	r0, [pc, #44]	@ (8103d48 <MX_UART7_Init+0xfc>)
 8103d1a:	f7ff fd3b 	bl	8103794 <LL_USART_IsActiveFlag_TEACK>
 8103d1e:	4603      	mov	r3, r0
 8103d20:	2b00      	cmp	r3, #0
 8103d22:	d0f9      	beq.n	8103d18 <MX_UART7_Init+0xcc>
 8103d24:	4808      	ldr	r0, [pc, #32]	@ (8103d48 <MX_UART7_Init+0xfc>)
 8103d26:	f7ff fd49 	bl	81037bc <LL_USART_IsActiveFlag_REACK>
 8103d2a:	4603      	mov	r3, r0
 8103d2c:	2b00      	cmp	r3, #0
 8103d2e:	d0f3      	beq.n	8103d18 <MX_UART7_Init+0xcc>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8103d30:	bf00      	nop
 8103d32:	bf00      	nop
 8103d34:	3738      	adds	r7, #56	@ 0x38
 8103d36:	46bd      	mov	sp, r7
 8103d38:	bd80      	pop	{r7, pc}
 8103d3a:	bf00      	nop
 8103d3c:	07000008 	.word	0x07000008
 8103d40:	58021000 	.word	0x58021000
 8103d44:	000f4240 	.word	0x000f4240
 8103d48:	40007800 	.word	0x40007800

08103d4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8103d4c:	b580      	push	{r7, lr}
 8103d4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8103d50:	4b22      	ldr	r3, [pc, #136]	@ (8103ddc <MX_USART1_UART_Init+0x90>)
 8103d52:	4a23      	ldr	r2, [pc, #140]	@ (8103de0 <MX_USART1_UART_Init+0x94>)
 8103d54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8103d56:	4b21      	ldr	r3, [pc, #132]	@ (8103ddc <MX_USART1_UART_Init+0x90>)
 8103d58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8103d5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8103d5e:	4b1f      	ldr	r3, [pc, #124]	@ (8103ddc <MX_USART1_UART_Init+0x90>)
 8103d60:	2200      	movs	r2, #0
 8103d62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8103d64:	4b1d      	ldr	r3, [pc, #116]	@ (8103ddc <MX_USART1_UART_Init+0x90>)
 8103d66:	2200      	movs	r2, #0
 8103d68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8103d6a:	4b1c      	ldr	r3, [pc, #112]	@ (8103ddc <MX_USART1_UART_Init+0x90>)
 8103d6c:	2200      	movs	r2, #0
 8103d6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8103d70:	4b1a      	ldr	r3, [pc, #104]	@ (8103ddc <MX_USART1_UART_Init+0x90>)
 8103d72:	220c      	movs	r2, #12
 8103d74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8103d76:	4b19      	ldr	r3, [pc, #100]	@ (8103ddc <MX_USART1_UART_Init+0x90>)
 8103d78:	2200      	movs	r2, #0
 8103d7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8103d7c:	4b17      	ldr	r3, [pc, #92]	@ (8103ddc <MX_USART1_UART_Init+0x90>)
 8103d7e:	2200      	movs	r2, #0
 8103d80:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8103d82:	4b16      	ldr	r3, [pc, #88]	@ (8103ddc <MX_USART1_UART_Init+0x90>)
 8103d84:	2200      	movs	r2, #0
 8103d86:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8103d88:	4b14      	ldr	r3, [pc, #80]	@ (8103ddc <MX_USART1_UART_Init+0x90>)
 8103d8a:	2200      	movs	r2, #0
 8103d8c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8103d8e:	4b13      	ldr	r3, [pc, #76]	@ (8103ddc <MX_USART1_UART_Init+0x90>)
 8103d90:	2200      	movs	r2, #0
 8103d92:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8103d94:	4811      	ldr	r0, [pc, #68]	@ (8103ddc <MX_USART1_UART_Init+0x90>)
 8103d96:	f001 fcb5 	bl	8105704 <HAL_UART_Init>
 8103d9a:	4603      	mov	r3, r0
 8103d9c:	2b00      	cmp	r3, #0
 8103d9e:	d001      	beq.n	8103da4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8103da0:	f000 f8cc 	bl	8103f3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8103da4:	2100      	movs	r1, #0
 8103da6:	480d      	ldr	r0, [pc, #52]	@ (8103ddc <MX_USART1_UART_Init+0x90>)
 8103da8:	f002 fd4a 	bl	8106840 <HAL_UARTEx_SetTxFifoThreshold>
 8103dac:	4603      	mov	r3, r0
 8103dae:	2b00      	cmp	r3, #0
 8103db0:	d001      	beq.n	8103db6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8103db2:	f000 f8c3 	bl	8103f3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8103db6:	2100      	movs	r1, #0
 8103db8:	4808      	ldr	r0, [pc, #32]	@ (8103ddc <MX_USART1_UART_Init+0x90>)
 8103dba:	f002 fd7f 	bl	81068bc <HAL_UARTEx_SetRxFifoThreshold>
 8103dbe:	4603      	mov	r3, r0
 8103dc0:	2b00      	cmp	r3, #0
 8103dc2:	d001      	beq.n	8103dc8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8103dc4:	f000 f8ba 	bl	8103f3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8103dc8:	4804      	ldr	r0, [pc, #16]	@ (8103ddc <MX_USART1_UART_Init+0x90>)
 8103dca:	f002 fd00 	bl	81067ce <HAL_UARTEx_DisableFifoMode>
 8103dce:	4603      	mov	r3, r0
 8103dd0:	2b00      	cmp	r3, #0
 8103dd2:	d001      	beq.n	8103dd8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8103dd4:	f000 f8b2 	bl	8103f3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8103dd8:	bf00      	nop
 8103dda:	bd80      	pop	{r7, pc}
 8103ddc:	10000434 	.word	0x10000434
 8103de0:	40011000 	.word	0x40011000

08103de4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8103de4:	b580      	push	{r7, lr}
 8103de6:	b086      	sub	sp, #24
 8103de8:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8103dea:	463b      	mov	r3, r7
 8103dec:	2200      	movs	r2, #0
 8103dee:	601a      	str	r2, [r3, #0]
 8103df0:	605a      	str	r2, [r3, #4]
 8103df2:	609a      	str	r2, [r3, #8]
 8103df4:	60da      	str	r2, [r3, #12]
 8103df6:	611a      	str	r2, [r3, #16]
 8103df8:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOE);
 8103dfa:	2010      	movs	r0, #16
 8103dfc:	f7ff fb74 	bl	81034e8 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOF);
 8103e00:	2020      	movs	r0, #32
 8103e02:	f7ff fb71 	bl	81034e8 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 8103e06:	2001      	movs	r0, #1
 8103e08:	f7ff fb6e 	bl	81034e8 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOD);
 8103e0c:	2008      	movs	r0, #8
 8103e0e:	f7ff fb6b 	bl	81034e8 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOC);
 8103e12:	2004      	movs	r0, #4
 8103e14:	f7ff fb68 	bl	81034e8 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOG);
 8103e18:	2040      	movs	r0, #64	@ 0x40
 8103e1a:	f7ff fb65 	bl	81034e8 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOB);
 8103e1e:	2002      	movs	r0, #2
 8103e20:	f7ff fb62 	bl	81034e8 <LL_AHB4_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(SPI6_ISO_CS_GPIO_Port, SPI6_ISO_CS_Pin);
 8103e24:	2108      	movs	r1, #8
 8103e26:	4832      	ldr	r0, [pc, #200]	@ (8103ef0 <MX_GPIO_Init+0x10c>)
 8103e28:	f7ff fcea 	bl	8103800 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CAM_SPI_CS_GPIO_Port, CAM_SPI_CS_Pin);
 8103e2c:	2140      	movs	r1, #64	@ 0x40
 8103e2e:	4831      	ldr	r0, [pc, #196]	@ (8103ef4 <MX_GPIO_Init+0x110>)
 8103e30:	f7ff fce6 	bl	8103800 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(MCU_CTRL_SRC_ISO_GPIO_Port, MCU_CTRL_SRC_ISO_Pin);
 8103e34:	2140      	movs	r1, #64	@ 0x40
 8103e36:	4830      	ldr	r0, [pc, #192]	@ (8103ef8 <MX_GPIO_Init+0x114>)
 8103e38:	f7ff fce2 	bl	8103800 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, SERIAL_ENA_Pin|LL_GPIO_PIN_1|WD_DONE_Pin);
 8103e3c:	f244 0122 	movw	r1, #16418	@ 0x4022
 8103e40:	482e      	ldr	r0, [pc, #184]	@ (8103efc <MX_GPIO_Init+0x118>)
 8103e42:	f7ff fcdd 	bl	8103800 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(USB_CTRL_GPIO_Port, USB_CTRL_Pin);
 8103e46:	2180      	movs	r1, #128	@ 0x80
 8103e48:	482d      	ldr	r0, [pc, #180]	@ (8103f00 <MX_GPIO_Init+0x11c>)
 8103e4a:	f7ff fcd9 	bl	8103800 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = SPI6_ISO_CS_Pin;
 8103e4e:	2308      	movs	r3, #8
 8103e50:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8103e52:	2301      	movs	r3, #1
 8103e54:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8103e56:	2300      	movs	r3, #0
 8103e58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8103e5a:	2300      	movs	r3, #0
 8103e5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8103e5e:	2300      	movs	r3, #0
 8103e60:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SPI6_ISO_CS_GPIO_Port, &GPIO_InitStruct);
 8103e62:	463b      	mov	r3, r7
 8103e64:	4619      	mov	r1, r3
 8103e66:	4822      	ldr	r0, [pc, #136]	@ (8103ef0 <MX_GPIO_Init+0x10c>)
 8103e68:	f002 fe8e 	bl	8106b88 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CAM_SPI_CS_Pin;
 8103e6c:	2340      	movs	r3, #64	@ 0x40
 8103e6e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8103e70:	2301      	movs	r3, #1
 8103e72:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8103e74:	2300      	movs	r3, #0
 8103e76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8103e78:	2300      	movs	r3, #0
 8103e7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8103e7c:	2300      	movs	r3, #0
 8103e7e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(CAM_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8103e80:	463b      	mov	r3, r7
 8103e82:	4619      	mov	r1, r3
 8103e84:	481b      	ldr	r0, [pc, #108]	@ (8103ef4 <MX_GPIO_Init+0x110>)
 8103e86:	f002 fe7f 	bl	8106b88 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MCU_CTRL_SRC_ISO_Pin;
 8103e8a:	2340      	movs	r3, #64	@ 0x40
 8103e8c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8103e8e:	2301      	movs	r3, #1
 8103e90:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8103e92:	2300      	movs	r3, #0
 8103e94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8103e96:	2300      	movs	r3, #0
 8103e98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8103e9a:	2300      	movs	r3, #0
 8103e9c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(MCU_CTRL_SRC_ISO_GPIO_Port, &GPIO_InitStruct);
 8103e9e:	463b      	mov	r3, r7
 8103ea0:	4619      	mov	r1, r3
 8103ea2:	4815      	ldr	r0, [pc, #84]	@ (8103ef8 <MX_GPIO_Init+0x114>)
 8103ea4:	f002 fe70 	bl	8106b88 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SERIAL_ENA_Pin|LL_GPIO_PIN_1|WD_DONE_Pin;
 8103ea8:	f244 0322 	movw	r3, #16418	@ 0x4022
 8103eac:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8103eae:	2301      	movs	r3, #1
 8103eb0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8103eb2:	2300      	movs	r3, #0
 8103eb4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8103eb6:	2300      	movs	r3, #0
 8103eb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8103eba:	2300      	movs	r3, #0
 8103ebc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8103ebe:	463b      	mov	r3, r7
 8103ec0:	4619      	mov	r1, r3
 8103ec2:	480e      	ldr	r0, [pc, #56]	@ (8103efc <MX_GPIO_Init+0x118>)
 8103ec4:	f002 fe60 	bl	8106b88 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USB_CTRL_Pin;
 8103ec8:	2380      	movs	r3, #128	@ 0x80
 8103eca:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8103ecc:	2301      	movs	r3, #1
 8103ece:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8103ed0:	2300      	movs	r3, #0
 8103ed2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8103ed4:	2300      	movs	r3, #0
 8103ed6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8103ed8:	2300      	movs	r3, #0
 8103eda:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(USB_CTRL_GPIO_Port, &GPIO_InitStruct);
 8103edc:	463b      	mov	r3, r7
 8103ede:	4619      	mov	r1, r3
 8103ee0:	4807      	ldr	r0, [pc, #28]	@ (8103f00 <MX_GPIO_Init+0x11c>)
 8103ee2:	f002 fe51 	bl	8106b88 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8103ee6:	bf00      	nop
 8103ee8:	3718      	adds	r7, #24
 8103eea:	46bd      	mov	sp, r7
 8103eec:	bd80      	pop	{r7, pc}
 8103eee:	bf00      	nop
 8103ef0:	58021000 	.word	0x58021000
 8103ef4:	58021400 	.word	0x58021400
 8103ef8:	58020000 	.word	0x58020000
 8103efc:	58020c00 	.word	0x58020c00
 8103f00:	58020800 	.word	0x58020800

08103f04 <__io_putchar>:

void clear_pin(GPIO_TypeDef *GPIOx, uint32_t PinMask) {
    LL_GPIO_ResetOutputPin(GPIOx, PinMask);
}

PRINTF2USART1{
 8103f04:	b580      	push	{r7, lr}
 8103f06:	b082      	sub	sp, #8
 8103f08:	af00      	add	r7, sp, #0
 8103f0a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) &data, 1, 0xFFFF);
 8103f0c:	1d39      	adds	r1, r7, #4
 8103f0e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8103f12:	2201      	movs	r2, #1
 8103f14:	4803      	ldr	r0, [pc, #12]	@ (8103f24 <__io_putchar+0x20>)
 8103f16:	f001 fc45 	bl	81057a4 <HAL_UART_Transmit>
//	while (!LL_USART_IsActiveFlag_TXE(USART1));
//	LL_USART_TransmitData8(USART1, data);
//	while (!LL_USART_IsActiveFlag_TC(USART1));
	return data;
 8103f1a:	687b      	ldr	r3, [r7, #4]
}
 8103f1c:	4618      	mov	r0, r3
 8103f1e:	3708      	adds	r7, #8
 8103f20:	46bd      	mov	sp, r7
 8103f22:	bd80      	pop	{r7, pc}
 8103f24:	10000434 	.word	0x10000434

08103f28 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8103f28:	b580      	push	{r7, lr}
 8103f2a:	af00      	add	r7, sp, #0

  /* Disables the MPU */
  LL_MPU_Disable();
 8103f2c:	f7ff fb48 	bl	81035c0 <LL_MPU_Disable>
  /* Enables the MPU */
  LL_MPU_Enable(LL_MPU_CTRL_PRIVILEGED_DEFAULT);
 8103f30:	2004      	movs	r0, #4
 8103f32:	f7ff fb2d 	bl	8103590 <LL_MPU_Enable>

}
 8103f36:	bf00      	nop
 8103f38:	bd80      	pop	{r7, pc}
	...

08103f3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8103f3c:	b580      	push	{r7, lr}
 8103f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	printf("Error HANDLER!\r\n");
 8103f40:	4802      	ldr	r0, [pc, #8]	@ (8103f4c <Error_Handler+0x10>)
 8103f42:	f004 fe61 	bl	8108c08 <puts>
	while(1){
 8103f46:	bf00      	nop
 8103f48:	e7fd      	b.n	8103f46 <Error_Handler+0xa>
 8103f4a:	bf00      	nop
 8103f4c:	0810b174 	.word	0x0810b174

08103f50 <LL_RCC_SetClockSource>:
{
 8103f50:	b480      	push	{r7}
 8103f52:	b085      	sub	sp, #20
 8103f54:	af00      	add	r7, sp, #0
 8103f56:	6078      	str	r0, [r7, #4]
  uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->D1CCIPR + LL_CLKSOURCE_REG(ClkSource));
 8103f58:	687b      	ldr	r3, [r7, #4]
 8103f5a:	b2da      	uxtb	r2, r3
 8103f5c:	4b10      	ldr	r3, [pc, #64]	@ (8103fa0 <LL_RCC_SetClockSource+0x50>)
 8103f5e:	4413      	add	r3, r2
 8103f60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*pReg, LL_CLKSOURCE_MASK(ClkSource), LL_CLKSOURCE_CONFIG(ClkSource));
 8103f62:	68fb      	ldr	r3, [r7, #12]
 8103f64:	681a      	ldr	r2, [r3, #0]
 8103f66:	687b      	ldr	r3, [r7, #4]
 8103f68:	0e19      	lsrs	r1, r3, #24
 8103f6a:	687b      	ldr	r3, [r7, #4]
 8103f6c:	0a1b      	lsrs	r3, r3, #8
 8103f6e:	f003 031f 	and.w	r3, r3, #31
 8103f72:	fa01 f303 	lsl.w	r3, r1, r3
 8103f76:	43db      	mvns	r3, r3
 8103f78:	401a      	ands	r2, r3
 8103f7a:	687b      	ldr	r3, [r7, #4]
 8103f7c:	0c1b      	lsrs	r3, r3, #16
 8103f7e:	b2d9      	uxtb	r1, r3
 8103f80:	687b      	ldr	r3, [r7, #4]
 8103f82:	0a1b      	lsrs	r3, r3, #8
 8103f84:	f003 031f 	and.w	r3, r3, #31
 8103f88:	fa01 f303 	lsl.w	r3, r1, r3
 8103f8c:	431a      	orrs	r2, r3
 8103f8e:	68fb      	ldr	r3, [r7, #12]
 8103f90:	601a      	str	r2, [r3, #0]
}
 8103f92:	bf00      	nop
 8103f94:	3714      	adds	r7, #20
 8103f96:	46bd      	mov	sp, r7
 8103f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f9c:	4770      	bx	lr
 8103f9e:	bf00      	nop
 8103fa0:	5802444c 	.word	0x5802444c

08103fa4 <LL_RCC_SetUSARTClockSource>:
{
 8103fa4:	b580      	push	{r7, lr}
 8103fa6:	b082      	sub	sp, #8
 8103fa8:	af00      	add	r7, sp, #0
 8103faa:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
 8103fac:	6878      	ldr	r0, [r7, #4]
 8103fae:	f7ff ffcf 	bl	8103f50 <LL_RCC_SetClockSource>
}
 8103fb2:	bf00      	nop
 8103fb4:	3708      	adds	r7, #8
 8103fb6:	46bd      	mov	sp, r7
 8103fb8:	bd80      	pop	{r7, pc}
	...

08103fbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8103fbc:	b480      	push	{r7}
 8103fbe:	b083      	sub	sp, #12
 8103fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8103fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8103fec <HAL_MspInit+0x30>)
 8103fc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8103fc8:	4a08      	ldr	r2, [pc, #32]	@ (8103fec <HAL_MspInit+0x30>)
 8103fca:	f043 0302 	orr.w	r3, r3, #2
 8103fce:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8103fd2:	4b06      	ldr	r3, [pc, #24]	@ (8103fec <HAL_MspInit+0x30>)
 8103fd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8103fd8:	f003 0302 	and.w	r3, r3, #2
 8103fdc:	607b      	str	r3, [r7, #4]
 8103fde:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8103fe0:	bf00      	nop
 8103fe2:	370c      	adds	r7, #12
 8103fe4:	46bd      	mov	sp, r7
 8103fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fea:	4770      	bx	lr
 8103fec:	58024400 	.word	0x58024400

08103ff0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8103ff0:	b580      	push	{r7, lr}
 8103ff2:	b08a      	sub	sp, #40	@ 0x28
 8103ff4:	af00      	add	r7, sp, #0
 8103ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8103ff8:	f107 0314 	add.w	r3, r7, #20
 8103ffc:	2200      	movs	r2, #0
 8103ffe:	601a      	str	r2, [r3, #0]
 8104000:	605a      	str	r2, [r3, #4]
 8104002:	609a      	str	r2, [r3, #8]
 8104004:	60da      	str	r2, [r3, #12]
 8104006:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8104008:	687b      	ldr	r3, [r7, #4]
 810400a:	681b      	ldr	r3, [r3, #0]
 810400c:	4a1c      	ldr	r2, [pc, #112]	@ (8104080 <HAL_UART_MspInit+0x90>)
 810400e:	4293      	cmp	r3, r2
 8104010:	d131      	bne.n	8104076 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */

    LL_RCC_SetUSARTClockSource(LL_RCC_USART16_CLKSOURCE_PCLK2);
 8104012:	481c      	ldr	r0, [pc, #112]	@ (8104084 <HAL_UART_MspInit+0x94>)
 8104014:	f7ff ffc6 	bl	8103fa4 <LL_RCC_SetUSARTClockSource>

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8104018:	4b1b      	ldr	r3, [pc, #108]	@ (8104088 <HAL_UART_MspInit+0x98>)
 810401a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810401e:	4a1a      	ldr	r2, [pc, #104]	@ (8104088 <HAL_UART_MspInit+0x98>)
 8104020:	f043 0310 	orr.w	r3, r3, #16
 8104024:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8104028:	4b17      	ldr	r3, [pc, #92]	@ (8104088 <HAL_UART_MspInit+0x98>)
 810402a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810402e:	f003 0310 	and.w	r3, r3, #16
 8104032:	613b      	str	r3, [r7, #16]
 8104034:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8104036:	4b14      	ldr	r3, [pc, #80]	@ (8104088 <HAL_UART_MspInit+0x98>)
 8104038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810403c:	4a12      	ldr	r2, [pc, #72]	@ (8104088 <HAL_UART_MspInit+0x98>)
 810403e:	f043 0301 	orr.w	r3, r3, #1
 8104042:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8104046:	4b10      	ldr	r3, [pc, #64]	@ (8104088 <HAL_UART_MspInit+0x98>)
 8104048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810404c:	f003 0301 	and.w	r3, r3, #1
 8104050:	60fb      	str	r3, [r7, #12]
 8104052:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8104054:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8104058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810405a:	2302      	movs	r3, #2
 810405c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810405e:	2300      	movs	r3, #0
 8104060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8104062:	2300      	movs	r3, #0
 8104064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8104066:	2307      	movs	r3, #7
 8104068:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810406a:	f107 0314 	add.w	r3, r7, #20
 810406e:	4619      	mov	r1, r3
 8104070:	4806      	ldr	r0, [pc, #24]	@ (810408c <HAL_UART_MspInit+0x9c>)
 8104072:	f000 fc67 	bl	8104944 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8104076:	bf00      	nop
 8104078:	3728      	adds	r7, #40	@ 0x28
 810407a:	46bd      	mov	sp, r7
 810407c:	bd80      	pop	{r7, pc}
 810407e:	bf00      	nop
 8104080:	40011000 	.word	0x40011000
 8104084:	07000308 	.word	0x07000308
 8104088:	58024400 	.word	0x58024400
 810408c:	58020000 	.word	0x58020000

08104090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8104090:	b480      	push	{r7}
 8104092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8104094:	bf00      	nop
 8104096:	e7fd      	b.n	8104094 <NMI_Handler+0x4>

08104098 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8104098:	b480      	push	{r7}
 810409a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810409c:	bf00      	nop
 810409e:	e7fd      	b.n	810409c <HardFault_Handler+0x4>

081040a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81040a0:	b480      	push	{r7}
 81040a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81040a4:	bf00      	nop
 81040a6:	e7fd      	b.n	81040a4 <MemManage_Handler+0x4>

081040a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81040a8:	b480      	push	{r7}
 81040aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81040ac:	bf00      	nop
 81040ae:	e7fd      	b.n	81040ac <BusFault_Handler+0x4>

081040b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81040b0:	b480      	push	{r7}
 81040b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81040b4:	bf00      	nop
 81040b6:	e7fd      	b.n	81040b4 <UsageFault_Handler+0x4>

081040b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81040b8:	b480      	push	{r7}
 81040ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81040bc:	bf00      	nop
 81040be:	46bd      	mov	sp, r7
 81040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040c4:	4770      	bx	lr

081040c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81040c6:	b480      	push	{r7}
 81040c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81040ca:	bf00      	nop
 81040cc:	46bd      	mov	sp, r7
 81040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040d2:	4770      	bx	lr

081040d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81040d4:	b480      	push	{r7}
 81040d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81040d8:	bf00      	nop
 81040da:	46bd      	mov	sp, r7
 81040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040e0:	4770      	bx	lr

081040e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81040e2:	b580      	push	{r7, lr}
 81040e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81040e6:	f000 faf1 	bl	81046cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SCH_RunSystemTickTimer();
 81040ea:	f7fe f827 	bl	810213c <SCH_RunSystemTickTimer>
  /* USER CODE END SysTick_IRQn 1 */
}
 81040ee:	bf00      	nop
 81040f0:	bd80      	pop	{r7, pc}

081040f2 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 81040f2:	b480      	push	{r7}
 81040f4:	af00      	add	r7, sp, #0

  /* USER CODE END UART7_IRQn 0 */
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 81040f6:	bf00      	nop
 81040f8:	46bd      	mov	sp, r7
 81040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040fe:	4770      	bx	lr

08104100 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8104100:	b480      	push	{r7}
 8104102:	af00      	add	r7, sp, #0
  return 1;
 8104104:	2301      	movs	r3, #1
}
 8104106:	4618      	mov	r0, r3
 8104108:	46bd      	mov	sp, r7
 810410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810410e:	4770      	bx	lr

08104110 <_kill>:

int _kill(int pid, int sig)
{
 8104110:	b580      	push	{r7, lr}
 8104112:	b082      	sub	sp, #8
 8104114:	af00      	add	r7, sp, #0
 8104116:	6078      	str	r0, [r7, #4]
 8104118:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 810411a:	f004 feef 	bl	8108efc <__errno>
 810411e:	4603      	mov	r3, r0
 8104120:	2216      	movs	r2, #22
 8104122:	601a      	str	r2, [r3, #0]
  return -1;
 8104124:	f04f 33ff 	mov.w	r3, #4294967295
}
 8104128:	4618      	mov	r0, r3
 810412a:	3708      	adds	r7, #8
 810412c:	46bd      	mov	sp, r7
 810412e:	bd80      	pop	{r7, pc}

08104130 <_exit>:

void _exit (int status)
{
 8104130:	b580      	push	{r7, lr}
 8104132:	b082      	sub	sp, #8
 8104134:	af00      	add	r7, sp, #0
 8104136:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8104138:	f04f 31ff 	mov.w	r1, #4294967295
 810413c:	6878      	ldr	r0, [r7, #4]
 810413e:	f7ff ffe7 	bl	8104110 <_kill>
  while (1) {}    /* Make sure we hang here */
 8104142:	bf00      	nop
 8104144:	e7fd      	b.n	8104142 <_exit+0x12>

08104146 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8104146:	b580      	push	{r7, lr}
 8104148:	b086      	sub	sp, #24
 810414a:	af00      	add	r7, sp, #0
 810414c:	60f8      	str	r0, [r7, #12]
 810414e:	60b9      	str	r1, [r7, #8]
 8104150:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8104152:	2300      	movs	r3, #0
 8104154:	617b      	str	r3, [r7, #20]
 8104156:	e00a      	b.n	810416e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8104158:	f3af 8000 	nop.w
 810415c:	4601      	mov	r1, r0
 810415e:	68bb      	ldr	r3, [r7, #8]
 8104160:	1c5a      	adds	r2, r3, #1
 8104162:	60ba      	str	r2, [r7, #8]
 8104164:	b2ca      	uxtb	r2, r1
 8104166:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8104168:	697b      	ldr	r3, [r7, #20]
 810416a:	3301      	adds	r3, #1
 810416c:	617b      	str	r3, [r7, #20]
 810416e:	697a      	ldr	r2, [r7, #20]
 8104170:	687b      	ldr	r3, [r7, #4]
 8104172:	429a      	cmp	r2, r3
 8104174:	dbf0      	blt.n	8104158 <_read+0x12>
  }

  return len;
 8104176:	687b      	ldr	r3, [r7, #4]
}
 8104178:	4618      	mov	r0, r3
 810417a:	3718      	adds	r7, #24
 810417c:	46bd      	mov	sp, r7
 810417e:	bd80      	pop	{r7, pc}

08104180 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8104180:	b580      	push	{r7, lr}
 8104182:	b086      	sub	sp, #24
 8104184:	af00      	add	r7, sp, #0
 8104186:	60f8      	str	r0, [r7, #12]
 8104188:	60b9      	str	r1, [r7, #8]
 810418a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 810418c:	2300      	movs	r3, #0
 810418e:	617b      	str	r3, [r7, #20]
 8104190:	e009      	b.n	81041a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8104192:	68bb      	ldr	r3, [r7, #8]
 8104194:	1c5a      	adds	r2, r3, #1
 8104196:	60ba      	str	r2, [r7, #8]
 8104198:	781b      	ldrb	r3, [r3, #0]
 810419a:	4618      	mov	r0, r3
 810419c:	f7ff feb2 	bl	8103f04 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81041a0:	697b      	ldr	r3, [r7, #20]
 81041a2:	3301      	adds	r3, #1
 81041a4:	617b      	str	r3, [r7, #20]
 81041a6:	697a      	ldr	r2, [r7, #20]
 81041a8:	687b      	ldr	r3, [r7, #4]
 81041aa:	429a      	cmp	r2, r3
 81041ac:	dbf1      	blt.n	8104192 <_write+0x12>
  }
  return len;
 81041ae:	687b      	ldr	r3, [r7, #4]
}
 81041b0:	4618      	mov	r0, r3
 81041b2:	3718      	adds	r7, #24
 81041b4:	46bd      	mov	sp, r7
 81041b6:	bd80      	pop	{r7, pc}

081041b8 <_close>:

int _close(int file)
{
 81041b8:	b480      	push	{r7}
 81041ba:	b083      	sub	sp, #12
 81041bc:	af00      	add	r7, sp, #0
 81041be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 81041c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 81041c4:	4618      	mov	r0, r3
 81041c6:	370c      	adds	r7, #12
 81041c8:	46bd      	mov	sp, r7
 81041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81041ce:	4770      	bx	lr

081041d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 81041d0:	b480      	push	{r7}
 81041d2:	b083      	sub	sp, #12
 81041d4:	af00      	add	r7, sp, #0
 81041d6:	6078      	str	r0, [r7, #4]
 81041d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 81041da:	683b      	ldr	r3, [r7, #0]
 81041dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 81041e0:	605a      	str	r2, [r3, #4]
  return 0;
 81041e2:	2300      	movs	r3, #0
}
 81041e4:	4618      	mov	r0, r3
 81041e6:	370c      	adds	r7, #12
 81041e8:	46bd      	mov	sp, r7
 81041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81041ee:	4770      	bx	lr

081041f0 <_isatty>:

int _isatty(int file)
{
 81041f0:	b480      	push	{r7}
 81041f2:	b083      	sub	sp, #12
 81041f4:	af00      	add	r7, sp, #0
 81041f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 81041f8:	2301      	movs	r3, #1
}
 81041fa:	4618      	mov	r0, r3
 81041fc:	370c      	adds	r7, #12
 81041fe:	46bd      	mov	sp, r7
 8104200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104204:	4770      	bx	lr

08104206 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8104206:	b480      	push	{r7}
 8104208:	b085      	sub	sp, #20
 810420a:	af00      	add	r7, sp, #0
 810420c:	60f8      	str	r0, [r7, #12]
 810420e:	60b9      	str	r1, [r7, #8]
 8104210:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8104212:	2300      	movs	r3, #0
}
 8104214:	4618      	mov	r0, r3
 8104216:	3714      	adds	r7, #20
 8104218:	46bd      	mov	sp, r7
 810421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810421e:	4770      	bx	lr

08104220 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8104220:	b580      	push	{r7, lr}
 8104222:	b086      	sub	sp, #24
 8104224:	af00      	add	r7, sp, #0
 8104226:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8104228:	4a14      	ldr	r2, [pc, #80]	@ (810427c <_sbrk+0x5c>)
 810422a:	4b15      	ldr	r3, [pc, #84]	@ (8104280 <_sbrk+0x60>)
 810422c:	1ad3      	subs	r3, r2, r3
 810422e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8104230:	697b      	ldr	r3, [r7, #20]
 8104232:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8104234:	4b13      	ldr	r3, [pc, #76]	@ (8104284 <_sbrk+0x64>)
 8104236:	681b      	ldr	r3, [r3, #0]
 8104238:	2b00      	cmp	r3, #0
 810423a:	d102      	bne.n	8104242 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 810423c:	4b11      	ldr	r3, [pc, #68]	@ (8104284 <_sbrk+0x64>)
 810423e:	4a12      	ldr	r2, [pc, #72]	@ (8104288 <_sbrk+0x68>)
 8104240:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8104242:	4b10      	ldr	r3, [pc, #64]	@ (8104284 <_sbrk+0x64>)
 8104244:	681a      	ldr	r2, [r3, #0]
 8104246:	687b      	ldr	r3, [r7, #4]
 8104248:	4413      	add	r3, r2
 810424a:	693a      	ldr	r2, [r7, #16]
 810424c:	429a      	cmp	r2, r3
 810424e:	d207      	bcs.n	8104260 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8104250:	f004 fe54 	bl	8108efc <__errno>
 8104254:	4603      	mov	r3, r0
 8104256:	220c      	movs	r2, #12
 8104258:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 810425a:	f04f 33ff 	mov.w	r3, #4294967295
 810425e:	e009      	b.n	8104274 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8104260:	4b08      	ldr	r3, [pc, #32]	@ (8104284 <_sbrk+0x64>)
 8104262:	681b      	ldr	r3, [r3, #0]
 8104264:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8104266:	4b07      	ldr	r3, [pc, #28]	@ (8104284 <_sbrk+0x64>)
 8104268:	681a      	ldr	r2, [r3, #0]
 810426a:	687b      	ldr	r3, [r7, #4]
 810426c:	4413      	add	r3, r2
 810426e:	4a05      	ldr	r2, [pc, #20]	@ (8104284 <_sbrk+0x64>)
 8104270:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8104272:	68fb      	ldr	r3, [r7, #12]
}
 8104274:	4618      	mov	r0, r3
 8104276:	3718      	adds	r7, #24
 8104278:	46bd      	mov	sp, r7
 810427a:	bd80      	pop	{r7, pc}
 810427c:	10048000 	.word	0x10048000
 8104280:	00000800 	.word	0x00000800
 8104284:	100004e8 	.word	0x100004e8
 8104288:	10000640 	.word	0x10000640

0810428c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 810428c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 81042c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8104290:	f7fc feea 	bl	8101068 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8104294:	480c      	ldr	r0, [pc, #48]	@ (81042c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8104296:	490d      	ldr	r1, [pc, #52]	@ (81042cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8104298:	4a0d      	ldr	r2, [pc, #52]	@ (81042d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 810429a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 810429c:	e002      	b.n	81042a4 <LoopCopyDataInit>

0810429e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810429e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81042a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81042a2:	3304      	adds	r3, #4

081042a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81042a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81042a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81042a8:	d3f9      	bcc.n	810429e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81042aa:	4a0a      	ldr	r2, [pc, #40]	@ (81042d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81042ac:	4c0a      	ldr	r4, [pc, #40]	@ (81042d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 81042ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 81042b0:	e001      	b.n	81042b6 <LoopFillZerobss>

081042b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81042b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81042b4:	3204      	adds	r2, #4

081042b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81042b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81042b8:	d3fb      	bcc.n	81042b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81042ba:	f004 fe25 	bl	8108f08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81042be:	f7ff fabb 	bl	8103838 <main>
  bx  lr
 81042c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81042c4:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81042c8:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81042cc:	10000220 	.word	0x10000220
  ldr r2, =_sidata
 81042d0:	0810b614 	.word	0x0810b614
  ldr r2, =_sbss
 81042d4:	10000220 	.word	0x10000220
  ldr r4, =_ebss
 81042d8:	10000640 	.word	0x10000640

081042dc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81042dc:	e7fe      	b.n	81042dc <ADC3_IRQHandler>

081042de <status_led_off>:
	s_led_display_status.state = status;
}


static void status_led_off(void)
{
 81042de:	b480      	push	{r7}
 81042e0:	af00      	add	r7, sp, #0

	//LL_GPIO_ResetOutputPin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
}
 81042e2:	bf00      	nop
 81042e4:	46bd      	mov	sp, r7
 81042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81042ea:	4770      	bx	lr

081042ec <status_led_on>:

static void status_led_on(void)
{
 81042ec:	b480      	push	{r7}
 81042ee:	af00      	add	r7, sp, #0

	//LL_GPIO_SetOutputPin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
}
 81042f0:	bf00      	nop
 81042f2:	46bd      	mov	sp, r7
 81042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81042f8:	4770      	bx	lr
	...

081042fc <status_led_update>:



void	status_led_update(void)
{
 81042fc:	b580      	push	{r7, lr}
 81042fe:	af00      	add	r7, sp, #0

	switch (s_led_display_status.state) {
 8104300:	4b0d      	ldr	r3, [pc, #52]	@ (8104338 <status_led_update+0x3c>)
 8104302:	781b      	ldrb	r3, [r3, #0]
 8104304:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8104308:	b2db      	uxtb	r3, r3
 810430a:	2b03      	cmp	r3, #3
 810430c:	d811      	bhi.n	8104332 <status_led_update+0x36>
 810430e:	a201      	add	r2, pc, #4	@ (adr r2, 8104314 <status_led_update+0x18>)
 8104310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104314:	08104325 	.word	0x08104325
 8104318:	0810432b 	.word	0x0810432b
 810431c:	08104331 	.word	0x08104331
 8104320:	08104331 	.word	0x08104331
	case POWERUP:
		status_led_powerup();
 8104324:	f000 f80a 	bl	810433c <status_led_powerup>
		break;
 8104328:	e003      	b.n	8104332 <status_led_update+0x36>
	case NORMAL:
		status_led_normal();
 810432a:	f000 f841 	bl	81043b0 <status_led_normal>
		break;
 810432e:	e000      	b.n	8104332 <status_led_update+0x36>
	case POWERING_SUB:
		break;
 8104330:	bf00      	nop
	case OVERCURRENT:
		break;
	}
}
 8104332:	bf00      	nop
 8104334:	bd80      	pop	{r7, pc}
 8104336:	bf00      	nop
 8104338:	100004ec 	.word	0x100004ec

0810433c <status_led_powerup>:


static void status_led_powerup(void)
{
 810433c:	b580      	push	{r7, lr}
 810433e:	af00      	add	r7, sp, #0
    if (s_led_display_status.led == 1) // LED is ON
 8104340:	4b1a      	ldr	r3, [pc, #104]	@ (81043ac <status_led_powerup+0x70>)
 8104342:	781b      	ldrb	r3, [r3, #0]
 8104344:	f003 0301 	and.w	r3, r3, #1
 8104348:	b2db      	uxtb	r3, r3
 810434a:	2b00      	cmp	r3, #0
 810434c:	d012      	beq.n	8104374 <status_led_powerup+0x38>
    {
        if (SCH_TIM_HasCompleted(SCH_TIM_LED))
 810434e:	2000      	movs	r0, #0
 8104350:	f7fd fe9e 	bl	8102090 <SCH_TIM_HasCompleted>
 8104354:	4603      	mov	r3, r0
 8104356:	2b00      	cmp	r3, #0
 8104358:	d025      	beq.n	81043a6 <status_led_powerup+0x6a>
        {
            s_led_display_status.led = 0;
 810435a:	4a14      	ldr	r2, [pc, #80]	@ (81043ac <status_led_powerup+0x70>)
 810435c:	7813      	ldrb	r3, [r2, #0]
 810435e:	f36f 0300 	bfc	r3, #0, #1
 8104362:	7013      	strb	r3, [r2, #0]
            status_led_off();
 8104364:	f7ff ffbb 	bl	81042de <status_led_off>
            SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD); // restart
 8104368:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 810436c:	2000      	movs	r0, #0
 810436e:	f7fd fe79 	bl	8102064 <SCH_TIM_Start>

        }

    }

}
 8104372:	e018      	b.n	81043a6 <status_led_powerup+0x6a>
    else if (s_led_display_status.led == 0) // LED is OFF
 8104374:	4b0d      	ldr	r3, [pc, #52]	@ (81043ac <status_led_powerup+0x70>)
 8104376:	781b      	ldrb	r3, [r3, #0]
 8104378:	f003 0301 	and.w	r3, r3, #1
 810437c:	b2db      	uxtb	r3, r3
 810437e:	2b00      	cmp	r3, #0
 8104380:	d111      	bne.n	81043a6 <status_led_powerup+0x6a>
        if (SCH_TIM_HasCompleted(SCH_TIM_LED))
 8104382:	2000      	movs	r0, #0
 8104384:	f7fd fe84 	bl	8102090 <SCH_TIM_HasCompleted>
 8104388:	4603      	mov	r3, r0
 810438a:	2b00      	cmp	r3, #0
 810438c:	d00b      	beq.n	81043a6 <status_led_powerup+0x6a>
            s_led_display_status.led = 1;
 810438e:	4a07      	ldr	r2, [pc, #28]	@ (81043ac <status_led_powerup+0x70>)
 8104390:	7813      	ldrb	r3, [r2, #0]
 8104392:	f043 0301 	orr.w	r3, r3, #1
 8104396:	7013      	strb	r3, [r2, #0]
            status_led_on();
 8104398:	f7ff ffa8 	bl	81042ec <status_led_on>
            SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD); // restart
 810439c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 81043a0:	2000      	movs	r0, #0
 81043a2:	f7fd fe5f 	bl	8102064 <SCH_TIM_Start>
}
 81043a6:	bf00      	nop
 81043a8:	bd80      	pop	{r7, pc}
 81043aa:	bf00      	nop
 81043ac:	100004ec 	.word	0x100004ec

081043b0 <status_led_normal>:




static void status_led_normal(void)
{
 81043b0:	b480      	push	{r7}
 81043b2:	af00      	add	r7, sp, #0

}
 81043b4:	bf00      	nop
 81043b6:	46bd      	mov	sp, r7
 81043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81043bc:	4770      	bx	lr
	...

081043c0 <status_led_create_task>:

void	status_led_create_task(void)
{
 81043c0:	b580      	push	{r7, lr}
 81043c2:	af00      	add	r7, sp, #0
    s_led_display_status.led = 0;
 81043c4:	4a08      	ldr	r2, [pc, #32]	@ (81043e8 <status_led_create_task+0x28>)
 81043c6:	7813      	ldrb	r3, [r2, #0]
 81043c8:	f36f 0300 	bfc	r3, #0, #1
 81043cc:	7013      	strb	r3, [r2, #0]
    s_led_display_status.state = POWERUP;
 81043ce:	4a06      	ldr	r2, [pc, #24]	@ (81043e8 <status_led_create_task+0x28>)
 81043d0:	7813      	ldrb	r3, [r2, #0]
 81043d2:	f36f 0347 	bfc	r3, #1, #7
 81043d6:	7013      	strb	r3, [r2, #0]
    status_led_on();
 81043d8:	f7ff ff88 	bl	81042ec <status_led_on>
	SCH_TASK_CreateTask(&s_task_context.taskHandle, &s_task_context.taskProperty);
 81043dc:	4903      	ldr	r1, [pc, #12]	@ (81043ec <status_led_create_task+0x2c>)
 81043de:	4804      	ldr	r0, [pc, #16]	@ (81043f0 <status_led_create_task+0x30>)
 81043e0:	f7fd fe6c 	bl	81020bc <SCH_TASK_CreateTask>
}
 81043e4:	bf00      	nop
 81043e6:	bd80      	pop	{r7, pc}
 81043e8:	100004ec 	.word	0x100004ec
 81043ec:	10000014 	.word	0x10000014
 81043f0:	10000010 	.word	0x10000010

081043f4 <DUALCORECMD_create_task>:
		}

};

void DUALCORECMD_create_task(void)
{
 81043f4:	b580      	push	{r7, lr}
 81043f6:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&dualcorecmd_task_context.taskHandle, &dualcorecmd_task_context.taskProperty);
 81043f8:	4902      	ldr	r1, [pc, #8]	@ (8104404 <DUALCORECMD_create_task+0x10>)
 81043fa:	4803      	ldr	r0, [pc, #12]	@ (8104408 <DUALCORECMD_create_task+0x14>)
 81043fc:	f7fd fe5e 	bl	81020bc <SCH_TASK_CreateTask>
}
 8104400:	bf00      	nop
 8104402:	bd80      	pop	{r7, pc}
 8104404:	1000002c 	.word	0x1000002c
 8104408:	10000028 	.word	0x10000028

0810440c <DUALCORECMD_update_task>:

static void DUALCORECMD_update_task(void){
 810440c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8104410:	b085      	sub	sp, #20
 8104412:	af00      	add	r7, sp, #0
    size_t len = 0;
 8104414:	2300      	movs	r3, #0
 8104416:	60fb      	str	r3, [r7, #12]
    void* addr;
	while ((len = ringbuff_get_linear_block_read_length(rb_cm7_to_cm4)) > 0) {
 8104418:	e050      	b.n	81044bc <DUALCORECMD_update_task+0xb0>
 810441a:	466b      	mov	r3, sp
 810441c:	461e      	mov	r6, r3
	    addr = ringbuff_get_linear_block_read_address(rb_cm7_to_cm4);
 810441e:	4b2f      	ldr	r3, [pc, #188]	@ (81044dc <DUALCORECMD_update_task+0xd0>)
 8104420:	681b      	ldr	r3, [r3, #0]
 8104422:	4618      	mov	r0, r3
 8104424:	f7fe f87c 	bl	8102520 <ringbuff_get_linear_block_read_address>
 8104428:	60b8      	str	r0, [r7, #8]

//	    HAL_UART_Transmit(&huart1, addr, len, 1000);
	    printf("Length: %d, Content: %.*s\r\n", len, len, (char *)addr);
 810442a:	68bb      	ldr	r3, [r7, #8]
 810442c:	68fa      	ldr	r2, [r7, #12]
 810442e:	68f9      	ldr	r1, [r7, #12]
 8104430:	482b      	ldr	r0, [pc, #172]	@ (81044e0 <DUALCORECMD_update_task+0xd4>)
 8104432:	f004 fb81 	bl	8108b38 <iprintf>
	    char content[len + 1];
 8104436:	68fb      	ldr	r3, [r7, #12]
 8104438:	1c59      	adds	r1, r3, #1
 810443a:	460b      	mov	r3, r1
 810443c:	3b01      	subs	r3, #1
 810443e:	607b      	str	r3, [r7, #4]
 8104440:	2300      	movs	r3, #0
 8104442:	460c      	mov	r4, r1
 8104444:	461d      	mov	r5, r3
 8104446:	f04f 0200 	mov.w	r2, #0
 810444a:	f04f 0300 	mov.w	r3, #0
 810444e:	00eb      	lsls	r3, r5, #3
 8104450:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8104454:	00e2      	lsls	r2, r4, #3
 8104456:	2300      	movs	r3, #0
 8104458:	4688      	mov	r8, r1
 810445a:	4699      	mov	r9, r3
 810445c:	f04f 0200 	mov.w	r2, #0
 8104460:	f04f 0300 	mov.w	r3, #0
 8104464:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8104468:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 810446c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8104470:	1dcb      	adds	r3, r1, #7
 8104472:	08db      	lsrs	r3, r3, #3
 8104474:	00db      	lsls	r3, r3, #3
 8104476:	ebad 0d03 	sub.w	sp, sp, r3
 810447a:	466b      	mov	r3, sp
 810447c:	3300      	adds	r3, #0
 810447e:	603b      	str	r3, [r7, #0]
	    strncpy(content, (char *)addr, len);
 8104480:	68fa      	ldr	r2, [r7, #12]
 8104482:	68b9      	ldr	r1, [r7, #8]
 8104484:	6838      	ldr	r0, [r7, #0]
 8104486:	f004 fcdb 	bl	8108e40 <strncpy>
	    content[len] = '\0';
 810448a:	683a      	ldr	r2, [r7, #0]
 810448c:	68fb      	ldr	r3, [r7, #12]
 810448e:	4413      	add	r3, r2
 8104490:	2200      	movs	r2, #0
 8104492:	701a      	strb	r2, [r3, #0]

	    parse_and_print_json(content);
 8104494:	6838      	ldr	r0, [r7, #0]
 8104496:	f7fd f977 	bl	8101788 <parse_and_print_json>

	    printf("\r\nSent: Roger!\r\n");
 810449a:	4812      	ldr	r0, [pc, #72]	@ (81044e4 <DUALCORECMD_update_task+0xd8>)
 810449c:	f004 fbb4 	bl	8108c08 <puts>
	    ringbuff_write(rb_cm4_to_cm7, "\r\n[CM4]: Roger!\r\n" , strlen("\r\n[CM4]: Roger!\r\n"));
 81044a0:	4b11      	ldr	r3, [pc, #68]	@ (81044e8 <DUALCORECMD_update_task+0xdc>)
 81044a2:	681b      	ldr	r3, [r3, #0]
 81044a4:	2211      	movs	r2, #17
 81044a6:	4911      	ldr	r1, [pc, #68]	@ (81044ec <DUALCORECMD_update_task+0xe0>)
 81044a8:	4618      	mov	r0, r3
 81044aa:	f7fd ff54 	bl	8102356 <ringbuff_write>

	    ringbuff_skip(rb_cm7_to_cm4, len);
 81044ae:	4b0b      	ldr	r3, [pc, #44]	@ (81044dc <DUALCORECMD_update_task+0xd0>)
 81044b0:	681b      	ldr	r3, [r3, #0]
 81044b2:	68f9      	ldr	r1, [r7, #12]
 81044b4:	4618      	mov	r0, r3
 81044b6:	f7fe f882 	bl	81025be <ringbuff_skip>
 81044ba:	46b5      	mov	sp, r6
	while ((len = ringbuff_get_linear_block_read_length(rb_cm7_to_cm4)) > 0) {
 81044bc:	4b07      	ldr	r3, [pc, #28]	@ (81044dc <DUALCORECMD_update_task+0xd0>)
 81044be:	681b      	ldr	r3, [r3, #0]
 81044c0:	4618      	mov	r0, r3
 81044c2:	f7fe f849 	bl	8102558 <ringbuff_get_linear_block_read_length>
 81044c6:	60f8      	str	r0, [r7, #12]
 81044c8:	68fb      	ldr	r3, [r7, #12]
 81044ca:	2b00      	cmp	r3, #0
 81044cc:	d1a5      	bne.n	810441a <DUALCORECMD_update_task+0xe>
	}

}
 81044ce:	bf00      	nop
 81044d0:	bf00      	nop
 81044d2:	3714      	adds	r7, #20
 81044d4:	46bd      	mov	sp, r7
 81044d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 81044da:	bf00      	nop
 81044dc:	1000000c 	.word	0x1000000c
 81044e0:	0810b184 	.word	0x0810b184
 81044e4:	0810b1a0 	.word	0x0810b1a0
 81044e8:	10000008 	.word	0x10000008
 81044ec:	0810b1b0 	.word	0x0810b1b0

081044f0 <LL_GPIO_SetOutputPin>:
{
 81044f0:	b480      	push	{r7}
 81044f2:	b083      	sub	sp, #12
 81044f4:	af00      	add	r7, sp, #0
 81044f6:	6078      	str	r0, [r7, #4]
 81044f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 81044fa:	687b      	ldr	r3, [r7, #4]
 81044fc:	683a      	ldr	r2, [r7, #0]
 81044fe:	619a      	str	r2, [r3, #24]
}
 8104500:	bf00      	nop
 8104502:	370c      	adds	r7, #12
 8104504:	46bd      	mov	sp, r7
 8104506:	f85d 7b04 	ldr.w	r7, [sp], #4
 810450a:	4770      	bx	lr

0810450c <LL_GPIO_ResetOutputPin>:
{
 810450c:	b480      	push	{r7}
 810450e:	b083      	sub	sp, #12
 8104510:	af00      	add	r7, sp, #0
 8104512:	6078      	str	r0, [r7, #4]
 8104514:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 8104516:	683b      	ldr	r3, [r7, #0]
 8104518:	041a      	lsls	r2, r3, #16
 810451a:	687b      	ldr	r3, [r7, #4]
 810451c:	619a      	str	r2, [r3, #24]
}
 810451e:	bf00      	nop
 8104520:	370c      	adds	r7, #12
 8104522:	46bd      	mov	sp, r7
 8104524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104528:	4770      	bx	lr
	...

0810452c <Watchdog_M4_create_task>:
	}
};


void Watchdog_M4_create_task(void)
{
 810452c:	b580      	push	{r7, lr}
 810452e:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&wdt_task_context.taskHandle, &wdt_task_context.taskProperty);
 8104530:	4902      	ldr	r1, [pc, #8]	@ (810453c <Watchdog_M4_create_task+0x10>)
 8104532:	4803      	ldr	r0, [pc, #12]	@ (8104540 <Watchdog_M4_create_task+0x14>)
 8104534:	f7fd fdc2 	bl	81020bc <SCH_TASK_CreateTask>

}
 8104538:	bf00      	nop
 810453a:	bd80      	pop	{r7, pc}
 810453c:	10000040 	.word	0x10000040
 8104540:	1000003c 	.word	0x1000003c

08104544 <status_watchdog_update>:

void status_watchdog_update(void)
{
 8104544:	b580      	push	{r7, lr}
 8104546:	af00      	add	r7, sp, #0

		if (WDT_Current){
 8104548:	4b14      	ldr	r3, [pc, #80]	@ (810459c <status_watchdog_update+0x58>)
 810454a:	781b      	ldrb	r3, [r3, #0]
 810454c:	2b00      	cmp	r3, #0
 810454e:	d012      	beq.n	8104576 <status_watchdog_update+0x32>
			if (SCH_TIM_HasCompleted(SCH_TIM_WDT))
 8104550:	2001      	movs	r0, #1
 8104552:	f7fd fd9d 	bl	8102090 <SCH_TIM_HasCompleted>
 8104556:	4603      	mov	r3, r0
 8104558:	2b00      	cmp	r3, #0
 810455a:	d01d      	beq.n	8104598 <status_watchdog_update+0x54>
			{
				WDT_Current = 0;
 810455c:	4b0f      	ldr	r3, [pc, #60]	@ (810459c <status_watchdog_update+0x58>)
 810455e:	2200      	movs	r2, #0
 8104560:	701a      	strb	r2, [r3, #0]
				LL_GPIO_ResetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 8104562:	2120      	movs	r1, #32
 8104564:	480e      	ldr	r0, [pc, #56]	@ (81045a0 <status_watchdog_update+0x5c>)
 8104566:	f7ff ffd1 	bl	810450c <LL_GPIO_ResetOutputPin>
				SCH_TIM_Start(SCH_TIM_WDT,LOW_PERIOD);	//restart
 810456a:	f44f 7116 	mov.w	r1, #600	@ 0x258
 810456e:	2001      	movs	r0, #1
 8104570:	f7fd fd78 	bl	8102064 <SCH_TIM_Start>
				WDT_Current = 1;
				LL_GPIO_SetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
				SCH_TIM_Start(SCH_TIM_WDT,HIGH_PERIOD);	//restart
			}
	}
}
 8104574:	e010      	b.n	8104598 <status_watchdog_update+0x54>
			if (SCH_TIM_HasCompleted(SCH_TIM_WDT))
 8104576:	2001      	movs	r0, #1
 8104578:	f7fd fd8a 	bl	8102090 <SCH_TIM_HasCompleted>
 810457c:	4603      	mov	r3, r0
 810457e:	2b00      	cmp	r3, #0
 8104580:	d00a      	beq.n	8104598 <status_watchdog_update+0x54>
				WDT_Current = 1;
 8104582:	4b06      	ldr	r3, [pc, #24]	@ (810459c <status_watchdog_update+0x58>)
 8104584:	2201      	movs	r2, #1
 8104586:	701a      	strb	r2, [r3, #0]
				LL_GPIO_SetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 8104588:	2120      	movs	r1, #32
 810458a:	4805      	ldr	r0, [pc, #20]	@ (81045a0 <status_watchdog_update+0x5c>)
 810458c:	f7ff ffb0 	bl	81044f0 <LL_GPIO_SetOutputPin>
				SCH_TIM_Start(SCH_TIM_WDT,HIGH_PERIOD);	//restart
 8104590:	21c8      	movs	r1, #200	@ 0xc8
 8104592:	2001      	movs	r0, #1
 8104594:	f7fd fd66 	bl	8102064 <SCH_TIM_Start>
}
 8104598:	bf00      	nop
 810459a:	bd80      	pop	{r7, pc}
 810459c:	100004ed 	.word	0x100004ed
 81045a0:	58020c00 	.word	0x58020c00

081045a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81045a4:	b580      	push	{r7, lr}
 81045a6:	b082      	sub	sp, #8
 81045a8:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81045aa:	4b28      	ldr	r3, [pc, #160]	@ (810464c <HAL_Init+0xa8>)
 81045ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81045b0:	4a26      	ldr	r2, [pc, #152]	@ (810464c <HAL_Init+0xa8>)
 81045b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 81045b6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81045ba:	4b24      	ldr	r3, [pc, #144]	@ (810464c <HAL_Init+0xa8>)
 81045bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81045c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81045c4:	603b      	str	r3, [r7, #0]
 81045c6:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81045c8:	4b21      	ldr	r3, [pc, #132]	@ (8104650 <HAL_Init+0xac>)
 81045ca:	681b      	ldr	r3, [r3, #0]
 81045cc:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 81045d0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 81045d4:	4a1e      	ldr	r2, [pc, #120]	@ (8104650 <HAL_Init+0xac>)
 81045d6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 81045da:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81045dc:	4b1c      	ldr	r3, [pc, #112]	@ (8104650 <HAL_Init+0xac>)
 81045de:	681b      	ldr	r3, [r3, #0]
 81045e0:	4a1b      	ldr	r2, [pc, #108]	@ (8104650 <HAL_Init+0xac>)
 81045e2:	f043 0301 	orr.w	r3, r3, #1
 81045e6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81045e8:	2003      	movs	r0, #3
 81045ea:	f000 f965 	bl	81048b8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81045ee:	f000 fbf3 	bl	8104dd8 <HAL_RCC_GetSysClockFreq>
 81045f2:	4602      	mov	r2, r0
 81045f4:	4b15      	ldr	r3, [pc, #84]	@ (810464c <HAL_Init+0xa8>)
 81045f6:	699b      	ldr	r3, [r3, #24]
 81045f8:	0a1b      	lsrs	r3, r3, #8
 81045fa:	f003 030f 	and.w	r3, r3, #15
 81045fe:	4915      	ldr	r1, [pc, #84]	@ (8104654 <HAL_Init+0xb0>)
 8104600:	5ccb      	ldrb	r3, [r1, r3]
 8104602:	f003 031f 	and.w	r3, r3, #31
 8104606:	fa22 f303 	lsr.w	r3, r2, r3
 810460a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810460c:	4b0f      	ldr	r3, [pc, #60]	@ (810464c <HAL_Init+0xa8>)
 810460e:	699b      	ldr	r3, [r3, #24]
 8104610:	f003 030f 	and.w	r3, r3, #15
 8104614:	4a0f      	ldr	r2, [pc, #60]	@ (8104654 <HAL_Init+0xb0>)
 8104616:	5cd3      	ldrb	r3, [r2, r3]
 8104618:	f003 031f 	and.w	r3, r3, #31
 810461c:	687a      	ldr	r2, [r7, #4]
 810461e:	fa22 f303 	lsr.w	r3, r2, r3
 8104622:	4a0d      	ldr	r2, [pc, #52]	@ (8104658 <HAL_Init+0xb4>)
 8104624:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8104626:	4b0c      	ldr	r3, [pc, #48]	@ (8104658 <HAL_Init+0xb4>)
 8104628:	681b      	ldr	r3, [r3, #0]
 810462a:	4a0c      	ldr	r2, [pc, #48]	@ (810465c <HAL_Init+0xb8>)
 810462c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810462e:	200f      	movs	r0, #15
 8104630:	f000 f816 	bl	8104660 <HAL_InitTick>
 8104634:	4603      	mov	r3, r0
 8104636:	2b00      	cmp	r3, #0
 8104638:	d001      	beq.n	810463e <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810463a:	2301      	movs	r3, #1
 810463c:	e002      	b.n	8104644 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810463e:	f7ff fcbd 	bl	8103fbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8104642:	2300      	movs	r3, #0
}
 8104644:	4618      	mov	r0, r3
 8104646:	3708      	adds	r7, #8
 8104648:	46bd      	mov	sp, r7
 810464a:	bd80      	pop	{r7, pc}
 810464c:	58024400 	.word	0x58024400
 8104650:	40024400 	.word	0x40024400
 8104654:	0810b1c4 	.word	0x0810b1c4
 8104658:	10000004 	.word	0x10000004
 810465c:	10000000 	.word	0x10000000

08104660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8104660:	b580      	push	{r7, lr}
 8104662:	b082      	sub	sp, #8
 8104664:	af00      	add	r7, sp, #0
 8104666:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8104668:	4b15      	ldr	r3, [pc, #84]	@ (81046c0 <HAL_InitTick+0x60>)
 810466a:	781b      	ldrb	r3, [r3, #0]
 810466c:	2b00      	cmp	r3, #0
 810466e:	d101      	bne.n	8104674 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8104670:	2301      	movs	r3, #1
 8104672:	e021      	b.n	81046b8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8104674:	4b13      	ldr	r3, [pc, #76]	@ (81046c4 <HAL_InitTick+0x64>)
 8104676:	681a      	ldr	r2, [r3, #0]
 8104678:	4b11      	ldr	r3, [pc, #68]	@ (81046c0 <HAL_InitTick+0x60>)
 810467a:	781b      	ldrb	r3, [r3, #0]
 810467c:	4619      	mov	r1, r3
 810467e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8104682:	fbb3 f3f1 	udiv	r3, r3, r1
 8104686:	fbb2 f3f3 	udiv	r3, r2, r3
 810468a:	4618      	mov	r0, r3
 810468c:	f000 f939 	bl	8104902 <HAL_SYSTICK_Config>
 8104690:	4603      	mov	r3, r0
 8104692:	2b00      	cmp	r3, #0
 8104694:	d001      	beq.n	810469a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8104696:	2301      	movs	r3, #1
 8104698:	e00e      	b.n	81046b8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 810469a:	687b      	ldr	r3, [r7, #4]
 810469c:	2b0f      	cmp	r3, #15
 810469e:	d80a      	bhi.n	81046b6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 81046a0:	2200      	movs	r2, #0
 81046a2:	6879      	ldr	r1, [r7, #4]
 81046a4:	f04f 30ff 	mov.w	r0, #4294967295
 81046a8:	f000 f911 	bl	81048ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 81046ac:	4a06      	ldr	r2, [pc, #24]	@ (81046c8 <HAL_InitTick+0x68>)
 81046ae:	687b      	ldr	r3, [r7, #4]
 81046b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 81046b2:	2300      	movs	r3, #0
 81046b4:	e000      	b.n	81046b8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 81046b6:	2301      	movs	r3, #1
}
 81046b8:	4618      	mov	r0, r3
 81046ba:	3708      	adds	r7, #8
 81046bc:	46bd      	mov	sp, r7
 81046be:	bd80      	pop	{r7, pc}
 81046c0:	10000054 	.word	0x10000054
 81046c4:	10000000 	.word	0x10000000
 81046c8:	10000050 	.word	0x10000050

081046cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81046cc:	b480      	push	{r7}
 81046ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81046d0:	4b06      	ldr	r3, [pc, #24]	@ (81046ec <HAL_IncTick+0x20>)
 81046d2:	781b      	ldrb	r3, [r3, #0]
 81046d4:	461a      	mov	r2, r3
 81046d6:	4b06      	ldr	r3, [pc, #24]	@ (81046f0 <HAL_IncTick+0x24>)
 81046d8:	681b      	ldr	r3, [r3, #0]
 81046da:	4413      	add	r3, r2
 81046dc:	4a04      	ldr	r2, [pc, #16]	@ (81046f0 <HAL_IncTick+0x24>)
 81046de:	6013      	str	r3, [r2, #0]
}
 81046e0:	bf00      	nop
 81046e2:	46bd      	mov	sp, r7
 81046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81046e8:	4770      	bx	lr
 81046ea:	bf00      	nop
 81046ec:	10000054 	.word	0x10000054
 81046f0:	100004f0 	.word	0x100004f0

081046f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81046f4:	b480      	push	{r7}
 81046f6:	af00      	add	r7, sp, #0
  return uwTick;
 81046f8:	4b03      	ldr	r3, [pc, #12]	@ (8104708 <HAL_GetTick+0x14>)
 81046fa:	681b      	ldr	r3, [r3, #0]
}
 81046fc:	4618      	mov	r0, r3
 81046fe:	46bd      	mov	sp, r7
 8104700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104704:	4770      	bx	lr
 8104706:	bf00      	nop
 8104708:	100004f0 	.word	0x100004f0

0810470c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 810470c:	b580      	push	{r7, lr}
 810470e:	b084      	sub	sp, #16
 8104710:	af00      	add	r7, sp, #0
 8104712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8104714:	f7ff ffee 	bl	81046f4 <HAL_GetTick>
 8104718:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 810471a:	687b      	ldr	r3, [r7, #4]
 810471c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 810471e:	68fb      	ldr	r3, [r7, #12]
 8104720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104724:	d005      	beq.n	8104732 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8104726:	4b0a      	ldr	r3, [pc, #40]	@ (8104750 <HAL_Delay+0x44>)
 8104728:	781b      	ldrb	r3, [r3, #0]
 810472a:	461a      	mov	r2, r3
 810472c:	68fb      	ldr	r3, [r7, #12]
 810472e:	4413      	add	r3, r2
 8104730:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8104732:	bf00      	nop
 8104734:	f7ff ffde 	bl	81046f4 <HAL_GetTick>
 8104738:	4602      	mov	r2, r0
 810473a:	68bb      	ldr	r3, [r7, #8]
 810473c:	1ad3      	subs	r3, r2, r3
 810473e:	68fa      	ldr	r2, [r7, #12]
 8104740:	429a      	cmp	r2, r3
 8104742:	d8f7      	bhi.n	8104734 <HAL_Delay+0x28>
  {
  }
}
 8104744:	bf00      	nop
 8104746:	bf00      	nop
 8104748:	3710      	adds	r7, #16
 810474a:	46bd      	mov	sp, r7
 810474c:	bd80      	pop	{r7, pc}
 810474e:	bf00      	nop
 8104750:	10000054 	.word	0x10000054

08104754 <__NVIC_SetPriorityGrouping>:
{
 8104754:	b480      	push	{r7}
 8104756:	b085      	sub	sp, #20
 8104758:	af00      	add	r7, sp, #0
 810475a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 810475c:	687b      	ldr	r3, [r7, #4]
 810475e:	f003 0307 	and.w	r3, r3, #7
 8104762:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8104764:	4b0c      	ldr	r3, [pc, #48]	@ (8104798 <__NVIC_SetPriorityGrouping+0x44>)
 8104766:	68db      	ldr	r3, [r3, #12]
 8104768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810476a:	68ba      	ldr	r2, [r7, #8]
 810476c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8104770:	4013      	ands	r3, r2
 8104772:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8104774:	68fb      	ldr	r3, [r7, #12]
 8104776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8104778:	68bb      	ldr	r3, [r7, #8]
 810477a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 810477c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8104780:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8104786:	4a04      	ldr	r2, [pc, #16]	@ (8104798 <__NVIC_SetPriorityGrouping+0x44>)
 8104788:	68bb      	ldr	r3, [r7, #8]
 810478a:	60d3      	str	r3, [r2, #12]
}
 810478c:	bf00      	nop
 810478e:	3714      	adds	r7, #20
 8104790:	46bd      	mov	sp, r7
 8104792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104796:	4770      	bx	lr
 8104798:	e000ed00 	.word	0xe000ed00

0810479c <__NVIC_GetPriorityGrouping>:
{
 810479c:	b480      	push	{r7}
 810479e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81047a0:	4b04      	ldr	r3, [pc, #16]	@ (81047b4 <__NVIC_GetPriorityGrouping+0x18>)
 81047a2:	68db      	ldr	r3, [r3, #12]
 81047a4:	0a1b      	lsrs	r3, r3, #8
 81047a6:	f003 0307 	and.w	r3, r3, #7
}
 81047aa:	4618      	mov	r0, r3
 81047ac:	46bd      	mov	sp, r7
 81047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81047b2:	4770      	bx	lr
 81047b4:	e000ed00 	.word	0xe000ed00

081047b8 <__NVIC_SetPriority>:
{
 81047b8:	b480      	push	{r7}
 81047ba:	b083      	sub	sp, #12
 81047bc:	af00      	add	r7, sp, #0
 81047be:	4603      	mov	r3, r0
 81047c0:	6039      	str	r1, [r7, #0]
 81047c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81047c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81047c8:	2b00      	cmp	r3, #0
 81047ca:	db0a      	blt.n	81047e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81047cc:	683b      	ldr	r3, [r7, #0]
 81047ce:	b2da      	uxtb	r2, r3
 81047d0:	490c      	ldr	r1, [pc, #48]	@ (8104804 <__NVIC_SetPriority+0x4c>)
 81047d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81047d6:	0112      	lsls	r2, r2, #4
 81047d8:	b2d2      	uxtb	r2, r2
 81047da:	440b      	add	r3, r1
 81047dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 81047e0:	e00a      	b.n	81047f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81047e2:	683b      	ldr	r3, [r7, #0]
 81047e4:	b2da      	uxtb	r2, r3
 81047e6:	4908      	ldr	r1, [pc, #32]	@ (8104808 <__NVIC_SetPriority+0x50>)
 81047e8:	88fb      	ldrh	r3, [r7, #6]
 81047ea:	f003 030f 	and.w	r3, r3, #15
 81047ee:	3b04      	subs	r3, #4
 81047f0:	0112      	lsls	r2, r2, #4
 81047f2:	b2d2      	uxtb	r2, r2
 81047f4:	440b      	add	r3, r1
 81047f6:	761a      	strb	r2, [r3, #24]
}
 81047f8:	bf00      	nop
 81047fa:	370c      	adds	r7, #12
 81047fc:	46bd      	mov	sp, r7
 81047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104802:	4770      	bx	lr
 8104804:	e000e100 	.word	0xe000e100
 8104808:	e000ed00 	.word	0xe000ed00

0810480c <NVIC_EncodePriority>:
{
 810480c:	b480      	push	{r7}
 810480e:	b089      	sub	sp, #36	@ 0x24
 8104810:	af00      	add	r7, sp, #0
 8104812:	60f8      	str	r0, [r7, #12]
 8104814:	60b9      	str	r1, [r7, #8]
 8104816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8104818:	68fb      	ldr	r3, [r7, #12]
 810481a:	f003 0307 	and.w	r3, r3, #7
 810481e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8104820:	69fb      	ldr	r3, [r7, #28]
 8104822:	f1c3 0307 	rsb	r3, r3, #7
 8104826:	2b04      	cmp	r3, #4
 8104828:	bf28      	it	cs
 810482a:	2304      	movcs	r3, #4
 810482c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810482e:	69fb      	ldr	r3, [r7, #28]
 8104830:	3304      	adds	r3, #4
 8104832:	2b06      	cmp	r3, #6
 8104834:	d902      	bls.n	810483c <NVIC_EncodePriority+0x30>
 8104836:	69fb      	ldr	r3, [r7, #28]
 8104838:	3b03      	subs	r3, #3
 810483a:	e000      	b.n	810483e <NVIC_EncodePriority+0x32>
 810483c:	2300      	movs	r3, #0
 810483e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8104840:	f04f 32ff 	mov.w	r2, #4294967295
 8104844:	69bb      	ldr	r3, [r7, #24]
 8104846:	fa02 f303 	lsl.w	r3, r2, r3
 810484a:	43da      	mvns	r2, r3
 810484c:	68bb      	ldr	r3, [r7, #8]
 810484e:	401a      	ands	r2, r3
 8104850:	697b      	ldr	r3, [r7, #20]
 8104852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8104854:	f04f 31ff 	mov.w	r1, #4294967295
 8104858:	697b      	ldr	r3, [r7, #20]
 810485a:	fa01 f303 	lsl.w	r3, r1, r3
 810485e:	43d9      	mvns	r1, r3
 8104860:	687b      	ldr	r3, [r7, #4]
 8104862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8104864:	4313      	orrs	r3, r2
}
 8104866:	4618      	mov	r0, r3
 8104868:	3724      	adds	r7, #36	@ 0x24
 810486a:	46bd      	mov	sp, r7
 810486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104870:	4770      	bx	lr
	...

08104874 <SysTick_Config>:
{
 8104874:	b580      	push	{r7, lr}
 8104876:	b082      	sub	sp, #8
 8104878:	af00      	add	r7, sp, #0
 810487a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 810487c:	687b      	ldr	r3, [r7, #4]
 810487e:	3b01      	subs	r3, #1
 8104880:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8104884:	d301      	bcc.n	810488a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8104886:	2301      	movs	r3, #1
 8104888:	e00f      	b.n	81048aa <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 810488a:	4a0a      	ldr	r2, [pc, #40]	@ (81048b4 <SysTick_Config+0x40>)
 810488c:	687b      	ldr	r3, [r7, #4]
 810488e:	3b01      	subs	r3, #1
 8104890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8104892:	210f      	movs	r1, #15
 8104894:	f04f 30ff 	mov.w	r0, #4294967295
 8104898:	f7ff ff8e 	bl	81047b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 810489c:	4b05      	ldr	r3, [pc, #20]	@ (81048b4 <SysTick_Config+0x40>)
 810489e:	2200      	movs	r2, #0
 81048a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 81048a2:	4b04      	ldr	r3, [pc, #16]	@ (81048b4 <SysTick_Config+0x40>)
 81048a4:	2207      	movs	r2, #7
 81048a6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 81048a8:	2300      	movs	r3, #0
}
 81048aa:	4618      	mov	r0, r3
 81048ac:	3708      	adds	r7, #8
 81048ae:	46bd      	mov	sp, r7
 81048b0:	bd80      	pop	{r7, pc}
 81048b2:	bf00      	nop
 81048b4:	e000e010 	.word	0xe000e010

081048b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81048b8:	b580      	push	{r7, lr}
 81048ba:	b082      	sub	sp, #8
 81048bc:	af00      	add	r7, sp, #0
 81048be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81048c0:	6878      	ldr	r0, [r7, #4]
 81048c2:	f7ff ff47 	bl	8104754 <__NVIC_SetPriorityGrouping>
}
 81048c6:	bf00      	nop
 81048c8:	3708      	adds	r7, #8
 81048ca:	46bd      	mov	sp, r7
 81048cc:	bd80      	pop	{r7, pc}

081048ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81048ce:	b580      	push	{r7, lr}
 81048d0:	b086      	sub	sp, #24
 81048d2:	af00      	add	r7, sp, #0
 81048d4:	4603      	mov	r3, r0
 81048d6:	60b9      	str	r1, [r7, #8]
 81048d8:	607a      	str	r2, [r7, #4]
 81048da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81048dc:	f7ff ff5e 	bl	810479c <__NVIC_GetPriorityGrouping>
 81048e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81048e2:	687a      	ldr	r2, [r7, #4]
 81048e4:	68b9      	ldr	r1, [r7, #8]
 81048e6:	6978      	ldr	r0, [r7, #20]
 81048e8:	f7ff ff90 	bl	810480c <NVIC_EncodePriority>
 81048ec:	4602      	mov	r2, r0
 81048ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81048f2:	4611      	mov	r1, r2
 81048f4:	4618      	mov	r0, r3
 81048f6:	f7ff ff5f 	bl	81047b8 <__NVIC_SetPriority>
}
 81048fa:	bf00      	nop
 81048fc:	3718      	adds	r7, #24
 81048fe:	46bd      	mov	sp, r7
 8104900:	bd80      	pop	{r7, pc}

08104902 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8104902:	b580      	push	{r7, lr}
 8104904:	b082      	sub	sp, #8
 8104906:	af00      	add	r7, sp, #0
 8104908:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 810490a:	6878      	ldr	r0, [r7, #4]
 810490c:	f7ff ffb2 	bl	8104874 <SysTick_Config>
 8104910:	4603      	mov	r3, r0
}
 8104912:	4618      	mov	r0, r3
 8104914:	3708      	adds	r7, #8
 8104916:	46bd      	mov	sp, r7
 8104918:	bd80      	pop	{r7, pc}
	...

0810491c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 810491c:	b480      	push	{r7}
 810491e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8104920:	4b07      	ldr	r3, [pc, #28]	@ (8104940 <HAL_GetCurrentCPUID+0x24>)
 8104922:	681b      	ldr	r3, [r3, #0]
 8104924:	091b      	lsrs	r3, r3, #4
 8104926:	f003 030f 	and.w	r3, r3, #15
 810492a:	2b07      	cmp	r3, #7
 810492c:	d101      	bne.n	8104932 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810492e:	2303      	movs	r3, #3
 8104930:	e000      	b.n	8104934 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8104932:	2301      	movs	r3, #1
  }
}
 8104934:	4618      	mov	r0, r3
 8104936:	46bd      	mov	sp, r7
 8104938:	f85d 7b04 	ldr.w	r7, [sp], #4
 810493c:	4770      	bx	lr
 810493e:	bf00      	nop
 8104940:	e000ed00 	.word	0xe000ed00

08104944 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8104944:	b480      	push	{r7}
 8104946:	b089      	sub	sp, #36	@ 0x24
 8104948:	af00      	add	r7, sp, #0
 810494a:	6078      	str	r0, [r7, #4]
 810494c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810494e:	2300      	movs	r3, #0
 8104950:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8104952:	4b89      	ldr	r3, [pc, #548]	@ (8104b78 <HAL_GPIO_Init+0x234>)
 8104954:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8104956:	e194      	b.n	8104c82 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8104958:	683b      	ldr	r3, [r7, #0]
 810495a:	681a      	ldr	r2, [r3, #0]
 810495c:	2101      	movs	r1, #1
 810495e:	69fb      	ldr	r3, [r7, #28]
 8104960:	fa01 f303 	lsl.w	r3, r1, r3
 8104964:	4013      	ands	r3, r2
 8104966:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8104968:	693b      	ldr	r3, [r7, #16]
 810496a:	2b00      	cmp	r3, #0
 810496c:	f000 8186 	beq.w	8104c7c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8104970:	683b      	ldr	r3, [r7, #0]
 8104972:	685b      	ldr	r3, [r3, #4]
 8104974:	f003 0303 	and.w	r3, r3, #3
 8104978:	2b01      	cmp	r3, #1
 810497a:	d005      	beq.n	8104988 <HAL_GPIO_Init+0x44>
 810497c:	683b      	ldr	r3, [r7, #0]
 810497e:	685b      	ldr	r3, [r3, #4]
 8104980:	f003 0303 	and.w	r3, r3, #3
 8104984:	2b02      	cmp	r3, #2
 8104986:	d130      	bne.n	81049ea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8104988:	687b      	ldr	r3, [r7, #4]
 810498a:	689b      	ldr	r3, [r3, #8]
 810498c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810498e:	69fb      	ldr	r3, [r7, #28]
 8104990:	005b      	lsls	r3, r3, #1
 8104992:	2203      	movs	r2, #3
 8104994:	fa02 f303 	lsl.w	r3, r2, r3
 8104998:	43db      	mvns	r3, r3
 810499a:	69ba      	ldr	r2, [r7, #24]
 810499c:	4013      	ands	r3, r2
 810499e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81049a0:	683b      	ldr	r3, [r7, #0]
 81049a2:	68da      	ldr	r2, [r3, #12]
 81049a4:	69fb      	ldr	r3, [r7, #28]
 81049a6:	005b      	lsls	r3, r3, #1
 81049a8:	fa02 f303 	lsl.w	r3, r2, r3
 81049ac:	69ba      	ldr	r2, [r7, #24]
 81049ae:	4313      	orrs	r3, r2
 81049b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81049b2:	687b      	ldr	r3, [r7, #4]
 81049b4:	69ba      	ldr	r2, [r7, #24]
 81049b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81049b8:	687b      	ldr	r3, [r7, #4]
 81049ba:	685b      	ldr	r3, [r3, #4]
 81049bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81049be:	2201      	movs	r2, #1
 81049c0:	69fb      	ldr	r3, [r7, #28]
 81049c2:	fa02 f303 	lsl.w	r3, r2, r3
 81049c6:	43db      	mvns	r3, r3
 81049c8:	69ba      	ldr	r2, [r7, #24]
 81049ca:	4013      	ands	r3, r2
 81049cc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 81049ce:	683b      	ldr	r3, [r7, #0]
 81049d0:	685b      	ldr	r3, [r3, #4]
 81049d2:	091b      	lsrs	r3, r3, #4
 81049d4:	f003 0201 	and.w	r2, r3, #1
 81049d8:	69fb      	ldr	r3, [r7, #28]
 81049da:	fa02 f303 	lsl.w	r3, r2, r3
 81049de:	69ba      	ldr	r2, [r7, #24]
 81049e0:	4313      	orrs	r3, r2
 81049e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81049e4:	687b      	ldr	r3, [r7, #4]
 81049e6:	69ba      	ldr	r2, [r7, #24]
 81049e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81049ea:	683b      	ldr	r3, [r7, #0]
 81049ec:	685b      	ldr	r3, [r3, #4]
 81049ee:	f003 0303 	and.w	r3, r3, #3
 81049f2:	2b03      	cmp	r3, #3
 81049f4:	d017      	beq.n	8104a26 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81049f6:	687b      	ldr	r3, [r7, #4]
 81049f8:	68db      	ldr	r3, [r3, #12]
 81049fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81049fc:	69fb      	ldr	r3, [r7, #28]
 81049fe:	005b      	lsls	r3, r3, #1
 8104a00:	2203      	movs	r2, #3
 8104a02:	fa02 f303 	lsl.w	r3, r2, r3
 8104a06:	43db      	mvns	r3, r3
 8104a08:	69ba      	ldr	r2, [r7, #24]
 8104a0a:	4013      	ands	r3, r2
 8104a0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8104a0e:	683b      	ldr	r3, [r7, #0]
 8104a10:	689a      	ldr	r2, [r3, #8]
 8104a12:	69fb      	ldr	r3, [r7, #28]
 8104a14:	005b      	lsls	r3, r3, #1
 8104a16:	fa02 f303 	lsl.w	r3, r2, r3
 8104a1a:	69ba      	ldr	r2, [r7, #24]
 8104a1c:	4313      	orrs	r3, r2
 8104a1e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8104a20:	687b      	ldr	r3, [r7, #4]
 8104a22:	69ba      	ldr	r2, [r7, #24]
 8104a24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8104a26:	683b      	ldr	r3, [r7, #0]
 8104a28:	685b      	ldr	r3, [r3, #4]
 8104a2a:	f003 0303 	and.w	r3, r3, #3
 8104a2e:	2b02      	cmp	r3, #2
 8104a30:	d123      	bne.n	8104a7a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8104a32:	69fb      	ldr	r3, [r7, #28]
 8104a34:	08da      	lsrs	r2, r3, #3
 8104a36:	687b      	ldr	r3, [r7, #4]
 8104a38:	3208      	adds	r2, #8
 8104a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8104a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8104a40:	69fb      	ldr	r3, [r7, #28]
 8104a42:	f003 0307 	and.w	r3, r3, #7
 8104a46:	009b      	lsls	r3, r3, #2
 8104a48:	220f      	movs	r2, #15
 8104a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8104a4e:	43db      	mvns	r3, r3
 8104a50:	69ba      	ldr	r2, [r7, #24]
 8104a52:	4013      	ands	r3, r2
 8104a54:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8104a56:	683b      	ldr	r3, [r7, #0]
 8104a58:	691a      	ldr	r2, [r3, #16]
 8104a5a:	69fb      	ldr	r3, [r7, #28]
 8104a5c:	f003 0307 	and.w	r3, r3, #7
 8104a60:	009b      	lsls	r3, r3, #2
 8104a62:	fa02 f303 	lsl.w	r3, r2, r3
 8104a66:	69ba      	ldr	r2, [r7, #24]
 8104a68:	4313      	orrs	r3, r2
 8104a6a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8104a6c:	69fb      	ldr	r3, [r7, #28]
 8104a6e:	08da      	lsrs	r2, r3, #3
 8104a70:	687b      	ldr	r3, [r7, #4]
 8104a72:	3208      	adds	r2, #8
 8104a74:	69b9      	ldr	r1, [r7, #24]
 8104a76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8104a7a:	687b      	ldr	r3, [r7, #4]
 8104a7c:	681b      	ldr	r3, [r3, #0]
 8104a7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8104a80:	69fb      	ldr	r3, [r7, #28]
 8104a82:	005b      	lsls	r3, r3, #1
 8104a84:	2203      	movs	r2, #3
 8104a86:	fa02 f303 	lsl.w	r3, r2, r3
 8104a8a:	43db      	mvns	r3, r3
 8104a8c:	69ba      	ldr	r2, [r7, #24]
 8104a8e:	4013      	ands	r3, r2
 8104a90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8104a92:	683b      	ldr	r3, [r7, #0]
 8104a94:	685b      	ldr	r3, [r3, #4]
 8104a96:	f003 0203 	and.w	r2, r3, #3
 8104a9a:	69fb      	ldr	r3, [r7, #28]
 8104a9c:	005b      	lsls	r3, r3, #1
 8104a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8104aa2:	69ba      	ldr	r2, [r7, #24]
 8104aa4:	4313      	orrs	r3, r2
 8104aa6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8104aa8:	687b      	ldr	r3, [r7, #4]
 8104aaa:	69ba      	ldr	r2, [r7, #24]
 8104aac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8104aae:	683b      	ldr	r3, [r7, #0]
 8104ab0:	685b      	ldr	r3, [r3, #4]
 8104ab2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8104ab6:	2b00      	cmp	r3, #0
 8104ab8:	f000 80e0 	beq.w	8104c7c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8104abc:	4b2f      	ldr	r3, [pc, #188]	@ (8104b7c <HAL_GPIO_Init+0x238>)
 8104abe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8104ac2:	4a2e      	ldr	r2, [pc, #184]	@ (8104b7c <HAL_GPIO_Init+0x238>)
 8104ac4:	f043 0302 	orr.w	r3, r3, #2
 8104ac8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8104acc:	4b2b      	ldr	r3, [pc, #172]	@ (8104b7c <HAL_GPIO_Init+0x238>)
 8104ace:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8104ad2:	f003 0302 	and.w	r3, r3, #2
 8104ad6:	60fb      	str	r3, [r7, #12]
 8104ad8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8104ada:	4a29      	ldr	r2, [pc, #164]	@ (8104b80 <HAL_GPIO_Init+0x23c>)
 8104adc:	69fb      	ldr	r3, [r7, #28]
 8104ade:	089b      	lsrs	r3, r3, #2
 8104ae0:	3302      	adds	r3, #2
 8104ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8104ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8104ae8:	69fb      	ldr	r3, [r7, #28]
 8104aea:	f003 0303 	and.w	r3, r3, #3
 8104aee:	009b      	lsls	r3, r3, #2
 8104af0:	220f      	movs	r2, #15
 8104af2:	fa02 f303 	lsl.w	r3, r2, r3
 8104af6:	43db      	mvns	r3, r3
 8104af8:	69ba      	ldr	r2, [r7, #24]
 8104afa:	4013      	ands	r3, r2
 8104afc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8104afe:	687b      	ldr	r3, [r7, #4]
 8104b00:	4a20      	ldr	r2, [pc, #128]	@ (8104b84 <HAL_GPIO_Init+0x240>)
 8104b02:	4293      	cmp	r3, r2
 8104b04:	d052      	beq.n	8104bac <HAL_GPIO_Init+0x268>
 8104b06:	687b      	ldr	r3, [r7, #4]
 8104b08:	4a1f      	ldr	r2, [pc, #124]	@ (8104b88 <HAL_GPIO_Init+0x244>)
 8104b0a:	4293      	cmp	r3, r2
 8104b0c:	d031      	beq.n	8104b72 <HAL_GPIO_Init+0x22e>
 8104b0e:	687b      	ldr	r3, [r7, #4]
 8104b10:	4a1e      	ldr	r2, [pc, #120]	@ (8104b8c <HAL_GPIO_Init+0x248>)
 8104b12:	4293      	cmp	r3, r2
 8104b14:	d02b      	beq.n	8104b6e <HAL_GPIO_Init+0x22a>
 8104b16:	687b      	ldr	r3, [r7, #4]
 8104b18:	4a1d      	ldr	r2, [pc, #116]	@ (8104b90 <HAL_GPIO_Init+0x24c>)
 8104b1a:	4293      	cmp	r3, r2
 8104b1c:	d025      	beq.n	8104b6a <HAL_GPIO_Init+0x226>
 8104b1e:	687b      	ldr	r3, [r7, #4]
 8104b20:	4a1c      	ldr	r2, [pc, #112]	@ (8104b94 <HAL_GPIO_Init+0x250>)
 8104b22:	4293      	cmp	r3, r2
 8104b24:	d01f      	beq.n	8104b66 <HAL_GPIO_Init+0x222>
 8104b26:	687b      	ldr	r3, [r7, #4]
 8104b28:	4a1b      	ldr	r2, [pc, #108]	@ (8104b98 <HAL_GPIO_Init+0x254>)
 8104b2a:	4293      	cmp	r3, r2
 8104b2c:	d019      	beq.n	8104b62 <HAL_GPIO_Init+0x21e>
 8104b2e:	687b      	ldr	r3, [r7, #4]
 8104b30:	4a1a      	ldr	r2, [pc, #104]	@ (8104b9c <HAL_GPIO_Init+0x258>)
 8104b32:	4293      	cmp	r3, r2
 8104b34:	d013      	beq.n	8104b5e <HAL_GPIO_Init+0x21a>
 8104b36:	687b      	ldr	r3, [r7, #4]
 8104b38:	4a19      	ldr	r2, [pc, #100]	@ (8104ba0 <HAL_GPIO_Init+0x25c>)
 8104b3a:	4293      	cmp	r3, r2
 8104b3c:	d00d      	beq.n	8104b5a <HAL_GPIO_Init+0x216>
 8104b3e:	687b      	ldr	r3, [r7, #4]
 8104b40:	4a18      	ldr	r2, [pc, #96]	@ (8104ba4 <HAL_GPIO_Init+0x260>)
 8104b42:	4293      	cmp	r3, r2
 8104b44:	d007      	beq.n	8104b56 <HAL_GPIO_Init+0x212>
 8104b46:	687b      	ldr	r3, [r7, #4]
 8104b48:	4a17      	ldr	r2, [pc, #92]	@ (8104ba8 <HAL_GPIO_Init+0x264>)
 8104b4a:	4293      	cmp	r3, r2
 8104b4c:	d101      	bne.n	8104b52 <HAL_GPIO_Init+0x20e>
 8104b4e:	2309      	movs	r3, #9
 8104b50:	e02d      	b.n	8104bae <HAL_GPIO_Init+0x26a>
 8104b52:	230a      	movs	r3, #10
 8104b54:	e02b      	b.n	8104bae <HAL_GPIO_Init+0x26a>
 8104b56:	2308      	movs	r3, #8
 8104b58:	e029      	b.n	8104bae <HAL_GPIO_Init+0x26a>
 8104b5a:	2307      	movs	r3, #7
 8104b5c:	e027      	b.n	8104bae <HAL_GPIO_Init+0x26a>
 8104b5e:	2306      	movs	r3, #6
 8104b60:	e025      	b.n	8104bae <HAL_GPIO_Init+0x26a>
 8104b62:	2305      	movs	r3, #5
 8104b64:	e023      	b.n	8104bae <HAL_GPIO_Init+0x26a>
 8104b66:	2304      	movs	r3, #4
 8104b68:	e021      	b.n	8104bae <HAL_GPIO_Init+0x26a>
 8104b6a:	2303      	movs	r3, #3
 8104b6c:	e01f      	b.n	8104bae <HAL_GPIO_Init+0x26a>
 8104b6e:	2302      	movs	r3, #2
 8104b70:	e01d      	b.n	8104bae <HAL_GPIO_Init+0x26a>
 8104b72:	2301      	movs	r3, #1
 8104b74:	e01b      	b.n	8104bae <HAL_GPIO_Init+0x26a>
 8104b76:	bf00      	nop
 8104b78:	580000c0 	.word	0x580000c0
 8104b7c:	58024400 	.word	0x58024400
 8104b80:	58000400 	.word	0x58000400
 8104b84:	58020000 	.word	0x58020000
 8104b88:	58020400 	.word	0x58020400
 8104b8c:	58020800 	.word	0x58020800
 8104b90:	58020c00 	.word	0x58020c00
 8104b94:	58021000 	.word	0x58021000
 8104b98:	58021400 	.word	0x58021400
 8104b9c:	58021800 	.word	0x58021800
 8104ba0:	58021c00 	.word	0x58021c00
 8104ba4:	58022000 	.word	0x58022000
 8104ba8:	58022400 	.word	0x58022400
 8104bac:	2300      	movs	r3, #0
 8104bae:	69fa      	ldr	r2, [r7, #28]
 8104bb0:	f002 0203 	and.w	r2, r2, #3
 8104bb4:	0092      	lsls	r2, r2, #2
 8104bb6:	4093      	lsls	r3, r2
 8104bb8:	69ba      	ldr	r2, [r7, #24]
 8104bba:	4313      	orrs	r3, r2
 8104bbc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8104bbe:	4938      	ldr	r1, [pc, #224]	@ (8104ca0 <HAL_GPIO_Init+0x35c>)
 8104bc0:	69fb      	ldr	r3, [r7, #28]
 8104bc2:	089b      	lsrs	r3, r3, #2
 8104bc4:	3302      	adds	r3, #2
 8104bc6:	69ba      	ldr	r2, [r7, #24]
 8104bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8104bcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8104bd0:	681b      	ldr	r3, [r3, #0]
 8104bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104bd4:	693b      	ldr	r3, [r7, #16]
 8104bd6:	43db      	mvns	r3, r3
 8104bd8:	69ba      	ldr	r2, [r7, #24]
 8104bda:	4013      	ands	r3, r2
 8104bdc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8104bde:	683b      	ldr	r3, [r7, #0]
 8104be0:	685b      	ldr	r3, [r3, #4]
 8104be2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8104be6:	2b00      	cmp	r3, #0
 8104be8:	d003      	beq.n	8104bf2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8104bea:	69ba      	ldr	r2, [r7, #24]
 8104bec:	693b      	ldr	r3, [r7, #16]
 8104bee:	4313      	orrs	r3, r2
 8104bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8104bf2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8104bf6:	69bb      	ldr	r3, [r7, #24]
 8104bf8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8104bfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8104bfe:	685b      	ldr	r3, [r3, #4]
 8104c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104c02:	693b      	ldr	r3, [r7, #16]
 8104c04:	43db      	mvns	r3, r3
 8104c06:	69ba      	ldr	r2, [r7, #24]
 8104c08:	4013      	ands	r3, r2
 8104c0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8104c0c:	683b      	ldr	r3, [r7, #0]
 8104c0e:	685b      	ldr	r3, [r3, #4]
 8104c10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8104c14:	2b00      	cmp	r3, #0
 8104c16:	d003      	beq.n	8104c20 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8104c18:	69ba      	ldr	r2, [r7, #24]
 8104c1a:	693b      	ldr	r3, [r7, #16]
 8104c1c:	4313      	orrs	r3, r2
 8104c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8104c20:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8104c24:	69bb      	ldr	r3, [r7, #24]
 8104c26:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8104c28:	697b      	ldr	r3, [r7, #20]
 8104c2a:	685b      	ldr	r3, [r3, #4]
 8104c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104c2e:	693b      	ldr	r3, [r7, #16]
 8104c30:	43db      	mvns	r3, r3
 8104c32:	69ba      	ldr	r2, [r7, #24]
 8104c34:	4013      	ands	r3, r2
 8104c36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8104c38:	683b      	ldr	r3, [r7, #0]
 8104c3a:	685b      	ldr	r3, [r3, #4]
 8104c3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8104c40:	2b00      	cmp	r3, #0
 8104c42:	d003      	beq.n	8104c4c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8104c44:	69ba      	ldr	r2, [r7, #24]
 8104c46:	693b      	ldr	r3, [r7, #16]
 8104c48:	4313      	orrs	r3, r2
 8104c4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8104c4c:	697b      	ldr	r3, [r7, #20]
 8104c4e:	69ba      	ldr	r2, [r7, #24]
 8104c50:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8104c52:	697b      	ldr	r3, [r7, #20]
 8104c54:	681b      	ldr	r3, [r3, #0]
 8104c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104c58:	693b      	ldr	r3, [r7, #16]
 8104c5a:	43db      	mvns	r3, r3
 8104c5c:	69ba      	ldr	r2, [r7, #24]
 8104c5e:	4013      	ands	r3, r2
 8104c60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8104c62:	683b      	ldr	r3, [r7, #0]
 8104c64:	685b      	ldr	r3, [r3, #4]
 8104c66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8104c6a:	2b00      	cmp	r3, #0
 8104c6c:	d003      	beq.n	8104c76 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8104c6e:	69ba      	ldr	r2, [r7, #24]
 8104c70:	693b      	ldr	r3, [r7, #16]
 8104c72:	4313      	orrs	r3, r2
 8104c74:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8104c76:	697b      	ldr	r3, [r7, #20]
 8104c78:	69ba      	ldr	r2, [r7, #24]
 8104c7a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8104c7c:	69fb      	ldr	r3, [r7, #28]
 8104c7e:	3301      	adds	r3, #1
 8104c80:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8104c82:	683b      	ldr	r3, [r7, #0]
 8104c84:	681a      	ldr	r2, [r3, #0]
 8104c86:	69fb      	ldr	r3, [r7, #28]
 8104c88:	fa22 f303 	lsr.w	r3, r2, r3
 8104c8c:	2b00      	cmp	r3, #0
 8104c8e:	f47f ae63 	bne.w	8104958 <HAL_GPIO_Init+0x14>
  }
}
 8104c92:	bf00      	nop
 8104c94:	bf00      	nop
 8104c96:	3724      	adds	r7, #36	@ 0x24
 8104c98:	46bd      	mov	sp, r7
 8104c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c9e:	4770      	bx	lr
 8104ca0:	58000400 	.word	0x58000400

08104ca4 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8104ca4:	b480      	push	{r7}
 8104ca6:	b083      	sub	sp, #12
 8104ca8:	af00      	add	r7, sp, #0
 8104caa:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8104cac:	4b05      	ldr	r3, [pc, #20]	@ (8104cc4 <HAL_HSEM_ActivateNotification+0x20>)
 8104cae:	681a      	ldr	r2, [r3, #0]
 8104cb0:	4904      	ldr	r1, [pc, #16]	@ (8104cc4 <HAL_HSEM_ActivateNotification+0x20>)
 8104cb2:	687b      	ldr	r3, [r7, #4]
 8104cb4:	4313      	orrs	r3, r2
 8104cb6:	600b      	str	r3, [r1, #0]
#endif
}
 8104cb8:	bf00      	nop
 8104cba:	370c      	adds	r7, #12
 8104cbc:	46bd      	mov	sp, r7
 8104cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104cc2:	4770      	bx	lr
 8104cc4:	58026510 	.word	0x58026510

08104cc8 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8104cc8:	b580      	push	{r7, lr}
 8104cca:	b084      	sub	sp, #16
 8104ccc:	af00      	add	r7, sp, #0
 8104cce:	60f8      	str	r0, [r7, #12]
 8104cd0:	460b      	mov	r3, r1
 8104cd2:	607a      	str	r2, [r7, #4]
 8104cd4:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8104cd6:	4b37      	ldr	r3, [pc, #220]	@ (8104db4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104cd8:	681b      	ldr	r3, [r3, #0]
 8104cda:	f023 0201 	bic.w	r2, r3, #1
 8104cde:	4935      	ldr	r1, [pc, #212]	@ (8104db4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104ce0:	68fb      	ldr	r3, [r7, #12]
 8104ce2:	4313      	orrs	r3, r2
 8104ce4:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8104ce6:	687b      	ldr	r3, [r7, #4]
 8104ce8:	2b00      	cmp	r3, #0
 8104cea:	d123      	bne.n	8104d34 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8104cec:	f7ff fe16 	bl	810491c <HAL_GetCurrentCPUID>
 8104cf0:	4603      	mov	r3, r0
 8104cf2:	2b03      	cmp	r3, #3
 8104cf4:	d158      	bne.n	8104da8 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8104cf6:	4b2f      	ldr	r3, [pc, #188]	@ (8104db4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104cf8:	691b      	ldr	r3, [r3, #16]
 8104cfa:	4a2e      	ldr	r2, [pc, #184]	@ (8104db4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104cfc:	f023 0301 	bic.w	r3, r3, #1
 8104d00:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104d02:	4b2d      	ldr	r3, [pc, #180]	@ (8104db8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104d04:	691b      	ldr	r3, [r3, #16]
 8104d06:	4a2c      	ldr	r2, [pc, #176]	@ (8104db8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104d08:	f043 0304 	orr.w	r3, r3, #4
 8104d0c:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8104d0e:	f3bf 8f4f 	dsb	sy
}
 8104d12:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8104d14:	f3bf 8f6f 	isb	sy
}
 8104d18:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8104d1a:	7afb      	ldrb	r3, [r7, #11]
 8104d1c:	2b01      	cmp	r3, #1
 8104d1e:	d101      	bne.n	8104d24 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8104d20:	bf30      	wfi
 8104d22:	e000      	b.n	8104d26 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8104d24:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104d26:	4b24      	ldr	r3, [pc, #144]	@ (8104db8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104d28:	691b      	ldr	r3, [r3, #16]
 8104d2a:	4a23      	ldr	r2, [pc, #140]	@ (8104db8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104d2c:	f023 0304 	bic.w	r3, r3, #4
 8104d30:	6113      	str	r3, [r2, #16]
 8104d32:	e03c      	b.n	8104dae <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8104d34:	687b      	ldr	r3, [r7, #4]
 8104d36:	2b01      	cmp	r3, #1
 8104d38:	d123      	bne.n	8104d82 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8104d3a:	f7ff fdef 	bl	810491c <HAL_GetCurrentCPUID>
 8104d3e:	4603      	mov	r3, r0
 8104d40:	2b01      	cmp	r3, #1
 8104d42:	d133      	bne.n	8104dac <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8104d44:	4b1b      	ldr	r3, [pc, #108]	@ (8104db4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104d46:	695b      	ldr	r3, [r3, #20]
 8104d48:	4a1a      	ldr	r2, [pc, #104]	@ (8104db4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104d4a:	f023 0302 	bic.w	r3, r3, #2
 8104d4e:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104d50:	4b19      	ldr	r3, [pc, #100]	@ (8104db8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104d52:	691b      	ldr	r3, [r3, #16]
 8104d54:	4a18      	ldr	r2, [pc, #96]	@ (8104db8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104d56:	f043 0304 	orr.w	r3, r3, #4
 8104d5a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8104d5c:	f3bf 8f4f 	dsb	sy
}
 8104d60:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8104d62:	f3bf 8f6f 	isb	sy
}
 8104d66:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8104d68:	7afb      	ldrb	r3, [r7, #11]
 8104d6a:	2b01      	cmp	r3, #1
 8104d6c:	d101      	bne.n	8104d72 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8104d6e:	bf30      	wfi
 8104d70:	e000      	b.n	8104d74 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8104d72:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104d74:	4b10      	ldr	r3, [pc, #64]	@ (8104db8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104d76:	691b      	ldr	r3, [r3, #16]
 8104d78:	4a0f      	ldr	r2, [pc, #60]	@ (8104db8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104d7a:	f023 0304 	bic.w	r3, r3, #4
 8104d7e:	6113      	str	r3, [r2, #16]
 8104d80:	e015      	b.n	8104dae <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8104d82:	f7ff fdcb 	bl	810491c <HAL_GetCurrentCPUID>
 8104d86:	4603      	mov	r3, r0
 8104d88:	2b03      	cmp	r3, #3
 8104d8a:	d106      	bne.n	8104d9a <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8104d8c:	4b09      	ldr	r3, [pc, #36]	@ (8104db4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104d8e:	691b      	ldr	r3, [r3, #16]
 8104d90:	4a08      	ldr	r2, [pc, #32]	@ (8104db4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104d92:	f023 0304 	bic.w	r3, r3, #4
 8104d96:	6113      	str	r3, [r2, #16]
 8104d98:	e009      	b.n	8104dae <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8104d9a:	4b06      	ldr	r3, [pc, #24]	@ (8104db4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104d9c:	695b      	ldr	r3, [r3, #20]
 8104d9e:	4a05      	ldr	r2, [pc, #20]	@ (8104db4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104da0:	f023 0304 	bic.w	r3, r3, #4
 8104da4:	6153      	str	r3, [r2, #20]
 8104da6:	e002      	b.n	8104dae <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8104da8:	bf00      	nop
 8104daa:	e000      	b.n	8104dae <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8104dac:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8104dae:	3710      	adds	r7, #16
 8104db0:	46bd      	mov	sp, r7
 8104db2:	bd80      	pop	{r7, pc}
 8104db4:	58024800 	.word	0x58024800
 8104db8:	e000ed00 	.word	0xe000ed00

08104dbc <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8104dbc:	b580      	push	{r7, lr}
 8104dbe:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8104dc0:	f7ff fdac 	bl	810491c <HAL_GetCurrentCPUID>
 8104dc4:	4603      	mov	r3, r0
 8104dc6:	2b03      	cmp	r3, #3
 8104dc8:	d101      	bne.n	8104dce <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8104dca:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8104dcc:	e001      	b.n	8104dd2 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8104dce:	bf40      	sev
    __WFE ();
 8104dd0:	bf20      	wfe
}
 8104dd2:	bf00      	nop
 8104dd4:	bd80      	pop	{r7, pc}
	...

08104dd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8104dd8:	b480      	push	{r7}
 8104dda:	b089      	sub	sp, #36	@ 0x24
 8104ddc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8104dde:	4bb3      	ldr	r3, [pc, #716]	@ (81050ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104de0:	691b      	ldr	r3, [r3, #16]
 8104de2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8104de6:	2b18      	cmp	r3, #24
 8104de8:	f200 8155 	bhi.w	8105096 <HAL_RCC_GetSysClockFreq+0x2be>
 8104dec:	a201      	add	r2, pc, #4	@ (adr r2, 8104df4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8104dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104df2:	bf00      	nop
 8104df4:	08104e59 	.word	0x08104e59
 8104df8:	08105097 	.word	0x08105097
 8104dfc:	08105097 	.word	0x08105097
 8104e00:	08105097 	.word	0x08105097
 8104e04:	08105097 	.word	0x08105097
 8104e08:	08105097 	.word	0x08105097
 8104e0c:	08105097 	.word	0x08105097
 8104e10:	08105097 	.word	0x08105097
 8104e14:	08104e7f 	.word	0x08104e7f
 8104e18:	08105097 	.word	0x08105097
 8104e1c:	08105097 	.word	0x08105097
 8104e20:	08105097 	.word	0x08105097
 8104e24:	08105097 	.word	0x08105097
 8104e28:	08105097 	.word	0x08105097
 8104e2c:	08105097 	.word	0x08105097
 8104e30:	08105097 	.word	0x08105097
 8104e34:	08104e85 	.word	0x08104e85
 8104e38:	08105097 	.word	0x08105097
 8104e3c:	08105097 	.word	0x08105097
 8104e40:	08105097 	.word	0x08105097
 8104e44:	08105097 	.word	0x08105097
 8104e48:	08105097 	.word	0x08105097
 8104e4c:	08105097 	.word	0x08105097
 8104e50:	08105097 	.word	0x08105097
 8104e54:	08104e8b 	.word	0x08104e8b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104e58:	4b94      	ldr	r3, [pc, #592]	@ (81050ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104e5a:	681b      	ldr	r3, [r3, #0]
 8104e5c:	f003 0320 	and.w	r3, r3, #32
 8104e60:	2b00      	cmp	r3, #0
 8104e62:	d009      	beq.n	8104e78 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104e64:	4b91      	ldr	r3, [pc, #580]	@ (81050ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104e66:	681b      	ldr	r3, [r3, #0]
 8104e68:	08db      	lsrs	r3, r3, #3
 8104e6a:	f003 0303 	and.w	r3, r3, #3
 8104e6e:	4a90      	ldr	r2, [pc, #576]	@ (81050b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8104e70:	fa22 f303 	lsr.w	r3, r2, r3
 8104e74:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8104e76:	e111      	b.n	810509c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8104e78:	4b8d      	ldr	r3, [pc, #564]	@ (81050b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8104e7a:	61bb      	str	r3, [r7, #24]
      break;
 8104e7c:	e10e      	b.n	810509c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8104e7e:	4b8d      	ldr	r3, [pc, #564]	@ (81050b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8104e80:	61bb      	str	r3, [r7, #24]
      break;
 8104e82:	e10b      	b.n	810509c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8104e84:	4b8c      	ldr	r3, [pc, #560]	@ (81050b8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8104e86:	61bb      	str	r3, [r7, #24]
      break;
 8104e88:	e108      	b.n	810509c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104e8a:	4b88      	ldr	r3, [pc, #544]	@ (81050ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104e8e:	f003 0303 	and.w	r3, r3, #3
 8104e92:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8104e94:	4b85      	ldr	r3, [pc, #532]	@ (81050ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104e98:	091b      	lsrs	r3, r3, #4
 8104e9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8104e9e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8104ea0:	4b82      	ldr	r3, [pc, #520]	@ (81050ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104ea4:	f003 0301 	and.w	r3, r3, #1
 8104ea8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8104eaa:	4b80      	ldr	r3, [pc, #512]	@ (81050ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104eac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8104eae:	08db      	lsrs	r3, r3, #3
 8104eb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104eb4:	68fa      	ldr	r2, [r7, #12]
 8104eb6:	fb02 f303 	mul.w	r3, r2, r3
 8104eba:	ee07 3a90 	vmov	s15, r3
 8104ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104ec2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8104ec6:	693b      	ldr	r3, [r7, #16]
 8104ec8:	2b00      	cmp	r3, #0
 8104eca:	f000 80e1 	beq.w	8105090 <HAL_RCC_GetSysClockFreq+0x2b8>
 8104ece:	697b      	ldr	r3, [r7, #20]
 8104ed0:	2b02      	cmp	r3, #2
 8104ed2:	f000 8083 	beq.w	8104fdc <HAL_RCC_GetSysClockFreq+0x204>
 8104ed6:	697b      	ldr	r3, [r7, #20]
 8104ed8:	2b02      	cmp	r3, #2
 8104eda:	f200 80a1 	bhi.w	8105020 <HAL_RCC_GetSysClockFreq+0x248>
 8104ede:	697b      	ldr	r3, [r7, #20]
 8104ee0:	2b00      	cmp	r3, #0
 8104ee2:	d003      	beq.n	8104eec <HAL_RCC_GetSysClockFreq+0x114>
 8104ee4:	697b      	ldr	r3, [r7, #20]
 8104ee6:	2b01      	cmp	r3, #1
 8104ee8:	d056      	beq.n	8104f98 <HAL_RCC_GetSysClockFreq+0x1c0>
 8104eea:	e099      	b.n	8105020 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104eec:	4b6f      	ldr	r3, [pc, #444]	@ (81050ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104eee:	681b      	ldr	r3, [r3, #0]
 8104ef0:	f003 0320 	and.w	r3, r3, #32
 8104ef4:	2b00      	cmp	r3, #0
 8104ef6:	d02d      	beq.n	8104f54 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104ef8:	4b6c      	ldr	r3, [pc, #432]	@ (81050ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104efa:	681b      	ldr	r3, [r3, #0]
 8104efc:	08db      	lsrs	r3, r3, #3
 8104efe:	f003 0303 	and.w	r3, r3, #3
 8104f02:	4a6b      	ldr	r2, [pc, #428]	@ (81050b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8104f04:	fa22 f303 	lsr.w	r3, r2, r3
 8104f08:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104f0a:	687b      	ldr	r3, [r7, #4]
 8104f0c:	ee07 3a90 	vmov	s15, r3
 8104f10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104f14:	693b      	ldr	r3, [r7, #16]
 8104f16:	ee07 3a90 	vmov	s15, r3
 8104f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104f22:	4b62      	ldr	r3, [pc, #392]	@ (81050ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8104f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104f2a:	ee07 3a90 	vmov	s15, r3
 8104f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104f32:	ed97 6a02 	vldr	s12, [r7, #8]
 8104f36:	eddf 5a61 	vldr	s11, [pc, #388]	@ 81050bc <HAL_RCC_GetSysClockFreq+0x2e4>
 8104f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104f42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104f4e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8104f52:	e087      	b.n	8105064 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104f54:	693b      	ldr	r3, [r7, #16]
 8104f56:	ee07 3a90 	vmov	s15, r3
 8104f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104f5e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 81050c0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8104f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104f66:	4b51      	ldr	r3, [pc, #324]	@ (81050ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8104f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104f6e:	ee07 3a90 	vmov	s15, r3
 8104f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104f76:	ed97 6a02 	vldr	s12, [r7, #8]
 8104f7a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 81050bc <HAL_RCC_GetSysClockFreq+0x2e4>
 8104f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104f86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104f92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8104f96:	e065      	b.n	8105064 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104f98:	693b      	ldr	r3, [r7, #16]
 8104f9a:	ee07 3a90 	vmov	s15, r3
 8104f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104fa2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 81050c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8104fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104faa:	4b40      	ldr	r3, [pc, #256]	@ (81050ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8104fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104fb2:	ee07 3a90 	vmov	s15, r3
 8104fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104fba:	ed97 6a02 	vldr	s12, [r7, #8]
 8104fbe:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 81050bc <HAL_RCC_GetSysClockFreq+0x2e4>
 8104fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104fca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104fd6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8104fda:	e043      	b.n	8105064 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104fdc:	693b      	ldr	r3, [r7, #16]
 8104fde:	ee07 3a90 	vmov	s15, r3
 8104fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104fe6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 81050c8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8104fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104fee:	4b2f      	ldr	r3, [pc, #188]	@ (81050ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8104ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104ff6:	ee07 3a90 	vmov	s15, r3
 8104ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104ffe:	ed97 6a02 	vldr	s12, [r7, #8]
 8105002:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 81050bc <HAL_RCC_GetSysClockFreq+0x2e4>
 8105006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810500a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810500e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105016:	ee67 7a27 	vmul.f32	s15, s14, s15
 810501a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810501e:	e021      	b.n	8105064 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105020:	693b      	ldr	r3, [r7, #16]
 8105022:	ee07 3a90 	vmov	s15, r3
 8105026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810502a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 81050c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 810502e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105032:	4b1e      	ldr	r3, [pc, #120]	@ (81050ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810503a:	ee07 3a90 	vmov	s15, r3
 810503e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105042:	ed97 6a02 	vldr	s12, [r7, #8]
 8105046:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 81050bc <HAL_RCC_GetSysClockFreq+0x2e4>
 810504a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810504e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105052:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810505a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810505e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8105062:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8105064:	4b11      	ldr	r3, [pc, #68]	@ (81050ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105068:	0a5b      	lsrs	r3, r3, #9
 810506a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810506e:	3301      	adds	r3, #1
 8105070:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8105072:	683b      	ldr	r3, [r7, #0]
 8105074:	ee07 3a90 	vmov	s15, r3
 8105078:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 810507c:	edd7 6a07 	vldr	s13, [r7, #28]
 8105080:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105084:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105088:	ee17 3a90 	vmov	r3, s15
 810508c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 810508e:	e005      	b.n	810509c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8105090:	2300      	movs	r3, #0
 8105092:	61bb      	str	r3, [r7, #24]
      break;
 8105094:	e002      	b.n	810509c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8105096:	4b07      	ldr	r3, [pc, #28]	@ (81050b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8105098:	61bb      	str	r3, [r7, #24]
      break;
 810509a:	bf00      	nop
  }

  return sysclockfreq;
 810509c:	69bb      	ldr	r3, [r7, #24]
}
 810509e:	4618      	mov	r0, r3
 81050a0:	3724      	adds	r7, #36	@ 0x24
 81050a2:	46bd      	mov	sp, r7
 81050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81050a8:	4770      	bx	lr
 81050aa:	bf00      	nop
 81050ac:	58024400 	.word	0x58024400
 81050b0:	03d09000 	.word	0x03d09000
 81050b4:	003d0900 	.word	0x003d0900
 81050b8:	017d7840 	.word	0x017d7840
 81050bc:	46000000 	.word	0x46000000
 81050c0:	4c742400 	.word	0x4c742400
 81050c4:	4a742400 	.word	0x4a742400
 81050c8:	4bbebc20 	.word	0x4bbebc20

081050cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 81050cc:	b580      	push	{r7, lr}
 81050ce:	b082      	sub	sp, #8
 81050d0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 81050d2:	f7ff fe81 	bl	8104dd8 <HAL_RCC_GetSysClockFreq>
 81050d6:	4602      	mov	r2, r0
 81050d8:	4b11      	ldr	r3, [pc, #68]	@ (8105120 <HAL_RCC_GetHCLKFreq+0x54>)
 81050da:	699b      	ldr	r3, [r3, #24]
 81050dc:	0a1b      	lsrs	r3, r3, #8
 81050de:	f003 030f 	and.w	r3, r3, #15
 81050e2:	4910      	ldr	r1, [pc, #64]	@ (8105124 <HAL_RCC_GetHCLKFreq+0x58>)
 81050e4:	5ccb      	ldrb	r3, [r1, r3]
 81050e6:	f003 031f 	and.w	r3, r3, #31
 81050ea:	fa22 f303 	lsr.w	r3, r2, r3
 81050ee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81050f0:	4b0b      	ldr	r3, [pc, #44]	@ (8105120 <HAL_RCC_GetHCLKFreq+0x54>)
 81050f2:	699b      	ldr	r3, [r3, #24]
 81050f4:	f003 030f 	and.w	r3, r3, #15
 81050f8:	4a0a      	ldr	r2, [pc, #40]	@ (8105124 <HAL_RCC_GetHCLKFreq+0x58>)
 81050fa:	5cd3      	ldrb	r3, [r2, r3]
 81050fc:	f003 031f 	and.w	r3, r3, #31
 8105100:	687a      	ldr	r2, [r7, #4]
 8105102:	fa22 f303 	lsr.w	r3, r2, r3
 8105106:	4a08      	ldr	r2, [pc, #32]	@ (8105128 <HAL_RCC_GetHCLKFreq+0x5c>)
 8105108:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810510a:	4b07      	ldr	r3, [pc, #28]	@ (8105128 <HAL_RCC_GetHCLKFreq+0x5c>)
 810510c:	681b      	ldr	r3, [r3, #0]
 810510e:	4a07      	ldr	r2, [pc, #28]	@ (810512c <HAL_RCC_GetHCLKFreq+0x60>)
 8105110:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8105112:	4b05      	ldr	r3, [pc, #20]	@ (8105128 <HAL_RCC_GetHCLKFreq+0x5c>)
 8105114:	681b      	ldr	r3, [r3, #0]
}
 8105116:	4618      	mov	r0, r3
 8105118:	3708      	adds	r7, #8
 810511a:	46bd      	mov	sp, r7
 810511c:	bd80      	pop	{r7, pc}
 810511e:	bf00      	nop
 8105120:	58024400 	.word	0x58024400
 8105124:	0810b1c4 	.word	0x0810b1c4
 8105128:	10000004 	.word	0x10000004
 810512c:	10000000 	.word	0x10000000

08105130 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8105130:	b580      	push	{r7, lr}
 8105132:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8105134:	f7ff ffca 	bl	81050cc <HAL_RCC_GetHCLKFreq>
 8105138:	4602      	mov	r2, r0
 810513a:	4b06      	ldr	r3, [pc, #24]	@ (8105154 <HAL_RCC_GetPCLK1Freq+0x24>)
 810513c:	69db      	ldr	r3, [r3, #28]
 810513e:	091b      	lsrs	r3, r3, #4
 8105140:	f003 0307 	and.w	r3, r3, #7
 8105144:	4904      	ldr	r1, [pc, #16]	@ (8105158 <HAL_RCC_GetPCLK1Freq+0x28>)
 8105146:	5ccb      	ldrb	r3, [r1, r3]
 8105148:	f003 031f 	and.w	r3, r3, #31
 810514c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8105150:	4618      	mov	r0, r3
 8105152:	bd80      	pop	{r7, pc}
 8105154:	58024400 	.word	0x58024400
 8105158:	0810b1c4 	.word	0x0810b1c4

0810515c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 810515c:	b580      	push	{r7, lr}
 810515e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8105160:	f7ff ffb4 	bl	81050cc <HAL_RCC_GetHCLKFreq>
 8105164:	4602      	mov	r2, r0
 8105166:	4b06      	ldr	r3, [pc, #24]	@ (8105180 <HAL_RCC_GetPCLK2Freq+0x24>)
 8105168:	69db      	ldr	r3, [r3, #28]
 810516a:	0a1b      	lsrs	r3, r3, #8
 810516c:	f003 0307 	and.w	r3, r3, #7
 8105170:	4904      	ldr	r1, [pc, #16]	@ (8105184 <HAL_RCC_GetPCLK2Freq+0x28>)
 8105172:	5ccb      	ldrb	r3, [r1, r3]
 8105174:	f003 031f 	and.w	r3, r3, #31
 8105178:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 810517c:	4618      	mov	r0, r3
 810517e:	bd80      	pop	{r7, pc}
 8105180:	58024400 	.word	0x58024400
 8105184:	0810b1c4 	.word	0x0810b1c4

08105188 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8105188:	b580      	push	{r7, lr}
 810518a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 810518c:	f7ff ff9e 	bl	81050cc <HAL_RCC_GetHCLKFreq>
 8105190:	4602      	mov	r2, r0
 8105192:	4b06      	ldr	r3, [pc, #24]	@ (81051ac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8105194:	6a1b      	ldr	r3, [r3, #32]
 8105196:	091b      	lsrs	r3, r3, #4
 8105198:	f003 0307 	and.w	r3, r3, #7
 810519c:	4904      	ldr	r1, [pc, #16]	@ (81051b0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810519e:	5ccb      	ldrb	r3, [r1, r3]
 81051a0:	f003 031f 	and.w	r3, r3, #31
 81051a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 81051a8:	4618      	mov	r0, r3
 81051aa:	bd80      	pop	{r7, pc}
 81051ac:	58024400 	.word	0x58024400
 81051b0:	0810b1c4 	.word	0x0810b1c4

081051b4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 81051b4:	b480      	push	{r7}
 81051b6:	b089      	sub	sp, #36	@ 0x24
 81051b8:	af00      	add	r7, sp, #0
 81051ba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81051bc:	4ba1      	ldr	r3, [pc, #644]	@ (8105444 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81051be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81051c0:	f003 0303 	and.w	r3, r3, #3
 81051c4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 81051c6:	4b9f      	ldr	r3, [pc, #636]	@ (8105444 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81051c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81051ca:	0b1b      	lsrs	r3, r3, #12
 81051cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81051d0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 81051d2:	4b9c      	ldr	r3, [pc, #624]	@ (8105444 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81051d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81051d6:	091b      	lsrs	r3, r3, #4
 81051d8:	f003 0301 	and.w	r3, r3, #1
 81051dc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 81051de:	4b99      	ldr	r3, [pc, #612]	@ (8105444 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81051e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81051e2:	08db      	lsrs	r3, r3, #3
 81051e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81051e8:	693a      	ldr	r2, [r7, #16]
 81051ea:	fb02 f303 	mul.w	r3, r2, r3
 81051ee:	ee07 3a90 	vmov	s15, r3
 81051f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81051f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 81051fa:	697b      	ldr	r3, [r7, #20]
 81051fc:	2b00      	cmp	r3, #0
 81051fe:	f000 8111 	beq.w	8105424 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8105202:	69bb      	ldr	r3, [r7, #24]
 8105204:	2b02      	cmp	r3, #2
 8105206:	f000 8083 	beq.w	8105310 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 810520a:	69bb      	ldr	r3, [r7, #24]
 810520c:	2b02      	cmp	r3, #2
 810520e:	f200 80a1 	bhi.w	8105354 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8105212:	69bb      	ldr	r3, [r7, #24]
 8105214:	2b00      	cmp	r3, #0
 8105216:	d003      	beq.n	8105220 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8105218:	69bb      	ldr	r3, [r7, #24]
 810521a:	2b01      	cmp	r3, #1
 810521c:	d056      	beq.n	81052cc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 810521e:	e099      	b.n	8105354 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105220:	4b88      	ldr	r3, [pc, #544]	@ (8105444 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105222:	681b      	ldr	r3, [r3, #0]
 8105224:	f003 0320 	and.w	r3, r3, #32
 8105228:	2b00      	cmp	r3, #0
 810522a:	d02d      	beq.n	8105288 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810522c:	4b85      	ldr	r3, [pc, #532]	@ (8105444 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810522e:	681b      	ldr	r3, [r3, #0]
 8105230:	08db      	lsrs	r3, r3, #3
 8105232:	f003 0303 	and.w	r3, r3, #3
 8105236:	4a84      	ldr	r2, [pc, #528]	@ (8105448 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8105238:	fa22 f303 	lsr.w	r3, r2, r3
 810523c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810523e:	68bb      	ldr	r3, [r7, #8]
 8105240:	ee07 3a90 	vmov	s15, r3
 8105244:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105248:	697b      	ldr	r3, [r7, #20]
 810524a:	ee07 3a90 	vmov	s15, r3
 810524e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105256:	4b7b      	ldr	r3, [pc, #492]	@ (8105444 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810525a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810525e:	ee07 3a90 	vmov	s15, r3
 8105262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105266:	ed97 6a03 	vldr	s12, [r7, #12]
 810526a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 810544c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810526e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105276:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810527a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810527e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105282:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8105286:	e087      	b.n	8105398 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105288:	697b      	ldr	r3, [r7, #20]
 810528a:	ee07 3a90 	vmov	s15, r3
 810528e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105292:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8105450 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8105296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810529a:	4b6a      	ldr	r3, [pc, #424]	@ (8105444 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810529c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810529e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81052a2:	ee07 3a90 	vmov	s15, r3
 81052a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81052aa:	ed97 6a03 	vldr	s12, [r7, #12]
 81052ae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 810544c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81052b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81052b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81052ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81052be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81052c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81052c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81052ca:	e065      	b.n	8105398 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81052cc:	697b      	ldr	r3, [r7, #20]
 81052ce:	ee07 3a90 	vmov	s15, r3
 81052d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81052d6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8105454 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81052da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81052de:	4b59      	ldr	r3, [pc, #356]	@ (8105444 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81052e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81052e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81052e6:	ee07 3a90 	vmov	s15, r3
 81052ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81052ee:	ed97 6a03 	vldr	s12, [r7, #12]
 81052f2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 810544c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81052f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81052fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81052fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105306:	ee67 7a27 	vmul.f32	s15, s14, s15
 810530a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810530e:	e043      	b.n	8105398 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105310:	697b      	ldr	r3, [r7, #20]
 8105312:	ee07 3a90 	vmov	s15, r3
 8105316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810531a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8105458 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 810531e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105322:	4b48      	ldr	r3, [pc, #288]	@ (8105444 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810532a:	ee07 3a90 	vmov	s15, r3
 810532e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105332:	ed97 6a03 	vldr	s12, [r7, #12]
 8105336:	eddf 5a45 	vldr	s11, [pc, #276]	@ 810544c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810533a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810533e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105342:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810534a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810534e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105352:	e021      	b.n	8105398 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105354:	697b      	ldr	r3, [r7, #20]
 8105356:	ee07 3a90 	vmov	s15, r3
 810535a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810535e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8105454 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8105362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105366:	4b37      	ldr	r3, [pc, #220]	@ (8105444 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810536a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810536e:	ee07 3a90 	vmov	s15, r3
 8105372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105376:	ed97 6a03 	vldr	s12, [r7, #12]
 810537a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 810544c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810537e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105386:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810538a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810538e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105392:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105396:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8105398:	4b2a      	ldr	r3, [pc, #168]	@ (8105444 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810539a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810539c:	0a5b      	lsrs	r3, r3, #9
 810539e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81053a2:	ee07 3a90 	vmov	s15, r3
 81053a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81053aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81053ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 81053b2:	edd7 6a07 	vldr	s13, [r7, #28]
 81053b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81053ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81053be:	ee17 2a90 	vmov	r2, s15
 81053c2:	687b      	ldr	r3, [r7, #4]
 81053c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 81053c6:	4b1f      	ldr	r3, [pc, #124]	@ (8105444 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81053c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81053ca:	0c1b      	lsrs	r3, r3, #16
 81053cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81053d0:	ee07 3a90 	vmov	s15, r3
 81053d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81053d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81053dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 81053e0:	edd7 6a07 	vldr	s13, [r7, #28]
 81053e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81053e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81053ec:	ee17 2a90 	vmov	r2, s15
 81053f0:	687b      	ldr	r3, [r7, #4]
 81053f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 81053f4:	4b13      	ldr	r3, [pc, #76]	@ (8105444 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81053f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81053f8:	0e1b      	lsrs	r3, r3, #24
 81053fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81053fe:	ee07 3a90 	vmov	s15, r3
 8105402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105406:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810540a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810540e:	edd7 6a07 	vldr	s13, [r7, #28]
 8105412:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105416:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810541a:	ee17 2a90 	vmov	r2, s15
 810541e:	687b      	ldr	r3, [r7, #4]
 8105420:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8105422:	e008      	b.n	8105436 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8105424:	687b      	ldr	r3, [r7, #4]
 8105426:	2200      	movs	r2, #0
 8105428:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 810542a:	687b      	ldr	r3, [r7, #4]
 810542c:	2200      	movs	r2, #0
 810542e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8105430:	687b      	ldr	r3, [r7, #4]
 8105432:	2200      	movs	r2, #0
 8105434:	609a      	str	r2, [r3, #8]
}
 8105436:	bf00      	nop
 8105438:	3724      	adds	r7, #36	@ 0x24
 810543a:	46bd      	mov	sp, r7
 810543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105440:	4770      	bx	lr
 8105442:	bf00      	nop
 8105444:	58024400 	.word	0x58024400
 8105448:	03d09000 	.word	0x03d09000
 810544c:	46000000 	.word	0x46000000
 8105450:	4c742400 	.word	0x4c742400
 8105454:	4a742400 	.word	0x4a742400
 8105458:	4bbebc20 	.word	0x4bbebc20

0810545c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 810545c:	b480      	push	{r7}
 810545e:	b089      	sub	sp, #36	@ 0x24
 8105460:	af00      	add	r7, sp, #0
 8105462:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105464:	4ba1      	ldr	r3, [pc, #644]	@ (81056ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105468:	f003 0303 	and.w	r3, r3, #3
 810546c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 810546e:	4b9f      	ldr	r3, [pc, #636]	@ (81056ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105472:	0d1b      	lsrs	r3, r3, #20
 8105474:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8105478:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 810547a:	4b9c      	ldr	r3, [pc, #624]	@ (81056ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810547c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810547e:	0a1b      	lsrs	r3, r3, #8
 8105480:	f003 0301 	and.w	r3, r3, #1
 8105484:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8105486:	4b99      	ldr	r3, [pc, #612]	@ (81056ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810548a:	08db      	lsrs	r3, r3, #3
 810548c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105490:	693a      	ldr	r2, [r7, #16]
 8105492:	fb02 f303 	mul.w	r3, r2, r3
 8105496:	ee07 3a90 	vmov	s15, r3
 810549a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810549e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 81054a2:	697b      	ldr	r3, [r7, #20]
 81054a4:	2b00      	cmp	r3, #0
 81054a6:	f000 8111 	beq.w	81056cc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 81054aa:	69bb      	ldr	r3, [r7, #24]
 81054ac:	2b02      	cmp	r3, #2
 81054ae:	f000 8083 	beq.w	81055b8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 81054b2:	69bb      	ldr	r3, [r7, #24]
 81054b4:	2b02      	cmp	r3, #2
 81054b6:	f200 80a1 	bhi.w	81055fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 81054ba:	69bb      	ldr	r3, [r7, #24]
 81054bc:	2b00      	cmp	r3, #0
 81054be:	d003      	beq.n	81054c8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 81054c0:	69bb      	ldr	r3, [r7, #24]
 81054c2:	2b01      	cmp	r3, #1
 81054c4:	d056      	beq.n	8105574 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 81054c6:	e099      	b.n	81055fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81054c8:	4b88      	ldr	r3, [pc, #544]	@ (81056ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81054ca:	681b      	ldr	r3, [r3, #0]
 81054cc:	f003 0320 	and.w	r3, r3, #32
 81054d0:	2b00      	cmp	r3, #0
 81054d2:	d02d      	beq.n	8105530 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81054d4:	4b85      	ldr	r3, [pc, #532]	@ (81056ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81054d6:	681b      	ldr	r3, [r3, #0]
 81054d8:	08db      	lsrs	r3, r3, #3
 81054da:	f003 0303 	and.w	r3, r3, #3
 81054de:	4a84      	ldr	r2, [pc, #528]	@ (81056f0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 81054e0:	fa22 f303 	lsr.w	r3, r2, r3
 81054e4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81054e6:	68bb      	ldr	r3, [r7, #8]
 81054e8:	ee07 3a90 	vmov	s15, r3
 81054ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81054f0:	697b      	ldr	r3, [r7, #20]
 81054f2:	ee07 3a90 	vmov	s15, r3
 81054f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81054fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81054fe:	4b7b      	ldr	r3, [pc, #492]	@ (81056ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105506:	ee07 3a90 	vmov	s15, r3
 810550a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810550e:	ed97 6a03 	vldr	s12, [r7, #12]
 8105512:	eddf 5a78 	vldr	s11, [pc, #480]	@ 81056f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810551a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810551e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105526:	ee67 7a27 	vmul.f32	s15, s14, s15
 810552a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810552e:	e087      	b.n	8105640 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105530:	697b      	ldr	r3, [r7, #20]
 8105532:	ee07 3a90 	vmov	s15, r3
 8105536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810553a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 81056f8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 810553e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105542:	4b6a      	ldr	r3, [pc, #424]	@ (81056ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810554a:	ee07 3a90 	vmov	s15, r3
 810554e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105552:	ed97 6a03 	vldr	s12, [r7, #12]
 8105556:	eddf 5a67 	vldr	s11, [pc, #412]	@ 81056f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810555a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810555e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105562:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810556a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810556e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105572:	e065      	b.n	8105640 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105574:	697b      	ldr	r3, [r7, #20]
 8105576:	ee07 3a90 	vmov	s15, r3
 810557a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810557e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 81056fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8105582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105586:	4b59      	ldr	r3, [pc, #356]	@ (81056ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810558a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810558e:	ee07 3a90 	vmov	s15, r3
 8105592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105596:	ed97 6a03 	vldr	s12, [r7, #12]
 810559a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 81056f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810559e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81055a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81055a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81055aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81055ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 81055b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81055b6:	e043      	b.n	8105640 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81055b8:	697b      	ldr	r3, [r7, #20]
 81055ba:	ee07 3a90 	vmov	s15, r3
 81055be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81055c2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8105700 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 81055c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81055ca:	4b48      	ldr	r3, [pc, #288]	@ (81056ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81055cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81055ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81055d2:	ee07 3a90 	vmov	s15, r3
 81055d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81055da:	ed97 6a03 	vldr	s12, [r7, #12]
 81055de:	eddf 5a45 	vldr	s11, [pc, #276]	@ 81056f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81055e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81055e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81055ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81055ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81055f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81055f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81055fa:	e021      	b.n	8105640 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81055fc:	697b      	ldr	r3, [r7, #20]
 81055fe:	ee07 3a90 	vmov	s15, r3
 8105602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105606:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 81056fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810560a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810560e:	4b37      	ldr	r3, [pc, #220]	@ (81056ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105616:	ee07 3a90 	vmov	s15, r3
 810561a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810561e:	ed97 6a03 	vldr	s12, [r7, #12]
 8105622:	eddf 5a34 	vldr	s11, [pc, #208]	@ 81056f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810562a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810562e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105636:	ee67 7a27 	vmul.f32	s15, s14, s15
 810563a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810563e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8105640:	4b2a      	ldr	r3, [pc, #168]	@ (81056ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105644:	0a5b      	lsrs	r3, r3, #9
 8105646:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810564a:	ee07 3a90 	vmov	s15, r3
 810564e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105652:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8105656:	ee37 7a87 	vadd.f32	s14, s15, s14
 810565a:	edd7 6a07 	vldr	s13, [r7, #28]
 810565e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105662:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105666:	ee17 2a90 	vmov	r2, s15
 810566a:	687b      	ldr	r3, [r7, #4]
 810566c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 810566e:	4b1f      	ldr	r3, [pc, #124]	@ (81056ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105672:	0c1b      	lsrs	r3, r3, #16
 8105674:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105678:	ee07 3a90 	vmov	s15, r3
 810567c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105680:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8105684:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105688:	edd7 6a07 	vldr	s13, [r7, #28]
 810568c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105690:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105694:	ee17 2a90 	vmov	r2, s15
 8105698:	687b      	ldr	r3, [r7, #4]
 810569a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 810569c:	4b13      	ldr	r3, [pc, #76]	@ (81056ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810569e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81056a0:	0e1b      	lsrs	r3, r3, #24
 81056a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81056a6:	ee07 3a90 	vmov	s15, r3
 81056aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81056ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81056b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 81056b6:	edd7 6a07 	vldr	s13, [r7, #28]
 81056ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81056be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81056c2:	ee17 2a90 	vmov	r2, s15
 81056c6:	687b      	ldr	r3, [r7, #4]
 81056c8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 81056ca:	e008      	b.n	81056de <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 81056cc:	687b      	ldr	r3, [r7, #4]
 81056ce:	2200      	movs	r2, #0
 81056d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 81056d2:	687b      	ldr	r3, [r7, #4]
 81056d4:	2200      	movs	r2, #0
 81056d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 81056d8:	687b      	ldr	r3, [r7, #4]
 81056da:	2200      	movs	r2, #0
 81056dc:	609a      	str	r2, [r3, #8]
}
 81056de:	bf00      	nop
 81056e0:	3724      	adds	r7, #36	@ 0x24
 81056e2:	46bd      	mov	sp, r7
 81056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81056e8:	4770      	bx	lr
 81056ea:	bf00      	nop
 81056ec:	58024400 	.word	0x58024400
 81056f0:	03d09000 	.word	0x03d09000
 81056f4:	46000000 	.word	0x46000000
 81056f8:	4c742400 	.word	0x4c742400
 81056fc:	4a742400 	.word	0x4a742400
 8105700:	4bbebc20 	.word	0x4bbebc20

08105704 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8105704:	b580      	push	{r7, lr}
 8105706:	b082      	sub	sp, #8
 8105708:	af00      	add	r7, sp, #0
 810570a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 810570c:	687b      	ldr	r3, [r7, #4]
 810570e:	2b00      	cmp	r3, #0
 8105710:	d101      	bne.n	8105716 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8105712:	2301      	movs	r3, #1
 8105714:	e042      	b.n	810579c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8105716:	687b      	ldr	r3, [r7, #4]
 8105718:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810571c:	2b00      	cmp	r3, #0
 810571e:	d106      	bne.n	810572e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8105720:	687b      	ldr	r3, [r7, #4]
 8105722:	2200      	movs	r2, #0
 8105724:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8105728:	6878      	ldr	r0, [r7, #4]
 810572a:	f7fe fc61 	bl	8103ff0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810572e:	687b      	ldr	r3, [r7, #4]
 8105730:	2224      	movs	r2, #36	@ 0x24
 8105732:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8105736:	687b      	ldr	r3, [r7, #4]
 8105738:	681b      	ldr	r3, [r3, #0]
 810573a:	681a      	ldr	r2, [r3, #0]
 810573c:	687b      	ldr	r3, [r7, #4]
 810573e:	681b      	ldr	r3, [r3, #0]
 8105740:	f022 0201 	bic.w	r2, r2, #1
 8105744:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8105746:	687b      	ldr	r3, [r7, #4]
 8105748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810574a:	2b00      	cmp	r3, #0
 810574c:	d002      	beq.n	8105754 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 810574e:	6878      	ldr	r0, [r7, #4]
 8105750:	f000 fe1e 	bl	8106390 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8105754:	6878      	ldr	r0, [r7, #4]
 8105756:	f000 f8b3 	bl	81058c0 <UART_SetConfig>
 810575a:	4603      	mov	r3, r0
 810575c:	2b01      	cmp	r3, #1
 810575e:	d101      	bne.n	8105764 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8105760:	2301      	movs	r3, #1
 8105762:	e01b      	b.n	810579c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8105764:	687b      	ldr	r3, [r7, #4]
 8105766:	681b      	ldr	r3, [r3, #0]
 8105768:	685a      	ldr	r2, [r3, #4]
 810576a:	687b      	ldr	r3, [r7, #4]
 810576c:	681b      	ldr	r3, [r3, #0]
 810576e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8105772:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8105774:	687b      	ldr	r3, [r7, #4]
 8105776:	681b      	ldr	r3, [r3, #0]
 8105778:	689a      	ldr	r2, [r3, #8]
 810577a:	687b      	ldr	r3, [r7, #4]
 810577c:	681b      	ldr	r3, [r3, #0]
 810577e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8105782:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8105784:	687b      	ldr	r3, [r7, #4]
 8105786:	681b      	ldr	r3, [r3, #0]
 8105788:	681a      	ldr	r2, [r3, #0]
 810578a:	687b      	ldr	r3, [r7, #4]
 810578c:	681b      	ldr	r3, [r3, #0]
 810578e:	f042 0201 	orr.w	r2, r2, #1
 8105792:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8105794:	6878      	ldr	r0, [r7, #4]
 8105796:	f000 fe9d 	bl	81064d4 <UART_CheckIdleState>
 810579a:	4603      	mov	r3, r0
}
 810579c:	4618      	mov	r0, r3
 810579e:	3708      	adds	r7, #8
 81057a0:	46bd      	mov	sp, r7
 81057a2:	bd80      	pop	{r7, pc}

081057a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81057a4:	b580      	push	{r7, lr}
 81057a6:	b08a      	sub	sp, #40	@ 0x28
 81057a8:	af02      	add	r7, sp, #8
 81057aa:	60f8      	str	r0, [r7, #12]
 81057ac:	60b9      	str	r1, [r7, #8]
 81057ae:	603b      	str	r3, [r7, #0]
 81057b0:	4613      	mov	r3, r2
 81057b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 81057b4:	68fb      	ldr	r3, [r7, #12]
 81057b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81057ba:	2b20      	cmp	r3, #32
 81057bc:	d17b      	bne.n	81058b6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 81057be:	68bb      	ldr	r3, [r7, #8]
 81057c0:	2b00      	cmp	r3, #0
 81057c2:	d002      	beq.n	81057ca <HAL_UART_Transmit+0x26>
 81057c4:	88fb      	ldrh	r3, [r7, #6]
 81057c6:	2b00      	cmp	r3, #0
 81057c8:	d101      	bne.n	81057ce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 81057ca:	2301      	movs	r3, #1
 81057cc:	e074      	b.n	81058b8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 81057ce:	68fb      	ldr	r3, [r7, #12]
 81057d0:	2200      	movs	r2, #0
 81057d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 81057d6:	68fb      	ldr	r3, [r7, #12]
 81057d8:	2221      	movs	r2, #33	@ 0x21
 81057da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 81057de:	f7fe ff89 	bl	81046f4 <HAL_GetTick>
 81057e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 81057e4:	68fb      	ldr	r3, [r7, #12]
 81057e6:	88fa      	ldrh	r2, [r7, #6]
 81057e8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 81057ec:	68fb      	ldr	r3, [r7, #12]
 81057ee:	88fa      	ldrh	r2, [r7, #6]
 81057f0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 81057f4:	68fb      	ldr	r3, [r7, #12]
 81057f6:	689b      	ldr	r3, [r3, #8]
 81057f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81057fc:	d108      	bne.n	8105810 <HAL_UART_Transmit+0x6c>
 81057fe:	68fb      	ldr	r3, [r7, #12]
 8105800:	691b      	ldr	r3, [r3, #16]
 8105802:	2b00      	cmp	r3, #0
 8105804:	d104      	bne.n	8105810 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8105806:	2300      	movs	r3, #0
 8105808:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 810580a:	68bb      	ldr	r3, [r7, #8]
 810580c:	61bb      	str	r3, [r7, #24]
 810580e:	e003      	b.n	8105818 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8105810:	68bb      	ldr	r3, [r7, #8]
 8105812:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8105814:	2300      	movs	r3, #0
 8105816:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8105818:	e030      	b.n	810587c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 810581a:	683b      	ldr	r3, [r7, #0]
 810581c:	9300      	str	r3, [sp, #0]
 810581e:	697b      	ldr	r3, [r7, #20]
 8105820:	2200      	movs	r2, #0
 8105822:	2180      	movs	r1, #128	@ 0x80
 8105824:	68f8      	ldr	r0, [r7, #12]
 8105826:	f000 feff 	bl	8106628 <UART_WaitOnFlagUntilTimeout>
 810582a:	4603      	mov	r3, r0
 810582c:	2b00      	cmp	r3, #0
 810582e:	d005      	beq.n	810583c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8105830:	68fb      	ldr	r3, [r7, #12]
 8105832:	2220      	movs	r2, #32
 8105834:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8105838:	2303      	movs	r3, #3
 810583a:	e03d      	b.n	81058b8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 810583c:	69fb      	ldr	r3, [r7, #28]
 810583e:	2b00      	cmp	r3, #0
 8105840:	d10b      	bne.n	810585a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8105842:	69bb      	ldr	r3, [r7, #24]
 8105844:	881b      	ldrh	r3, [r3, #0]
 8105846:	461a      	mov	r2, r3
 8105848:	68fb      	ldr	r3, [r7, #12]
 810584a:	681b      	ldr	r3, [r3, #0]
 810584c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8105850:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8105852:	69bb      	ldr	r3, [r7, #24]
 8105854:	3302      	adds	r3, #2
 8105856:	61bb      	str	r3, [r7, #24]
 8105858:	e007      	b.n	810586a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 810585a:	69fb      	ldr	r3, [r7, #28]
 810585c:	781a      	ldrb	r2, [r3, #0]
 810585e:	68fb      	ldr	r3, [r7, #12]
 8105860:	681b      	ldr	r3, [r3, #0]
 8105862:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8105864:	69fb      	ldr	r3, [r7, #28]
 8105866:	3301      	adds	r3, #1
 8105868:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 810586a:	68fb      	ldr	r3, [r7, #12]
 810586c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8105870:	b29b      	uxth	r3, r3
 8105872:	3b01      	subs	r3, #1
 8105874:	b29a      	uxth	r2, r3
 8105876:	68fb      	ldr	r3, [r7, #12]
 8105878:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 810587c:	68fb      	ldr	r3, [r7, #12]
 810587e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8105882:	b29b      	uxth	r3, r3
 8105884:	2b00      	cmp	r3, #0
 8105886:	d1c8      	bne.n	810581a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8105888:	683b      	ldr	r3, [r7, #0]
 810588a:	9300      	str	r3, [sp, #0]
 810588c:	697b      	ldr	r3, [r7, #20]
 810588e:	2200      	movs	r2, #0
 8105890:	2140      	movs	r1, #64	@ 0x40
 8105892:	68f8      	ldr	r0, [r7, #12]
 8105894:	f000 fec8 	bl	8106628 <UART_WaitOnFlagUntilTimeout>
 8105898:	4603      	mov	r3, r0
 810589a:	2b00      	cmp	r3, #0
 810589c:	d005      	beq.n	81058aa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 810589e:	68fb      	ldr	r3, [r7, #12]
 81058a0:	2220      	movs	r2, #32
 81058a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 81058a6:	2303      	movs	r3, #3
 81058a8:	e006      	b.n	81058b8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 81058aa:	68fb      	ldr	r3, [r7, #12]
 81058ac:	2220      	movs	r2, #32
 81058ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 81058b2:	2300      	movs	r3, #0
 81058b4:	e000      	b.n	81058b8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 81058b6:	2302      	movs	r3, #2
  }
}
 81058b8:	4618      	mov	r0, r3
 81058ba:	3720      	adds	r7, #32
 81058bc:	46bd      	mov	sp, r7
 81058be:	bd80      	pop	{r7, pc}

081058c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 81058c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 81058c4:	b092      	sub	sp, #72	@ 0x48
 81058c6:	af00      	add	r7, sp, #0
 81058c8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 81058ca:	2300      	movs	r3, #0
 81058cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 81058d0:	697b      	ldr	r3, [r7, #20]
 81058d2:	689a      	ldr	r2, [r3, #8]
 81058d4:	697b      	ldr	r3, [r7, #20]
 81058d6:	691b      	ldr	r3, [r3, #16]
 81058d8:	431a      	orrs	r2, r3
 81058da:	697b      	ldr	r3, [r7, #20]
 81058dc:	695b      	ldr	r3, [r3, #20]
 81058de:	431a      	orrs	r2, r3
 81058e0:	697b      	ldr	r3, [r7, #20]
 81058e2:	69db      	ldr	r3, [r3, #28]
 81058e4:	4313      	orrs	r3, r2
 81058e6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 81058e8:	697b      	ldr	r3, [r7, #20]
 81058ea:	681b      	ldr	r3, [r3, #0]
 81058ec:	681a      	ldr	r2, [r3, #0]
 81058ee:	4bbd      	ldr	r3, [pc, #756]	@ (8105be4 <UART_SetConfig+0x324>)
 81058f0:	4013      	ands	r3, r2
 81058f2:	697a      	ldr	r2, [r7, #20]
 81058f4:	6812      	ldr	r2, [r2, #0]
 81058f6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 81058f8:	430b      	orrs	r3, r1
 81058fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 81058fc:	697b      	ldr	r3, [r7, #20]
 81058fe:	681b      	ldr	r3, [r3, #0]
 8105900:	685b      	ldr	r3, [r3, #4]
 8105902:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8105906:	697b      	ldr	r3, [r7, #20]
 8105908:	68da      	ldr	r2, [r3, #12]
 810590a:	697b      	ldr	r3, [r7, #20]
 810590c:	681b      	ldr	r3, [r3, #0]
 810590e:	430a      	orrs	r2, r1
 8105910:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8105912:	697b      	ldr	r3, [r7, #20]
 8105914:	699b      	ldr	r3, [r3, #24]
 8105916:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8105918:	697b      	ldr	r3, [r7, #20]
 810591a:	681b      	ldr	r3, [r3, #0]
 810591c:	4ab2      	ldr	r2, [pc, #712]	@ (8105be8 <UART_SetConfig+0x328>)
 810591e:	4293      	cmp	r3, r2
 8105920:	d004      	beq.n	810592c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8105922:	697b      	ldr	r3, [r7, #20]
 8105924:	6a1b      	ldr	r3, [r3, #32]
 8105926:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8105928:	4313      	orrs	r3, r2
 810592a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810592c:	697b      	ldr	r3, [r7, #20]
 810592e:	681b      	ldr	r3, [r3, #0]
 8105930:	689b      	ldr	r3, [r3, #8]
 8105932:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8105936:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 810593a:	697a      	ldr	r2, [r7, #20]
 810593c:	6812      	ldr	r2, [r2, #0]
 810593e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8105940:	430b      	orrs	r3, r1
 8105942:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8105944:	697b      	ldr	r3, [r7, #20]
 8105946:	681b      	ldr	r3, [r3, #0]
 8105948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810594a:	f023 010f 	bic.w	r1, r3, #15
 810594e:	697b      	ldr	r3, [r7, #20]
 8105950:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8105952:	697b      	ldr	r3, [r7, #20]
 8105954:	681b      	ldr	r3, [r3, #0]
 8105956:	430a      	orrs	r2, r1
 8105958:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810595a:	697b      	ldr	r3, [r7, #20]
 810595c:	681b      	ldr	r3, [r3, #0]
 810595e:	4aa3      	ldr	r2, [pc, #652]	@ (8105bec <UART_SetConfig+0x32c>)
 8105960:	4293      	cmp	r3, r2
 8105962:	d177      	bne.n	8105a54 <UART_SetConfig+0x194>
 8105964:	4ba2      	ldr	r3, [pc, #648]	@ (8105bf0 <UART_SetConfig+0x330>)
 8105966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105968:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810596c:	2b28      	cmp	r3, #40	@ 0x28
 810596e:	d86d      	bhi.n	8105a4c <UART_SetConfig+0x18c>
 8105970:	a201      	add	r2, pc, #4	@ (adr r2, 8105978 <UART_SetConfig+0xb8>)
 8105972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105976:	bf00      	nop
 8105978:	08105a1d 	.word	0x08105a1d
 810597c:	08105a4d 	.word	0x08105a4d
 8105980:	08105a4d 	.word	0x08105a4d
 8105984:	08105a4d 	.word	0x08105a4d
 8105988:	08105a4d 	.word	0x08105a4d
 810598c:	08105a4d 	.word	0x08105a4d
 8105990:	08105a4d 	.word	0x08105a4d
 8105994:	08105a4d 	.word	0x08105a4d
 8105998:	08105a25 	.word	0x08105a25
 810599c:	08105a4d 	.word	0x08105a4d
 81059a0:	08105a4d 	.word	0x08105a4d
 81059a4:	08105a4d 	.word	0x08105a4d
 81059a8:	08105a4d 	.word	0x08105a4d
 81059ac:	08105a4d 	.word	0x08105a4d
 81059b0:	08105a4d 	.word	0x08105a4d
 81059b4:	08105a4d 	.word	0x08105a4d
 81059b8:	08105a2d 	.word	0x08105a2d
 81059bc:	08105a4d 	.word	0x08105a4d
 81059c0:	08105a4d 	.word	0x08105a4d
 81059c4:	08105a4d 	.word	0x08105a4d
 81059c8:	08105a4d 	.word	0x08105a4d
 81059cc:	08105a4d 	.word	0x08105a4d
 81059d0:	08105a4d 	.word	0x08105a4d
 81059d4:	08105a4d 	.word	0x08105a4d
 81059d8:	08105a35 	.word	0x08105a35
 81059dc:	08105a4d 	.word	0x08105a4d
 81059e0:	08105a4d 	.word	0x08105a4d
 81059e4:	08105a4d 	.word	0x08105a4d
 81059e8:	08105a4d 	.word	0x08105a4d
 81059ec:	08105a4d 	.word	0x08105a4d
 81059f0:	08105a4d 	.word	0x08105a4d
 81059f4:	08105a4d 	.word	0x08105a4d
 81059f8:	08105a3d 	.word	0x08105a3d
 81059fc:	08105a4d 	.word	0x08105a4d
 8105a00:	08105a4d 	.word	0x08105a4d
 8105a04:	08105a4d 	.word	0x08105a4d
 8105a08:	08105a4d 	.word	0x08105a4d
 8105a0c:	08105a4d 	.word	0x08105a4d
 8105a10:	08105a4d 	.word	0x08105a4d
 8105a14:	08105a4d 	.word	0x08105a4d
 8105a18:	08105a45 	.word	0x08105a45
 8105a1c:	2301      	movs	r3, #1
 8105a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105a22:	e220      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105a24:	2304      	movs	r3, #4
 8105a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105a2a:	e21c      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105a2c:	2308      	movs	r3, #8
 8105a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105a32:	e218      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105a34:	2310      	movs	r3, #16
 8105a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105a3a:	e214      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105a3c:	2320      	movs	r3, #32
 8105a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105a42:	e210      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105a44:	2340      	movs	r3, #64	@ 0x40
 8105a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105a4a:	e20c      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105a4c:	2380      	movs	r3, #128	@ 0x80
 8105a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105a52:	e208      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105a54:	697b      	ldr	r3, [r7, #20]
 8105a56:	681b      	ldr	r3, [r3, #0]
 8105a58:	4a66      	ldr	r2, [pc, #408]	@ (8105bf4 <UART_SetConfig+0x334>)
 8105a5a:	4293      	cmp	r3, r2
 8105a5c:	d130      	bne.n	8105ac0 <UART_SetConfig+0x200>
 8105a5e:	4b64      	ldr	r3, [pc, #400]	@ (8105bf0 <UART_SetConfig+0x330>)
 8105a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105a62:	f003 0307 	and.w	r3, r3, #7
 8105a66:	2b05      	cmp	r3, #5
 8105a68:	d826      	bhi.n	8105ab8 <UART_SetConfig+0x1f8>
 8105a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8105a70 <UART_SetConfig+0x1b0>)
 8105a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105a70:	08105a89 	.word	0x08105a89
 8105a74:	08105a91 	.word	0x08105a91
 8105a78:	08105a99 	.word	0x08105a99
 8105a7c:	08105aa1 	.word	0x08105aa1
 8105a80:	08105aa9 	.word	0x08105aa9
 8105a84:	08105ab1 	.word	0x08105ab1
 8105a88:	2300      	movs	r3, #0
 8105a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105a8e:	e1ea      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105a90:	2304      	movs	r3, #4
 8105a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105a96:	e1e6      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105a98:	2308      	movs	r3, #8
 8105a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105a9e:	e1e2      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105aa0:	2310      	movs	r3, #16
 8105aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105aa6:	e1de      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105aa8:	2320      	movs	r3, #32
 8105aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105aae:	e1da      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105ab0:	2340      	movs	r3, #64	@ 0x40
 8105ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105ab6:	e1d6      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105ab8:	2380      	movs	r3, #128	@ 0x80
 8105aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105abe:	e1d2      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105ac0:	697b      	ldr	r3, [r7, #20]
 8105ac2:	681b      	ldr	r3, [r3, #0]
 8105ac4:	4a4c      	ldr	r2, [pc, #304]	@ (8105bf8 <UART_SetConfig+0x338>)
 8105ac6:	4293      	cmp	r3, r2
 8105ac8:	d130      	bne.n	8105b2c <UART_SetConfig+0x26c>
 8105aca:	4b49      	ldr	r3, [pc, #292]	@ (8105bf0 <UART_SetConfig+0x330>)
 8105acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105ace:	f003 0307 	and.w	r3, r3, #7
 8105ad2:	2b05      	cmp	r3, #5
 8105ad4:	d826      	bhi.n	8105b24 <UART_SetConfig+0x264>
 8105ad6:	a201      	add	r2, pc, #4	@ (adr r2, 8105adc <UART_SetConfig+0x21c>)
 8105ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105adc:	08105af5 	.word	0x08105af5
 8105ae0:	08105afd 	.word	0x08105afd
 8105ae4:	08105b05 	.word	0x08105b05
 8105ae8:	08105b0d 	.word	0x08105b0d
 8105aec:	08105b15 	.word	0x08105b15
 8105af0:	08105b1d 	.word	0x08105b1d
 8105af4:	2300      	movs	r3, #0
 8105af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105afa:	e1b4      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105afc:	2304      	movs	r3, #4
 8105afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105b02:	e1b0      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105b04:	2308      	movs	r3, #8
 8105b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105b0a:	e1ac      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105b0c:	2310      	movs	r3, #16
 8105b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105b12:	e1a8      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105b14:	2320      	movs	r3, #32
 8105b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105b1a:	e1a4      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105b1c:	2340      	movs	r3, #64	@ 0x40
 8105b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105b22:	e1a0      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105b24:	2380      	movs	r3, #128	@ 0x80
 8105b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105b2a:	e19c      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105b2c:	697b      	ldr	r3, [r7, #20]
 8105b2e:	681b      	ldr	r3, [r3, #0]
 8105b30:	4a32      	ldr	r2, [pc, #200]	@ (8105bfc <UART_SetConfig+0x33c>)
 8105b32:	4293      	cmp	r3, r2
 8105b34:	d130      	bne.n	8105b98 <UART_SetConfig+0x2d8>
 8105b36:	4b2e      	ldr	r3, [pc, #184]	@ (8105bf0 <UART_SetConfig+0x330>)
 8105b38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105b3a:	f003 0307 	and.w	r3, r3, #7
 8105b3e:	2b05      	cmp	r3, #5
 8105b40:	d826      	bhi.n	8105b90 <UART_SetConfig+0x2d0>
 8105b42:	a201      	add	r2, pc, #4	@ (adr r2, 8105b48 <UART_SetConfig+0x288>)
 8105b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105b48:	08105b61 	.word	0x08105b61
 8105b4c:	08105b69 	.word	0x08105b69
 8105b50:	08105b71 	.word	0x08105b71
 8105b54:	08105b79 	.word	0x08105b79
 8105b58:	08105b81 	.word	0x08105b81
 8105b5c:	08105b89 	.word	0x08105b89
 8105b60:	2300      	movs	r3, #0
 8105b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105b66:	e17e      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105b68:	2304      	movs	r3, #4
 8105b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105b6e:	e17a      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105b70:	2308      	movs	r3, #8
 8105b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105b76:	e176      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105b78:	2310      	movs	r3, #16
 8105b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105b7e:	e172      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105b80:	2320      	movs	r3, #32
 8105b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105b86:	e16e      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105b88:	2340      	movs	r3, #64	@ 0x40
 8105b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105b8e:	e16a      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105b90:	2380      	movs	r3, #128	@ 0x80
 8105b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105b96:	e166      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105b98:	697b      	ldr	r3, [r7, #20]
 8105b9a:	681b      	ldr	r3, [r3, #0]
 8105b9c:	4a18      	ldr	r2, [pc, #96]	@ (8105c00 <UART_SetConfig+0x340>)
 8105b9e:	4293      	cmp	r3, r2
 8105ba0:	d140      	bne.n	8105c24 <UART_SetConfig+0x364>
 8105ba2:	4b13      	ldr	r3, [pc, #76]	@ (8105bf0 <UART_SetConfig+0x330>)
 8105ba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105ba6:	f003 0307 	and.w	r3, r3, #7
 8105baa:	2b05      	cmp	r3, #5
 8105bac:	d836      	bhi.n	8105c1c <UART_SetConfig+0x35c>
 8105bae:	a201      	add	r2, pc, #4	@ (adr r2, 8105bb4 <UART_SetConfig+0x2f4>)
 8105bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105bb4:	08105bcd 	.word	0x08105bcd
 8105bb8:	08105bd5 	.word	0x08105bd5
 8105bbc:	08105bdd 	.word	0x08105bdd
 8105bc0:	08105c05 	.word	0x08105c05
 8105bc4:	08105c0d 	.word	0x08105c0d
 8105bc8:	08105c15 	.word	0x08105c15
 8105bcc:	2300      	movs	r3, #0
 8105bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105bd2:	e148      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105bd4:	2304      	movs	r3, #4
 8105bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105bda:	e144      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105bdc:	2308      	movs	r3, #8
 8105bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105be2:	e140      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105be4:	cfff69f3 	.word	0xcfff69f3
 8105be8:	58000c00 	.word	0x58000c00
 8105bec:	40011000 	.word	0x40011000
 8105bf0:	58024400 	.word	0x58024400
 8105bf4:	40004400 	.word	0x40004400
 8105bf8:	40004800 	.word	0x40004800
 8105bfc:	40004c00 	.word	0x40004c00
 8105c00:	40005000 	.word	0x40005000
 8105c04:	2310      	movs	r3, #16
 8105c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105c0a:	e12c      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105c0c:	2320      	movs	r3, #32
 8105c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105c12:	e128      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105c14:	2340      	movs	r3, #64	@ 0x40
 8105c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105c1a:	e124      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105c1c:	2380      	movs	r3, #128	@ 0x80
 8105c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105c22:	e120      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105c24:	697b      	ldr	r3, [r7, #20]
 8105c26:	681b      	ldr	r3, [r3, #0]
 8105c28:	4acb      	ldr	r2, [pc, #812]	@ (8105f58 <UART_SetConfig+0x698>)
 8105c2a:	4293      	cmp	r3, r2
 8105c2c:	d176      	bne.n	8105d1c <UART_SetConfig+0x45c>
 8105c2e:	4bcb      	ldr	r3, [pc, #812]	@ (8105f5c <UART_SetConfig+0x69c>)
 8105c30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105c32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8105c36:	2b28      	cmp	r3, #40	@ 0x28
 8105c38:	d86c      	bhi.n	8105d14 <UART_SetConfig+0x454>
 8105c3a:	a201      	add	r2, pc, #4	@ (adr r2, 8105c40 <UART_SetConfig+0x380>)
 8105c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105c40:	08105ce5 	.word	0x08105ce5
 8105c44:	08105d15 	.word	0x08105d15
 8105c48:	08105d15 	.word	0x08105d15
 8105c4c:	08105d15 	.word	0x08105d15
 8105c50:	08105d15 	.word	0x08105d15
 8105c54:	08105d15 	.word	0x08105d15
 8105c58:	08105d15 	.word	0x08105d15
 8105c5c:	08105d15 	.word	0x08105d15
 8105c60:	08105ced 	.word	0x08105ced
 8105c64:	08105d15 	.word	0x08105d15
 8105c68:	08105d15 	.word	0x08105d15
 8105c6c:	08105d15 	.word	0x08105d15
 8105c70:	08105d15 	.word	0x08105d15
 8105c74:	08105d15 	.word	0x08105d15
 8105c78:	08105d15 	.word	0x08105d15
 8105c7c:	08105d15 	.word	0x08105d15
 8105c80:	08105cf5 	.word	0x08105cf5
 8105c84:	08105d15 	.word	0x08105d15
 8105c88:	08105d15 	.word	0x08105d15
 8105c8c:	08105d15 	.word	0x08105d15
 8105c90:	08105d15 	.word	0x08105d15
 8105c94:	08105d15 	.word	0x08105d15
 8105c98:	08105d15 	.word	0x08105d15
 8105c9c:	08105d15 	.word	0x08105d15
 8105ca0:	08105cfd 	.word	0x08105cfd
 8105ca4:	08105d15 	.word	0x08105d15
 8105ca8:	08105d15 	.word	0x08105d15
 8105cac:	08105d15 	.word	0x08105d15
 8105cb0:	08105d15 	.word	0x08105d15
 8105cb4:	08105d15 	.word	0x08105d15
 8105cb8:	08105d15 	.word	0x08105d15
 8105cbc:	08105d15 	.word	0x08105d15
 8105cc0:	08105d05 	.word	0x08105d05
 8105cc4:	08105d15 	.word	0x08105d15
 8105cc8:	08105d15 	.word	0x08105d15
 8105ccc:	08105d15 	.word	0x08105d15
 8105cd0:	08105d15 	.word	0x08105d15
 8105cd4:	08105d15 	.word	0x08105d15
 8105cd8:	08105d15 	.word	0x08105d15
 8105cdc:	08105d15 	.word	0x08105d15
 8105ce0:	08105d0d 	.word	0x08105d0d
 8105ce4:	2301      	movs	r3, #1
 8105ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105cea:	e0bc      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105cec:	2304      	movs	r3, #4
 8105cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105cf2:	e0b8      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105cf4:	2308      	movs	r3, #8
 8105cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105cfa:	e0b4      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105cfc:	2310      	movs	r3, #16
 8105cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105d02:	e0b0      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105d04:	2320      	movs	r3, #32
 8105d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105d0a:	e0ac      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105d0c:	2340      	movs	r3, #64	@ 0x40
 8105d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105d12:	e0a8      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105d14:	2380      	movs	r3, #128	@ 0x80
 8105d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105d1a:	e0a4      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105d1c:	697b      	ldr	r3, [r7, #20]
 8105d1e:	681b      	ldr	r3, [r3, #0]
 8105d20:	4a8f      	ldr	r2, [pc, #572]	@ (8105f60 <UART_SetConfig+0x6a0>)
 8105d22:	4293      	cmp	r3, r2
 8105d24:	d130      	bne.n	8105d88 <UART_SetConfig+0x4c8>
 8105d26:	4b8d      	ldr	r3, [pc, #564]	@ (8105f5c <UART_SetConfig+0x69c>)
 8105d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105d2a:	f003 0307 	and.w	r3, r3, #7
 8105d2e:	2b05      	cmp	r3, #5
 8105d30:	d826      	bhi.n	8105d80 <UART_SetConfig+0x4c0>
 8105d32:	a201      	add	r2, pc, #4	@ (adr r2, 8105d38 <UART_SetConfig+0x478>)
 8105d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105d38:	08105d51 	.word	0x08105d51
 8105d3c:	08105d59 	.word	0x08105d59
 8105d40:	08105d61 	.word	0x08105d61
 8105d44:	08105d69 	.word	0x08105d69
 8105d48:	08105d71 	.word	0x08105d71
 8105d4c:	08105d79 	.word	0x08105d79
 8105d50:	2300      	movs	r3, #0
 8105d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105d56:	e086      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105d58:	2304      	movs	r3, #4
 8105d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105d5e:	e082      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105d60:	2308      	movs	r3, #8
 8105d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105d66:	e07e      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105d68:	2310      	movs	r3, #16
 8105d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105d6e:	e07a      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105d70:	2320      	movs	r3, #32
 8105d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105d76:	e076      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105d78:	2340      	movs	r3, #64	@ 0x40
 8105d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105d7e:	e072      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105d80:	2380      	movs	r3, #128	@ 0x80
 8105d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105d86:	e06e      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105d88:	697b      	ldr	r3, [r7, #20]
 8105d8a:	681b      	ldr	r3, [r3, #0]
 8105d8c:	4a75      	ldr	r2, [pc, #468]	@ (8105f64 <UART_SetConfig+0x6a4>)
 8105d8e:	4293      	cmp	r3, r2
 8105d90:	d130      	bne.n	8105df4 <UART_SetConfig+0x534>
 8105d92:	4b72      	ldr	r3, [pc, #456]	@ (8105f5c <UART_SetConfig+0x69c>)
 8105d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105d96:	f003 0307 	and.w	r3, r3, #7
 8105d9a:	2b05      	cmp	r3, #5
 8105d9c:	d826      	bhi.n	8105dec <UART_SetConfig+0x52c>
 8105d9e:	a201      	add	r2, pc, #4	@ (adr r2, 8105da4 <UART_SetConfig+0x4e4>)
 8105da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105da4:	08105dbd 	.word	0x08105dbd
 8105da8:	08105dc5 	.word	0x08105dc5
 8105dac:	08105dcd 	.word	0x08105dcd
 8105db0:	08105dd5 	.word	0x08105dd5
 8105db4:	08105ddd 	.word	0x08105ddd
 8105db8:	08105de5 	.word	0x08105de5
 8105dbc:	2300      	movs	r3, #0
 8105dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105dc2:	e050      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105dc4:	2304      	movs	r3, #4
 8105dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105dca:	e04c      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105dcc:	2308      	movs	r3, #8
 8105dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105dd2:	e048      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105dd4:	2310      	movs	r3, #16
 8105dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105dda:	e044      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105ddc:	2320      	movs	r3, #32
 8105dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105de2:	e040      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105de4:	2340      	movs	r3, #64	@ 0x40
 8105de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105dea:	e03c      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105dec:	2380      	movs	r3, #128	@ 0x80
 8105dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105df2:	e038      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105df4:	697b      	ldr	r3, [r7, #20]
 8105df6:	681b      	ldr	r3, [r3, #0]
 8105df8:	4a5b      	ldr	r2, [pc, #364]	@ (8105f68 <UART_SetConfig+0x6a8>)
 8105dfa:	4293      	cmp	r3, r2
 8105dfc:	d130      	bne.n	8105e60 <UART_SetConfig+0x5a0>
 8105dfe:	4b57      	ldr	r3, [pc, #348]	@ (8105f5c <UART_SetConfig+0x69c>)
 8105e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105e02:	f003 0307 	and.w	r3, r3, #7
 8105e06:	2b05      	cmp	r3, #5
 8105e08:	d826      	bhi.n	8105e58 <UART_SetConfig+0x598>
 8105e0a:	a201      	add	r2, pc, #4	@ (adr r2, 8105e10 <UART_SetConfig+0x550>)
 8105e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105e10:	08105e29 	.word	0x08105e29
 8105e14:	08105e31 	.word	0x08105e31
 8105e18:	08105e39 	.word	0x08105e39
 8105e1c:	08105e41 	.word	0x08105e41
 8105e20:	08105e49 	.word	0x08105e49
 8105e24:	08105e51 	.word	0x08105e51
 8105e28:	2302      	movs	r3, #2
 8105e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105e2e:	e01a      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105e30:	2304      	movs	r3, #4
 8105e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105e36:	e016      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105e38:	2308      	movs	r3, #8
 8105e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105e3e:	e012      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105e40:	2310      	movs	r3, #16
 8105e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105e46:	e00e      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105e48:	2320      	movs	r3, #32
 8105e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105e4e:	e00a      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105e50:	2340      	movs	r3, #64	@ 0x40
 8105e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105e56:	e006      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105e58:	2380      	movs	r3, #128	@ 0x80
 8105e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105e5e:	e002      	b.n	8105e66 <UART_SetConfig+0x5a6>
 8105e60:	2380      	movs	r3, #128	@ 0x80
 8105e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8105e66:	697b      	ldr	r3, [r7, #20]
 8105e68:	681b      	ldr	r3, [r3, #0]
 8105e6a:	4a3f      	ldr	r2, [pc, #252]	@ (8105f68 <UART_SetConfig+0x6a8>)
 8105e6c:	4293      	cmp	r3, r2
 8105e6e:	f040 80f8 	bne.w	8106062 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8105e72:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8105e76:	2b20      	cmp	r3, #32
 8105e78:	dc46      	bgt.n	8105f08 <UART_SetConfig+0x648>
 8105e7a:	2b02      	cmp	r3, #2
 8105e7c:	f2c0 8082 	blt.w	8105f84 <UART_SetConfig+0x6c4>
 8105e80:	3b02      	subs	r3, #2
 8105e82:	2b1e      	cmp	r3, #30
 8105e84:	d87e      	bhi.n	8105f84 <UART_SetConfig+0x6c4>
 8105e86:	a201      	add	r2, pc, #4	@ (adr r2, 8105e8c <UART_SetConfig+0x5cc>)
 8105e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105e8c:	08105f0f 	.word	0x08105f0f
 8105e90:	08105f85 	.word	0x08105f85
 8105e94:	08105f17 	.word	0x08105f17
 8105e98:	08105f85 	.word	0x08105f85
 8105e9c:	08105f85 	.word	0x08105f85
 8105ea0:	08105f85 	.word	0x08105f85
 8105ea4:	08105f27 	.word	0x08105f27
 8105ea8:	08105f85 	.word	0x08105f85
 8105eac:	08105f85 	.word	0x08105f85
 8105eb0:	08105f85 	.word	0x08105f85
 8105eb4:	08105f85 	.word	0x08105f85
 8105eb8:	08105f85 	.word	0x08105f85
 8105ebc:	08105f85 	.word	0x08105f85
 8105ec0:	08105f85 	.word	0x08105f85
 8105ec4:	08105f37 	.word	0x08105f37
 8105ec8:	08105f85 	.word	0x08105f85
 8105ecc:	08105f85 	.word	0x08105f85
 8105ed0:	08105f85 	.word	0x08105f85
 8105ed4:	08105f85 	.word	0x08105f85
 8105ed8:	08105f85 	.word	0x08105f85
 8105edc:	08105f85 	.word	0x08105f85
 8105ee0:	08105f85 	.word	0x08105f85
 8105ee4:	08105f85 	.word	0x08105f85
 8105ee8:	08105f85 	.word	0x08105f85
 8105eec:	08105f85 	.word	0x08105f85
 8105ef0:	08105f85 	.word	0x08105f85
 8105ef4:	08105f85 	.word	0x08105f85
 8105ef8:	08105f85 	.word	0x08105f85
 8105efc:	08105f85 	.word	0x08105f85
 8105f00:	08105f85 	.word	0x08105f85
 8105f04:	08105f77 	.word	0x08105f77
 8105f08:	2b40      	cmp	r3, #64	@ 0x40
 8105f0a:	d037      	beq.n	8105f7c <UART_SetConfig+0x6bc>
 8105f0c:	e03a      	b.n	8105f84 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8105f0e:	f7ff f93b 	bl	8105188 <HAL_RCCEx_GetD3PCLK1Freq>
 8105f12:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8105f14:	e03c      	b.n	8105f90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105f16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8105f1a:	4618      	mov	r0, r3
 8105f1c:	f7ff f94a 	bl	81051b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8105f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105f24:	e034      	b.n	8105f90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105f26:	f107 0318 	add.w	r3, r7, #24
 8105f2a:	4618      	mov	r0, r3
 8105f2c:	f7ff fa96 	bl	810545c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8105f30:	69fb      	ldr	r3, [r7, #28]
 8105f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105f34:	e02c      	b.n	8105f90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105f36:	4b09      	ldr	r3, [pc, #36]	@ (8105f5c <UART_SetConfig+0x69c>)
 8105f38:	681b      	ldr	r3, [r3, #0]
 8105f3a:	f003 0320 	and.w	r3, r3, #32
 8105f3e:	2b00      	cmp	r3, #0
 8105f40:	d016      	beq.n	8105f70 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8105f42:	4b06      	ldr	r3, [pc, #24]	@ (8105f5c <UART_SetConfig+0x69c>)
 8105f44:	681b      	ldr	r3, [r3, #0]
 8105f46:	08db      	lsrs	r3, r3, #3
 8105f48:	f003 0303 	and.w	r3, r3, #3
 8105f4c:	4a07      	ldr	r2, [pc, #28]	@ (8105f6c <UART_SetConfig+0x6ac>)
 8105f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8105f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8105f54:	e01c      	b.n	8105f90 <UART_SetConfig+0x6d0>
 8105f56:	bf00      	nop
 8105f58:	40011400 	.word	0x40011400
 8105f5c:	58024400 	.word	0x58024400
 8105f60:	40007800 	.word	0x40007800
 8105f64:	40007c00 	.word	0x40007c00
 8105f68:	58000c00 	.word	0x58000c00
 8105f6c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8105f70:	4b9d      	ldr	r3, [pc, #628]	@ (81061e8 <UART_SetConfig+0x928>)
 8105f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105f74:	e00c      	b.n	8105f90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8105f76:	4b9d      	ldr	r3, [pc, #628]	@ (81061ec <UART_SetConfig+0x92c>)
 8105f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105f7a:	e009      	b.n	8105f90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8105f7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8105f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105f82:	e005      	b.n	8105f90 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8105f84:	2300      	movs	r3, #0
 8105f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8105f88:	2301      	movs	r3, #1
 8105f8a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8105f8e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8105f90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8105f92:	2b00      	cmp	r3, #0
 8105f94:	f000 81de 	beq.w	8106354 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8105f98:	697b      	ldr	r3, [r7, #20]
 8105f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105f9c:	4a94      	ldr	r2, [pc, #592]	@ (81061f0 <UART_SetConfig+0x930>)
 8105f9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8105fa2:	461a      	mov	r2, r3
 8105fa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8105fa6:	fbb3 f3f2 	udiv	r3, r3, r2
 8105faa:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8105fac:	697b      	ldr	r3, [r7, #20]
 8105fae:	685a      	ldr	r2, [r3, #4]
 8105fb0:	4613      	mov	r3, r2
 8105fb2:	005b      	lsls	r3, r3, #1
 8105fb4:	4413      	add	r3, r2
 8105fb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8105fb8:	429a      	cmp	r2, r3
 8105fba:	d305      	bcc.n	8105fc8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8105fbc:	697b      	ldr	r3, [r7, #20]
 8105fbe:	685b      	ldr	r3, [r3, #4]
 8105fc0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8105fc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8105fc4:	429a      	cmp	r2, r3
 8105fc6:	d903      	bls.n	8105fd0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8105fc8:	2301      	movs	r3, #1
 8105fca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8105fce:	e1c1      	b.n	8106354 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8105fd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8105fd2:	2200      	movs	r2, #0
 8105fd4:	60bb      	str	r3, [r7, #8]
 8105fd6:	60fa      	str	r2, [r7, #12]
 8105fd8:	697b      	ldr	r3, [r7, #20]
 8105fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105fdc:	4a84      	ldr	r2, [pc, #528]	@ (81061f0 <UART_SetConfig+0x930>)
 8105fde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8105fe2:	b29b      	uxth	r3, r3
 8105fe4:	2200      	movs	r2, #0
 8105fe6:	603b      	str	r3, [r7, #0]
 8105fe8:	607a      	str	r2, [r7, #4]
 8105fea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105fee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8105ff2:	f7fa fec1 	bl	8100d78 <__aeabi_uldivmod>
 8105ff6:	4602      	mov	r2, r0
 8105ff8:	460b      	mov	r3, r1
 8105ffa:	4610      	mov	r0, r2
 8105ffc:	4619      	mov	r1, r3
 8105ffe:	f04f 0200 	mov.w	r2, #0
 8106002:	f04f 0300 	mov.w	r3, #0
 8106006:	020b      	lsls	r3, r1, #8
 8106008:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810600c:	0202      	lsls	r2, r0, #8
 810600e:	6979      	ldr	r1, [r7, #20]
 8106010:	6849      	ldr	r1, [r1, #4]
 8106012:	0849      	lsrs	r1, r1, #1
 8106014:	2000      	movs	r0, #0
 8106016:	460c      	mov	r4, r1
 8106018:	4605      	mov	r5, r0
 810601a:	eb12 0804 	adds.w	r8, r2, r4
 810601e:	eb43 0905 	adc.w	r9, r3, r5
 8106022:	697b      	ldr	r3, [r7, #20]
 8106024:	685b      	ldr	r3, [r3, #4]
 8106026:	2200      	movs	r2, #0
 8106028:	469a      	mov	sl, r3
 810602a:	4693      	mov	fp, r2
 810602c:	4652      	mov	r2, sl
 810602e:	465b      	mov	r3, fp
 8106030:	4640      	mov	r0, r8
 8106032:	4649      	mov	r1, r9
 8106034:	f7fa fea0 	bl	8100d78 <__aeabi_uldivmod>
 8106038:	4602      	mov	r2, r0
 810603a:	460b      	mov	r3, r1
 810603c:	4613      	mov	r3, r2
 810603e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8106040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106042:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8106046:	d308      	bcc.n	810605a <UART_SetConfig+0x79a>
 8106048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810604a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810604e:	d204      	bcs.n	810605a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8106050:	697b      	ldr	r3, [r7, #20]
 8106052:	681b      	ldr	r3, [r3, #0]
 8106054:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8106056:	60da      	str	r2, [r3, #12]
 8106058:	e17c      	b.n	8106354 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 810605a:	2301      	movs	r3, #1
 810605c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8106060:	e178      	b.n	8106354 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8106062:	697b      	ldr	r3, [r7, #20]
 8106064:	69db      	ldr	r3, [r3, #28]
 8106066:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810606a:	f040 80c5 	bne.w	81061f8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 810606e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8106072:	2b20      	cmp	r3, #32
 8106074:	dc48      	bgt.n	8106108 <UART_SetConfig+0x848>
 8106076:	2b00      	cmp	r3, #0
 8106078:	db7b      	blt.n	8106172 <UART_SetConfig+0x8b2>
 810607a:	2b20      	cmp	r3, #32
 810607c:	d879      	bhi.n	8106172 <UART_SetConfig+0x8b2>
 810607e:	a201      	add	r2, pc, #4	@ (adr r2, 8106084 <UART_SetConfig+0x7c4>)
 8106080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106084:	0810610f 	.word	0x0810610f
 8106088:	08106117 	.word	0x08106117
 810608c:	08106173 	.word	0x08106173
 8106090:	08106173 	.word	0x08106173
 8106094:	0810611f 	.word	0x0810611f
 8106098:	08106173 	.word	0x08106173
 810609c:	08106173 	.word	0x08106173
 81060a0:	08106173 	.word	0x08106173
 81060a4:	0810612f 	.word	0x0810612f
 81060a8:	08106173 	.word	0x08106173
 81060ac:	08106173 	.word	0x08106173
 81060b0:	08106173 	.word	0x08106173
 81060b4:	08106173 	.word	0x08106173
 81060b8:	08106173 	.word	0x08106173
 81060bc:	08106173 	.word	0x08106173
 81060c0:	08106173 	.word	0x08106173
 81060c4:	0810613f 	.word	0x0810613f
 81060c8:	08106173 	.word	0x08106173
 81060cc:	08106173 	.word	0x08106173
 81060d0:	08106173 	.word	0x08106173
 81060d4:	08106173 	.word	0x08106173
 81060d8:	08106173 	.word	0x08106173
 81060dc:	08106173 	.word	0x08106173
 81060e0:	08106173 	.word	0x08106173
 81060e4:	08106173 	.word	0x08106173
 81060e8:	08106173 	.word	0x08106173
 81060ec:	08106173 	.word	0x08106173
 81060f0:	08106173 	.word	0x08106173
 81060f4:	08106173 	.word	0x08106173
 81060f8:	08106173 	.word	0x08106173
 81060fc:	08106173 	.word	0x08106173
 8106100:	08106173 	.word	0x08106173
 8106104:	08106165 	.word	0x08106165
 8106108:	2b40      	cmp	r3, #64	@ 0x40
 810610a:	d02e      	beq.n	810616a <UART_SetConfig+0x8aa>
 810610c:	e031      	b.n	8106172 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810610e:	f7ff f80f 	bl	8105130 <HAL_RCC_GetPCLK1Freq>
 8106112:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8106114:	e033      	b.n	810617e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8106116:	f7ff f821 	bl	810515c <HAL_RCC_GetPCLK2Freq>
 810611a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810611c:	e02f      	b.n	810617e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810611e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8106122:	4618      	mov	r0, r3
 8106124:	f7ff f846 	bl	81051b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8106128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810612a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810612c:	e027      	b.n	810617e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810612e:	f107 0318 	add.w	r3, r7, #24
 8106132:	4618      	mov	r0, r3
 8106134:	f7ff f992 	bl	810545c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8106138:	69fb      	ldr	r3, [r7, #28]
 810613a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810613c:	e01f      	b.n	810617e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810613e:	4b2d      	ldr	r3, [pc, #180]	@ (81061f4 <UART_SetConfig+0x934>)
 8106140:	681b      	ldr	r3, [r3, #0]
 8106142:	f003 0320 	and.w	r3, r3, #32
 8106146:	2b00      	cmp	r3, #0
 8106148:	d009      	beq.n	810615e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810614a:	4b2a      	ldr	r3, [pc, #168]	@ (81061f4 <UART_SetConfig+0x934>)
 810614c:	681b      	ldr	r3, [r3, #0]
 810614e:	08db      	lsrs	r3, r3, #3
 8106150:	f003 0303 	and.w	r3, r3, #3
 8106154:	4a24      	ldr	r2, [pc, #144]	@ (81061e8 <UART_SetConfig+0x928>)
 8106156:	fa22 f303 	lsr.w	r3, r2, r3
 810615a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810615c:	e00f      	b.n	810617e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 810615e:	4b22      	ldr	r3, [pc, #136]	@ (81061e8 <UART_SetConfig+0x928>)
 8106160:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106162:	e00c      	b.n	810617e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8106164:	4b21      	ldr	r3, [pc, #132]	@ (81061ec <UART_SetConfig+0x92c>)
 8106166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106168:	e009      	b.n	810617e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810616a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810616e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106170:	e005      	b.n	810617e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8106172:	2300      	movs	r3, #0
 8106174:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8106176:	2301      	movs	r3, #1
 8106178:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810617c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810617e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8106180:	2b00      	cmp	r3, #0
 8106182:	f000 80e7 	beq.w	8106354 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8106186:	697b      	ldr	r3, [r7, #20]
 8106188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810618a:	4a19      	ldr	r2, [pc, #100]	@ (81061f0 <UART_SetConfig+0x930>)
 810618c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8106190:	461a      	mov	r2, r3
 8106192:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8106194:	fbb3 f3f2 	udiv	r3, r3, r2
 8106198:	005a      	lsls	r2, r3, #1
 810619a:	697b      	ldr	r3, [r7, #20]
 810619c:	685b      	ldr	r3, [r3, #4]
 810619e:	085b      	lsrs	r3, r3, #1
 81061a0:	441a      	add	r2, r3
 81061a2:	697b      	ldr	r3, [r7, #20]
 81061a4:	685b      	ldr	r3, [r3, #4]
 81061a6:	fbb2 f3f3 	udiv	r3, r2, r3
 81061aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 81061ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81061ae:	2b0f      	cmp	r3, #15
 81061b0:	d916      	bls.n	81061e0 <UART_SetConfig+0x920>
 81061b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81061b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81061b8:	d212      	bcs.n	81061e0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 81061ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81061bc:	b29b      	uxth	r3, r3
 81061be:	f023 030f 	bic.w	r3, r3, #15
 81061c2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 81061c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81061c6:	085b      	lsrs	r3, r3, #1
 81061c8:	b29b      	uxth	r3, r3
 81061ca:	f003 0307 	and.w	r3, r3, #7
 81061ce:	b29a      	uxth	r2, r3
 81061d0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 81061d2:	4313      	orrs	r3, r2
 81061d4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 81061d6:	697b      	ldr	r3, [r7, #20]
 81061d8:	681b      	ldr	r3, [r3, #0]
 81061da:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 81061dc:	60da      	str	r2, [r3, #12]
 81061de:	e0b9      	b.n	8106354 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 81061e0:	2301      	movs	r3, #1
 81061e2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 81061e6:	e0b5      	b.n	8106354 <UART_SetConfig+0xa94>
 81061e8:	03d09000 	.word	0x03d09000
 81061ec:	003d0900 	.word	0x003d0900
 81061f0:	0810b1d4 	.word	0x0810b1d4
 81061f4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 81061f8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 81061fc:	2b20      	cmp	r3, #32
 81061fe:	dc49      	bgt.n	8106294 <UART_SetConfig+0x9d4>
 8106200:	2b00      	cmp	r3, #0
 8106202:	db7c      	blt.n	81062fe <UART_SetConfig+0xa3e>
 8106204:	2b20      	cmp	r3, #32
 8106206:	d87a      	bhi.n	81062fe <UART_SetConfig+0xa3e>
 8106208:	a201      	add	r2, pc, #4	@ (adr r2, 8106210 <UART_SetConfig+0x950>)
 810620a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810620e:	bf00      	nop
 8106210:	0810629b 	.word	0x0810629b
 8106214:	081062a3 	.word	0x081062a3
 8106218:	081062ff 	.word	0x081062ff
 810621c:	081062ff 	.word	0x081062ff
 8106220:	081062ab 	.word	0x081062ab
 8106224:	081062ff 	.word	0x081062ff
 8106228:	081062ff 	.word	0x081062ff
 810622c:	081062ff 	.word	0x081062ff
 8106230:	081062bb 	.word	0x081062bb
 8106234:	081062ff 	.word	0x081062ff
 8106238:	081062ff 	.word	0x081062ff
 810623c:	081062ff 	.word	0x081062ff
 8106240:	081062ff 	.word	0x081062ff
 8106244:	081062ff 	.word	0x081062ff
 8106248:	081062ff 	.word	0x081062ff
 810624c:	081062ff 	.word	0x081062ff
 8106250:	081062cb 	.word	0x081062cb
 8106254:	081062ff 	.word	0x081062ff
 8106258:	081062ff 	.word	0x081062ff
 810625c:	081062ff 	.word	0x081062ff
 8106260:	081062ff 	.word	0x081062ff
 8106264:	081062ff 	.word	0x081062ff
 8106268:	081062ff 	.word	0x081062ff
 810626c:	081062ff 	.word	0x081062ff
 8106270:	081062ff 	.word	0x081062ff
 8106274:	081062ff 	.word	0x081062ff
 8106278:	081062ff 	.word	0x081062ff
 810627c:	081062ff 	.word	0x081062ff
 8106280:	081062ff 	.word	0x081062ff
 8106284:	081062ff 	.word	0x081062ff
 8106288:	081062ff 	.word	0x081062ff
 810628c:	081062ff 	.word	0x081062ff
 8106290:	081062f1 	.word	0x081062f1
 8106294:	2b40      	cmp	r3, #64	@ 0x40
 8106296:	d02e      	beq.n	81062f6 <UART_SetConfig+0xa36>
 8106298:	e031      	b.n	81062fe <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810629a:	f7fe ff49 	bl	8105130 <HAL_RCC_GetPCLK1Freq>
 810629e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 81062a0:	e033      	b.n	810630a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 81062a2:	f7fe ff5b 	bl	810515c <HAL_RCC_GetPCLK2Freq>
 81062a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 81062a8:	e02f      	b.n	810630a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81062aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81062ae:	4618      	mov	r0, r3
 81062b0:	f7fe ff80 	bl	81051b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81062b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81062b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81062b8:	e027      	b.n	810630a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81062ba:	f107 0318 	add.w	r3, r7, #24
 81062be:	4618      	mov	r0, r3
 81062c0:	f7ff f8cc 	bl	810545c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81062c4:	69fb      	ldr	r3, [r7, #28]
 81062c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81062c8:	e01f      	b.n	810630a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81062ca:	4b2d      	ldr	r3, [pc, #180]	@ (8106380 <UART_SetConfig+0xac0>)
 81062cc:	681b      	ldr	r3, [r3, #0]
 81062ce:	f003 0320 	and.w	r3, r3, #32
 81062d2:	2b00      	cmp	r3, #0
 81062d4:	d009      	beq.n	81062ea <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81062d6:	4b2a      	ldr	r3, [pc, #168]	@ (8106380 <UART_SetConfig+0xac0>)
 81062d8:	681b      	ldr	r3, [r3, #0]
 81062da:	08db      	lsrs	r3, r3, #3
 81062dc:	f003 0303 	and.w	r3, r3, #3
 81062e0:	4a28      	ldr	r2, [pc, #160]	@ (8106384 <UART_SetConfig+0xac4>)
 81062e2:	fa22 f303 	lsr.w	r3, r2, r3
 81062e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81062e8:	e00f      	b.n	810630a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 81062ea:	4b26      	ldr	r3, [pc, #152]	@ (8106384 <UART_SetConfig+0xac4>)
 81062ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81062ee:	e00c      	b.n	810630a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81062f0:	4b25      	ldr	r3, [pc, #148]	@ (8106388 <UART_SetConfig+0xac8>)
 81062f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81062f4:	e009      	b.n	810630a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81062f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 81062fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81062fc:	e005      	b.n	810630a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 81062fe:	2300      	movs	r3, #0
 8106300:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8106302:	2301      	movs	r3, #1
 8106304:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8106308:	bf00      	nop
    }

    if (pclk != 0U)
 810630a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810630c:	2b00      	cmp	r3, #0
 810630e:	d021      	beq.n	8106354 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8106310:	697b      	ldr	r3, [r7, #20]
 8106312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8106314:	4a1d      	ldr	r2, [pc, #116]	@ (810638c <UART_SetConfig+0xacc>)
 8106316:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810631a:	461a      	mov	r2, r3
 810631c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810631e:	fbb3 f2f2 	udiv	r2, r3, r2
 8106322:	697b      	ldr	r3, [r7, #20]
 8106324:	685b      	ldr	r3, [r3, #4]
 8106326:	085b      	lsrs	r3, r3, #1
 8106328:	441a      	add	r2, r3
 810632a:	697b      	ldr	r3, [r7, #20]
 810632c:	685b      	ldr	r3, [r3, #4]
 810632e:	fbb2 f3f3 	udiv	r3, r2, r3
 8106332:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8106334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106336:	2b0f      	cmp	r3, #15
 8106338:	d909      	bls.n	810634e <UART_SetConfig+0xa8e>
 810633a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810633c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8106340:	d205      	bcs.n	810634e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8106342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106344:	b29a      	uxth	r2, r3
 8106346:	697b      	ldr	r3, [r7, #20]
 8106348:	681b      	ldr	r3, [r3, #0]
 810634a:	60da      	str	r2, [r3, #12]
 810634c:	e002      	b.n	8106354 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810634e:	2301      	movs	r3, #1
 8106350:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8106354:	697b      	ldr	r3, [r7, #20]
 8106356:	2201      	movs	r2, #1
 8106358:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 810635c:	697b      	ldr	r3, [r7, #20]
 810635e:	2201      	movs	r2, #1
 8106360:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8106364:	697b      	ldr	r3, [r7, #20]
 8106366:	2200      	movs	r2, #0
 8106368:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 810636a:	697b      	ldr	r3, [r7, #20]
 810636c:	2200      	movs	r2, #0
 810636e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8106370:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8106374:	4618      	mov	r0, r3
 8106376:	3748      	adds	r7, #72	@ 0x48
 8106378:	46bd      	mov	sp, r7
 810637a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810637e:	bf00      	nop
 8106380:	58024400 	.word	0x58024400
 8106384:	03d09000 	.word	0x03d09000
 8106388:	003d0900 	.word	0x003d0900
 810638c:	0810b1d4 	.word	0x0810b1d4

08106390 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8106390:	b480      	push	{r7}
 8106392:	b083      	sub	sp, #12
 8106394:	af00      	add	r7, sp, #0
 8106396:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8106398:	687b      	ldr	r3, [r7, #4]
 810639a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810639c:	f003 0308 	and.w	r3, r3, #8
 81063a0:	2b00      	cmp	r3, #0
 81063a2:	d00a      	beq.n	81063ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 81063a4:	687b      	ldr	r3, [r7, #4]
 81063a6:	681b      	ldr	r3, [r3, #0]
 81063a8:	685b      	ldr	r3, [r3, #4]
 81063aa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 81063ae:	687b      	ldr	r3, [r7, #4]
 81063b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 81063b2:	687b      	ldr	r3, [r7, #4]
 81063b4:	681b      	ldr	r3, [r3, #0]
 81063b6:	430a      	orrs	r2, r1
 81063b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 81063ba:	687b      	ldr	r3, [r7, #4]
 81063bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81063be:	f003 0301 	and.w	r3, r3, #1
 81063c2:	2b00      	cmp	r3, #0
 81063c4:	d00a      	beq.n	81063dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 81063c6:	687b      	ldr	r3, [r7, #4]
 81063c8:	681b      	ldr	r3, [r3, #0]
 81063ca:	685b      	ldr	r3, [r3, #4]
 81063cc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 81063d0:	687b      	ldr	r3, [r7, #4]
 81063d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81063d4:	687b      	ldr	r3, [r7, #4]
 81063d6:	681b      	ldr	r3, [r3, #0]
 81063d8:	430a      	orrs	r2, r1
 81063da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 81063dc:	687b      	ldr	r3, [r7, #4]
 81063de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81063e0:	f003 0302 	and.w	r3, r3, #2
 81063e4:	2b00      	cmp	r3, #0
 81063e6:	d00a      	beq.n	81063fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 81063e8:	687b      	ldr	r3, [r7, #4]
 81063ea:	681b      	ldr	r3, [r3, #0]
 81063ec:	685b      	ldr	r3, [r3, #4]
 81063ee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 81063f2:	687b      	ldr	r3, [r7, #4]
 81063f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 81063f6:	687b      	ldr	r3, [r7, #4]
 81063f8:	681b      	ldr	r3, [r3, #0]
 81063fa:	430a      	orrs	r2, r1
 81063fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 81063fe:	687b      	ldr	r3, [r7, #4]
 8106400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106402:	f003 0304 	and.w	r3, r3, #4
 8106406:	2b00      	cmp	r3, #0
 8106408:	d00a      	beq.n	8106420 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810640a:	687b      	ldr	r3, [r7, #4]
 810640c:	681b      	ldr	r3, [r3, #0]
 810640e:	685b      	ldr	r3, [r3, #4]
 8106410:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8106414:	687b      	ldr	r3, [r7, #4]
 8106416:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8106418:	687b      	ldr	r3, [r7, #4]
 810641a:	681b      	ldr	r3, [r3, #0]
 810641c:	430a      	orrs	r2, r1
 810641e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8106420:	687b      	ldr	r3, [r7, #4]
 8106422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106424:	f003 0310 	and.w	r3, r3, #16
 8106428:	2b00      	cmp	r3, #0
 810642a:	d00a      	beq.n	8106442 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810642c:	687b      	ldr	r3, [r7, #4]
 810642e:	681b      	ldr	r3, [r3, #0]
 8106430:	689b      	ldr	r3, [r3, #8]
 8106432:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8106436:	687b      	ldr	r3, [r7, #4]
 8106438:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 810643a:	687b      	ldr	r3, [r7, #4]
 810643c:	681b      	ldr	r3, [r3, #0]
 810643e:	430a      	orrs	r2, r1
 8106440:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8106442:	687b      	ldr	r3, [r7, #4]
 8106444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106446:	f003 0320 	and.w	r3, r3, #32
 810644a:	2b00      	cmp	r3, #0
 810644c:	d00a      	beq.n	8106464 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810644e:	687b      	ldr	r3, [r7, #4]
 8106450:	681b      	ldr	r3, [r3, #0]
 8106452:	689b      	ldr	r3, [r3, #8]
 8106454:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8106458:	687b      	ldr	r3, [r7, #4]
 810645a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 810645c:	687b      	ldr	r3, [r7, #4]
 810645e:	681b      	ldr	r3, [r3, #0]
 8106460:	430a      	orrs	r2, r1
 8106462:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8106464:	687b      	ldr	r3, [r7, #4]
 8106466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810646c:	2b00      	cmp	r3, #0
 810646e:	d01a      	beq.n	81064a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8106470:	687b      	ldr	r3, [r7, #4]
 8106472:	681b      	ldr	r3, [r3, #0]
 8106474:	685b      	ldr	r3, [r3, #4]
 8106476:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 810647a:	687b      	ldr	r3, [r7, #4]
 810647c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810647e:	687b      	ldr	r3, [r7, #4]
 8106480:	681b      	ldr	r3, [r3, #0]
 8106482:	430a      	orrs	r2, r1
 8106484:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8106486:	687b      	ldr	r3, [r7, #4]
 8106488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810648a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810648e:	d10a      	bne.n	81064a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8106490:	687b      	ldr	r3, [r7, #4]
 8106492:	681b      	ldr	r3, [r3, #0]
 8106494:	685b      	ldr	r3, [r3, #4]
 8106496:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 810649a:	687b      	ldr	r3, [r7, #4]
 810649c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 810649e:	687b      	ldr	r3, [r7, #4]
 81064a0:	681b      	ldr	r3, [r3, #0]
 81064a2:	430a      	orrs	r2, r1
 81064a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 81064a6:	687b      	ldr	r3, [r7, #4]
 81064a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81064aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81064ae:	2b00      	cmp	r3, #0
 81064b0:	d00a      	beq.n	81064c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 81064b2:	687b      	ldr	r3, [r7, #4]
 81064b4:	681b      	ldr	r3, [r3, #0]
 81064b6:	685b      	ldr	r3, [r3, #4]
 81064b8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 81064bc:	687b      	ldr	r3, [r7, #4]
 81064be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 81064c0:	687b      	ldr	r3, [r7, #4]
 81064c2:	681b      	ldr	r3, [r3, #0]
 81064c4:	430a      	orrs	r2, r1
 81064c6:	605a      	str	r2, [r3, #4]
  }
}
 81064c8:	bf00      	nop
 81064ca:	370c      	adds	r7, #12
 81064cc:	46bd      	mov	sp, r7
 81064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81064d2:	4770      	bx	lr

081064d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 81064d4:	b580      	push	{r7, lr}
 81064d6:	b098      	sub	sp, #96	@ 0x60
 81064d8:	af02      	add	r7, sp, #8
 81064da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 81064dc:	687b      	ldr	r3, [r7, #4]
 81064de:	2200      	movs	r2, #0
 81064e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 81064e4:	f7fe f906 	bl	81046f4 <HAL_GetTick>
 81064e8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 81064ea:	687b      	ldr	r3, [r7, #4]
 81064ec:	681b      	ldr	r3, [r3, #0]
 81064ee:	681b      	ldr	r3, [r3, #0]
 81064f0:	f003 0308 	and.w	r3, r3, #8
 81064f4:	2b08      	cmp	r3, #8
 81064f6:	d12f      	bne.n	8106558 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81064f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 81064fc:	9300      	str	r3, [sp, #0]
 81064fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8106500:	2200      	movs	r2, #0
 8106502:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8106506:	6878      	ldr	r0, [r7, #4]
 8106508:	f000 f88e 	bl	8106628 <UART_WaitOnFlagUntilTimeout>
 810650c:	4603      	mov	r3, r0
 810650e:	2b00      	cmp	r3, #0
 8106510:	d022      	beq.n	8106558 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8106512:	687b      	ldr	r3, [r7, #4]
 8106514:	681b      	ldr	r3, [r3, #0]
 8106516:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810651a:	e853 3f00 	ldrex	r3, [r3]
 810651e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8106520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106522:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8106526:	653b      	str	r3, [r7, #80]	@ 0x50
 8106528:	687b      	ldr	r3, [r7, #4]
 810652a:	681b      	ldr	r3, [r3, #0]
 810652c:	461a      	mov	r2, r3
 810652e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8106530:	647b      	str	r3, [r7, #68]	@ 0x44
 8106532:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106534:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8106536:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8106538:	e841 2300 	strex	r3, r2, [r1]
 810653c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810653e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8106540:	2b00      	cmp	r3, #0
 8106542:	d1e6      	bne.n	8106512 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8106544:	687b      	ldr	r3, [r7, #4]
 8106546:	2220      	movs	r2, #32
 8106548:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 810654c:	687b      	ldr	r3, [r7, #4]
 810654e:	2200      	movs	r2, #0
 8106550:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8106554:	2303      	movs	r3, #3
 8106556:	e063      	b.n	8106620 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8106558:	687b      	ldr	r3, [r7, #4]
 810655a:	681b      	ldr	r3, [r3, #0]
 810655c:	681b      	ldr	r3, [r3, #0]
 810655e:	f003 0304 	and.w	r3, r3, #4
 8106562:	2b04      	cmp	r3, #4
 8106564:	d149      	bne.n	81065fa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8106566:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810656a:	9300      	str	r3, [sp, #0]
 810656c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810656e:	2200      	movs	r2, #0
 8106570:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8106574:	6878      	ldr	r0, [r7, #4]
 8106576:	f000 f857 	bl	8106628 <UART_WaitOnFlagUntilTimeout>
 810657a:	4603      	mov	r3, r0
 810657c:	2b00      	cmp	r3, #0
 810657e:	d03c      	beq.n	81065fa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8106580:	687b      	ldr	r3, [r7, #4]
 8106582:	681b      	ldr	r3, [r3, #0]
 8106584:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106588:	e853 3f00 	ldrex	r3, [r3]
 810658c:	623b      	str	r3, [r7, #32]
   return(result);
 810658e:	6a3b      	ldr	r3, [r7, #32]
 8106590:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8106594:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8106596:	687b      	ldr	r3, [r7, #4]
 8106598:	681b      	ldr	r3, [r3, #0]
 810659a:	461a      	mov	r2, r3
 810659c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810659e:	633b      	str	r3, [r7, #48]	@ 0x30
 81065a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81065a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 81065a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81065a6:	e841 2300 	strex	r3, r2, [r1]
 81065aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 81065ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81065ae:	2b00      	cmp	r3, #0
 81065b0:	d1e6      	bne.n	8106580 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 81065b2:	687b      	ldr	r3, [r7, #4]
 81065b4:	681b      	ldr	r3, [r3, #0]
 81065b6:	3308      	adds	r3, #8
 81065b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81065ba:	693b      	ldr	r3, [r7, #16]
 81065bc:	e853 3f00 	ldrex	r3, [r3]
 81065c0:	60fb      	str	r3, [r7, #12]
   return(result);
 81065c2:	68fb      	ldr	r3, [r7, #12]
 81065c4:	f023 0301 	bic.w	r3, r3, #1
 81065c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 81065ca:	687b      	ldr	r3, [r7, #4]
 81065cc:	681b      	ldr	r3, [r3, #0]
 81065ce:	3308      	adds	r3, #8
 81065d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 81065d2:	61fa      	str	r2, [r7, #28]
 81065d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81065d6:	69b9      	ldr	r1, [r7, #24]
 81065d8:	69fa      	ldr	r2, [r7, #28]
 81065da:	e841 2300 	strex	r3, r2, [r1]
 81065de:	617b      	str	r3, [r7, #20]
   return(result);
 81065e0:	697b      	ldr	r3, [r7, #20]
 81065e2:	2b00      	cmp	r3, #0
 81065e4:	d1e5      	bne.n	81065b2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 81065e6:	687b      	ldr	r3, [r7, #4]
 81065e8:	2220      	movs	r2, #32
 81065ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 81065ee:	687b      	ldr	r3, [r7, #4]
 81065f0:	2200      	movs	r2, #0
 81065f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 81065f6:	2303      	movs	r3, #3
 81065f8:	e012      	b.n	8106620 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 81065fa:	687b      	ldr	r3, [r7, #4]
 81065fc:	2220      	movs	r2, #32
 81065fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8106602:	687b      	ldr	r3, [r7, #4]
 8106604:	2220      	movs	r2, #32
 8106606:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810660a:	687b      	ldr	r3, [r7, #4]
 810660c:	2200      	movs	r2, #0
 810660e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8106610:	687b      	ldr	r3, [r7, #4]
 8106612:	2200      	movs	r2, #0
 8106614:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8106616:	687b      	ldr	r3, [r7, #4]
 8106618:	2200      	movs	r2, #0
 810661a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810661e:	2300      	movs	r3, #0
}
 8106620:	4618      	mov	r0, r3
 8106622:	3758      	adds	r7, #88	@ 0x58
 8106624:	46bd      	mov	sp, r7
 8106626:	bd80      	pop	{r7, pc}

08106628 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8106628:	b580      	push	{r7, lr}
 810662a:	b084      	sub	sp, #16
 810662c:	af00      	add	r7, sp, #0
 810662e:	60f8      	str	r0, [r7, #12]
 8106630:	60b9      	str	r1, [r7, #8]
 8106632:	603b      	str	r3, [r7, #0]
 8106634:	4613      	mov	r3, r2
 8106636:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8106638:	e04f      	b.n	81066da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810663a:	69bb      	ldr	r3, [r7, #24]
 810663c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106640:	d04b      	beq.n	81066da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8106642:	f7fe f857 	bl	81046f4 <HAL_GetTick>
 8106646:	4602      	mov	r2, r0
 8106648:	683b      	ldr	r3, [r7, #0]
 810664a:	1ad3      	subs	r3, r2, r3
 810664c:	69ba      	ldr	r2, [r7, #24]
 810664e:	429a      	cmp	r2, r3
 8106650:	d302      	bcc.n	8106658 <UART_WaitOnFlagUntilTimeout+0x30>
 8106652:	69bb      	ldr	r3, [r7, #24]
 8106654:	2b00      	cmp	r3, #0
 8106656:	d101      	bne.n	810665c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8106658:	2303      	movs	r3, #3
 810665a:	e04e      	b.n	81066fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 810665c:	68fb      	ldr	r3, [r7, #12]
 810665e:	681b      	ldr	r3, [r3, #0]
 8106660:	681b      	ldr	r3, [r3, #0]
 8106662:	f003 0304 	and.w	r3, r3, #4
 8106666:	2b00      	cmp	r3, #0
 8106668:	d037      	beq.n	81066da <UART_WaitOnFlagUntilTimeout+0xb2>
 810666a:	68bb      	ldr	r3, [r7, #8]
 810666c:	2b80      	cmp	r3, #128	@ 0x80
 810666e:	d034      	beq.n	81066da <UART_WaitOnFlagUntilTimeout+0xb2>
 8106670:	68bb      	ldr	r3, [r7, #8]
 8106672:	2b40      	cmp	r3, #64	@ 0x40
 8106674:	d031      	beq.n	81066da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8106676:	68fb      	ldr	r3, [r7, #12]
 8106678:	681b      	ldr	r3, [r3, #0]
 810667a:	69db      	ldr	r3, [r3, #28]
 810667c:	f003 0308 	and.w	r3, r3, #8
 8106680:	2b08      	cmp	r3, #8
 8106682:	d110      	bne.n	81066a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8106684:	68fb      	ldr	r3, [r7, #12]
 8106686:	681b      	ldr	r3, [r3, #0]
 8106688:	2208      	movs	r2, #8
 810668a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810668c:	68f8      	ldr	r0, [r7, #12]
 810668e:	f000 f838 	bl	8106702 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8106692:	68fb      	ldr	r3, [r7, #12]
 8106694:	2208      	movs	r2, #8
 8106696:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810669a:	68fb      	ldr	r3, [r7, #12]
 810669c:	2200      	movs	r2, #0
 810669e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 81066a2:	2301      	movs	r3, #1
 81066a4:	e029      	b.n	81066fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 81066a6:	68fb      	ldr	r3, [r7, #12]
 81066a8:	681b      	ldr	r3, [r3, #0]
 81066aa:	69db      	ldr	r3, [r3, #28]
 81066ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 81066b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 81066b4:	d111      	bne.n	81066da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 81066b6:	68fb      	ldr	r3, [r7, #12]
 81066b8:	681b      	ldr	r3, [r3, #0]
 81066ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 81066be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 81066c0:	68f8      	ldr	r0, [r7, #12]
 81066c2:	f000 f81e 	bl	8106702 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 81066c6:	68fb      	ldr	r3, [r7, #12]
 81066c8:	2220      	movs	r2, #32
 81066ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 81066ce:	68fb      	ldr	r3, [r7, #12]
 81066d0:	2200      	movs	r2, #0
 81066d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 81066d6:	2303      	movs	r3, #3
 81066d8:	e00f      	b.n	81066fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81066da:	68fb      	ldr	r3, [r7, #12]
 81066dc:	681b      	ldr	r3, [r3, #0]
 81066de:	69da      	ldr	r2, [r3, #28]
 81066e0:	68bb      	ldr	r3, [r7, #8]
 81066e2:	4013      	ands	r3, r2
 81066e4:	68ba      	ldr	r2, [r7, #8]
 81066e6:	429a      	cmp	r2, r3
 81066e8:	bf0c      	ite	eq
 81066ea:	2301      	moveq	r3, #1
 81066ec:	2300      	movne	r3, #0
 81066ee:	b2db      	uxtb	r3, r3
 81066f0:	461a      	mov	r2, r3
 81066f2:	79fb      	ldrb	r3, [r7, #7]
 81066f4:	429a      	cmp	r2, r3
 81066f6:	d0a0      	beq.n	810663a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 81066f8:	2300      	movs	r3, #0
}
 81066fa:	4618      	mov	r0, r3
 81066fc:	3710      	adds	r7, #16
 81066fe:	46bd      	mov	sp, r7
 8106700:	bd80      	pop	{r7, pc}

08106702 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8106702:	b480      	push	{r7}
 8106704:	b095      	sub	sp, #84	@ 0x54
 8106706:	af00      	add	r7, sp, #0
 8106708:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810670a:	687b      	ldr	r3, [r7, #4]
 810670c:	681b      	ldr	r3, [r3, #0]
 810670e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106712:	e853 3f00 	ldrex	r3, [r3]
 8106716:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8106718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810671a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810671e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8106720:	687b      	ldr	r3, [r7, #4]
 8106722:	681b      	ldr	r3, [r3, #0]
 8106724:	461a      	mov	r2, r3
 8106726:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8106728:	643b      	str	r3, [r7, #64]	@ 0x40
 810672a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810672c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 810672e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8106730:	e841 2300 	strex	r3, r2, [r1]
 8106734:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8106736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106738:	2b00      	cmp	r3, #0
 810673a:	d1e6      	bne.n	810670a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810673c:	687b      	ldr	r3, [r7, #4]
 810673e:	681b      	ldr	r3, [r3, #0]
 8106740:	3308      	adds	r3, #8
 8106742:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106744:	6a3b      	ldr	r3, [r7, #32]
 8106746:	e853 3f00 	ldrex	r3, [r3]
 810674a:	61fb      	str	r3, [r7, #28]
   return(result);
 810674c:	69fb      	ldr	r3, [r7, #28]
 810674e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8106752:	f023 0301 	bic.w	r3, r3, #1
 8106756:	64bb      	str	r3, [r7, #72]	@ 0x48
 8106758:	687b      	ldr	r3, [r7, #4]
 810675a:	681b      	ldr	r3, [r3, #0]
 810675c:	3308      	adds	r3, #8
 810675e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8106760:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8106762:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106764:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8106766:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8106768:	e841 2300 	strex	r3, r2, [r1]
 810676c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810676e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106770:	2b00      	cmp	r3, #0
 8106772:	d1e3      	bne.n	810673c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8106774:	687b      	ldr	r3, [r7, #4]
 8106776:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8106778:	2b01      	cmp	r3, #1
 810677a:	d118      	bne.n	81067ae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810677c:	687b      	ldr	r3, [r7, #4]
 810677e:	681b      	ldr	r3, [r3, #0]
 8106780:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106782:	68fb      	ldr	r3, [r7, #12]
 8106784:	e853 3f00 	ldrex	r3, [r3]
 8106788:	60bb      	str	r3, [r7, #8]
   return(result);
 810678a:	68bb      	ldr	r3, [r7, #8]
 810678c:	f023 0310 	bic.w	r3, r3, #16
 8106790:	647b      	str	r3, [r7, #68]	@ 0x44
 8106792:	687b      	ldr	r3, [r7, #4]
 8106794:	681b      	ldr	r3, [r3, #0]
 8106796:	461a      	mov	r2, r3
 8106798:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810679a:	61bb      	str	r3, [r7, #24]
 810679c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810679e:	6979      	ldr	r1, [r7, #20]
 81067a0:	69ba      	ldr	r2, [r7, #24]
 81067a2:	e841 2300 	strex	r3, r2, [r1]
 81067a6:	613b      	str	r3, [r7, #16]
   return(result);
 81067a8:	693b      	ldr	r3, [r7, #16]
 81067aa:	2b00      	cmp	r3, #0
 81067ac:	d1e6      	bne.n	810677c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 81067ae:	687b      	ldr	r3, [r7, #4]
 81067b0:	2220      	movs	r2, #32
 81067b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81067b6:	687b      	ldr	r3, [r7, #4]
 81067b8:	2200      	movs	r2, #0
 81067ba:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 81067bc:	687b      	ldr	r3, [r7, #4]
 81067be:	2200      	movs	r2, #0
 81067c0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 81067c2:	bf00      	nop
 81067c4:	3754      	adds	r7, #84	@ 0x54
 81067c6:	46bd      	mov	sp, r7
 81067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81067cc:	4770      	bx	lr

081067ce <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 81067ce:	b480      	push	{r7}
 81067d0:	b085      	sub	sp, #20
 81067d2:	af00      	add	r7, sp, #0
 81067d4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 81067d6:	687b      	ldr	r3, [r7, #4]
 81067d8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 81067dc:	2b01      	cmp	r3, #1
 81067de:	d101      	bne.n	81067e4 <HAL_UARTEx_DisableFifoMode+0x16>
 81067e0:	2302      	movs	r3, #2
 81067e2:	e027      	b.n	8106834 <HAL_UARTEx_DisableFifoMode+0x66>
 81067e4:	687b      	ldr	r3, [r7, #4]
 81067e6:	2201      	movs	r2, #1
 81067e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 81067ec:	687b      	ldr	r3, [r7, #4]
 81067ee:	2224      	movs	r2, #36	@ 0x24
 81067f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81067f4:	687b      	ldr	r3, [r7, #4]
 81067f6:	681b      	ldr	r3, [r3, #0]
 81067f8:	681b      	ldr	r3, [r3, #0]
 81067fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81067fc:	687b      	ldr	r3, [r7, #4]
 81067fe:	681b      	ldr	r3, [r3, #0]
 8106800:	681a      	ldr	r2, [r3, #0]
 8106802:	687b      	ldr	r3, [r7, #4]
 8106804:	681b      	ldr	r3, [r3, #0]
 8106806:	f022 0201 	bic.w	r2, r2, #1
 810680a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810680c:	68fb      	ldr	r3, [r7, #12]
 810680e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8106812:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8106814:	687b      	ldr	r3, [r7, #4]
 8106816:	2200      	movs	r2, #0
 8106818:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810681a:	687b      	ldr	r3, [r7, #4]
 810681c:	681b      	ldr	r3, [r3, #0]
 810681e:	68fa      	ldr	r2, [r7, #12]
 8106820:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8106822:	687b      	ldr	r3, [r7, #4]
 8106824:	2220      	movs	r2, #32
 8106826:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810682a:	687b      	ldr	r3, [r7, #4]
 810682c:	2200      	movs	r2, #0
 810682e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8106832:	2300      	movs	r3, #0
}
 8106834:	4618      	mov	r0, r3
 8106836:	3714      	adds	r7, #20
 8106838:	46bd      	mov	sp, r7
 810683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810683e:	4770      	bx	lr

08106840 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8106840:	b580      	push	{r7, lr}
 8106842:	b084      	sub	sp, #16
 8106844:	af00      	add	r7, sp, #0
 8106846:	6078      	str	r0, [r7, #4]
 8106848:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810684a:	687b      	ldr	r3, [r7, #4]
 810684c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8106850:	2b01      	cmp	r3, #1
 8106852:	d101      	bne.n	8106858 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8106854:	2302      	movs	r3, #2
 8106856:	e02d      	b.n	81068b4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8106858:	687b      	ldr	r3, [r7, #4]
 810685a:	2201      	movs	r2, #1
 810685c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8106860:	687b      	ldr	r3, [r7, #4]
 8106862:	2224      	movs	r2, #36	@ 0x24
 8106864:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8106868:	687b      	ldr	r3, [r7, #4]
 810686a:	681b      	ldr	r3, [r3, #0]
 810686c:	681b      	ldr	r3, [r3, #0]
 810686e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8106870:	687b      	ldr	r3, [r7, #4]
 8106872:	681b      	ldr	r3, [r3, #0]
 8106874:	681a      	ldr	r2, [r3, #0]
 8106876:	687b      	ldr	r3, [r7, #4]
 8106878:	681b      	ldr	r3, [r3, #0]
 810687a:	f022 0201 	bic.w	r2, r2, #1
 810687e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8106880:	687b      	ldr	r3, [r7, #4]
 8106882:	681b      	ldr	r3, [r3, #0]
 8106884:	689b      	ldr	r3, [r3, #8]
 8106886:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 810688a:	687b      	ldr	r3, [r7, #4]
 810688c:	681b      	ldr	r3, [r3, #0]
 810688e:	683a      	ldr	r2, [r7, #0]
 8106890:	430a      	orrs	r2, r1
 8106892:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8106894:	6878      	ldr	r0, [r7, #4]
 8106896:	f000 f84f 	bl	8106938 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810689a:	687b      	ldr	r3, [r7, #4]
 810689c:	681b      	ldr	r3, [r3, #0]
 810689e:	68fa      	ldr	r2, [r7, #12]
 81068a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81068a2:	687b      	ldr	r3, [r7, #4]
 81068a4:	2220      	movs	r2, #32
 81068a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81068aa:	687b      	ldr	r3, [r7, #4]
 81068ac:	2200      	movs	r2, #0
 81068ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 81068b2:	2300      	movs	r3, #0
}
 81068b4:	4618      	mov	r0, r3
 81068b6:	3710      	adds	r7, #16
 81068b8:	46bd      	mov	sp, r7
 81068ba:	bd80      	pop	{r7, pc}

081068bc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 81068bc:	b580      	push	{r7, lr}
 81068be:	b084      	sub	sp, #16
 81068c0:	af00      	add	r7, sp, #0
 81068c2:	6078      	str	r0, [r7, #4]
 81068c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 81068c6:	687b      	ldr	r3, [r7, #4]
 81068c8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 81068cc:	2b01      	cmp	r3, #1
 81068ce:	d101      	bne.n	81068d4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 81068d0:	2302      	movs	r3, #2
 81068d2:	e02d      	b.n	8106930 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 81068d4:	687b      	ldr	r3, [r7, #4]
 81068d6:	2201      	movs	r2, #1
 81068d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 81068dc:	687b      	ldr	r3, [r7, #4]
 81068de:	2224      	movs	r2, #36	@ 0x24
 81068e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81068e4:	687b      	ldr	r3, [r7, #4]
 81068e6:	681b      	ldr	r3, [r3, #0]
 81068e8:	681b      	ldr	r3, [r3, #0]
 81068ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81068ec:	687b      	ldr	r3, [r7, #4]
 81068ee:	681b      	ldr	r3, [r3, #0]
 81068f0:	681a      	ldr	r2, [r3, #0]
 81068f2:	687b      	ldr	r3, [r7, #4]
 81068f4:	681b      	ldr	r3, [r3, #0]
 81068f6:	f022 0201 	bic.w	r2, r2, #1
 81068fa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 81068fc:	687b      	ldr	r3, [r7, #4]
 81068fe:	681b      	ldr	r3, [r3, #0]
 8106900:	689b      	ldr	r3, [r3, #8]
 8106902:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8106906:	687b      	ldr	r3, [r7, #4]
 8106908:	681b      	ldr	r3, [r3, #0]
 810690a:	683a      	ldr	r2, [r7, #0]
 810690c:	430a      	orrs	r2, r1
 810690e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8106910:	6878      	ldr	r0, [r7, #4]
 8106912:	f000 f811 	bl	8106938 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8106916:	687b      	ldr	r3, [r7, #4]
 8106918:	681b      	ldr	r3, [r3, #0]
 810691a:	68fa      	ldr	r2, [r7, #12]
 810691c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810691e:	687b      	ldr	r3, [r7, #4]
 8106920:	2220      	movs	r2, #32
 8106922:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8106926:	687b      	ldr	r3, [r7, #4]
 8106928:	2200      	movs	r2, #0
 810692a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810692e:	2300      	movs	r3, #0
}
 8106930:	4618      	mov	r0, r3
 8106932:	3710      	adds	r7, #16
 8106934:	46bd      	mov	sp, r7
 8106936:	bd80      	pop	{r7, pc}

08106938 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8106938:	b480      	push	{r7}
 810693a:	b085      	sub	sp, #20
 810693c:	af00      	add	r7, sp, #0
 810693e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8106940:	687b      	ldr	r3, [r7, #4]
 8106942:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8106944:	2b00      	cmp	r3, #0
 8106946:	d108      	bne.n	810695a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8106948:	687b      	ldr	r3, [r7, #4]
 810694a:	2201      	movs	r2, #1
 810694c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8106950:	687b      	ldr	r3, [r7, #4]
 8106952:	2201      	movs	r2, #1
 8106954:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8106958:	e031      	b.n	81069be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810695a:	2310      	movs	r3, #16
 810695c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810695e:	2310      	movs	r3, #16
 8106960:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8106962:	687b      	ldr	r3, [r7, #4]
 8106964:	681b      	ldr	r3, [r3, #0]
 8106966:	689b      	ldr	r3, [r3, #8]
 8106968:	0e5b      	lsrs	r3, r3, #25
 810696a:	b2db      	uxtb	r3, r3
 810696c:	f003 0307 	and.w	r3, r3, #7
 8106970:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8106972:	687b      	ldr	r3, [r7, #4]
 8106974:	681b      	ldr	r3, [r3, #0]
 8106976:	689b      	ldr	r3, [r3, #8]
 8106978:	0f5b      	lsrs	r3, r3, #29
 810697a:	b2db      	uxtb	r3, r3
 810697c:	f003 0307 	and.w	r3, r3, #7
 8106980:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8106982:	7bbb      	ldrb	r3, [r7, #14]
 8106984:	7b3a      	ldrb	r2, [r7, #12]
 8106986:	4911      	ldr	r1, [pc, #68]	@ (81069cc <UARTEx_SetNbDataToProcess+0x94>)
 8106988:	5c8a      	ldrb	r2, [r1, r2]
 810698a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810698e:	7b3a      	ldrb	r2, [r7, #12]
 8106990:	490f      	ldr	r1, [pc, #60]	@ (81069d0 <UARTEx_SetNbDataToProcess+0x98>)
 8106992:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8106994:	fb93 f3f2 	sdiv	r3, r3, r2
 8106998:	b29a      	uxth	r2, r3
 810699a:	687b      	ldr	r3, [r7, #4]
 810699c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 81069a0:	7bfb      	ldrb	r3, [r7, #15]
 81069a2:	7b7a      	ldrb	r2, [r7, #13]
 81069a4:	4909      	ldr	r1, [pc, #36]	@ (81069cc <UARTEx_SetNbDataToProcess+0x94>)
 81069a6:	5c8a      	ldrb	r2, [r1, r2]
 81069a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 81069ac:	7b7a      	ldrb	r2, [r7, #13]
 81069ae:	4908      	ldr	r1, [pc, #32]	@ (81069d0 <UARTEx_SetNbDataToProcess+0x98>)
 81069b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 81069b2:	fb93 f3f2 	sdiv	r3, r3, r2
 81069b6:	b29a      	uxth	r2, r3
 81069b8:	687b      	ldr	r3, [r7, #4]
 81069ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 81069be:	bf00      	nop
 81069c0:	3714      	adds	r7, #20
 81069c2:	46bd      	mov	sp, r7
 81069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81069c8:	4770      	bx	lr
 81069ca:	bf00      	nop
 81069cc:	0810b1ec 	.word	0x0810b1ec
 81069d0:	0810b1f4 	.word	0x0810b1f4

081069d4 <LL_GPIO_SetPinMode>:
{
 81069d4:	b480      	push	{r7}
 81069d6:	b085      	sub	sp, #20
 81069d8:	af00      	add	r7, sp, #0
 81069da:	60f8      	str	r0, [r7, #12]
 81069dc:	60b9      	str	r1, [r7, #8]
 81069de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 81069e0:	68fb      	ldr	r3, [r7, #12]
 81069e2:	6819      	ldr	r1, [r3, #0]
 81069e4:	68bb      	ldr	r3, [r7, #8]
 81069e6:	fb03 f203 	mul.w	r2, r3, r3
 81069ea:	4613      	mov	r3, r2
 81069ec:	005b      	lsls	r3, r3, #1
 81069ee:	4413      	add	r3, r2
 81069f0:	43db      	mvns	r3, r3
 81069f2:	ea01 0203 	and.w	r2, r1, r3
 81069f6:	68bb      	ldr	r3, [r7, #8]
 81069f8:	fb03 f303 	mul.w	r3, r3, r3
 81069fc:	6879      	ldr	r1, [r7, #4]
 81069fe:	fb01 f303 	mul.w	r3, r1, r3
 8106a02:	431a      	orrs	r2, r3
 8106a04:	68fb      	ldr	r3, [r7, #12]
 8106a06:	601a      	str	r2, [r3, #0]
}
 8106a08:	bf00      	nop
 8106a0a:	3714      	adds	r7, #20
 8106a0c:	46bd      	mov	sp, r7
 8106a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106a12:	4770      	bx	lr

08106a14 <LL_GPIO_SetPinOutputType>:
{
 8106a14:	b480      	push	{r7}
 8106a16:	b085      	sub	sp, #20
 8106a18:	af00      	add	r7, sp, #0
 8106a1a:	60f8      	str	r0, [r7, #12]
 8106a1c:	60b9      	str	r1, [r7, #8]
 8106a1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8106a20:	68fb      	ldr	r3, [r7, #12]
 8106a22:	685a      	ldr	r2, [r3, #4]
 8106a24:	68bb      	ldr	r3, [r7, #8]
 8106a26:	43db      	mvns	r3, r3
 8106a28:	401a      	ands	r2, r3
 8106a2a:	68bb      	ldr	r3, [r7, #8]
 8106a2c:	6879      	ldr	r1, [r7, #4]
 8106a2e:	fb01 f303 	mul.w	r3, r1, r3
 8106a32:	431a      	orrs	r2, r3
 8106a34:	68fb      	ldr	r3, [r7, #12]
 8106a36:	605a      	str	r2, [r3, #4]
}
 8106a38:	bf00      	nop
 8106a3a:	3714      	adds	r7, #20
 8106a3c:	46bd      	mov	sp, r7
 8106a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106a42:	4770      	bx	lr

08106a44 <LL_GPIO_SetPinSpeed>:
{
 8106a44:	b480      	push	{r7}
 8106a46:	b085      	sub	sp, #20
 8106a48:	af00      	add	r7, sp, #0
 8106a4a:	60f8      	str	r0, [r7, #12]
 8106a4c:	60b9      	str	r1, [r7, #8]
 8106a4e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8106a50:	68fb      	ldr	r3, [r7, #12]
 8106a52:	6899      	ldr	r1, [r3, #8]
 8106a54:	68bb      	ldr	r3, [r7, #8]
 8106a56:	fb03 f203 	mul.w	r2, r3, r3
 8106a5a:	4613      	mov	r3, r2
 8106a5c:	005b      	lsls	r3, r3, #1
 8106a5e:	4413      	add	r3, r2
 8106a60:	43db      	mvns	r3, r3
 8106a62:	ea01 0203 	and.w	r2, r1, r3
 8106a66:	68bb      	ldr	r3, [r7, #8]
 8106a68:	fb03 f303 	mul.w	r3, r3, r3
 8106a6c:	6879      	ldr	r1, [r7, #4]
 8106a6e:	fb01 f303 	mul.w	r3, r1, r3
 8106a72:	431a      	orrs	r2, r3
 8106a74:	68fb      	ldr	r3, [r7, #12]
 8106a76:	609a      	str	r2, [r3, #8]
}
 8106a78:	bf00      	nop
 8106a7a:	3714      	adds	r7, #20
 8106a7c:	46bd      	mov	sp, r7
 8106a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106a82:	4770      	bx	lr

08106a84 <LL_GPIO_SetPinPull>:
{
 8106a84:	b480      	push	{r7}
 8106a86:	b085      	sub	sp, #20
 8106a88:	af00      	add	r7, sp, #0
 8106a8a:	60f8      	str	r0, [r7, #12]
 8106a8c:	60b9      	str	r1, [r7, #8]
 8106a8e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8106a90:	68fb      	ldr	r3, [r7, #12]
 8106a92:	68d9      	ldr	r1, [r3, #12]
 8106a94:	68bb      	ldr	r3, [r7, #8]
 8106a96:	fb03 f203 	mul.w	r2, r3, r3
 8106a9a:	4613      	mov	r3, r2
 8106a9c:	005b      	lsls	r3, r3, #1
 8106a9e:	4413      	add	r3, r2
 8106aa0:	43db      	mvns	r3, r3
 8106aa2:	ea01 0203 	and.w	r2, r1, r3
 8106aa6:	68bb      	ldr	r3, [r7, #8]
 8106aa8:	fb03 f303 	mul.w	r3, r3, r3
 8106aac:	6879      	ldr	r1, [r7, #4]
 8106aae:	fb01 f303 	mul.w	r3, r1, r3
 8106ab2:	431a      	orrs	r2, r3
 8106ab4:	68fb      	ldr	r3, [r7, #12]
 8106ab6:	60da      	str	r2, [r3, #12]
}
 8106ab8:	bf00      	nop
 8106aba:	3714      	adds	r7, #20
 8106abc:	46bd      	mov	sp, r7
 8106abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106ac2:	4770      	bx	lr

08106ac4 <LL_GPIO_SetAFPin_0_7>:
{
 8106ac4:	b480      	push	{r7}
 8106ac6:	b085      	sub	sp, #20
 8106ac8:	af00      	add	r7, sp, #0
 8106aca:	60f8      	str	r0, [r7, #12]
 8106acc:	60b9      	str	r1, [r7, #8]
 8106ace:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8106ad0:	68fb      	ldr	r3, [r7, #12]
 8106ad2:	6a19      	ldr	r1, [r3, #32]
 8106ad4:	68bb      	ldr	r3, [r7, #8]
 8106ad6:	fb03 f303 	mul.w	r3, r3, r3
 8106ada:	68ba      	ldr	r2, [r7, #8]
 8106adc:	fb02 f303 	mul.w	r3, r2, r3
 8106ae0:	68ba      	ldr	r2, [r7, #8]
 8106ae2:	fb03 f202 	mul.w	r2, r3, r2
 8106ae6:	4613      	mov	r3, r2
 8106ae8:	011b      	lsls	r3, r3, #4
 8106aea:	1a9b      	subs	r3, r3, r2
 8106aec:	43db      	mvns	r3, r3
 8106aee:	ea01 0203 	and.w	r2, r1, r3
 8106af2:	68bb      	ldr	r3, [r7, #8]
 8106af4:	fb03 f303 	mul.w	r3, r3, r3
 8106af8:	68b9      	ldr	r1, [r7, #8]
 8106afa:	fb01 f303 	mul.w	r3, r1, r3
 8106afe:	68b9      	ldr	r1, [r7, #8]
 8106b00:	fb01 f303 	mul.w	r3, r1, r3
 8106b04:	6879      	ldr	r1, [r7, #4]
 8106b06:	fb01 f303 	mul.w	r3, r1, r3
 8106b0a:	431a      	orrs	r2, r3
 8106b0c:	68fb      	ldr	r3, [r7, #12]
 8106b0e:	621a      	str	r2, [r3, #32]
}
 8106b10:	bf00      	nop
 8106b12:	3714      	adds	r7, #20
 8106b14:	46bd      	mov	sp, r7
 8106b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b1a:	4770      	bx	lr

08106b1c <LL_GPIO_SetAFPin_8_15>:
{
 8106b1c:	b480      	push	{r7}
 8106b1e:	b085      	sub	sp, #20
 8106b20:	af00      	add	r7, sp, #0
 8106b22:	60f8      	str	r0, [r7, #12]
 8106b24:	60b9      	str	r1, [r7, #8]
 8106b26:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8106b28:	68fb      	ldr	r3, [r7, #12]
 8106b2a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8106b2c:	68bb      	ldr	r3, [r7, #8]
 8106b2e:	0a1b      	lsrs	r3, r3, #8
 8106b30:	68ba      	ldr	r2, [r7, #8]
 8106b32:	0a12      	lsrs	r2, r2, #8
 8106b34:	fb02 f303 	mul.w	r3, r2, r3
 8106b38:	68ba      	ldr	r2, [r7, #8]
 8106b3a:	0a12      	lsrs	r2, r2, #8
 8106b3c:	fb02 f303 	mul.w	r3, r2, r3
 8106b40:	68ba      	ldr	r2, [r7, #8]
 8106b42:	0a12      	lsrs	r2, r2, #8
 8106b44:	fb03 f202 	mul.w	r2, r3, r2
 8106b48:	4613      	mov	r3, r2
 8106b4a:	011b      	lsls	r3, r3, #4
 8106b4c:	1a9b      	subs	r3, r3, r2
 8106b4e:	43db      	mvns	r3, r3
 8106b50:	ea01 0203 	and.w	r2, r1, r3
 8106b54:	68bb      	ldr	r3, [r7, #8]
 8106b56:	0a1b      	lsrs	r3, r3, #8
 8106b58:	68b9      	ldr	r1, [r7, #8]
 8106b5a:	0a09      	lsrs	r1, r1, #8
 8106b5c:	fb01 f303 	mul.w	r3, r1, r3
 8106b60:	68b9      	ldr	r1, [r7, #8]
 8106b62:	0a09      	lsrs	r1, r1, #8
 8106b64:	fb01 f303 	mul.w	r3, r1, r3
 8106b68:	68b9      	ldr	r1, [r7, #8]
 8106b6a:	0a09      	lsrs	r1, r1, #8
 8106b6c:	fb01 f303 	mul.w	r3, r1, r3
 8106b70:	6879      	ldr	r1, [r7, #4]
 8106b72:	fb01 f303 	mul.w	r3, r1, r3
 8106b76:	431a      	orrs	r2, r3
 8106b78:	68fb      	ldr	r3, [r7, #12]
 8106b7a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8106b7c:	bf00      	nop
 8106b7e:	3714      	adds	r7, #20
 8106b80:	46bd      	mov	sp, r7
 8106b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b86:	4770      	bx	lr

08106b88 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8106b88:	b580      	push	{r7, lr}
 8106b8a:	b088      	sub	sp, #32
 8106b8c:	af00      	add	r7, sp, #0
 8106b8e:	6078      	str	r0, [r7, #4]
 8106b90:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8106b92:	683b      	ldr	r3, [r7, #0]
 8106b94:	681b      	ldr	r3, [r3, #0]
 8106b96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8106b98:	693b      	ldr	r3, [r7, #16]
 8106b9a:	fa93 f3a3 	rbit	r3, r3
 8106b9e:	60fb      	str	r3, [r7, #12]
  return result;
 8106ba0:	68fb      	ldr	r3, [r7, #12]
 8106ba2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8106ba4:	697b      	ldr	r3, [r7, #20]
 8106ba6:	2b00      	cmp	r3, #0
 8106ba8:	d101      	bne.n	8106bae <LL_GPIO_Init+0x26>
    return 32U;
 8106baa:	2320      	movs	r3, #32
 8106bac:	e003      	b.n	8106bb6 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8106bae:	697b      	ldr	r3, [r7, #20]
 8106bb0:	fab3 f383 	clz	r3, r3
 8106bb4:	b2db      	uxtb	r3, r3
 8106bb6:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8106bb8:	e048      	b.n	8106c4c <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8106bba:	683b      	ldr	r3, [r7, #0]
 8106bbc:	681a      	ldr	r2, [r3, #0]
 8106bbe:	2101      	movs	r1, #1
 8106bc0:	69fb      	ldr	r3, [r7, #28]
 8106bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8106bc6:	4013      	ands	r3, r2
 8106bc8:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00000000U)
 8106bca:	69bb      	ldr	r3, [r7, #24]
 8106bcc:	2b00      	cmp	r3, #0
 8106bce:	d03a      	beq.n	8106c46 <LL_GPIO_Init+0xbe>
    {

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8106bd0:	683b      	ldr	r3, [r7, #0]
 8106bd2:	685b      	ldr	r3, [r3, #4]
 8106bd4:	2b01      	cmp	r3, #1
 8106bd6:	d003      	beq.n	8106be0 <LL_GPIO_Init+0x58>
 8106bd8:	683b      	ldr	r3, [r7, #0]
 8106bda:	685b      	ldr	r3, [r3, #4]
 8106bdc:	2b02      	cmp	r3, #2
 8106bde:	d10e      	bne.n	8106bfe <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8106be0:	683b      	ldr	r3, [r7, #0]
 8106be2:	689b      	ldr	r3, [r3, #8]
 8106be4:	461a      	mov	r2, r3
 8106be6:	69b9      	ldr	r1, [r7, #24]
 8106be8:	6878      	ldr	r0, [r7, #4]
 8106bea:	f7ff ff2b 	bl	8106a44 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8106bee:	683b      	ldr	r3, [r7, #0]
 8106bf0:	6819      	ldr	r1, [r3, #0]
 8106bf2:	683b      	ldr	r3, [r7, #0]
 8106bf4:	68db      	ldr	r3, [r3, #12]
 8106bf6:	461a      	mov	r2, r3
 8106bf8:	6878      	ldr	r0, [r7, #4]
 8106bfa:	f7ff ff0b 	bl	8106a14 <LL_GPIO_SetPinOutputType>

      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8106bfe:	683b      	ldr	r3, [r7, #0]
 8106c00:	691b      	ldr	r3, [r3, #16]
 8106c02:	461a      	mov	r2, r3
 8106c04:	69b9      	ldr	r1, [r7, #24]
 8106c06:	6878      	ldr	r0, [r7, #4]
 8106c08:	f7ff ff3c 	bl	8106a84 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8106c0c:	683b      	ldr	r3, [r7, #0]
 8106c0e:	685b      	ldr	r3, [r3, #4]
 8106c10:	2b02      	cmp	r3, #2
 8106c12:	d111      	bne.n	8106c38 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8106c14:	69bb      	ldr	r3, [r7, #24]
 8106c16:	2bff      	cmp	r3, #255	@ 0xff
 8106c18:	d807      	bhi.n	8106c2a <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8106c1a:	683b      	ldr	r3, [r7, #0]
 8106c1c:	695b      	ldr	r3, [r3, #20]
 8106c1e:	461a      	mov	r2, r3
 8106c20:	69b9      	ldr	r1, [r7, #24]
 8106c22:	6878      	ldr	r0, [r7, #4]
 8106c24:	f7ff ff4e 	bl	8106ac4 <LL_GPIO_SetAFPin_0_7>
 8106c28:	e006      	b.n	8106c38 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8106c2a:	683b      	ldr	r3, [r7, #0]
 8106c2c:	695b      	ldr	r3, [r3, #20]
 8106c2e:	461a      	mov	r2, r3
 8106c30:	69b9      	ldr	r1, [r7, #24]
 8106c32:	6878      	ldr	r0, [r7, #4]
 8106c34:	f7ff ff72 	bl	8106b1c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8106c38:	683b      	ldr	r3, [r7, #0]
 8106c3a:	685b      	ldr	r3, [r3, #4]
 8106c3c:	461a      	mov	r2, r3
 8106c3e:	69b9      	ldr	r1, [r7, #24]
 8106c40:	6878      	ldr	r0, [r7, #4]
 8106c42:	f7ff fec7 	bl	81069d4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8106c46:	69fb      	ldr	r3, [r7, #28]
 8106c48:	3301      	adds	r3, #1
 8106c4a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8106c4c:	683b      	ldr	r3, [r7, #0]
 8106c4e:	681a      	ldr	r2, [r3, #0]
 8106c50:	69fb      	ldr	r3, [r7, #28]
 8106c52:	fa22 f303 	lsr.w	r3, r2, r3
 8106c56:	2b00      	cmp	r3, #0
 8106c58:	d1af      	bne.n	8106bba <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8106c5a:	2300      	movs	r3, #0
}
 8106c5c:	4618      	mov	r0, r3
 8106c5e:	3720      	adds	r7, #32
 8106c60:	46bd      	mov	sp, r7
 8106c62:	bd80      	pop	{r7, pc}

08106c64 <LL_I2C_Enable>:
{
 8106c64:	b480      	push	{r7}
 8106c66:	b083      	sub	sp, #12
 8106c68:	af00      	add	r7, sp, #0
 8106c6a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8106c6c:	687b      	ldr	r3, [r7, #4]
 8106c6e:	681b      	ldr	r3, [r3, #0]
 8106c70:	f043 0201 	orr.w	r2, r3, #1
 8106c74:	687b      	ldr	r3, [r7, #4]
 8106c76:	601a      	str	r2, [r3, #0]
}
 8106c78:	bf00      	nop
 8106c7a:	370c      	adds	r7, #12
 8106c7c:	46bd      	mov	sp, r7
 8106c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c82:	4770      	bx	lr

08106c84 <LL_I2C_Disable>:
{
 8106c84:	b480      	push	{r7}
 8106c86:	b083      	sub	sp, #12
 8106c88:	af00      	add	r7, sp, #0
 8106c8a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8106c8c:	687b      	ldr	r3, [r7, #4]
 8106c8e:	681b      	ldr	r3, [r3, #0]
 8106c90:	f023 0201 	bic.w	r2, r3, #1
 8106c94:	687b      	ldr	r3, [r7, #4]
 8106c96:	601a      	str	r2, [r3, #0]
}
 8106c98:	bf00      	nop
 8106c9a:	370c      	adds	r7, #12
 8106c9c:	46bd      	mov	sp, r7
 8106c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106ca2:	4770      	bx	lr

08106ca4 <LL_I2C_ConfigFilters>:
{
 8106ca4:	b480      	push	{r7}
 8106ca6:	b085      	sub	sp, #20
 8106ca8:	af00      	add	r7, sp, #0
 8106caa:	60f8      	str	r0, [r7, #12]
 8106cac:	60b9      	str	r1, [r7, #8]
 8106cae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8106cb0:	68fb      	ldr	r3, [r7, #12]
 8106cb2:	681b      	ldr	r3, [r3, #0]
 8106cb4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8106cb8:	687b      	ldr	r3, [r7, #4]
 8106cba:	0219      	lsls	r1, r3, #8
 8106cbc:	68bb      	ldr	r3, [r7, #8]
 8106cbe:	430b      	orrs	r3, r1
 8106cc0:	431a      	orrs	r2, r3
 8106cc2:	68fb      	ldr	r3, [r7, #12]
 8106cc4:	601a      	str	r2, [r3, #0]
}
 8106cc6:	bf00      	nop
 8106cc8:	3714      	adds	r7, #20
 8106cca:	46bd      	mov	sp, r7
 8106ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106cd0:	4770      	bx	lr

08106cd2 <LL_I2C_SetOwnAddress1>:
{
 8106cd2:	b480      	push	{r7}
 8106cd4:	b085      	sub	sp, #20
 8106cd6:	af00      	add	r7, sp, #0
 8106cd8:	60f8      	str	r0, [r7, #12]
 8106cda:	60b9      	str	r1, [r7, #8]
 8106cdc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8106cde:	68fb      	ldr	r3, [r7, #12]
 8106ce0:	689b      	ldr	r3, [r3, #8]
 8106ce2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8106ce6:	f023 0307 	bic.w	r3, r3, #7
 8106cea:	68b9      	ldr	r1, [r7, #8]
 8106cec:	687a      	ldr	r2, [r7, #4]
 8106cee:	430a      	orrs	r2, r1
 8106cf0:	431a      	orrs	r2, r3
 8106cf2:	68fb      	ldr	r3, [r7, #12]
 8106cf4:	609a      	str	r2, [r3, #8]
}
 8106cf6:	bf00      	nop
 8106cf8:	3714      	adds	r7, #20
 8106cfa:	46bd      	mov	sp, r7
 8106cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d00:	4770      	bx	lr

08106d02 <LL_I2C_EnableOwnAddress1>:
{
 8106d02:	b480      	push	{r7}
 8106d04:	b083      	sub	sp, #12
 8106d06:	af00      	add	r7, sp, #0
 8106d08:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8106d0a:	687b      	ldr	r3, [r7, #4]
 8106d0c:	689b      	ldr	r3, [r3, #8]
 8106d0e:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8106d12:	687b      	ldr	r3, [r7, #4]
 8106d14:	609a      	str	r2, [r3, #8]
}
 8106d16:	bf00      	nop
 8106d18:	370c      	adds	r7, #12
 8106d1a:	46bd      	mov	sp, r7
 8106d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d20:	4770      	bx	lr

08106d22 <LL_I2C_DisableOwnAddress1>:
{
 8106d22:	b480      	push	{r7}
 8106d24:	b083      	sub	sp, #12
 8106d26:	af00      	add	r7, sp, #0
 8106d28:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8106d2a:	687b      	ldr	r3, [r7, #4]
 8106d2c:	689b      	ldr	r3, [r3, #8]
 8106d2e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8106d32:	687b      	ldr	r3, [r7, #4]
 8106d34:	609a      	str	r2, [r3, #8]
}
 8106d36:	bf00      	nop
 8106d38:	370c      	adds	r7, #12
 8106d3a:	46bd      	mov	sp, r7
 8106d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d40:	4770      	bx	lr

08106d42 <LL_I2C_SetTiming>:
{
 8106d42:	b480      	push	{r7}
 8106d44:	b083      	sub	sp, #12
 8106d46:	af00      	add	r7, sp, #0
 8106d48:	6078      	str	r0, [r7, #4]
 8106d4a:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8106d4c:	687b      	ldr	r3, [r7, #4]
 8106d4e:	683a      	ldr	r2, [r7, #0]
 8106d50:	611a      	str	r2, [r3, #16]
}
 8106d52:	bf00      	nop
 8106d54:	370c      	adds	r7, #12
 8106d56:	46bd      	mov	sp, r7
 8106d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d5c:	4770      	bx	lr

08106d5e <LL_I2C_SetMode>:
{
 8106d5e:	b480      	push	{r7}
 8106d60:	b083      	sub	sp, #12
 8106d62:	af00      	add	r7, sp, #0
 8106d64:	6078      	str	r0, [r7, #4]
 8106d66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8106d68:	687b      	ldr	r3, [r7, #4]
 8106d6a:	681b      	ldr	r3, [r3, #0]
 8106d6c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8106d70:	683b      	ldr	r3, [r7, #0]
 8106d72:	431a      	orrs	r2, r3
 8106d74:	687b      	ldr	r3, [r7, #4]
 8106d76:	601a      	str	r2, [r3, #0]
}
 8106d78:	bf00      	nop
 8106d7a:	370c      	adds	r7, #12
 8106d7c:	46bd      	mov	sp, r7
 8106d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d82:	4770      	bx	lr

08106d84 <LL_I2C_AcknowledgeNextData>:
{
 8106d84:	b480      	push	{r7}
 8106d86:	b083      	sub	sp, #12
 8106d88:	af00      	add	r7, sp, #0
 8106d8a:	6078      	str	r0, [r7, #4]
 8106d8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8106d8e:	687b      	ldr	r3, [r7, #4]
 8106d90:	685b      	ldr	r3, [r3, #4]
 8106d92:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8106d96:	683b      	ldr	r3, [r7, #0]
 8106d98:	431a      	orrs	r2, r3
 8106d9a:	687b      	ldr	r3, [r7, #4]
 8106d9c:	605a      	str	r2, [r3, #4]
}
 8106d9e:	bf00      	nop
 8106da0:	370c      	adds	r7, #12
 8106da2:	46bd      	mov	sp, r7
 8106da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106da8:	4770      	bx	lr

08106daa <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8106daa:	b580      	push	{r7, lr}
 8106dac:	b082      	sub	sp, #8
 8106dae:	af00      	add	r7, sp, #0
 8106db0:	6078      	str	r0, [r7, #4]
 8106db2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8106db4:	6878      	ldr	r0, [r7, #4]
 8106db6:	f7ff ff65 	bl	8106c84 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8106dba:	683b      	ldr	r3, [r7, #0]
 8106dbc:	6899      	ldr	r1, [r3, #8]
 8106dbe:	683b      	ldr	r3, [r7, #0]
 8106dc0:	68db      	ldr	r3, [r3, #12]
 8106dc2:	461a      	mov	r2, r3
 8106dc4:	6878      	ldr	r0, [r7, #4]
 8106dc6:	f7ff ff6d 	bl	8106ca4 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8106dca:	683b      	ldr	r3, [r7, #0]
 8106dcc:	685b      	ldr	r3, [r3, #4]
 8106dce:	4619      	mov	r1, r3
 8106dd0:	6878      	ldr	r0, [r7, #4]
 8106dd2:	f7ff ffb6 	bl	8106d42 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8106dd6:	6878      	ldr	r0, [r7, #4]
 8106dd8:	f7ff ff44 	bl	8106c64 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8106ddc:	6878      	ldr	r0, [r7, #4]
 8106dde:	f7ff ffa0 	bl	8106d22 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8106de2:	683b      	ldr	r3, [r7, #0]
 8106de4:	6919      	ldr	r1, [r3, #16]
 8106de6:	683b      	ldr	r3, [r7, #0]
 8106de8:	699b      	ldr	r3, [r3, #24]
 8106dea:	461a      	mov	r2, r3
 8106dec:	6878      	ldr	r0, [r7, #4]
 8106dee:	f7ff ff70 	bl	8106cd2 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8106df2:	683b      	ldr	r3, [r7, #0]
 8106df4:	691b      	ldr	r3, [r3, #16]
 8106df6:	2b00      	cmp	r3, #0
 8106df8:	d002      	beq.n	8106e00 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8106dfa:	6878      	ldr	r0, [r7, #4]
 8106dfc:	f7ff ff81 	bl	8106d02 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8106e00:	683b      	ldr	r3, [r7, #0]
 8106e02:	681b      	ldr	r3, [r3, #0]
 8106e04:	4619      	mov	r1, r3
 8106e06:	6878      	ldr	r0, [r7, #4]
 8106e08:	f7ff ffa9 	bl	8106d5e <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8106e0c:	683b      	ldr	r3, [r7, #0]
 8106e0e:	695b      	ldr	r3, [r3, #20]
 8106e10:	4619      	mov	r1, r3
 8106e12:	6878      	ldr	r0, [r7, #4]
 8106e14:	f7ff ffb6 	bl	8106d84 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8106e18:	2300      	movs	r3, #0
}
 8106e1a:	4618      	mov	r0, r3
 8106e1c:	3708      	adds	r7, #8
 8106e1e:	46bd      	mov	sp, r7
 8106e20:	bd80      	pop	{r7, pc}
	...

08106e24 <LL_RCC_HSE_IsReady>:
{
 8106e24:	b480      	push	{r7}
 8106e26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8106e28:	4b07      	ldr	r3, [pc, #28]	@ (8106e48 <LL_RCC_HSE_IsReady+0x24>)
 8106e2a:	681b      	ldr	r3, [r3, #0]
 8106e2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8106e30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106e34:	d101      	bne.n	8106e3a <LL_RCC_HSE_IsReady+0x16>
 8106e36:	2301      	movs	r3, #1
 8106e38:	e000      	b.n	8106e3c <LL_RCC_HSE_IsReady+0x18>
 8106e3a:	2300      	movs	r3, #0
}
 8106e3c:	4618      	mov	r0, r3
 8106e3e:	46bd      	mov	sp, r7
 8106e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106e44:	4770      	bx	lr
 8106e46:	bf00      	nop
 8106e48:	58024400 	.word	0x58024400

08106e4c <LL_RCC_HSI_IsReady>:
{
 8106e4c:	b480      	push	{r7}
 8106e4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8106e50:	4b06      	ldr	r3, [pc, #24]	@ (8106e6c <LL_RCC_HSI_IsReady+0x20>)
 8106e52:	681b      	ldr	r3, [r3, #0]
 8106e54:	f003 0304 	and.w	r3, r3, #4
 8106e58:	2b04      	cmp	r3, #4
 8106e5a:	d101      	bne.n	8106e60 <LL_RCC_HSI_IsReady+0x14>
 8106e5c:	2301      	movs	r3, #1
 8106e5e:	e000      	b.n	8106e62 <LL_RCC_HSI_IsReady+0x16>
 8106e60:	2300      	movs	r3, #0
}
 8106e62:	4618      	mov	r0, r3
 8106e64:	46bd      	mov	sp, r7
 8106e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106e6a:	4770      	bx	lr
 8106e6c:	58024400 	.word	0x58024400

08106e70 <LL_RCC_HSI_GetDivider>:
{
 8106e70:	b480      	push	{r7}
 8106e72:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 8106e74:	4b04      	ldr	r3, [pc, #16]	@ (8106e88 <LL_RCC_HSI_GetDivider+0x18>)
 8106e76:	681b      	ldr	r3, [r3, #0]
 8106e78:	f003 0318 	and.w	r3, r3, #24
}
 8106e7c:	4618      	mov	r0, r3
 8106e7e:	46bd      	mov	sp, r7
 8106e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106e84:	4770      	bx	lr
 8106e86:	bf00      	nop
 8106e88:	58024400 	.word	0x58024400

08106e8c <LL_RCC_CSI_IsReady>:
{
 8106e8c:	b480      	push	{r7}
 8106e8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_CSIRDY) == (RCC_CR_CSIRDY)) ? 1UL : 0UL);
 8106e90:	4b07      	ldr	r3, [pc, #28]	@ (8106eb0 <LL_RCC_CSI_IsReady+0x24>)
 8106e92:	681b      	ldr	r3, [r3, #0]
 8106e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8106e98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106e9c:	d101      	bne.n	8106ea2 <LL_RCC_CSI_IsReady+0x16>
 8106e9e:	2301      	movs	r3, #1
 8106ea0:	e000      	b.n	8106ea4 <LL_RCC_CSI_IsReady+0x18>
 8106ea2:	2300      	movs	r3, #0
}
 8106ea4:	4618      	mov	r0, r3
 8106ea6:	46bd      	mov	sp, r7
 8106ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106eac:	4770      	bx	lr
 8106eae:	bf00      	nop
 8106eb0:	58024400 	.word	0x58024400

08106eb4 <LL_RCC_LSE_IsReady>:
{
 8106eb4:	b480      	push	{r7}
 8106eb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8106eb8:	4b06      	ldr	r3, [pc, #24]	@ (8106ed4 <LL_RCC_LSE_IsReady+0x20>)
 8106eba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106ebc:	f003 0302 	and.w	r3, r3, #2
 8106ec0:	2b02      	cmp	r3, #2
 8106ec2:	d101      	bne.n	8106ec8 <LL_RCC_LSE_IsReady+0x14>
 8106ec4:	2301      	movs	r3, #1
 8106ec6:	e000      	b.n	8106eca <LL_RCC_LSE_IsReady+0x16>
 8106ec8:	2300      	movs	r3, #0
}
 8106eca:	4618      	mov	r0, r3
 8106ecc:	46bd      	mov	sp, r7
 8106ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106ed2:	4770      	bx	lr
 8106ed4:	58024400 	.word	0x58024400

08106ed8 <LL_RCC_GetSysClkSource>:
{
 8106ed8:	b480      	push	{r7}
 8106eda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8106edc:	4b04      	ldr	r3, [pc, #16]	@ (8106ef0 <LL_RCC_GetSysClkSource+0x18>)
 8106ede:	691b      	ldr	r3, [r3, #16]
 8106ee0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
}
 8106ee4:	4618      	mov	r0, r3
 8106ee6:	46bd      	mov	sp, r7
 8106ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106eec:	4770      	bx	lr
 8106eee:	bf00      	nop
 8106ef0:	58024400 	.word	0x58024400

08106ef4 <LL_RCC_GetSysPrescaler>:
{
 8106ef4:	b480      	push	{r7}
 8106ef6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_D1CPRE));
 8106ef8:	4b04      	ldr	r3, [pc, #16]	@ (8106f0c <LL_RCC_GetSysPrescaler+0x18>)
 8106efa:	699b      	ldr	r3, [r3, #24]
 8106efc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8106f00:	4618      	mov	r0, r3
 8106f02:	46bd      	mov	sp, r7
 8106f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f08:	4770      	bx	lr
 8106f0a:	bf00      	nop
 8106f0c:	58024400 	.word	0x58024400

08106f10 <LL_RCC_GetAHBPrescaler>:
{
 8106f10:	b480      	push	{r7}
 8106f12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_HPRE));
 8106f14:	4b04      	ldr	r3, [pc, #16]	@ (8106f28 <LL_RCC_GetAHBPrescaler+0x18>)
 8106f16:	699b      	ldr	r3, [r3, #24]
 8106f18:	f003 030f 	and.w	r3, r3, #15
}
 8106f1c:	4618      	mov	r0, r3
 8106f1e:	46bd      	mov	sp, r7
 8106f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f24:	4770      	bx	lr
 8106f26:	bf00      	nop
 8106f28:	58024400 	.word	0x58024400

08106f2c <LL_RCC_GetAPB1Prescaler>:
{
 8106f2c:	b480      	push	{r7}
 8106f2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1));
 8106f30:	4b04      	ldr	r3, [pc, #16]	@ (8106f44 <LL_RCC_GetAPB1Prescaler+0x18>)
 8106f32:	69db      	ldr	r3, [r3, #28]
 8106f34:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8106f38:	4618      	mov	r0, r3
 8106f3a:	46bd      	mov	sp, r7
 8106f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f40:	4770      	bx	lr
 8106f42:	bf00      	nop
 8106f44:	58024400 	.word	0x58024400

08106f48 <LL_RCC_GetAPB2Prescaler>:
{
 8106f48:	b480      	push	{r7}
 8106f4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2));
 8106f4c:	4b04      	ldr	r3, [pc, #16]	@ (8106f60 <LL_RCC_GetAPB2Prescaler+0x18>)
 8106f4e:	69db      	ldr	r3, [r3, #28]
 8106f50:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8106f54:	4618      	mov	r0, r3
 8106f56:	46bd      	mov	sp, r7
 8106f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f5c:	4770      	bx	lr
 8106f5e:	bf00      	nop
 8106f60:	58024400 	.word	0x58024400

08106f64 <LL_RCC_GetClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_GetClockSource(uint32_t Periph)
{
 8106f64:	b480      	push	{r7}
 8106f66:	b085      	sub	sp, #20
 8106f68:	af00      	add	r7, sp, #0
 8106f6a:	6078      	str	r0, [r7, #4]
#if defined(RCC_D1CCIPR_FMCSEL)
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->D1CCIPR) + LL_CLKSOURCE_REG(Periph)));
 8106f6c:	687b      	ldr	r3, [r7, #4]
 8106f6e:	b2da      	uxtb	r2, r3
 8106f70:	4b0e      	ldr	r3, [pc, #56]	@ (8106fac <LL_RCC_GetClockSource+0x48>)
 8106f72:	4413      	add	r3, r2
 8106f74:	60fb      	str	r3, [r7, #12]
#else
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CDCCIPR) + LL_CLKSOURCE_REG(Periph)));
#endif /* RCC_D1CCIPR_FMCSEL */
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
 8106f76:	68fb      	ldr	r3, [r7, #12]
 8106f78:	681a      	ldr	r2, [r3, #0]
 8106f7a:	687b      	ldr	r3, [r7, #4]
 8106f7c:	0e19      	lsrs	r1, r3, #24
 8106f7e:	687b      	ldr	r3, [r7, #4]
 8106f80:	0a1b      	lsrs	r3, r3, #8
 8106f82:	f003 031f 	and.w	r3, r3, #31
 8106f86:	fa01 f303 	lsl.w	r3, r1, r3
 8106f8a:	401a      	ands	r2, r3
 8106f8c:	687b      	ldr	r3, [r7, #4]
 8106f8e:	0a1b      	lsrs	r3, r3, #8
 8106f90:	f003 031f 	and.w	r3, r3, #31
 8106f94:	fa22 f303 	lsr.w	r3, r2, r3
 8106f98:	041a      	lsls	r2, r3, #16
 8106f9a:	687b      	ldr	r3, [r7, #4]
 8106f9c:	4313      	orrs	r3, r2
}
 8106f9e:	4618      	mov	r0, r3
 8106fa0:	3714      	adds	r7, #20
 8106fa2:	46bd      	mov	sp, r7
 8106fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106fa8:	4770      	bx	lr
 8106faa:	bf00      	nop
 8106fac:	5802444c 	.word	0x5802444c

08106fb0 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_CSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t Periph)
{
 8106fb0:	b580      	push	{r7, lr}
 8106fb2:	b082      	sub	sp, #8
 8106fb4:	af00      	add	r7, sp, #0
 8106fb6:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
 8106fb8:	6878      	ldr	r0, [r7, #4]
 8106fba:	f7ff ffd3 	bl	8106f64 <LL_RCC_GetClockSource>
 8106fbe:	4603      	mov	r3, r0
}
 8106fc0:	4618      	mov	r0, r3
 8106fc2:	3708      	adds	r7, #8
 8106fc4:	46bd      	mov	sp, r7
 8106fc6:	bd80      	pop	{r7, pc}

08106fc8 <LL_RCC_PLL_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_CSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetSource(void)
{
 8106fc8:	b480      	push	{r7}
 8106fca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC));
 8106fcc:	4b04      	ldr	r3, [pc, #16]	@ (8106fe0 <LL_RCC_PLL_GetSource+0x18>)
 8106fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106fd0:	f003 0303 	and.w	r3, r3, #3
}
 8106fd4:	4618      	mov	r0, r3
 8106fd6:	46bd      	mov	sp, r7
 8106fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106fdc:	4770      	bx	lr
 8106fde:	bf00      	nop
 8106fe0:	58024400 	.word	0x58024400

08106fe4 <LL_RCC_PLL1P_IsEnabled>:
  * @brief  Check if PLL1 P is enabled
  * @rmtoll PLLCFGR           DIVP1EN         LL_RCC_PLL1P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1P_IsEnabled(void)
{
 8106fe4:	b480      	push	{r7}
 8106fe6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN) == RCC_PLLCFGR_DIVP1EN) ? 1UL : 0UL);
 8106fe8:	4b07      	ldr	r3, [pc, #28]	@ (8107008 <LL_RCC_PLL1P_IsEnabled+0x24>)
 8106fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106fec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8106ff0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8106ff4:	d101      	bne.n	8106ffa <LL_RCC_PLL1P_IsEnabled+0x16>
 8106ff6:	2301      	movs	r3, #1
 8106ff8:	e000      	b.n	8106ffc <LL_RCC_PLL1P_IsEnabled+0x18>
 8106ffa:	2300      	movs	r3, #0
}
 8106ffc:	4618      	mov	r0, r3
 8106ffe:	46bd      	mov	sp, r7
 8107000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107004:	4770      	bx	lr
 8107006:	bf00      	nop
 8107008:	58024400 	.word	0x58024400

0810700c <LL_RCC_PLL1Q_IsEnabled>:
  * @brief  Check if PLL1 Q is enabled
  * @rmtoll PLLCFGR           DIVQ1EN         LL_RCC_PLL1Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1Q_IsEnabled(void)
{
 810700c:	b480      	push	{r7}
 810700e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ1EN) == RCC_PLLCFGR_DIVQ1EN) ? 1UL : 0UL);
 8107010:	4b07      	ldr	r3, [pc, #28]	@ (8107030 <LL_RCC_PLL1Q_IsEnabled+0x24>)
 8107012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107014:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107018:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810701c:	d101      	bne.n	8107022 <LL_RCC_PLL1Q_IsEnabled+0x16>
 810701e:	2301      	movs	r3, #1
 8107020:	e000      	b.n	8107024 <LL_RCC_PLL1Q_IsEnabled+0x18>
 8107022:	2300      	movs	r3, #0
}
 8107024:	4618      	mov	r0, r3
 8107026:	46bd      	mov	sp, r7
 8107028:	f85d 7b04 	ldr.w	r7, [sp], #4
 810702c:	4770      	bx	lr
 810702e:	bf00      	nop
 8107030:	58024400 	.word	0x58024400

08107034 <LL_RCC_PLL1R_IsEnabled>:
  * @brief  Check if PLL1 R is enabled
  * @rmtoll PLLCFGR           DIVR1EN         LL_RCC_PLL1R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1R_IsEnabled(void)
{
 8107034:	b480      	push	{r7}
 8107036:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR1EN) == RCC_PLLCFGR_DIVR1EN) ? 1UL : 0UL);
 8107038:	4b07      	ldr	r3, [pc, #28]	@ (8107058 <LL_RCC_PLL1R_IsEnabled+0x24>)
 810703a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810703c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8107040:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8107044:	d101      	bne.n	810704a <LL_RCC_PLL1R_IsEnabled+0x16>
 8107046:	2301      	movs	r3, #1
 8107048:	e000      	b.n	810704c <LL_RCC_PLL1R_IsEnabled+0x18>
 810704a:	2300      	movs	r3, #0
}
 810704c:	4618      	mov	r0, r3
 810704e:	46bd      	mov	sp, r7
 8107050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107054:	4770      	bx	lr
 8107056:	bf00      	nop
 8107058:	58024400 	.word	0x58024400

0810705c <LL_RCC_PLL1FRACN_IsEnabled>:
  * @brief  Check if PLL1 FRACN is enabled
  * @rmtoll PLLCFGR           PLL1FRACEN         LL_RCC_PLL1FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1FRACN_IsEnabled(void)
{
 810705c:	b480      	push	{r7}
 810705e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN) == RCC_PLLCFGR_PLL1FRACEN) ? 1UL : 0UL);
 8107060:	4b06      	ldr	r3, [pc, #24]	@ (810707c <LL_RCC_PLL1FRACN_IsEnabled+0x20>)
 8107062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107064:	f003 0301 	and.w	r3, r3, #1
 8107068:	2b01      	cmp	r3, #1
 810706a:	d101      	bne.n	8107070 <LL_RCC_PLL1FRACN_IsEnabled+0x14>
 810706c:	2301      	movs	r3, #1
 810706e:	e000      	b.n	8107072 <LL_RCC_PLL1FRACN_IsEnabled+0x16>
 8107070:	2300      	movs	r3, #0
}
 8107072:	4618      	mov	r0, r3
 8107074:	46bd      	mov	sp, r7
 8107076:	f85d 7b04 	ldr.w	r7, [sp], #4
 810707a:	4770      	bx	lr
 810707c:	58024400 	.word	0x58024400

08107080 <LL_RCC_PLL1_GetN>:
  * @brief  Get PLL1 N Coefficient
  * @rmtoll PLL1DIVR        N1          LL_RCC_PLL1_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetN(void)
{
 8107080:	b480      	push	{r7}
 8107082:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_N1) >>  RCC_PLL1DIVR_N1_Pos) + 1UL);
 8107084:	4b04      	ldr	r3, [pc, #16]	@ (8107098 <LL_RCC_PLL1_GetN+0x18>)
 8107086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107088:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810708c:	3301      	adds	r3, #1
}
 810708e:	4618      	mov	r0, r3
 8107090:	46bd      	mov	sp, r7
 8107092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107096:	4770      	bx	lr
 8107098:	58024400 	.word	0x58024400

0810709c <LL_RCC_PLL1_GetM>:
  * @brief  Get PLL1 M Coefficient
  * @rmtoll PLLCKSELR       DIVM1          LL_RCC_PLL1_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetM(void)
{
 810709c:	b480      	push	{r7}
 810709e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1) >>  RCC_PLLCKSELR_DIVM1_Pos);
 81070a0:	4b04      	ldr	r3, [pc, #16]	@ (81070b4 <LL_RCC_PLL1_GetM+0x18>)
 81070a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81070a4:	091b      	lsrs	r3, r3, #4
 81070a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 81070aa:	4618      	mov	r0, r3
 81070ac:	46bd      	mov	sp, r7
 81070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81070b2:	4770      	bx	lr
 81070b4:	58024400 	.word	0x58024400

081070b8 <LL_RCC_PLL1_GetP>:
  * @brief  Get PLL1 P Coefficient
  * @rmtoll PLL1DIVR        P1          LL_RCC_PLL1_GetP
  * @retval A value between 2 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetP(void)
{
 81070b8:	b480      	push	{r7}
 81070ba:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_P1) >>  RCC_PLL1DIVR_P1_Pos) + 1UL);
 81070bc:	4b05      	ldr	r3, [pc, #20]	@ (81070d4 <LL_RCC_PLL1_GetP+0x1c>)
 81070be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81070c0:	0a5b      	lsrs	r3, r3, #9
 81070c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81070c6:	3301      	adds	r3, #1
}
 81070c8:	4618      	mov	r0, r3
 81070ca:	46bd      	mov	sp, r7
 81070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81070d0:	4770      	bx	lr
 81070d2:	bf00      	nop
 81070d4:	58024400 	.word	0x58024400

081070d8 <LL_RCC_PLL1_GetQ>:
  * @brief  Get PLL1 Q Coefficient
  * @rmtoll PLL1DIVR        Q1          LL_RCC_PLL1_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetQ(void)
{
 81070d8:	b480      	push	{r7}
 81070da:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1) >>  RCC_PLL1DIVR_Q1_Pos) + 1UL);
 81070dc:	4b05      	ldr	r3, [pc, #20]	@ (81070f4 <LL_RCC_PLL1_GetQ+0x1c>)
 81070de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81070e0:	0c1b      	lsrs	r3, r3, #16
 81070e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81070e6:	3301      	adds	r3, #1
}
 81070e8:	4618      	mov	r0, r3
 81070ea:	46bd      	mov	sp, r7
 81070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81070f0:	4770      	bx	lr
 81070f2:	bf00      	nop
 81070f4:	58024400 	.word	0x58024400

081070f8 <LL_RCC_PLL1_GetR>:
  * @brief  Get PLL1 R Coefficient
  * @rmtoll PLL1DIVR        R1          LL_RCC_PLL1_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetR(void)
{
 81070f8:	b480      	push	{r7}
 81070fa:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_R1) >>  RCC_PLL1DIVR_R1_Pos) + 1UL);
 81070fc:	4b05      	ldr	r3, [pc, #20]	@ (8107114 <LL_RCC_PLL1_GetR+0x1c>)
 81070fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107100:	0e1b      	lsrs	r3, r3, #24
 8107102:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8107106:	3301      	adds	r3, #1
}
 8107108:	4618      	mov	r0, r3
 810710a:	46bd      	mov	sp, r7
 810710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107110:	4770      	bx	lr
 8107112:	bf00      	nop
 8107114:	58024400 	.word	0x58024400

08107118 <LL_RCC_PLL1_GetFRACN>:
  * @brief  Get PLL1 FRACN Coefficient
  * @rmtoll PLL1FRACR      FRACN1          LL_RCC_PLL1_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetFRACN(void)
{
 8107118:	b480      	push	{r7}
 810711a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_FRACN1) >>  RCC_PLL1FRACR_FRACN1_Pos);
 810711c:	4b04      	ldr	r3, [pc, #16]	@ (8107130 <LL_RCC_PLL1_GetFRACN+0x18>)
 810711e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8107120:	08db      	lsrs	r3, r3, #3
 8107122:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 8107126:	4618      	mov	r0, r3
 8107128:	46bd      	mov	sp, r7
 810712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810712e:	4770      	bx	lr
 8107130:	58024400 	.word	0x58024400

08107134 <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll CR           PLL2RDY        LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
 8107134:	b480      	push	{r7}
 8107136:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL2RDY) == (RCC_CR_PLL2RDY)) ? 1UL : 0UL);
 8107138:	4b07      	ldr	r3, [pc, #28]	@ (8107158 <LL_RCC_PLL2_IsReady+0x24>)
 810713a:	681b      	ldr	r3, [r3, #0]
 810713c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107140:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107144:	d101      	bne.n	810714a <LL_RCC_PLL2_IsReady+0x16>
 8107146:	2301      	movs	r3, #1
 8107148:	e000      	b.n	810714c <LL_RCC_PLL2_IsReady+0x18>
 810714a:	2300      	movs	r3, #0
}
 810714c:	4618      	mov	r0, r3
 810714e:	46bd      	mov	sp, r7
 8107150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107154:	4770      	bx	lr
 8107156:	bf00      	nop
 8107158:	58024400 	.word	0x58024400

0810715c <LL_RCC_PLL2P_IsEnabled>:
  * @brief  Check if PLL2 P is enabled
  * @rmtoll PLLCFGR           DIVP2EN         LL_RCC_PLL2P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2P_IsEnabled(void)
{
 810715c:	b480      	push	{r7}
 810715e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP2EN) == RCC_PLLCFGR_DIVP2EN) ? 1UL : 0UL);
 8107160:	4b07      	ldr	r3, [pc, #28]	@ (8107180 <LL_RCC_PLL2P_IsEnabled+0x24>)
 8107162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107164:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8107168:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 810716c:	d101      	bne.n	8107172 <LL_RCC_PLL2P_IsEnabled+0x16>
 810716e:	2301      	movs	r3, #1
 8107170:	e000      	b.n	8107174 <LL_RCC_PLL2P_IsEnabled+0x18>
 8107172:	2300      	movs	r3, #0
}
 8107174:	4618      	mov	r0, r3
 8107176:	46bd      	mov	sp, r7
 8107178:	f85d 7b04 	ldr.w	r7, [sp], #4
 810717c:	4770      	bx	lr
 810717e:	bf00      	nop
 8107180:	58024400 	.word	0x58024400

08107184 <LL_RCC_PLL2Q_IsEnabled>:
  * @brief  Check if PLL2 Q is enabled
  * @rmtoll PLLCFGR           DIVQ2EN         LL_RCC_PLL2Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2Q_IsEnabled(void)
{
 8107184:	b480      	push	{r7}
 8107186:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ2EN) == RCC_PLLCFGR_DIVQ2EN) ? 1UL : 0UL);
 8107188:	4b07      	ldr	r3, [pc, #28]	@ (81071a8 <LL_RCC_PLL2Q_IsEnabled+0x24>)
 810718a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810718c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8107190:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8107194:	d101      	bne.n	810719a <LL_RCC_PLL2Q_IsEnabled+0x16>
 8107196:	2301      	movs	r3, #1
 8107198:	e000      	b.n	810719c <LL_RCC_PLL2Q_IsEnabled+0x18>
 810719a:	2300      	movs	r3, #0
}
 810719c:	4618      	mov	r0, r3
 810719e:	46bd      	mov	sp, r7
 81071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81071a4:	4770      	bx	lr
 81071a6:	bf00      	nop
 81071a8:	58024400 	.word	0x58024400

081071ac <LL_RCC_PLL2R_IsEnabled>:
  * @brief  Check if PLL2 R is enabled
  * @rmtoll PLLCFGR           DIVR2EN         LL_RCC_PLL2R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2R_IsEnabled(void)
{
 81071ac:	b480      	push	{r7}
 81071ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR2EN) == RCC_PLLCFGR_DIVR2EN) ? 1UL : 0UL);
 81071b0:	4b07      	ldr	r3, [pc, #28]	@ (81071d0 <LL_RCC_PLL2R_IsEnabled+0x24>)
 81071b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81071b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 81071b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81071bc:	d101      	bne.n	81071c2 <LL_RCC_PLL2R_IsEnabled+0x16>
 81071be:	2301      	movs	r3, #1
 81071c0:	e000      	b.n	81071c4 <LL_RCC_PLL2R_IsEnabled+0x18>
 81071c2:	2300      	movs	r3, #0
}
 81071c4:	4618      	mov	r0, r3
 81071c6:	46bd      	mov	sp, r7
 81071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81071cc:	4770      	bx	lr
 81071ce:	bf00      	nop
 81071d0:	58024400 	.word	0x58024400

081071d4 <LL_RCC_PLL2FRACN_IsEnabled>:
  * @brief  Check if PLL2 FRACN is enabled
  * @rmtoll PLLCFGR           PLL2FRACEN         LL_RCC_PLL2FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2FRACN_IsEnabled(void)
{
 81071d4:	b480      	push	{r7}
 81071d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL2FRACEN) == RCC_PLLCFGR_PLL2FRACEN) ? 1UL : 0UL);
 81071d8:	4b06      	ldr	r3, [pc, #24]	@ (81071f4 <LL_RCC_PLL2FRACN_IsEnabled+0x20>)
 81071da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81071dc:	f003 0310 	and.w	r3, r3, #16
 81071e0:	2b10      	cmp	r3, #16
 81071e2:	d101      	bne.n	81071e8 <LL_RCC_PLL2FRACN_IsEnabled+0x14>
 81071e4:	2301      	movs	r3, #1
 81071e6:	e000      	b.n	81071ea <LL_RCC_PLL2FRACN_IsEnabled+0x16>
 81071e8:	2300      	movs	r3, #0
}
 81071ea:	4618      	mov	r0, r3
 81071ec:	46bd      	mov	sp, r7
 81071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81071f2:	4770      	bx	lr
 81071f4:	58024400 	.word	0x58024400

081071f8 <LL_RCC_PLL2_GetN>:
  * @brief  Get PLL2 N Coefficient
  * @rmtoll PLL2DIVR        N2          LL_RCC_PLL2_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetN(void)
{
 81071f8:	b480      	push	{r7}
 81071fa:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_N2) >>  RCC_PLL2DIVR_N2_Pos) + 1UL);
 81071fc:	4b04      	ldr	r3, [pc, #16]	@ (8107210 <LL_RCC_PLL2_GetN+0x18>)
 81071fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107204:	3301      	adds	r3, #1
}
 8107206:	4618      	mov	r0, r3
 8107208:	46bd      	mov	sp, r7
 810720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810720e:	4770      	bx	lr
 8107210:	58024400 	.word	0x58024400

08107214 <LL_RCC_PLL2_GetM>:
  * @brief  Get PLL2 M Coefficient
  * @rmtoll PLLCKSELR       DIVM2          LL_RCC_PLL2_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetM(void)
{
 8107214:	b480      	push	{r7}
 8107216:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM2) >>  RCC_PLLCKSELR_DIVM2_Pos);
 8107218:	4b04      	ldr	r3, [pc, #16]	@ (810722c <LL_RCC_PLL2_GetM+0x18>)
 810721a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810721c:	0b1b      	lsrs	r3, r3, #12
 810721e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8107222:	4618      	mov	r0, r3
 8107224:	46bd      	mov	sp, r7
 8107226:	f85d 7b04 	ldr.w	r7, [sp], #4
 810722a:	4770      	bx	lr
 810722c:	58024400 	.word	0x58024400

08107230 <LL_RCC_PLL2_GetP>:
  * @brief  Get PLL2 P Coefficient
  * @rmtoll PLL2DIVR        P2          LL_RCC_PLL2_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetP(void)
{
 8107230:	b480      	push	{r7}
 8107232:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_P2) >>  RCC_PLL2DIVR_P2_Pos) + 1UL);
 8107234:	4b05      	ldr	r3, [pc, #20]	@ (810724c <LL_RCC_PLL2_GetP+0x1c>)
 8107236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107238:	0a5b      	lsrs	r3, r3, #9
 810723a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810723e:	3301      	adds	r3, #1
}
 8107240:	4618      	mov	r0, r3
 8107242:	46bd      	mov	sp, r7
 8107244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107248:	4770      	bx	lr
 810724a:	bf00      	nop
 810724c:	58024400 	.word	0x58024400

08107250 <LL_RCC_PLL2_GetQ>:
  * @brief  Get PLL2 Q Coefficient
  * @rmtoll PLL2DIVR        Q2          LL_RCC_PLL2_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetQ(void)
{
 8107250:	b480      	push	{r7}
 8107252:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_Q2) >>  RCC_PLL2DIVR_Q2_Pos) + 1UL);
 8107254:	4b05      	ldr	r3, [pc, #20]	@ (810726c <LL_RCC_PLL2_GetQ+0x1c>)
 8107256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107258:	0c1b      	lsrs	r3, r3, #16
 810725a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810725e:	3301      	adds	r3, #1
}
 8107260:	4618      	mov	r0, r3
 8107262:	46bd      	mov	sp, r7
 8107264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107268:	4770      	bx	lr
 810726a:	bf00      	nop
 810726c:	58024400 	.word	0x58024400

08107270 <LL_RCC_PLL2_GetR>:
  * @brief  Get PLL2 R Coefficient
  * @rmtoll PLL2DIVR        R2          LL_RCC_PLL2_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetR(void)
{
 8107270:	b480      	push	{r7}
 8107272:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_R2) >>  RCC_PLL2DIVR_R2_Pos) + 1UL);
 8107274:	4b05      	ldr	r3, [pc, #20]	@ (810728c <LL_RCC_PLL2_GetR+0x1c>)
 8107276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107278:	0e1b      	lsrs	r3, r3, #24
 810727a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810727e:	3301      	adds	r3, #1
}
 8107280:	4618      	mov	r0, r3
 8107282:	46bd      	mov	sp, r7
 8107284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107288:	4770      	bx	lr
 810728a:	bf00      	nop
 810728c:	58024400 	.word	0x58024400

08107290 <LL_RCC_PLL2_GetFRACN>:
  * @brief  Get PLL2 FRACN Coefficient
  * @rmtoll PLL2FRACR      FRACN2          LL_RCC_PLL2_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetFRACN(void)
{
 8107290:	b480      	push	{r7}
 8107292:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2FRACR, RCC_PLL2FRACR_FRACN2) >>  RCC_PLL2FRACR_FRACN2_Pos);
 8107294:	4b04      	ldr	r3, [pc, #16]	@ (81072a8 <LL_RCC_PLL2_GetFRACN+0x18>)
 8107296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8107298:	08db      	lsrs	r3, r3, #3
 810729a:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 810729e:	4618      	mov	r0, r3
 81072a0:	46bd      	mov	sp, r7
 81072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81072a6:	4770      	bx	lr
 81072a8:	58024400 	.word	0x58024400

081072ac <LL_RCC_PLL3_IsReady>:
  * @brief  Check if PLL3 Ready
  * @rmtoll CR           PLL3RDY        LL_RCC_PLL3_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsReady(void)
{
 81072ac:	b480      	push	{r7}
 81072ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL3RDY) == (RCC_CR_PLL3RDY)) ? 1UL : 0UL);
 81072b0:	4b07      	ldr	r3, [pc, #28]	@ (81072d0 <LL_RCC_PLL3_IsReady+0x24>)
 81072b2:	681b      	ldr	r3, [r3, #0]
 81072b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81072b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81072bc:	d101      	bne.n	81072c2 <LL_RCC_PLL3_IsReady+0x16>
 81072be:	2301      	movs	r3, #1
 81072c0:	e000      	b.n	81072c4 <LL_RCC_PLL3_IsReady+0x18>
 81072c2:	2300      	movs	r3, #0
}
 81072c4:	4618      	mov	r0, r3
 81072c6:	46bd      	mov	sp, r7
 81072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81072cc:	4770      	bx	lr
 81072ce:	bf00      	nop
 81072d0:	58024400 	.word	0x58024400

081072d4 <LL_RCC_PLL3P_IsEnabled>:
  * @brief  Check if PLL3 P is enabled
  * @rmtoll PLLCFGR           DIVP3EN         LL_RCC_PLL3P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3P_IsEnabled(void)
{
 81072d4:	b480      	push	{r7}
 81072d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP3EN) == RCC_PLLCFGR_DIVP3EN) ? 1UL : 0UL);
 81072d8:	4b07      	ldr	r3, [pc, #28]	@ (81072f8 <LL_RCC_PLL3P_IsEnabled+0x24>)
 81072da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81072dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 81072e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81072e4:	d101      	bne.n	81072ea <LL_RCC_PLL3P_IsEnabled+0x16>
 81072e6:	2301      	movs	r3, #1
 81072e8:	e000      	b.n	81072ec <LL_RCC_PLL3P_IsEnabled+0x18>
 81072ea:	2300      	movs	r3, #0
}
 81072ec:	4618      	mov	r0, r3
 81072ee:	46bd      	mov	sp, r7
 81072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81072f4:	4770      	bx	lr
 81072f6:	bf00      	nop
 81072f8:	58024400 	.word	0x58024400

081072fc <LL_RCC_PLL3Q_IsEnabled>:
  * @brief  Check if PLL3 Q is enabled
  * @rmtoll PLLCFGR           DIVQ3EN         LL_RCC_PLL3Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3Q_IsEnabled(void)
{
 81072fc:	b480      	push	{r7}
 81072fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ3EN) == RCC_PLLCFGR_DIVQ3EN) ? 1UL : 0UL);
 8107300:	4b07      	ldr	r3, [pc, #28]	@ (8107320 <LL_RCC_PLL3Q_IsEnabled+0x24>)
 8107302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107304:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8107308:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810730c:	d101      	bne.n	8107312 <LL_RCC_PLL3Q_IsEnabled+0x16>
 810730e:	2301      	movs	r3, #1
 8107310:	e000      	b.n	8107314 <LL_RCC_PLL3Q_IsEnabled+0x18>
 8107312:	2300      	movs	r3, #0
}
 8107314:	4618      	mov	r0, r3
 8107316:	46bd      	mov	sp, r7
 8107318:	f85d 7b04 	ldr.w	r7, [sp], #4
 810731c:	4770      	bx	lr
 810731e:	bf00      	nop
 8107320:	58024400 	.word	0x58024400

08107324 <LL_RCC_PLL3R_IsEnabled>:
  * @brief  Check if PLL3 R is enabled
  * @rmtoll PLLCFGR           DIVR3EN         LL_RCC_PLL3R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3R_IsEnabled(void)
{
 8107324:	b480      	push	{r7}
 8107326:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR3EN) == RCC_PLLCFGR_DIVR3EN) ? 1UL : 0UL);
 8107328:	4b07      	ldr	r3, [pc, #28]	@ (8107348 <LL_RCC_PLL3R_IsEnabled+0x24>)
 810732a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810732c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8107330:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8107334:	d101      	bne.n	810733a <LL_RCC_PLL3R_IsEnabled+0x16>
 8107336:	2301      	movs	r3, #1
 8107338:	e000      	b.n	810733c <LL_RCC_PLL3R_IsEnabled+0x18>
 810733a:	2300      	movs	r3, #0
}
 810733c:	4618      	mov	r0, r3
 810733e:	46bd      	mov	sp, r7
 8107340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107344:	4770      	bx	lr
 8107346:	bf00      	nop
 8107348:	58024400 	.word	0x58024400

0810734c <LL_RCC_PLL3FRACN_IsEnabled>:
  * @brief  Check if PLL3 FRACN is enabled
  * @rmtoll PLLCFGR           PLL3FRACEN         LL_RCC_PLL3FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3FRACN_IsEnabled(void)
{
 810734c:	b480      	push	{r7}
 810734e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL3FRACEN) == RCC_PLLCFGR_PLL3FRACEN) ? 1UL : 0UL);
 8107350:	4b07      	ldr	r3, [pc, #28]	@ (8107370 <LL_RCC_PLL3FRACN_IsEnabled+0x24>)
 8107352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107358:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810735c:	d101      	bne.n	8107362 <LL_RCC_PLL3FRACN_IsEnabled+0x16>
 810735e:	2301      	movs	r3, #1
 8107360:	e000      	b.n	8107364 <LL_RCC_PLL3FRACN_IsEnabled+0x18>
 8107362:	2300      	movs	r3, #0
}
 8107364:	4618      	mov	r0, r3
 8107366:	46bd      	mov	sp, r7
 8107368:	f85d 7b04 	ldr.w	r7, [sp], #4
 810736c:	4770      	bx	lr
 810736e:	bf00      	nop
 8107370:	58024400 	.word	0x58024400

08107374 <LL_RCC_PLL3_GetN>:
  * @brief  Get PLL3 N Coefficient
  * @rmtoll PLL3DIVR        N3          LL_RCC_PLL3_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetN(void)
{
 8107374:	b480      	push	{r7}
 8107376:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_N3) >>  RCC_PLL3DIVR_N3_Pos) + 1UL);
 8107378:	4b04      	ldr	r3, [pc, #16]	@ (810738c <LL_RCC_PLL3_GetN+0x18>)
 810737a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810737c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107380:	3301      	adds	r3, #1
}
 8107382:	4618      	mov	r0, r3
 8107384:	46bd      	mov	sp, r7
 8107386:	f85d 7b04 	ldr.w	r7, [sp], #4
 810738a:	4770      	bx	lr
 810738c:	58024400 	.word	0x58024400

08107390 <LL_RCC_PLL3_GetM>:
  * @brief  Get PLL3 M Coefficient
  * @rmtoll PLLCKSELR       DIVM3          LL_RCC_PLL3_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetM(void)
{
 8107390:	b480      	push	{r7}
 8107392:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM3) >>  RCC_PLLCKSELR_DIVM3_Pos);
 8107394:	4b04      	ldr	r3, [pc, #16]	@ (81073a8 <LL_RCC_PLL3_GetM+0x18>)
 8107396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107398:	0d1b      	lsrs	r3, r3, #20
 810739a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 810739e:	4618      	mov	r0, r3
 81073a0:	46bd      	mov	sp, r7
 81073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81073a6:	4770      	bx	lr
 81073a8:	58024400 	.word	0x58024400

081073ac <LL_RCC_PLL3_GetP>:
  * @brief  Get PLL3 P Coefficient
  * @rmtoll PLL3DIVR        P3          LL_RCC_PLL3_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetP(void)
{
 81073ac:	b480      	push	{r7}
 81073ae:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_P3) >>  RCC_PLL3DIVR_P3_Pos) + 1UL);
 81073b0:	4b05      	ldr	r3, [pc, #20]	@ (81073c8 <LL_RCC_PLL3_GetP+0x1c>)
 81073b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81073b4:	0a5b      	lsrs	r3, r3, #9
 81073b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81073ba:	3301      	adds	r3, #1
}
 81073bc:	4618      	mov	r0, r3
 81073be:	46bd      	mov	sp, r7
 81073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81073c4:	4770      	bx	lr
 81073c6:	bf00      	nop
 81073c8:	58024400 	.word	0x58024400

081073cc <LL_RCC_PLL3_GetQ>:
  * @brief  Get PLL3 Q Coefficient
  * @rmtoll PLL3DIVR        Q3          LL_RCC_PLL3_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetQ(void)
{
 81073cc:	b480      	push	{r7}
 81073ce:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_Q3) >>  RCC_PLL3DIVR_Q3_Pos) + 1UL);
 81073d0:	4b05      	ldr	r3, [pc, #20]	@ (81073e8 <LL_RCC_PLL3_GetQ+0x1c>)
 81073d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81073d4:	0c1b      	lsrs	r3, r3, #16
 81073d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81073da:	3301      	adds	r3, #1
}
 81073dc:	4618      	mov	r0, r3
 81073de:	46bd      	mov	sp, r7
 81073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81073e4:	4770      	bx	lr
 81073e6:	bf00      	nop
 81073e8:	58024400 	.word	0x58024400

081073ec <LL_RCC_PLL3_GetR>:
  * @brief  Get PLL3 R Coefficient
  * @rmtoll PLL3DIVR        R3          LL_RCC_PLL3_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetR(void)
{
 81073ec:	b480      	push	{r7}
 81073ee:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_R3) >>  RCC_PLL3DIVR_R3_Pos) + 1UL);
 81073f0:	4b05      	ldr	r3, [pc, #20]	@ (8107408 <LL_RCC_PLL3_GetR+0x1c>)
 81073f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81073f4:	0e1b      	lsrs	r3, r3, #24
 81073f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81073fa:	3301      	adds	r3, #1
}
 81073fc:	4618      	mov	r0, r3
 81073fe:	46bd      	mov	sp, r7
 8107400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107404:	4770      	bx	lr
 8107406:	bf00      	nop
 8107408:	58024400 	.word	0x58024400

0810740c <LL_RCC_PLL3_GetFRACN>:
  * @brief  Get PLL3 FRACN Coefficient
  * @rmtoll PLL3FRACR      FRACN3          LL_RCC_PLL3_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetFRACN(void)
{
 810740c:	b480      	push	{r7}
 810740e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3FRACR, RCC_PLL3FRACR_FRACN3) >>  RCC_PLL3FRACR_FRACN3_Pos);
 8107410:	4b04      	ldr	r3, [pc, #16]	@ (8107424 <LL_RCC_PLL3_GetFRACN+0x18>)
 8107412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8107414:	08db      	lsrs	r3, r3, #3
 8107416:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 810741a:	4618      	mov	r0, r3
 810741c:	46bd      	mov	sp, r7
 810741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107422:	4770      	bx	lr
 8107424:	58024400 	.word	0x58024400

08107428 <LL_RCC_GetPLL1ClockFreq>:
  * @brief  Return PLL1 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL1ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 8107428:	b580      	push	{r7, lr}
 810742a:	b08a      	sub	sp, #40	@ 0x28
 810742c:	af02      	add	r7, sp, #8
 810742e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 8107430:	2300      	movs	r3, #0
 8107432:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 8107434:	2300      	movs	r3, #0
 8107436:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 8107438:	f7ff fdc6 	bl	8106fc8 <LL_RCC_PLL_GetSource>
 810743c:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 810743e:	697b      	ldr	r3, [r7, #20]
 8107440:	2b02      	cmp	r3, #2
 8107442:	d01f      	beq.n	8107484 <LL_RCC_GetPLL1ClockFreq+0x5c>
 8107444:	697b      	ldr	r3, [r7, #20]
 8107446:	2b02      	cmp	r3, #2
 8107448:	d824      	bhi.n	8107494 <LL_RCC_GetPLL1ClockFreq+0x6c>
 810744a:	697b      	ldr	r3, [r7, #20]
 810744c:	2b00      	cmp	r3, #0
 810744e:	d003      	beq.n	8107458 <LL_RCC_GetPLL1ClockFreq+0x30>
 8107450:	697b      	ldr	r3, [r7, #20]
 8107452:	2b01      	cmp	r3, #1
 8107454:	d00e      	beq.n	8107474 <LL_RCC_GetPLL1ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 8107456:	e01d      	b.n	8107494 <LL_RCC_GetPLL1ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 8107458:	f7ff fcf8 	bl	8106e4c <LL_RCC_HSI_IsReady>
 810745c:	4603      	mov	r3, r0
 810745e:	2b00      	cmp	r3, #0
 8107460:	d01a      	beq.n	8107498 <LL_RCC_GetPLL1ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8107462:	f7ff fd05 	bl	8106e70 <LL_RCC_HSI_GetDivider>
 8107466:	4603      	mov	r3, r0
 8107468:	08db      	lsrs	r3, r3, #3
 810746a:	4a38      	ldr	r2, [pc, #224]	@ (810754c <LL_RCC_GetPLL1ClockFreq+0x124>)
 810746c:	fa22 f303 	lsr.w	r3, r2, r3
 8107470:	61fb      	str	r3, [r7, #28]
      break;
 8107472:	e011      	b.n	8107498 <LL_RCC_GetPLL1ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 8107474:	f7ff fd0a 	bl	8106e8c <LL_RCC_CSI_IsReady>
 8107478:	4603      	mov	r3, r0
 810747a:	2b00      	cmp	r3, #0
 810747c:	d00e      	beq.n	810749c <LL_RCC_GetPLL1ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 810747e:	4b34      	ldr	r3, [pc, #208]	@ (8107550 <LL_RCC_GetPLL1ClockFreq+0x128>)
 8107480:	61fb      	str	r3, [r7, #28]
      break;
 8107482:	e00b      	b.n	810749c <LL_RCC_GetPLL1ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 8107484:	f7ff fcce 	bl	8106e24 <LL_RCC_HSE_IsReady>
 8107488:	4603      	mov	r3, r0
 810748a:	2b00      	cmp	r3, #0
 810748c:	d008      	beq.n	81074a0 <LL_RCC_GetPLL1ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 810748e:	4b31      	ldr	r3, [pc, #196]	@ (8107554 <LL_RCC_GetPLL1ClockFreq+0x12c>)
 8107490:	61fb      	str	r3, [r7, #28]
      break;
 8107492:	e005      	b.n	81074a0 <LL_RCC_GetPLL1ClockFreq+0x78>
      break;
 8107494:	bf00      	nop
 8107496:	e004      	b.n	81074a2 <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 8107498:	bf00      	nop
 810749a:	e002      	b.n	81074a2 <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 810749c:	bf00      	nop
 810749e:	e000      	b.n	81074a2 <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 81074a0:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 81074a2:	687b      	ldr	r3, [r7, #4]
 81074a4:	2200      	movs	r2, #0
 81074a6:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 81074a8:	687b      	ldr	r3, [r7, #4]
 81074aa:	2200      	movs	r2, #0
 81074ac:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 81074ae:	687b      	ldr	r3, [r7, #4]
 81074b0:	2200      	movs	r2, #0
 81074b2:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL1_GetM();
 81074b4:	f7ff fdf2 	bl	810709c <LL_RCC_PLL1_GetM>
 81074b8:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL1_GetN();
 81074ba:	f7ff fde1 	bl	8107080 <LL_RCC_PLL1_GetN>
 81074be:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL1FRACN_IsEnabled() != 0U)
 81074c0:	f7ff fdcc 	bl	810705c <LL_RCC_PLL1FRACN_IsEnabled>
 81074c4:	4603      	mov	r3, r0
 81074c6:	2b00      	cmp	r3, #0
 81074c8:	d002      	beq.n	81074d0 <LL_RCC_GetPLL1ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL1_GetFRACN();
 81074ca:	f7ff fe25 	bl	8107118 <LL_RCC_PLL1_GetFRACN>
 81074ce:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 81074d0:	693b      	ldr	r3, [r7, #16]
 81074d2:	2b00      	cmp	r3, #0
 81074d4:	d035      	beq.n	8107542 <LL_RCC_GetPLL1ClockFreq+0x11a>
  {
    if (LL_RCC_PLL1P_IsEnabled() != 0U)
 81074d6:	f7ff fd85 	bl	8106fe4 <LL_RCC_PLL1P_IsEnabled>
 81074da:	4603      	mov	r3, r0
 81074dc:	2b00      	cmp	r3, #0
 81074de:	d00c      	beq.n	81074fa <LL_RCC_GetPLL1ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetP());
 81074e0:	f7ff fdea 	bl	81070b8 <LL_RCC_PLL1_GetP>
 81074e4:	4603      	mov	r3, r0
 81074e6:	9300      	str	r3, [sp, #0]
 81074e8:	69bb      	ldr	r3, [r7, #24]
 81074ea:	68fa      	ldr	r2, [r7, #12]
 81074ec:	6939      	ldr	r1, [r7, #16]
 81074ee:	69f8      	ldr	r0, [r7, #28]
 81074f0:	f000 f964 	bl	81077bc <LL_RCC_CalcPLLClockFreq>
 81074f4:	4602      	mov	r2, r0
 81074f6:	687b      	ldr	r3, [r7, #4]
 81074f8:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL1Q_IsEnabled() != 0U)
 81074fa:	f7ff fd87 	bl	810700c <LL_RCC_PLL1Q_IsEnabled>
 81074fe:	4603      	mov	r3, r0
 8107500:	2b00      	cmp	r3, #0
 8107502:	d00c      	beq.n	810751e <LL_RCC_GetPLL1ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetQ());
 8107504:	f7ff fde8 	bl	81070d8 <LL_RCC_PLL1_GetQ>
 8107508:	4603      	mov	r3, r0
 810750a:	9300      	str	r3, [sp, #0]
 810750c:	69bb      	ldr	r3, [r7, #24]
 810750e:	68fa      	ldr	r2, [r7, #12]
 8107510:	6939      	ldr	r1, [r7, #16]
 8107512:	69f8      	ldr	r0, [r7, #28]
 8107514:	f000 f952 	bl	81077bc <LL_RCC_CalcPLLClockFreq>
 8107518:	4602      	mov	r2, r0
 810751a:	687b      	ldr	r3, [r7, #4]
 810751c:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL1R_IsEnabled() != 0U)
 810751e:	f7ff fd89 	bl	8107034 <LL_RCC_PLL1R_IsEnabled>
 8107522:	4603      	mov	r3, r0
 8107524:	2b00      	cmp	r3, #0
 8107526:	d00c      	beq.n	8107542 <LL_RCC_GetPLL1ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetR());
 8107528:	f7ff fde6 	bl	81070f8 <LL_RCC_PLL1_GetR>
 810752c:	4603      	mov	r3, r0
 810752e:	9300      	str	r3, [sp, #0]
 8107530:	69bb      	ldr	r3, [r7, #24]
 8107532:	68fa      	ldr	r2, [r7, #12]
 8107534:	6939      	ldr	r1, [r7, #16]
 8107536:	69f8      	ldr	r0, [r7, #28]
 8107538:	f000 f940 	bl	81077bc <LL_RCC_CalcPLLClockFreq>
 810753c:	4602      	mov	r2, r0
 810753e:	687b      	ldr	r3, [r7, #4]
 8107540:	609a      	str	r2, [r3, #8]
    }
  }
}
 8107542:	bf00      	nop
 8107544:	3720      	adds	r7, #32
 8107546:	46bd      	mov	sp, r7
 8107548:	bd80      	pop	{r7, pc}
 810754a:	bf00      	nop
 810754c:	03d09000 	.word	0x03d09000
 8107550:	003d0900 	.word	0x003d0900
 8107554:	017d7840 	.word	0x017d7840

08107558 <LL_RCC_GetPLL2ClockFreq>:
  * @brief  Return PLL2 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL2ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 8107558:	b580      	push	{r7, lr}
 810755a:	b08a      	sub	sp, #40	@ 0x28
 810755c:	af02      	add	r7, sp, #8
 810755e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 8107560:	2300      	movs	r3, #0
 8107562:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 8107564:	2300      	movs	r3, #0
 8107566:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 8107568:	f7ff fd2e 	bl	8106fc8 <LL_RCC_PLL_GetSource>
 810756c:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 810756e:	697b      	ldr	r3, [r7, #20]
 8107570:	2b02      	cmp	r3, #2
 8107572:	d01f      	beq.n	81075b4 <LL_RCC_GetPLL2ClockFreq+0x5c>
 8107574:	697b      	ldr	r3, [r7, #20]
 8107576:	2b02      	cmp	r3, #2
 8107578:	d824      	bhi.n	81075c4 <LL_RCC_GetPLL2ClockFreq+0x6c>
 810757a:	697b      	ldr	r3, [r7, #20]
 810757c:	2b00      	cmp	r3, #0
 810757e:	d003      	beq.n	8107588 <LL_RCC_GetPLL2ClockFreq+0x30>
 8107580:	697b      	ldr	r3, [r7, #20]
 8107582:	2b01      	cmp	r3, #1
 8107584:	d00e      	beq.n	81075a4 <LL_RCC_GetPLL2ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 8107586:	e01d      	b.n	81075c4 <LL_RCC_GetPLL2ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 8107588:	f7ff fc60 	bl	8106e4c <LL_RCC_HSI_IsReady>
 810758c:	4603      	mov	r3, r0
 810758e:	2b00      	cmp	r3, #0
 8107590:	d01a      	beq.n	81075c8 <LL_RCC_GetPLL2ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8107592:	f7ff fc6d 	bl	8106e70 <LL_RCC_HSI_GetDivider>
 8107596:	4603      	mov	r3, r0
 8107598:	08db      	lsrs	r3, r3, #3
 810759a:	4a38      	ldr	r2, [pc, #224]	@ (810767c <LL_RCC_GetPLL2ClockFreq+0x124>)
 810759c:	fa22 f303 	lsr.w	r3, r2, r3
 81075a0:	61fb      	str	r3, [r7, #28]
      break;
 81075a2:	e011      	b.n	81075c8 <LL_RCC_GetPLL2ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 81075a4:	f7ff fc72 	bl	8106e8c <LL_RCC_CSI_IsReady>
 81075a8:	4603      	mov	r3, r0
 81075aa:	2b00      	cmp	r3, #0
 81075ac:	d00e      	beq.n	81075cc <LL_RCC_GetPLL2ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 81075ae:	4b34      	ldr	r3, [pc, #208]	@ (8107680 <LL_RCC_GetPLL2ClockFreq+0x128>)
 81075b0:	61fb      	str	r3, [r7, #28]
      break;
 81075b2:	e00b      	b.n	81075cc <LL_RCC_GetPLL2ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 81075b4:	f7ff fc36 	bl	8106e24 <LL_RCC_HSE_IsReady>
 81075b8:	4603      	mov	r3, r0
 81075ba:	2b00      	cmp	r3, #0
 81075bc:	d008      	beq.n	81075d0 <LL_RCC_GetPLL2ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 81075be:	4b31      	ldr	r3, [pc, #196]	@ (8107684 <LL_RCC_GetPLL2ClockFreq+0x12c>)
 81075c0:	61fb      	str	r3, [r7, #28]
      break;
 81075c2:	e005      	b.n	81075d0 <LL_RCC_GetPLL2ClockFreq+0x78>
      break;
 81075c4:	bf00      	nop
 81075c6:	e004      	b.n	81075d2 <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 81075c8:	bf00      	nop
 81075ca:	e002      	b.n	81075d2 <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 81075cc:	bf00      	nop
 81075ce:	e000      	b.n	81075d2 <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 81075d0:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 81075d2:	687b      	ldr	r3, [r7, #4]
 81075d4:	2200      	movs	r2, #0
 81075d6:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 81075d8:	687b      	ldr	r3, [r7, #4]
 81075da:	2200      	movs	r2, #0
 81075dc:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 81075de:	687b      	ldr	r3, [r7, #4]
 81075e0:	2200      	movs	r2, #0
 81075e2:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL2_GetM();
 81075e4:	f7ff fe16 	bl	8107214 <LL_RCC_PLL2_GetM>
 81075e8:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL2_GetN();
 81075ea:	f7ff fe05 	bl	81071f8 <LL_RCC_PLL2_GetN>
 81075ee:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL2FRACN_IsEnabled() != 0U)
 81075f0:	f7ff fdf0 	bl	81071d4 <LL_RCC_PLL2FRACN_IsEnabled>
 81075f4:	4603      	mov	r3, r0
 81075f6:	2b00      	cmp	r3, #0
 81075f8:	d002      	beq.n	8107600 <LL_RCC_GetPLL2ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL2_GetFRACN();
 81075fa:	f7ff fe49 	bl	8107290 <LL_RCC_PLL2_GetFRACN>
 81075fe:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 8107600:	693b      	ldr	r3, [r7, #16]
 8107602:	2b00      	cmp	r3, #0
 8107604:	d035      	beq.n	8107672 <LL_RCC_GetPLL2ClockFreq+0x11a>
  {
    if (LL_RCC_PLL2P_IsEnabled() != 0U)
 8107606:	f7ff fda9 	bl	810715c <LL_RCC_PLL2P_IsEnabled>
 810760a:	4603      	mov	r3, r0
 810760c:	2b00      	cmp	r3, #0
 810760e:	d00c      	beq.n	810762a <LL_RCC_GetPLL2ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetP());
 8107610:	f7ff fe0e 	bl	8107230 <LL_RCC_PLL2_GetP>
 8107614:	4603      	mov	r3, r0
 8107616:	9300      	str	r3, [sp, #0]
 8107618:	69bb      	ldr	r3, [r7, #24]
 810761a:	68fa      	ldr	r2, [r7, #12]
 810761c:	6939      	ldr	r1, [r7, #16]
 810761e:	69f8      	ldr	r0, [r7, #28]
 8107620:	f000 f8cc 	bl	81077bc <LL_RCC_CalcPLLClockFreq>
 8107624:	4602      	mov	r2, r0
 8107626:	687b      	ldr	r3, [r7, #4]
 8107628:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 810762a:	f7ff fdab 	bl	8107184 <LL_RCC_PLL2Q_IsEnabled>
 810762e:	4603      	mov	r3, r0
 8107630:	2b00      	cmp	r3, #0
 8107632:	d00c      	beq.n	810764e <LL_RCC_GetPLL2ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetQ());
 8107634:	f7ff fe0c 	bl	8107250 <LL_RCC_PLL2_GetQ>
 8107638:	4603      	mov	r3, r0
 810763a:	9300      	str	r3, [sp, #0]
 810763c:	69bb      	ldr	r3, [r7, #24]
 810763e:	68fa      	ldr	r2, [r7, #12]
 8107640:	6939      	ldr	r1, [r7, #16]
 8107642:	69f8      	ldr	r0, [r7, #28]
 8107644:	f000 f8ba 	bl	81077bc <LL_RCC_CalcPLLClockFreq>
 8107648:	4602      	mov	r2, r0
 810764a:	687b      	ldr	r3, [r7, #4]
 810764c:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL2R_IsEnabled() != 0U)
 810764e:	f7ff fdad 	bl	81071ac <LL_RCC_PLL2R_IsEnabled>
 8107652:	4603      	mov	r3, r0
 8107654:	2b00      	cmp	r3, #0
 8107656:	d00c      	beq.n	8107672 <LL_RCC_GetPLL2ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetR());
 8107658:	f7ff fe0a 	bl	8107270 <LL_RCC_PLL2_GetR>
 810765c:	4603      	mov	r3, r0
 810765e:	9300      	str	r3, [sp, #0]
 8107660:	69bb      	ldr	r3, [r7, #24]
 8107662:	68fa      	ldr	r2, [r7, #12]
 8107664:	6939      	ldr	r1, [r7, #16]
 8107666:	69f8      	ldr	r0, [r7, #28]
 8107668:	f000 f8a8 	bl	81077bc <LL_RCC_CalcPLLClockFreq>
 810766c:	4602      	mov	r2, r0
 810766e:	687b      	ldr	r3, [r7, #4]
 8107670:	609a      	str	r2, [r3, #8]
    }
  }
}
 8107672:	bf00      	nop
 8107674:	3720      	adds	r7, #32
 8107676:	46bd      	mov	sp, r7
 8107678:	bd80      	pop	{r7, pc}
 810767a:	bf00      	nop
 810767c:	03d09000 	.word	0x03d09000
 8107680:	003d0900 	.word	0x003d0900
 8107684:	017d7840 	.word	0x017d7840

08107688 <LL_RCC_GetPLL3ClockFreq>:
  * @brief  Return PLL3 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL3ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 8107688:	b580      	push	{r7, lr}
 810768a:	b08a      	sub	sp, #40	@ 0x28
 810768c:	af02      	add	r7, sp, #8
 810768e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 8107690:	2300      	movs	r3, #0
 8107692:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 8107694:	2300      	movs	r3, #0
 8107696:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 8107698:	f7ff fc96 	bl	8106fc8 <LL_RCC_PLL_GetSource>
 810769c:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 810769e:	697b      	ldr	r3, [r7, #20]
 81076a0:	2b02      	cmp	r3, #2
 81076a2:	d01f      	beq.n	81076e4 <LL_RCC_GetPLL3ClockFreq+0x5c>
 81076a4:	697b      	ldr	r3, [r7, #20]
 81076a6:	2b02      	cmp	r3, #2
 81076a8:	d824      	bhi.n	81076f4 <LL_RCC_GetPLL3ClockFreq+0x6c>
 81076aa:	697b      	ldr	r3, [r7, #20]
 81076ac:	2b00      	cmp	r3, #0
 81076ae:	d003      	beq.n	81076b8 <LL_RCC_GetPLL3ClockFreq+0x30>
 81076b0:	697b      	ldr	r3, [r7, #20]
 81076b2:	2b01      	cmp	r3, #1
 81076b4:	d00e      	beq.n	81076d4 <LL_RCC_GetPLL3ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 81076b6:	e01d      	b.n	81076f4 <LL_RCC_GetPLL3ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 81076b8:	f7ff fbc8 	bl	8106e4c <LL_RCC_HSI_IsReady>
 81076bc:	4603      	mov	r3, r0
 81076be:	2b00      	cmp	r3, #0
 81076c0:	d01a      	beq.n	81076f8 <LL_RCC_GetPLL3ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 81076c2:	f7ff fbd5 	bl	8106e70 <LL_RCC_HSI_GetDivider>
 81076c6:	4603      	mov	r3, r0
 81076c8:	08db      	lsrs	r3, r3, #3
 81076ca:	4a39      	ldr	r2, [pc, #228]	@ (81077b0 <LL_RCC_GetPLL3ClockFreq+0x128>)
 81076cc:	fa22 f303 	lsr.w	r3, r2, r3
 81076d0:	61fb      	str	r3, [r7, #28]
      break;
 81076d2:	e011      	b.n	81076f8 <LL_RCC_GetPLL3ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 81076d4:	f7ff fbda 	bl	8106e8c <LL_RCC_CSI_IsReady>
 81076d8:	4603      	mov	r3, r0
 81076da:	2b00      	cmp	r3, #0
 81076dc:	d00e      	beq.n	81076fc <LL_RCC_GetPLL3ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 81076de:	4b35      	ldr	r3, [pc, #212]	@ (81077b4 <LL_RCC_GetPLL3ClockFreq+0x12c>)
 81076e0:	61fb      	str	r3, [r7, #28]
      break;
 81076e2:	e00b      	b.n	81076fc <LL_RCC_GetPLL3ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 81076e4:	f7ff fb9e 	bl	8106e24 <LL_RCC_HSE_IsReady>
 81076e8:	4603      	mov	r3, r0
 81076ea:	2b00      	cmp	r3, #0
 81076ec:	d008      	beq.n	8107700 <LL_RCC_GetPLL3ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 81076ee:	4b32      	ldr	r3, [pc, #200]	@ (81077b8 <LL_RCC_GetPLL3ClockFreq+0x130>)
 81076f0:	61fb      	str	r3, [r7, #28]
      break;
 81076f2:	e005      	b.n	8107700 <LL_RCC_GetPLL3ClockFreq+0x78>
      break;
 81076f4:	bf00      	nop
 81076f6:	e004      	b.n	8107702 <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 81076f8:	bf00      	nop
 81076fa:	e002      	b.n	8107702 <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 81076fc:	bf00      	nop
 81076fe:	e000      	b.n	8107702 <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 8107700:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 8107702:	687b      	ldr	r3, [r7, #4]
 8107704:	2200      	movs	r2, #0
 8107706:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 8107708:	687b      	ldr	r3, [r7, #4]
 810770a:	2200      	movs	r2, #0
 810770c:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 810770e:	687b      	ldr	r3, [r7, #4]
 8107710:	2200      	movs	r2, #0
 8107712:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL3_GetM();
 8107714:	f7ff fe3c 	bl	8107390 <LL_RCC_PLL3_GetM>
 8107718:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL3_GetN();
 810771a:	f7ff fe2b 	bl	8107374 <LL_RCC_PLL3_GetN>
 810771e:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL3FRACN_IsEnabled() != 0U)
 8107720:	f7ff fe14 	bl	810734c <LL_RCC_PLL3FRACN_IsEnabled>
 8107724:	4603      	mov	r3, r0
 8107726:	2b00      	cmp	r3, #0
 8107728:	d002      	beq.n	8107730 <LL_RCC_GetPLL3ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL3_GetFRACN();
 810772a:	f7ff fe6f 	bl	810740c <LL_RCC_PLL3_GetFRACN>
 810772e:	61b8      	str	r0, [r7, #24]
  }

  if ((m != 0U) && (pllinputfreq != 0U))
 8107730:	693b      	ldr	r3, [r7, #16]
 8107732:	2b00      	cmp	r3, #0
 8107734:	d038      	beq.n	81077a8 <LL_RCC_GetPLL3ClockFreq+0x120>
 8107736:	69fb      	ldr	r3, [r7, #28]
 8107738:	2b00      	cmp	r3, #0
 810773a:	d035      	beq.n	81077a8 <LL_RCC_GetPLL3ClockFreq+0x120>
  {
    if (LL_RCC_PLL3P_IsEnabled() != 0U)
 810773c:	f7ff fdca 	bl	81072d4 <LL_RCC_PLL3P_IsEnabled>
 8107740:	4603      	mov	r3, r0
 8107742:	2b00      	cmp	r3, #0
 8107744:	d00c      	beq.n	8107760 <LL_RCC_GetPLL3ClockFreq+0xd8>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetP());
 8107746:	f7ff fe31 	bl	81073ac <LL_RCC_PLL3_GetP>
 810774a:	4603      	mov	r3, r0
 810774c:	9300      	str	r3, [sp, #0]
 810774e:	69bb      	ldr	r3, [r7, #24]
 8107750:	68fa      	ldr	r2, [r7, #12]
 8107752:	6939      	ldr	r1, [r7, #16]
 8107754:	69f8      	ldr	r0, [r7, #28]
 8107756:	f000 f831 	bl	81077bc <LL_RCC_CalcPLLClockFreq>
 810775a:	4602      	mov	r2, r0
 810775c:	687b      	ldr	r3, [r7, #4]
 810775e:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 8107760:	f7ff fdcc 	bl	81072fc <LL_RCC_PLL3Q_IsEnabled>
 8107764:	4603      	mov	r3, r0
 8107766:	2b00      	cmp	r3, #0
 8107768:	d00c      	beq.n	8107784 <LL_RCC_GetPLL3ClockFreq+0xfc>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetQ());
 810776a:	f7ff fe2f 	bl	81073cc <LL_RCC_PLL3_GetQ>
 810776e:	4603      	mov	r3, r0
 8107770:	9300      	str	r3, [sp, #0]
 8107772:	69bb      	ldr	r3, [r7, #24]
 8107774:	68fa      	ldr	r2, [r7, #12]
 8107776:	6939      	ldr	r1, [r7, #16]
 8107778:	69f8      	ldr	r0, [r7, #28]
 810777a:	f000 f81f 	bl	81077bc <LL_RCC_CalcPLLClockFreq>
 810777e:	4602      	mov	r2, r0
 8107780:	687b      	ldr	r3, [r7, #4]
 8107782:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL3R_IsEnabled() != 0U)
 8107784:	f7ff fdce 	bl	8107324 <LL_RCC_PLL3R_IsEnabled>
 8107788:	4603      	mov	r3, r0
 810778a:	2b00      	cmp	r3, #0
 810778c:	d00c      	beq.n	81077a8 <LL_RCC_GetPLL3ClockFreq+0x120>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetR());
 810778e:	f7ff fe2d 	bl	81073ec <LL_RCC_PLL3_GetR>
 8107792:	4603      	mov	r3, r0
 8107794:	9300      	str	r3, [sp, #0]
 8107796:	69bb      	ldr	r3, [r7, #24]
 8107798:	68fa      	ldr	r2, [r7, #12]
 810779a:	6939      	ldr	r1, [r7, #16]
 810779c:	69f8      	ldr	r0, [r7, #28]
 810779e:	f000 f80d 	bl	81077bc <LL_RCC_CalcPLLClockFreq>
 81077a2:	4602      	mov	r2, r0
 81077a4:	687b      	ldr	r3, [r7, #4]
 81077a6:	609a      	str	r2, [r3, #8]
    }
  }
}
 81077a8:	bf00      	nop
 81077aa:	3720      	adds	r7, #32
 81077ac:	46bd      	mov	sp, r7
 81077ae:	bd80      	pop	{r7, pc}
 81077b0:	03d09000 	.word	0x03d09000
 81077b4:	003d0900 	.word	0x003d0900
 81077b8:	017d7840 	.word	0x017d7840

081077bc <LL_RCC_CalcPLLClockFreq>:
  * @param  PQR    VCO output divider (P, Q or R)
  *                Between 1 and 128, except for PLL1P Odd value not allowed
  * @retval PLL1 clock frequency (in Hz)
  */
uint32_t LL_RCC_CalcPLLClockFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t PQR)
{
 81077bc:	b480      	push	{r7}
 81077be:	b087      	sub	sp, #28
 81077c0:	af00      	add	r7, sp, #0
 81077c2:	60f8      	str	r0, [r7, #12]
 81077c4:	60b9      	str	r1, [r7, #8]
 81077c6:	607a      	str	r2, [r7, #4]
 81077c8:	603b      	str	r3, [r7, #0]
  float_t freq;

  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN / (float_t)0x2000));
 81077ca:	68fb      	ldr	r3, [r7, #12]
 81077cc:	ee07 3a90 	vmov	s15, r3
 81077d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81077d4:	68bb      	ldr	r3, [r7, #8]
 81077d6:	ee07 3a90 	vmov	s15, r3
 81077da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81077de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81077e2:	687b      	ldr	r3, [r7, #4]
 81077e4:	ee07 3a90 	vmov	s15, r3
 81077e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81077ec:	683b      	ldr	r3, [r7, #0]
 81077ee:	ee07 3a90 	vmov	s15, r3
 81077f2:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 81077f6:	eddf 5a10 	vldr	s11, [pc, #64]	@ 8107838 <LL_RCC_CalcPLLClockFreq+0x7c>
 81077fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81077fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107806:	edc7 7a05 	vstr	s15, [r7, #20]

  freq = freq / (float_t)PQR;
 810780a:	6a3b      	ldr	r3, [r7, #32]
 810780c:	ee07 3a90 	vmov	s15, r3
 8107810:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8107814:	edd7 6a05 	vldr	s13, [r7, #20]
 8107818:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810781c:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint32_t)freq;
 8107820:	edd7 7a05 	vldr	s15, [r7, #20]
 8107824:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107828:	ee17 3a90 	vmov	r3, s15
}
 810782c:	4618      	mov	r0, r3
 810782e:	371c      	adds	r7, #28
 8107830:	46bd      	mov	sp, r7
 8107832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107836:	4770      	bx	lr
 8107838:	46000000 	.word	0x46000000

0810783c <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 810783c:	b590      	push	{r4, r7, lr}
 810783e:	b087      	sub	sp, #28
 8107840:	af00      	add	r7, sp, #0
 8107842:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8107844:	2300      	movs	r3, #0
 8107846:	617b      	str	r3, [r7, #20]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8107848:	6878      	ldr	r0, [r7, #4]
 810784a:	f7ff fbb1 	bl	8106fb0 <LL_RCC_GetUSARTClockSource>
 810784e:	4603      	mov	r3, r0
 8107850:	4a62      	ldr	r2, [pc, #392]	@ (81079dc <LL_RCC_GetUSARTClockFreq+0x1a0>)
 8107852:	4293      	cmp	r3, r2
 8107854:	f000 80a9 	beq.w	81079aa <LL_RCC_GetUSARTClockFreq+0x16e>
 8107858:	4a60      	ldr	r2, [pc, #384]	@ (81079dc <LL_RCC_GetUSARTClockFreq+0x1a0>)
 810785a:	4293      	cmp	r3, r2
 810785c:	f200 80ae 	bhi.w	81079bc <LL_RCC_GetUSARTClockFreq+0x180>
 8107860:	4a5f      	ldr	r2, [pc, #380]	@ (81079e0 <LL_RCC_GetUSARTClockFreq+0x1a4>)
 8107862:	4293      	cmp	r3, r2
 8107864:	f000 80a1 	beq.w	81079aa <LL_RCC_GetUSARTClockFreq+0x16e>
 8107868:	4a5d      	ldr	r2, [pc, #372]	@ (81079e0 <LL_RCC_GetUSARTClockFreq+0x1a4>)
 810786a:	4293      	cmp	r3, r2
 810786c:	f200 80a6 	bhi.w	81079bc <LL_RCC_GetUSARTClockFreq+0x180>
 8107870:	4a5c      	ldr	r2, [pc, #368]	@ (81079e4 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 8107872:	4293      	cmp	r3, r2
 8107874:	f000 8091 	beq.w	810799a <LL_RCC_GetUSARTClockFreq+0x15e>
 8107878:	4a5a      	ldr	r2, [pc, #360]	@ (81079e4 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 810787a:	4293      	cmp	r3, r2
 810787c:	f200 809e 	bhi.w	81079bc <LL_RCC_GetUSARTClockFreq+0x180>
 8107880:	4a59      	ldr	r2, [pc, #356]	@ (81079e8 <LL_RCC_GetUSARTClockFreq+0x1ac>)
 8107882:	4293      	cmp	r3, r2
 8107884:	f000 8089 	beq.w	810799a <LL_RCC_GetUSARTClockFreq+0x15e>
 8107888:	4a57      	ldr	r2, [pc, #348]	@ (81079e8 <LL_RCC_GetUSARTClockFreq+0x1ac>)
 810788a:	4293      	cmp	r3, r2
 810788c:	f200 8096 	bhi.w	81079bc <LL_RCC_GetUSARTClockFreq+0x180>
 8107890:	4a56      	ldr	r2, [pc, #344]	@ (81079ec <LL_RCC_GetUSARTClockFreq+0x1b0>)
 8107892:	4293      	cmp	r3, r2
 8107894:	d073      	beq.n	810797e <LL_RCC_GetUSARTClockFreq+0x142>
 8107896:	4a55      	ldr	r2, [pc, #340]	@ (81079ec <LL_RCC_GetUSARTClockFreq+0x1b0>)
 8107898:	4293      	cmp	r3, r2
 810789a:	f200 808f 	bhi.w	81079bc <LL_RCC_GetUSARTClockFreq+0x180>
 810789e:	4a54      	ldr	r2, [pc, #336]	@ (81079f0 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 81078a0:	4293      	cmp	r3, r2
 81078a2:	d06c      	beq.n	810797e <LL_RCC_GetUSARTClockFreq+0x142>
 81078a4:	4a52      	ldr	r2, [pc, #328]	@ (81079f0 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 81078a6:	4293      	cmp	r3, r2
 81078a8:	f200 8088 	bhi.w	81079bc <LL_RCC_GetUSARTClockFreq+0x180>
 81078ac:	4a51      	ldr	r2, [pc, #324]	@ (81079f4 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 81078ae:	4293      	cmp	r3, r2
 81078b0:	d058      	beq.n	8107964 <LL_RCC_GetUSARTClockFreq+0x128>
 81078b2:	4a50      	ldr	r2, [pc, #320]	@ (81079f4 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 81078b4:	4293      	cmp	r3, r2
 81078b6:	f200 8081 	bhi.w	81079bc <LL_RCC_GetUSARTClockFreq+0x180>
 81078ba:	4a4f      	ldr	r2, [pc, #316]	@ (81079f8 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 81078bc:	4293      	cmp	r3, r2
 81078be:	d051      	beq.n	8107964 <LL_RCC_GetUSARTClockFreq+0x128>
 81078c0:	4a4d      	ldr	r2, [pc, #308]	@ (81079f8 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 81078c2:	4293      	cmp	r3, r2
 81078c4:	d87a      	bhi.n	81079bc <LL_RCC_GetUSARTClockFreq+0x180>
 81078c6:	4a4d      	ldr	r2, [pc, #308]	@ (81079fc <LL_RCC_GetUSARTClockFreq+0x1c0>)
 81078c8:	4293      	cmp	r3, r2
 81078ca:	d03e      	beq.n	810794a <LL_RCC_GetUSARTClockFreq+0x10e>
 81078cc:	4a4b      	ldr	r2, [pc, #300]	@ (81079fc <LL_RCC_GetUSARTClockFreq+0x1c0>)
 81078ce:	4293      	cmp	r3, r2
 81078d0:	d874      	bhi.n	81079bc <LL_RCC_GetUSARTClockFreq+0x180>
 81078d2:	4a4b      	ldr	r2, [pc, #300]	@ (8107a00 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 81078d4:	4293      	cmp	r3, r2
 81078d6:	d038      	beq.n	810794a <LL_RCC_GetUSARTClockFreq+0x10e>
 81078d8:	4a49      	ldr	r2, [pc, #292]	@ (8107a00 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 81078da:	4293      	cmp	r3, r2
 81078dc:	d86e      	bhi.n	81079bc <LL_RCC_GetUSARTClockFreq+0x180>
 81078de:	4a49      	ldr	r2, [pc, #292]	@ (8107a04 <LL_RCC_GetUSARTClockFreq+0x1c8>)
 81078e0:	4293      	cmp	r3, r2
 81078e2:	d01a      	beq.n	810791a <LL_RCC_GetUSARTClockFreq+0xde>
 81078e4:	4a48      	ldr	r2, [pc, #288]	@ (8107a08 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 81078e6:	4293      	cmp	r3, r2
 81078e8:	d168      	bne.n	81079bc <LL_RCC_GetUSARTClockFreq+0x180>
  {
    case LL_RCC_USART16_CLKSOURCE_PCLK2:
      usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 81078ea:	f000 f895 	bl	8107a18 <RCC_GetSystemClockFreq>
 81078ee:	4604      	mov	r4, r0
 81078f0:	f7ff fb00 	bl	8106ef4 <LL_RCC_GetSysPrescaler>
 81078f4:	4603      	mov	r3, r0
 81078f6:	0a1b      	lsrs	r3, r3, #8
 81078f8:	f003 030f 	and.w	r3, r3, #15
 81078fc:	4a43      	ldr	r2, [pc, #268]	@ (8107a0c <LL_RCC_GetUSARTClockFreq+0x1d0>)
 81078fe:	5cd3      	ldrb	r3, [r2, r3]
 8107900:	f003 031f 	and.w	r3, r3, #31
 8107904:	fa24 f303 	lsr.w	r3, r4, r3
 8107908:	4618      	mov	r0, r3
 810790a:	f000 f8e7 	bl	8107adc <RCC_GetHCLKClockFreq>
 810790e:	4603      	mov	r3, r0
 8107910:	4618      	mov	r0, r3
 8107912:	f000 f911 	bl	8107b38 <RCC_GetPCLK2ClockFreq>
 8107916:	6178      	str	r0, [r7, #20]
      break;
 8107918:	e05b      	b.n	81079d2 <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART234578_CLKSOURCE_PCLK1:
      usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 810791a:	f000 f87d 	bl	8107a18 <RCC_GetSystemClockFreq>
 810791e:	4604      	mov	r4, r0
 8107920:	f7ff fae8 	bl	8106ef4 <LL_RCC_GetSysPrescaler>
 8107924:	4603      	mov	r3, r0
 8107926:	0a1b      	lsrs	r3, r3, #8
 8107928:	f003 030f 	and.w	r3, r3, #15
 810792c:	4a37      	ldr	r2, [pc, #220]	@ (8107a0c <LL_RCC_GetUSARTClockFreq+0x1d0>)
 810792e:	5cd3      	ldrb	r3, [r2, r3]
 8107930:	f003 031f 	and.w	r3, r3, #31
 8107934:	fa24 f303 	lsr.w	r3, r4, r3
 8107938:	4618      	mov	r0, r3
 810793a:	f000 f8cf 	bl	8107adc <RCC_GetHCLKClockFreq>
 810793e:	4603      	mov	r3, r0
 8107940:	4618      	mov	r0, r3
 8107942:	f000 f8e1 	bl	8107b08 <RCC_GetPCLK1ClockFreq>
 8107946:	6178      	str	r0, [r7, #20]
      break;
 8107948:	e043      	b.n	81079d2 <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART16_CLKSOURCE_PLL2Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL2Q:
      if (LL_RCC_PLL2_IsReady() != 0U)
 810794a:	f7ff fbf3 	bl	8107134 <LL_RCC_PLL2_IsReady>
 810794e:	4603      	mov	r3, r0
 8107950:	2b00      	cmp	r3, #0
 8107952:	d035      	beq.n	81079c0 <LL_RCC_GetUSARTClockFreq+0x184>
      {
        LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 8107954:	f107 0308 	add.w	r3, r7, #8
 8107958:	4618      	mov	r0, r3
 810795a:	f7ff fdfd 	bl	8107558 <LL_RCC_GetPLL2ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 810795e:	68fb      	ldr	r3, [r7, #12]
 8107960:	617b      	str	r3, [r7, #20]
      }
      break;
 8107962:	e02d      	b.n	81079c0 <LL_RCC_GetUSARTClockFreq+0x184>

    case LL_RCC_USART16_CLKSOURCE_PLL3Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL3Q:
      if (LL_RCC_PLL3_IsReady() != 0U)
 8107964:	f7ff fca2 	bl	81072ac <LL_RCC_PLL3_IsReady>
 8107968:	4603      	mov	r3, r0
 810796a:	2b00      	cmp	r3, #0
 810796c:	d02a      	beq.n	81079c4 <LL_RCC_GetUSARTClockFreq+0x188>
      {
        LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 810796e:	f107 0308 	add.w	r3, r7, #8
 8107972:	4618      	mov	r0, r3
 8107974:	f7ff fe88 	bl	8107688 <LL_RCC_GetPLL3ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8107978:	68fb      	ldr	r3, [r7, #12]
 810797a:	617b      	str	r3, [r7, #20]
      }
      break;
 810797c:	e022      	b.n	81079c4 <LL_RCC_GetUSARTClockFreq+0x188>

    case LL_RCC_USART16_CLKSOURCE_HSI:
    case LL_RCC_USART234578_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
 810797e:	f7ff fa65 	bl	8106e4c <LL_RCC_HSI_IsReady>
 8107982:	4603      	mov	r3, r0
 8107984:	2b00      	cmp	r3, #0
 8107986:	d01f      	beq.n	81079c8 <LL_RCC_GetUSARTClockFreq+0x18c>
      {
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8107988:	f7ff fa72 	bl	8106e70 <LL_RCC_HSI_GetDivider>
 810798c:	4603      	mov	r3, r0
 810798e:	08db      	lsrs	r3, r3, #3
 8107990:	4a1f      	ldr	r2, [pc, #124]	@ (8107a10 <LL_RCC_GetUSARTClockFreq+0x1d4>)
 8107992:	fa22 f303 	lsr.w	r3, r2, r3
 8107996:	617b      	str	r3, [r7, #20]
      }
      break;
 8107998:	e016      	b.n	81079c8 <LL_RCC_GetUSARTClockFreq+0x18c>

    case LL_RCC_USART16_CLKSOURCE_CSI:
    case LL_RCC_USART234578_CLKSOURCE_CSI:
      if (LL_RCC_CSI_IsReady() != 0U)
 810799a:	f7ff fa77 	bl	8106e8c <LL_RCC_CSI_IsReady>
 810799e:	4603      	mov	r3, r0
 81079a0:	2b00      	cmp	r3, #0
 81079a2:	d013      	beq.n	81079cc <LL_RCC_GetUSARTClockFreq+0x190>
      {
        usart_frequency = CSI_VALUE;
 81079a4:	4b1b      	ldr	r3, [pc, #108]	@ (8107a14 <LL_RCC_GetUSARTClockFreq+0x1d8>)
 81079a6:	617b      	str	r3, [r7, #20]
      }
      break;
 81079a8:	e010      	b.n	81079cc <LL_RCC_GetUSARTClockFreq+0x190>

    case LL_RCC_USART16_CLKSOURCE_LSE:
    case LL_RCC_USART234578_CLKSOURCE_LSE:
      if (LL_RCC_LSE_IsReady() != 0U)
 81079aa:	f7ff fa83 	bl	8106eb4 <LL_RCC_LSE_IsReady>
 81079ae:	4603      	mov	r3, r0
 81079b0:	2b00      	cmp	r3, #0
 81079b2:	d00d      	beq.n	81079d0 <LL_RCC_GetUSARTClockFreq+0x194>
      {
        usart_frequency = LSE_VALUE;
 81079b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 81079b8:	617b      	str	r3, [r7, #20]
      }
      break;
 81079ba:	e009      	b.n	81079d0 <LL_RCC_GetUSARTClockFreq+0x194>

    default:
      /* Kernel clock disabled */
      break;
 81079bc:	bf00      	nop
 81079be:	e008      	b.n	81079d2 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 81079c0:	bf00      	nop
 81079c2:	e006      	b.n	81079d2 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 81079c4:	bf00      	nop
 81079c6:	e004      	b.n	81079d2 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 81079c8:	bf00      	nop
 81079ca:	e002      	b.n	81079d2 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 81079cc:	bf00      	nop
 81079ce:	e000      	b.n	81079d2 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 81079d0:	bf00      	nop
  }

  return usart_frequency;
 81079d2:	697b      	ldr	r3, [r7, #20]
}
 81079d4:	4618      	mov	r0, r3
 81079d6:	371c      	adds	r7, #28
 81079d8:	46bd      	mov	sp, r7
 81079da:	bd90      	pop	{r4, r7, pc}
 81079dc:	07050308 	.word	0x07050308
 81079e0:	07050008 	.word	0x07050008
 81079e4:	07040308 	.word	0x07040308
 81079e8:	07040008 	.word	0x07040008
 81079ec:	07030308 	.word	0x07030308
 81079f0:	07030008 	.word	0x07030008
 81079f4:	07020308 	.word	0x07020308
 81079f8:	07020008 	.word	0x07020008
 81079fc:	07010308 	.word	0x07010308
 8107a00:	07010008 	.word	0x07010008
 8107a04:	07000008 	.word	0x07000008
 8107a08:	07000308 	.word	0x07000308
 8107a0c:	0810b1fc 	.word	0x0810b1fc
 8107a10:	03d09000 	.word	0x03d09000
 8107a14:	003d0900 	.word	0x003d0900

08107a18 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8107a18:	b580      	push	{r7, lr}
 8107a1a:	b084      	sub	sp, #16
 8107a1c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8107a1e:	2300      	movs	r3, #0
 8107a20:	60fb      	str	r3, [r7, #12]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8107a22:	f7ff fa59 	bl	8106ed8 <LL_RCC_GetSysClkSource>
 8107a26:	4603      	mov	r3, r0
 8107a28:	2b18      	cmp	r3, #24
 8107a2a:	d84b      	bhi.n	8107ac4 <RCC_GetSystemClockFreq+0xac>
 8107a2c:	a201      	add	r2, pc, #4	@ (adr r2, 8107a34 <RCC_GetSystemClockFreq+0x1c>)
 8107a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107a32:	bf00      	nop
 8107a34:	08107a99 	.word	0x08107a99
 8107a38:	08107ac5 	.word	0x08107ac5
 8107a3c:	08107ac5 	.word	0x08107ac5
 8107a40:	08107ac5 	.word	0x08107ac5
 8107a44:	08107ac5 	.word	0x08107ac5
 8107a48:	08107ac5 	.word	0x08107ac5
 8107a4c:	08107ac5 	.word	0x08107ac5
 8107a50:	08107ac5 	.word	0x08107ac5
 8107a54:	08107aab 	.word	0x08107aab
 8107a58:	08107ac5 	.word	0x08107ac5
 8107a5c:	08107ac5 	.word	0x08107ac5
 8107a60:	08107ac5 	.word	0x08107ac5
 8107a64:	08107ac5 	.word	0x08107ac5
 8107a68:	08107ac5 	.word	0x08107ac5
 8107a6c:	08107ac5 	.word	0x08107ac5
 8107a70:	08107ac5 	.word	0x08107ac5
 8107a74:	08107ab1 	.word	0x08107ab1
 8107a78:	08107ac5 	.word	0x08107ac5
 8107a7c:	08107ac5 	.word	0x08107ac5
 8107a80:	08107ac5 	.word	0x08107ac5
 8107a84:	08107ac5 	.word	0x08107ac5
 8107a88:	08107ac5 	.word	0x08107ac5
 8107a8c:	08107ac5 	.word	0x08107ac5
 8107a90:	08107ac5 	.word	0x08107ac5
 8107a94:	08107ab7 	.word	0x08107ab7
  {
    /* No check on Ready: Won't be selected by hardware if not */
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8107a98:	f7ff f9ea 	bl	8106e70 <LL_RCC_HSI_GetDivider>
 8107a9c:	4603      	mov	r3, r0
 8107a9e:	08db      	lsrs	r3, r3, #3
 8107aa0:	4a0b      	ldr	r2, [pc, #44]	@ (8107ad0 <RCC_GetSystemClockFreq+0xb8>)
 8107aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8107aa6:	60fb      	str	r3, [r7, #12]
      break;
 8107aa8:	e00d      	b.n	8107ac6 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_CSI:
      frequency = CSI_VALUE;
 8107aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8107ad4 <RCC_GetSystemClockFreq+0xbc>)
 8107aac:	60fb      	str	r3, [r7, #12]
      break;
 8107aae:	e00a      	b.n	8107ac6 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:
      frequency = HSE_VALUE;
 8107ab0:	4b09      	ldr	r3, [pc, #36]	@ (8107ad8 <RCC_GetSystemClockFreq+0xc0>)
 8107ab2:	60fb      	str	r3, [r7, #12]
      break;
 8107ab4:	e007      	b.n	8107ac6 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL1:
      LL_RCC_GetPLL1ClockFreq(&PLL_Clocks);
 8107ab6:	463b      	mov	r3, r7
 8107ab8:	4618      	mov	r0, r3
 8107aba:	f7ff fcb5 	bl	8107428 <LL_RCC_GetPLL1ClockFreq>
      frequency = PLL_Clocks.PLL_P_Frequency;
 8107abe:	683b      	ldr	r3, [r7, #0]
 8107ac0:	60fb      	str	r3, [r7, #12]
      break;
 8107ac2:	e000      	b.n	8107ac6 <RCC_GetSystemClockFreq+0xae>

    default:
      /* Nothing to do */
      break;
 8107ac4:	bf00      	nop
  }

  return frequency;
 8107ac6:	68fb      	ldr	r3, [r7, #12]
}
 8107ac8:	4618      	mov	r0, r3
 8107aca:	3710      	adds	r7, #16
 8107acc:	46bd      	mov	sp, r7
 8107ace:	bd80      	pop	{r7, pc}
 8107ad0:	03d09000 	.word	0x03d09000
 8107ad4:	003d0900 	.word	0x003d0900
 8107ad8:	017d7840 	.word	0x017d7840

08107adc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8107adc:	b580      	push	{r7, lr}
 8107ade:	b082      	sub	sp, #8
 8107ae0:	af00      	add	r7, sp, #0
 8107ae2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8107ae4:	f7ff fa14 	bl	8106f10 <LL_RCC_GetAHBPrescaler>
 8107ae8:	4603      	mov	r3, r0
 8107aea:	f003 030f 	and.w	r3, r3, #15
 8107aee:	4a05      	ldr	r2, [pc, #20]	@ (8107b04 <RCC_GetHCLKClockFreq+0x28>)
 8107af0:	5cd3      	ldrb	r3, [r2, r3]
 8107af2:	f003 031f 	and.w	r3, r3, #31
 8107af6:	687a      	ldr	r2, [r7, #4]
 8107af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8107afc:	4618      	mov	r0, r3
 8107afe:	3708      	adds	r7, #8
 8107b00:	46bd      	mov	sp, r7
 8107b02:	bd80      	pop	{r7, pc}
 8107b04:	0810b1fc 	.word	0x0810b1fc

08107b08 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8107b08:	b580      	push	{r7, lr}
 8107b0a:	b082      	sub	sp, #8
 8107b0c:	af00      	add	r7, sp, #0
 8107b0e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8107b10:	f7ff fa0c 	bl	8106f2c <LL_RCC_GetAPB1Prescaler>
 8107b14:	4603      	mov	r3, r0
 8107b16:	091b      	lsrs	r3, r3, #4
 8107b18:	f003 0307 	and.w	r3, r3, #7
 8107b1c:	4a05      	ldr	r2, [pc, #20]	@ (8107b34 <RCC_GetPCLK1ClockFreq+0x2c>)
 8107b1e:	5cd3      	ldrb	r3, [r2, r3]
 8107b20:	f003 031f 	and.w	r3, r3, #31
 8107b24:	687a      	ldr	r2, [r7, #4]
 8107b26:	fa22 f303 	lsr.w	r3, r2, r3
}
 8107b2a:	4618      	mov	r0, r3
 8107b2c:	3708      	adds	r7, #8
 8107b2e:	46bd      	mov	sp, r7
 8107b30:	bd80      	pop	{r7, pc}
 8107b32:	bf00      	nop
 8107b34:	0810b1fc 	.word	0x0810b1fc

08107b38 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8107b38:	b580      	push	{r7, lr}
 8107b3a:	b082      	sub	sp, #8
 8107b3c:	af00      	add	r7, sp, #0
 8107b3e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8107b40:	f7ff fa02 	bl	8106f48 <LL_RCC_GetAPB2Prescaler>
 8107b44:	4603      	mov	r3, r0
 8107b46:	0a1b      	lsrs	r3, r3, #8
 8107b48:	f003 0307 	and.w	r3, r3, #7
 8107b4c:	4a05      	ldr	r2, [pc, #20]	@ (8107b64 <RCC_GetPCLK2ClockFreq+0x2c>)
 8107b4e:	5cd3      	ldrb	r3, [r2, r3]
 8107b50:	f003 031f 	and.w	r3, r3, #31
 8107b54:	687a      	ldr	r2, [r7, #4]
 8107b56:	fa22 f303 	lsr.w	r3, r2, r3
}
 8107b5a:	4618      	mov	r0, r3
 8107b5c:	3708      	adds	r7, #8
 8107b5e:	46bd      	mov	sp, r7
 8107b60:	bd80      	pop	{r7, pc}
 8107b62:	bf00      	nop
 8107b64:	0810b1fc 	.word	0x0810b1fc

08107b68 <LL_SPI_IsEnabled>:
{
 8107b68:	b480      	push	{r7}
 8107b6a:	b083      	sub	sp, #12
 8107b6c:	af00      	add	r7, sp, #0
 8107b6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8107b70:	687b      	ldr	r3, [r7, #4]
 8107b72:	681b      	ldr	r3, [r3, #0]
 8107b74:	f003 0301 	and.w	r3, r3, #1
 8107b78:	2b01      	cmp	r3, #1
 8107b7a:	d101      	bne.n	8107b80 <LL_SPI_IsEnabled+0x18>
 8107b7c:	2301      	movs	r3, #1
 8107b7e:	e000      	b.n	8107b82 <LL_SPI_IsEnabled+0x1a>
 8107b80:	2300      	movs	r3, #0
}
 8107b82:	4618      	mov	r0, r3
 8107b84:	370c      	adds	r7, #12
 8107b86:	46bd      	mov	sp, r7
 8107b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b8c:	4770      	bx	lr

08107b8e <LL_SPI_SetInternalSSLevel>:
{
 8107b8e:	b480      	push	{r7}
 8107b90:	b083      	sub	sp, #12
 8107b92:	af00      	add	r7, sp, #0
 8107b94:	6078      	str	r0, [r7, #4]
 8107b96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSI, SSLevel);
 8107b98:	687b      	ldr	r3, [r7, #4]
 8107b9a:	681b      	ldr	r3, [r3, #0]
 8107b9c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8107ba0:	683b      	ldr	r3, [r7, #0]
 8107ba2:	431a      	orrs	r2, r3
 8107ba4:	687b      	ldr	r3, [r7, #4]
 8107ba6:	601a      	str	r2, [r3, #0]
}
 8107ba8:	bf00      	nop
 8107baa:	370c      	adds	r7, #12
 8107bac:	46bd      	mov	sp, r7
 8107bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107bb2:	4770      	bx	lr

08107bb4 <LL_SPI_GetNSSPolarity>:
{
 8107bb4:	b480      	push	{r7}
 8107bb6:	b083      	sub	sp, #12
 8107bb8:	af00      	add	r7, sp, #0
 8107bba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SPIx->CFG2, SPI_CFG2_SSIOP));
 8107bbc:	687b      	ldr	r3, [r7, #4]
 8107bbe:	68db      	ldr	r3, [r3, #12]
 8107bc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
}
 8107bc4:	4618      	mov	r0, r3
 8107bc6:	370c      	adds	r7, #12
 8107bc8:	46bd      	mov	sp, r7
 8107bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107bce:	4770      	bx	lr

08107bd0 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly 0..0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8107bd0:	b480      	push	{r7}
 8107bd2:	b083      	sub	sp, #12
 8107bd4:	af00      	add	r7, sp, #0
 8107bd6:	6078      	str	r0, [r7, #4]
 8107bd8:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPOLY, CRCPoly);
 8107bda:	687b      	ldr	r3, [r7, #4]
 8107bdc:	683a      	ldr	r2, [r7, #0]
 8107bde:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8107be0:	bf00      	nop
 8107be2:	370c      	adds	r7, #12
 8107be4:	46bd      	mov	sp, r7
 8107be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107bea:	4770      	bx	lr

08107bec <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8107bec:	b580      	push	{r7, lr}
 8107bee:	b086      	sub	sp, #24
 8107bf0:	af00      	add	r7, sp, #0
 8107bf2:	6078      	str	r0, [r7, #4]
 8107bf4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8107bf6:	2301      	movs	r3, #1
 8107bf8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_LL_SPI_BAUDRATEPRESCALER(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  /* Check the SPI instance is not enabled */
  if (LL_SPI_IsEnabled(SPIx) == 0x00000000UL)
 8107bfa:	6878      	ldr	r0, [r7, #4]
 8107bfc:	f7ff ffb4 	bl	8107b68 <LL_SPI_IsEnabled>
 8107c00:	4603      	mov	r3, r0
 8107c02:	2b00      	cmp	r3, #0
 8107c04:	d169      	bne.n	8107cda <LL_SPI_Init+0xee>
       * Configure SPIx CFG1 with parameters:
       * - Master Baud Rate       : SPI_CFG1_MBR[2:0] bits
       * - CRC Computation Enable : SPI_CFG1_CRCEN bit
       * - Length of data frame   : SPI_CFG1_DSIZE[4:0] bits
       */
    MODIFY_REG(SPIx->CFG1, SPI_CFG1_MBR | SPI_CFG1_CRCEN | SPI_CFG1_DSIZE,
 8107c06:	687b      	ldr	r3, [r7, #4]
 8107c08:	689a      	ldr	r2, [r3, #8]
 8107c0a:	4b36      	ldr	r3, [pc, #216]	@ (8107ce4 <LL_SPI_Init+0xf8>)
 8107c0c:	4013      	ands	r3, r2
 8107c0e:	683a      	ldr	r2, [r7, #0]
 8107c10:	6991      	ldr	r1, [r2, #24]
 8107c12:	683a      	ldr	r2, [r7, #0]
 8107c14:	6a12      	ldr	r2, [r2, #32]
 8107c16:	4311      	orrs	r1, r2
 8107c18:	683a      	ldr	r2, [r7, #0]
 8107c1a:	6892      	ldr	r2, [r2, #8]
 8107c1c:	430a      	orrs	r2, r1
 8107c1e:	431a      	orrs	r2, r3
 8107c20:	687b      	ldr	r3, [r7, #4]
 8107c22:	609a      	str	r2, [r3, #8]
               SPI_InitStruct->BaudRate  | SPI_InitStruct->CRCCalculation | SPI_InitStruct->DataWidth);

    tmp_nss  = SPI_InitStruct->NSS;
 8107c24:	683b      	ldr	r3, [r7, #0]
 8107c26:	695b      	ldr	r3, [r3, #20]
 8107c28:	613b      	str	r3, [r7, #16]
    tmp_mode = SPI_InitStruct->Mode;
 8107c2a:	683b      	ldr	r3, [r7, #0]
 8107c2c:	685b      	ldr	r3, [r3, #4]
 8107c2e:	60fb      	str	r3, [r7, #12]
    tmp_nss_polarity = LL_SPI_GetNSSPolarity(SPIx);
 8107c30:	6878      	ldr	r0, [r7, #4]
 8107c32:	f7ff ffbf 	bl	8107bb4 <LL_SPI_GetNSSPolarity>
 8107c36:	60b8      	str	r0, [r7, #8]

    /* Checks to setup Internal SS signal level and avoid a MODF Error */
    if ((tmp_nss == LL_SPI_NSS_SOFT) && (((tmp_nss_polarity == LL_SPI_NSS_POLARITY_LOW)  && \
 8107c38:	693b      	ldr	r3, [r7, #16]
 8107c3a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8107c3e:	d112      	bne.n	8107c66 <LL_SPI_Init+0x7a>
 8107c40:	68bb      	ldr	r3, [r7, #8]
 8107c42:	2b00      	cmp	r3, #0
 8107c44:	d103      	bne.n	8107c4e <LL_SPI_Init+0x62>
 8107c46:	68fb      	ldr	r3, [r7, #12]
 8107c48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8107c4c:	d006      	beq.n	8107c5c <LL_SPI_Init+0x70>
                                          (tmp_mode == LL_SPI_MODE_MASTER))              || \
 8107c4e:	68bb      	ldr	r3, [r7, #8]
 8107c50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107c54:	d107      	bne.n	8107c66 <LL_SPI_Init+0x7a>
                                         ((tmp_nss_polarity == LL_SPI_NSS_POLARITY_HIGH) && \
 8107c56:	68fb      	ldr	r3, [r7, #12]
 8107c58:	2b00      	cmp	r3, #0
 8107c5a:	d104      	bne.n	8107c66 <LL_SPI_Init+0x7a>
                                          (tmp_mode == LL_SPI_MODE_SLAVE))))
    {
      LL_SPI_SetInternalSSLevel(SPIx, LL_SPI_SS_LEVEL_HIGH);
 8107c5c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8107c60:	6878      	ldr	r0, [r7, #4]
 8107c62:	f7ff ff94 	bl	8107b8e <LL_SPI_SetInternalSSLevel>
       * - ClockPhase             : SPI_CFG2_CPHA bit
       * - BitOrder               : SPI_CFG2_LSBFRST bit
       * - Master/Slave Mode      : SPI_CFG2_MASTER bit
       * - SPI Mode               : SPI_CFG2_COMM[1:0] bits
       */
    MODIFY_REG(SPIx->CFG2, SPI_CFG2_SSM   | SPI_CFG2_SSOE    |
 8107c66:	687b      	ldr	r3, [r7, #4]
 8107c68:	68db      	ldr	r3, [r3, #12]
 8107c6a:	f023 531f 	bic.w	r3, r3, #666894336	@ 0x27c00000
 8107c6e:	f423 23c0 	bic.w	r3, r3, #393216	@ 0x60000
 8107c72:	683a      	ldr	r2, [r7, #0]
 8107c74:	6951      	ldr	r1, [r2, #20]
 8107c76:	683a      	ldr	r2, [r7, #0]
 8107c78:	68d2      	ldr	r2, [r2, #12]
 8107c7a:	4311      	orrs	r1, r2
 8107c7c:	683a      	ldr	r2, [r7, #0]
 8107c7e:	6912      	ldr	r2, [r2, #16]
 8107c80:	4311      	orrs	r1, r2
 8107c82:	683a      	ldr	r2, [r7, #0]
 8107c84:	69d2      	ldr	r2, [r2, #28]
 8107c86:	4311      	orrs	r1, r2
 8107c88:	683a      	ldr	r2, [r7, #0]
 8107c8a:	6852      	ldr	r2, [r2, #4]
 8107c8c:	4311      	orrs	r1, r2
 8107c8e:	683a      	ldr	r2, [r7, #0]
 8107c90:	6812      	ldr	r2, [r2, #0]
 8107c92:	f402 22c0 	and.w	r2, r2, #393216	@ 0x60000
 8107c96:	430a      	orrs	r2, r1
 8107c98:	431a      	orrs	r2, r3
 8107c9a:	687b      	ldr	r3, [r7, #4]
 8107c9c:	60da      	str	r2, [r3, #12]

    /*---------------------------- SPIx CR1 Configuration ------------------------
       * Configure SPIx CR1 with parameter:
       * - Half Duplex Direction  : SPI_CR1_HDDIR bit
       */
    MODIFY_REG(SPIx->CR1, SPI_CR1_HDDIR, SPI_InitStruct->TransferDirection & SPI_CR1_HDDIR);
 8107c9e:	687b      	ldr	r3, [r7, #4]
 8107ca0:	681b      	ldr	r3, [r3, #0]
 8107ca2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8107ca6:	683b      	ldr	r3, [r7, #0]
 8107ca8:	681b      	ldr	r3, [r3, #0]
 8107caa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8107cae:	431a      	orrs	r2, r3
 8107cb0:	687b      	ldr	r3, [r7, #4]
 8107cb2:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CRCPOLY Configuration ----------------------
       * Configure SPIx CRCPOLY with parameter:
       * - CRCPoly                : CRCPOLY[31:0] bits
       */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8107cb4:	683b      	ldr	r3, [r7, #0]
 8107cb6:	6a1b      	ldr	r3, [r3, #32]
 8107cb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8107cbc:	d105      	bne.n	8107cca <LL_SPI_Init+0xde>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8107cbe:	683b      	ldr	r3, [r7, #0]
 8107cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8107cc2:	4619      	mov	r1, r3
 8107cc4:	6878      	ldr	r0, [r7, #4]
 8107cc6:	f7ff ff83 	bl	8107bd0 <LL_SPI_SetCRCPolynomial>
    }

    /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
    CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8107cca:	687b      	ldr	r3, [r7, #4]
 8107ccc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107cce:	f023 0201 	bic.w	r2, r3, #1
 8107cd2:	687b      	ldr	r3, [r7, #4]
 8107cd4:	651a      	str	r2, [r3, #80]	@ 0x50

    status = SUCCESS;
 8107cd6:	2300      	movs	r3, #0
 8107cd8:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8107cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8107cdc:	4618      	mov	r0, r3
 8107cde:	3718      	adds	r7, #24
 8107ce0:	46bd      	mov	sp, r7
 8107ce2:	bd80      	pop	{r7, pc}
 8107ce4:	8fbfffe0 	.word	0x8fbfffe0

08107ce8 <LL_USART_IsEnabled>:
{
 8107ce8:	b480      	push	{r7}
 8107cea:	b083      	sub	sp, #12
 8107cec:	af00      	add	r7, sp, #0
 8107cee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8107cf0:	687b      	ldr	r3, [r7, #4]
 8107cf2:	681b      	ldr	r3, [r3, #0]
 8107cf4:	f003 0301 	and.w	r3, r3, #1
 8107cf8:	2b01      	cmp	r3, #1
 8107cfa:	d101      	bne.n	8107d00 <LL_USART_IsEnabled+0x18>
 8107cfc:	2301      	movs	r3, #1
 8107cfe:	e000      	b.n	8107d02 <LL_USART_IsEnabled+0x1a>
 8107d00:	2300      	movs	r3, #0
}
 8107d02:	4618      	mov	r0, r3
 8107d04:	370c      	adds	r7, #12
 8107d06:	46bd      	mov	sp, r7
 8107d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107d0c:	4770      	bx	lr

08107d0e <LL_USART_SetPrescaler>:
{
 8107d0e:	b480      	push	{r7}
 8107d10:	b083      	sub	sp, #12
 8107d12:	af00      	add	r7, sp, #0
 8107d14:	6078      	str	r0, [r7, #4]
 8107d16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8107d18:	687b      	ldr	r3, [r7, #4]
 8107d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107d1c:	f023 030f 	bic.w	r3, r3, #15
 8107d20:	683a      	ldr	r2, [r7, #0]
 8107d22:	b292      	uxth	r2, r2
 8107d24:	431a      	orrs	r2, r3
 8107d26:	687b      	ldr	r3, [r7, #4]
 8107d28:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8107d2a:	bf00      	nop
 8107d2c:	370c      	adds	r7, #12
 8107d2e:	46bd      	mov	sp, r7
 8107d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107d34:	4770      	bx	lr

08107d36 <LL_USART_SetStopBitsLength>:
{
 8107d36:	b480      	push	{r7}
 8107d38:	b083      	sub	sp, #12
 8107d3a:	af00      	add	r7, sp, #0
 8107d3c:	6078      	str	r0, [r7, #4]
 8107d3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8107d40:	687b      	ldr	r3, [r7, #4]
 8107d42:	685b      	ldr	r3, [r3, #4]
 8107d44:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8107d48:	683b      	ldr	r3, [r7, #0]
 8107d4a:	431a      	orrs	r2, r3
 8107d4c:	687b      	ldr	r3, [r7, #4]
 8107d4e:	605a      	str	r2, [r3, #4]
}
 8107d50:	bf00      	nop
 8107d52:	370c      	adds	r7, #12
 8107d54:	46bd      	mov	sp, r7
 8107d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107d5a:	4770      	bx	lr

08107d5c <LL_USART_SetHWFlowCtrl>:
{
 8107d5c:	b480      	push	{r7}
 8107d5e:	b083      	sub	sp, #12
 8107d60:	af00      	add	r7, sp, #0
 8107d62:	6078      	str	r0, [r7, #4]
 8107d64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8107d66:	687b      	ldr	r3, [r7, #4]
 8107d68:	689b      	ldr	r3, [r3, #8]
 8107d6a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8107d6e:	683b      	ldr	r3, [r7, #0]
 8107d70:	431a      	orrs	r2, r3
 8107d72:	687b      	ldr	r3, [r7, #4]
 8107d74:	609a      	str	r2, [r3, #8]
}
 8107d76:	bf00      	nop
 8107d78:	370c      	adds	r7, #12
 8107d7a:	46bd      	mov	sp, r7
 8107d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107d80:	4770      	bx	lr
	...

08107d84 <LL_USART_SetBaudRate>:
{
 8107d84:	b480      	push	{r7}
 8107d86:	b087      	sub	sp, #28
 8107d88:	af00      	add	r7, sp, #0
 8107d8a:	60f8      	str	r0, [r7, #12]
 8107d8c:	60b9      	str	r1, [r7, #8]
 8107d8e:	607a      	str	r2, [r7, #4]
 8107d90:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8107d92:	687b      	ldr	r3, [r7, #4]
 8107d94:	2b0b      	cmp	r3, #11
 8107d96:	d83c      	bhi.n	8107e12 <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 8107d98:	6a3b      	ldr	r3, [r7, #32]
 8107d9a:	2b00      	cmp	r3, #0
 8107d9c:	d039      	beq.n	8107e12 <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8107d9e:	683b      	ldr	r3, [r7, #0]
 8107da0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8107da4:	d122      	bne.n	8107dec <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8107da6:	687b      	ldr	r3, [r7, #4]
 8107da8:	b2db      	uxtb	r3, r3
 8107daa:	461a      	mov	r2, r3
 8107dac:	4b1c      	ldr	r3, [pc, #112]	@ (8107e20 <LL_USART_SetBaudRate+0x9c>)
 8107dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8107db2:	68ba      	ldr	r2, [r7, #8]
 8107db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8107db8:	005a      	lsls	r2, r3, #1
 8107dba:	6a3b      	ldr	r3, [r7, #32]
 8107dbc:	085b      	lsrs	r3, r3, #1
 8107dbe:	441a      	add	r2, r3
 8107dc0:	6a3b      	ldr	r3, [r7, #32]
 8107dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8107dc6:	b29b      	uxth	r3, r3
 8107dc8:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8107dca:	697a      	ldr	r2, [r7, #20]
 8107dcc:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8107dd0:	4013      	ands	r3, r2
 8107dd2:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8107dd4:	697b      	ldr	r3, [r7, #20]
 8107dd6:	085b      	lsrs	r3, r3, #1
 8107dd8:	b29b      	uxth	r3, r3
 8107dda:	f003 0307 	and.w	r3, r3, #7
 8107dde:	693a      	ldr	r2, [r7, #16]
 8107de0:	4313      	orrs	r3, r2
 8107de2:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8107de4:	68fb      	ldr	r3, [r7, #12]
 8107de6:	693a      	ldr	r2, [r7, #16]
 8107de8:	60da      	str	r2, [r3, #12]
}
 8107dea:	e012      	b.n	8107e12 <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8107dec:	687b      	ldr	r3, [r7, #4]
 8107dee:	b2db      	uxtb	r3, r3
 8107df0:	461a      	mov	r2, r3
 8107df2:	4b0b      	ldr	r3, [pc, #44]	@ (8107e20 <LL_USART_SetBaudRate+0x9c>)
 8107df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8107df8:	68ba      	ldr	r2, [r7, #8]
 8107dfa:	fbb2 f2f3 	udiv	r2, r2, r3
 8107dfe:	6a3b      	ldr	r3, [r7, #32]
 8107e00:	085b      	lsrs	r3, r3, #1
 8107e02:	441a      	add	r2, r3
 8107e04:	6a3b      	ldr	r3, [r7, #32]
 8107e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8107e0a:	b29b      	uxth	r3, r3
 8107e0c:	461a      	mov	r2, r3
 8107e0e:	68fb      	ldr	r3, [r7, #12]
 8107e10:	60da      	str	r2, [r3, #12]
}
 8107e12:	bf00      	nop
 8107e14:	371c      	adds	r7, #28
 8107e16:	46bd      	mov	sp, r7
 8107e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107e1c:	4770      	bx	lr
 8107e1e:	bf00      	nop
 8107e20:	0810b20c 	.word	0x0810b20c

08107e24 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8107e24:	b580      	push	{r7, lr}
 8107e26:	b086      	sub	sp, #24
 8107e28:	af02      	add	r7, sp, #8
 8107e2a:	6078      	str	r0, [r7, #4]
 8107e2c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8107e2e:	2301      	movs	r3, #1
 8107e30:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8107e32:	2300      	movs	r3, #0
 8107e34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8107e36:	6878      	ldr	r0, [r7, #4]
 8107e38:	f7ff ff56 	bl	8107ce8 <LL_USART_IsEnabled>
 8107e3c:	4603      	mov	r3, r0
 8107e3e:	2b00      	cmp	r3, #0
 8107e40:	d17f      	bne.n	8107f42 <LL_USART_Init+0x11e>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8107e42:	687b      	ldr	r3, [r7, #4]
 8107e44:	681a      	ldr	r2, [r3, #0]
 8107e46:	4b41      	ldr	r3, [pc, #260]	@ (8107f4c <LL_USART_Init+0x128>)
 8107e48:	4013      	ands	r3, r2
 8107e4a:	683a      	ldr	r2, [r7, #0]
 8107e4c:	6891      	ldr	r1, [r2, #8]
 8107e4e:	683a      	ldr	r2, [r7, #0]
 8107e50:	6912      	ldr	r2, [r2, #16]
 8107e52:	4311      	orrs	r1, r2
 8107e54:	683a      	ldr	r2, [r7, #0]
 8107e56:	6952      	ldr	r2, [r2, #20]
 8107e58:	4311      	orrs	r1, r2
 8107e5a:	683a      	ldr	r2, [r7, #0]
 8107e5c:	69d2      	ldr	r2, [r2, #28]
 8107e5e:	430a      	orrs	r2, r1
 8107e60:	431a      	orrs	r2, r3
 8107e62:	687b      	ldr	r3, [r7, #4]
 8107e64:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8107e66:	683b      	ldr	r3, [r7, #0]
 8107e68:	68db      	ldr	r3, [r3, #12]
 8107e6a:	4619      	mov	r1, r3
 8107e6c:	6878      	ldr	r0, [r7, #4]
 8107e6e:	f7ff ff62 	bl	8107d36 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8107e72:	683b      	ldr	r3, [r7, #0]
 8107e74:	699b      	ldr	r3, [r3, #24]
 8107e76:	4619      	mov	r1, r3
 8107e78:	6878      	ldr	r0, [r7, #4]
 8107e7a:	f7ff ff6f 	bl	8107d5c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8107e7e:	687b      	ldr	r3, [r7, #4]
 8107e80:	4a33      	ldr	r2, [pc, #204]	@ (8107f50 <LL_USART_Init+0x12c>)
 8107e82:	4293      	cmp	r3, r2
 8107e84:	d104      	bne.n	8107e90 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 8107e86:	4833      	ldr	r0, [pc, #204]	@ (8107f54 <LL_USART_Init+0x130>)
 8107e88:	f7ff fcd8 	bl	810783c <LL_RCC_GetUSARTClockFreq>
 8107e8c:	60b8      	str	r0, [r7, #8]
 8107e8e:	e03d      	b.n	8107f0c <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART2)
 8107e90:	687b      	ldr	r3, [r7, #4]
 8107e92:	4a31      	ldr	r2, [pc, #196]	@ (8107f58 <LL_USART_Init+0x134>)
 8107e94:	4293      	cmp	r3, r2
 8107e96:	d104      	bne.n	8107ea2 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8107e98:	4830      	ldr	r0, [pc, #192]	@ (8107f5c <LL_USART_Init+0x138>)
 8107e9a:	f7ff fccf 	bl	810783c <LL_RCC_GetUSARTClockFreq>
 8107e9e:	60b8      	str	r0, [r7, #8]
 8107ea0:	e034      	b.n	8107f0c <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART3)
 8107ea2:	687b      	ldr	r3, [r7, #4]
 8107ea4:	4a2e      	ldr	r2, [pc, #184]	@ (8107f60 <LL_USART_Init+0x13c>)
 8107ea6:	4293      	cmp	r3, r2
 8107ea8:	d104      	bne.n	8107eb4 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8107eaa:	482c      	ldr	r0, [pc, #176]	@ (8107f5c <LL_USART_Init+0x138>)
 8107eac:	f7ff fcc6 	bl	810783c <LL_RCC_GetUSARTClockFreq>
 8107eb0:	60b8      	str	r0, [r7, #8]
 8107eb2:	e02b      	b.n	8107f0c <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART4)
 8107eb4:	687b      	ldr	r3, [r7, #4]
 8107eb6:	4a2b      	ldr	r2, [pc, #172]	@ (8107f64 <LL_USART_Init+0x140>)
 8107eb8:	4293      	cmp	r3, r2
 8107eba:	d104      	bne.n	8107ec6 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8107ebc:	4827      	ldr	r0, [pc, #156]	@ (8107f5c <LL_USART_Init+0x138>)
 8107ebe:	f7ff fcbd 	bl	810783c <LL_RCC_GetUSARTClockFreq>
 8107ec2:	60b8      	str	r0, [r7, #8]
 8107ec4:	e022      	b.n	8107f0c <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART5)
 8107ec6:	687b      	ldr	r3, [r7, #4]
 8107ec8:	4a27      	ldr	r2, [pc, #156]	@ (8107f68 <LL_USART_Init+0x144>)
 8107eca:	4293      	cmp	r3, r2
 8107ecc:	d104      	bne.n	8107ed8 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8107ece:	4823      	ldr	r0, [pc, #140]	@ (8107f5c <LL_USART_Init+0x138>)
 8107ed0:	f7ff fcb4 	bl	810783c <LL_RCC_GetUSARTClockFreq>
 8107ed4:	60b8      	str	r0, [r7, #8]
 8107ed6:	e019      	b.n	8107f0c <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART6)
 8107ed8:	687b      	ldr	r3, [r7, #4]
 8107eda:	4a24      	ldr	r2, [pc, #144]	@ (8107f6c <LL_USART_Init+0x148>)
 8107edc:	4293      	cmp	r3, r2
 8107ede:	d104      	bne.n	8107eea <LL_USART_Init+0xc6>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 8107ee0:	481c      	ldr	r0, [pc, #112]	@ (8107f54 <LL_USART_Init+0x130>)
 8107ee2:	f7ff fcab 	bl	810783c <LL_RCC_GetUSARTClockFreq>
 8107ee6:	60b8      	str	r0, [r7, #8]
 8107ee8:	e010      	b.n	8107f0c <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART7)
 8107eea:	687b      	ldr	r3, [r7, #4]
 8107eec:	4a20      	ldr	r2, [pc, #128]	@ (8107f70 <LL_USART_Init+0x14c>)
 8107eee:	4293      	cmp	r3, r2
 8107ef0:	d104      	bne.n	8107efc <LL_USART_Init+0xd8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8107ef2:	481a      	ldr	r0, [pc, #104]	@ (8107f5c <LL_USART_Init+0x138>)
 8107ef4:	f7ff fca2 	bl	810783c <LL_RCC_GetUSARTClockFreq>
 8107ef8:	60b8      	str	r0, [r7, #8]
 8107efa:	e007      	b.n	8107f0c <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART8)
 8107efc:	687b      	ldr	r3, [r7, #4]
 8107efe:	4a1d      	ldr	r2, [pc, #116]	@ (8107f74 <LL_USART_Init+0x150>)
 8107f00:	4293      	cmp	r3, r2
 8107f02:	d103      	bne.n	8107f0c <LL_USART_Init+0xe8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8107f04:	4815      	ldr	r0, [pc, #84]	@ (8107f5c <LL_USART_Init+0x138>)
 8107f06:	f7ff fc99 	bl	810783c <LL_RCC_GetUSARTClockFreq>
 8107f0a:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8107f0c:	68bb      	ldr	r3, [r7, #8]
 8107f0e:	2b00      	cmp	r3, #0
 8107f10:	d011      	beq.n	8107f36 <LL_USART_Init+0x112>
        && (USART_InitStruct->BaudRate != 0U))
 8107f12:	683b      	ldr	r3, [r7, #0]
 8107f14:	685b      	ldr	r3, [r3, #4]
 8107f16:	2b00      	cmp	r3, #0
 8107f18:	d00d      	beq.n	8107f36 <LL_USART_Init+0x112>
    {
      status = SUCCESS;
 8107f1a:	2300      	movs	r3, #0
 8107f1c:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->PrescalerValue,
 8107f1e:	683b      	ldr	r3, [r7, #0]
 8107f20:	681a      	ldr	r2, [r3, #0]
                           USART_InitStruct->OverSampling,
 8107f22:	683b      	ldr	r3, [r7, #0]
 8107f24:	69d9      	ldr	r1, [r3, #28]
                           USART_InitStruct->BaudRate);
 8107f26:	683b      	ldr	r3, [r7, #0]
 8107f28:	685b      	ldr	r3, [r3, #4]
      LL_USART_SetBaudRate(USARTx,
 8107f2a:	9300      	str	r3, [sp, #0]
 8107f2c:	460b      	mov	r3, r1
 8107f2e:	68b9      	ldr	r1, [r7, #8]
 8107f30:	6878      	ldr	r0, [r7, #4]
 8107f32:	f7ff ff27 	bl	8107d84 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 8107f36:	683b      	ldr	r3, [r7, #0]
 8107f38:	681b      	ldr	r3, [r3, #0]
 8107f3a:	4619      	mov	r1, r3
 8107f3c:	6878      	ldr	r0, [r7, #4]
 8107f3e:	f7ff fee6 	bl	8107d0e <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8107f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8107f44:	4618      	mov	r0, r3
 8107f46:	3710      	adds	r7, #16
 8107f48:	46bd      	mov	sp, r7
 8107f4a:	bd80      	pop	{r7, pc}
 8107f4c:	efff69f3 	.word	0xefff69f3
 8107f50:	40011000 	.word	0x40011000
 8107f54:	07000308 	.word	0x07000308
 8107f58:	40004400 	.word	0x40004400
 8107f5c:	07000008 	.word	0x07000008
 8107f60:	40004800 	.word	0x40004800
 8107f64:	40004c00 	.word	0x40004c00
 8107f68:	40005000 	.word	0x40005000
 8107f6c:	40011400 	.word	0x40011400
 8107f70:	40007800 	.word	0x40007800
 8107f74:	40007c00 	.word	0x40007c00

08107f78 <atoi>:
 8107f78:	220a      	movs	r2, #10
 8107f7a:	2100      	movs	r1, #0
 8107f7c:	f000 b8b8 	b.w	81080f0 <strtol>

08107f80 <rand>:
 8107f80:	4b16      	ldr	r3, [pc, #88]	@ (8107fdc <rand+0x5c>)
 8107f82:	b510      	push	{r4, lr}
 8107f84:	681c      	ldr	r4, [r3, #0]
 8107f86:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8107f88:	b9b3      	cbnz	r3, 8107fb8 <rand+0x38>
 8107f8a:	2018      	movs	r0, #24
 8107f8c:	f001 fea6 	bl	8109cdc <malloc>
 8107f90:	4602      	mov	r2, r0
 8107f92:	6320      	str	r0, [r4, #48]	@ 0x30
 8107f94:	b920      	cbnz	r0, 8107fa0 <rand+0x20>
 8107f96:	4b12      	ldr	r3, [pc, #72]	@ (8107fe0 <rand+0x60>)
 8107f98:	4812      	ldr	r0, [pc, #72]	@ (8107fe4 <rand+0x64>)
 8107f9a:	2152      	movs	r1, #82	@ 0x52
 8107f9c:	f000 ffea 	bl	8108f74 <__assert_func>
 8107fa0:	4911      	ldr	r1, [pc, #68]	@ (8107fe8 <rand+0x68>)
 8107fa2:	4b12      	ldr	r3, [pc, #72]	@ (8107fec <rand+0x6c>)
 8107fa4:	e9c0 1300 	strd	r1, r3, [r0]
 8107fa8:	4b11      	ldr	r3, [pc, #68]	@ (8107ff0 <rand+0x70>)
 8107faa:	6083      	str	r3, [r0, #8]
 8107fac:	230b      	movs	r3, #11
 8107fae:	8183      	strh	r3, [r0, #12]
 8107fb0:	2100      	movs	r1, #0
 8107fb2:	2001      	movs	r0, #1
 8107fb4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8107fb8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8107fba:	480e      	ldr	r0, [pc, #56]	@ (8107ff4 <rand+0x74>)
 8107fbc:	690b      	ldr	r3, [r1, #16]
 8107fbe:	694c      	ldr	r4, [r1, #20]
 8107fc0:	4a0d      	ldr	r2, [pc, #52]	@ (8107ff8 <rand+0x78>)
 8107fc2:	4358      	muls	r0, r3
 8107fc4:	fb02 0004 	mla	r0, r2, r4, r0
 8107fc8:	fba3 3202 	umull	r3, r2, r3, r2
 8107fcc:	3301      	adds	r3, #1
 8107fce:	eb40 0002 	adc.w	r0, r0, r2
 8107fd2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8107fd6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8107fda:	bd10      	pop	{r4, pc}
 8107fdc:	10000064 	.word	0x10000064
 8107fe0:	0810b23c 	.word	0x0810b23c
 8107fe4:	0810b253 	.word	0x0810b253
 8107fe8:	abcd330e 	.word	0xabcd330e
 8107fec:	e66d1234 	.word	0xe66d1234
 8107ff0:	0005deec 	.word	0x0005deec
 8107ff4:	5851f42d 	.word	0x5851f42d
 8107ff8:	4c957f2d 	.word	0x4c957f2d

08107ffc <_strtol_l.constprop.0>:
 8107ffc:	2b24      	cmp	r3, #36	@ 0x24
 8107ffe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8108002:	4686      	mov	lr, r0
 8108004:	4690      	mov	r8, r2
 8108006:	d801      	bhi.n	810800c <_strtol_l.constprop.0+0x10>
 8108008:	2b01      	cmp	r3, #1
 810800a:	d106      	bne.n	810801a <_strtol_l.constprop.0+0x1e>
 810800c:	f000 ff76 	bl	8108efc <__errno>
 8108010:	2316      	movs	r3, #22
 8108012:	6003      	str	r3, [r0, #0]
 8108014:	2000      	movs	r0, #0
 8108016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810801a:	4834      	ldr	r0, [pc, #208]	@ (81080ec <_strtol_l.constprop.0+0xf0>)
 810801c:	460d      	mov	r5, r1
 810801e:	462a      	mov	r2, r5
 8108020:	f815 4b01 	ldrb.w	r4, [r5], #1
 8108024:	5d06      	ldrb	r6, [r0, r4]
 8108026:	f016 0608 	ands.w	r6, r6, #8
 810802a:	d1f8      	bne.n	810801e <_strtol_l.constprop.0+0x22>
 810802c:	2c2d      	cmp	r4, #45	@ 0x2d
 810802e:	d12d      	bne.n	810808c <_strtol_l.constprop.0+0x90>
 8108030:	782c      	ldrb	r4, [r5, #0]
 8108032:	2601      	movs	r6, #1
 8108034:	1c95      	adds	r5, r2, #2
 8108036:	f033 0210 	bics.w	r2, r3, #16
 810803a:	d109      	bne.n	8108050 <_strtol_l.constprop.0+0x54>
 810803c:	2c30      	cmp	r4, #48	@ 0x30
 810803e:	d12a      	bne.n	8108096 <_strtol_l.constprop.0+0x9a>
 8108040:	782a      	ldrb	r2, [r5, #0]
 8108042:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8108046:	2a58      	cmp	r2, #88	@ 0x58
 8108048:	d125      	bne.n	8108096 <_strtol_l.constprop.0+0x9a>
 810804a:	786c      	ldrb	r4, [r5, #1]
 810804c:	2310      	movs	r3, #16
 810804e:	3502      	adds	r5, #2
 8108050:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8108054:	f10c 3cff 	add.w	ip, ip, #4294967295
 8108058:	2200      	movs	r2, #0
 810805a:	fbbc f9f3 	udiv	r9, ip, r3
 810805e:	4610      	mov	r0, r2
 8108060:	fb03 ca19 	mls	sl, r3, r9, ip
 8108064:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8108068:	2f09      	cmp	r7, #9
 810806a:	d81b      	bhi.n	81080a4 <_strtol_l.constprop.0+0xa8>
 810806c:	463c      	mov	r4, r7
 810806e:	42a3      	cmp	r3, r4
 8108070:	dd27      	ble.n	81080c2 <_strtol_l.constprop.0+0xc6>
 8108072:	1c57      	adds	r7, r2, #1
 8108074:	d007      	beq.n	8108086 <_strtol_l.constprop.0+0x8a>
 8108076:	4581      	cmp	r9, r0
 8108078:	d320      	bcc.n	81080bc <_strtol_l.constprop.0+0xc0>
 810807a:	d101      	bne.n	8108080 <_strtol_l.constprop.0+0x84>
 810807c:	45a2      	cmp	sl, r4
 810807e:	db1d      	blt.n	81080bc <_strtol_l.constprop.0+0xc0>
 8108080:	fb00 4003 	mla	r0, r0, r3, r4
 8108084:	2201      	movs	r2, #1
 8108086:	f815 4b01 	ldrb.w	r4, [r5], #1
 810808a:	e7eb      	b.n	8108064 <_strtol_l.constprop.0+0x68>
 810808c:	2c2b      	cmp	r4, #43	@ 0x2b
 810808e:	bf04      	itt	eq
 8108090:	782c      	ldrbeq	r4, [r5, #0]
 8108092:	1c95      	addeq	r5, r2, #2
 8108094:	e7cf      	b.n	8108036 <_strtol_l.constprop.0+0x3a>
 8108096:	2b00      	cmp	r3, #0
 8108098:	d1da      	bne.n	8108050 <_strtol_l.constprop.0+0x54>
 810809a:	2c30      	cmp	r4, #48	@ 0x30
 810809c:	bf0c      	ite	eq
 810809e:	2308      	moveq	r3, #8
 81080a0:	230a      	movne	r3, #10
 81080a2:	e7d5      	b.n	8108050 <_strtol_l.constprop.0+0x54>
 81080a4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 81080a8:	2f19      	cmp	r7, #25
 81080aa:	d801      	bhi.n	81080b0 <_strtol_l.constprop.0+0xb4>
 81080ac:	3c37      	subs	r4, #55	@ 0x37
 81080ae:	e7de      	b.n	810806e <_strtol_l.constprop.0+0x72>
 81080b0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 81080b4:	2f19      	cmp	r7, #25
 81080b6:	d804      	bhi.n	81080c2 <_strtol_l.constprop.0+0xc6>
 81080b8:	3c57      	subs	r4, #87	@ 0x57
 81080ba:	e7d8      	b.n	810806e <_strtol_l.constprop.0+0x72>
 81080bc:	f04f 32ff 	mov.w	r2, #4294967295
 81080c0:	e7e1      	b.n	8108086 <_strtol_l.constprop.0+0x8a>
 81080c2:	1c53      	adds	r3, r2, #1
 81080c4:	d108      	bne.n	81080d8 <_strtol_l.constprop.0+0xdc>
 81080c6:	2322      	movs	r3, #34	@ 0x22
 81080c8:	f8ce 3000 	str.w	r3, [lr]
 81080cc:	4660      	mov	r0, ip
 81080ce:	f1b8 0f00 	cmp.w	r8, #0
 81080d2:	d0a0      	beq.n	8108016 <_strtol_l.constprop.0+0x1a>
 81080d4:	1e69      	subs	r1, r5, #1
 81080d6:	e006      	b.n	81080e6 <_strtol_l.constprop.0+0xea>
 81080d8:	b106      	cbz	r6, 81080dc <_strtol_l.constprop.0+0xe0>
 81080da:	4240      	negs	r0, r0
 81080dc:	f1b8 0f00 	cmp.w	r8, #0
 81080e0:	d099      	beq.n	8108016 <_strtol_l.constprop.0+0x1a>
 81080e2:	2a00      	cmp	r2, #0
 81080e4:	d1f6      	bne.n	81080d4 <_strtol_l.constprop.0+0xd8>
 81080e6:	f8c8 1000 	str.w	r1, [r8]
 81080ea:	e794      	b.n	8108016 <_strtol_l.constprop.0+0x1a>
 81080ec:	0810b2ac 	.word	0x0810b2ac

081080f0 <strtol>:
 81080f0:	4613      	mov	r3, r2
 81080f2:	460a      	mov	r2, r1
 81080f4:	4601      	mov	r1, r0
 81080f6:	4802      	ldr	r0, [pc, #8]	@ (8108100 <strtol+0x10>)
 81080f8:	6800      	ldr	r0, [r0, #0]
 81080fa:	f7ff bf7f 	b.w	8107ffc <_strtol_l.constprop.0>
 81080fe:	bf00      	nop
 8108100:	10000064 	.word	0x10000064

08108104 <__cvt>:
 8108104:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8108108:	ec57 6b10 	vmov	r6, r7, d0
 810810c:	2f00      	cmp	r7, #0
 810810e:	460c      	mov	r4, r1
 8108110:	4619      	mov	r1, r3
 8108112:	463b      	mov	r3, r7
 8108114:	bfbb      	ittet	lt
 8108116:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 810811a:	461f      	movlt	r7, r3
 810811c:	2300      	movge	r3, #0
 810811e:	232d      	movlt	r3, #45	@ 0x2d
 8108120:	700b      	strb	r3, [r1, #0]
 8108122:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8108124:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8108128:	4691      	mov	r9, r2
 810812a:	f023 0820 	bic.w	r8, r3, #32
 810812e:	bfbc      	itt	lt
 8108130:	4632      	movlt	r2, r6
 8108132:	4616      	movlt	r6, r2
 8108134:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8108138:	d005      	beq.n	8108146 <__cvt+0x42>
 810813a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 810813e:	d100      	bne.n	8108142 <__cvt+0x3e>
 8108140:	3401      	adds	r4, #1
 8108142:	2102      	movs	r1, #2
 8108144:	e000      	b.n	8108148 <__cvt+0x44>
 8108146:	2103      	movs	r1, #3
 8108148:	ab03      	add	r3, sp, #12
 810814a:	9301      	str	r3, [sp, #4]
 810814c:	ab02      	add	r3, sp, #8
 810814e:	9300      	str	r3, [sp, #0]
 8108150:	ec47 6b10 	vmov	d0, r6, r7
 8108154:	4653      	mov	r3, sl
 8108156:	4622      	mov	r2, r4
 8108158:	f000 ffb2 	bl	81090c0 <_dtoa_r>
 810815c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8108160:	4605      	mov	r5, r0
 8108162:	d119      	bne.n	8108198 <__cvt+0x94>
 8108164:	f019 0f01 	tst.w	r9, #1
 8108168:	d00e      	beq.n	8108188 <__cvt+0x84>
 810816a:	eb00 0904 	add.w	r9, r0, r4
 810816e:	2200      	movs	r2, #0
 8108170:	2300      	movs	r3, #0
 8108172:	4630      	mov	r0, r6
 8108174:	4639      	mov	r1, r7
 8108176:	f7f8 fd3f 	bl	8100bf8 <__aeabi_dcmpeq>
 810817a:	b108      	cbz	r0, 8108180 <__cvt+0x7c>
 810817c:	f8cd 900c 	str.w	r9, [sp, #12]
 8108180:	2230      	movs	r2, #48	@ 0x30
 8108182:	9b03      	ldr	r3, [sp, #12]
 8108184:	454b      	cmp	r3, r9
 8108186:	d31e      	bcc.n	81081c6 <__cvt+0xc2>
 8108188:	9b03      	ldr	r3, [sp, #12]
 810818a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810818c:	1b5b      	subs	r3, r3, r5
 810818e:	4628      	mov	r0, r5
 8108190:	6013      	str	r3, [r2, #0]
 8108192:	b004      	add	sp, #16
 8108194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8108198:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 810819c:	eb00 0904 	add.w	r9, r0, r4
 81081a0:	d1e5      	bne.n	810816e <__cvt+0x6a>
 81081a2:	7803      	ldrb	r3, [r0, #0]
 81081a4:	2b30      	cmp	r3, #48	@ 0x30
 81081a6:	d10a      	bne.n	81081be <__cvt+0xba>
 81081a8:	2200      	movs	r2, #0
 81081aa:	2300      	movs	r3, #0
 81081ac:	4630      	mov	r0, r6
 81081ae:	4639      	mov	r1, r7
 81081b0:	f7f8 fd22 	bl	8100bf8 <__aeabi_dcmpeq>
 81081b4:	b918      	cbnz	r0, 81081be <__cvt+0xba>
 81081b6:	f1c4 0401 	rsb	r4, r4, #1
 81081ba:	f8ca 4000 	str.w	r4, [sl]
 81081be:	f8da 3000 	ldr.w	r3, [sl]
 81081c2:	4499      	add	r9, r3
 81081c4:	e7d3      	b.n	810816e <__cvt+0x6a>
 81081c6:	1c59      	adds	r1, r3, #1
 81081c8:	9103      	str	r1, [sp, #12]
 81081ca:	701a      	strb	r2, [r3, #0]
 81081cc:	e7d9      	b.n	8108182 <__cvt+0x7e>

081081ce <__exponent>:
 81081ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 81081d0:	2900      	cmp	r1, #0
 81081d2:	bfba      	itte	lt
 81081d4:	4249      	neglt	r1, r1
 81081d6:	232d      	movlt	r3, #45	@ 0x2d
 81081d8:	232b      	movge	r3, #43	@ 0x2b
 81081da:	2909      	cmp	r1, #9
 81081dc:	7002      	strb	r2, [r0, #0]
 81081de:	7043      	strb	r3, [r0, #1]
 81081e0:	dd29      	ble.n	8108236 <__exponent+0x68>
 81081e2:	f10d 0307 	add.w	r3, sp, #7
 81081e6:	461d      	mov	r5, r3
 81081e8:	270a      	movs	r7, #10
 81081ea:	461a      	mov	r2, r3
 81081ec:	fbb1 f6f7 	udiv	r6, r1, r7
 81081f0:	fb07 1416 	mls	r4, r7, r6, r1
 81081f4:	3430      	adds	r4, #48	@ 0x30
 81081f6:	f802 4c01 	strb.w	r4, [r2, #-1]
 81081fa:	460c      	mov	r4, r1
 81081fc:	2c63      	cmp	r4, #99	@ 0x63
 81081fe:	f103 33ff 	add.w	r3, r3, #4294967295
 8108202:	4631      	mov	r1, r6
 8108204:	dcf1      	bgt.n	81081ea <__exponent+0x1c>
 8108206:	3130      	adds	r1, #48	@ 0x30
 8108208:	1e94      	subs	r4, r2, #2
 810820a:	f803 1c01 	strb.w	r1, [r3, #-1]
 810820e:	1c41      	adds	r1, r0, #1
 8108210:	4623      	mov	r3, r4
 8108212:	42ab      	cmp	r3, r5
 8108214:	d30a      	bcc.n	810822c <__exponent+0x5e>
 8108216:	f10d 0309 	add.w	r3, sp, #9
 810821a:	1a9b      	subs	r3, r3, r2
 810821c:	42ac      	cmp	r4, r5
 810821e:	bf88      	it	hi
 8108220:	2300      	movhi	r3, #0
 8108222:	3302      	adds	r3, #2
 8108224:	4403      	add	r3, r0
 8108226:	1a18      	subs	r0, r3, r0
 8108228:	b003      	add	sp, #12
 810822a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810822c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8108230:	f801 6f01 	strb.w	r6, [r1, #1]!
 8108234:	e7ed      	b.n	8108212 <__exponent+0x44>
 8108236:	2330      	movs	r3, #48	@ 0x30
 8108238:	3130      	adds	r1, #48	@ 0x30
 810823a:	7083      	strb	r3, [r0, #2]
 810823c:	70c1      	strb	r1, [r0, #3]
 810823e:	1d03      	adds	r3, r0, #4
 8108240:	e7f1      	b.n	8108226 <__exponent+0x58>
	...

08108244 <_printf_float>:
 8108244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108248:	b08d      	sub	sp, #52	@ 0x34
 810824a:	460c      	mov	r4, r1
 810824c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8108250:	4616      	mov	r6, r2
 8108252:	461f      	mov	r7, r3
 8108254:	4605      	mov	r5, r0
 8108256:	f000 fe07 	bl	8108e68 <_localeconv_r>
 810825a:	6803      	ldr	r3, [r0, #0]
 810825c:	9304      	str	r3, [sp, #16]
 810825e:	4618      	mov	r0, r3
 8108260:	f7f8 f89e 	bl	81003a0 <strlen>
 8108264:	2300      	movs	r3, #0
 8108266:	930a      	str	r3, [sp, #40]	@ 0x28
 8108268:	f8d8 3000 	ldr.w	r3, [r8]
 810826c:	9005      	str	r0, [sp, #20]
 810826e:	3307      	adds	r3, #7
 8108270:	f023 0307 	bic.w	r3, r3, #7
 8108274:	f103 0208 	add.w	r2, r3, #8
 8108278:	f894 a018 	ldrb.w	sl, [r4, #24]
 810827c:	f8d4 b000 	ldr.w	fp, [r4]
 8108280:	f8c8 2000 	str.w	r2, [r8]
 8108284:	e9d3 8900 	ldrd	r8, r9, [r3]
 8108288:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 810828c:	9307      	str	r3, [sp, #28]
 810828e:	f8cd 8018 	str.w	r8, [sp, #24]
 8108292:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8108296:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810829a:	4b9c      	ldr	r3, [pc, #624]	@ (810850c <_printf_float+0x2c8>)
 810829c:	f04f 32ff 	mov.w	r2, #4294967295
 81082a0:	f7f8 fcdc 	bl	8100c5c <__aeabi_dcmpun>
 81082a4:	bb70      	cbnz	r0, 8108304 <_printf_float+0xc0>
 81082a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 81082aa:	4b98      	ldr	r3, [pc, #608]	@ (810850c <_printf_float+0x2c8>)
 81082ac:	f04f 32ff 	mov.w	r2, #4294967295
 81082b0:	f7f8 fcb6 	bl	8100c20 <__aeabi_dcmple>
 81082b4:	bb30      	cbnz	r0, 8108304 <_printf_float+0xc0>
 81082b6:	2200      	movs	r2, #0
 81082b8:	2300      	movs	r3, #0
 81082ba:	4640      	mov	r0, r8
 81082bc:	4649      	mov	r1, r9
 81082be:	f7f8 fca5 	bl	8100c0c <__aeabi_dcmplt>
 81082c2:	b110      	cbz	r0, 81082ca <_printf_float+0x86>
 81082c4:	232d      	movs	r3, #45	@ 0x2d
 81082c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 81082ca:	4a91      	ldr	r2, [pc, #580]	@ (8108510 <_printf_float+0x2cc>)
 81082cc:	4b91      	ldr	r3, [pc, #580]	@ (8108514 <_printf_float+0x2d0>)
 81082ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 81082d2:	bf94      	ite	ls
 81082d4:	4690      	movls	r8, r2
 81082d6:	4698      	movhi	r8, r3
 81082d8:	2303      	movs	r3, #3
 81082da:	6123      	str	r3, [r4, #16]
 81082dc:	f02b 0304 	bic.w	r3, fp, #4
 81082e0:	6023      	str	r3, [r4, #0]
 81082e2:	f04f 0900 	mov.w	r9, #0
 81082e6:	9700      	str	r7, [sp, #0]
 81082e8:	4633      	mov	r3, r6
 81082ea:	aa0b      	add	r2, sp, #44	@ 0x2c
 81082ec:	4621      	mov	r1, r4
 81082ee:	4628      	mov	r0, r5
 81082f0:	f000 f9d2 	bl	8108698 <_printf_common>
 81082f4:	3001      	adds	r0, #1
 81082f6:	f040 808d 	bne.w	8108414 <_printf_float+0x1d0>
 81082fa:	f04f 30ff 	mov.w	r0, #4294967295
 81082fe:	b00d      	add	sp, #52	@ 0x34
 8108300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108304:	4642      	mov	r2, r8
 8108306:	464b      	mov	r3, r9
 8108308:	4640      	mov	r0, r8
 810830a:	4649      	mov	r1, r9
 810830c:	f7f8 fca6 	bl	8100c5c <__aeabi_dcmpun>
 8108310:	b140      	cbz	r0, 8108324 <_printf_float+0xe0>
 8108312:	464b      	mov	r3, r9
 8108314:	2b00      	cmp	r3, #0
 8108316:	bfbc      	itt	lt
 8108318:	232d      	movlt	r3, #45	@ 0x2d
 810831a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 810831e:	4a7e      	ldr	r2, [pc, #504]	@ (8108518 <_printf_float+0x2d4>)
 8108320:	4b7e      	ldr	r3, [pc, #504]	@ (810851c <_printf_float+0x2d8>)
 8108322:	e7d4      	b.n	81082ce <_printf_float+0x8a>
 8108324:	6863      	ldr	r3, [r4, #4]
 8108326:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 810832a:	9206      	str	r2, [sp, #24]
 810832c:	1c5a      	adds	r2, r3, #1
 810832e:	d13b      	bne.n	81083a8 <_printf_float+0x164>
 8108330:	2306      	movs	r3, #6
 8108332:	6063      	str	r3, [r4, #4]
 8108334:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8108338:	2300      	movs	r3, #0
 810833a:	6022      	str	r2, [r4, #0]
 810833c:	9303      	str	r3, [sp, #12]
 810833e:	ab0a      	add	r3, sp, #40	@ 0x28
 8108340:	e9cd a301 	strd	sl, r3, [sp, #4]
 8108344:	ab09      	add	r3, sp, #36	@ 0x24
 8108346:	9300      	str	r3, [sp, #0]
 8108348:	6861      	ldr	r1, [r4, #4]
 810834a:	ec49 8b10 	vmov	d0, r8, r9
 810834e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8108352:	4628      	mov	r0, r5
 8108354:	f7ff fed6 	bl	8108104 <__cvt>
 8108358:	9b06      	ldr	r3, [sp, #24]
 810835a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 810835c:	2b47      	cmp	r3, #71	@ 0x47
 810835e:	4680      	mov	r8, r0
 8108360:	d129      	bne.n	81083b6 <_printf_float+0x172>
 8108362:	1cc8      	adds	r0, r1, #3
 8108364:	db02      	blt.n	810836c <_printf_float+0x128>
 8108366:	6863      	ldr	r3, [r4, #4]
 8108368:	4299      	cmp	r1, r3
 810836a:	dd41      	ble.n	81083f0 <_printf_float+0x1ac>
 810836c:	f1aa 0a02 	sub.w	sl, sl, #2
 8108370:	fa5f fa8a 	uxtb.w	sl, sl
 8108374:	3901      	subs	r1, #1
 8108376:	4652      	mov	r2, sl
 8108378:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 810837c:	9109      	str	r1, [sp, #36]	@ 0x24
 810837e:	f7ff ff26 	bl	81081ce <__exponent>
 8108382:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8108384:	1813      	adds	r3, r2, r0
 8108386:	2a01      	cmp	r2, #1
 8108388:	4681      	mov	r9, r0
 810838a:	6123      	str	r3, [r4, #16]
 810838c:	dc02      	bgt.n	8108394 <_printf_float+0x150>
 810838e:	6822      	ldr	r2, [r4, #0]
 8108390:	07d2      	lsls	r2, r2, #31
 8108392:	d501      	bpl.n	8108398 <_printf_float+0x154>
 8108394:	3301      	adds	r3, #1
 8108396:	6123      	str	r3, [r4, #16]
 8108398:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 810839c:	2b00      	cmp	r3, #0
 810839e:	d0a2      	beq.n	81082e6 <_printf_float+0xa2>
 81083a0:	232d      	movs	r3, #45	@ 0x2d
 81083a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 81083a6:	e79e      	b.n	81082e6 <_printf_float+0xa2>
 81083a8:	9a06      	ldr	r2, [sp, #24]
 81083aa:	2a47      	cmp	r2, #71	@ 0x47
 81083ac:	d1c2      	bne.n	8108334 <_printf_float+0xf0>
 81083ae:	2b00      	cmp	r3, #0
 81083b0:	d1c0      	bne.n	8108334 <_printf_float+0xf0>
 81083b2:	2301      	movs	r3, #1
 81083b4:	e7bd      	b.n	8108332 <_printf_float+0xee>
 81083b6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 81083ba:	d9db      	bls.n	8108374 <_printf_float+0x130>
 81083bc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 81083c0:	d118      	bne.n	81083f4 <_printf_float+0x1b0>
 81083c2:	2900      	cmp	r1, #0
 81083c4:	6863      	ldr	r3, [r4, #4]
 81083c6:	dd0b      	ble.n	81083e0 <_printf_float+0x19c>
 81083c8:	6121      	str	r1, [r4, #16]
 81083ca:	b913      	cbnz	r3, 81083d2 <_printf_float+0x18e>
 81083cc:	6822      	ldr	r2, [r4, #0]
 81083ce:	07d0      	lsls	r0, r2, #31
 81083d0:	d502      	bpl.n	81083d8 <_printf_float+0x194>
 81083d2:	3301      	adds	r3, #1
 81083d4:	440b      	add	r3, r1
 81083d6:	6123      	str	r3, [r4, #16]
 81083d8:	65a1      	str	r1, [r4, #88]	@ 0x58
 81083da:	f04f 0900 	mov.w	r9, #0
 81083de:	e7db      	b.n	8108398 <_printf_float+0x154>
 81083e0:	b913      	cbnz	r3, 81083e8 <_printf_float+0x1a4>
 81083e2:	6822      	ldr	r2, [r4, #0]
 81083e4:	07d2      	lsls	r2, r2, #31
 81083e6:	d501      	bpl.n	81083ec <_printf_float+0x1a8>
 81083e8:	3302      	adds	r3, #2
 81083ea:	e7f4      	b.n	81083d6 <_printf_float+0x192>
 81083ec:	2301      	movs	r3, #1
 81083ee:	e7f2      	b.n	81083d6 <_printf_float+0x192>
 81083f0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 81083f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 81083f6:	4299      	cmp	r1, r3
 81083f8:	db05      	blt.n	8108406 <_printf_float+0x1c2>
 81083fa:	6823      	ldr	r3, [r4, #0]
 81083fc:	6121      	str	r1, [r4, #16]
 81083fe:	07d8      	lsls	r0, r3, #31
 8108400:	d5ea      	bpl.n	81083d8 <_printf_float+0x194>
 8108402:	1c4b      	adds	r3, r1, #1
 8108404:	e7e7      	b.n	81083d6 <_printf_float+0x192>
 8108406:	2900      	cmp	r1, #0
 8108408:	bfd4      	ite	le
 810840a:	f1c1 0202 	rsble	r2, r1, #2
 810840e:	2201      	movgt	r2, #1
 8108410:	4413      	add	r3, r2
 8108412:	e7e0      	b.n	81083d6 <_printf_float+0x192>
 8108414:	6823      	ldr	r3, [r4, #0]
 8108416:	055a      	lsls	r2, r3, #21
 8108418:	d407      	bmi.n	810842a <_printf_float+0x1e6>
 810841a:	6923      	ldr	r3, [r4, #16]
 810841c:	4642      	mov	r2, r8
 810841e:	4631      	mov	r1, r6
 8108420:	4628      	mov	r0, r5
 8108422:	47b8      	blx	r7
 8108424:	3001      	adds	r0, #1
 8108426:	d12b      	bne.n	8108480 <_printf_float+0x23c>
 8108428:	e767      	b.n	81082fa <_printf_float+0xb6>
 810842a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 810842e:	f240 80dd 	bls.w	81085ec <_printf_float+0x3a8>
 8108432:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8108436:	2200      	movs	r2, #0
 8108438:	2300      	movs	r3, #0
 810843a:	f7f8 fbdd 	bl	8100bf8 <__aeabi_dcmpeq>
 810843e:	2800      	cmp	r0, #0
 8108440:	d033      	beq.n	81084aa <_printf_float+0x266>
 8108442:	4a37      	ldr	r2, [pc, #220]	@ (8108520 <_printf_float+0x2dc>)
 8108444:	2301      	movs	r3, #1
 8108446:	4631      	mov	r1, r6
 8108448:	4628      	mov	r0, r5
 810844a:	47b8      	blx	r7
 810844c:	3001      	adds	r0, #1
 810844e:	f43f af54 	beq.w	81082fa <_printf_float+0xb6>
 8108452:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8108456:	4543      	cmp	r3, r8
 8108458:	db02      	blt.n	8108460 <_printf_float+0x21c>
 810845a:	6823      	ldr	r3, [r4, #0]
 810845c:	07d8      	lsls	r0, r3, #31
 810845e:	d50f      	bpl.n	8108480 <_printf_float+0x23c>
 8108460:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8108464:	4631      	mov	r1, r6
 8108466:	4628      	mov	r0, r5
 8108468:	47b8      	blx	r7
 810846a:	3001      	adds	r0, #1
 810846c:	f43f af45 	beq.w	81082fa <_printf_float+0xb6>
 8108470:	f04f 0900 	mov.w	r9, #0
 8108474:	f108 38ff 	add.w	r8, r8, #4294967295
 8108478:	f104 0a1a 	add.w	sl, r4, #26
 810847c:	45c8      	cmp	r8, r9
 810847e:	dc09      	bgt.n	8108494 <_printf_float+0x250>
 8108480:	6823      	ldr	r3, [r4, #0]
 8108482:	079b      	lsls	r3, r3, #30
 8108484:	f100 8103 	bmi.w	810868e <_printf_float+0x44a>
 8108488:	68e0      	ldr	r0, [r4, #12]
 810848a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810848c:	4298      	cmp	r0, r3
 810848e:	bfb8      	it	lt
 8108490:	4618      	movlt	r0, r3
 8108492:	e734      	b.n	81082fe <_printf_float+0xba>
 8108494:	2301      	movs	r3, #1
 8108496:	4652      	mov	r2, sl
 8108498:	4631      	mov	r1, r6
 810849a:	4628      	mov	r0, r5
 810849c:	47b8      	blx	r7
 810849e:	3001      	adds	r0, #1
 81084a0:	f43f af2b 	beq.w	81082fa <_printf_float+0xb6>
 81084a4:	f109 0901 	add.w	r9, r9, #1
 81084a8:	e7e8      	b.n	810847c <_printf_float+0x238>
 81084aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81084ac:	2b00      	cmp	r3, #0
 81084ae:	dc39      	bgt.n	8108524 <_printf_float+0x2e0>
 81084b0:	4a1b      	ldr	r2, [pc, #108]	@ (8108520 <_printf_float+0x2dc>)
 81084b2:	2301      	movs	r3, #1
 81084b4:	4631      	mov	r1, r6
 81084b6:	4628      	mov	r0, r5
 81084b8:	47b8      	blx	r7
 81084ba:	3001      	adds	r0, #1
 81084bc:	f43f af1d 	beq.w	81082fa <_printf_float+0xb6>
 81084c0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 81084c4:	ea59 0303 	orrs.w	r3, r9, r3
 81084c8:	d102      	bne.n	81084d0 <_printf_float+0x28c>
 81084ca:	6823      	ldr	r3, [r4, #0]
 81084cc:	07d9      	lsls	r1, r3, #31
 81084ce:	d5d7      	bpl.n	8108480 <_printf_float+0x23c>
 81084d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 81084d4:	4631      	mov	r1, r6
 81084d6:	4628      	mov	r0, r5
 81084d8:	47b8      	blx	r7
 81084da:	3001      	adds	r0, #1
 81084dc:	f43f af0d 	beq.w	81082fa <_printf_float+0xb6>
 81084e0:	f04f 0a00 	mov.w	sl, #0
 81084e4:	f104 0b1a 	add.w	fp, r4, #26
 81084e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81084ea:	425b      	negs	r3, r3
 81084ec:	4553      	cmp	r3, sl
 81084ee:	dc01      	bgt.n	81084f4 <_printf_float+0x2b0>
 81084f0:	464b      	mov	r3, r9
 81084f2:	e793      	b.n	810841c <_printf_float+0x1d8>
 81084f4:	2301      	movs	r3, #1
 81084f6:	465a      	mov	r2, fp
 81084f8:	4631      	mov	r1, r6
 81084fa:	4628      	mov	r0, r5
 81084fc:	47b8      	blx	r7
 81084fe:	3001      	adds	r0, #1
 8108500:	f43f aefb 	beq.w	81082fa <_printf_float+0xb6>
 8108504:	f10a 0a01 	add.w	sl, sl, #1
 8108508:	e7ee      	b.n	81084e8 <_printf_float+0x2a4>
 810850a:	bf00      	nop
 810850c:	7fefffff 	.word	0x7fefffff
 8108510:	0810b3ac 	.word	0x0810b3ac
 8108514:	0810b3b0 	.word	0x0810b3b0
 8108518:	0810b3b4 	.word	0x0810b3b4
 810851c:	0810b3b8 	.word	0x0810b3b8
 8108520:	0810b3bc 	.word	0x0810b3bc
 8108524:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8108526:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 810852a:	4553      	cmp	r3, sl
 810852c:	bfa8      	it	ge
 810852e:	4653      	movge	r3, sl
 8108530:	2b00      	cmp	r3, #0
 8108532:	4699      	mov	r9, r3
 8108534:	dc36      	bgt.n	81085a4 <_printf_float+0x360>
 8108536:	f04f 0b00 	mov.w	fp, #0
 810853a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810853e:	f104 021a 	add.w	r2, r4, #26
 8108542:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8108544:	9306      	str	r3, [sp, #24]
 8108546:	eba3 0309 	sub.w	r3, r3, r9
 810854a:	455b      	cmp	r3, fp
 810854c:	dc31      	bgt.n	81085b2 <_printf_float+0x36e>
 810854e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8108550:	459a      	cmp	sl, r3
 8108552:	dc3a      	bgt.n	81085ca <_printf_float+0x386>
 8108554:	6823      	ldr	r3, [r4, #0]
 8108556:	07da      	lsls	r2, r3, #31
 8108558:	d437      	bmi.n	81085ca <_printf_float+0x386>
 810855a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810855c:	ebaa 0903 	sub.w	r9, sl, r3
 8108560:	9b06      	ldr	r3, [sp, #24]
 8108562:	ebaa 0303 	sub.w	r3, sl, r3
 8108566:	4599      	cmp	r9, r3
 8108568:	bfa8      	it	ge
 810856a:	4699      	movge	r9, r3
 810856c:	f1b9 0f00 	cmp.w	r9, #0
 8108570:	dc33      	bgt.n	81085da <_printf_float+0x396>
 8108572:	f04f 0800 	mov.w	r8, #0
 8108576:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810857a:	f104 0b1a 	add.w	fp, r4, #26
 810857e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8108580:	ebaa 0303 	sub.w	r3, sl, r3
 8108584:	eba3 0309 	sub.w	r3, r3, r9
 8108588:	4543      	cmp	r3, r8
 810858a:	f77f af79 	ble.w	8108480 <_printf_float+0x23c>
 810858e:	2301      	movs	r3, #1
 8108590:	465a      	mov	r2, fp
 8108592:	4631      	mov	r1, r6
 8108594:	4628      	mov	r0, r5
 8108596:	47b8      	blx	r7
 8108598:	3001      	adds	r0, #1
 810859a:	f43f aeae 	beq.w	81082fa <_printf_float+0xb6>
 810859e:	f108 0801 	add.w	r8, r8, #1
 81085a2:	e7ec      	b.n	810857e <_printf_float+0x33a>
 81085a4:	4642      	mov	r2, r8
 81085a6:	4631      	mov	r1, r6
 81085a8:	4628      	mov	r0, r5
 81085aa:	47b8      	blx	r7
 81085ac:	3001      	adds	r0, #1
 81085ae:	d1c2      	bne.n	8108536 <_printf_float+0x2f2>
 81085b0:	e6a3      	b.n	81082fa <_printf_float+0xb6>
 81085b2:	2301      	movs	r3, #1
 81085b4:	4631      	mov	r1, r6
 81085b6:	4628      	mov	r0, r5
 81085b8:	9206      	str	r2, [sp, #24]
 81085ba:	47b8      	blx	r7
 81085bc:	3001      	adds	r0, #1
 81085be:	f43f ae9c 	beq.w	81082fa <_printf_float+0xb6>
 81085c2:	9a06      	ldr	r2, [sp, #24]
 81085c4:	f10b 0b01 	add.w	fp, fp, #1
 81085c8:	e7bb      	b.n	8108542 <_printf_float+0x2fe>
 81085ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 81085ce:	4631      	mov	r1, r6
 81085d0:	4628      	mov	r0, r5
 81085d2:	47b8      	blx	r7
 81085d4:	3001      	adds	r0, #1
 81085d6:	d1c0      	bne.n	810855a <_printf_float+0x316>
 81085d8:	e68f      	b.n	81082fa <_printf_float+0xb6>
 81085da:	9a06      	ldr	r2, [sp, #24]
 81085dc:	464b      	mov	r3, r9
 81085de:	4442      	add	r2, r8
 81085e0:	4631      	mov	r1, r6
 81085e2:	4628      	mov	r0, r5
 81085e4:	47b8      	blx	r7
 81085e6:	3001      	adds	r0, #1
 81085e8:	d1c3      	bne.n	8108572 <_printf_float+0x32e>
 81085ea:	e686      	b.n	81082fa <_printf_float+0xb6>
 81085ec:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 81085f0:	f1ba 0f01 	cmp.w	sl, #1
 81085f4:	dc01      	bgt.n	81085fa <_printf_float+0x3b6>
 81085f6:	07db      	lsls	r3, r3, #31
 81085f8:	d536      	bpl.n	8108668 <_printf_float+0x424>
 81085fa:	2301      	movs	r3, #1
 81085fc:	4642      	mov	r2, r8
 81085fe:	4631      	mov	r1, r6
 8108600:	4628      	mov	r0, r5
 8108602:	47b8      	blx	r7
 8108604:	3001      	adds	r0, #1
 8108606:	f43f ae78 	beq.w	81082fa <_printf_float+0xb6>
 810860a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810860e:	4631      	mov	r1, r6
 8108610:	4628      	mov	r0, r5
 8108612:	47b8      	blx	r7
 8108614:	3001      	adds	r0, #1
 8108616:	f43f ae70 	beq.w	81082fa <_printf_float+0xb6>
 810861a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 810861e:	2200      	movs	r2, #0
 8108620:	2300      	movs	r3, #0
 8108622:	f10a 3aff 	add.w	sl, sl, #4294967295
 8108626:	f7f8 fae7 	bl	8100bf8 <__aeabi_dcmpeq>
 810862a:	b9c0      	cbnz	r0, 810865e <_printf_float+0x41a>
 810862c:	4653      	mov	r3, sl
 810862e:	f108 0201 	add.w	r2, r8, #1
 8108632:	4631      	mov	r1, r6
 8108634:	4628      	mov	r0, r5
 8108636:	47b8      	blx	r7
 8108638:	3001      	adds	r0, #1
 810863a:	d10c      	bne.n	8108656 <_printf_float+0x412>
 810863c:	e65d      	b.n	81082fa <_printf_float+0xb6>
 810863e:	2301      	movs	r3, #1
 8108640:	465a      	mov	r2, fp
 8108642:	4631      	mov	r1, r6
 8108644:	4628      	mov	r0, r5
 8108646:	47b8      	blx	r7
 8108648:	3001      	adds	r0, #1
 810864a:	f43f ae56 	beq.w	81082fa <_printf_float+0xb6>
 810864e:	f108 0801 	add.w	r8, r8, #1
 8108652:	45d0      	cmp	r8, sl
 8108654:	dbf3      	blt.n	810863e <_printf_float+0x3fa>
 8108656:	464b      	mov	r3, r9
 8108658:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 810865c:	e6df      	b.n	810841e <_printf_float+0x1da>
 810865e:	f04f 0800 	mov.w	r8, #0
 8108662:	f104 0b1a 	add.w	fp, r4, #26
 8108666:	e7f4      	b.n	8108652 <_printf_float+0x40e>
 8108668:	2301      	movs	r3, #1
 810866a:	4642      	mov	r2, r8
 810866c:	e7e1      	b.n	8108632 <_printf_float+0x3ee>
 810866e:	2301      	movs	r3, #1
 8108670:	464a      	mov	r2, r9
 8108672:	4631      	mov	r1, r6
 8108674:	4628      	mov	r0, r5
 8108676:	47b8      	blx	r7
 8108678:	3001      	adds	r0, #1
 810867a:	f43f ae3e 	beq.w	81082fa <_printf_float+0xb6>
 810867e:	f108 0801 	add.w	r8, r8, #1
 8108682:	68e3      	ldr	r3, [r4, #12]
 8108684:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8108686:	1a5b      	subs	r3, r3, r1
 8108688:	4543      	cmp	r3, r8
 810868a:	dcf0      	bgt.n	810866e <_printf_float+0x42a>
 810868c:	e6fc      	b.n	8108488 <_printf_float+0x244>
 810868e:	f04f 0800 	mov.w	r8, #0
 8108692:	f104 0919 	add.w	r9, r4, #25
 8108696:	e7f4      	b.n	8108682 <_printf_float+0x43e>

08108698 <_printf_common>:
 8108698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810869c:	4616      	mov	r6, r2
 810869e:	4698      	mov	r8, r3
 81086a0:	688a      	ldr	r2, [r1, #8]
 81086a2:	690b      	ldr	r3, [r1, #16]
 81086a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 81086a8:	4293      	cmp	r3, r2
 81086aa:	bfb8      	it	lt
 81086ac:	4613      	movlt	r3, r2
 81086ae:	6033      	str	r3, [r6, #0]
 81086b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 81086b4:	4607      	mov	r7, r0
 81086b6:	460c      	mov	r4, r1
 81086b8:	b10a      	cbz	r2, 81086be <_printf_common+0x26>
 81086ba:	3301      	adds	r3, #1
 81086bc:	6033      	str	r3, [r6, #0]
 81086be:	6823      	ldr	r3, [r4, #0]
 81086c0:	0699      	lsls	r1, r3, #26
 81086c2:	bf42      	ittt	mi
 81086c4:	6833      	ldrmi	r3, [r6, #0]
 81086c6:	3302      	addmi	r3, #2
 81086c8:	6033      	strmi	r3, [r6, #0]
 81086ca:	6825      	ldr	r5, [r4, #0]
 81086cc:	f015 0506 	ands.w	r5, r5, #6
 81086d0:	d106      	bne.n	81086e0 <_printf_common+0x48>
 81086d2:	f104 0a19 	add.w	sl, r4, #25
 81086d6:	68e3      	ldr	r3, [r4, #12]
 81086d8:	6832      	ldr	r2, [r6, #0]
 81086da:	1a9b      	subs	r3, r3, r2
 81086dc:	42ab      	cmp	r3, r5
 81086de:	dc26      	bgt.n	810872e <_printf_common+0x96>
 81086e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 81086e4:	6822      	ldr	r2, [r4, #0]
 81086e6:	3b00      	subs	r3, #0
 81086e8:	bf18      	it	ne
 81086ea:	2301      	movne	r3, #1
 81086ec:	0692      	lsls	r2, r2, #26
 81086ee:	d42b      	bmi.n	8108748 <_printf_common+0xb0>
 81086f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 81086f4:	4641      	mov	r1, r8
 81086f6:	4638      	mov	r0, r7
 81086f8:	47c8      	blx	r9
 81086fa:	3001      	adds	r0, #1
 81086fc:	d01e      	beq.n	810873c <_printf_common+0xa4>
 81086fe:	6823      	ldr	r3, [r4, #0]
 8108700:	6922      	ldr	r2, [r4, #16]
 8108702:	f003 0306 	and.w	r3, r3, #6
 8108706:	2b04      	cmp	r3, #4
 8108708:	bf02      	ittt	eq
 810870a:	68e5      	ldreq	r5, [r4, #12]
 810870c:	6833      	ldreq	r3, [r6, #0]
 810870e:	1aed      	subeq	r5, r5, r3
 8108710:	68a3      	ldr	r3, [r4, #8]
 8108712:	bf0c      	ite	eq
 8108714:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8108718:	2500      	movne	r5, #0
 810871a:	4293      	cmp	r3, r2
 810871c:	bfc4      	itt	gt
 810871e:	1a9b      	subgt	r3, r3, r2
 8108720:	18ed      	addgt	r5, r5, r3
 8108722:	2600      	movs	r6, #0
 8108724:	341a      	adds	r4, #26
 8108726:	42b5      	cmp	r5, r6
 8108728:	d11a      	bne.n	8108760 <_printf_common+0xc8>
 810872a:	2000      	movs	r0, #0
 810872c:	e008      	b.n	8108740 <_printf_common+0xa8>
 810872e:	2301      	movs	r3, #1
 8108730:	4652      	mov	r2, sl
 8108732:	4641      	mov	r1, r8
 8108734:	4638      	mov	r0, r7
 8108736:	47c8      	blx	r9
 8108738:	3001      	adds	r0, #1
 810873a:	d103      	bne.n	8108744 <_printf_common+0xac>
 810873c:	f04f 30ff 	mov.w	r0, #4294967295
 8108740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8108744:	3501      	adds	r5, #1
 8108746:	e7c6      	b.n	81086d6 <_printf_common+0x3e>
 8108748:	18e1      	adds	r1, r4, r3
 810874a:	1c5a      	adds	r2, r3, #1
 810874c:	2030      	movs	r0, #48	@ 0x30
 810874e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8108752:	4422      	add	r2, r4
 8108754:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8108758:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 810875c:	3302      	adds	r3, #2
 810875e:	e7c7      	b.n	81086f0 <_printf_common+0x58>
 8108760:	2301      	movs	r3, #1
 8108762:	4622      	mov	r2, r4
 8108764:	4641      	mov	r1, r8
 8108766:	4638      	mov	r0, r7
 8108768:	47c8      	blx	r9
 810876a:	3001      	adds	r0, #1
 810876c:	d0e6      	beq.n	810873c <_printf_common+0xa4>
 810876e:	3601      	adds	r6, #1
 8108770:	e7d9      	b.n	8108726 <_printf_common+0x8e>
	...

08108774 <_printf_i>:
 8108774:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8108778:	7e0f      	ldrb	r7, [r1, #24]
 810877a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 810877c:	2f78      	cmp	r7, #120	@ 0x78
 810877e:	4691      	mov	r9, r2
 8108780:	4680      	mov	r8, r0
 8108782:	460c      	mov	r4, r1
 8108784:	469a      	mov	sl, r3
 8108786:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 810878a:	d807      	bhi.n	810879c <_printf_i+0x28>
 810878c:	2f62      	cmp	r7, #98	@ 0x62
 810878e:	d80a      	bhi.n	81087a6 <_printf_i+0x32>
 8108790:	2f00      	cmp	r7, #0
 8108792:	f000 80d2 	beq.w	810893a <_printf_i+0x1c6>
 8108796:	2f58      	cmp	r7, #88	@ 0x58
 8108798:	f000 80b9 	beq.w	810890e <_printf_i+0x19a>
 810879c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 81087a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 81087a4:	e03a      	b.n	810881c <_printf_i+0xa8>
 81087a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 81087aa:	2b15      	cmp	r3, #21
 81087ac:	d8f6      	bhi.n	810879c <_printf_i+0x28>
 81087ae:	a101      	add	r1, pc, #4	@ (adr r1, 81087b4 <_printf_i+0x40>)
 81087b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 81087b4:	0810880d 	.word	0x0810880d
 81087b8:	08108821 	.word	0x08108821
 81087bc:	0810879d 	.word	0x0810879d
 81087c0:	0810879d 	.word	0x0810879d
 81087c4:	0810879d 	.word	0x0810879d
 81087c8:	0810879d 	.word	0x0810879d
 81087cc:	08108821 	.word	0x08108821
 81087d0:	0810879d 	.word	0x0810879d
 81087d4:	0810879d 	.word	0x0810879d
 81087d8:	0810879d 	.word	0x0810879d
 81087dc:	0810879d 	.word	0x0810879d
 81087e0:	08108921 	.word	0x08108921
 81087e4:	0810884b 	.word	0x0810884b
 81087e8:	081088db 	.word	0x081088db
 81087ec:	0810879d 	.word	0x0810879d
 81087f0:	0810879d 	.word	0x0810879d
 81087f4:	08108943 	.word	0x08108943
 81087f8:	0810879d 	.word	0x0810879d
 81087fc:	0810884b 	.word	0x0810884b
 8108800:	0810879d 	.word	0x0810879d
 8108804:	0810879d 	.word	0x0810879d
 8108808:	081088e3 	.word	0x081088e3
 810880c:	6833      	ldr	r3, [r6, #0]
 810880e:	1d1a      	adds	r2, r3, #4
 8108810:	681b      	ldr	r3, [r3, #0]
 8108812:	6032      	str	r2, [r6, #0]
 8108814:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8108818:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 810881c:	2301      	movs	r3, #1
 810881e:	e09d      	b.n	810895c <_printf_i+0x1e8>
 8108820:	6833      	ldr	r3, [r6, #0]
 8108822:	6820      	ldr	r0, [r4, #0]
 8108824:	1d19      	adds	r1, r3, #4
 8108826:	6031      	str	r1, [r6, #0]
 8108828:	0606      	lsls	r6, r0, #24
 810882a:	d501      	bpl.n	8108830 <_printf_i+0xbc>
 810882c:	681d      	ldr	r5, [r3, #0]
 810882e:	e003      	b.n	8108838 <_printf_i+0xc4>
 8108830:	0645      	lsls	r5, r0, #25
 8108832:	d5fb      	bpl.n	810882c <_printf_i+0xb8>
 8108834:	f9b3 5000 	ldrsh.w	r5, [r3]
 8108838:	2d00      	cmp	r5, #0
 810883a:	da03      	bge.n	8108844 <_printf_i+0xd0>
 810883c:	232d      	movs	r3, #45	@ 0x2d
 810883e:	426d      	negs	r5, r5
 8108840:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8108844:	4859      	ldr	r0, [pc, #356]	@ (81089ac <_printf_i+0x238>)
 8108846:	230a      	movs	r3, #10
 8108848:	e011      	b.n	810886e <_printf_i+0xfa>
 810884a:	6821      	ldr	r1, [r4, #0]
 810884c:	6833      	ldr	r3, [r6, #0]
 810884e:	0608      	lsls	r0, r1, #24
 8108850:	f853 5b04 	ldr.w	r5, [r3], #4
 8108854:	d402      	bmi.n	810885c <_printf_i+0xe8>
 8108856:	0649      	lsls	r1, r1, #25
 8108858:	bf48      	it	mi
 810885a:	b2ad      	uxthmi	r5, r5
 810885c:	2f6f      	cmp	r7, #111	@ 0x6f
 810885e:	4853      	ldr	r0, [pc, #332]	@ (81089ac <_printf_i+0x238>)
 8108860:	6033      	str	r3, [r6, #0]
 8108862:	bf14      	ite	ne
 8108864:	230a      	movne	r3, #10
 8108866:	2308      	moveq	r3, #8
 8108868:	2100      	movs	r1, #0
 810886a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 810886e:	6866      	ldr	r6, [r4, #4]
 8108870:	60a6      	str	r6, [r4, #8]
 8108872:	2e00      	cmp	r6, #0
 8108874:	bfa2      	ittt	ge
 8108876:	6821      	ldrge	r1, [r4, #0]
 8108878:	f021 0104 	bicge.w	r1, r1, #4
 810887c:	6021      	strge	r1, [r4, #0]
 810887e:	b90d      	cbnz	r5, 8108884 <_printf_i+0x110>
 8108880:	2e00      	cmp	r6, #0
 8108882:	d04b      	beq.n	810891c <_printf_i+0x1a8>
 8108884:	4616      	mov	r6, r2
 8108886:	fbb5 f1f3 	udiv	r1, r5, r3
 810888a:	fb03 5711 	mls	r7, r3, r1, r5
 810888e:	5dc7      	ldrb	r7, [r0, r7]
 8108890:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8108894:	462f      	mov	r7, r5
 8108896:	42bb      	cmp	r3, r7
 8108898:	460d      	mov	r5, r1
 810889a:	d9f4      	bls.n	8108886 <_printf_i+0x112>
 810889c:	2b08      	cmp	r3, #8
 810889e:	d10b      	bne.n	81088b8 <_printf_i+0x144>
 81088a0:	6823      	ldr	r3, [r4, #0]
 81088a2:	07df      	lsls	r7, r3, #31
 81088a4:	d508      	bpl.n	81088b8 <_printf_i+0x144>
 81088a6:	6923      	ldr	r3, [r4, #16]
 81088a8:	6861      	ldr	r1, [r4, #4]
 81088aa:	4299      	cmp	r1, r3
 81088ac:	bfde      	ittt	le
 81088ae:	2330      	movle	r3, #48	@ 0x30
 81088b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 81088b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 81088b8:	1b92      	subs	r2, r2, r6
 81088ba:	6122      	str	r2, [r4, #16]
 81088bc:	f8cd a000 	str.w	sl, [sp]
 81088c0:	464b      	mov	r3, r9
 81088c2:	aa03      	add	r2, sp, #12
 81088c4:	4621      	mov	r1, r4
 81088c6:	4640      	mov	r0, r8
 81088c8:	f7ff fee6 	bl	8108698 <_printf_common>
 81088cc:	3001      	adds	r0, #1
 81088ce:	d14a      	bne.n	8108966 <_printf_i+0x1f2>
 81088d0:	f04f 30ff 	mov.w	r0, #4294967295
 81088d4:	b004      	add	sp, #16
 81088d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81088da:	6823      	ldr	r3, [r4, #0]
 81088dc:	f043 0320 	orr.w	r3, r3, #32
 81088e0:	6023      	str	r3, [r4, #0]
 81088e2:	4833      	ldr	r0, [pc, #204]	@ (81089b0 <_printf_i+0x23c>)
 81088e4:	2778      	movs	r7, #120	@ 0x78
 81088e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 81088ea:	6823      	ldr	r3, [r4, #0]
 81088ec:	6831      	ldr	r1, [r6, #0]
 81088ee:	061f      	lsls	r7, r3, #24
 81088f0:	f851 5b04 	ldr.w	r5, [r1], #4
 81088f4:	d402      	bmi.n	81088fc <_printf_i+0x188>
 81088f6:	065f      	lsls	r7, r3, #25
 81088f8:	bf48      	it	mi
 81088fa:	b2ad      	uxthmi	r5, r5
 81088fc:	6031      	str	r1, [r6, #0]
 81088fe:	07d9      	lsls	r1, r3, #31
 8108900:	bf44      	itt	mi
 8108902:	f043 0320 	orrmi.w	r3, r3, #32
 8108906:	6023      	strmi	r3, [r4, #0]
 8108908:	b11d      	cbz	r5, 8108912 <_printf_i+0x19e>
 810890a:	2310      	movs	r3, #16
 810890c:	e7ac      	b.n	8108868 <_printf_i+0xf4>
 810890e:	4827      	ldr	r0, [pc, #156]	@ (81089ac <_printf_i+0x238>)
 8108910:	e7e9      	b.n	81088e6 <_printf_i+0x172>
 8108912:	6823      	ldr	r3, [r4, #0]
 8108914:	f023 0320 	bic.w	r3, r3, #32
 8108918:	6023      	str	r3, [r4, #0]
 810891a:	e7f6      	b.n	810890a <_printf_i+0x196>
 810891c:	4616      	mov	r6, r2
 810891e:	e7bd      	b.n	810889c <_printf_i+0x128>
 8108920:	6833      	ldr	r3, [r6, #0]
 8108922:	6825      	ldr	r5, [r4, #0]
 8108924:	6961      	ldr	r1, [r4, #20]
 8108926:	1d18      	adds	r0, r3, #4
 8108928:	6030      	str	r0, [r6, #0]
 810892a:	062e      	lsls	r6, r5, #24
 810892c:	681b      	ldr	r3, [r3, #0]
 810892e:	d501      	bpl.n	8108934 <_printf_i+0x1c0>
 8108930:	6019      	str	r1, [r3, #0]
 8108932:	e002      	b.n	810893a <_printf_i+0x1c6>
 8108934:	0668      	lsls	r0, r5, #25
 8108936:	d5fb      	bpl.n	8108930 <_printf_i+0x1bc>
 8108938:	8019      	strh	r1, [r3, #0]
 810893a:	2300      	movs	r3, #0
 810893c:	6123      	str	r3, [r4, #16]
 810893e:	4616      	mov	r6, r2
 8108940:	e7bc      	b.n	81088bc <_printf_i+0x148>
 8108942:	6833      	ldr	r3, [r6, #0]
 8108944:	1d1a      	adds	r2, r3, #4
 8108946:	6032      	str	r2, [r6, #0]
 8108948:	681e      	ldr	r6, [r3, #0]
 810894a:	6862      	ldr	r2, [r4, #4]
 810894c:	2100      	movs	r1, #0
 810894e:	4630      	mov	r0, r6
 8108950:	f7f7 fcd6 	bl	8100300 <memchr>
 8108954:	b108      	cbz	r0, 810895a <_printf_i+0x1e6>
 8108956:	1b80      	subs	r0, r0, r6
 8108958:	6060      	str	r0, [r4, #4]
 810895a:	6863      	ldr	r3, [r4, #4]
 810895c:	6123      	str	r3, [r4, #16]
 810895e:	2300      	movs	r3, #0
 8108960:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8108964:	e7aa      	b.n	81088bc <_printf_i+0x148>
 8108966:	6923      	ldr	r3, [r4, #16]
 8108968:	4632      	mov	r2, r6
 810896a:	4649      	mov	r1, r9
 810896c:	4640      	mov	r0, r8
 810896e:	47d0      	blx	sl
 8108970:	3001      	adds	r0, #1
 8108972:	d0ad      	beq.n	81088d0 <_printf_i+0x15c>
 8108974:	6823      	ldr	r3, [r4, #0]
 8108976:	079b      	lsls	r3, r3, #30
 8108978:	d413      	bmi.n	81089a2 <_printf_i+0x22e>
 810897a:	68e0      	ldr	r0, [r4, #12]
 810897c:	9b03      	ldr	r3, [sp, #12]
 810897e:	4298      	cmp	r0, r3
 8108980:	bfb8      	it	lt
 8108982:	4618      	movlt	r0, r3
 8108984:	e7a6      	b.n	81088d4 <_printf_i+0x160>
 8108986:	2301      	movs	r3, #1
 8108988:	4632      	mov	r2, r6
 810898a:	4649      	mov	r1, r9
 810898c:	4640      	mov	r0, r8
 810898e:	47d0      	blx	sl
 8108990:	3001      	adds	r0, #1
 8108992:	d09d      	beq.n	81088d0 <_printf_i+0x15c>
 8108994:	3501      	adds	r5, #1
 8108996:	68e3      	ldr	r3, [r4, #12]
 8108998:	9903      	ldr	r1, [sp, #12]
 810899a:	1a5b      	subs	r3, r3, r1
 810899c:	42ab      	cmp	r3, r5
 810899e:	dcf2      	bgt.n	8108986 <_printf_i+0x212>
 81089a0:	e7eb      	b.n	810897a <_printf_i+0x206>
 81089a2:	2500      	movs	r5, #0
 81089a4:	f104 0619 	add.w	r6, r4, #25
 81089a8:	e7f5      	b.n	8108996 <_printf_i+0x222>
 81089aa:	bf00      	nop
 81089ac:	0810b3be 	.word	0x0810b3be
 81089b0:	0810b3cf 	.word	0x0810b3cf

081089b4 <std>:
 81089b4:	2300      	movs	r3, #0
 81089b6:	b510      	push	{r4, lr}
 81089b8:	4604      	mov	r4, r0
 81089ba:	e9c0 3300 	strd	r3, r3, [r0]
 81089be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 81089c2:	6083      	str	r3, [r0, #8]
 81089c4:	8181      	strh	r1, [r0, #12]
 81089c6:	6643      	str	r3, [r0, #100]	@ 0x64
 81089c8:	81c2      	strh	r2, [r0, #14]
 81089ca:	6183      	str	r3, [r0, #24]
 81089cc:	4619      	mov	r1, r3
 81089ce:	2208      	movs	r2, #8
 81089d0:	305c      	adds	r0, #92	@ 0x5c
 81089d2:	f000 fa2d 	bl	8108e30 <memset>
 81089d6:	4b0d      	ldr	r3, [pc, #52]	@ (8108a0c <std+0x58>)
 81089d8:	6263      	str	r3, [r4, #36]	@ 0x24
 81089da:	4b0d      	ldr	r3, [pc, #52]	@ (8108a10 <std+0x5c>)
 81089dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 81089de:	4b0d      	ldr	r3, [pc, #52]	@ (8108a14 <std+0x60>)
 81089e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 81089e2:	4b0d      	ldr	r3, [pc, #52]	@ (8108a18 <std+0x64>)
 81089e4:	6323      	str	r3, [r4, #48]	@ 0x30
 81089e6:	4b0d      	ldr	r3, [pc, #52]	@ (8108a1c <std+0x68>)
 81089e8:	6224      	str	r4, [r4, #32]
 81089ea:	429c      	cmp	r4, r3
 81089ec:	d006      	beq.n	81089fc <std+0x48>
 81089ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 81089f2:	4294      	cmp	r4, r2
 81089f4:	d002      	beq.n	81089fc <std+0x48>
 81089f6:	33d0      	adds	r3, #208	@ 0xd0
 81089f8:	429c      	cmp	r4, r3
 81089fa:	d105      	bne.n	8108a08 <std+0x54>
 81089fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8108a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8108a04:	f000 baa4 	b.w	8108f50 <__retarget_lock_init_recursive>
 8108a08:	bd10      	pop	{r4, pc}
 8108a0a:	bf00      	nop
 8108a0c:	08108c81 	.word	0x08108c81
 8108a10:	08108ca3 	.word	0x08108ca3
 8108a14:	08108cdb 	.word	0x08108cdb
 8108a18:	08108cff 	.word	0x08108cff
 8108a1c:	100004f4 	.word	0x100004f4

08108a20 <stdio_exit_handler>:
 8108a20:	4a02      	ldr	r2, [pc, #8]	@ (8108a2c <stdio_exit_handler+0xc>)
 8108a22:	4903      	ldr	r1, [pc, #12]	@ (8108a30 <stdio_exit_handler+0x10>)
 8108a24:	4803      	ldr	r0, [pc, #12]	@ (8108a34 <stdio_exit_handler+0x14>)
 8108a26:	f000 b869 	b.w	8108afc <_fwalk_sglue>
 8108a2a:	bf00      	nop
 8108a2c:	10000058 	.word	0x10000058
 8108a30:	0810ab89 	.word	0x0810ab89
 8108a34:	10000068 	.word	0x10000068

08108a38 <cleanup_stdio>:
 8108a38:	6841      	ldr	r1, [r0, #4]
 8108a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8108a6c <cleanup_stdio+0x34>)
 8108a3c:	4299      	cmp	r1, r3
 8108a3e:	b510      	push	{r4, lr}
 8108a40:	4604      	mov	r4, r0
 8108a42:	d001      	beq.n	8108a48 <cleanup_stdio+0x10>
 8108a44:	f002 f8a0 	bl	810ab88 <_fflush_r>
 8108a48:	68a1      	ldr	r1, [r4, #8]
 8108a4a:	4b09      	ldr	r3, [pc, #36]	@ (8108a70 <cleanup_stdio+0x38>)
 8108a4c:	4299      	cmp	r1, r3
 8108a4e:	d002      	beq.n	8108a56 <cleanup_stdio+0x1e>
 8108a50:	4620      	mov	r0, r4
 8108a52:	f002 f899 	bl	810ab88 <_fflush_r>
 8108a56:	68e1      	ldr	r1, [r4, #12]
 8108a58:	4b06      	ldr	r3, [pc, #24]	@ (8108a74 <cleanup_stdio+0x3c>)
 8108a5a:	4299      	cmp	r1, r3
 8108a5c:	d004      	beq.n	8108a68 <cleanup_stdio+0x30>
 8108a5e:	4620      	mov	r0, r4
 8108a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8108a64:	f002 b890 	b.w	810ab88 <_fflush_r>
 8108a68:	bd10      	pop	{r4, pc}
 8108a6a:	bf00      	nop
 8108a6c:	100004f4 	.word	0x100004f4
 8108a70:	1000055c 	.word	0x1000055c
 8108a74:	100005c4 	.word	0x100005c4

08108a78 <global_stdio_init.part.0>:
 8108a78:	b510      	push	{r4, lr}
 8108a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8108aa8 <global_stdio_init.part.0+0x30>)
 8108a7c:	4c0b      	ldr	r4, [pc, #44]	@ (8108aac <global_stdio_init.part.0+0x34>)
 8108a7e:	4a0c      	ldr	r2, [pc, #48]	@ (8108ab0 <global_stdio_init.part.0+0x38>)
 8108a80:	601a      	str	r2, [r3, #0]
 8108a82:	4620      	mov	r0, r4
 8108a84:	2200      	movs	r2, #0
 8108a86:	2104      	movs	r1, #4
 8108a88:	f7ff ff94 	bl	81089b4 <std>
 8108a8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8108a90:	2201      	movs	r2, #1
 8108a92:	2109      	movs	r1, #9
 8108a94:	f7ff ff8e 	bl	81089b4 <std>
 8108a98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8108a9c:	2202      	movs	r2, #2
 8108a9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8108aa2:	2112      	movs	r1, #18
 8108aa4:	f7ff bf86 	b.w	81089b4 <std>
 8108aa8:	1000062c 	.word	0x1000062c
 8108aac:	100004f4 	.word	0x100004f4
 8108ab0:	08108a21 	.word	0x08108a21

08108ab4 <__sfp_lock_acquire>:
 8108ab4:	4801      	ldr	r0, [pc, #4]	@ (8108abc <__sfp_lock_acquire+0x8>)
 8108ab6:	f000 ba4c 	b.w	8108f52 <__retarget_lock_acquire_recursive>
 8108aba:	bf00      	nop
 8108abc:	10000635 	.word	0x10000635

08108ac0 <__sfp_lock_release>:
 8108ac0:	4801      	ldr	r0, [pc, #4]	@ (8108ac8 <__sfp_lock_release+0x8>)
 8108ac2:	f000 ba47 	b.w	8108f54 <__retarget_lock_release_recursive>
 8108ac6:	bf00      	nop
 8108ac8:	10000635 	.word	0x10000635

08108acc <__sinit>:
 8108acc:	b510      	push	{r4, lr}
 8108ace:	4604      	mov	r4, r0
 8108ad0:	f7ff fff0 	bl	8108ab4 <__sfp_lock_acquire>
 8108ad4:	6a23      	ldr	r3, [r4, #32]
 8108ad6:	b11b      	cbz	r3, 8108ae0 <__sinit+0x14>
 8108ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8108adc:	f7ff bff0 	b.w	8108ac0 <__sfp_lock_release>
 8108ae0:	4b04      	ldr	r3, [pc, #16]	@ (8108af4 <__sinit+0x28>)
 8108ae2:	6223      	str	r3, [r4, #32]
 8108ae4:	4b04      	ldr	r3, [pc, #16]	@ (8108af8 <__sinit+0x2c>)
 8108ae6:	681b      	ldr	r3, [r3, #0]
 8108ae8:	2b00      	cmp	r3, #0
 8108aea:	d1f5      	bne.n	8108ad8 <__sinit+0xc>
 8108aec:	f7ff ffc4 	bl	8108a78 <global_stdio_init.part.0>
 8108af0:	e7f2      	b.n	8108ad8 <__sinit+0xc>
 8108af2:	bf00      	nop
 8108af4:	08108a39 	.word	0x08108a39
 8108af8:	1000062c 	.word	0x1000062c

08108afc <_fwalk_sglue>:
 8108afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8108b00:	4607      	mov	r7, r0
 8108b02:	4688      	mov	r8, r1
 8108b04:	4614      	mov	r4, r2
 8108b06:	2600      	movs	r6, #0
 8108b08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8108b0c:	f1b9 0901 	subs.w	r9, r9, #1
 8108b10:	d505      	bpl.n	8108b1e <_fwalk_sglue+0x22>
 8108b12:	6824      	ldr	r4, [r4, #0]
 8108b14:	2c00      	cmp	r4, #0
 8108b16:	d1f7      	bne.n	8108b08 <_fwalk_sglue+0xc>
 8108b18:	4630      	mov	r0, r6
 8108b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8108b1e:	89ab      	ldrh	r3, [r5, #12]
 8108b20:	2b01      	cmp	r3, #1
 8108b22:	d907      	bls.n	8108b34 <_fwalk_sglue+0x38>
 8108b24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8108b28:	3301      	adds	r3, #1
 8108b2a:	d003      	beq.n	8108b34 <_fwalk_sglue+0x38>
 8108b2c:	4629      	mov	r1, r5
 8108b2e:	4638      	mov	r0, r7
 8108b30:	47c0      	blx	r8
 8108b32:	4306      	orrs	r6, r0
 8108b34:	3568      	adds	r5, #104	@ 0x68
 8108b36:	e7e9      	b.n	8108b0c <_fwalk_sglue+0x10>

08108b38 <iprintf>:
 8108b38:	b40f      	push	{r0, r1, r2, r3}
 8108b3a:	b507      	push	{r0, r1, r2, lr}
 8108b3c:	4906      	ldr	r1, [pc, #24]	@ (8108b58 <iprintf+0x20>)
 8108b3e:	ab04      	add	r3, sp, #16
 8108b40:	6808      	ldr	r0, [r1, #0]
 8108b42:	f853 2b04 	ldr.w	r2, [r3], #4
 8108b46:	6881      	ldr	r1, [r0, #8]
 8108b48:	9301      	str	r3, [sp, #4]
 8108b4a:	f001 fe81 	bl	810a850 <_vfiprintf_r>
 8108b4e:	b003      	add	sp, #12
 8108b50:	f85d eb04 	ldr.w	lr, [sp], #4
 8108b54:	b004      	add	sp, #16
 8108b56:	4770      	bx	lr
 8108b58:	10000064 	.word	0x10000064

08108b5c <_puts_r>:
 8108b5c:	6a03      	ldr	r3, [r0, #32]
 8108b5e:	b570      	push	{r4, r5, r6, lr}
 8108b60:	6884      	ldr	r4, [r0, #8]
 8108b62:	4605      	mov	r5, r0
 8108b64:	460e      	mov	r6, r1
 8108b66:	b90b      	cbnz	r3, 8108b6c <_puts_r+0x10>
 8108b68:	f7ff ffb0 	bl	8108acc <__sinit>
 8108b6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8108b6e:	07db      	lsls	r3, r3, #31
 8108b70:	d405      	bmi.n	8108b7e <_puts_r+0x22>
 8108b72:	89a3      	ldrh	r3, [r4, #12]
 8108b74:	0598      	lsls	r0, r3, #22
 8108b76:	d402      	bmi.n	8108b7e <_puts_r+0x22>
 8108b78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8108b7a:	f000 f9ea 	bl	8108f52 <__retarget_lock_acquire_recursive>
 8108b7e:	89a3      	ldrh	r3, [r4, #12]
 8108b80:	0719      	lsls	r1, r3, #28
 8108b82:	d502      	bpl.n	8108b8a <_puts_r+0x2e>
 8108b84:	6923      	ldr	r3, [r4, #16]
 8108b86:	2b00      	cmp	r3, #0
 8108b88:	d135      	bne.n	8108bf6 <_puts_r+0x9a>
 8108b8a:	4621      	mov	r1, r4
 8108b8c:	4628      	mov	r0, r5
 8108b8e:	f000 f8f9 	bl	8108d84 <__swsetup_r>
 8108b92:	b380      	cbz	r0, 8108bf6 <_puts_r+0x9a>
 8108b94:	f04f 35ff 	mov.w	r5, #4294967295
 8108b98:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8108b9a:	07da      	lsls	r2, r3, #31
 8108b9c:	d405      	bmi.n	8108baa <_puts_r+0x4e>
 8108b9e:	89a3      	ldrh	r3, [r4, #12]
 8108ba0:	059b      	lsls	r3, r3, #22
 8108ba2:	d402      	bmi.n	8108baa <_puts_r+0x4e>
 8108ba4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8108ba6:	f000 f9d5 	bl	8108f54 <__retarget_lock_release_recursive>
 8108baa:	4628      	mov	r0, r5
 8108bac:	bd70      	pop	{r4, r5, r6, pc}
 8108bae:	2b00      	cmp	r3, #0
 8108bb0:	da04      	bge.n	8108bbc <_puts_r+0x60>
 8108bb2:	69a2      	ldr	r2, [r4, #24]
 8108bb4:	429a      	cmp	r2, r3
 8108bb6:	dc17      	bgt.n	8108be8 <_puts_r+0x8c>
 8108bb8:	290a      	cmp	r1, #10
 8108bba:	d015      	beq.n	8108be8 <_puts_r+0x8c>
 8108bbc:	6823      	ldr	r3, [r4, #0]
 8108bbe:	1c5a      	adds	r2, r3, #1
 8108bc0:	6022      	str	r2, [r4, #0]
 8108bc2:	7019      	strb	r1, [r3, #0]
 8108bc4:	68a3      	ldr	r3, [r4, #8]
 8108bc6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8108bca:	3b01      	subs	r3, #1
 8108bcc:	60a3      	str	r3, [r4, #8]
 8108bce:	2900      	cmp	r1, #0
 8108bd0:	d1ed      	bne.n	8108bae <_puts_r+0x52>
 8108bd2:	2b00      	cmp	r3, #0
 8108bd4:	da11      	bge.n	8108bfa <_puts_r+0x9e>
 8108bd6:	4622      	mov	r2, r4
 8108bd8:	210a      	movs	r1, #10
 8108bda:	4628      	mov	r0, r5
 8108bdc:	f000 f893 	bl	8108d06 <__swbuf_r>
 8108be0:	3001      	adds	r0, #1
 8108be2:	d0d7      	beq.n	8108b94 <_puts_r+0x38>
 8108be4:	250a      	movs	r5, #10
 8108be6:	e7d7      	b.n	8108b98 <_puts_r+0x3c>
 8108be8:	4622      	mov	r2, r4
 8108bea:	4628      	mov	r0, r5
 8108bec:	f000 f88b 	bl	8108d06 <__swbuf_r>
 8108bf0:	3001      	adds	r0, #1
 8108bf2:	d1e7      	bne.n	8108bc4 <_puts_r+0x68>
 8108bf4:	e7ce      	b.n	8108b94 <_puts_r+0x38>
 8108bf6:	3e01      	subs	r6, #1
 8108bf8:	e7e4      	b.n	8108bc4 <_puts_r+0x68>
 8108bfa:	6823      	ldr	r3, [r4, #0]
 8108bfc:	1c5a      	adds	r2, r3, #1
 8108bfe:	6022      	str	r2, [r4, #0]
 8108c00:	220a      	movs	r2, #10
 8108c02:	701a      	strb	r2, [r3, #0]
 8108c04:	e7ee      	b.n	8108be4 <_puts_r+0x88>
	...

08108c08 <puts>:
 8108c08:	4b02      	ldr	r3, [pc, #8]	@ (8108c14 <puts+0xc>)
 8108c0a:	4601      	mov	r1, r0
 8108c0c:	6818      	ldr	r0, [r3, #0]
 8108c0e:	f7ff bfa5 	b.w	8108b5c <_puts_r>
 8108c12:	bf00      	nop
 8108c14:	10000064 	.word	0x10000064

08108c18 <sniprintf>:
 8108c18:	b40c      	push	{r2, r3}
 8108c1a:	b530      	push	{r4, r5, lr}
 8108c1c:	4b17      	ldr	r3, [pc, #92]	@ (8108c7c <sniprintf+0x64>)
 8108c1e:	1e0c      	subs	r4, r1, #0
 8108c20:	681d      	ldr	r5, [r3, #0]
 8108c22:	b09d      	sub	sp, #116	@ 0x74
 8108c24:	da08      	bge.n	8108c38 <sniprintf+0x20>
 8108c26:	238b      	movs	r3, #139	@ 0x8b
 8108c28:	602b      	str	r3, [r5, #0]
 8108c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8108c2e:	b01d      	add	sp, #116	@ 0x74
 8108c30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8108c34:	b002      	add	sp, #8
 8108c36:	4770      	bx	lr
 8108c38:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8108c3c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8108c40:	bf14      	ite	ne
 8108c42:	f104 33ff 	addne.w	r3, r4, #4294967295
 8108c46:	4623      	moveq	r3, r4
 8108c48:	9304      	str	r3, [sp, #16]
 8108c4a:	9307      	str	r3, [sp, #28]
 8108c4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8108c50:	9002      	str	r0, [sp, #8]
 8108c52:	9006      	str	r0, [sp, #24]
 8108c54:	f8ad 3016 	strh.w	r3, [sp, #22]
 8108c58:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8108c5a:	ab21      	add	r3, sp, #132	@ 0x84
 8108c5c:	a902      	add	r1, sp, #8
 8108c5e:	4628      	mov	r0, r5
 8108c60:	9301      	str	r3, [sp, #4]
 8108c62:	f001 fccf 	bl	810a604 <_svfiprintf_r>
 8108c66:	1c43      	adds	r3, r0, #1
 8108c68:	bfbc      	itt	lt
 8108c6a:	238b      	movlt	r3, #139	@ 0x8b
 8108c6c:	602b      	strlt	r3, [r5, #0]
 8108c6e:	2c00      	cmp	r4, #0
 8108c70:	d0dd      	beq.n	8108c2e <sniprintf+0x16>
 8108c72:	9b02      	ldr	r3, [sp, #8]
 8108c74:	2200      	movs	r2, #0
 8108c76:	701a      	strb	r2, [r3, #0]
 8108c78:	e7d9      	b.n	8108c2e <sniprintf+0x16>
 8108c7a:	bf00      	nop
 8108c7c:	10000064 	.word	0x10000064

08108c80 <__sread>:
 8108c80:	b510      	push	{r4, lr}
 8108c82:	460c      	mov	r4, r1
 8108c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8108c88:	f000 f914 	bl	8108eb4 <_read_r>
 8108c8c:	2800      	cmp	r0, #0
 8108c8e:	bfab      	itete	ge
 8108c90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8108c92:	89a3      	ldrhlt	r3, [r4, #12]
 8108c94:	181b      	addge	r3, r3, r0
 8108c96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8108c9a:	bfac      	ite	ge
 8108c9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8108c9e:	81a3      	strhlt	r3, [r4, #12]
 8108ca0:	bd10      	pop	{r4, pc}

08108ca2 <__swrite>:
 8108ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8108ca6:	461f      	mov	r7, r3
 8108ca8:	898b      	ldrh	r3, [r1, #12]
 8108caa:	05db      	lsls	r3, r3, #23
 8108cac:	4605      	mov	r5, r0
 8108cae:	460c      	mov	r4, r1
 8108cb0:	4616      	mov	r6, r2
 8108cb2:	d505      	bpl.n	8108cc0 <__swrite+0x1e>
 8108cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8108cb8:	2302      	movs	r3, #2
 8108cba:	2200      	movs	r2, #0
 8108cbc:	f000 f8e8 	bl	8108e90 <_lseek_r>
 8108cc0:	89a3      	ldrh	r3, [r4, #12]
 8108cc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8108cc6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8108cca:	81a3      	strh	r3, [r4, #12]
 8108ccc:	4632      	mov	r2, r6
 8108cce:	463b      	mov	r3, r7
 8108cd0:	4628      	mov	r0, r5
 8108cd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8108cd6:	f000 b8ff 	b.w	8108ed8 <_write_r>

08108cda <__sseek>:
 8108cda:	b510      	push	{r4, lr}
 8108cdc:	460c      	mov	r4, r1
 8108cde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8108ce2:	f000 f8d5 	bl	8108e90 <_lseek_r>
 8108ce6:	1c43      	adds	r3, r0, #1
 8108ce8:	89a3      	ldrh	r3, [r4, #12]
 8108cea:	bf15      	itete	ne
 8108cec:	6560      	strne	r0, [r4, #84]	@ 0x54
 8108cee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8108cf2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8108cf6:	81a3      	strheq	r3, [r4, #12]
 8108cf8:	bf18      	it	ne
 8108cfa:	81a3      	strhne	r3, [r4, #12]
 8108cfc:	bd10      	pop	{r4, pc}

08108cfe <__sclose>:
 8108cfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8108d02:	f000 b8b5 	b.w	8108e70 <_close_r>

08108d06 <__swbuf_r>:
 8108d06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8108d08:	460e      	mov	r6, r1
 8108d0a:	4614      	mov	r4, r2
 8108d0c:	4605      	mov	r5, r0
 8108d0e:	b118      	cbz	r0, 8108d18 <__swbuf_r+0x12>
 8108d10:	6a03      	ldr	r3, [r0, #32]
 8108d12:	b90b      	cbnz	r3, 8108d18 <__swbuf_r+0x12>
 8108d14:	f7ff feda 	bl	8108acc <__sinit>
 8108d18:	69a3      	ldr	r3, [r4, #24]
 8108d1a:	60a3      	str	r3, [r4, #8]
 8108d1c:	89a3      	ldrh	r3, [r4, #12]
 8108d1e:	071a      	lsls	r2, r3, #28
 8108d20:	d501      	bpl.n	8108d26 <__swbuf_r+0x20>
 8108d22:	6923      	ldr	r3, [r4, #16]
 8108d24:	b943      	cbnz	r3, 8108d38 <__swbuf_r+0x32>
 8108d26:	4621      	mov	r1, r4
 8108d28:	4628      	mov	r0, r5
 8108d2a:	f000 f82b 	bl	8108d84 <__swsetup_r>
 8108d2e:	b118      	cbz	r0, 8108d38 <__swbuf_r+0x32>
 8108d30:	f04f 37ff 	mov.w	r7, #4294967295
 8108d34:	4638      	mov	r0, r7
 8108d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8108d38:	6823      	ldr	r3, [r4, #0]
 8108d3a:	6922      	ldr	r2, [r4, #16]
 8108d3c:	1a98      	subs	r0, r3, r2
 8108d3e:	6963      	ldr	r3, [r4, #20]
 8108d40:	b2f6      	uxtb	r6, r6
 8108d42:	4283      	cmp	r3, r0
 8108d44:	4637      	mov	r7, r6
 8108d46:	dc05      	bgt.n	8108d54 <__swbuf_r+0x4e>
 8108d48:	4621      	mov	r1, r4
 8108d4a:	4628      	mov	r0, r5
 8108d4c:	f001 ff1c 	bl	810ab88 <_fflush_r>
 8108d50:	2800      	cmp	r0, #0
 8108d52:	d1ed      	bne.n	8108d30 <__swbuf_r+0x2a>
 8108d54:	68a3      	ldr	r3, [r4, #8]
 8108d56:	3b01      	subs	r3, #1
 8108d58:	60a3      	str	r3, [r4, #8]
 8108d5a:	6823      	ldr	r3, [r4, #0]
 8108d5c:	1c5a      	adds	r2, r3, #1
 8108d5e:	6022      	str	r2, [r4, #0]
 8108d60:	701e      	strb	r6, [r3, #0]
 8108d62:	6962      	ldr	r2, [r4, #20]
 8108d64:	1c43      	adds	r3, r0, #1
 8108d66:	429a      	cmp	r2, r3
 8108d68:	d004      	beq.n	8108d74 <__swbuf_r+0x6e>
 8108d6a:	89a3      	ldrh	r3, [r4, #12]
 8108d6c:	07db      	lsls	r3, r3, #31
 8108d6e:	d5e1      	bpl.n	8108d34 <__swbuf_r+0x2e>
 8108d70:	2e0a      	cmp	r6, #10
 8108d72:	d1df      	bne.n	8108d34 <__swbuf_r+0x2e>
 8108d74:	4621      	mov	r1, r4
 8108d76:	4628      	mov	r0, r5
 8108d78:	f001 ff06 	bl	810ab88 <_fflush_r>
 8108d7c:	2800      	cmp	r0, #0
 8108d7e:	d0d9      	beq.n	8108d34 <__swbuf_r+0x2e>
 8108d80:	e7d6      	b.n	8108d30 <__swbuf_r+0x2a>
	...

08108d84 <__swsetup_r>:
 8108d84:	b538      	push	{r3, r4, r5, lr}
 8108d86:	4b29      	ldr	r3, [pc, #164]	@ (8108e2c <__swsetup_r+0xa8>)
 8108d88:	4605      	mov	r5, r0
 8108d8a:	6818      	ldr	r0, [r3, #0]
 8108d8c:	460c      	mov	r4, r1
 8108d8e:	b118      	cbz	r0, 8108d98 <__swsetup_r+0x14>
 8108d90:	6a03      	ldr	r3, [r0, #32]
 8108d92:	b90b      	cbnz	r3, 8108d98 <__swsetup_r+0x14>
 8108d94:	f7ff fe9a 	bl	8108acc <__sinit>
 8108d98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8108d9c:	0719      	lsls	r1, r3, #28
 8108d9e:	d422      	bmi.n	8108de6 <__swsetup_r+0x62>
 8108da0:	06da      	lsls	r2, r3, #27
 8108da2:	d407      	bmi.n	8108db4 <__swsetup_r+0x30>
 8108da4:	2209      	movs	r2, #9
 8108da6:	602a      	str	r2, [r5, #0]
 8108da8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8108dac:	81a3      	strh	r3, [r4, #12]
 8108dae:	f04f 30ff 	mov.w	r0, #4294967295
 8108db2:	e033      	b.n	8108e1c <__swsetup_r+0x98>
 8108db4:	0758      	lsls	r0, r3, #29
 8108db6:	d512      	bpl.n	8108dde <__swsetup_r+0x5a>
 8108db8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8108dba:	b141      	cbz	r1, 8108dce <__swsetup_r+0x4a>
 8108dbc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8108dc0:	4299      	cmp	r1, r3
 8108dc2:	d002      	beq.n	8108dca <__swsetup_r+0x46>
 8108dc4:	4628      	mov	r0, r5
 8108dc6:	f000 ff3f 	bl	8109c48 <_free_r>
 8108dca:	2300      	movs	r3, #0
 8108dcc:	6363      	str	r3, [r4, #52]	@ 0x34
 8108dce:	89a3      	ldrh	r3, [r4, #12]
 8108dd0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8108dd4:	81a3      	strh	r3, [r4, #12]
 8108dd6:	2300      	movs	r3, #0
 8108dd8:	6063      	str	r3, [r4, #4]
 8108dda:	6923      	ldr	r3, [r4, #16]
 8108ddc:	6023      	str	r3, [r4, #0]
 8108dde:	89a3      	ldrh	r3, [r4, #12]
 8108de0:	f043 0308 	orr.w	r3, r3, #8
 8108de4:	81a3      	strh	r3, [r4, #12]
 8108de6:	6923      	ldr	r3, [r4, #16]
 8108de8:	b94b      	cbnz	r3, 8108dfe <__swsetup_r+0x7a>
 8108dea:	89a3      	ldrh	r3, [r4, #12]
 8108dec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8108df0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8108df4:	d003      	beq.n	8108dfe <__swsetup_r+0x7a>
 8108df6:	4621      	mov	r1, r4
 8108df8:	4628      	mov	r0, r5
 8108dfa:	f001 ff25 	bl	810ac48 <__smakebuf_r>
 8108dfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8108e02:	f013 0201 	ands.w	r2, r3, #1
 8108e06:	d00a      	beq.n	8108e1e <__swsetup_r+0x9a>
 8108e08:	2200      	movs	r2, #0
 8108e0a:	60a2      	str	r2, [r4, #8]
 8108e0c:	6962      	ldr	r2, [r4, #20]
 8108e0e:	4252      	negs	r2, r2
 8108e10:	61a2      	str	r2, [r4, #24]
 8108e12:	6922      	ldr	r2, [r4, #16]
 8108e14:	b942      	cbnz	r2, 8108e28 <__swsetup_r+0xa4>
 8108e16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8108e1a:	d1c5      	bne.n	8108da8 <__swsetup_r+0x24>
 8108e1c:	bd38      	pop	{r3, r4, r5, pc}
 8108e1e:	0799      	lsls	r1, r3, #30
 8108e20:	bf58      	it	pl
 8108e22:	6962      	ldrpl	r2, [r4, #20]
 8108e24:	60a2      	str	r2, [r4, #8]
 8108e26:	e7f4      	b.n	8108e12 <__swsetup_r+0x8e>
 8108e28:	2000      	movs	r0, #0
 8108e2a:	e7f7      	b.n	8108e1c <__swsetup_r+0x98>
 8108e2c:	10000064 	.word	0x10000064

08108e30 <memset>:
 8108e30:	4402      	add	r2, r0
 8108e32:	4603      	mov	r3, r0
 8108e34:	4293      	cmp	r3, r2
 8108e36:	d100      	bne.n	8108e3a <memset+0xa>
 8108e38:	4770      	bx	lr
 8108e3a:	f803 1b01 	strb.w	r1, [r3], #1
 8108e3e:	e7f9      	b.n	8108e34 <memset+0x4>

08108e40 <strncpy>:
 8108e40:	b510      	push	{r4, lr}
 8108e42:	3901      	subs	r1, #1
 8108e44:	4603      	mov	r3, r0
 8108e46:	b132      	cbz	r2, 8108e56 <strncpy+0x16>
 8108e48:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8108e4c:	f803 4b01 	strb.w	r4, [r3], #1
 8108e50:	3a01      	subs	r2, #1
 8108e52:	2c00      	cmp	r4, #0
 8108e54:	d1f7      	bne.n	8108e46 <strncpy+0x6>
 8108e56:	441a      	add	r2, r3
 8108e58:	2100      	movs	r1, #0
 8108e5a:	4293      	cmp	r3, r2
 8108e5c:	d100      	bne.n	8108e60 <strncpy+0x20>
 8108e5e:	bd10      	pop	{r4, pc}
 8108e60:	f803 1b01 	strb.w	r1, [r3], #1
 8108e64:	e7f9      	b.n	8108e5a <strncpy+0x1a>
	...

08108e68 <_localeconv_r>:
 8108e68:	4800      	ldr	r0, [pc, #0]	@ (8108e6c <_localeconv_r+0x4>)
 8108e6a:	4770      	bx	lr
 8108e6c:	100001a4 	.word	0x100001a4

08108e70 <_close_r>:
 8108e70:	b538      	push	{r3, r4, r5, lr}
 8108e72:	4d06      	ldr	r5, [pc, #24]	@ (8108e8c <_close_r+0x1c>)
 8108e74:	2300      	movs	r3, #0
 8108e76:	4604      	mov	r4, r0
 8108e78:	4608      	mov	r0, r1
 8108e7a:	602b      	str	r3, [r5, #0]
 8108e7c:	f7fb f99c 	bl	81041b8 <_close>
 8108e80:	1c43      	adds	r3, r0, #1
 8108e82:	d102      	bne.n	8108e8a <_close_r+0x1a>
 8108e84:	682b      	ldr	r3, [r5, #0]
 8108e86:	b103      	cbz	r3, 8108e8a <_close_r+0x1a>
 8108e88:	6023      	str	r3, [r4, #0]
 8108e8a:	bd38      	pop	{r3, r4, r5, pc}
 8108e8c:	10000630 	.word	0x10000630

08108e90 <_lseek_r>:
 8108e90:	b538      	push	{r3, r4, r5, lr}
 8108e92:	4d07      	ldr	r5, [pc, #28]	@ (8108eb0 <_lseek_r+0x20>)
 8108e94:	4604      	mov	r4, r0
 8108e96:	4608      	mov	r0, r1
 8108e98:	4611      	mov	r1, r2
 8108e9a:	2200      	movs	r2, #0
 8108e9c:	602a      	str	r2, [r5, #0]
 8108e9e:	461a      	mov	r2, r3
 8108ea0:	f7fb f9b1 	bl	8104206 <_lseek>
 8108ea4:	1c43      	adds	r3, r0, #1
 8108ea6:	d102      	bne.n	8108eae <_lseek_r+0x1e>
 8108ea8:	682b      	ldr	r3, [r5, #0]
 8108eaa:	b103      	cbz	r3, 8108eae <_lseek_r+0x1e>
 8108eac:	6023      	str	r3, [r4, #0]
 8108eae:	bd38      	pop	{r3, r4, r5, pc}
 8108eb0:	10000630 	.word	0x10000630

08108eb4 <_read_r>:
 8108eb4:	b538      	push	{r3, r4, r5, lr}
 8108eb6:	4d07      	ldr	r5, [pc, #28]	@ (8108ed4 <_read_r+0x20>)
 8108eb8:	4604      	mov	r4, r0
 8108eba:	4608      	mov	r0, r1
 8108ebc:	4611      	mov	r1, r2
 8108ebe:	2200      	movs	r2, #0
 8108ec0:	602a      	str	r2, [r5, #0]
 8108ec2:	461a      	mov	r2, r3
 8108ec4:	f7fb f93f 	bl	8104146 <_read>
 8108ec8:	1c43      	adds	r3, r0, #1
 8108eca:	d102      	bne.n	8108ed2 <_read_r+0x1e>
 8108ecc:	682b      	ldr	r3, [r5, #0]
 8108ece:	b103      	cbz	r3, 8108ed2 <_read_r+0x1e>
 8108ed0:	6023      	str	r3, [r4, #0]
 8108ed2:	bd38      	pop	{r3, r4, r5, pc}
 8108ed4:	10000630 	.word	0x10000630

08108ed8 <_write_r>:
 8108ed8:	b538      	push	{r3, r4, r5, lr}
 8108eda:	4d07      	ldr	r5, [pc, #28]	@ (8108ef8 <_write_r+0x20>)
 8108edc:	4604      	mov	r4, r0
 8108ede:	4608      	mov	r0, r1
 8108ee0:	4611      	mov	r1, r2
 8108ee2:	2200      	movs	r2, #0
 8108ee4:	602a      	str	r2, [r5, #0]
 8108ee6:	461a      	mov	r2, r3
 8108ee8:	f7fb f94a 	bl	8104180 <_write>
 8108eec:	1c43      	adds	r3, r0, #1
 8108eee:	d102      	bne.n	8108ef6 <_write_r+0x1e>
 8108ef0:	682b      	ldr	r3, [r5, #0]
 8108ef2:	b103      	cbz	r3, 8108ef6 <_write_r+0x1e>
 8108ef4:	6023      	str	r3, [r4, #0]
 8108ef6:	bd38      	pop	{r3, r4, r5, pc}
 8108ef8:	10000630 	.word	0x10000630

08108efc <__errno>:
 8108efc:	4b01      	ldr	r3, [pc, #4]	@ (8108f04 <__errno+0x8>)
 8108efe:	6818      	ldr	r0, [r3, #0]
 8108f00:	4770      	bx	lr
 8108f02:	bf00      	nop
 8108f04:	10000064 	.word	0x10000064

08108f08 <__libc_init_array>:
 8108f08:	b570      	push	{r4, r5, r6, lr}
 8108f0a:	4d0d      	ldr	r5, [pc, #52]	@ (8108f40 <__libc_init_array+0x38>)
 8108f0c:	4c0d      	ldr	r4, [pc, #52]	@ (8108f44 <__libc_init_array+0x3c>)
 8108f0e:	1b64      	subs	r4, r4, r5
 8108f10:	10a4      	asrs	r4, r4, #2
 8108f12:	2600      	movs	r6, #0
 8108f14:	42a6      	cmp	r6, r4
 8108f16:	d109      	bne.n	8108f2c <__libc_init_array+0x24>
 8108f18:	4d0b      	ldr	r5, [pc, #44]	@ (8108f48 <__libc_init_array+0x40>)
 8108f1a:	4c0c      	ldr	r4, [pc, #48]	@ (8108f4c <__libc_init_array+0x44>)
 8108f1c:	f001 ffd0 	bl	810aec0 <_init>
 8108f20:	1b64      	subs	r4, r4, r5
 8108f22:	10a4      	asrs	r4, r4, #2
 8108f24:	2600      	movs	r6, #0
 8108f26:	42a6      	cmp	r6, r4
 8108f28:	d105      	bne.n	8108f36 <__libc_init_array+0x2e>
 8108f2a:	bd70      	pop	{r4, r5, r6, pc}
 8108f2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8108f30:	4798      	blx	r3
 8108f32:	3601      	adds	r6, #1
 8108f34:	e7ee      	b.n	8108f14 <__libc_init_array+0xc>
 8108f36:	f855 3b04 	ldr.w	r3, [r5], #4
 8108f3a:	4798      	blx	r3
 8108f3c:	3601      	adds	r6, #1
 8108f3e:	e7f2      	b.n	8108f26 <__libc_init_array+0x1e>
 8108f40:	0810b60c 	.word	0x0810b60c
 8108f44:	0810b60c 	.word	0x0810b60c
 8108f48:	0810b60c 	.word	0x0810b60c
 8108f4c:	0810b610 	.word	0x0810b610

08108f50 <__retarget_lock_init_recursive>:
 8108f50:	4770      	bx	lr

08108f52 <__retarget_lock_acquire_recursive>:
 8108f52:	4770      	bx	lr

08108f54 <__retarget_lock_release_recursive>:
 8108f54:	4770      	bx	lr

08108f56 <memcpy>:
 8108f56:	440a      	add	r2, r1
 8108f58:	4291      	cmp	r1, r2
 8108f5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8108f5e:	d100      	bne.n	8108f62 <memcpy+0xc>
 8108f60:	4770      	bx	lr
 8108f62:	b510      	push	{r4, lr}
 8108f64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8108f68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8108f6c:	4291      	cmp	r1, r2
 8108f6e:	d1f9      	bne.n	8108f64 <memcpy+0xe>
 8108f70:	bd10      	pop	{r4, pc}
	...

08108f74 <__assert_func>:
 8108f74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8108f76:	4614      	mov	r4, r2
 8108f78:	461a      	mov	r2, r3
 8108f7a:	4b09      	ldr	r3, [pc, #36]	@ (8108fa0 <__assert_func+0x2c>)
 8108f7c:	681b      	ldr	r3, [r3, #0]
 8108f7e:	4605      	mov	r5, r0
 8108f80:	68d8      	ldr	r0, [r3, #12]
 8108f82:	b954      	cbnz	r4, 8108f9a <__assert_func+0x26>
 8108f84:	4b07      	ldr	r3, [pc, #28]	@ (8108fa4 <__assert_func+0x30>)
 8108f86:	461c      	mov	r4, r3
 8108f88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8108f8c:	9100      	str	r1, [sp, #0]
 8108f8e:	462b      	mov	r3, r5
 8108f90:	4905      	ldr	r1, [pc, #20]	@ (8108fa8 <__assert_func+0x34>)
 8108f92:	f001 fe21 	bl	810abd8 <fiprintf>
 8108f96:	f001 fedf 	bl	810ad58 <abort>
 8108f9a:	4b04      	ldr	r3, [pc, #16]	@ (8108fac <__assert_func+0x38>)
 8108f9c:	e7f4      	b.n	8108f88 <__assert_func+0x14>
 8108f9e:	bf00      	nop
 8108fa0:	10000064 	.word	0x10000064
 8108fa4:	0810b41b 	.word	0x0810b41b
 8108fa8:	0810b3ed 	.word	0x0810b3ed
 8108fac:	0810b3e0 	.word	0x0810b3e0

08108fb0 <quorem>:
 8108fb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108fb4:	6903      	ldr	r3, [r0, #16]
 8108fb6:	690c      	ldr	r4, [r1, #16]
 8108fb8:	42a3      	cmp	r3, r4
 8108fba:	4607      	mov	r7, r0
 8108fbc:	db7e      	blt.n	81090bc <quorem+0x10c>
 8108fbe:	3c01      	subs	r4, #1
 8108fc0:	f101 0814 	add.w	r8, r1, #20
 8108fc4:	00a3      	lsls	r3, r4, #2
 8108fc6:	f100 0514 	add.w	r5, r0, #20
 8108fca:	9300      	str	r3, [sp, #0]
 8108fcc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8108fd0:	9301      	str	r3, [sp, #4]
 8108fd2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8108fd6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8108fda:	3301      	adds	r3, #1
 8108fdc:	429a      	cmp	r2, r3
 8108fde:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8108fe2:	fbb2 f6f3 	udiv	r6, r2, r3
 8108fe6:	d32e      	bcc.n	8109046 <quorem+0x96>
 8108fe8:	f04f 0a00 	mov.w	sl, #0
 8108fec:	46c4      	mov	ip, r8
 8108fee:	46ae      	mov	lr, r5
 8108ff0:	46d3      	mov	fp, sl
 8108ff2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8108ff6:	b298      	uxth	r0, r3
 8108ff8:	fb06 a000 	mla	r0, r6, r0, sl
 8108ffc:	0c02      	lsrs	r2, r0, #16
 8108ffe:	0c1b      	lsrs	r3, r3, #16
 8109000:	fb06 2303 	mla	r3, r6, r3, r2
 8109004:	f8de 2000 	ldr.w	r2, [lr]
 8109008:	b280      	uxth	r0, r0
 810900a:	b292      	uxth	r2, r2
 810900c:	1a12      	subs	r2, r2, r0
 810900e:	445a      	add	r2, fp
 8109010:	f8de 0000 	ldr.w	r0, [lr]
 8109014:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8109018:	b29b      	uxth	r3, r3
 810901a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 810901e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8109022:	b292      	uxth	r2, r2
 8109024:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8109028:	45e1      	cmp	r9, ip
 810902a:	f84e 2b04 	str.w	r2, [lr], #4
 810902e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8109032:	d2de      	bcs.n	8108ff2 <quorem+0x42>
 8109034:	9b00      	ldr	r3, [sp, #0]
 8109036:	58eb      	ldr	r3, [r5, r3]
 8109038:	b92b      	cbnz	r3, 8109046 <quorem+0x96>
 810903a:	9b01      	ldr	r3, [sp, #4]
 810903c:	3b04      	subs	r3, #4
 810903e:	429d      	cmp	r5, r3
 8109040:	461a      	mov	r2, r3
 8109042:	d32f      	bcc.n	81090a4 <quorem+0xf4>
 8109044:	613c      	str	r4, [r7, #16]
 8109046:	4638      	mov	r0, r7
 8109048:	f001 f978 	bl	810a33c <__mcmp>
 810904c:	2800      	cmp	r0, #0
 810904e:	db25      	blt.n	810909c <quorem+0xec>
 8109050:	4629      	mov	r1, r5
 8109052:	2000      	movs	r0, #0
 8109054:	f858 2b04 	ldr.w	r2, [r8], #4
 8109058:	f8d1 c000 	ldr.w	ip, [r1]
 810905c:	fa1f fe82 	uxth.w	lr, r2
 8109060:	fa1f f38c 	uxth.w	r3, ip
 8109064:	eba3 030e 	sub.w	r3, r3, lr
 8109068:	4403      	add	r3, r0
 810906a:	0c12      	lsrs	r2, r2, #16
 810906c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8109070:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8109074:	b29b      	uxth	r3, r3
 8109076:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810907a:	45c1      	cmp	r9, r8
 810907c:	f841 3b04 	str.w	r3, [r1], #4
 8109080:	ea4f 4022 	mov.w	r0, r2, asr #16
 8109084:	d2e6      	bcs.n	8109054 <quorem+0xa4>
 8109086:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810908a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810908e:	b922      	cbnz	r2, 810909a <quorem+0xea>
 8109090:	3b04      	subs	r3, #4
 8109092:	429d      	cmp	r5, r3
 8109094:	461a      	mov	r2, r3
 8109096:	d30b      	bcc.n	81090b0 <quorem+0x100>
 8109098:	613c      	str	r4, [r7, #16]
 810909a:	3601      	adds	r6, #1
 810909c:	4630      	mov	r0, r6
 810909e:	b003      	add	sp, #12
 81090a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81090a4:	6812      	ldr	r2, [r2, #0]
 81090a6:	3b04      	subs	r3, #4
 81090a8:	2a00      	cmp	r2, #0
 81090aa:	d1cb      	bne.n	8109044 <quorem+0x94>
 81090ac:	3c01      	subs	r4, #1
 81090ae:	e7c6      	b.n	810903e <quorem+0x8e>
 81090b0:	6812      	ldr	r2, [r2, #0]
 81090b2:	3b04      	subs	r3, #4
 81090b4:	2a00      	cmp	r2, #0
 81090b6:	d1ef      	bne.n	8109098 <quorem+0xe8>
 81090b8:	3c01      	subs	r4, #1
 81090ba:	e7ea      	b.n	8109092 <quorem+0xe2>
 81090bc:	2000      	movs	r0, #0
 81090be:	e7ee      	b.n	810909e <quorem+0xee>

081090c0 <_dtoa_r>:
 81090c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81090c4:	69c7      	ldr	r7, [r0, #28]
 81090c6:	b099      	sub	sp, #100	@ 0x64
 81090c8:	ed8d 0b02 	vstr	d0, [sp, #8]
 81090cc:	ec55 4b10 	vmov	r4, r5, d0
 81090d0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 81090d2:	9109      	str	r1, [sp, #36]	@ 0x24
 81090d4:	4683      	mov	fp, r0
 81090d6:	920e      	str	r2, [sp, #56]	@ 0x38
 81090d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 81090da:	b97f      	cbnz	r7, 81090fc <_dtoa_r+0x3c>
 81090dc:	2010      	movs	r0, #16
 81090de:	f000 fdfd 	bl	8109cdc <malloc>
 81090e2:	4602      	mov	r2, r0
 81090e4:	f8cb 001c 	str.w	r0, [fp, #28]
 81090e8:	b920      	cbnz	r0, 81090f4 <_dtoa_r+0x34>
 81090ea:	4ba7      	ldr	r3, [pc, #668]	@ (8109388 <_dtoa_r+0x2c8>)
 81090ec:	21ef      	movs	r1, #239	@ 0xef
 81090ee:	48a7      	ldr	r0, [pc, #668]	@ (810938c <_dtoa_r+0x2cc>)
 81090f0:	f7ff ff40 	bl	8108f74 <__assert_func>
 81090f4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 81090f8:	6007      	str	r7, [r0, #0]
 81090fa:	60c7      	str	r7, [r0, #12]
 81090fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8109100:	6819      	ldr	r1, [r3, #0]
 8109102:	b159      	cbz	r1, 810911c <_dtoa_r+0x5c>
 8109104:	685a      	ldr	r2, [r3, #4]
 8109106:	604a      	str	r2, [r1, #4]
 8109108:	2301      	movs	r3, #1
 810910a:	4093      	lsls	r3, r2
 810910c:	608b      	str	r3, [r1, #8]
 810910e:	4658      	mov	r0, fp
 8109110:	f000 feda 	bl	8109ec8 <_Bfree>
 8109114:	f8db 301c 	ldr.w	r3, [fp, #28]
 8109118:	2200      	movs	r2, #0
 810911a:	601a      	str	r2, [r3, #0]
 810911c:	1e2b      	subs	r3, r5, #0
 810911e:	bfb9      	ittee	lt
 8109120:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8109124:	9303      	strlt	r3, [sp, #12]
 8109126:	2300      	movge	r3, #0
 8109128:	6033      	strge	r3, [r6, #0]
 810912a:	9f03      	ldr	r7, [sp, #12]
 810912c:	4b98      	ldr	r3, [pc, #608]	@ (8109390 <_dtoa_r+0x2d0>)
 810912e:	bfbc      	itt	lt
 8109130:	2201      	movlt	r2, #1
 8109132:	6032      	strlt	r2, [r6, #0]
 8109134:	43bb      	bics	r3, r7
 8109136:	d112      	bne.n	810915e <_dtoa_r+0x9e>
 8109138:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 810913a:	f242 730f 	movw	r3, #9999	@ 0x270f
 810913e:	6013      	str	r3, [r2, #0]
 8109140:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8109144:	4323      	orrs	r3, r4
 8109146:	f000 854d 	beq.w	8109be4 <_dtoa_r+0xb24>
 810914a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 810914c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 81093a4 <_dtoa_r+0x2e4>
 8109150:	2b00      	cmp	r3, #0
 8109152:	f000 854f 	beq.w	8109bf4 <_dtoa_r+0xb34>
 8109156:	f10a 0303 	add.w	r3, sl, #3
 810915a:	f000 bd49 	b.w	8109bf0 <_dtoa_r+0xb30>
 810915e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8109162:	2200      	movs	r2, #0
 8109164:	ec51 0b17 	vmov	r0, r1, d7
 8109168:	2300      	movs	r3, #0
 810916a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 810916e:	f7f7 fd43 	bl	8100bf8 <__aeabi_dcmpeq>
 8109172:	4680      	mov	r8, r0
 8109174:	b158      	cbz	r0, 810918e <_dtoa_r+0xce>
 8109176:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8109178:	2301      	movs	r3, #1
 810917a:	6013      	str	r3, [r2, #0]
 810917c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 810917e:	b113      	cbz	r3, 8109186 <_dtoa_r+0xc6>
 8109180:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8109182:	4b84      	ldr	r3, [pc, #528]	@ (8109394 <_dtoa_r+0x2d4>)
 8109184:	6013      	str	r3, [r2, #0]
 8109186:	f8df a220 	ldr.w	sl, [pc, #544]	@ 81093a8 <_dtoa_r+0x2e8>
 810918a:	f000 bd33 	b.w	8109bf4 <_dtoa_r+0xb34>
 810918e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8109192:	aa16      	add	r2, sp, #88	@ 0x58
 8109194:	a917      	add	r1, sp, #92	@ 0x5c
 8109196:	4658      	mov	r0, fp
 8109198:	f001 f980 	bl	810a49c <__d2b>
 810919c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 81091a0:	4681      	mov	r9, r0
 81091a2:	2e00      	cmp	r6, #0
 81091a4:	d077      	beq.n	8109296 <_dtoa_r+0x1d6>
 81091a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 81091a8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 81091ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81091b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 81091b4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 81091b8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 81091bc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 81091c0:	4619      	mov	r1, r3
 81091c2:	2200      	movs	r2, #0
 81091c4:	4b74      	ldr	r3, [pc, #464]	@ (8109398 <_dtoa_r+0x2d8>)
 81091c6:	f7f7 f8f7 	bl	81003b8 <__aeabi_dsub>
 81091ca:	a369      	add	r3, pc, #420	@ (adr r3, 8109370 <_dtoa_r+0x2b0>)
 81091cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81091d0:	f7f7 faaa 	bl	8100728 <__aeabi_dmul>
 81091d4:	a368      	add	r3, pc, #416	@ (adr r3, 8109378 <_dtoa_r+0x2b8>)
 81091d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81091da:	f7f7 f8ef 	bl	81003bc <__adddf3>
 81091de:	4604      	mov	r4, r0
 81091e0:	4630      	mov	r0, r6
 81091e2:	460d      	mov	r5, r1
 81091e4:	f7f7 fa36 	bl	8100654 <__aeabi_i2d>
 81091e8:	a365      	add	r3, pc, #404	@ (adr r3, 8109380 <_dtoa_r+0x2c0>)
 81091ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 81091ee:	f7f7 fa9b 	bl	8100728 <__aeabi_dmul>
 81091f2:	4602      	mov	r2, r0
 81091f4:	460b      	mov	r3, r1
 81091f6:	4620      	mov	r0, r4
 81091f8:	4629      	mov	r1, r5
 81091fa:	f7f7 f8df 	bl	81003bc <__adddf3>
 81091fe:	4604      	mov	r4, r0
 8109200:	460d      	mov	r5, r1
 8109202:	f7f7 fd41 	bl	8100c88 <__aeabi_d2iz>
 8109206:	2200      	movs	r2, #0
 8109208:	4607      	mov	r7, r0
 810920a:	2300      	movs	r3, #0
 810920c:	4620      	mov	r0, r4
 810920e:	4629      	mov	r1, r5
 8109210:	f7f7 fcfc 	bl	8100c0c <__aeabi_dcmplt>
 8109214:	b140      	cbz	r0, 8109228 <_dtoa_r+0x168>
 8109216:	4638      	mov	r0, r7
 8109218:	f7f7 fa1c 	bl	8100654 <__aeabi_i2d>
 810921c:	4622      	mov	r2, r4
 810921e:	462b      	mov	r3, r5
 8109220:	f7f7 fcea 	bl	8100bf8 <__aeabi_dcmpeq>
 8109224:	b900      	cbnz	r0, 8109228 <_dtoa_r+0x168>
 8109226:	3f01      	subs	r7, #1
 8109228:	2f16      	cmp	r7, #22
 810922a:	d851      	bhi.n	81092d0 <_dtoa_r+0x210>
 810922c:	4b5b      	ldr	r3, [pc, #364]	@ (810939c <_dtoa_r+0x2dc>)
 810922e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8109232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109236:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810923a:	f7f7 fce7 	bl	8100c0c <__aeabi_dcmplt>
 810923e:	2800      	cmp	r0, #0
 8109240:	d048      	beq.n	81092d4 <_dtoa_r+0x214>
 8109242:	3f01      	subs	r7, #1
 8109244:	2300      	movs	r3, #0
 8109246:	9312      	str	r3, [sp, #72]	@ 0x48
 8109248:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 810924a:	1b9b      	subs	r3, r3, r6
 810924c:	1e5a      	subs	r2, r3, #1
 810924e:	bf44      	itt	mi
 8109250:	f1c3 0801 	rsbmi	r8, r3, #1
 8109254:	2300      	movmi	r3, #0
 8109256:	9208      	str	r2, [sp, #32]
 8109258:	bf54      	ite	pl
 810925a:	f04f 0800 	movpl.w	r8, #0
 810925e:	9308      	strmi	r3, [sp, #32]
 8109260:	2f00      	cmp	r7, #0
 8109262:	db39      	blt.n	81092d8 <_dtoa_r+0x218>
 8109264:	9b08      	ldr	r3, [sp, #32]
 8109266:	970f      	str	r7, [sp, #60]	@ 0x3c
 8109268:	443b      	add	r3, r7
 810926a:	9308      	str	r3, [sp, #32]
 810926c:	2300      	movs	r3, #0
 810926e:	930a      	str	r3, [sp, #40]	@ 0x28
 8109270:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8109272:	2b09      	cmp	r3, #9
 8109274:	d864      	bhi.n	8109340 <_dtoa_r+0x280>
 8109276:	2b05      	cmp	r3, #5
 8109278:	bfc4      	itt	gt
 810927a:	3b04      	subgt	r3, #4
 810927c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 810927e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8109280:	f1a3 0302 	sub.w	r3, r3, #2
 8109284:	bfcc      	ite	gt
 8109286:	2400      	movgt	r4, #0
 8109288:	2401      	movle	r4, #1
 810928a:	2b03      	cmp	r3, #3
 810928c:	d863      	bhi.n	8109356 <_dtoa_r+0x296>
 810928e:	e8df f003 	tbb	[pc, r3]
 8109292:	372a      	.short	0x372a
 8109294:	5535      	.short	0x5535
 8109296:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 810929a:	441e      	add	r6, r3
 810929c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 81092a0:	2b20      	cmp	r3, #32
 81092a2:	bfc1      	itttt	gt
 81092a4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 81092a8:	409f      	lslgt	r7, r3
 81092aa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 81092ae:	fa24 f303 	lsrgt.w	r3, r4, r3
 81092b2:	bfd6      	itet	le
 81092b4:	f1c3 0320 	rsble	r3, r3, #32
 81092b8:	ea47 0003 	orrgt.w	r0, r7, r3
 81092bc:	fa04 f003 	lslle.w	r0, r4, r3
 81092c0:	f7f7 f9b8 	bl	8100634 <__aeabi_ui2d>
 81092c4:	2201      	movs	r2, #1
 81092c6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 81092ca:	3e01      	subs	r6, #1
 81092cc:	9214      	str	r2, [sp, #80]	@ 0x50
 81092ce:	e777      	b.n	81091c0 <_dtoa_r+0x100>
 81092d0:	2301      	movs	r3, #1
 81092d2:	e7b8      	b.n	8109246 <_dtoa_r+0x186>
 81092d4:	9012      	str	r0, [sp, #72]	@ 0x48
 81092d6:	e7b7      	b.n	8109248 <_dtoa_r+0x188>
 81092d8:	427b      	negs	r3, r7
 81092da:	930a      	str	r3, [sp, #40]	@ 0x28
 81092dc:	2300      	movs	r3, #0
 81092de:	eba8 0807 	sub.w	r8, r8, r7
 81092e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 81092e4:	e7c4      	b.n	8109270 <_dtoa_r+0x1b0>
 81092e6:	2300      	movs	r3, #0
 81092e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 81092ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 81092ec:	2b00      	cmp	r3, #0
 81092ee:	dc35      	bgt.n	810935c <_dtoa_r+0x29c>
 81092f0:	2301      	movs	r3, #1
 81092f2:	9300      	str	r3, [sp, #0]
 81092f4:	9307      	str	r3, [sp, #28]
 81092f6:	461a      	mov	r2, r3
 81092f8:	920e      	str	r2, [sp, #56]	@ 0x38
 81092fa:	e00b      	b.n	8109314 <_dtoa_r+0x254>
 81092fc:	2301      	movs	r3, #1
 81092fe:	e7f3      	b.n	81092e8 <_dtoa_r+0x228>
 8109300:	2300      	movs	r3, #0
 8109302:	930b      	str	r3, [sp, #44]	@ 0x2c
 8109304:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8109306:	18fb      	adds	r3, r7, r3
 8109308:	9300      	str	r3, [sp, #0]
 810930a:	3301      	adds	r3, #1
 810930c:	2b01      	cmp	r3, #1
 810930e:	9307      	str	r3, [sp, #28]
 8109310:	bfb8      	it	lt
 8109312:	2301      	movlt	r3, #1
 8109314:	f8db 001c 	ldr.w	r0, [fp, #28]
 8109318:	2100      	movs	r1, #0
 810931a:	2204      	movs	r2, #4
 810931c:	f102 0514 	add.w	r5, r2, #20
 8109320:	429d      	cmp	r5, r3
 8109322:	d91f      	bls.n	8109364 <_dtoa_r+0x2a4>
 8109324:	6041      	str	r1, [r0, #4]
 8109326:	4658      	mov	r0, fp
 8109328:	f000 fd8e 	bl	8109e48 <_Balloc>
 810932c:	4682      	mov	sl, r0
 810932e:	2800      	cmp	r0, #0
 8109330:	d13c      	bne.n	81093ac <_dtoa_r+0x2ec>
 8109332:	4b1b      	ldr	r3, [pc, #108]	@ (81093a0 <_dtoa_r+0x2e0>)
 8109334:	4602      	mov	r2, r0
 8109336:	f240 11af 	movw	r1, #431	@ 0x1af
 810933a:	e6d8      	b.n	81090ee <_dtoa_r+0x2e>
 810933c:	2301      	movs	r3, #1
 810933e:	e7e0      	b.n	8109302 <_dtoa_r+0x242>
 8109340:	2401      	movs	r4, #1
 8109342:	2300      	movs	r3, #0
 8109344:	9309      	str	r3, [sp, #36]	@ 0x24
 8109346:	940b      	str	r4, [sp, #44]	@ 0x2c
 8109348:	f04f 33ff 	mov.w	r3, #4294967295
 810934c:	9300      	str	r3, [sp, #0]
 810934e:	9307      	str	r3, [sp, #28]
 8109350:	2200      	movs	r2, #0
 8109352:	2312      	movs	r3, #18
 8109354:	e7d0      	b.n	81092f8 <_dtoa_r+0x238>
 8109356:	2301      	movs	r3, #1
 8109358:	930b      	str	r3, [sp, #44]	@ 0x2c
 810935a:	e7f5      	b.n	8109348 <_dtoa_r+0x288>
 810935c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810935e:	9300      	str	r3, [sp, #0]
 8109360:	9307      	str	r3, [sp, #28]
 8109362:	e7d7      	b.n	8109314 <_dtoa_r+0x254>
 8109364:	3101      	adds	r1, #1
 8109366:	0052      	lsls	r2, r2, #1
 8109368:	e7d8      	b.n	810931c <_dtoa_r+0x25c>
 810936a:	bf00      	nop
 810936c:	f3af 8000 	nop.w
 8109370:	636f4361 	.word	0x636f4361
 8109374:	3fd287a7 	.word	0x3fd287a7
 8109378:	8b60c8b3 	.word	0x8b60c8b3
 810937c:	3fc68a28 	.word	0x3fc68a28
 8109380:	509f79fb 	.word	0x509f79fb
 8109384:	3fd34413 	.word	0x3fd34413
 8109388:	0810b23c 	.word	0x0810b23c
 810938c:	0810b429 	.word	0x0810b429
 8109390:	7ff00000 	.word	0x7ff00000
 8109394:	0810b3bd 	.word	0x0810b3bd
 8109398:	3ff80000 	.word	0x3ff80000
 810939c:	0810b520 	.word	0x0810b520
 81093a0:	0810b481 	.word	0x0810b481
 81093a4:	0810b425 	.word	0x0810b425
 81093a8:	0810b3bc 	.word	0x0810b3bc
 81093ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 81093b0:	6018      	str	r0, [r3, #0]
 81093b2:	9b07      	ldr	r3, [sp, #28]
 81093b4:	2b0e      	cmp	r3, #14
 81093b6:	f200 80a4 	bhi.w	8109502 <_dtoa_r+0x442>
 81093ba:	2c00      	cmp	r4, #0
 81093bc:	f000 80a1 	beq.w	8109502 <_dtoa_r+0x442>
 81093c0:	2f00      	cmp	r7, #0
 81093c2:	dd33      	ble.n	810942c <_dtoa_r+0x36c>
 81093c4:	4bad      	ldr	r3, [pc, #692]	@ (810967c <_dtoa_r+0x5bc>)
 81093c6:	f007 020f 	and.w	r2, r7, #15
 81093ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 81093ce:	ed93 7b00 	vldr	d7, [r3]
 81093d2:	05f8      	lsls	r0, r7, #23
 81093d4:	ed8d 7b04 	vstr	d7, [sp, #16]
 81093d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 81093dc:	d516      	bpl.n	810940c <_dtoa_r+0x34c>
 81093de:	4ba8      	ldr	r3, [pc, #672]	@ (8109680 <_dtoa_r+0x5c0>)
 81093e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 81093e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 81093e8:	f7f7 fac8 	bl	810097c <__aeabi_ddiv>
 81093ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 81093f0:	f004 040f 	and.w	r4, r4, #15
 81093f4:	2603      	movs	r6, #3
 81093f6:	4da2      	ldr	r5, [pc, #648]	@ (8109680 <_dtoa_r+0x5c0>)
 81093f8:	b954      	cbnz	r4, 8109410 <_dtoa_r+0x350>
 81093fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 81093fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8109402:	f7f7 fabb 	bl	810097c <__aeabi_ddiv>
 8109406:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810940a:	e028      	b.n	810945e <_dtoa_r+0x39e>
 810940c:	2602      	movs	r6, #2
 810940e:	e7f2      	b.n	81093f6 <_dtoa_r+0x336>
 8109410:	07e1      	lsls	r1, r4, #31
 8109412:	d508      	bpl.n	8109426 <_dtoa_r+0x366>
 8109414:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8109418:	e9d5 2300 	ldrd	r2, r3, [r5]
 810941c:	f7f7 f984 	bl	8100728 <__aeabi_dmul>
 8109420:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8109424:	3601      	adds	r6, #1
 8109426:	1064      	asrs	r4, r4, #1
 8109428:	3508      	adds	r5, #8
 810942a:	e7e5      	b.n	81093f8 <_dtoa_r+0x338>
 810942c:	f000 80d2 	beq.w	81095d4 <_dtoa_r+0x514>
 8109430:	427c      	negs	r4, r7
 8109432:	4b92      	ldr	r3, [pc, #584]	@ (810967c <_dtoa_r+0x5bc>)
 8109434:	4d92      	ldr	r5, [pc, #584]	@ (8109680 <_dtoa_r+0x5c0>)
 8109436:	f004 020f 	and.w	r2, r4, #15
 810943a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810943e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109442:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8109446:	f7f7 f96f 	bl	8100728 <__aeabi_dmul>
 810944a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810944e:	1124      	asrs	r4, r4, #4
 8109450:	2300      	movs	r3, #0
 8109452:	2602      	movs	r6, #2
 8109454:	2c00      	cmp	r4, #0
 8109456:	f040 80b2 	bne.w	81095be <_dtoa_r+0x4fe>
 810945a:	2b00      	cmp	r3, #0
 810945c:	d1d3      	bne.n	8109406 <_dtoa_r+0x346>
 810945e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8109460:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8109464:	2b00      	cmp	r3, #0
 8109466:	f000 80b7 	beq.w	81095d8 <_dtoa_r+0x518>
 810946a:	4b86      	ldr	r3, [pc, #536]	@ (8109684 <_dtoa_r+0x5c4>)
 810946c:	2200      	movs	r2, #0
 810946e:	4620      	mov	r0, r4
 8109470:	4629      	mov	r1, r5
 8109472:	f7f7 fbcb 	bl	8100c0c <__aeabi_dcmplt>
 8109476:	2800      	cmp	r0, #0
 8109478:	f000 80ae 	beq.w	81095d8 <_dtoa_r+0x518>
 810947c:	9b07      	ldr	r3, [sp, #28]
 810947e:	2b00      	cmp	r3, #0
 8109480:	f000 80aa 	beq.w	81095d8 <_dtoa_r+0x518>
 8109484:	9b00      	ldr	r3, [sp, #0]
 8109486:	2b00      	cmp	r3, #0
 8109488:	dd37      	ble.n	81094fa <_dtoa_r+0x43a>
 810948a:	1e7b      	subs	r3, r7, #1
 810948c:	9304      	str	r3, [sp, #16]
 810948e:	4620      	mov	r0, r4
 8109490:	4b7d      	ldr	r3, [pc, #500]	@ (8109688 <_dtoa_r+0x5c8>)
 8109492:	2200      	movs	r2, #0
 8109494:	4629      	mov	r1, r5
 8109496:	f7f7 f947 	bl	8100728 <__aeabi_dmul>
 810949a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810949e:	9c00      	ldr	r4, [sp, #0]
 81094a0:	3601      	adds	r6, #1
 81094a2:	4630      	mov	r0, r6
 81094a4:	f7f7 f8d6 	bl	8100654 <__aeabi_i2d>
 81094a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 81094ac:	f7f7 f93c 	bl	8100728 <__aeabi_dmul>
 81094b0:	4b76      	ldr	r3, [pc, #472]	@ (810968c <_dtoa_r+0x5cc>)
 81094b2:	2200      	movs	r2, #0
 81094b4:	f7f6 ff82 	bl	81003bc <__adddf3>
 81094b8:	4605      	mov	r5, r0
 81094ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 81094be:	2c00      	cmp	r4, #0
 81094c0:	f040 808d 	bne.w	81095de <_dtoa_r+0x51e>
 81094c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 81094c8:	4b71      	ldr	r3, [pc, #452]	@ (8109690 <_dtoa_r+0x5d0>)
 81094ca:	2200      	movs	r2, #0
 81094cc:	f7f6 ff74 	bl	81003b8 <__aeabi_dsub>
 81094d0:	4602      	mov	r2, r0
 81094d2:	460b      	mov	r3, r1
 81094d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 81094d8:	462a      	mov	r2, r5
 81094da:	4633      	mov	r3, r6
 81094dc:	f7f7 fbb4 	bl	8100c48 <__aeabi_dcmpgt>
 81094e0:	2800      	cmp	r0, #0
 81094e2:	f040 828b 	bne.w	81099fc <_dtoa_r+0x93c>
 81094e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 81094ea:	462a      	mov	r2, r5
 81094ec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 81094f0:	f7f7 fb8c 	bl	8100c0c <__aeabi_dcmplt>
 81094f4:	2800      	cmp	r0, #0
 81094f6:	f040 8128 	bne.w	810974a <_dtoa_r+0x68a>
 81094fa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 81094fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8109502:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8109504:	2b00      	cmp	r3, #0
 8109506:	f2c0 815a 	blt.w	81097be <_dtoa_r+0x6fe>
 810950a:	2f0e      	cmp	r7, #14
 810950c:	f300 8157 	bgt.w	81097be <_dtoa_r+0x6fe>
 8109510:	4b5a      	ldr	r3, [pc, #360]	@ (810967c <_dtoa_r+0x5bc>)
 8109512:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8109516:	ed93 7b00 	vldr	d7, [r3]
 810951a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810951c:	2b00      	cmp	r3, #0
 810951e:	ed8d 7b00 	vstr	d7, [sp]
 8109522:	da03      	bge.n	810952c <_dtoa_r+0x46c>
 8109524:	9b07      	ldr	r3, [sp, #28]
 8109526:	2b00      	cmp	r3, #0
 8109528:	f340 8101 	ble.w	810972e <_dtoa_r+0x66e>
 810952c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8109530:	4656      	mov	r6, sl
 8109532:	e9dd 2300 	ldrd	r2, r3, [sp]
 8109536:	4620      	mov	r0, r4
 8109538:	4629      	mov	r1, r5
 810953a:	f7f7 fa1f 	bl	810097c <__aeabi_ddiv>
 810953e:	f7f7 fba3 	bl	8100c88 <__aeabi_d2iz>
 8109542:	4680      	mov	r8, r0
 8109544:	f7f7 f886 	bl	8100654 <__aeabi_i2d>
 8109548:	e9dd 2300 	ldrd	r2, r3, [sp]
 810954c:	f7f7 f8ec 	bl	8100728 <__aeabi_dmul>
 8109550:	4602      	mov	r2, r0
 8109552:	460b      	mov	r3, r1
 8109554:	4620      	mov	r0, r4
 8109556:	4629      	mov	r1, r5
 8109558:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 810955c:	f7f6 ff2c 	bl	81003b8 <__aeabi_dsub>
 8109560:	f806 4b01 	strb.w	r4, [r6], #1
 8109564:	9d07      	ldr	r5, [sp, #28]
 8109566:	eba6 040a 	sub.w	r4, r6, sl
 810956a:	42a5      	cmp	r5, r4
 810956c:	4602      	mov	r2, r0
 810956e:	460b      	mov	r3, r1
 8109570:	f040 8117 	bne.w	81097a2 <_dtoa_r+0x6e2>
 8109574:	f7f6 ff22 	bl	81003bc <__adddf3>
 8109578:	e9dd 2300 	ldrd	r2, r3, [sp]
 810957c:	4604      	mov	r4, r0
 810957e:	460d      	mov	r5, r1
 8109580:	f7f7 fb62 	bl	8100c48 <__aeabi_dcmpgt>
 8109584:	2800      	cmp	r0, #0
 8109586:	f040 80f9 	bne.w	810977c <_dtoa_r+0x6bc>
 810958a:	e9dd 2300 	ldrd	r2, r3, [sp]
 810958e:	4620      	mov	r0, r4
 8109590:	4629      	mov	r1, r5
 8109592:	f7f7 fb31 	bl	8100bf8 <__aeabi_dcmpeq>
 8109596:	b118      	cbz	r0, 81095a0 <_dtoa_r+0x4e0>
 8109598:	f018 0f01 	tst.w	r8, #1
 810959c:	f040 80ee 	bne.w	810977c <_dtoa_r+0x6bc>
 81095a0:	4649      	mov	r1, r9
 81095a2:	4658      	mov	r0, fp
 81095a4:	f000 fc90 	bl	8109ec8 <_Bfree>
 81095a8:	2300      	movs	r3, #0
 81095aa:	7033      	strb	r3, [r6, #0]
 81095ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 81095ae:	3701      	adds	r7, #1
 81095b0:	601f      	str	r7, [r3, #0]
 81095b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 81095b4:	2b00      	cmp	r3, #0
 81095b6:	f000 831d 	beq.w	8109bf4 <_dtoa_r+0xb34>
 81095ba:	601e      	str	r6, [r3, #0]
 81095bc:	e31a      	b.n	8109bf4 <_dtoa_r+0xb34>
 81095be:	07e2      	lsls	r2, r4, #31
 81095c0:	d505      	bpl.n	81095ce <_dtoa_r+0x50e>
 81095c2:	e9d5 2300 	ldrd	r2, r3, [r5]
 81095c6:	f7f7 f8af 	bl	8100728 <__aeabi_dmul>
 81095ca:	3601      	adds	r6, #1
 81095cc:	2301      	movs	r3, #1
 81095ce:	1064      	asrs	r4, r4, #1
 81095d0:	3508      	adds	r5, #8
 81095d2:	e73f      	b.n	8109454 <_dtoa_r+0x394>
 81095d4:	2602      	movs	r6, #2
 81095d6:	e742      	b.n	810945e <_dtoa_r+0x39e>
 81095d8:	9c07      	ldr	r4, [sp, #28]
 81095da:	9704      	str	r7, [sp, #16]
 81095dc:	e761      	b.n	81094a2 <_dtoa_r+0x3e2>
 81095de:	4b27      	ldr	r3, [pc, #156]	@ (810967c <_dtoa_r+0x5bc>)
 81095e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 81095e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 81095e6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 81095ea:	4454      	add	r4, sl
 81095ec:	2900      	cmp	r1, #0
 81095ee:	d053      	beq.n	8109698 <_dtoa_r+0x5d8>
 81095f0:	4928      	ldr	r1, [pc, #160]	@ (8109694 <_dtoa_r+0x5d4>)
 81095f2:	2000      	movs	r0, #0
 81095f4:	f7f7 f9c2 	bl	810097c <__aeabi_ddiv>
 81095f8:	4633      	mov	r3, r6
 81095fa:	462a      	mov	r2, r5
 81095fc:	f7f6 fedc 	bl	81003b8 <__aeabi_dsub>
 8109600:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8109604:	4656      	mov	r6, sl
 8109606:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810960a:	f7f7 fb3d 	bl	8100c88 <__aeabi_d2iz>
 810960e:	4605      	mov	r5, r0
 8109610:	f7f7 f820 	bl	8100654 <__aeabi_i2d>
 8109614:	4602      	mov	r2, r0
 8109616:	460b      	mov	r3, r1
 8109618:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810961c:	f7f6 fecc 	bl	81003b8 <__aeabi_dsub>
 8109620:	3530      	adds	r5, #48	@ 0x30
 8109622:	4602      	mov	r2, r0
 8109624:	460b      	mov	r3, r1
 8109626:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810962a:	f806 5b01 	strb.w	r5, [r6], #1
 810962e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8109632:	f7f7 faeb 	bl	8100c0c <__aeabi_dcmplt>
 8109636:	2800      	cmp	r0, #0
 8109638:	d171      	bne.n	810971e <_dtoa_r+0x65e>
 810963a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810963e:	4911      	ldr	r1, [pc, #68]	@ (8109684 <_dtoa_r+0x5c4>)
 8109640:	2000      	movs	r0, #0
 8109642:	f7f6 feb9 	bl	81003b8 <__aeabi_dsub>
 8109646:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 810964a:	f7f7 fadf 	bl	8100c0c <__aeabi_dcmplt>
 810964e:	2800      	cmp	r0, #0
 8109650:	f040 8095 	bne.w	810977e <_dtoa_r+0x6be>
 8109654:	42a6      	cmp	r6, r4
 8109656:	f43f af50 	beq.w	81094fa <_dtoa_r+0x43a>
 810965a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 810965e:	4b0a      	ldr	r3, [pc, #40]	@ (8109688 <_dtoa_r+0x5c8>)
 8109660:	2200      	movs	r2, #0
 8109662:	f7f7 f861 	bl	8100728 <__aeabi_dmul>
 8109666:	4b08      	ldr	r3, [pc, #32]	@ (8109688 <_dtoa_r+0x5c8>)
 8109668:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 810966c:	2200      	movs	r2, #0
 810966e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8109672:	f7f7 f859 	bl	8100728 <__aeabi_dmul>
 8109676:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810967a:	e7c4      	b.n	8109606 <_dtoa_r+0x546>
 810967c:	0810b520 	.word	0x0810b520
 8109680:	0810b4f8 	.word	0x0810b4f8
 8109684:	3ff00000 	.word	0x3ff00000
 8109688:	40240000 	.word	0x40240000
 810968c:	401c0000 	.word	0x401c0000
 8109690:	40140000 	.word	0x40140000
 8109694:	3fe00000 	.word	0x3fe00000
 8109698:	4631      	mov	r1, r6
 810969a:	4628      	mov	r0, r5
 810969c:	f7f7 f844 	bl	8100728 <__aeabi_dmul>
 81096a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 81096a4:	9415      	str	r4, [sp, #84]	@ 0x54
 81096a6:	4656      	mov	r6, sl
 81096a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 81096ac:	f7f7 faec 	bl	8100c88 <__aeabi_d2iz>
 81096b0:	4605      	mov	r5, r0
 81096b2:	f7f6 ffcf 	bl	8100654 <__aeabi_i2d>
 81096b6:	4602      	mov	r2, r0
 81096b8:	460b      	mov	r3, r1
 81096ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 81096be:	f7f6 fe7b 	bl	81003b8 <__aeabi_dsub>
 81096c2:	3530      	adds	r5, #48	@ 0x30
 81096c4:	f806 5b01 	strb.w	r5, [r6], #1
 81096c8:	4602      	mov	r2, r0
 81096ca:	460b      	mov	r3, r1
 81096cc:	42a6      	cmp	r6, r4
 81096ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 81096d2:	f04f 0200 	mov.w	r2, #0
 81096d6:	d124      	bne.n	8109722 <_dtoa_r+0x662>
 81096d8:	4bac      	ldr	r3, [pc, #688]	@ (810998c <_dtoa_r+0x8cc>)
 81096da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 81096de:	f7f6 fe6d 	bl	81003bc <__adddf3>
 81096e2:	4602      	mov	r2, r0
 81096e4:	460b      	mov	r3, r1
 81096e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 81096ea:	f7f7 faad 	bl	8100c48 <__aeabi_dcmpgt>
 81096ee:	2800      	cmp	r0, #0
 81096f0:	d145      	bne.n	810977e <_dtoa_r+0x6be>
 81096f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 81096f6:	49a5      	ldr	r1, [pc, #660]	@ (810998c <_dtoa_r+0x8cc>)
 81096f8:	2000      	movs	r0, #0
 81096fa:	f7f6 fe5d 	bl	81003b8 <__aeabi_dsub>
 81096fe:	4602      	mov	r2, r0
 8109700:	460b      	mov	r3, r1
 8109702:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8109706:	f7f7 fa81 	bl	8100c0c <__aeabi_dcmplt>
 810970a:	2800      	cmp	r0, #0
 810970c:	f43f aef5 	beq.w	81094fa <_dtoa_r+0x43a>
 8109710:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8109712:	1e73      	subs	r3, r6, #1
 8109714:	9315      	str	r3, [sp, #84]	@ 0x54
 8109716:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 810971a:	2b30      	cmp	r3, #48	@ 0x30
 810971c:	d0f8      	beq.n	8109710 <_dtoa_r+0x650>
 810971e:	9f04      	ldr	r7, [sp, #16]
 8109720:	e73e      	b.n	81095a0 <_dtoa_r+0x4e0>
 8109722:	4b9b      	ldr	r3, [pc, #620]	@ (8109990 <_dtoa_r+0x8d0>)
 8109724:	f7f7 f800 	bl	8100728 <__aeabi_dmul>
 8109728:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810972c:	e7bc      	b.n	81096a8 <_dtoa_r+0x5e8>
 810972e:	d10c      	bne.n	810974a <_dtoa_r+0x68a>
 8109730:	4b98      	ldr	r3, [pc, #608]	@ (8109994 <_dtoa_r+0x8d4>)
 8109732:	2200      	movs	r2, #0
 8109734:	e9dd 0100 	ldrd	r0, r1, [sp]
 8109738:	f7f6 fff6 	bl	8100728 <__aeabi_dmul>
 810973c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8109740:	f7f7 fa78 	bl	8100c34 <__aeabi_dcmpge>
 8109744:	2800      	cmp	r0, #0
 8109746:	f000 8157 	beq.w	81099f8 <_dtoa_r+0x938>
 810974a:	2400      	movs	r4, #0
 810974c:	4625      	mov	r5, r4
 810974e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8109750:	43db      	mvns	r3, r3
 8109752:	9304      	str	r3, [sp, #16]
 8109754:	4656      	mov	r6, sl
 8109756:	2700      	movs	r7, #0
 8109758:	4621      	mov	r1, r4
 810975a:	4658      	mov	r0, fp
 810975c:	f000 fbb4 	bl	8109ec8 <_Bfree>
 8109760:	2d00      	cmp	r5, #0
 8109762:	d0dc      	beq.n	810971e <_dtoa_r+0x65e>
 8109764:	b12f      	cbz	r7, 8109772 <_dtoa_r+0x6b2>
 8109766:	42af      	cmp	r7, r5
 8109768:	d003      	beq.n	8109772 <_dtoa_r+0x6b2>
 810976a:	4639      	mov	r1, r7
 810976c:	4658      	mov	r0, fp
 810976e:	f000 fbab 	bl	8109ec8 <_Bfree>
 8109772:	4629      	mov	r1, r5
 8109774:	4658      	mov	r0, fp
 8109776:	f000 fba7 	bl	8109ec8 <_Bfree>
 810977a:	e7d0      	b.n	810971e <_dtoa_r+0x65e>
 810977c:	9704      	str	r7, [sp, #16]
 810977e:	4633      	mov	r3, r6
 8109780:	461e      	mov	r6, r3
 8109782:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8109786:	2a39      	cmp	r2, #57	@ 0x39
 8109788:	d107      	bne.n	810979a <_dtoa_r+0x6da>
 810978a:	459a      	cmp	sl, r3
 810978c:	d1f8      	bne.n	8109780 <_dtoa_r+0x6c0>
 810978e:	9a04      	ldr	r2, [sp, #16]
 8109790:	3201      	adds	r2, #1
 8109792:	9204      	str	r2, [sp, #16]
 8109794:	2230      	movs	r2, #48	@ 0x30
 8109796:	f88a 2000 	strb.w	r2, [sl]
 810979a:	781a      	ldrb	r2, [r3, #0]
 810979c:	3201      	adds	r2, #1
 810979e:	701a      	strb	r2, [r3, #0]
 81097a0:	e7bd      	b.n	810971e <_dtoa_r+0x65e>
 81097a2:	4b7b      	ldr	r3, [pc, #492]	@ (8109990 <_dtoa_r+0x8d0>)
 81097a4:	2200      	movs	r2, #0
 81097a6:	f7f6 ffbf 	bl	8100728 <__aeabi_dmul>
 81097aa:	2200      	movs	r2, #0
 81097ac:	2300      	movs	r3, #0
 81097ae:	4604      	mov	r4, r0
 81097b0:	460d      	mov	r5, r1
 81097b2:	f7f7 fa21 	bl	8100bf8 <__aeabi_dcmpeq>
 81097b6:	2800      	cmp	r0, #0
 81097b8:	f43f aebb 	beq.w	8109532 <_dtoa_r+0x472>
 81097bc:	e6f0      	b.n	81095a0 <_dtoa_r+0x4e0>
 81097be:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 81097c0:	2a00      	cmp	r2, #0
 81097c2:	f000 80db 	beq.w	810997c <_dtoa_r+0x8bc>
 81097c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 81097c8:	2a01      	cmp	r2, #1
 81097ca:	f300 80bf 	bgt.w	810994c <_dtoa_r+0x88c>
 81097ce:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 81097d0:	2a00      	cmp	r2, #0
 81097d2:	f000 80b7 	beq.w	8109944 <_dtoa_r+0x884>
 81097d6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 81097da:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 81097dc:	4646      	mov	r6, r8
 81097de:	9a08      	ldr	r2, [sp, #32]
 81097e0:	2101      	movs	r1, #1
 81097e2:	441a      	add	r2, r3
 81097e4:	4658      	mov	r0, fp
 81097e6:	4498      	add	r8, r3
 81097e8:	9208      	str	r2, [sp, #32]
 81097ea:	f000 fc21 	bl	810a030 <__i2b>
 81097ee:	4605      	mov	r5, r0
 81097f0:	b15e      	cbz	r6, 810980a <_dtoa_r+0x74a>
 81097f2:	9b08      	ldr	r3, [sp, #32]
 81097f4:	2b00      	cmp	r3, #0
 81097f6:	dd08      	ble.n	810980a <_dtoa_r+0x74a>
 81097f8:	42b3      	cmp	r3, r6
 81097fa:	9a08      	ldr	r2, [sp, #32]
 81097fc:	bfa8      	it	ge
 81097fe:	4633      	movge	r3, r6
 8109800:	eba8 0803 	sub.w	r8, r8, r3
 8109804:	1af6      	subs	r6, r6, r3
 8109806:	1ad3      	subs	r3, r2, r3
 8109808:	9308      	str	r3, [sp, #32]
 810980a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810980c:	b1f3      	cbz	r3, 810984c <_dtoa_r+0x78c>
 810980e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8109810:	2b00      	cmp	r3, #0
 8109812:	f000 80b7 	beq.w	8109984 <_dtoa_r+0x8c4>
 8109816:	b18c      	cbz	r4, 810983c <_dtoa_r+0x77c>
 8109818:	4629      	mov	r1, r5
 810981a:	4622      	mov	r2, r4
 810981c:	4658      	mov	r0, fp
 810981e:	f000 fcc7 	bl	810a1b0 <__pow5mult>
 8109822:	464a      	mov	r2, r9
 8109824:	4601      	mov	r1, r0
 8109826:	4605      	mov	r5, r0
 8109828:	4658      	mov	r0, fp
 810982a:	f000 fc17 	bl	810a05c <__multiply>
 810982e:	4649      	mov	r1, r9
 8109830:	9004      	str	r0, [sp, #16]
 8109832:	4658      	mov	r0, fp
 8109834:	f000 fb48 	bl	8109ec8 <_Bfree>
 8109838:	9b04      	ldr	r3, [sp, #16]
 810983a:	4699      	mov	r9, r3
 810983c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810983e:	1b1a      	subs	r2, r3, r4
 8109840:	d004      	beq.n	810984c <_dtoa_r+0x78c>
 8109842:	4649      	mov	r1, r9
 8109844:	4658      	mov	r0, fp
 8109846:	f000 fcb3 	bl	810a1b0 <__pow5mult>
 810984a:	4681      	mov	r9, r0
 810984c:	2101      	movs	r1, #1
 810984e:	4658      	mov	r0, fp
 8109850:	f000 fbee 	bl	810a030 <__i2b>
 8109854:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8109856:	4604      	mov	r4, r0
 8109858:	2b00      	cmp	r3, #0
 810985a:	f000 81cf 	beq.w	8109bfc <_dtoa_r+0xb3c>
 810985e:	461a      	mov	r2, r3
 8109860:	4601      	mov	r1, r0
 8109862:	4658      	mov	r0, fp
 8109864:	f000 fca4 	bl	810a1b0 <__pow5mult>
 8109868:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810986a:	2b01      	cmp	r3, #1
 810986c:	4604      	mov	r4, r0
 810986e:	f300 8095 	bgt.w	810999c <_dtoa_r+0x8dc>
 8109872:	9b02      	ldr	r3, [sp, #8]
 8109874:	2b00      	cmp	r3, #0
 8109876:	f040 8087 	bne.w	8109988 <_dtoa_r+0x8c8>
 810987a:	9b03      	ldr	r3, [sp, #12]
 810987c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8109880:	2b00      	cmp	r3, #0
 8109882:	f040 8089 	bne.w	8109998 <_dtoa_r+0x8d8>
 8109886:	9b03      	ldr	r3, [sp, #12]
 8109888:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 810988c:	0d1b      	lsrs	r3, r3, #20
 810988e:	051b      	lsls	r3, r3, #20
 8109890:	b12b      	cbz	r3, 810989e <_dtoa_r+0x7de>
 8109892:	9b08      	ldr	r3, [sp, #32]
 8109894:	3301      	adds	r3, #1
 8109896:	9308      	str	r3, [sp, #32]
 8109898:	f108 0801 	add.w	r8, r8, #1
 810989c:	2301      	movs	r3, #1
 810989e:	930a      	str	r3, [sp, #40]	@ 0x28
 81098a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 81098a2:	2b00      	cmp	r3, #0
 81098a4:	f000 81b0 	beq.w	8109c08 <_dtoa_r+0xb48>
 81098a8:	6923      	ldr	r3, [r4, #16]
 81098aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 81098ae:	6918      	ldr	r0, [r3, #16]
 81098b0:	f000 fb72 	bl	8109f98 <__hi0bits>
 81098b4:	f1c0 0020 	rsb	r0, r0, #32
 81098b8:	9b08      	ldr	r3, [sp, #32]
 81098ba:	4418      	add	r0, r3
 81098bc:	f010 001f 	ands.w	r0, r0, #31
 81098c0:	d077      	beq.n	81099b2 <_dtoa_r+0x8f2>
 81098c2:	f1c0 0320 	rsb	r3, r0, #32
 81098c6:	2b04      	cmp	r3, #4
 81098c8:	dd6b      	ble.n	81099a2 <_dtoa_r+0x8e2>
 81098ca:	9b08      	ldr	r3, [sp, #32]
 81098cc:	f1c0 001c 	rsb	r0, r0, #28
 81098d0:	4403      	add	r3, r0
 81098d2:	4480      	add	r8, r0
 81098d4:	4406      	add	r6, r0
 81098d6:	9308      	str	r3, [sp, #32]
 81098d8:	f1b8 0f00 	cmp.w	r8, #0
 81098dc:	dd05      	ble.n	81098ea <_dtoa_r+0x82a>
 81098de:	4649      	mov	r1, r9
 81098e0:	4642      	mov	r2, r8
 81098e2:	4658      	mov	r0, fp
 81098e4:	f000 fcbe 	bl	810a264 <__lshift>
 81098e8:	4681      	mov	r9, r0
 81098ea:	9b08      	ldr	r3, [sp, #32]
 81098ec:	2b00      	cmp	r3, #0
 81098ee:	dd05      	ble.n	81098fc <_dtoa_r+0x83c>
 81098f0:	4621      	mov	r1, r4
 81098f2:	461a      	mov	r2, r3
 81098f4:	4658      	mov	r0, fp
 81098f6:	f000 fcb5 	bl	810a264 <__lshift>
 81098fa:	4604      	mov	r4, r0
 81098fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 81098fe:	2b00      	cmp	r3, #0
 8109900:	d059      	beq.n	81099b6 <_dtoa_r+0x8f6>
 8109902:	4621      	mov	r1, r4
 8109904:	4648      	mov	r0, r9
 8109906:	f000 fd19 	bl	810a33c <__mcmp>
 810990a:	2800      	cmp	r0, #0
 810990c:	da53      	bge.n	81099b6 <_dtoa_r+0x8f6>
 810990e:	1e7b      	subs	r3, r7, #1
 8109910:	9304      	str	r3, [sp, #16]
 8109912:	4649      	mov	r1, r9
 8109914:	2300      	movs	r3, #0
 8109916:	220a      	movs	r2, #10
 8109918:	4658      	mov	r0, fp
 810991a:	f000 faf7 	bl	8109f0c <__multadd>
 810991e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8109920:	4681      	mov	r9, r0
 8109922:	2b00      	cmp	r3, #0
 8109924:	f000 8172 	beq.w	8109c0c <_dtoa_r+0xb4c>
 8109928:	2300      	movs	r3, #0
 810992a:	4629      	mov	r1, r5
 810992c:	220a      	movs	r2, #10
 810992e:	4658      	mov	r0, fp
 8109930:	f000 faec 	bl	8109f0c <__multadd>
 8109934:	9b00      	ldr	r3, [sp, #0]
 8109936:	2b00      	cmp	r3, #0
 8109938:	4605      	mov	r5, r0
 810993a:	dc67      	bgt.n	8109a0c <_dtoa_r+0x94c>
 810993c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810993e:	2b02      	cmp	r3, #2
 8109940:	dc41      	bgt.n	81099c6 <_dtoa_r+0x906>
 8109942:	e063      	b.n	8109a0c <_dtoa_r+0x94c>
 8109944:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8109946:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 810994a:	e746      	b.n	81097da <_dtoa_r+0x71a>
 810994c:	9b07      	ldr	r3, [sp, #28]
 810994e:	1e5c      	subs	r4, r3, #1
 8109950:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8109952:	42a3      	cmp	r3, r4
 8109954:	bfbf      	itttt	lt
 8109956:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8109958:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 810995a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 810995c:	1ae3      	sublt	r3, r4, r3
 810995e:	bfb4      	ite	lt
 8109960:	18d2      	addlt	r2, r2, r3
 8109962:	1b1c      	subge	r4, r3, r4
 8109964:	9b07      	ldr	r3, [sp, #28]
 8109966:	bfbc      	itt	lt
 8109968:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 810996a:	2400      	movlt	r4, #0
 810996c:	2b00      	cmp	r3, #0
 810996e:	bfb5      	itete	lt
 8109970:	eba8 0603 	sublt.w	r6, r8, r3
 8109974:	9b07      	ldrge	r3, [sp, #28]
 8109976:	2300      	movlt	r3, #0
 8109978:	4646      	movge	r6, r8
 810997a:	e730      	b.n	81097de <_dtoa_r+0x71e>
 810997c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 810997e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8109980:	4646      	mov	r6, r8
 8109982:	e735      	b.n	81097f0 <_dtoa_r+0x730>
 8109984:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8109986:	e75c      	b.n	8109842 <_dtoa_r+0x782>
 8109988:	2300      	movs	r3, #0
 810998a:	e788      	b.n	810989e <_dtoa_r+0x7de>
 810998c:	3fe00000 	.word	0x3fe00000
 8109990:	40240000 	.word	0x40240000
 8109994:	40140000 	.word	0x40140000
 8109998:	9b02      	ldr	r3, [sp, #8]
 810999a:	e780      	b.n	810989e <_dtoa_r+0x7de>
 810999c:	2300      	movs	r3, #0
 810999e:	930a      	str	r3, [sp, #40]	@ 0x28
 81099a0:	e782      	b.n	81098a8 <_dtoa_r+0x7e8>
 81099a2:	d099      	beq.n	81098d8 <_dtoa_r+0x818>
 81099a4:	9a08      	ldr	r2, [sp, #32]
 81099a6:	331c      	adds	r3, #28
 81099a8:	441a      	add	r2, r3
 81099aa:	4498      	add	r8, r3
 81099ac:	441e      	add	r6, r3
 81099ae:	9208      	str	r2, [sp, #32]
 81099b0:	e792      	b.n	81098d8 <_dtoa_r+0x818>
 81099b2:	4603      	mov	r3, r0
 81099b4:	e7f6      	b.n	81099a4 <_dtoa_r+0x8e4>
 81099b6:	9b07      	ldr	r3, [sp, #28]
 81099b8:	9704      	str	r7, [sp, #16]
 81099ba:	2b00      	cmp	r3, #0
 81099bc:	dc20      	bgt.n	8109a00 <_dtoa_r+0x940>
 81099be:	9300      	str	r3, [sp, #0]
 81099c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81099c2:	2b02      	cmp	r3, #2
 81099c4:	dd1e      	ble.n	8109a04 <_dtoa_r+0x944>
 81099c6:	9b00      	ldr	r3, [sp, #0]
 81099c8:	2b00      	cmp	r3, #0
 81099ca:	f47f aec0 	bne.w	810974e <_dtoa_r+0x68e>
 81099ce:	4621      	mov	r1, r4
 81099d0:	2205      	movs	r2, #5
 81099d2:	4658      	mov	r0, fp
 81099d4:	f000 fa9a 	bl	8109f0c <__multadd>
 81099d8:	4601      	mov	r1, r0
 81099da:	4604      	mov	r4, r0
 81099dc:	4648      	mov	r0, r9
 81099de:	f000 fcad 	bl	810a33c <__mcmp>
 81099e2:	2800      	cmp	r0, #0
 81099e4:	f77f aeb3 	ble.w	810974e <_dtoa_r+0x68e>
 81099e8:	4656      	mov	r6, sl
 81099ea:	2331      	movs	r3, #49	@ 0x31
 81099ec:	f806 3b01 	strb.w	r3, [r6], #1
 81099f0:	9b04      	ldr	r3, [sp, #16]
 81099f2:	3301      	adds	r3, #1
 81099f4:	9304      	str	r3, [sp, #16]
 81099f6:	e6ae      	b.n	8109756 <_dtoa_r+0x696>
 81099f8:	9c07      	ldr	r4, [sp, #28]
 81099fa:	9704      	str	r7, [sp, #16]
 81099fc:	4625      	mov	r5, r4
 81099fe:	e7f3      	b.n	81099e8 <_dtoa_r+0x928>
 8109a00:	9b07      	ldr	r3, [sp, #28]
 8109a02:	9300      	str	r3, [sp, #0]
 8109a04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8109a06:	2b00      	cmp	r3, #0
 8109a08:	f000 8104 	beq.w	8109c14 <_dtoa_r+0xb54>
 8109a0c:	2e00      	cmp	r6, #0
 8109a0e:	dd05      	ble.n	8109a1c <_dtoa_r+0x95c>
 8109a10:	4629      	mov	r1, r5
 8109a12:	4632      	mov	r2, r6
 8109a14:	4658      	mov	r0, fp
 8109a16:	f000 fc25 	bl	810a264 <__lshift>
 8109a1a:	4605      	mov	r5, r0
 8109a1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8109a1e:	2b00      	cmp	r3, #0
 8109a20:	d05a      	beq.n	8109ad8 <_dtoa_r+0xa18>
 8109a22:	6869      	ldr	r1, [r5, #4]
 8109a24:	4658      	mov	r0, fp
 8109a26:	f000 fa0f 	bl	8109e48 <_Balloc>
 8109a2a:	4606      	mov	r6, r0
 8109a2c:	b928      	cbnz	r0, 8109a3a <_dtoa_r+0x97a>
 8109a2e:	4b84      	ldr	r3, [pc, #528]	@ (8109c40 <_dtoa_r+0xb80>)
 8109a30:	4602      	mov	r2, r0
 8109a32:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8109a36:	f7ff bb5a 	b.w	81090ee <_dtoa_r+0x2e>
 8109a3a:	692a      	ldr	r2, [r5, #16]
 8109a3c:	3202      	adds	r2, #2
 8109a3e:	0092      	lsls	r2, r2, #2
 8109a40:	f105 010c 	add.w	r1, r5, #12
 8109a44:	300c      	adds	r0, #12
 8109a46:	f7ff fa86 	bl	8108f56 <memcpy>
 8109a4a:	2201      	movs	r2, #1
 8109a4c:	4631      	mov	r1, r6
 8109a4e:	4658      	mov	r0, fp
 8109a50:	f000 fc08 	bl	810a264 <__lshift>
 8109a54:	f10a 0301 	add.w	r3, sl, #1
 8109a58:	9307      	str	r3, [sp, #28]
 8109a5a:	9b00      	ldr	r3, [sp, #0]
 8109a5c:	4453      	add	r3, sl
 8109a5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8109a60:	9b02      	ldr	r3, [sp, #8]
 8109a62:	f003 0301 	and.w	r3, r3, #1
 8109a66:	462f      	mov	r7, r5
 8109a68:	930a      	str	r3, [sp, #40]	@ 0x28
 8109a6a:	4605      	mov	r5, r0
 8109a6c:	9b07      	ldr	r3, [sp, #28]
 8109a6e:	4621      	mov	r1, r4
 8109a70:	3b01      	subs	r3, #1
 8109a72:	4648      	mov	r0, r9
 8109a74:	9300      	str	r3, [sp, #0]
 8109a76:	f7ff fa9b 	bl	8108fb0 <quorem>
 8109a7a:	4639      	mov	r1, r7
 8109a7c:	9002      	str	r0, [sp, #8]
 8109a7e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8109a82:	4648      	mov	r0, r9
 8109a84:	f000 fc5a 	bl	810a33c <__mcmp>
 8109a88:	462a      	mov	r2, r5
 8109a8a:	9008      	str	r0, [sp, #32]
 8109a8c:	4621      	mov	r1, r4
 8109a8e:	4658      	mov	r0, fp
 8109a90:	f000 fc70 	bl	810a374 <__mdiff>
 8109a94:	68c2      	ldr	r2, [r0, #12]
 8109a96:	4606      	mov	r6, r0
 8109a98:	bb02      	cbnz	r2, 8109adc <_dtoa_r+0xa1c>
 8109a9a:	4601      	mov	r1, r0
 8109a9c:	4648      	mov	r0, r9
 8109a9e:	f000 fc4d 	bl	810a33c <__mcmp>
 8109aa2:	4602      	mov	r2, r0
 8109aa4:	4631      	mov	r1, r6
 8109aa6:	4658      	mov	r0, fp
 8109aa8:	920e      	str	r2, [sp, #56]	@ 0x38
 8109aaa:	f000 fa0d 	bl	8109ec8 <_Bfree>
 8109aae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8109ab0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8109ab2:	9e07      	ldr	r6, [sp, #28]
 8109ab4:	ea43 0102 	orr.w	r1, r3, r2
 8109ab8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8109aba:	4319      	orrs	r1, r3
 8109abc:	d110      	bne.n	8109ae0 <_dtoa_r+0xa20>
 8109abe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8109ac2:	d029      	beq.n	8109b18 <_dtoa_r+0xa58>
 8109ac4:	9b08      	ldr	r3, [sp, #32]
 8109ac6:	2b00      	cmp	r3, #0
 8109ac8:	dd02      	ble.n	8109ad0 <_dtoa_r+0xa10>
 8109aca:	9b02      	ldr	r3, [sp, #8]
 8109acc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8109ad0:	9b00      	ldr	r3, [sp, #0]
 8109ad2:	f883 8000 	strb.w	r8, [r3]
 8109ad6:	e63f      	b.n	8109758 <_dtoa_r+0x698>
 8109ad8:	4628      	mov	r0, r5
 8109ada:	e7bb      	b.n	8109a54 <_dtoa_r+0x994>
 8109adc:	2201      	movs	r2, #1
 8109ade:	e7e1      	b.n	8109aa4 <_dtoa_r+0x9e4>
 8109ae0:	9b08      	ldr	r3, [sp, #32]
 8109ae2:	2b00      	cmp	r3, #0
 8109ae4:	db04      	blt.n	8109af0 <_dtoa_r+0xa30>
 8109ae6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8109ae8:	430b      	orrs	r3, r1
 8109aea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8109aec:	430b      	orrs	r3, r1
 8109aee:	d120      	bne.n	8109b32 <_dtoa_r+0xa72>
 8109af0:	2a00      	cmp	r2, #0
 8109af2:	dded      	ble.n	8109ad0 <_dtoa_r+0xa10>
 8109af4:	4649      	mov	r1, r9
 8109af6:	2201      	movs	r2, #1
 8109af8:	4658      	mov	r0, fp
 8109afa:	f000 fbb3 	bl	810a264 <__lshift>
 8109afe:	4621      	mov	r1, r4
 8109b00:	4681      	mov	r9, r0
 8109b02:	f000 fc1b 	bl	810a33c <__mcmp>
 8109b06:	2800      	cmp	r0, #0
 8109b08:	dc03      	bgt.n	8109b12 <_dtoa_r+0xa52>
 8109b0a:	d1e1      	bne.n	8109ad0 <_dtoa_r+0xa10>
 8109b0c:	f018 0f01 	tst.w	r8, #1
 8109b10:	d0de      	beq.n	8109ad0 <_dtoa_r+0xa10>
 8109b12:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8109b16:	d1d8      	bne.n	8109aca <_dtoa_r+0xa0a>
 8109b18:	9a00      	ldr	r2, [sp, #0]
 8109b1a:	2339      	movs	r3, #57	@ 0x39
 8109b1c:	7013      	strb	r3, [r2, #0]
 8109b1e:	4633      	mov	r3, r6
 8109b20:	461e      	mov	r6, r3
 8109b22:	3b01      	subs	r3, #1
 8109b24:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8109b28:	2a39      	cmp	r2, #57	@ 0x39
 8109b2a:	d052      	beq.n	8109bd2 <_dtoa_r+0xb12>
 8109b2c:	3201      	adds	r2, #1
 8109b2e:	701a      	strb	r2, [r3, #0]
 8109b30:	e612      	b.n	8109758 <_dtoa_r+0x698>
 8109b32:	2a00      	cmp	r2, #0
 8109b34:	dd07      	ble.n	8109b46 <_dtoa_r+0xa86>
 8109b36:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8109b3a:	d0ed      	beq.n	8109b18 <_dtoa_r+0xa58>
 8109b3c:	9a00      	ldr	r2, [sp, #0]
 8109b3e:	f108 0301 	add.w	r3, r8, #1
 8109b42:	7013      	strb	r3, [r2, #0]
 8109b44:	e608      	b.n	8109758 <_dtoa_r+0x698>
 8109b46:	9b07      	ldr	r3, [sp, #28]
 8109b48:	9a07      	ldr	r2, [sp, #28]
 8109b4a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8109b4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8109b50:	4293      	cmp	r3, r2
 8109b52:	d028      	beq.n	8109ba6 <_dtoa_r+0xae6>
 8109b54:	4649      	mov	r1, r9
 8109b56:	2300      	movs	r3, #0
 8109b58:	220a      	movs	r2, #10
 8109b5a:	4658      	mov	r0, fp
 8109b5c:	f000 f9d6 	bl	8109f0c <__multadd>
 8109b60:	42af      	cmp	r7, r5
 8109b62:	4681      	mov	r9, r0
 8109b64:	f04f 0300 	mov.w	r3, #0
 8109b68:	f04f 020a 	mov.w	r2, #10
 8109b6c:	4639      	mov	r1, r7
 8109b6e:	4658      	mov	r0, fp
 8109b70:	d107      	bne.n	8109b82 <_dtoa_r+0xac2>
 8109b72:	f000 f9cb 	bl	8109f0c <__multadd>
 8109b76:	4607      	mov	r7, r0
 8109b78:	4605      	mov	r5, r0
 8109b7a:	9b07      	ldr	r3, [sp, #28]
 8109b7c:	3301      	adds	r3, #1
 8109b7e:	9307      	str	r3, [sp, #28]
 8109b80:	e774      	b.n	8109a6c <_dtoa_r+0x9ac>
 8109b82:	f000 f9c3 	bl	8109f0c <__multadd>
 8109b86:	4629      	mov	r1, r5
 8109b88:	4607      	mov	r7, r0
 8109b8a:	2300      	movs	r3, #0
 8109b8c:	220a      	movs	r2, #10
 8109b8e:	4658      	mov	r0, fp
 8109b90:	f000 f9bc 	bl	8109f0c <__multadd>
 8109b94:	4605      	mov	r5, r0
 8109b96:	e7f0      	b.n	8109b7a <_dtoa_r+0xaba>
 8109b98:	9b00      	ldr	r3, [sp, #0]
 8109b9a:	2b00      	cmp	r3, #0
 8109b9c:	bfcc      	ite	gt
 8109b9e:	461e      	movgt	r6, r3
 8109ba0:	2601      	movle	r6, #1
 8109ba2:	4456      	add	r6, sl
 8109ba4:	2700      	movs	r7, #0
 8109ba6:	4649      	mov	r1, r9
 8109ba8:	2201      	movs	r2, #1
 8109baa:	4658      	mov	r0, fp
 8109bac:	f000 fb5a 	bl	810a264 <__lshift>
 8109bb0:	4621      	mov	r1, r4
 8109bb2:	4681      	mov	r9, r0
 8109bb4:	f000 fbc2 	bl	810a33c <__mcmp>
 8109bb8:	2800      	cmp	r0, #0
 8109bba:	dcb0      	bgt.n	8109b1e <_dtoa_r+0xa5e>
 8109bbc:	d102      	bne.n	8109bc4 <_dtoa_r+0xb04>
 8109bbe:	f018 0f01 	tst.w	r8, #1
 8109bc2:	d1ac      	bne.n	8109b1e <_dtoa_r+0xa5e>
 8109bc4:	4633      	mov	r3, r6
 8109bc6:	461e      	mov	r6, r3
 8109bc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8109bcc:	2a30      	cmp	r2, #48	@ 0x30
 8109bce:	d0fa      	beq.n	8109bc6 <_dtoa_r+0xb06>
 8109bd0:	e5c2      	b.n	8109758 <_dtoa_r+0x698>
 8109bd2:	459a      	cmp	sl, r3
 8109bd4:	d1a4      	bne.n	8109b20 <_dtoa_r+0xa60>
 8109bd6:	9b04      	ldr	r3, [sp, #16]
 8109bd8:	3301      	adds	r3, #1
 8109bda:	9304      	str	r3, [sp, #16]
 8109bdc:	2331      	movs	r3, #49	@ 0x31
 8109bde:	f88a 3000 	strb.w	r3, [sl]
 8109be2:	e5b9      	b.n	8109758 <_dtoa_r+0x698>
 8109be4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8109be6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8109c44 <_dtoa_r+0xb84>
 8109bea:	b11b      	cbz	r3, 8109bf4 <_dtoa_r+0xb34>
 8109bec:	f10a 0308 	add.w	r3, sl, #8
 8109bf0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8109bf2:	6013      	str	r3, [r2, #0]
 8109bf4:	4650      	mov	r0, sl
 8109bf6:	b019      	add	sp, #100	@ 0x64
 8109bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109bfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8109bfe:	2b01      	cmp	r3, #1
 8109c00:	f77f ae37 	ble.w	8109872 <_dtoa_r+0x7b2>
 8109c04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8109c06:	930a      	str	r3, [sp, #40]	@ 0x28
 8109c08:	2001      	movs	r0, #1
 8109c0a:	e655      	b.n	81098b8 <_dtoa_r+0x7f8>
 8109c0c:	9b00      	ldr	r3, [sp, #0]
 8109c0e:	2b00      	cmp	r3, #0
 8109c10:	f77f aed6 	ble.w	81099c0 <_dtoa_r+0x900>
 8109c14:	4656      	mov	r6, sl
 8109c16:	4621      	mov	r1, r4
 8109c18:	4648      	mov	r0, r9
 8109c1a:	f7ff f9c9 	bl	8108fb0 <quorem>
 8109c1e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8109c22:	f806 8b01 	strb.w	r8, [r6], #1
 8109c26:	9b00      	ldr	r3, [sp, #0]
 8109c28:	eba6 020a 	sub.w	r2, r6, sl
 8109c2c:	4293      	cmp	r3, r2
 8109c2e:	ddb3      	ble.n	8109b98 <_dtoa_r+0xad8>
 8109c30:	4649      	mov	r1, r9
 8109c32:	2300      	movs	r3, #0
 8109c34:	220a      	movs	r2, #10
 8109c36:	4658      	mov	r0, fp
 8109c38:	f000 f968 	bl	8109f0c <__multadd>
 8109c3c:	4681      	mov	r9, r0
 8109c3e:	e7ea      	b.n	8109c16 <_dtoa_r+0xb56>
 8109c40:	0810b481 	.word	0x0810b481
 8109c44:	0810b41c 	.word	0x0810b41c

08109c48 <_free_r>:
 8109c48:	b538      	push	{r3, r4, r5, lr}
 8109c4a:	4605      	mov	r5, r0
 8109c4c:	2900      	cmp	r1, #0
 8109c4e:	d041      	beq.n	8109cd4 <_free_r+0x8c>
 8109c50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8109c54:	1f0c      	subs	r4, r1, #4
 8109c56:	2b00      	cmp	r3, #0
 8109c58:	bfb8      	it	lt
 8109c5a:	18e4      	addlt	r4, r4, r3
 8109c5c:	f000 f8e8 	bl	8109e30 <__malloc_lock>
 8109c60:	4a1d      	ldr	r2, [pc, #116]	@ (8109cd8 <_free_r+0x90>)
 8109c62:	6813      	ldr	r3, [r2, #0]
 8109c64:	b933      	cbnz	r3, 8109c74 <_free_r+0x2c>
 8109c66:	6063      	str	r3, [r4, #4]
 8109c68:	6014      	str	r4, [r2, #0]
 8109c6a:	4628      	mov	r0, r5
 8109c6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8109c70:	f000 b8e4 	b.w	8109e3c <__malloc_unlock>
 8109c74:	42a3      	cmp	r3, r4
 8109c76:	d908      	bls.n	8109c8a <_free_r+0x42>
 8109c78:	6820      	ldr	r0, [r4, #0]
 8109c7a:	1821      	adds	r1, r4, r0
 8109c7c:	428b      	cmp	r3, r1
 8109c7e:	bf01      	itttt	eq
 8109c80:	6819      	ldreq	r1, [r3, #0]
 8109c82:	685b      	ldreq	r3, [r3, #4]
 8109c84:	1809      	addeq	r1, r1, r0
 8109c86:	6021      	streq	r1, [r4, #0]
 8109c88:	e7ed      	b.n	8109c66 <_free_r+0x1e>
 8109c8a:	461a      	mov	r2, r3
 8109c8c:	685b      	ldr	r3, [r3, #4]
 8109c8e:	b10b      	cbz	r3, 8109c94 <_free_r+0x4c>
 8109c90:	42a3      	cmp	r3, r4
 8109c92:	d9fa      	bls.n	8109c8a <_free_r+0x42>
 8109c94:	6811      	ldr	r1, [r2, #0]
 8109c96:	1850      	adds	r0, r2, r1
 8109c98:	42a0      	cmp	r0, r4
 8109c9a:	d10b      	bne.n	8109cb4 <_free_r+0x6c>
 8109c9c:	6820      	ldr	r0, [r4, #0]
 8109c9e:	4401      	add	r1, r0
 8109ca0:	1850      	adds	r0, r2, r1
 8109ca2:	4283      	cmp	r3, r0
 8109ca4:	6011      	str	r1, [r2, #0]
 8109ca6:	d1e0      	bne.n	8109c6a <_free_r+0x22>
 8109ca8:	6818      	ldr	r0, [r3, #0]
 8109caa:	685b      	ldr	r3, [r3, #4]
 8109cac:	6053      	str	r3, [r2, #4]
 8109cae:	4408      	add	r0, r1
 8109cb0:	6010      	str	r0, [r2, #0]
 8109cb2:	e7da      	b.n	8109c6a <_free_r+0x22>
 8109cb4:	d902      	bls.n	8109cbc <_free_r+0x74>
 8109cb6:	230c      	movs	r3, #12
 8109cb8:	602b      	str	r3, [r5, #0]
 8109cba:	e7d6      	b.n	8109c6a <_free_r+0x22>
 8109cbc:	6820      	ldr	r0, [r4, #0]
 8109cbe:	1821      	adds	r1, r4, r0
 8109cc0:	428b      	cmp	r3, r1
 8109cc2:	bf04      	itt	eq
 8109cc4:	6819      	ldreq	r1, [r3, #0]
 8109cc6:	685b      	ldreq	r3, [r3, #4]
 8109cc8:	6063      	str	r3, [r4, #4]
 8109cca:	bf04      	itt	eq
 8109ccc:	1809      	addeq	r1, r1, r0
 8109cce:	6021      	streq	r1, [r4, #0]
 8109cd0:	6054      	str	r4, [r2, #4]
 8109cd2:	e7ca      	b.n	8109c6a <_free_r+0x22>
 8109cd4:	bd38      	pop	{r3, r4, r5, pc}
 8109cd6:	bf00      	nop
 8109cd8:	1000063c 	.word	0x1000063c

08109cdc <malloc>:
 8109cdc:	4b02      	ldr	r3, [pc, #8]	@ (8109ce8 <malloc+0xc>)
 8109cde:	4601      	mov	r1, r0
 8109ce0:	6818      	ldr	r0, [r3, #0]
 8109ce2:	f000 b825 	b.w	8109d30 <_malloc_r>
 8109ce6:	bf00      	nop
 8109ce8:	10000064 	.word	0x10000064

08109cec <sbrk_aligned>:
 8109cec:	b570      	push	{r4, r5, r6, lr}
 8109cee:	4e0f      	ldr	r6, [pc, #60]	@ (8109d2c <sbrk_aligned+0x40>)
 8109cf0:	460c      	mov	r4, r1
 8109cf2:	6831      	ldr	r1, [r6, #0]
 8109cf4:	4605      	mov	r5, r0
 8109cf6:	b911      	cbnz	r1, 8109cfe <sbrk_aligned+0x12>
 8109cf8:	f001 f81e 	bl	810ad38 <_sbrk_r>
 8109cfc:	6030      	str	r0, [r6, #0]
 8109cfe:	4621      	mov	r1, r4
 8109d00:	4628      	mov	r0, r5
 8109d02:	f001 f819 	bl	810ad38 <_sbrk_r>
 8109d06:	1c43      	adds	r3, r0, #1
 8109d08:	d103      	bne.n	8109d12 <sbrk_aligned+0x26>
 8109d0a:	f04f 34ff 	mov.w	r4, #4294967295
 8109d0e:	4620      	mov	r0, r4
 8109d10:	bd70      	pop	{r4, r5, r6, pc}
 8109d12:	1cc4      	adds	r4, r0, #3
 8109d14:	f024 0403 	bic.w	r4, r4, #3
 8109d18:	42a0      	cmp	r0, r4
 8109d1a:	d0f8      	beq.n	8109d0e <sbrk_aligned+0x22>
 8109d1c:	1a21      	subs	r1, r4, r0
 8109d1e:	4628      	mov	r0, r5
 8109d20:	f001 f80a 	bl	810ad38 <_sbrk_r>
 8109d24:	3001      	adds	r0, #1
 8109d26:	d1f2      	bne.n	8109d0e <sbrk_aligned+0x22>
 8109d28:	e7ef      	b.n	8109d0a <sbrk_aligned+0x1e>
 8109d2a:	bf00      	nop
 8109d2c:	10000638 	.word	0x10000638

08109d30 <_malloc_r>:
 8109d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8109d34:	1ccd      	adds	r5, r1, #3
 8109d36:	f025 0503 	bic.w	r5, r5, #3
 8109d3a:	3508      	adds	r5, #8
 8109d3c:	2d0c      	cmp	r5, #12
 8109d3e:	bf38      	it	cc
 8109d40:	250c      	movcc	r5, #12
 8109d42:	2d00      	cmp	r5, #0
 8109d44:	4606      	mov	r6, r0
 8109d46:	db01      	blt.n	8109d4c <_malloc_r+0x1c>
 8109d48:	42a9      	cmp	r1, r5
 8109d4a:	d904      	bls.n	8109d56 <_malloc_r+0x26>
 8109d4c:	230c      	movs	r3, #12
 8109d4e:	6033      	str	r3, [r6, #0]
 8109d50:	2000      	movs	r0, #0
 8109d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8109d56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8109e2c <_malloc_r+0xfc>
 8109d5a:	f000 f869 	bl	8109e30 <__malloc_lock>
 8109d5e:	f8d8 3000 	ldr.w	r3, [r8]
 8109d62:	461c      	mov	r4, r3
 8109d64:	bb44      	cbnz	r4, 8109db8 <_malloc_r+0x88>
 8109d66:	4629      	mov	r1, r5
 8109d68:	4630      	mov	r0, r6
 8109d6a:	f7ff ffbf 	bl	8109cec <sbrk_aligned>
 8109d6e:	1c43      	adds	r3, r0, #1
 8109d70:	4604      	mov	r4, r0
 8109d72:	d158      	bne.n	8109e26 <_malloc_r+0xf6>
 8109d74:	f8d8 4000 	ldr.w	r4, [r8]
 8109d78:	4627      	mov	r7, r4
 8109d7a:	2f00      	cmp	r7, #0
 8109d7c:	d143      	bne.n	8109e06 <_malloc_r+0xd6>
 8109d7e:	2c00      	cmp	r4, #0
 8109d80:	d04b      	beq.n	8109e1a <_malloc_r+0xea>
 8109d82:	6823      	ldr	r3, [r4, #0]
 8109d84:	4639      	mov	r1, r7
 8109d86:	4630      	mov	r0, r6
 8109d88:	eb04 0903 	add.w	r9, r4, r3
 8109d8c:	f000 ffd4 	bl	810ad38 <_sbrk_r>
 8109d90:	4581      	cmp	r9, r0
 8109d92:	d142      	bne.n	8109e1a <_malloc_r+0xea>
 8109d94:	6821      	ldr	r1, [r4, #0]
 8109d96:	1a6d      	subs	r5, r5, r1
 8109d98:	4629      	mov	r1, r5
 8109d9a:	4630      	mov	r0, r6
 8109d9c:	f7ff ffa6 	bl	8109cec <sbrk_aligned>
 8109da0:	3001      	adds	r0, #1
 8109da2:	d03a      	beq.n	8109e1a <_malloc_r+0xea>
 8109da4:	6823      	ldr	r3, [r4, #0]
 8109da6:	442b      	add	r3, r5
 8109da8:	6023      	str	r3, [r4, #0]
 8109daa:	f8d8 3000 	ldr.w	r3, [r8]
 8109dae:	685a      	ldr	r2, [r3, #4]
 8109db0:	bb62      	cbnz	r2, 8109e0c <_malloc_r+0xdc>
 8109db2:	f8c8 7000 	str.w	r7, [r8]
 8109db6:	e00f      	b.n	8109dd8 <_malloc_r+0xa8>
 8109db8:	6822      	ldr	r2, [r4, #0]
 8109dba:	1b52      	subs	r2, r2, r5
 8109dbc:	d420      	bmi.n	8109e00 <_malloc_r+0xd0>
 8109dbe:	2a0b      	cmp	r2, #11
 8109dc0:	d917      	bls.n	8109df2 <_malloc_r+0xc2>
 8109dc2:	1961      	adds	r1, r4, r5
 8109dc4:	42a3      	cmp	r3, r4
 8109dc6:	6025      	str	r5, [r4, #0]
 8109dc8:	bf18      	it	ne
 8109dca:	6059      	strne	r1, [r3, #4]
 8109dcc:	6863      	ldr	r3, [r4, #4]
 8109dce:	bf08      	it	eq
 8109dd0:	f8c8 1000 	streq.w	r1, [r8]
 8109dd4:	5162      	str	r2, [r4, r5]
 8109dd6:	604b      	str	r3, [r1, #4]
 8109dd8:	4630      	mov	r0, r6
 8109dda:	f000 f82f 	bl	8109e3c <__malloc_unlock>
 8109dde:	f104 000b 	add.w	r0, r4, #11
 8109de2:	1d23      	adds	r3, r4, #4
 8109de4:	f020 0007 	bic.w	r0, r0, #7
 8109de8:	1ac2      	subs	r2, r0, r3
 8109dea:	bf1c      	itt	ne
 8109dec:	1a1b      	subne	r3, r3, r0
 8109dee:	50a3      	strne	r3, [r4, r2]
 8109df0:	e7af      	b.n	8109d52 <_malloc_r+0x22>
 8109df2:	6862      	ldr	r2, [r4, #4]
 8109df4:	42a3      	cmp	r3, r4
 8109df6:	bf0c      	ite	eq
 8109df8:	f8c8 2000 	streq.w	r2, [r8]
 8109dfc:	605a      	strne	r2, [r3, #4]
 8109dfe:	e7eb      	b.n	8109dd8 <_malloc_r+0xa8>
 8109e00:	4623      	mov	r3, r4
 8109e02:	6864      	ldr	r4, [r4, #4]
 8109e04:	e7ae      	b.n	8109d64 <_malloc_r+0x34>
 8109e06:	463c      	mov	r4, r7
 8109e08:	687f      	ldr	r7, [r7, #4]
 8109e0a:	e7b6      	b.n	8109d7a <_malloc_r+0x4a>
 8109e0c:	461a      	mov	r2, r3
 8109e0e:	685b      	ldr	r3, [r3, #4]
 8109e10:	42a3      	cmp	r3, r4
 8109e12:	d1fb      	bne.n	8109e0c <_malloc_r+0xdc>
 8109e14:	2300      	movs	r3, #0
 8109e16:	6053      	str	r3, [r2, #4]
 8109e18:	e7de      	b.n	8109dd8 <_malloc_r+0xa8>
 8109e1a:	230c      	movs	r3, #12
 8109e1c:	6033      	str	r3, [r6, #0]
 8109e1e:	4630      	mov	r0, r6
 8109e20:	f000 f80c 	bl	8109e3c <__malloc_unlock>
 8109e24:	e794      	b.n	8109d50 <_malloc_r+0x20>
 8109e26:	6005      	str	r5, [r0, #0]
 8109e28:	e7d6      	b.n	8109dd8 <_malloc_r+0xa8>
 8109e2a:	bf00      	nop
 8109e2c:	1000063c 	.word	0x1000063c

08109e30 <__malloc_lock>:
 8109e30:	4801      	ldr	r0, [pc, #4]	@ (8109e38 <__malloc_lock+0x8>)
 8109e32:	f7ff b88e 	b.w	8108f52 <__retarget_lock_acquire_recursive>
 8109e36:	bf00      	nop
 8109e38:	10000634 	.word	0x10000634

08109e3c <__malloc_unlock>:
 8109e3c:	4801      	ldr	r0, [pc, #4]	@ (8109e44 <__malloc_unlock+0x8>)
 8109e3e:	f7ff b889 	b.w	8108f54 <__retarget_lock_release_recursive>
 8109e42:	bf00      	nop
 8109e44:	10000634 	.word	0x10000634

08109e48 <_Balloc>:
 8109e48:	b570      	push	{r4, r5, r6, lr}
 8109e4a:	69c6      	ldr	r6, [r0, #28]
 8109e4c:	4604      	mov	r4, r0
 8109e4e:	460d      	mov	r5, r1
 8109e50:	b976      	cbnz	r6, 8109e70 <_Balloc+0x28>
 8109e52:	2010      	movs	r0, #16
 8109e54:	f7ff ff42 	bl	8109cdc <malloc>
 8109e58:	4602      	mov	r2, r0
 8109e5a:	61e0      	str	r0, [r4, #28]
 8109e5c:	b920      	cbnz	r0, 8109e68 <_Balloc+0x20>
 8109e5e:	4b18      	ldr	r3, [pc, #96]	@ (8109ec0 <_Balloc+0x78>)
 8109e60:	4818      	ldr	r0, [pc, #96]	@ (8109ec4 <_Balloc+0x7c>)
 8109e62:	216b      	movs	r1, #107	@ 0x6b
 8109e64:	f7ff f886 	bl	8108f74 <__assert_func>
 8109e68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8109e6c:	6006      	str	r6, [r0, #0]
 8109e6e:	60c6      	str	r6, [r0, #12]
 8109e70:	69e6      	ldr	r6, [r4, #28]
 8109e72:	68f3      	ldr	r3, [r6, #12]
 8109e74:	b183      	cbz	r3, 8109e98 <_Balloc+0x50>
 8109e76:	69e3      	ldr	r3, [r4, #28]
 8109e78:	68db      	ldr	r3, [r3, #12]
 8109e7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8109e7e:	b9b8      	cbnz	r0, 8109eb0 <_Balloc+0x68>
 8109e80:	2101      	movs	r1, #1
 8109e82:	fa01 f605 	lsl.w	r6, r1, r5
 8109e86:	1d72      	adds	r2, r6, #5
 8109e88:	0092      	lsls	r2, r2, #2
 8109e8a:	4620      	mov	r0, r4
 8109e8c:	f000 ff6b 	bl	810ad66 <_calloc_r>
 8109e90:	b160      	cbz	r0, 8109eac <_Balloc+0x64>
 8109e92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8109e96:	e00e      	b.n	8109eb6 <_Balloc+0x6e>
 8109e98:	2221      	movs	r2, #33	@ 0x21
 8109e9a:	2104      	movs	r1, #4
 8109e9c:	4620      	mov	r0, r4
 8109e9e:	f000 ff62 	bl	810ad66 <_calloc_r>
 8109ea2:	69e3      	ldr	r3, [r4, #28]
 8109ea4:	60f0      	str	r0, [r6, #12]
 8109ea6:	68db      	ldr	r3, [r3, #12]
 8109ea8:	2b00      	cmp	r3, #0
 8109eaa:	d1e4      	bne.n	8109e76 <_Balloc+0x2e>
 8109eac:	2000      	movs	r0, #0
 8109eae:	bd70      	pop	{r4, r5, r6, pc}
 8109eb0:	6802      	ldr	r2, [r0, #0]
 8109eb2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8109eb6:	2300      	movs	r3, #0
 8109eb8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8109ebc:	e7f7      	b.n	8109eae <_Balloc+0x66>
 8109ebe:	bf00      	nop
 8109ec0:	0810b23c 	.word	0x0810b23c
 8109ec4:	0810b492 	.word	0x0810b492

08109ec8 <_Bfree>:
 8109ec8:	b570      	push	{r4, r5, r6, lr}
 8109eca:	69c6      	ldr	r6, [r0, #28]
 8109ecc:	4605      	mov	r5, r0
 8109ece:	460c      	mov	r4, r1
 8109ed0:	b976      	cbnz	r6, 8109ef0 <_Bfree+0x28>
 8109ed2:	2010      	movs	r0, #16
 8109ed4:	f7ff ff02 	bl	8109cdc <malloc>
 8109ed8:	4602      	mov	r2, r0
 8109eda:	61e8      	str	r0, [r5, #28]
 8109edc:	b920      	cbnz	r0, 8109ee8 <_Bfree+0x20>
 8109ede:	4b09      	ldr	r3, [pc, #36]	@ (8109f04 <_Bfree+0x3c>)
 8109ee0:	4809      	ldr	r0, [pc, #36]	@ (8109f08 <_Bfree+0x40>)
 8109ee2:	218f      	movs	r1, #143	@ 0x8f
 8109ee4:	f7ff f846 	bl	8108f74 <__assert_func>
 8109ee8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8109eec:	6006      	str	r6, [r0, #0]
 8109eee:	60c6      	str	r6, [r0, #12]
 8109ef0:	b13c      	cbz	r4, 8109f02 <_Bfree+0x3a>
 8109ef2:	69eb      	ldr	r3, [r5, #28]
 8109ef4:	6862      	ldr	r2, [r4, #4]
 8109ef6:	68db      	ldr	r3, [r3, #12]
 8109ef8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8109efc:	6021      	str	r1, [r4, #0]
 8109efe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8109f02:	bd70      	pop	{r4, r5, r6, pc}
 8109f04:	0810b23c 	.word	0x0810b23c
 8109f08:	0810b492 	.word	0x0810b492

08109f0c <__multadd>:
 8109f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8109f10:	690d      	ldr	r5, [r1, #16]
 8109f12:	4607      	mov	r7, r0
 8109f14:	460c      	mov	r4, r1
 8109f16:	461e      	mov	r6, r3
 8109f18:	f101 0c14 	add.w	ip, r1, #20
 8109f1c:	2000      	movs	r0, #0
 8109f1e:	f8dc 3000 	ldr.w	r3, [ip]
 8109f22:	b299      	uxth	r1, r3
 8109f24:	fb02 6101 	mla	r1, r2, r1, r6
 8109f28:	0c1e      	lsrs	r6, r3, #16
 8109f2a:	0c0b      	lsrs	r3, r1, #16
 8109f2c:	fb02 3306 	mla	r3, r2, r6, r3
 8109f30:	b289      	uxth	r1, r1
 8109f32:	3001      	adds	r0, #1
 8109f34:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8109f38:	4285      	cmp	r5, r0
 8109f3a:	f84c 1b04 	str.w	r1, [ip], #4
 8109f3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8109f42:	dcec      	bgt.n	8109f1e <__multadd+0x12>
 8109f44:	b30e      	cbz	r6, 8109f8a <__multadd+0x7e>
 8109f46:	68a3      	ldr	r3, [r4, #8]
 8109f48:	42ab      	cmp	r3, r5
 8109f4a:	dc19      	bgt.n	8109f80 <__multadd+0x74>
 8109f4c:	6861      	ldr	r1, [r4, #4]
 8109f4e:	4638      	mov	r0, r7
 8109f50:	3101      	adds	r1, #1
 8109f52:	f7ff ff79 	bl	8109e48 <_Balloc>
 8109f56:	4680      	mov	r8, r0
 8109f58:	b928      	cbnz	r0, 8109f66 <__multadd+0x5a>
 8109f5a:	4602      	mov	r2, r0
 8109f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8109f90 <__multadd+0x84>)
 8109f5e:	480d      	ldr	r0, [pc, #52]	@ (8109f94 <__multadd+0x88>)
 8109f60:	21ba      	movs	r1, #186	@ 0xba
 8109f62:	f7ff f807 	bl	8108f74 <__assert_func>
 8109f66:	6922      	ldr	r2, [r4, #16]
 8109f68:	3202      	adds	r2, #2
 8109f6a:	f104 010c 	add.w	r1, r4, #12
 8109f6e:	0092      	lsls	r2, r2, #2
 8109f70:	300c      	adds	r0, #12
 8109f72:	f7fe fff0 	bl	8108f56 <memcpy>
 8109f76:	4621      	mov	r1, r4
 8109f78:	4638      	mov	r0, r7
 8109f7a:	f7ff ffa5 	bl	8109ec8 <_Bfree>
 8109f7e:	4644      	mov	r4, r8
 8109f80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8109f84:	3501      	adds	r5, #1
 8109f86:	615e      	str	r6, [r3, #20]
 8109f88:	6125      	str	r5, [r4, #16]
 8109f8a:	4620      	mov	r0, r4
 8109f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8109f90:	0810b481 	.word	0x0810b481
 8109f94:	0810b492 	.word	0x0810b492

08109f98 <__hi0bits>:
 8109f98:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8109f9c:	4603      	mov	r3, r0
 8109f9e:	bf36      	itet	cc
 8109fa0:	0403      	lslcc	r3, r0, #16
 8109fa2:	2000      	movcs	r0, #0
 8109fa4:	2010      	movcc	r0, #16
 8109fa6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8109faa:	bf3c      	itt	cc
 8109fac:	021b      	lslcc	r3, r3, #8
 8109fae:	3008      	addcc	r0, #8
 8109fb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8109fb4:	bf3c      	itt	cc
 8109fb6:	011b      	lslcc	r3, r3, #4
 8109fb8:	3004      	addcc	r0, #4
 8109fba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8109fbe:	bf3c      	itt	cc
 8109fc0:	009b      	lslcc	r3, r3, #2
 8109fc2:	3002      	addcc	r0, #2
 8109fc4:	2b00      	cmp	r3, #0
 8109fc6:	db05      	blt.n	8109fd4 <__hi0bits+0x3c>
 8109fc8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8109fcc:	f100 0001 	add.w	r0, r0, #1
 8109fd0:	bf08      	it	eq
 8109fd2:	2020      	moveq	r0, #32
 8109fd4:	4770      	bx	lr

08109fd6 <__lo0bits>:
 8109fd6:	6803      	ldr	r3, [r0, #0]
 8109fd8:	4602      	mov	r2, r0
 8109fda:	f013 0007 	ands.w	r0, r3, #7
 8109fde:	d00b      	beq.n	8109ff8 <__lo0bits+0x22>
 8109fe0:	07d9      	lsls	r1, r3, #31
 8109fe2:	d421      	bmi.n	810a028 <__lo0bits+0x52>
 8109fe4:	0798      	lsls	r0, r3, #30
 8109fe6:	bf49      	itett	mi
 8109fe8:	085b      	lsrmi	r3, r3, #1
 8109fea:	089b      	lsrpl	r3, r3, #2
 8109fec:	2001      	movmi	r0, #1
 8109fee:	6013      	strmi	r3, [r2, #0]
 8109ff0:	bf5c      	itt	pl
 8109ff2:	6013      	strpl	r3, [r2, #0]
 8109ff4:	2002      	movpl	r0, #2
 8109ff6:	4770      	bx	lr
 8109ff8:	b299      	uxth	r1, r3
 8109ffa:	b909      	cbnz	r1, 810a000 <__lo0bits+0x2a>
 8109ffc:	0c1b      	lsrs	r3, r3, #16
 8109ffe:	2010      	movs	r0, #16
 810a000:	b2d9      	uxtb	r1, r3
 810a002:	b909      	cbnz	r1, 810a008 <__lo0bits+0x32>
 810a004:	3008      	adds	r0, #8
 810a006:	0a1b      	lsrs	r3, r3, #8
 810a008:	0719      	lsls	r1, r3, #28
 810a00a:	bf04      	itt	eq
 810a00c:	091b      	lsreq	r3, r3, #4
 810a00e:	3004      	addeq	r0, #4
 810a010:	0799      	lsls	r1, r3, #30
 810a012:	bf04      	itt	eq
 810a014:	089b      	lsreq	r3, r3, #2
 810a016:	3002      	addeq	r0, #2
 810a018:	07d9      	lsls	r1, r3, #31
 810a01a:	d403      	bmi.n	810a024 <__lo0bits+0x4e>
 810a01c:	085b      	lsrs	r3, r3, #1
 810a01e:	f100 0001 	add.w	r0, r0, #1
 810a022:	d003      	beq.n	810a02c <__lo0bits+0x56>
 810a024:	6013      	str	r3, [r2, #0]
 810a026:	4770      	bx	lr
 810a028:	2000      	movs	r0, #0
 810a02a:	4770      	bx	lr
 810a02c:	2020      	movs	r0, #32
 810a02e:	4770      	bx	lr

0810a030 <__i2b>:
 810a030:	b510      	push	{r4, lr}
 810a032:	460c      	mov	r4, r1
 810a034:	2101      	movs	r1, #1
 810a036:	f7ff ff07 	bl	8109e48 <_Balloc>
 810a03a:	4602      	mov	r2, r0
 810a03c:	b928      	cbnz	r0, 810a04a <__i2b+0x1a>
 810a03e:	4b05      	ldr	r3, [pc, #20]	@ (810a054 <__i2b+0x24>)
 810a040:	4805      	ldr	r0, [pc, #20]	@ (810a058 <__i2b+0x28>)
 810a042:	f240 1145 	movw	r1, #325	@ 0x145
 810a046:	f7fe ff95 	bl	8108f74 <__assert_func>
 810a04a:	2301      	movs	r3, #1
 810a04c:	6144      	str	r4, [r0, #20]
 810a04e:	6103      	str	r3, [r0, #16]
 810a050:	bd10      	pop	{r4, pc}
 810a052:	bf00      	nop
 810a054:	0810b481 	.word	0x0810b481
 810a058:	0810b492 	.word	0x0810b492

0810a05c <__multiply>:
 810a05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a060:	4614      	mov	r4, r2
 810a062:	690a      	ldr	r2, [r1, #16]
 810a064:	6923      	ldr	r3, [r4, #16]
 810a066:	429a      	cmp	r2, r3
 810a068:	bfa8      	it	ge
 810a06a:	4623      	movge	r3, r4
 810a06c:	460f      	mov	r7, r1
 810a06e:	bfa4      	itt	ge
 810a070:	460c      	movge	r4, r1
 810a072:	461f      	movge	r7, r3
 810a074:	f8d4 a010 	ldr.w	sl, [r4, #16]
 810a078:	f8d7 9010 	ldr.w	r9, [r7, #16]
 810a07c:	68a3      	ldr	r3, [r4, #8]
 810a07e:	6861      	ldr	r1, [r4, #4]
 810a080:	eb0a 0609 	add.w	r6, sl, r9
 810a084:	42b3      	cmp	r3, r6
 810a086:	b085      	sub	sp, #20
 810a088:	bfb8      	it	lt
 810a08a:	3101      	addlt	r1, #1
 810a08c:	f7ff fedc 	bl	8109e48 <_Balloc>
 810a090:	b930      	cbnz	r0, 810a0a0 <__multiply+0x44>
 810a092:	4602      	mov	r2, r0
 810a094:	4b44      	ldr	r3, [pc, #272]	@ (810a1a8 <__multiply+0x14c>)
 810a096:	4845      	ldr	r0, [pc, #276]	@ (810a1ac <__multiply+0x150>)
 810a098:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 810a09c:	f7fe ff6a 	bl	8108f74 <__assert_func>
 810a0a0:	f100 0514 	add.w	r5, r0, #20
 810a0a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 810a0a8:	462b      	mov	r3, r5
 810a0aa:	2200      	movs	r2, #0
 810a0ac:	4543      	cmp	r3, r8
 810a0ae:	d321      	bcc.n	810a0f4 <__multiply+0x98>
 810a0b0:	f107 0114 	add.w	r1, r7, #20
 810a0b4:	f104 0214 	add.w	r2, r4, #20
 810a0b8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 810a0bc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 810a0c0:	9302      	str	r3, [sp, #8]
 810a0c2:	1b13      	subs	r3, r2, r4
 810a0c4:	3b15      	subs	r3, #21
 810a0c6:	f023 0303 	bic.w	r3, r3, #3
 810a0ca:	3304      	adds	r3, #4
 810a0cc:	f104 0715 	add.w	r7, r4, #21
 810a0d0:	42ba      	cmp	r2, r7
 810a0d2:	bf38      	it	cc
 810a0d4:	2304      	movcc	r3, #4
 810a0d6:	9301      	str	r3, [sp, #4]
 810a0d8:	9b02      	ldr	r3, [sp, #8]
 810a0da:	9103      	str	r1, [sp, #12]
 810a0dc:	428b      	cmp	r3, r1
 810a0de:	d80c      	bhi.n	810a0fa <__multiply+0x9e>
 810a0e0:	2e00      	cmp	r6, #0
 810a0e2:	dd03      	ble.n	810a0ec <__multiply+0x90>
 810a0e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810a0e8:	2b00      	cmp	r3, #0
 810a0ea:	d05b      	beq.n	810a1a4 <__multiply+0x148>
 810a0ec:	6106      	str	r6, [r0, #16]
 810a0ee:	b005      	add	sp, #20
 810a0f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a0f4:	f843 2b04 	str.w	r2, [r3], #4
 810a0f8:	e7d8      	b.n	810a0ac <__multiply+0x50>
 810a0fa:	f8b1 a000 	ldrh.w	sl, [r1]
 810a0fe:	f1ba 0f00 	cmp.w	sl, #0
 810a102:	d024      	beq.n	810a14e <__multiply+0xf2>
 810a104:	f104 0e14 	add.w	lr, r4, #20
 810a108:	46a9      	mov	r9, r5
 810a10a:	f04f 0c00 	mov.w	ip, #0
 810a10e:	f85e 7b04 	ldr.w	r7, [lr], #4
 810a112:	f8d9 3000 	ldr.w	r3, [r9]
 810a116:	fa1f fb87 	uxth.w	fp, r7
 810a11a:	b29b      	uxth	r3, r3
 810a11c:	fb0a 330b 	mla	r3, sl, fp, r3
 810a120:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 810a124:	f8d9 7000 	ldr.w	r7, [r9]
 810a128:	4463      	add	r3, ip
 810a12a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 810a12e:	fb0a c70b 	mla	r7, sl, fp, ip
 810a132:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 810a136:	b29b      	uxth	r3, r3
 810a138:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 810a13c:	4572      	cmp	r2, lr
 810a13e:	f849 3b04 	str.w	r3, [r9], #4
 810a142:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 810a146:	d8e2      	bhi.n	810a10e <__multiply+0xb2>
 810a148:	9b01      	ldr	r3, [sp, #4]
 810a14a:	f845 c003 	str.w	ip, [r5, r3]
 810a14e:	9b03      	ldr	r3, [sp, #12]
 810a150:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 810a154:	3104      	adds	r1, #4
 810a156:	f1b9 0f00 	cmp.w	r9, #0
 810a15a:	d021      	beq.n	810a1a0 <__multiply+0x144>
 810a15c:	682b      	ldr	r3, [r5, #0]
 810a15e:	f104 0c14 	add.w	ip, r4, #20
 810a162:	46ae      	mov	lr, r5
 810a164:	f04f 0a00 	mov.w	sl, #0
 810a168:	f8bc b000 	ldrh.w	fp, [ip]
 810a16c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 810a170:	fb09 770b 	mla	r7, r9, fp, r7
 810a174:	4457      	add	r7, sl
 810a176:	b29b      	uxth	r3, r3
 810a178:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 810a17c:	f84e 3b04 	str.w	r3, [lr], #4
 810a180:	f85c 3b04 	ldr.w	r3, [ip], #4
 810a184:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 810a188:	f8be 3000 	ldrh.w	r3, [lr]
 810a18c:	fb09 330a 	mla	r3, r9, sl, r3
 810a190:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 810a194:	4562      	cmp	r2, ip
 810a196:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 810a19a:	d8e5      	bhi.n	810a168 <__multiply+0x10c>
 810a19c:	9f01      	ldr	r7, [sp, #4]
 810a19e:	51eb      	str	r3, [r5, r7]
 810a1a0:	3504      	adds	r5, #4
 810a1a2:	e799      	b.n	810a0d8 <__multiply+0x7c>
 810a1a4:	3e01      	subs	r6, #1
 810a1a6:	e79b      	b.n	810a0e0 <__multiply+0x84>
 810a1a8:	0810b481 	.word	0x0810b481
 810a1ac:	0810b492 	.word	0x0810b492

0810a1b0 <__pow5mult>:
 810a1b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810a1b4:	4615      	mov	r5, r2
 810a1b6:	f012 0203 	ands.w	r2, r2, #3
 810a1ba:	4607      	mov	r7, r0
 810a1bc:	460e      	mov	r6, r1
 810a1be:	d007      	beq.n	810a1d0 <__pow5mult+0x20>
 810a1c0:	4c25      	ldr	r4, [pc, #148]	@ (810a258 <__pow5mult+0xa8>)
 810a1c2:	3a01      	subs	r2, #1
 810a1c4:	2300      	movs	r3, #0
 810a1c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810a1ca:	f7ff fe9f 	bl	8109f0c <__multadd>
 810a1ce:	4606      	mov	r6, r0
 810a1d0:	10ad      	asrs	r5, r5, #2
 810a1d2:	d03d      	beq.n	810a250 <__pow5mult+0xa0>
 810a1d4:	69fc      	ldr	r4, [r7, #28]
 810a1d6:	b97c      	cbnz	r4, 810a1f8 <__pow5mult+0x48>
 810a1d8:	2010      	movs	r0, #16
 810a1da:	f7ff fd7f 	bl	8109cdc <malloc>
 810a1de:	4602      	mov	r2, r0
 810a1e0:	61f8      	str	r0, [r7, #28]
 810a1e2:	b928      	cbnz	r0, 810a1f0 <__pow5mult+0x40>
 810a1e4:	4b1d      	ldr	r3, [pc, #116]	@ (810a25c <__pow5mult+0xac>)
 810a1e6:	481e      	ldr	r0, [pc, #120]	@ (810a260 <__pow5mult+0xb0>)
 810a1e8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 810a1ec:	f7fe fec2 	bl	8108f74 <__assert_func>
 810a1f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810a1f4:	6004      	str	r4, [r0, #0]
 810a1f6:	60c4      	str	r4, [r0, #12]
 810a1f8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 810a1fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810a200:	b94c      	cbnz	r4, 810a216 <__pow5mult+0x66>
 810a202:	f240 2171 	movw	r1, #625	@ 0x271
 810a206:	4638      	mov	r0, r7
 810a208:	f7ff ff12 	bl	810a030 <__i2b>
 810a20c:	2300      	movs	r3, #0
 810a20e:	f8c8 0008 	str.w	r0, [r8, #8]
 810a212:	4604      	mov	r4, r0
 810a214:	6003      	str	r3, [r0, #0]
 810a216:	f04f 0900 	mov.w	r9, #0
 810a21a:	07eb      	lsls	r3, r5, #31
 810a21c:	d50a      	bpl.n	810a234 <__pow5mult+0x84>
 810a21e:	4631      	mov	r1, r6
 810a220:	4622      	mov	r2, r4
 810a222:	4638      	mov	r0, r7
 810a224:	f7ff ff1a 	bl	810a05c <__multiply>
 810a228:	4631      	mov	r1, r6
 810a22a:	4680      	mov	r8, r0
 810a22c:	4638      	mov	r0, r7
 810a22e:	f7ff fe4b 	bl	8109ec8 <_Bfree>
 810a232:	4646      	mov	r6, r8
 810a234:	106d      	asrs	r5, r5, #1
 810a236:	d00b      	beq.n	810a250 <__pow5mult+0xa0>
 810a238:	6820      	ldr	r0, [r4, #0]
 810a23a:	b938      	cbnz	r0, 810a24c <__pow5mult+0x9c>
 810a23c:	4622      	mov	r2, r4
 810a23e:	4621      	mov	r1, r4
 810a240:	4638      	mov	r0, r7
 810a242:	f7ff ff0b 	bl	810a05c <__multiply>
 810a246:	6020      	str	r0, [r4, #0]
 810a248:	f8c0 9000 	str.w	r9, [r0]
 810a24c:	4604      	mov	r4, r0
 810a24e:	e7e4      	b.n	810a21a <__pow5mult+0x6a>
 810a250:	4630      	mov	r0, r6
 810a252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810a256:	bf00      	nop
 810a258:	0810b4ec 	.word	0x0810b4ec
 810a25c:	0810b23c 	.word	0x0810b23c
 810a260:	0810b492 	.word	0x0810b492

0810a264 <__lshift>:
 810a264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810a268:	460c      	mov	r4, r1
 810a26a:	6849      	ldr	r1, [r1, #4]
 810a26c:	6923      	ldr	r3, [r4, #16]
 810a26e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 810a272:	68a3      	ldr	r3, [r4, #8]
 810a274:	4607      	mov	r7, r0
 810a276:	4691      	mov	r9, r2
 810a278:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810a27c:	f108 0601 	add.w	r6, r8, #1
 810a280:	42b3      	cmp	r3, r6
 810a282:	db0b      	blt.n	810a29c <__lshift+0x38>
 810a284:	4638      	mov	r0, r7
 810a286:	f7ff fddf 	bl	8109e48 <_Balloc>
 810a28a:	4605      	mov	r5, r0
 810a28c:	b948      	cbnz	r0, 810a2a2 <__lshift+0x3e>
 810a28e:	4602      	mov	r2, r0
 810a290:	4b28      	ldr	r3, [pc, #160]	@ (810a334 <__lshift+0xd0>)
 810a292:	4829      	ldr	r0, [pc, #164]	@ (810a338 <__lshift+0xd4>)
 810a294:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 810a298:	f7fe fe6c 	bl	8108f74 <__assert_func>
 810a29c:	3101      	adds	r1, #1
 810a29e:	005b      	lsls	r3, r3, #1
 810a2a0:	e7ee      	b.n	810a280 <__lshift+0x1c>
 810a2a2:	2300      	movs	r3, #0
 810a2a4:	f100 0114 	add.w	r1, r0, #20
 810a2a8:	f100 0210 	add.w	r2, r0, #16
 810a2ac:	4618      	mov	r0, r3
 810a2ae:	4553      	cmp	r3, sl
 810a2b0:	db33      	blt.n	810a31a <__lshift+0xb6>
 810a2b2:	6920      	ldr	r0, [r4, #16]
 810a2b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810a2b8:	f104 0314 	add.w	r3, r4, #20
 810a2bc:	f019 091f 	ands.w	r9, r9, #31
 810a2c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810a2c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 810a2c8:	d02b      	beq.n	810a322 <__lshift+0xbe>
 810a2ca:	f1c9 0e20 	rsb	lr, r9, #32
 810a2ce:	468a      	mov	sl, r1
 810a2d0:	2200      	movs	r2, #0
 810a2d2:	6818      	ldr	r0, [r3, #0]
 810a2d4:	fa00 f009 	lsl.w	r0, r0, r9
 810a2d8:	4310      	orrs	r0, r2
 810a2da:	f84a 0b04 	str.w	r0, [sl], #4
 810a2de:	f853 2b04 	ldr.w	r2, [r3], #4
 810a2e2:	459c      	cmp	ip, r3
 810a2e4:	fa22 f20e 	lsr.w	r2, r2, lr
 810a2e8:	d8f3      	bhi.n	810a2d2 <__lshift+0x6e>
 810a2ea:	ebac 0304 	sub.w	r3, ip, r4
 810a2ee:	3b15      	subs	r3, #21
 810a2f0:	f023 0303 	bic.w	r3, r3, #3
 810a2f4:	3304      	adds	r3, #4
 810a2f6:	f104 0015 	add.w	r0, r4, #21
 810a2fa:	4584      	cmp	ip, r0
 810a2fc:	bf38      	it	cc
 810a2fe:	2304      	movcc	r3, #4
 810a300:	50ca      	str	r2, [r1, r3]
 810a302:	b10a      	cbz	r2, 810a308 <__lshift+0xa4>
 810a304:	f108 0602 	add.w	r6, r8, #2
 810a308:	3e01      	subs	r6, #1
 810a30a:	4638      	mov	r0, r7
 810a30c:	612e      	str	r6, [r5, #16]
 810a30e:	4621      	mov	r1, r4
 810a310:	f7ff fdda 	bl	8109ec8 <_Bfree>
 810a314:	4628      	mov	r0, r5
 810a316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810a31a:	f842 0f04 	str.w	r0, [r2, #4]!
 810a31e:	3301      	adds	r3, #1
 810a320:	e7c5      	b.n	810a2ae <__lshift+0x4a>
 810a322:	3904      	subs	r1, #4
 810a324:	f853 2b04 	ldr.w	r2, [r3], #4
 810a328:	f841 2f04 	str.w	r2, [r1, #4]!
 810a32c:	459c      	cmp	ip, r3
 810a32e:	d8f9      	bhi.n	810a324 <__lshift+0xc0>
 810a330:	e7ea      	b.n	810a308 <__lshift+0xa4>
 810a332:	bf00      	nop
 810a334:	0810b481 	.word	0x0810b481
 810a338:	0810b492 	.word	0x0810b492

0810a33c <__mcmp>:
 810a33c:	690a      	ldr	r2, [r1, #16]
 810a33e:	4603      	mov	r3, r0
 810a340:	6900      	ldr	r0, [r0, #16]
 810a342:	1a80      	subs	r0, r0, r2
 810a344:	b530      	push	{r4, r5, lr}
 810a346:	d10e      	bne.n	810a366 <__mcmp+0x2a>
 810a348:	3314      	adds	r3, #20
 810a34a:	3114      	adds	r1, #20
 810a34c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 810a350:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 810a354:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 810a358:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 810a35c:	4295      	cmp	r5, r2
 810a35e:	d003      	beq.n	810a368 <__mcmp+0x2c>
 810a360:	d205      	bcs.n	810a36e <__mcmp+0x32>
 810a362:	f04f 30ff 	mov.w	r0, #4294967295
 810a366:	bd30      	pop	{r4, r5, pc}
 810a368:	42a3      	cmp	r3, r4
 810a36a:	d3f3      	bcc.n	810a354 <__mcmp+0x18>
 810a36c:	e7fb      	b.n	810a366 <__mcmp+0x2a>
 810a36e:	2001      	movs	r0, #1
 810a370:	e7f9      	b.n	810a366 <__mcmp+0x2a>
	...

0810a374 <__mdiff>:
 810a374:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a378:	4689      	mov	r9, r1
 810a37a:	4606      	mov	r6, r0
 810a37c:	4611      	mov	r1, r2
 810a37e:	4648      	mov	r0, r9
 810a380:	4614      	mov	r4, r2
 810a382:	f7ff ffdb 	bl	810a33c <__mcmp>
 810a386:	1e05      	subs	r5, r0, #0
 810a388:	d112      	bne.n	810a3b0 <__mdiff+0x3c>
 810a38a:	4629      	mov	r1, r5
 810a38c:	4630      	mov	r0, r6
 810a38e:	f7ff fd5b 	bl	8109e48 <_Balloc>
 810a392:	4602      	mov	r2, r0
 810a394:	b928      	cbnz	r0, 810a3a2 <__mdiff+0x2e>
 810a396:	4b3f      	ldr	r3, [pc, #252]	@ (810a494 <__mdiff+0x120>)
 810a398:	f240 2137 	movw	r1, #567	@ 0x237
 810a39c:	483e      	ldr	r0, [pc, #248]	@ (810a498 <__mdiff+0x124>)
 810a39e:	f7fe fde9 	bl	8108f74 <__assert_func>
 810a3a2:	2301      	movs	r3, #1
 810a3a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810a3a8:	4610      	mov	r0, r2
 810a3aa:	b003      	add	sp, #12
 810a3ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a3b0:	bfbc      	itt	lt
 810a3b2:	464b      	movlt	r3, r9
 810a3b4:	46a1      	movlt	r9, r4
 810a3b6:	4630      	mov	r0, r6
 810a3b8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 810a3bc:	bfba      	itte	lt
 810a3be:	461c      	movlt	r4, r3
 810a3c0:	2501      	movlt	r5, #1
 810a3c2:	2500      	movge	r5, #0
 810a3c4:	f7ff fd40 	bl	8109e48 <_Balloc>
 810a3c8:	4602      	mov	r2, r0
 810a3ca:	b918      	cbnz	r0, 810a3d4 <__mdiff+0x60>
 810a3cc:	4b31      	ldr	r3, [pc, #196]	@ (810a494 <__mdiff+0x120>)
 810a3ce:	f240 2145 	movw	r1, #581	@ 0x245
 810a3d2:	e7e3      	b.n	810a39c <__mdiff+0x28>
 810a3d4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 810a3d8:	6926      	ldr	r6, [r4, #16]
 810a3da:	60c5      	str	r5, [r0, #12]
 810a3dc:	f109 0310 	add.w	r3, r9, #16
 810a3e0:	f109 0514 	add.w	r5, r9, #20
 810a3e4:	f104 0e14 	add.w	lr, r4, #20
 810a3e8:	f100 0b14 	add.w	fp, r0, #20
 810a3ec:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 810a3f0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 810a3f4:	9301      	str	r3, [sp, #4]
 810a3f6:	46d9      	mov	r9, fp
 810a3f8:	f04f 0c00 	mov.w	ip, #0
 810a3fc:	9b01      	ldr	r3, [sp, #4]
 810a3fe:	f85e 0b04 	ldr.w	r0, [lr], #4
 810a402:	f853 af04 	ldr.w	sl, [r3, #4]!
 810a406:	9301      	str	r3, [sp, #4]
 810a408:	fa1f f38a 	uxth.w	r3, sl
 810a40c:	4619      	mov	r1, r3
 810a40e:	b283      	uxth	r3, r0
 810a410:	1acb      	subs	r3, r1, r3
 810a412:	0c00      	lsrs	r0, r0, #16
 810a414:	4463      	add	r3, ip
 810a416:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 810a41a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 810a41e:	b29b      	uxth	r3, r3
 810a420:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 810a424:	4576      	cmp	r6, lr
 810a426:	f849 3b04 	str.w	r3, [r9], #4
 810a42a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 810a42e:	d8e5      	bhi.n	810a3fc <__mdiff+0x88>
 810a430:	1b33      	subs	r3, r6, r4
 810a432:	3b15      	subs	r3, #21
 810a434:	f023 0303 	bic.w	r3, r3, #3
 810a438:	3415      	adds	r4, #21
 810a43a:	3304      	adds	r3, #4
 810a43c:	42a6      	cmp	r6, r4
 810a43e:	bf38      	it	cc
 810a440:	2304      	movcc	r3, #4
 810a442:	441d      	add	r5, r3
 810a444:	445b      	add	r3, fp
 810a446:	461e      	mov	r6, r3
 810a448:	462c      	mov	r4, r5
 810a44a:	4544      	cmp	r4, r8
 810a44c:	d30e      	bcc.n	810a46c <__mdiff+0xf8>
 810a44e:	f108 0103 	add.w	r1, r8, #3
 810a452:	1b49      	subs	r1, r1, r5
 810a454:	f021 0103 	bic.w	r1, r1, #3
 810a458:	3d03      	subs	r5, #3
 810a45a:	45a8      	cmp	r8, r5
 810a45c:	bf38      	it	cc
 810a45e:	2100      	movcc	r1, #0
 810a460:	440b      	add	r3, r1
 810a462:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810a466:	b191      	cbz	r1, 810a48e <__mdiff+0x11a>
 810a468:	6117      	str	r7, [r2, #16]
 810a46a:	e79d      	b.n	810a3a8 <__mdiff+0x34>
 810a46c:	f854 1b04 	ldr.w	r1, [r4], #4
 810a470:	46e6      	mov	lr, ip
 810a472:	0c08      	lsrs	r0, r1, #16
 810a474:	fa1c fc81 	uxtah	ip, ip, r1
 810a478:	4471      	add	r1, lr
 810a47a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 810a47e:	b289      	uxth	r1, r1
 810a480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 810a484:	f846 1b04 	str.w	r1, [r6], #4
 810a488:	ea4f 4c20 	mov.w	ip, r0, asr #16
 810a48c:	e7dd      	b.n	810a44a <__mdiff+0xd6>
 810a48e:	3f01      	subs	r7, #1
 810a490:	e7e7      	b.n	810a462 <__mdiff+0xee>
 810a492:	bf00      	nop
 810a494:	0810b481 	.word	0x0810b481
 810a498:	0810b492 	.word	0x0810b492

0810a49c <__d2b>:
 810a49c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810a4a0:	460f      	mov	r7, r1
 810a4a2:	2101      	movs	r1, #1
 810a4a4:	ec59 8b10 	vmov	r8, r9, d0
 810a4a8:	4616      	mov	r6, r2
 810a4aa:	f7ff fccd 	bl	8109e48 <_Balloc>
 810a4ae:	4604      	mov	r4, r0
 810a4b0:	b930      	cbnz	r0, 810a4c0 <__d2b+0x24>
 810a4b2:	4602      	mov	r2, r0
 810a4b4:	4b23      	ldr	r3, [pc, #140]	@ (810a544 <__d2b+0xa8>)
 810a4b6:	4824      	ldr	r0, [pc, #144]	@ (810a548 <__d2b+0xac>)
 810a4b8:	f240 310f 	movw	r1, #783	@ 0x30f
 810a4bc:	f7fe fd5a 	bl	8108f74 <__assert_func>
 810a4c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 810a4c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810a4c8:	b10d      	cbz	r5, 810a4ce <__d2b+0x32>
 810a4ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 810a4ce:	9301      	str	r3, [sp, #4]
 810a4d0:	f1b8 0300 	subs.w	r3, r8, #0
 810a4d4:	d023      	beq.n	810a51e <__d2b+0x82>
 810a4d6:	4668      	mov	r0, sp
 810a4d8:	9300      	str	r3, [sp, #0]
 810a4da:	f7ff fd7c 	bl	8109fd6 <__lo0bits>
 810a4de:	e9dd 1200 	ldrd	r1, r2, [sp]
 810a4e2:	b1d0      	cbz	r0, 810a51a <__d2b+0x7e>
 810a4e4:	f1c0 0320 	rsb	r3, r0, #32
 810a4e8:	fa02 f303 	lsl.w	r3, r2, r3
 810a4ec:	430b      	orrs	r3, r1
 810a4ee:	40c2      	lsrs	r2, r0
 810a4f0:	6163      	str	r3, [r4, #20]
 810a4f2:	9201      	str	r2, [sp, #4]
 810a4f4:	9b01      	ldr	r3, [sp, #4]
 810a4f6:	61a3      	str	r3, [r4, #24]
 810a4f8:	2b00      	cmp	r3, #0
 810a4fa:	bf0c      	ite	eq
 810a4fc:	2201      	moveq	r2, #1
 810a4fe:	2202      	movne	r2, #2
 810a500:	6122      	str	r2, [r4, #16]
 810a502:	b1a5      	cbz	r5, 810a52e <__d2b+0x92>
 810a504:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 810a508:	4405      	add	r5, r0
 810a50a:	603d      	str	r5, [r7, #0]
 810a50c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 810a510:	6030      	str	r0, [r6, #0]
 810a512:	4620      	mov	r0, r4
 810a514:	b003      	add	sp, #12
 810a516:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810a51a:	6161      	str	r1, [r4, #20]
 810a51c:	e7ea      	b.n	810a4f4 <__d2b+0x58>
 810a51e:	a801      	add	r0, sp, #4
 810a520:	f7ff fd59 	bl	8109fd6 <__lo0bits>
 810a524:	9b01      	ldr	r3, [sp, #4]
 810a526:	6163      	str	r3, [r4, #20]
 810a528:	3020      	adds	r0, #32
 810a52a:	2201      	movs	r2, #1
 810a52c:	e7e8      	b.n	810a500 <__d2b+0x64>
 810a52e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 810a532:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 810a536:	6038      	str	r0, [r7, #0]
 810a538:	6918      	ldr	r0, [r3, #16]
 810a53a:	f7ff fd2d 	bl	8109f98 <__hi0bits>
 810a53e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 810a542:	e7e5      	b.n	810a510 <__d2b+0x74>
 810a544:	0810b481 	.word	0x0810b481
 810a548:	0810b492 	.word	0x0810b492

0810a54c <__ssputs_r>:
 810a54c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810a550:	688e      	ldr	r6, [r1, #8]
 810a552:	461f      	mov	r7, r3
 810a554:	42be      	cmp	r6, r7
 810a556:	680b      	ldr	r3, [r1, #0]
 810a558:	4682      	mov	sl, r0
 810a55a:	460c      	mov	r4, r1
 810a55c:	4690      	mov	r8, r2
 810a55e:	d82d      	bhi.n	810a5bc <__ssputs_r+0x70>
 810a560:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 810a564:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 810a568:	d026      	beq.n	810a5b8 <__ssputs_r+0x6c>
 810a56a:	6965      	ldr	r5, [r4, #20]
 810a56c:	6909      	ldr	r1, [r1, #16]
 810a56e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810a572:	eba3 0901 	sub.w	r9, r3, r1
 810a576:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810a57a:	1c7b      	adds	r3, r7, #1
 810a57c:	444b      	add	r3, r9
 810a57e:	106d      	asrs	r5, r5, #1
 810a580:	429d      	cmp	r5, r3
 810a582:	bf38      	it	cc
 810a584:	461d      	movcc	r5, r3
 810a586:	0553      	lsls	r3, r2, #21
 810a588:	d527      	bpl.n	810a5da <__ssputs_r+0x8e>
 810a58a:	4629      	mov	r1, r5
 810a58c:	f7ff fbd0 	bl	8109d30 <_malloc_r>
 810a590:	4606      	mov	r6, r0
 810a592:	b360      	cbz	r0, 810a5ee <__ssputs_r+0xa2>
 810a594:	6921      	ldr	r1, [r4, #16]
 810a596:	464a      	mov	r2, r9
 810a598:	f7fe fcdd 	bl	8108f56 <memcpy>
 810a59c:	89a3      	ldrh	r3, [r4, #12]
 810a59e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 810a5a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 810a5a6:	81a3      	strh	r3, [r4, #12]
 810a5a8:	6126      	str	r6, [r4, #16]
 810a5aa:	6165      	str	r5, [r4, #20]
 810a5ac:	444e      	add	r6, r9
 810a5ae:	eba5 0509 	sub.w	r5, r5, r9
 810a5b2:	6026      	str	r6, [r4, #0]
 810a5b4:	60a5      	str	r5, [r4, #8]
 810a5b6:	463e      	mov	r6, r7
 810a5b8:	42be      	cmp	r6, r7
 810a5ba:	d900      	bls.n	810a5be <__ssputs_r+0x72>
 810a5bc:	463e      	mov	r6, r7
 810a5be:	6820      	ldr	r0, [r4, #0]
 810a5c0:	4632      	mov	r2, r6
 810a5c2:	4641      	mov	r1, r8
 810a5c4:	f000 fb7c 	bl	810acc0 <memmove>
 810a5c8:	68a3      	ldr	r3, [r4, #8]
 810a5ca:	1b9b      	subs	r3, r3, r6
 810a5cc:	60a3      	str	r3, [r4, #8]
 810a5ce:	6823      	ldr	r3, [r4, #0]
 810a5d0:	4433      	add	r3, r6
 810a5d2:	6023      	str	r3, [r4, #0]
 810a5d4:	2000      	movs	r0, #0
 810a5d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810a5da:	462a      	mov	r2, r5
 810a5dc:	f000 fbe9 	bl	810adb2 <_realloc_r>
 810a5e0:	4606      	mov	r6, r0
 810a5e2:	2800      	cmp	r0, #0
 810a5e4:	d1e0      	bne.n	810a5a8 <__ssputs_r+0x5c>
 810a5e6:	6921      	ldr	r1, [r4, #16]
 810a5e8:	4650      	mov	r0, sl
 810a5ea:	f7ff fb2d 	bl	8109c48 <_free_r>
 810a5ee:	230c      	movs	r3, #12
 810a5f0:	f8ca 3000 	str.w	r3, [sl]
 810a5f4:	89a3      	ldrh	r3, [r4, #12]
 810a5f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810a5fa:	81a3      	strh	r3, [r4, #12]
 810a5fc:	f04f 30ff 	mov.w	r0, #4294967295
 810a600:	e7e9      	b.n	810a5d6 <__ssputs_r+0x8a>
	...

0810a604 <_svfiprintf_r>:
 810a604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a608:	4698      	mov	r8, r3
 810a60a:	898b      	ldrh	r3, [r1, #12]
 810a60c:	061b      	lsls	r3, r3, #24
 810a60e:	b09d      	sub	sp, #116	@ 0x74
 810a610:	4607      	mov	r7, r0
 810a612:	460d      	mov	r5, r1
 810a614:	4614      	mov	r4, r2
 810a616:	d510      	bpl.n	810a63a <_svfiprintf_r+0x36>
 810a618:	690b      	ldr	r3, [r1, #16]
 810a61a:	b973      	cbnz	r3, 810a63a <_svfiprintf_r+0x36>
 810a61c:	2140      	movs	r1, #64	@ 0x40
 810a61e:	f7ff fb87 	bl	8109d30 <_malloc_r>
 810a622:	6028      	str	r0, [r5, #0]
 810a624:	6128      	str	r0, [r5, #16]
 810a626:	b930      	cbnz	r0, 810a636 <_svfiprintf_r+0x32>
 810a628:	230c      	movs	r3, #12
 810a62a:	603b      	str	r3, [r7, #0]
 810a62c:	f04f 30ff 	mov.w	r0, #4294967295
 810a630:	b01d      	add	sp, #116	@ 0x74
 810a632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a636:	2340      	movs	r3, #64	@ 0x40
 810a638:	616b      	str	r3, [r5, #20]
 810a63a:	2300      	movs	r3, #0
 810a63c:	9309      	str	r3, [sp, #36]	@ 0x24
 810a63e:	2320      	movs	r3, #32
 810a640:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 810a644:	f8cd 800c 	str.w	r8, [sp, #12]
 810a648:	2330      	movs	r3, #48	@ 0x30
 810a64a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 810a7e8 <_svfiprintf_r+0x1e4>
 810a64e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 810a652:	f04f 0901 	mov.w	r9, #1
 810a656:	4623      	mov	r3, r4
 810a658:	469a      	mov	sl, r3
 810a65a:	f813 2b01 	ldrb.w	r2, [r3], #1
 810a65e:	b10a      	cbz	r2, 810a664 <_svfiprintf_r+0x60>
 810a660:	2a25      	cmp	r2, #37	@ 0x25
 810a662:	d1f9      	bne.n	810a658 <_svfiprintf_r+0x54>
 810a664:	ebba 0b04 	subs.w	fp, sl, r4
 810a668:	d00b      	beq.n	810a682 <_svfiprintf_r+0x7e>
 810a66a:	465b      	mov	r3, fp
 810a66c:	4622      	mov	r2, r4
 810a66e:	4629      	mov	r1, r5
 810a670:	4638      	mov	r0, r7
 810a672:	f7ff ff6b 	bl	810a54c <__ssputs_r>
 810a676:	3001      	adds	r0, #1
 810a678:	f000 80a7 	beq.w	810a7ca <_svfiprintf_r+0x1c6>
 810a67c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810a67e:	445a      	add	r2, fp
 810a680:	9209      	str	r2, [sp, #36]	@ 0x24
 810a682:	f89a 3000 	ldrb.w	r3, [sl]
 810a686:	2b00      	cmp	r3, #0
 810a688:	f000 809f 	beq.w	810a7ca <_svfiprintf_r+0x1c6>
 810a68c:	2300      	movs	r3, #0
 810a68e:	f04f 32ff 	mov.w	r2, #4294967295
 810a692:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810a696:	f10a 0a01 	add.w	sl, sl, #1
 810a69a:	9304      	str	r3, [sp, #16]
 810a69c:	9307      	str	r3, [sp, #28]
 810a69e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 810a6a2:	931a      	str	r3, [sp, #104]	@ 0x68
 810a6a4:	4654      	mov	r4, sl
 810a6a6:	2205      	movs	r2, #5
 810a6a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 810a6ac:	484e      	ldr	r0, [pc, #312]	@ (810a7e8 <_svfiprintf_r+0x1e4>)
 810a6ae:	f7f5 fe27 	bl	8100300 <memchr>
 810a6b2:	9a04      	ldr	r2, [sp, #16]
 810a6b4:	b9d8      	cbnz	r0, 810a6ee <_svfiprintf_r+0xea>
 810a6b6:	06d0      	lsls	r0, r2, #27
 810a6b8:	bf44      	itt	mi
 810a6ba:	2320      	movmi	r3, #32
 810a6bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810a6c0:	0711      	lsls	r1, r2, #28
 810a6c2:	bf44      	itt	mi
 810a6c4:	232b      	movmi	r3, #43	@ 0x2b
 810a6c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810a6ca:	f89a 3000 	ldrb.w	r3, [sl]
 810a6ce:	2b2a      	cmp	r3, #42	@ 0x2a
 810a6d0:	d015      	beq.n	810a6fe <_svfiprintf_r+0xfa>
 810a6d2:	9a07      	ldr	r2, [sp, #28]
 810a6d4:	4654      	mov	r4, sl
 810a6d6:	2000      	movs	r0, #0
 810a6d8:	f04f 0c0a 	mov.w	ip, #10
 810a6dc:	4621      	mov	r1, r4
 810a6de:	f811 3b01 	ldrb.w	r3, [r1], #1
 810a6e2:	3b30      	subs	r3, #48	@ 0x30
 810a6e4:	2b09      	cmp	r3, #9
 810a6e6:	d94b      	bls.n	810a780 <_svfiprintf_r+0x17c>
 810a6e8:	b1b0      	cbz	r0, 810a718 <_svfiprintf_r+0x114>
 810a6ea:	9207      	str	r2, [sp, #28]
 810a6ec:	e014      	b.n	810a718 <_svfiprintf_r+0x114>
 810a6ee:	eba0 0308 	sub.w	r3, r0, r8
 810a6f2:	fa09 f303 	lsl.w	r3, r9, r3
 810a6f6:	4313      	orrs	r3, r2
 810a6f8:	9304      	str	r3, [sp, #16]
 810a6fa:	46a2      	mov	sl, r4
 810a6fc:	e7d2      	b.n	810a6a4 <_svfiprintf_r+0xa0>
 810a6fe:	9b03      	ldr	r3, [sp, #12]
 810a700:	1d19      	adds	r1, r3, #4
 810a702:	681b      	ldr	r3, [r3, #0]
 810a704:	9103      	str	r1, [sp, #12]
 810a706:	2b00      	cmp	r3, #0
 810a708:	bfbb      	ittet	lt
 810a70a:	425b      	neglt	r3, r3
 810a70c:	f042 0202 	orrlt.w	r2, r2, #2
 810a710:	9307      	strge	r3, [sp, #28]
 810a712:	9307      	strlt	r3, [sp, #28]
 810a714:	bfb8      	it	lt
 810a716:	9204      	strlt	r2, [sp, #16]
 810a718:	7823      	ldrb	r3, [r4, #0]
 810a71a:	2b2e      	cmp	r3, #46	@ 0x2e
 810a71c:	d10a      	bne.n	810a734 <_svfiprintf_r+0x130>
 810a71e:	7863      	ldrb	r3, [r4, #1]
 810a720:	2b2a      	cmp	r3, #42	@ 0x2a
 810a722:	d132      	bne.n	810a78a <_svfiprintf_r+0x186>
 810a724:	9b03      	ldr	r3, [sp, #12]
 810a726:	1d1a      	adds	r2, r3, #4
 810a728:	681b      	ldr	r3, [r3, #0]
 810a72a:	9203      	str	r2, [sp, #12]
 810a72c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 810a730:	3402      	adds	r4, #2
 810a732:	9305      	str	r3, [sp, #20]
 810a734:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 810a7f8 <_svfiprintf_r+0x1f4>
 810a738:	7821      	ldrb	r1, [r4, #0]
 810a73a:	2203      	movs	r2, #3
 810a73c:	4650      	mov	r0, sl
 810a73e:	f7f5 fddf 	bl	8100300 <memchr>
 810a742:	b138      	cbz	r0, 810a754 <_svfiprintf_r+0x150>
 810a744:	9b04      	ldr	r3, [sp, #16]
 810a746:	eba0 000a 	sub.w	r0, r0, sl
 810a74a:	2240      	movs	r2, #64	@ 0x40
 810a74c:	4082      	lsls	r2, r0
 810a74e:	4313      	orrs	r3, r2
 810a750:	3401      	adds	r4, #1
 810a752:	9304      	str	r3, [sp, #16]
 810a754:	f814 1b01 	ldrb.w	r1, [r4], #1
 810a758:	4824      	ldr	r0, [pc, #144]	@ (810a7ec <_svfiprintf_r+0x1e8>)
 810a75a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 810a75e:	2206      	movs	r2, #6
 810a760:	f7f5 fdce 	bl	8100300 <memchr>
 810a764:	2800      	cmp	r0, #0
 810a766:	d036      	beq.n	810a7d6 <_svfiprintf_r+0x1d2>
 810a768:	4b21      	ldr	r3, [pc, #132]	@ (810a7f0 <_svfiprintf_r+0x1ec>)
 810a76a:	bb1b      	cbnz	r3, 810a7b4 <_svfiprintf_r+0x1b0>
 810a76c:	9b03      	ldr	r3, [sp, #12]
 810a76e:	3307      	adds	r3, #7
 810a770:	f023 0307 	bic.w	r3, r3, #7
 810a774:	3308      	adds	r3, #8
 810a776:	9303      	str	r3, [sp, #12]
 810a778:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810a77a:	4433      	add	r3, r6
 810a77c:	9309      	str	r3, [sp, #36]	@ 0x24
 810a77e:	e76a      	b.n	810a656 <_svfiprintf_r+0x52>
 810a780:	fb0c 3202 	mla	r2, ip, r2, r3
 810a784:	460c      	mov	r4, r1
 810a786:	2001      	movs	r0, #1
 810a788:	e7a8      	b.n	810a6dc <_svfiprintf_r+0xd8>
 810a78a:	2300      	movs	r3, #0
 810a78c:	3401      	adds	r4, #1
 810a78e:	9305      	str	r3, [sp, #20]
 810a790:	4619      	mov	r1, r3
 810a792:	f04f 0c0a 	mov.w	ip, #10
 810a796:	4620      	mov	r0, r4
 810a798:	f810 2b01 	ldrb.w	r2, [r0], #1
 810a79c:	3a30      	subs	r2, #48	@ 0x30
 810a79e:	2a09      	cmp	r2, #9
 810a7a0:	d903      	bls.n	810a7aa <_svfiprintf_r+0x1a6>
 810a7a2:	2b00      	cmp	r3, #0
 810a7a4:	d0c6      	beq.n	810a734 <_svfiprintf_r+0x130>
 810a7a6:	9105      	str	r1, [sp, #20]
 810a7a8:	e7c4      	b.n	810a734 <_svfiprintf_r+0x130>
 810a7aa:	fb0c 2101 	mla	r1, ip, r1, r2
 810a7ae:	4604      	mov	r4, r0
 810a7b0:	2301      	movs	r3, #1
 810a7b2:	e7f0      	b.n	810a796 <_svfiprintf_r+0x192>
 810a7b4:	ab03      	add	r3, sp, #12
 810a7b6:	9300      	str	r3, [sp, #0]
 810a7b8:	462a      	mov	r2, r5
 810a7ba:	4b0e      	ldr	r3, [pc, #56]	@ (810a7f4 <_svfiprintf_r+0x1f0>)
 810a7bc:	a904      	add	r1, sp, #16
 810a7be:	4638      	mov	r0, r7
 810a7c0:	f7fd fd40 	bl	8108244 <_printf_float>
 810a7c4:	1c42      	adds	r2, r0, #1
 810a7c6:	4606      	mov	r6, r0
 810a7c8:	d1d6      	bne.n	810a778 <_svfiprintf_r+0x174>
 810a7ca:	89ab      	ldrh	r3, [r5, #12]
 810a7cc:	065b      	lsls	r3, r3, #25
 810a7ce:	f53f af2d 	bmi.w	810a62c <_svfiprintf_r+0x28>
 810a7d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 810a7d4:	e72c      	b.n	810a630 <_svfiprintf_r+0x2c>
 810a7d6:	ab03      	add	r3, sp, #12
 810a7d8:	9300      	str	r3, [sp, #0]
 810a7da:	462a      	mov	r2, r5
 810a7dc:	4b05      	ldr	r3, [pc, #20]	@ (810a7f4 <_svfiprintf_r+0x1f0>)
 810a7de:	a904      	add	r1, sp, #16
 810a7e0:	4638      	mov	r0, r7
 810a7e2:	f7fd ffc7 	bl	8108774 <_printf_i>
 810a7e6:	e7ed      	b.n	810a7c4 <_svfiprintf_r+0x1c0>
 810a7e8:	0810b5e8 	.word	0x0810b5e8
 810a7ec:	0810b5f2 	.word	0x0810b5f2
 810a7f0:	08108245 	.word	0x08108245
 810a7f4:	0810a54d 	.word	0x0810a54d
 810a7f8:	0810b5ee 	.word	0x0810b5ee

0810a7fc <__sfputc_r>:
 810a7fc:	6893      	ldr	r3, [r2, #8]
 810a7fe:	3b01      	subs	r3, #1
 810a800:	2b00      	cmp	r3, #0
 810a802:	b410      	push	{r4}
 810a804:	6093      	str	r3, [r2, #8]
 810a806:	da08      	bge.n	810a81a <__sfputc_r+0x1e>
 810a808:	6994      	ldr	r4, [r2, #24]
 810a80a:	42a3      	cmp	r3, r4
 810a80c:	db01      	blt.n	810a812 <__sfputc_r+0x16>
 810a80e:	290a      	cmp	r1, #10
 810a810:	d103      	bne.n	810a81a <__sfputc_r+0x1e>
 810a812:	f85d 4b04 	ldr.w	r4, [sp], #4
 810a816:	f7fe ba76 	b.w	8108d06 <__swbuf_r>
 810a81a:	6813      	ldr	r3, [r2, #0]
 810a81c:	1c58      	adds	r0, r3, #1
 810a81e:	6010      	str	r0, [r2, #0]
 810a820:	7019      	strb	r1, [r3, #0]
 810a822:	4608      	mov	r0, r1
 810a824:	f85d 4b04 	ldr.w	r4, [sp], #4
 810a828:	4770      	bx	lr

0810a82a <__sfputs_r>:
 810a82a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810a82c:	4606      	mov	r6, r0
 810a82e:	460f      	mov	r7, r1
 810a830:	4614      	mov	r4, r2
 810a832:	18d5      	adds	r5, r2, r3
 810a834:	42ac      	cmp	r4, r5
 810a836:	d101      	bne.n	810a83c <__sfputs_r+0x12>
 810a838:	2000      	movs	r0, #0
 810a83a:	e007      	b.n	810a84c <__sfputs_r+0x22>
 810a83c:	f814 1b01 	ldrb.w	r1, [r4], #1
 810a840:	463a      	mov	r2, r7
 810a842:	4630      	mov	r0, r6
 810a844:	f7ff ffda 	bl	810a7fc <__sfputc_r>
 810a848:	1c43      	adds	r3, r0, #1
 810a84a:	d1f3      	bne.n	810a834 <__sfputs_r+0xa>
 810a84c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810a850 <_vfiprintf_r>:
 810a850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a854:	460d      	mov	r5, r1
 810a856:	b09d      	sub	sp, #116	@ 0x74
 810a858:	4614      	mov	r4, r2
 810a85a:	4698      	mov	r8, r3
 810a85c:	4606      	mov	r6, r0
 810a85e:	b118      	cbz	r0, 810a868 <_vfiprintf_r+0x18>
 810a860:	6a03      	ldr	r3, [r0, #32]
 810a862:	b90b      	cbnz	r3, 810a868 <_vfiprintf_r+0x18>
 810a864:	f7fe f932 	bl	8108acc <__sinit>
 810a868:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 810a86a:	07d9      	lsls	r1, r3, #31
 810a86c:	d405      	bmi.n	810a87a <_vfiprintf_r+0x2a>
 810a86e:	89ab      	ldrh	r3, [r5, #12]
 810a870:	059a      	lsls	r2, r3, #22
 810a872:	d402      	bmi.n	810a87a <_vfiprintf_r+0x2a>
 810a874:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810a876:	f7fe fb6c 	bl	8108f52 <__retarget_lock_acquire_recursive>
 810a87a:	89ab      	ldrh	r3, [r5, #12]
 810a87c:	071b      	lsls	r3, r3, #28
 810a87e:	d501      	bpl.n	810a884 <_vfiprintf_r+0x34>
 810a880:	692b      	ldr	r3, [r5, #16]
 810a882:	b99b      	cbnz	r3, 810a8ac <_vfiprintf_r+0x5c>
 810a884:	4629      	mov	r1, r5
 810a886:	4630      	mov	r0, r6
 810a888:	f7fe fa7c 	bl	8108d84 <__swsetup_r>
 810a88c:	b170      	cbz	r0, 810a8ac <_vfiprintf_r+0x5c>
 810a88e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 810a890:	07dc      	lsls	r4, r3, #31
 810a892:	d504      	bpl.n	810a89e <_vfiprintf_r+0x4e>
 810a894:	f04f 30ff 	mov.w	r0, #4294967295
 810a898:	b01d      	add	sp, #116	@ 0x74
 810a89a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a89e:	89ab      	ldrh	r3, [r5, #12]
 810a8a0:	0598      	lsls	r0, r3, #22
 810a8a2:	d4f7      	bmi.n	810a894 <_vfiprintf_r+0x44>
 810a8a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810a8a6:	f7fe fb55 	bl	8108f54 <__retarget_lock_release_recursive>
 810a8aa:	e7f3      	b.n	810a894 <_vfiprintf_r+0x44>
 810a8ac:	2300      	movs	r3, #0
 810a8ae:	9309      	str	r3, [sp, #36]	@ 0x24
 810a8b0:	2320      	movs	r3, #32
 810a8b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 810a8b6:	f8cd 800c 	str.w	r8, [sp, #12]
 810a8ba:	2330      	movs	r3, #48	@ 0x30
 810a8bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 810aa6c <_vfiprintf_r+0x21c>
 810a8c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 810a8c4:	f04f 0901 	mov.w	r9, #1
 810a8c8:	4623      	mov	r3, r4
 810a8ca:	469a      	mov	sl, r3
 810a8cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 810a8d0:	b10a      	cbz	r2, 810a8d6 <_vfiprintf_r+0x86>
 810a8d2:	2a25      	cmp	r2, #37	@ 0x25
 810a8d4:	d1f9      	bne.n	810a8ca <_vfiprintf_r+0x7a>
 810a8d6:	ebba 0b04 	subs.w	fp, sl, r4
 810a8da:	d00b      	beq.n	810a8f4 <_vfiprintf_r+0xa4>
 810a8dc:	465b      	mov	r3, fp
 810a8de:	4622      	mov	r2, r4
 810a8e0:	4629      	mov	r1, r5
 810a8e2:	4630      	mov	r0, r6
 810a8e4:	f7ff ffa1 	bl	810a82a <__sfputs_r>
 810a8e8:	3001      	adds	r0, #1
 810a8ea:	f000 80a7 	beq.w	810aa3c <_vfiprintf_r+0x1ec>
 810a8ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810a8f0:	445a      	add	r2, fp
 810a8f2:	9209      	str	r2, [sp, #36]	@ 0x24
 810a8f4:	f89a 3000 	ldrb.w	r3, [sl]
 810a8f8:	2b00      	cmp	r3, #0
 810a8fa:	f000 809f 	beq.w	810aa3c <_vfiprintf_r+0x1ec>
 810a8fe:	2300      	movs	r3, #0
 810a900:	f04f 32ff 	mov.w	r2, #4294967295
 810a904:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810a908:	f10a 0a01 	add.w	sl, sl, #1
 810a90c:	9304      	str	r3, [sp, #16]
 810a90e:	9307      	str	r3, [sp, #28]
 810a910:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 810a914:	931a      	str	r3, [sp, #104]	@ 0x68
 810a916:	4654      	mov	r4, sl
 810a918:	2205      	movs	r2, #5
 810a91a:	f814 1b01 	ldrb.w	r1, [r4], #1
 810a91e:	4853      	ldr	r0, [pc, #332]	@ (810aa6c <_vfiprintf_r+0x21c>)
 810a920:	f7f5 fcee 	bl	8100300 <memchr>
 810a924:	9a04      	ldr	r2, [sp, #16]
 810a926:	b9d8      	cbnz	r0, 810a960 <_vfiprintf_r+0x110>
 810a928:	06d1      	lsls	r1, r2, #27
 810a92a:	bf44      	itt	mi
 810a92c:	2320      	movmi	r3, #32
 810a92e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810a932:	0713      	lsls	r3, r2, #28
 810a934:	bf44      	itt	mi
 810a936:	232b      	movmi	r3, #43	@ 0x2b
 810a938:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810a93c:	f89a 3000 	ldrb.w	r3, [sl]
 810a940:	2b2a      	cmp	r3, #42	@ 0x2a
 810a942:	d015      	beq.n	810a970 <_vfiprintf_r+0x120>
 810a944:	9a07      	ldr	r2, [sp, #28]
 810a946:	4654      	mov	r4, sl
 810a948:	2000      	movs	r0, #0
 810a94a:	f04f 0c0a 	mov.w	ip, #10
 810a94e:	4621      	mov	r1, r4
 810a950:	f811 3b01 	ldrb.w	r3, [r1], #1
 810a954:	3b30      	subs	r3, #48	@ 0x30
 810a956:	2b09      	cmp	r3, #9
 810a958:	d94b      	bls.n	810a9f2 <_vfiprintf_r+0x1a2>
 810a95a:	b1b0      	cbz	r0, 810a98a <_vfiprintf_r+0x13a>
 810a95c:	9207      	str	r2, [sp, #28]
 810a95e:	e014      	b.n	810a98a <_vfiprintf_r+0x13a>
 810a960:	eba0 0308 	sub.w	r3, r0, r8
 810a964:	fa09 f303 	lsl.w	r3, r9, r3
 810a968:	4313      	orrs	r3, r2
 810a96a:	9304      	str	r3, [sp, #16]
 810a96c:	46a2      	mov	sl, r4
 810a96e:	e7d2      	b.n	810a916 <_vfiprintf_r+0xc6>
 810a970:	9b03      	ldr	r3, [sp, #12]
 810a972:	1d19      	adds	r1, r3, #4
 810a974:	681b      	ldr	r3, [r3, #0]
 810a976:	9103      	str	r1, [sp, #12]
 810a978:	2b00      	cmp	r3, #0
 810a97a:	bfbb      	ittet	lt
 810a97c:	425b      	neglt	r3, r3
 810a97e:	f042 0202 	orrlt.w	r2, r2, #2
 810a982:	9307      	strge	r3, [sp, #28]
 810a984:	9307      	strlt	r3, [sp, #28]
 810a986:	bfb8      	it	lt
 810a988:	9204      	strlt	r2, [sp, #16]
 810a98a:	7823      	ldrb	r3, [r4, #0]
 810a98c:	2b2e      	cmp	r3, #46	@ 0x2e
 810a98e:	d10a      	bne.n	810a9a6 <_vfiprintf_r+0x156>
 810a990:	7863      	ldrb	r3, [r4, #1]
 810a992:	2b2a      	cmp	r3, #42	@ 0x2a
 810a994:	d132      	bne.n	810a9fc <_vfiprintf_r+0x1ac>
 810a996:	9b03      	ldr	r3, [sp, #12]
 810a998:	1d1a      	adds	r2, r3, #4
 810a99a:	681b      	ldr	r3, [r3, #0]
 810a99c:	9203      	str	r2, [sp, #12]
 810a99e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 810a9a2:	3402      	adds	r4, #2
 810a9a4:	9305      	str	r3, [sp, #20]
 810a9a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 810aa7c <_vfiprintf_r+0x22c>
 810a9aa:	7821      	ldrb	r1, [r4, #0]
 810a9ac:	2203      	movs	r2, #3
 810a9ae:	4650      	mov	r0, sl
 810a9b0:	f7f5 fca6 	bl	8100300 <memchr>
 810a9b4:	b138      	cbz	r0, 810a9c6 <_vfiprintf_r+0x176>
 810a9b6:	9b04      	ldr	r3, [sp, #16]
 810a9b8:	eba0 000a 	sub.w	r0, r0, sl
 810a9bc:	2240      	movs	r2, #64	@ 0x40
 810a9be:	4082      	lsls	r2, r0
 810a9c0:	4313      	orrs	r3, r2
 810a9c2:	3401      	adds	r4, #1
 810a9c4:	9304      	str	r3, [sp, #16]
 810a9c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 810a9ca:	4829      	ldr	r0, [pc, #164]	@ (810aa70 <_vfiprintf_r+0x220>)
 810a9cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 810a9d0:	2206      	movs	r2, #6
 810a9d2:	f7f5 fc95 	bl	8100300 <memchr>
 810a9d6:	2800      	cmp	r0, #0
 810a9d8:	d03f      	beq.n	810aa5a <_vfiprintf_r+0x20a>
 810a9da:	4b26      	ldr	r3, [pc, #152]	@ (810aa74 <_vfiprintf_r+0x224>)
 810a9dc:	bb1b      	cbnz	r3, 810aa26 <_vfiprintf_r+0x1d6>
 810a9de:	9b03      	ldr	r3, [sp, #12]
 810a9e0:	3307      	adds	r3, #7
 810a9e2:	f023 0307 	bic.w	r3, r3, #7
 810a9e6:	3308      	adds	r3, #8
 810a9e8:	9303      	str	r3, [sp, #12]
 810a9ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810a9ec:	443b      	add	r3, r7
 810a9ee:	9309      	str	r3, [sp, #36]	@ 0x24
 810a9f0:	e76a      	b.n	810a8c8 <_vfiprintf_r+0x78>
 810a9f2:	fb0c 3202 	mla	r2, ip, r2, r3
 810a9f6:	460c      	mov	r4, r1
 810a9f8:	2001      	movs	r0, #1
 810a9fa:	e7a8      	b.n	810a94e <_vfiprintf_r+0xfe>
 810a9fc:	2300      	movs	r3, #0
 810a9fe:	3401      	adds	r4, #1
 810aa00:	9305      	str	r3, [sp, #20]
 810aa02:	4619      	mov	r1, r3
 810aa04:	f04f 0c0a 	mov.w	ip, #10
 810aa08:	4620      	mov	r0, r4
 810aa0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 810aa0e:	3a30      	subs	r2, #48	@ 0x30
 810aa10:	2a09      	cmp	r2, #9
 810aa12:	d903      	bls.n	810aa1c <_vfiprintf_r+0x1cc>
 810aa14:	2b00      	cmp	r3, #0
 810aa16:	d0c6      	beq.n	810a9a6 <_vfiprintf_r+0x156>
 810aa18:	9105      	str	r1, [sp, #20]
 810aa1a:	e7c4      	b.n	810a9a6 <_vfiprintf_r+0x156>
 810aa1c:	fb0c 2101 	mla	r1, ip, r1, r2
 810aa20:	4604      	mov	r4, r0
 810aa22:	2301      	movs	r3, #1
 810aa24:	e7f0      	b.n	810aa08 <_vfiprintf_r+0x1b8>
 810aa26:	ab03      	add	r3, sp, #12
 810aa28:	9300      	str	r3, [sp, #0]
 810aa2a:	462a      	mov	r2, r5
 810aa2c:	4b12      	ldr	r3, [pc, #72]	@ (810aa78 <_vfiprintf_r+0x228>)
 810aa2e:	a904      	add	r1, sp, #16
 810aa30:	4630      	mov	r0, r6
 810aa32:	f7fd fc07 	bl	8108244 <_printf_float>
 810aa36:	4607      	mov	r7, r0
 810aa38:	1c78      	adds	r0, r7, #1
 810aa3a:	d1d6      	bne.n	810a9ea <_vfiprintf_r+0x19a>
 810aa3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 810aa3e:	07d9      	lsls	r1, r3, #31
 810aa40:	d405      	bmi.n	810aa4e <_vfiprintf_r+0x1fe>
 810aa42:	89ab      	ldrh	r3, [r5, #12]
 810aa44:	059a      	lsls	r2, r3, #22
 810aa46:	d402      	bmi.n	810aa4e <_vfiprintf_r+0x1fe>
 810aa48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810aa4a:	f7fe fa83 	bl	8108f54 <__retarget_lock_release_recursive>
 810aa4e:	89ab      	ldrh	r3, [r5, #12]
 810aa50:	065b      	lsls	r3, r3, #25
 810aa52:	f53f af1f 	bmi.w	810a894 <_vfiprintf_r+0x44>
 810aa56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 810aa58:	e71e      	b.n	810a898 <_vfiprintf_r+0x48>
 810aa5a:	ab03      	add	r3, sp, #12
 810aa5c:	9300      	str	r3, [sp, #0]
 810aa5e:	462a      	mov	r2, r5
 810aa60:	4b05      	ldr	r3, [pc, #20]	@ (810aa78 <_vfiprintf_r+0x228>)
 810aa62:	a904      	add	r1, sp, #16
 810aa64:	4630      	mov	r0, r6
 810aa66:	f7fd fe85 	bl	8108774 <_printf_i>
 810aa6a:	e7e4      	b.n	810aa36 <_vfiprintf_r+0x1e6>
 810aa6c:	0810b5e8 	.word	0x0810b5e8
 810aa70:	0810b5f2 	.word	0x0810b5f2
 810aa74:	08108245 	.word	0x08108245
 810aa78:	0810a82b 	.word	0x0810a82b
 810aa7c:	0810b5ee 	.word	0x0810b5ee

0810aa80 <__sflush_r>:
 810aa80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 810aa84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810aa88:	0716      	lsls	r6, r2, #28
 810aa8a:	4605      	mov	r5, r0
 810aa8c:	460c      	mov	r4, r1
 810aa8e:	d454      	bmi.n	810ab3a <__sflush_r+0xba>
 810aa90:	684b      	ldr	r3, [r1, #4]
 810aa92:	2b00      	cmp	r3, #0
 810aa94:	dc02      	bgt.n	810aa9c <__sflush_r+0x1c>
 810aa96:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 810aa98:	2b00      	cmp	r3, #0
 810aa9a:	dd48      	ble.n	810ab2e <__sflush_r+0xae>
 810aa9c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 810aa9e:	2e00      	cmp	r6, #0
 810aaa0:	d045      	beq.n	810ab2e <__sflush_r+0xae>
 810aaa2:	2300      	movs	r3, #0
 810aaa4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 810aaa8:	682f      	ldr	r7, [r5, #0]
 810aaaa:	6a21      	ldr	r1, [r4, #32]
 810aaac:	602b      	str	r3, [r5, #0]
 810aaae:	d030      	beq.n	810ab12 <__sflush_r+0x92>
 810aab0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 810aab2:	89a3      	ldrh	r3, [r4, #12]
 810aab4:	0759      	lsls	r1, r3, #29
 810aab6:	d505      	bpl.n	810aac4 <__sflush_r+0x44>
 810aab8:	6863      	ldr	r3, [r4, #4]
 810aaba:	1ad2      	subs	r2, r2, r3
 810aabc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 810aabe:	b10b      	cbz	r3, 810aac4 <__sflush_r+0x44>
 810aac0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 810aac2:	1ad2      	subs	r2, r2, r3
 810aac4:	2300      	movs	r3, #0
 810aac6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 810aac8:	6a21      	ldr	r1, [r4, #32]
 810aaca:	4628      	mov	r0, r5
 810aacc:	47b0      	blx	r6
 810aace:	1c43      	adds	r3, r0, #1
 810aad0:	89a3      	ldrh	r3, [r4, #12]
 810aad2:	d106      	bne.n	810aae2 <__sflush_r+0x62>
 810aad4:	6829      	ldr	r1, [r5, #0]
 810aad6:	291d      	cmp	r1, #29
 810aad8:	d82b      	bhi.n	810ab32 <__sflush_r+0xb2>
 810aada:	4a2a      	ldr	r2, [pc, #168]	@ (810ab84 <__sflush_r+0x104>)
 810aadc:	410a      	asrs	r2, r1
 810aade:	07d6      	lsls	r6, r2, #31
 810aae0:	d427      	bmi.n	810ab32 <__sflush_r+0xb2>
 810aae2:	2200      	movs	r2, #0
 810aae4:	6062      	str	r2, [r4, #4]
 810aae6:	04d9      	lsls	r1, r3, #19
 810aae8:	6922      	ldr	r2, [r4, #16]
 810aaea:	6022      	str	r2, [r4, #0]
 810aaec:	d504      	bpl.n	810aaf8 <__sflush_r+0x78>
 810aaee:	1c42      	adds	r2, r0, #1
 810aaf0:	d101      	bne.n	810aaf6 <__sflush_r+0x76>
 810aaf2:	682b      	ldr	r3, [r5, #0]
 810aaf4:	b903      	cbnz	r3, 810aaf8 <__sflush_r+0x78>
 810aaf6:	6560      	str	r0, [r4, #84]	@ 0x54
 810aaf8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 810aafa:	602f      	str	r7, [r5, #0]
 810aafc:	b1b9      	cbz	r1, 810ab2e <__sflush_r+0xae>
 810aafe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 810ab02:	4299      	cmp	r1, r3
 810ab04:	d002      	beq.n	810ab0c <__sflush_r+0x8c>
 810ab06:	4628      	mov	r0, r5
 810ab08:	f7ff f89e 	bl	8109c48 <_free_r>
 810ab0c:	2300      	movs	r3, #0
 810ab0e:	6363      	str	r3, [r4, #52]	@ 0x34
 810ab10:	e00d      	b.n	810ab2e <__sflush_r+0xae>
 810ab12:	2301      	movs	r3, #1
 810ab14:	4628      	mov	r0, r5
 810ab16:	47b0      	blx	r6
 810ab18:	4602      	mov	r2, r0
 810ab1a:	1c50      	adds	r0, r2, #1
 810ab1c:	d1c9      	bne.n	810aab2 <__sflush_r+0x32>
 810ab1e:	682b      	ldr	r3, [r5, #0]
 810ab20:	2b00      	cmp	r3, #0
 810ab22:	d0c6      	beq.n	810aab2 <__sflush_r+0x32>
 810ab24:	2b1d      	cmp	r3, #29
 810ab26:	d001      	beq.n	810ab2c <__sflush_r+0xac>
 810ab28:	2b16      	cmp	r3, #22
 810ab2a:	d11e      	bne.n	810ab6a <__sflush_r+0xea>
 810ab2c:	602f      	str	r7, [r5, #0]
 810ab2e:	2000      	movs	r0, #0
 810ab30:	e022      	b.n	810ab78 <__sflush_r+0xf8>
 810ab32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810ab36:	b21b      	sxth	r3, r3
 810ab38:	e01b      	b.n	810ab72 <__sflush_r+0xf2>
 810ab3a:	690f      	ldr	r7, [r1, #16]
 810ab3c:	2f00      	cmp	r7, #0
 810ab3e:	d0f6      	beq.n	810ab2e <__sflush_r+0xae>
 810ab40:	0793      	lsls	r3, r2, #30
 810ab42:	680e      	ldr	r6, [r1, #0]
 810ab44:	bf08      	it	eq
 810ab46:	694b      	ldreq	r3, [r1, #20]
 810ab48:	600f      	str	r7, [r1, #0]
 810ab4a:	bf18      	it	ne
 810ab4c:	2300      	movne	r3, #0
 810ab4e:	eba6 0807 	sub.w	r8, r6, r7
 810ab52:	608b      	str	r3, [r1, #8]
 810ab54:	f1b8 0f00 	cmp.w	r8, #0
 810ab58:	dde9      	ble.n	810ab2e <__sflush_r+0xae>
 810ab5a:	6a21      	ldr	r1, [r4, #32]
 810ab5c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 810ab5e:	4643      	mov	r3, r8
 810ab60:	463a      	mov	r2, r7
 810ab62:	4628      	mov	r0, r5
 810ab64:	47b0      	blx	r6
 810ab66:	2800      	cmp	r0, #0
 810ab68:	dc08      	bgt.n	810ab7c <__sflush_r+0xfc>
 810ab6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810ab6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810ab72:	81a3      	strh	r3, [r4, #12]
 810ab74:	f04f 30ff 	mov.w	r0, #4294967295
 810ab78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810ab7c:	4407      	add	r7, r0
 810ab7e:	eba8 0800 	sub.w	r8, r8, r0
 810ab82:	e7e7      	b.n	810ab54 <__sflush_r+0xd4>
 810ab84:	dfbffffe 	.word	0xdfbffffe

0810ab88 <_fflush_r>:
 810ab88:	b538      	push	{r3, r4, r5, lr}
 810ab8a:	690b      	ldr	r3, [r1, #16]
 810ab8c:	4605      	mov	r5, r0
 810ab8e:	460c      	mov	r4, r1
 810ab90:	b913      	cbnz	r3, 810ab98 <_fflush_r+0x10>
 810ab92:	2500      	movs	r5, #0
 810ab94:	4628      	mov	r0, r5
 810ab96:	bd38      	pop	{r3, r4, r5, pc}
 810ab98:	b118      	cbz	r0, 810aba2 <_fflush_r+0x1a>
 810ab9a:	6a03      	ldr	r3, [r0, #32]
 810ab9c:	b90b      	cbnz	r3, 810aba2 <_fflush_r+0x1a>
 810ab9e:	f7fd ff95 	bl	8108acc <__sinit>
 810aba2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810aba6:	2b00      	cmp	r3, #0
 810aba8:	d0f3      	beq.n	810ab92 <_fflush_r+0xa>
 810abaa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 810abac:	07d0      	lsls	r0, r2, #31
 810abae:	d404      	bmi.n	810abba <_fflush_r+0x32>
 810abb0:	0599      	lsls	r1, r3, #22
 810abb2:	d402      	bmi.n	810abba <_fflush_r+0x32>
 810abb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810abb6:	f7fe f9cc 	bl	8108f52 <__retarget_lock_acquire_recursive>
 810abba:	4628      	mov	r0, r5
 810abbc:	4621      	mov	r1, r4
 810abbe:	f7ff ff5f 	bl	810aa80 <__sflush_r>
 810abc2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810abc4:	07da      	lsls	r2, r3, #31
 810abc6:	4605      	mov	r5, r0
 810abc8:	d4e4      	bmi.n	810ab94 <_fflush_r+0xc>
 810abca:	89a3      	ldrh	r3, [r4, #12]
 810abcc:	059b      	lsls	r3, r3, #22
 810abce:	d4e1      	bmi.n	810ab94 <_fflush_r+0xc>
 810abd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810abd2:	f7fe f9bf 	bl	8108f54 <__retarget_lock_release_recursive>
 810abd6:	e7dd      	b.n	810ab94 <_fflush_r+0xc>

0810abd8 <fiprintf>:
 810abd8:	b40e      	push	{r1, r2, r3}
 810abda:	b503      	push	{r0, r1, lr}
 810abdc:	4601      	mov	r1, r0
 810abde:	ab03      	add	r3, sp, #12
 810abe0:	4805      	ldr	r0, [pc, #20]	@ (810abf8 <fiprintf+0x20>)
 810abe2:	f853 2b04 	ldr.w	r2, [r3], #4
 810abe6:	6800      	ldr	r0, [r0, #0]
 810abe8:	9301      	str	r3, [sp, #4]
 810abea:	f7ff fe31 	bl	810a850 <_vfiprintf_r>
 810abee:	b002      	add	sp, #8
 810abf0:	f85d eb04 	ldr.w	lr, [sp], #4
 810abf4:	b003      	add	sp, #12
 810abf6:	4770      	bx	lr
 810abf8:	10000064 	.word	0x10000064

0810abfc <__swhatbuf_r>:
 810abfc:	b570      	push	{r4, r5, r6, lr}
 810abfe:	460c      	mov	r4, r1
 810ac00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810ac04:	2900      	cmp	r1, #0
 810ac06:	b096      	sub	sp, #88	@ 0x58
 810ac08:	4615      	mov	r5, r2
 810ac0a:	461e      	mov	r6, r3
 810ac0c:	da0d      	bge.n	810ac2a <__swhatbuf_r+0x2e>
 810ac0e:	89a3      	ldrh	r3, [r4, #12]
 810ac10:	f013 0f80 	tst.w	r3, #128	@ 0x80
 810ac14:	f04f 0100 	mov.w	r1, #0
 810ac18:	bf14      	ite	ne
 810ac1a:	2340      	movne	r3, #64	@ 0x40
 810ac1c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 810ac20:	2000      	movs	r0, #0
 810ac22:	6031      	str	r1, [r6, #0]
 810ac24:	602b      	str	r3, [r5, #0]
 810ac26:	b016      	add	sp, #88	@ 0x58
 810ac28:	bd70      	pop	{r4, r5, r6, pc}
 810ac2a:	466a      	mov	r2, sp
 810ac2c:	f000 f862 	bl	810acf4 <_fstat_r>
 810ac30:	2800      	cmp	r0, #0
 810ac32:	dbec      	blt.n	810ac0e <__swhatbuf_r+0x12>
 810ac34:	9901      	ldr	r1, [sp, #4]
 810ac36:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 810ac3a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 810ac3e:	4259      	negs	r1, r3
 810ac40:	4159      	adcs	r1, r3
 810ac42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 810ac46:	e7eb      	b.n	810ac20 <__swhatbuf_r+0x24>

0810ac48 <__smakebuf_r>:
 810ac48:	898b      	ldrh	r3, [r1, #12]
 810ac4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810ac4c:	079d      	lsls	r5, r3, #30
 810ac4e:	4606      	mov	r6, r0
 810ac50:	460c      	mov	r4, r1
 810ac52:	d507      	bpl.n	810ac64 <__smakebuf_r+0x1c>
 810ac54:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 810ac58:	6023      	str	r3, [r4, #0]
 810ac5a:	6123      	str	r3, [r4, #16]
 810ac5c:	2301      	movs	r3, #1
 810ac5e:	6163      	str	r3, [r4, #20]
 810ac60:	b003      	add	sp, #12
 810ac62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810ac64:	ab01      	add	r3, sp, #4
 810ac66:	466a      	mov	r2, sp
 810ac68:	f7ff ffc8 	bl	810abfc <__swhatbuf_r>
 810ac6c:	9f00      	ldr	r7, [sp, #0]
 810ac6e:	4605      	mov	r5, r0
 810ac70:	4639      	mov	r1, r7
 810ac72:	4630      	mov	r0, r6
 810ac74:	f7ff f85c 	bl	8109d30 <_malloc_r>
 810ac78:	b948      	cbnz	r0, 810ac8e <__smakebuf_r+0x46>
 810ac7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810ac7e:	059a      	lsls	r2, r3, #22
 810ac80:	d4ee      	bmi.n	810ac60 <__smakebuf_r+0x18>
 810ac82:	f023 0303 	bic.w	r3, r3, #3
 810ac86:	f043 0302 	orr.w	r3, r3, #2
 810ac8a:	81a3      	strh	r3, [r4, #12]
 810ac8c:	e7e2      	b.n	810ac54 <__smakebuf_r+0xc>
 810ac8e:	89a3      	ldrh	r3, [r4, #12]
 810ac90:	6020      	str	r0, [r4, #0]
 810ac92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 810ac96:	81a3      	strh	r3, [r4, #12]
 810ac98:	9b01      	ldr	r3, [sp, #4]
 810ac9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 810ac9e:	b15b      	cbz	r3, 810acb8 <__smakebuf_r+0x70>
 810aca0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810aca4:	4630      	mov	r0, r6
 810aca6:	f000 f837 	bl	810ad18 <_isatty_r>
 810acaa:	b128      	cbz	r0, 810acb8 <__smakebuf_r+0x70>
 810acac:	89a3      	ldrh	r3, [r4, #12]
 810acae:	f023 0303 	bic.w	r3, r3, #3
 810acb2:	f043 0301 	orr.w	r3, r3, #1
 810acb6:	81a3      	strh	r3, [r4, #12]
 810acb8:	89a3      	ldrh	r3, [r4, #12]
 810acba:	431d      	orrs	r5, r3
 810acbc:	81a5      	strh	r5, [r4, #12]
 810acbe:	e7cf      	b.n	810ac60 <__smakebuf_r+0x18>

0810acc0 <memmove>:
 810acc0:	4288      	cmp	r0, r1
 810acc2:	b510      	push	{r4, lr}
 810acc4:	eb01 0402 	add.w	r4, r1, r2
 810acc8:	d902      	bls.n	810acd0 <memmove+0x10>
 810acca:	4284      	cmp	r4, r0
 810accc:	4623      	mov	r3, r4
 810acce:	d807      	bhi.n	810ace0 <memmove+0x20>
 810acd0:	1e43      	subs	r3, r0, #1
 810acd2:	42a1      	cmp	r1, r4
 810acd4:	d008      	beq.n	810ace8 <memmove+0x28>
 810acd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 810acda:	f803 2f01 	strb.w	r2, [r3, #1]!
 810acde:	e7f8      	b.n	810acd2 <memmove+0x12>
 810ace0:	4402      	add	r2, r0
 810ace2:	4601      	mov	r1, r0
 810ace4:	428a      	cmp	r2, r1
 810ace6:	d100      	bne.n	810acea <memmove+0x2a>
 810ace8:	bd10      	pop	{r4, pc}
 810acea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810acee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810acf2:	e7f7      	b.n	810ace4 <memmove+0x24>

0810acf4 <_fstat_r>:
 810acf4:	b538      	push	{r3, r4, r5, lr}
 810acf6:	4d07      	ldr	r5, [pc, #28]	@ (810ad14 <_fstat_r+0x20>)
 810acf8:	2300      	movs	r3, #0
 810acfa:	4604      	mov	r4, r0
 810acfc:	4608      	mov	r0, r1
 810acfe:	4611      	mov	r1, r2
 810ad00:	602b      	str	r3, [r5, #0]
 810ad02:	f7f9 fa65 	bl	81041d0 <_fstat>
 810ad06:	1c43      	adds	r3, r0, #1
 810ad08:	d102      	bne.n	810ad10 <_fstat_r+0x1c>
 810ad0a:	682b      	ldr	r3, [r5, #0]
 810ad0c:	b103      	cbz	r3, 810ad10 <_fstat_r+0x1c>
 810ad0e:	6023      	str	r3, [r4, #0]
 810ad10:	bd38      	pop	{r3, r4, r5, pc}
 810ad12:	bf00      	nop
 810ad14:	10000630 	.word	0x10000630

0810ad18 <_isatty_r>:
 810ad18:	b538      	push	{r3, r4, r5, lr}
 810ad1a:	4d06      	ldr	r5, [pc, #24]	@ (810ad34 <_isatty_r+0x1c>)
 810ad1c:	2300      	movs	r3, #0
 810ad1e:	4604      	mov	r4, r0
 810ad20:	4608      	mov	r0, r1
 810ad22:	602b      	str	r3, [r5, #0]
 810ad24:	f7f9 fa64 	bl	81041f0 <_isatty>
 810ad28:	1c43      	adds	r3, r0, #1
 810ad2a:	d102      	bne.n	810ad32 <_isatty_r+0x1a>
 810ad2c:	682b      	ldr	r3, [r5, #0]
 810ad2e:	b103      	cbz	r3, 810ad32 <_isatty_r+0x1a>
 810ad30:	6023      	str	r3, [r4, #0]
 810ad32:	bd38      	pop	{r3, r4, r5, pc}
 810ad34:	10000630 	.word	0x10000630

0810ad38 <_sbrk_r>:
 810ad38:	b538      	push	{r3, r4, r5, lr}
 810ad3a:	4d06      	ldr	r5, [pc, #24]	@ (810ad54 <_sbrk_r+0x1c>)
 810ad3c:	2300      	movs	r3, #0
 810ad3e:	4604      	mov	r4, r0
 810ad40:	4608      	mov	r0, r1
 810ad42:	602b      	str	r3, [r5, #0]
 810ad44:	f7f9 fa6c 	bl	8104220 <_sbrk>
 810ad48:	1c43      	adds	r3, r0, #1
 810ad4a:	d102      	bne.n	810ad52 <_sbrk_r+0x1a>
 810ad4c:	682b      	ldr	r3, [r5, #0]
 810ad4e:	b103      	cbz	r3, 810ad52 <_sbrk_r+0x1a>
 810ad50:	6023      	str	r3, [r4, #0]
 810ad52:	bd38      	pop	{r3, r4, r5, pc}
 810ad54:	10000630 	.word	0x10000630

0810ad58 <abort>:
 810ad58:	b508      	push	{r3, lr}
 810ad5a:	2006      	movs	r0, #6
 810ad5c:	f000 f88c 	bl	810ae78 <raise>
 810ad60:	2001      	movs	r0, #1
 810ad62:	f7f9 f9e5 	bl	8104130 <_exit>

0810ad66 <_calloc_r>:
 810ad66:	b570      	push	{r4, r5, r6, lr}
 810ad68:	fba1 5402 	umull	r5, r4, r1, r2
 810ad6c:	b93c      	cbnz	r4, 810ad7e <_calloc_r+0x18>
 810ad6e:	4629      	mov	r1, r5
 810ad70:	f7fe ffde 	bl	8109d30 <_malloc_r>
 810ad74:	4606      	mov	r6, r0
 810ad76:	b928      	cbnz	r0, 810ad84 <_calloc_r+0x1e>
 810ad78:	2600      	movs	r6, #0
 810ad7a:	4630      	mov	r0, r6
 810ad7c:	bd70      	pop	{r4, r5, r6, pc}
 810ad7e:	220c      	movs	r2, #12
 810ad80:	6002      	str	r2, [r0, #0]
 810ad82:	e7f9      	b.n	810ad78 <_calloc_r+0x12>
 810ad84:	462a      	mov	r2, r5
 810ad86:	4621      	mov	r1, r4
 810ad88:	f7fe f852 	bl	8108e30 <memset>
 810ad8c:	e7f5      	b.n	810ad7a <_calloc_r+0x14>

0810ad8e <__ascii_mbtowc>:
 810ad8e:	b082      	sub	sp, #8
 810ad90:	b901      	cbnz	r1, 810ad94 <__ascii_mbtowc+0x6>
 810ad92:	a901      	add	r1, sp, #4
 810ad94:	b142      	cbz	r2, 810ada8 <__ascii_mbtowc+0x1a>
 810ad96:	b14b      	cbz	r3, 810adac <__ascii_mbtowc+0x1e>
 810ad98:	7813      	ldrb	r3, [r2, #0]
 810ad9a:	600b      	str	r3, [r1, #0]
 810ad9c:	7812      	ldrb	r2, [r2, #0]
 810ad9e:	1e10      	subs	r0, r2, #0
 810ada0:	bf18      	it	ne
 810ada2:	2001      	movne	r0, #1
 810ada4:	b002      	add	sp, #8
 810ada6:	4770      	bx	lr
 810ada8:	4610      	mov	r0, r2
 810adaa:	e7fb      	b.n	810ada4 <__ascii_mbtowc+0x16>
 810adac:	f06f 0001 	mvn.w	r0, #1
 810adb0:	e7f8      	b.n	810ada4 <__ascii_mbtowc+0x16>

0810adb2 <_realloc_r>:
 810adb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810adb6:	4680      	mov	r8, r0
 810adb8:	4615      	mov	r5, r2
 810adba:	460c      	mov	r4, r1
 810adbc:	b921      	cbnz	r1, 810adc8 <_realloc_r+0x16>
 810adbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810adc2:	4611      	mov	r1, r2
 810adc4:	f7fe bfb4 	b.w	8109d30 <_malloc_r>
 810adc8:	b92a      	cbnz	r2, 810add6 <_realloc_r+0x24>
 810adca:	f7fe ff3d 	bl	8109c48 <_free_r>
 810adce:	2400      	movs	r4, #0
 810add0:	4620      	mov	r0, r4
 810add2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810add6:	f000 f86b 	bl	810aeb0 <_malloc_usable_size_r>
 810adda:	4285      	cmp	r5, r0
 810addc:	4606      	mov	r6, r0
 810adde:	d802      	bhi.n	810ade6 <_realloc_r+0x34>
 810ade0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 810ade4:	d8f4      	bhi.n	810add0 <_realloc_r+0x1e>
 810ade6:	4629      	mov	r1, r5
 810ade8:	4640      	mov	r0, r8
 810adea:	f7fe ffa1 	bl	8109d30 <_malloc_r>
 810adee:	4607      	mov	r7, r0
 810adf0:	2800      	cmp	r0, #0
 810adf2:	d0ec      	beq.n	810adce <_realloc_r+0x1c>
 810adf4:	42b5      	cmp	r5, r6
 810adf6:	462a      	mov	r2, r5
 810adf8:	4621      	mov	r1, r4
 810adfa:	bf28      	it	cs
 810adfc:	4632      	movcs	r2, r6
 810adfe:	f7fe f8aa 	bl	8108f56 <memcpy>
 810ae02:	4621      	mov	r1, r4
 810ae04:	4640      	mov	r0, r8
 810ae06:	f7fe ff1f 	bl	8109c48 <_free_r>
 810ae0a:	463c      	mov	r4, r7
 810ae0c:	e7e0      	b.n	810add0 <_realloc_r+0x1e>

0810ae0e <__ascii_wctomb>:
 810ae0e:	4603      	mov	r3, r0
 810ae10:	4608      	mov	r0, r1
 810ae12:	b141      	cbz	r1, 810ae26 <__ascii_wctomb+0x18>
 810ae14:	2aff      	cmp	r2, #255	@ 0xff
 810ae16:	d904      	bls.n	810ae22 <__ascii_wctomb+0x14>
 810ae18:	228a      	movs	r2, #138	@ 0x8a
 810ae1a:	601a      	str	r2, [r3, #0]
 810ae1c:	f04f 30ff 	mov.w	r0, #4294967295
 810ae20:	4770      	bx	lr
 810ae22:	700a      	strb	r2, [r1, #0]
 810ae24:	2001      	movs	r0, #1
 810ae26:	4770      	bx	lr

0810ae28 <_raise_r>:
 810ae28:	291f      	cmp	r1, #31
 810ae2a:	b538      	push	{r3, r4, r5, lr}
 810ae2c:	4605      	mov	r5, r0
 810ae2e:	460c      	mov	r4, r1
 810ae30:	d904      	bls.n	810ae3c <_raise_r+0x14>
 810ae32:	2316      	movs	r3, #22
 810ae34:	6003      	str	r3, [r0, #0]
 810ae36:	f04f 30ff 	mov.w	r0, #4294967295
 810ae3a:	bd38      	pop	{r3, r4, r5, pc}
 810ae3c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 810ae3e:	b112      	cbz	r2, 810ae46 <_raise_r+0x1e>
 810ae40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810ae44:	b94b      	cbnz	r3, 810ae5a <_raise_r+0x32>
 810ae46:	4628      	mov	r0, r5
 810ae48:	f000 f830 	bl	810aeac <_getpid_r>
 810ae4c:	4622      	mov	r2, r4
 810ae4e:	4601      	mov	r1, r0
 810ae50:	4628      	mov	r0, r5
 810ae52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810ae56:	f000 b817 	b.w	810ae88 <_kill_r>
 810ae5a:	2b01      	cmp	r3, #1
 810ae5c:	d00a      	beq.n	810ae74 <_raise_r+0x4c>
 810ae5e:	1c59      	adds	r1, r3, #1
 810ae60:	d103      	bne.n	810ae6a <_raise_r+0x42>
 810ae62:	2316      	movs	r3, #22
 810ae64:	6003      	str	r3, [r0, #0]
 810ae66:	2001      	movs	r0, #1
 810ae68:	e7e7      	b.n	810ae3a <_raise_r+0x12>
 810ae6a:	2100      	movs	r1, #0
 810ae6c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 810ae70:	4620      	mov	r0, r4
 810ae72:	4798      	blx	r3
 810ae74:	2000      	movs	r0, #0
 810ae76:	e7e0      	b.n	810ae3a <_raise_r+0x12>

0810ae78 <raise>:
 810ae78:	4b02      	ldr	r3, [pc, #8]	@ (810ae84 <raise+0xc>)
 810ae7a:	4601      	mov	r1, r0
 810ae7c:	6818      	ldr	r0, [r3, #0]
 810ae7e:	f7ff bfd3 	b.w	810ae28 <_raise_r>
 810ae82:	bf00      	nop
 810ae84:	10000064 	.word	0x10000064

0810ae88 <_kill_r>:
 810ae88:	b538      	push	{r3, r4, r5, lr}
 810ae8a:	4d07      	ldr	r5, [pc, #28]	@ (810aea8 <_kill_r+0x20>)
 810ae8c:	2300      	movs	r3, #0
 810ae8e:	4604      	mov	r4, r0
 810ae90:	4608      	mov	r0, r1
 810ae92:	4611      	mov	r1, r2
 810ae94:	602b      	str	r3, [r5, #0]
 810ae96:	f7f9 f93b 	bl	8104110 <_kill>
 810ae9a:	1c43      	adds	r3, r0, #1
 810ae9c:	d102      	bne.n	810aea4 <_kill_r+0x1c>
 810ae9e:	682b      	ldr	r3, [r5, #0]
 810aea0:	b103      	cbz	r3, 810aea4 <_kill_r+0x1c>
 810aea2:	6023      	str	r3, [r4, #0]
 810aea4:	bd38      	pop	{r3, r4, r5, pc}
 810aea6:	bf00      	nop
 810aea8:	10000630 	.word	0x10000630

0810aeac <_getpid_r>:
 810aeac:	f7f9 b928 	b.w	8104100 <_getpid>

0810aeb0 <_malloc_usable_size_r>:
 810aeb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810aeb4:	1f18      	subs	r0, r3, #4
 810aeb6:	2b00      	cmp	r3, #0
 810aeb8:	bfbc      	itt	lt
 810aeba:	580b      	ldrlt	r3, [r1, r0]
 810aebc:	18c0      	addlt	r0, r0, r3
 810aebe:	4770      	bx	lr

0810aec0 <_init>:
 810aec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810aec2:	bf00      	nop
 810aec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810aec6:	bc08      	pop	{r3}
 810aec8:	469e      	mov	lr, r3
 810aeca:	4770      	bx	lr

0810aecc <_fini>:
 810aecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810aece:	bf00      	nop
 810aed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810aed2:	bc08      	pop	{r3}
 810aed4:	469e      	mov	lr, r3
 810aed6:	4770      	bx	lr
