
prototype_obc_stm32h7_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c0f4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a54  0801c398  0801c398  0001d398  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801edec  0801edec  000204d8  2**0
                  CONTENTS
  4 .ARM          00000008  0801edec  0801edec  0001fdec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801edf4  0801edf4  000204d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801edf4  0801edf4  0001fdf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801edf8  0801edf8  0001fdf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000004d8  24000000  0801edfc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000039bc  240004d8  0801f2d4  000204d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  24003e94  0801f2d4  00020e94  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000204d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002da92  00000000  00000000  00020506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007256  00000000  00000000  0004df98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002560  00000000  00000000  000551f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c5d  00000000  00000000  00057750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00048c52  00000000  00000000  000593ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003a4a4  00000000  00000000  000a1fff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a792b  00000000  00000000  000dc4a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00283dce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b4c8  00000000  00000000  00283e14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0028f2dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240004d8 	.word	0x240004d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801c37c 	.word	0x0801c37c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240004dc 	.word	0x240004dc
 80002dc:	0801c37c 	.word	0x0801c37c

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_uldivmod>:
 8000728:	b953      	cbnz	r3, 8000740 <__aeabi_uldivmod+0x18>
 800072a:	b94a      	cbnz	r2, 8000740 <__aeabi_uldivmod+0x18>
 800072c:	2900      	cmp	r1, #0
 800072e:	bf08      	it	eq
 8000730:	2800      	cmpeq	r0, #0
 8000732:	bf1c      	itt	ne
 8000734:	f04f 31ff 	movne.w	r1, #4294967295
 8000738:	f04f 30ff 	movne.w	r0, #4294967295
 800073c:	f000 b9a2 	b.w	8000a84 <__aeabi_idiv0>
 8000740:	f1ad 0c08 	sub.w	ip, sp, #8
 8000744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000748:	f000 f83e 	bl	80007c8 <__udivmoddi4>
 800074c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <__aeabi_d2lz>:
 8000758:	b508      	push	{r3, lr}
 800075a:	4602      	mov	r2, r0
 800075c:	460b      	mov	r3, r1
 800075e:	ec43 2b17 	vmov	d7, r2, r3
 8000762:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076a:	d403      	bmi.n	8000774 <__aeabi_d2lz+0x1c>
 800076c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000770:	f000 b80a 	b.w	8000788 <__aeabi_d2ulz>
 8000774:	eeb1 7b47 	vneg.f64	d7, d7
 8000778:	ec51 0b17 	vmov	r0, r1, d7
 800077c:	f000 f804 	bl	8000788 <__aeabi_d2ulz>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	bd08      	pop	{r3, pc}

08000788 <__aeabi_d2ulz>:
 8000788:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007b8 <__aeabi_d2ulz+0x30>
 800078c:	ec41 0b17 	vmov	d7, r0, r1
 8000790:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007c0 <__aeabi_d2ulz+0x38>
 8000794:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000798:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800079c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007a8:	ee16 1a10 	vmov	r1, s12
 80007ac:	ee17 0a90 	vmov	r0, s15
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	f3af 8000 	nop.w
 80007b8:	00000000 	.word	0x00000000
 80007bc:	3df00000 	.word	0x3df00000
 80007c0:	00000000 	.word	0x00000000
 80007c4:	41f00000 	.word	0x41f00000

080007c8 <__udivmoddi4>:
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	9d08      	ldr	r5, [sp, #32]
 80007ce:	460c      	mov	r4, r1
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d14e      	bne.n	8000872 <__udivmoddi4+0xaa>
 80007d4:	4694      	mov	ip, r2
 80007d6:	458c      	cmp	ip, r1
 80007d8:	4686      	mov	lr, r0
 80007da:	fab2 f282 	clz	r2, r2
 80007de:	d962      	bls.n	80008a6 <__udivmoddi4+0xde>
 80007e0:	b14a      	cbz	r2, 80007f6 <__udivmoddi4+0x2e>
 80007e2:	f1c2 0320 	rsb	r3, r2, #32
 80007e6:	4091      	lsls	r1, r2
 80007e8:	fa20 f303 	lsr.w	r3, r0, r3
 80007ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80007f0:	4319      	orrs	r1, r3
 80007f2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007fa:	fa1f f68c 	uxth.w	r6, ip
 80007fe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000802:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000806:	fb07 1114 	mls	r1, r7, r4, r1
 800080a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800080e:	fb04 f106 	mul.w	r1, r4, r6
 8000812:	4299      	cmp	r1, r3
 8000814:	d90a      	bls.n	800082c <__udivmoddi4+0x64>
 8000816:	eb1c 0303 	adds.w	r3, ip, r3
 800081a:	f104 30ff 	add.w	r0, r4, #4294967295
 800081e:	f080 8112 	bcs.w	8000a46 <__udivmoddi4+0x27e>
 8000822:	4299      	cmp	r1, r3
 8000824:	f240 810f 	bls.w	8000a46 <__udivmoddi4+0x27e>
 8000828:	3c02      	subs	r4, #2
 800082a:	4463      	add	r3, ip
 800082c:	1a59      	subs	r1, r3, r1
 800082e:	fa1f f38e 	uxth.w	r3, lr
 8000832:	fbb1 f0f7 	udiv	r0, r1, r7
 8000836:	fb07 1110 	mls	r1, r7, r0, r1
 800083a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800083e:	fb00 f606 	mul.w	r6, r0, r6
 8000842:	429e      	cmp	r6, r3
 8000844:	d90a      	bls.n	800085c <__udivmoddi4+0x94>
 8000846:	eb1c 0303 	adds.w	r3, ip, r3
 800084a:	f100 31ff 	add.w	r1, r0, #4294967295
 800084e:	f080 80fc 	bcs.w	8000a4a <__udivmoddi4+0x282>
 8000852:	429e      	cmp	r6, r3
 8000854:	f240 80f9 	bls.w	8000a4a <__udivmoddi4+0x282>
 8000858:	4463      	add	r3, ip
 800085a:	3802      	subs	r0, #2
 800085c:	1b9b      	subs	r3, r3, r6
 800085e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000862:	2100      	movs	r1, #0
 8000864:	b11d      	cbz	r5, 800086e <__udivmoddi4+0xa6>
 8000866:	40d3      	lsrs	r3, r2
 8000868:	2200      	movs	r2, #0
 800086a:	e9c5 3200 	strd	r3, r2, [r5]
 800086e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000872:	428b      	cmp	r3, r1
 8000874:	d905      	bls.n	8000882 <__udivmoddi4+0xba>
 8000876:	b10d      	cbz	r5, 800087c <__udivmoddi4+0xb4>
 8000878:	e9c5 0100 	strd	r0, r1, [r5]
 800087c:	2100      	movs	r1, #0
 800087e:	4608      	mov	r0, r1
 8000880:	e7f5      	b.n	800086e <__udivmoddi4+0xa6>
 8000882:	fab3 f183 	clz	r1, r3
 8000886:	2900      	cmp	r1, #0
 8000888:	d146      	bne.n	8000918 <__udivmoddi4+0x150>
 800088a:	42a3      	cmp	r3, r4
 800088c:	d302      	bcc.n	8000894 <__udivmoddi4+0xcc>
 800088e:	4290      	cmp	r0, r2
 8000890:	f0c0 80f0 	bcc.w	8000a74 <__udivmoddi4+0x2ac>
 8000894:	1a86      	subs	r6, r0, r2
 8000896:	eb64 0303 	sbc.w	r3, r4, r3
 800089a:	2001      	movs	r0, #1
 800089c:	2d00      	cmp	r5, #0
 800089e:	d0e6      	beq.n	800086e <__udivmoddi4+0xa6>
 80008a0:	e9c5 6300 	strd	r6, r3, [r5]
 80008a4:	e7e3      	b.n	800086e <__udivmoddi4+0xa6>
 80008a6:	2a00      	cmp	r2, #0
 80008a8:	f040 8090 	bne.w	80009cc <__udivmoddi4+0x204>
 80008ac:	eba1 040c 	sub.w	r4, r1, ip
 80008b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008b4:	fa1f f78c 	uxth.w	r7, ip
 80008b8:	2101      	movs	r1, #1
 80008ba:	fbb4 f6f8 	udiv	r6, r4, r8
 80008be:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008c2:	fb08 4416 	mls	r4, r8, r6, r4
 80008c6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008ca:	fb07 f006 	mul.w	r0, r7, r6
 80008ce:	4298      	cmp	r0, r3
 80008d0:	d908      	bls.n	80008e4 <__udivmoddi4+0x11c>
 80008d2:	eb1c 0303 	adds.w	r3, ip, r3
 80008d6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008da:	d202      	bcs.n	80008e2 <__udivmoddi4+0x11a>
 80008dc:	4298      	cmp	r0, r3
 80008de:	f200 80cd 	bhi.w	8000a7c <__udivmoddi4+0x2b4>
 80008e2:	4626      	mov	r6, r4
 80008e4:	1a1c      	subs	r4, r3, r0
 80008e6:	fa1f f38e 	uxth.w	r3, lr
 80008ea:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ee:	fb08 4410 	mls	r4, r8, r0, r4
 80008f2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008f6:	fb00 f707 	mul.w	r7, r0, r7
 80008fa:	429f      	cmp	r7, r3
 80008fc:	d908      	bls.n	8000910 <__udivmoddi4+0x148>
 80008fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000902:	f100 34ff 	add.w	r4, r0, #4294967295
 8000906:	d202      	bcs.n	800090e <__udivmoddi4+0x146>
 8000908:	429f      	cmp	r7, r3
 800090a:	f200 80b0 	bhi.w	8000a6e <__udivmoddi4+0x2a6>
 800090e:	4620      	mov	r0, r4
 8000910:	1bdb      	subs	r3, r3, r7
 8000912:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000916:	e7a5      	b.n	8000864 <__udivmoddi4+0x9c>
 8000918:	f1c1 0620 	rsb	r6, r1, #32
 800091c:	408b      	lsls	r3, r1
 800091e:	fa22 f706 	lsr.w	r7, r2, r6
 8000922:	431f      	orrs	r7, r3
 8000924:	fa20 fc06 	lsr.w	ip, r0, r6
 8000928:	fa04 f301 	lsl.w	r3, r4, r1
 800092c:	ea43 030c 	orr.w	r3, r3, ip
 8000930:	40f4      	lsrs	r4, r6
 8000932:	fa00 f801 	lsl.w	r8, r0, r1
 8000936:	0c38      	lsrs	r0, r7, #16
 8000938:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800093c:	fbb4 fef0 	udiv	lr, r4, r0
 8000940:	fa1f fc87 	uxth.w	ip, r7
 8000944:	fb00 441e 	mls	r4, r0, lr, r4
 8000948:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800094c:	fb0e f90c 	mul.w	r9, lr, ip
 8000950:	45a1      	cmp	r9, r4
 8000952:	fa02 f201 	lsl.w	r2, r2, r1
 8000956:	d90a      	bls.n	800096e <__udivmoddi4+0x1a6>
 8000958:	193c      	adds	r4, r7, r4
 800095a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800095e:	f080 8084 	bcs.w	8000a6a <__udivmoddi4+0x2a2>
 8000962:	45a1      	cmp	r9, r4
 8000964:	f240 8081 	bls.w	8000a6a <__udivmoddi4+0x2a2>
 8000968:	f1ae 0e02 	sub.w	lr, lr, #2
 800096c:	443c      	add	r4, r7
 800096e:	eba4 0409 	sub.w	r4, r4, r9
 8000972:	fa1f f983 	uxth.w	r9, r3
 8000976:	fbb4 f3f0 	udiv	r3, r4, r0
 800097a:	fb00 4413 	mls	r4, r0, r3, r4
 800097e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000982:	fb03 fc0c 	mul.w	ip, r3, ip
 8000986:	45a4      	cmp	ip, r4
 8000988:	d907      	bls.n	800099a <__udivmoddi4+0x1d2>
 800098a:	193c      	adds	r4, r7, r4
 800098c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000990:	d267      	bcs.n	8000a62 <__udivmoddi4+0x29a>
 8000992:	45a4      	cmp	ip, r4
 8000994:	d965      	bls.n	8000a62 <__udivmoddi4+0x29a>
 8000996:	3b02      	subs	r3, #2
 8000998:	443c      	add	r4, r7
 800099a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800099e:	fba0 9302 	umull	r9, r3, r0, r2
 80009a2:	eba4 040c 	sub.w	r4, r4, ip
 80009a6:	429c      	cmp	r4, r3
 80009a8:	46ce      	mov	lr, r9
 80009aa:	469c      	mov	ip, r3
 80009ac:	d351      	bcc.n	8000a52 <__udivmoddi4+0x28a>
 80009ae:	d04e      	beq.n	8000a4e <__udivmoddi4+0x286>
 80009b0:	b155      	cbz	r5, 80009c8 <__udivmoddi4+0x200>
 80009b2:	ebb8 030e 	subs.w	r3, r8, lr
 80009b6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ba:	fa04 f606 	lsl.w	r6, r4, r6
 80009be:	40cb      	lsrs	r3, r1
 80009c0:	431e      	orrs	r6, r3
 80009c2:	40cc      	lsrs	r4, r1
 80009c4:	e9c5 6400 	strd	r6, r4, [r5]
 80009c8:	2100      	movs	r1, #0
 80009ca:	e750      	b.n	800086e <__udivmoddi4+0xa6>
 80009cc:	f1c2 0320 	rsb	r3, r2, #32
 80009d0:	fa20 f103 	lsr.w	r1, r0, r3
 80009d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009d8:	fa24 f303 	lsr.w	r3, r4, r3
 80009dc:	4094      	lsls	r4, r2
 80009de:	430c      	orrs	r4, r1
 80009e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009e4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009e8:	fa1f f78c 	uxth.w	r7, ip
 80009ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80009f0:	fb08 3110 	mls	r1, r8, r0, r3
 80009f4:	0c23      	lsrs	r3, r4, #16
 80009f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009fa:	fb00 f107 	mul.w	r1, r0, r7
 80009fe:	4299      	cmp	r1, r3
 8000a00:	d908      	bls.n	8000a14 <__udivmoddi4+0x24c>
 8000a02:	eb1c 0303 	adds.w	r3, ip, r3
 8000a06:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a0a:	d22c      	bcs.n	8000a66 <__udivmoddi4+0x29e>
 8000a0c:	4299      	cmp	r1, r3
 8000a0e:	d92a      	bls.n	8000a66 <__udivmoddi4+0x29e>
 8000a10:	3802      	subs	r0, #2
 8000a12:	4463      	add	r3, ip
 8000a14:	1a5b      	subs	r3, r3, r1
 8000a16:	b2a4      	uxth	r4, r4
 8000a18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a24:	fb01 f307 	mul.w	r3, r1, r7
 8000a28:	42a3      	cmp	r3, r4
 8000a2a:	d908      	bls.n	8000a3e <__udivmoddi4+0x276>
 8000a2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a30:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a34:	d213      	bcs.n	8000a5e <__udivmoddi4+0x296>
 8000a36:	42a3      	cmp	r3, r4
 8000a38:	d911      	bls.n	8000a5e <__udivmoddi4+0x296>
 8000a3a:	3902      	subs	r1, #2
 8000a3c:	4464      	add	r4, ip
 8000a3e:	1ae4      	subs	r4, r4, r3
 8000a40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a44:	e739      	b.n	80008ba <__udivmoddi4+0xf2>
 8000a46:	4604      	mov	r4, r0
 8000a48:	e6f0      	b.n	800082c <__udivmoddi4+0x64>
 8000a4a:	4608      	mov	r0, r1
 8000a4c:	e706      	b.n	800085c <__udivmoddi4+0x94>
 8000a4e:	45c8      	cmp	r8, r9
 8000a50:	d2ae      	bcs.n	80009b0 <__udivmoddi4+0x1e8>
 8000a52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a5a:	3801      	subs	r0, #1
 8000a5c:	e7a8      	b.n	80009b0 <__udivmoddi4+0x1e8>
 8000a5e:	4631      	mov	r1, r6
 8000a60:	e7ed      	b.n	8000a3e <__udivmoddi4+0x276>
 8000a62:	4603      	mov	r3, r0
 8000a64:	e799      	b.n	800099a <__udivmoddi4+0x1d2>
 8000a66:	4630      	mov	r0, r6
 8000a68:	e7d4      	b.n	8000a14 <__udivmoddi4+0x24c>
 8000a6a:	46d6      	mov	lr, sl
 8000a6c:	e77f      	b.n	800096e <__udivmoddi4+0x1a6>
 8000a6e:	4463      	add	r3, ip
 8000a70:	3802      	subs	r0, #2
 8000a72:	e74d      	b.n	8000910 <__udivmoddi4+0x148>
 8000a74:	4606      	mov	r6, r0
 8000a76:	4623      	mov	r3, r4
 8000a78:	4608      	mov	r0, r1
 8000a7a:	e70f      	b.n	800089c <__udivmoddi4+0xd4>
 8000a7c:	3e02      	subs	r6, #2
 8000a7e:	4463      	add	r3, ip
 8000a80:	e730      	b.n	80008e4 <__udivmoddi4+0x11c>
 8000a82:	bf00      	nop

08000a84 <__aeabi_idiv0>:
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <CmdLineProcess>:
//! Otherwise it returns the code that was returned by the command function.
//
//*****************************************************************************
uint8_t
CmdLineProcess(char *pcCmdLine)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
    char *pcChar;
    uint_fast8_t ui8Argc;
    bool bFindArg = true;
 8000a90:	2301      	movs	r3, #1
 8000a92:	73fb      	strb	r3, [r7, #15]

    //
    // Initialize the argument counter, and point to the beginning of the
    // command line string.
    //
    ui8Argc = 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	613b      	str	r3, [r7, #16]
    pcChar = pcCmdLine;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	617b      	str	r3, [r7, #20]

    //
    // Advance through the command line until a zero character is found.
    //
    while(*pcChar)
 8000a9c:	e01f      	b.n	8000ade <CmdLineProcess+0x56>
    {
        //
        // If there is a space, then replace it with a zero, and set the flag
        // to search for the next argument.
        //
        if(*pcChar == ' ')
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b20      	cmp	r3, #32
 8000aa4:	d105      	bne.n	8000ab2 <CmdLineProcess+0x2a>
        {
            *pcChar = 0;
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	701a      	strb	r2, [r3, #0]
            bFindArg = true;
 8000aac:	2301      	movs	r3, #1
 8000aae:	73fb      	strb	r3, [r7, #15]
 8000ab0:	e012      	b.n	8000ad8 <CmdLineProcess+0x50>
        {
            //
            // If bFindArg is set, then that means we are looking for the start
            // of the next argument.
            //
            if(bFindArg)
 8000ab2:	7bfb      	ldrb	r3, [r7, #15]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d00f      	beq.n	8000ad8 <CmdLineProcess+0x50>
                //
                // As long as the maximum number of arguments has not been
                // reached, then save the pointer to the start of this new arg
                // in the argv array, and increment the count of args, argc.
                //
                if(ui8Argc < CMDLINE_MAX_ARGS)
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	2b07      	cmp	r3, #7
 8000abc:	d80a      	bhi.n	8000ad4 <CmdLineProcess+0x4c>
                {
                    g_ppcArgv[ui8Argc] = pcChar;
 8000abe:	491d      	ldr	r1, [pc, #116]	@ (8000b34 <CmdLineProcess+0xac>)
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	697a      	ldr	r2, [r7, #20]
 8000ac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    ui8Argc++;
 8000ac8:	693b      	ldr	r3, [r7, #16]
 8000aca:	3301      	adds	r3, #1
 8000acc:	613b      	str	r3, [r7, #16]
                    bFindArg = false;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	73fb      	strb	r3, [r7, #15]
 8000ad2:	e001      	b.n	8000ad8 <CmdLineProcess+0x50>
                // The maximum number of arguments has been reached so return
                // the error.
                //
                else
                {
                    return(CMDLINE_TOO_MANY_ARGS);
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	e028      	b.n	8000b2a <CmdLineProcess+0xa2>
        }

        //
        // Advance to the next character in the command line.
        //
        pcChar++;
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	3301      	adds	r3, #1
 8000adc:	617b      	str	r3, [r7, #20]
    while(*pcChar)
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d1db      	bne.n	8000a9e <CmdLineProcess+0x16>
    }

    //
    // If one or more arguments was found, then process the command.
    //
    if(ui8Argc)
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d01d      	beq.n	8000b28 <CmdLineProcess+0xa0>
                // ui8Argc++;
        //
        // Start at the beginning of the command table, to look for a matching
        // command.
        //
        psCmdEntry = &g_psCmdTable[0];
 8000aec:	4b12      	ldr	r3, [pc, #72]	@ (8000b38 <CmdLineProcess+0xb0>)
 8000aee:	60bb      	str	r3, [r7, #8]

        //
        // Search through the command table until a null command string is
        // found, which marks the end of the table.
        //
        while(psCmdEntry->pcCmd)
 8000af0:	e016      	b.n	8000b20 <CmdLineProcess+0x98>
            //
            // If this command entry command string matches argv[0], then call
            // the function for this command, passing the command line
            // arguments.
            //
            if(!strcmp(g_ppcArgv[0], psCmdEntry->pcCmd))
 8000af2:	4b10      	ldr	r3, [pc, #64]	@ (8000b34 <CmdLineProcess+0xac>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4619      	mov	r1, r3
 8000afc:	4610      	mov	r0, r2
 8000afe:	f7ff fbef 	bl	80002e0 <strcmp>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d108      	bne.n	8000b1a <CmdLineProcess+0x92>
            {

                return(psCmdEntry->pfnCmd(ui8Argc, g_ppcArgv));
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	693a      	ldr	r2, [r7, #16]
 8000b0e:	4909      	ldr	r1, [pc, #36]	@ (8000b34 <CmdLineProcess+0xac>)
 8000b10:	4610      	mov	r0, r2
 8000b12:	4798      	blx	r3
 8000b14:	4603      	mov	r3, r0
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	e007      	b.n	8000b2a <CmdLineProcess+0xa2>
            }

            //
            // Not found, so advance to the next entry.
            //
            psCmdEntry++;
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	330c      	adds	r3, #12
 8000b1e:	60bb      	str	r3, [r7, #8]
        while(psCmdEntry->pcCmd)
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d1e4      	bne.n	8000af2 <CmdLineProcess+0x6a>

    //
    // Fall through to here means that no matching command was found, so return
    // an error.
    //
    return(CMDLINE_BAD_CMD);
 8000b28:	2301      	movs	r3, #1
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	240004f4 	.word	0x240004f4
 8000b38:	24000018 	.word	0x24000018

08000b3c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b40:	f3bf 8f4f 	dsb	sy
}
 8000b44:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000b46:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <__NVIC_SystemReset+0x24>)
 8000b48:	68db      	ldr	r3, [r3, #12]
 8000b4a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000b4e:	4904      	ldr	r1, [pc, #16]	@ (8000b60 <__NVIC_SystemReset+0x24>)
 8000b50:	4b04      	ldr	r3, [pc, #16]	@ (8000b64 <__NVIC_SystemReset+0x28>)
 8000b52:	4313      	orrs	r3, r2
 8000b54:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b56:	f3bf 8f4f 	dsb	sy
}
 8000b5a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <__NVIC_SystemReset+0x20>
 8000b60:	e000ed00 	.word	0xe000ed00
 8000b64:	05fa0004 	.word	0x05fa0004

08000b68 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	683a      	ldr	r2, [r7, #0]
 8000b76:	619a      	str	r2, [r3, #24]
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	041a      	lsls	r2, r3, #16
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	619a      	str	r2, [r3, #24]
}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
	...

08000ba4 <welcome>:
		cmdline_task_update,                // taskFunction;
		9
	}
};

void welcome(){
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0

    TERMINAL_BACK_DEFAULT(); /* set terminal background color: black */
 8000ba8:	4821      	ldr	r0, [pc, #132]	@ (8000c30 <welcome+0x8c>)
 8000baa:	f015 f999 	bl	8015ee0 <CDC_SendString>
    TERMINAL_DISPLAY_CLEAR();
 8000bae:	4821      	ldr	r0, [pc, #132]	@ (8000c34 <welcome+0x90>)
 8000bb0:	f015 f996 	bl	8015ee0 <CDC_SendString>
    TERMINAL_RESET_CURSOR();
 8000bb4:	4820      	ldr	r0, [pc, #128]	@ (8000c38 <welcome+0x94>)
 8000bb6:	f015 f993 	bl	8015ee0 <CDC_SendString>
    TERMINAL_FONT_CYAN();
 8000bba:	4820      	ldr	r0, [pc, #128]	@ (8000c3c <welcome+0x98>)
 8000bbc:	f015 f990 	bl	8015ee0 <CDC_SendString>
    CDC_SendString("┌─────────────────────────────────────────────────────────────┐\r\n");
 8000bc0:	481f      	ldr	r0, [pc, #124]	@ (8000c40 <welcome+0x9c>)
 8000bc2:	f015 f98d 	bl	8015ee0 <CDC_SendString>
    CDC_SendString("│       █▀ █▀█ ▄▀█ █▀▀ █▀▀ █   █ █ █▄ █ ▀█▀ █▀▀ █▀▀ █ █       │\r\n");
 8000bc6:	481f      	ldr	r0, [pc, #124]	@ (8000c44 <welcome+0xa0>)
 8000bc8:	f015 f98a 	bl	8015ee0 <CDC_SendString>
    CDC_SendString("│       ▄█ █▀▀ █▀█ █▄▄ ██▄ █▄▄ █ █ █ ▀█  █  ██▄ █▄▄ █▀█       │\r\n");
 8000bcc:	481e      	ldr	r0, [pc, #120]	@ (8000c48 <welcome+0xa4>)
 8000bce:	f015 f987 	bl	8015ee0 <CDC_SendString>
    CDC_SendString("└─────────────────────────────────────────────────────────────┘\r\n");
 8000bd2:	481e      	ldr	r0, [pc, #120]	@ (8000c4c <welcome+0xa8>)
 8000bd4:	f015 f984 	bl	8015ee0 <CDC_SendString>
 	CDC_SendString("░█████╗░██████╗░░█████╗░░░░░░░██████╗░██╗░░░██╗░█████╗░██╗░░░░░\r\n");
 8000bd8:	481d      	ldr	r0, [pc, #116]	@ (8000c50 <welcome+0xac>)
 8000bda:	f015 f981 	bl	8015ee0 <CDC_SendString>
 	CDC_SendString("██╔══██╗██╔══██╗██╔══██╗░░░░░░██╔══██╗██║░░░██║██╔══██╗██║░░░░░\r\n");
 8000bde:	481d      	ldr	r0, [pc, #116]	@ (8000c54 <welcome+0xb0>)
 8000be0:	f015 f97e 	bl	8015ee0 <CDC_SendString>
 	CDC_SendString("██║░░██║██████╦╝██║░░╚═╝█████╗██║░░██║██║░░░██║███████║██║░░░░░\r\n");
 8000be4:	481c      	ldr	r0, [pc, #112]	@ (8000c58 <welcome+0xb4>)
 8000be6:	f015 f97b 	bl	8015ee0 <CDC_SendString>
    CDC_SendString("██║░░██║██╔══██╗██║░░██╗╚════╝██║░░██║██║░░░██║██╔══██║██║░░░░░\r\n");
 8000bea:	481c      	ldr	r0, [pc, #112]	@ (8000c5c <welcome+0xb8>)
 8000bec:	f015 f978 	bl	8015ee0 <CDC_SendString>
 	CDC_SendString("╚█████╔╝██████╦╝╚█████╔╝░░░░░░██████╔╝╚██████╔╝██║░░██║███████╗\r\n");
 8000bf0:	481b      	ldr	r0, [pc, #108]	@ (8000c60 <welcome+0xbc>)
 8000bf2:	f015 f975 	bl	8015ee0 <CDC_SendString>
 	CDC_SendString("░╚════╝░╚═════╝░░╚════╝░░░░░░░╚═════╝░░╚═════╝░╚═╝░░╚═╝╚══════╝\r\n");
 8000bf6:	481b      	ldr	r0, [pc, #108]	@ (8000c64 <welcome+0xc0>)
 8000bf8:	f015 f972 	bl	8015ee0 <CDC_SendString>
 	CDC_SendString("├─────────────────────────────────────────────────────────────┤\r\n");
 8000bfc:	481a      	ldr	r0, [pc, #104]	@ (8000c68 <welcome+0xc4>)
 8000bfe:	f015 f96f 	bl	8015ee0 <CDC_SendString>
    TERMINAL_FONT_DEFAULT();
 8000c02:	481a      	ldr	r0, [pc, #104]	@ (8000c6c <welcome+0xc8>)
 8000c04:	f015 f96c 	bl	8015ee0 <CDC_SendString>
    HAL_Delay(50);
 8000c08:	2032      	movs	r0, #50	@ 0x32
 8000c0a:	f005 f8e9 	bl	8005de0 <HAL_Delay>
 	TERMINAL_FONT_RED();
 8000c0e:	4818      	ldr	r0, [pc, #96]	@ (8000c70 <welcome+0xcc>)
 8000c10:	f015 f966 	bl	8015ee0 <CDC_SendString>
 	CDC_SendString("--->>> Use key \"-\" or  key \"=\" for history and \\ for Suggestions\r\n");
 8000c14:	4817      	ldr	r0, [pc, #92]	@ (8000c74 <welcome+0xd0>)
 8000c16:	f015 f963 	bl	8015ee0 <CDC_SendString>
 	CDC_SendString("> ");
 8000c1a:	4817      	ldr	r0, [pc, #92]	@ (8000c78 <welcome+0xd4>)
 8000c1c:	f015 f960 	bl	8015ee0 <CDC_SendString>
    TERMINAL_FONT_DEFAULT();
 8000c20:	4812      	ldr	r0, [pc, #72]	@ (8000c6c <welcome+0xc8>)
 8000c22:	f015 f95d 	bl	8015ee0 <CDC_SendString>
//    PRINT_CLI_NAME();
    TERMINAL_SHOW_CURSOR();
 8000c26:	4815      	ldr	r0, [pc, #84]	@ (8000c7c <welcome+0xd8>)
 8000c28:	f015 f95a 	bl	8015ee0 <CDC_SendString>


}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	0801c950 	.word	0x0801c950
 8000c34:	0801c958 	.word	0x0801c958
 8000c38:	0801c960 	.word	0x0801c960
 8000c3c:	0801c964 	.word	0x0801c964
 8000c40:	0801c96c 	.word	0x0801c96c
 8000c44:	0801ca2c 	.word	0x0801ca2c
 8000c48:	0801cac8 	.word	0x0801cac8
 8000c4c:	0801cb68 	.word	0x0801cb68
 8000c50:	0801cc28 	.word	0x0801cc28
 8000c54:	0801cce8 	.word	0x0801cce8
 8000c58:	0801cda8 	.word	0x0801cda8
 8000c5c:	0801ce68 	.word	0x0801ce68
 8000c60:	0801cf28 	.word	0x0801cf28
 8000c64:	0801cfe8 	.word	0x0801cfe8
 8000c68:	0801d0a8 	.word	0x0801d0a8
 8000c6c:	0801d168 	.word	0x0801d168
 8000c70:	0801d170 	.word	0x0801d170
 8000c74:	0801d178 	.word	0x0801d178
 8000c78:	0801d1bc 	.word	0x0801d1bc
 8000c7c:	0801d1c0 	.word	0x0801d1c0

08000c80 <cmdline_init>:

void	cmdline_init()
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	currentMode = CMDLINE_MODE_CLI;
 8000c84:	4b07      	ldr	r3, [pc, #28]	@ (8000ca4 <cmdline_init+0x24>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	701a      	strb	r2, [r3, #0]
//	p_CommandRingBuffer = uart_get_uart0_rx_buffer_address();
	memset((void *)s_commandBuffer, 0, sizeof(s_commandBuffer));
 8000c8a:	2240      	movs	r2, #64	@ 0x40
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4806      	ldr	r0, [pc, #24]	@ (8000ca8 <cmdline_init+0x28>)
 8000c90:	f017 fd16 	bl	80186c0 <memset>
	s_commandBufferIndex = 0;
 8000c94:	4b05      	ldr	r3, [pc, #20]	@ (8000cac <cmdline_init+0x2c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	701a      	strb	r2, [r3, #0]

    welcome();
 8000c9a:	f7ff ff83 	bl	8000ba4 <welcome>
//    UART_Flush_RingTx(UART_CMDLINE);

}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	24000518 	.word	0x24000518
 8000ca8:	240006a4 	.word	0x240006a4
 8000cac:	240006e4 	.word	0x240006e4

08000cb0 <cmdline_task_update>:

static void cmdline_task_update(void) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
    char rxData;

    if (CDC_IsDataAvailable()) {
 8000cb6:	f015 f903 	bl	8015ec0 <CDC_IsDataAvailable>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d029      	beq.n	8000d14 <cmdline_task_update+0x64>

        rxData = CDC_ReadChar();
 8000cc0:	f015 f8f0 	bl	8015ea4 <CDC_ReadChar>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	71fb      	strb	r3, [r7, #7]

        if(rxData == 27){
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	2b1b      	cmp	r3, #27
 8000ccc:	d108      	bne.n	8000ce0 <cmdline_task_update+0x30>
        	monitor = 0;
 8000cce:	4b13      	ldr	r3, [pc, #76]	@ (8000d1c <cmdline_task_update+0x6c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	701a      	strb	r2, [r3, #0]
        	cmdline_init();
 8000cd4:	f7ff ffd4 	bl	8000c80 <cmdline_init>
        	currentMode = CMDLINE_MODE_CLI;
 8000cd8:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <cmdline_task_update+0x70>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
 8000cde:	e007      	b.n	8000cf0 <cmdline_task_update+0x40>
        }else{
          char str[2] = {rxData};
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	80bb      	strh	r3, [r7, #4]
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	713b      	strb	r3, [r7, #4]
      	  CDC_SendString(str);
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	4618      	mov	r0, r3
 8000cec:	f015 f8f8 	bl	8015ee0 <CDC_SendString>
        }

        if (currentMode == CMDLINE_MODE_CLI) {
 8000cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8000d20 <cmdline_task_update+0x70>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d105      	bne.n	8000d04 <cmdline_task_update+0x54>
            process_command(rxData, &pContext);
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	490a      	ldr	r1, [pc, #40]	@ (8000d24 <cmdline_task_update+0x74>)
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f000 ff29 	bl	8001b54 <process_command>
        } else if (currentMode == CMDLINE_MODE_GUI) {
            process_gui_command(rxData);
        }
    }
}
 8000d02:	e007      	b.n	8000d14 <cmdline_task_update+0x64>
        } else if (currentMode == CMDLINE_MODE_GUI) {
 8000d04:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <cmdline_task_update+0x70>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d103      	bne.n	8000d14 <cmdline_task_update+0x64>
            process_gui_command(rxData);
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f000 f982 	bl	8001018 <process_gui_command>
}
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	240020cd 	.word	0x240020cd
 8000d20:	24000518 	.word	0x24000518
 8000d24:	2400051c 	.word	0x2400051c

08000d28 <CMD_gui_ast>:

int CMD_gui_ast(int argc, char *argv[]) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
    if (argc != 1) {
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d001      	beq.n	8000d3c <CMD_gui_ast+0x14>
        return CMDLINE_TOO_MANY_ARGS;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	e01b      	b.n	8000d74 <CMD_gui_ast+0x4c>
    }

    currentMode = CMDLINE_MODE_GUI;
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d7c <CMD_gui_ast+0x54>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	701a      	strb	r2, [r3, #0]
	welcome();
 8000d42:	f7ff ff2f 	bl	8000ba4 <welcome>

	// Return success.
    TERMINAL_BACK_DEFAULT(); /* set terminal background color: black */
 8000d46:	480e      	ldr	r0, [pc, #56]	@ (8000d80 <CMD_gui_ast+0x58>)
 8000d48:	f015 f8ca 	bl	8015ee0 <CDC_SendString>
    TERMINAL_FONT_DEFAULT(); /* set terminal display color: green */
 8000d4c:	480d      	ldr	r0, [pc, #52]	@ (8000d84 <CMD_gui_ast+0x5c>)
 8000d4e:	f015 f8c7 	bl	8015ee0 <CDC_SendString>

    /* This prints the clear screen and move cursor to top-left corner control
     * characters for VT100 terminals. This means it will not work on
     * non-VT100 compliant terminals, namely Windows' cmd.exe, but should
     * work on anything unix-y. */
    TERMINAL_RESET_CURSOR();
 8000d52:	480d      	ldr	r0, [pc, #52]	@ (8000d88 <CMD_gui_ast+0x60>)
 8000d54:	f015 f8c4 	bl	8015ee0 <CDC_SendString>
    TERMINAL_DISPLAY_CLEAR();
 8000d58:	480c      	ldr	r0, [pc, #48]	@ (8000d8c <CMD_gui_ast+0x64>)
 8000d5a:	f015 f8c1 	bl	8015ee0 <CDC_SendString>

    CDC_SendString("Entering GUI mode...\r\n");
 8000d5e:	480c      	ldr	r0, [pc, #48]	@ (8000d90 <CMD_gui_ast+0x68>)
 8000d60:	f015 f8be 	bl	8015ee0 <CDC_SendString>
    CDC_SendString("OBC Board Dual Rev1.0\r\n\r\n");
 8000d64:	480b      	ldr	r0, [pc, #44]	@ (8000d94 <CMD_gui_ast+0x6c>)
 8000d66:	f015 f8bb 	bl	8015ee0 <CDC_SendString>
    gui_cover_generator();
 8000d6a:	f000 f92f 	bl	8000fcc <gui_cover_generator>
    menu_generator();
 8000d6e:	f000 f89d 	bl	8000eac <menu_generator>



    return CMDLINE_NONE_RETURN;
 8000d72:	2306      	movs	r3, #6
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	24000518 	.word	0x24000518
 8000d80:	0801c950 	.word	0x0801c950
 8000d84:	0801d168 	.word	0x0801d168
 8000d88:	0801c960 	.word	0x0801c960
 8000d8c:	0801c958 	.word	0x0801c958
 8000d90:	0801d1c8 	.word	0x0801d1c8
 8000d94:	0801d1e0 	.word	0x0801d1e0

08000d98 <CMD_monitor>:

int CMD_monitor(int argc, char *argv[]) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
    if (argc != 1) {
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d001      	beq.n	8000dac <CMD_monitor+0x14>
        return CMDLINE_TOO_MANY_ARGS;
 8000da8:	2302      	movs	r3, #2
 8000daa:	e05a      	b.n	8000e62 <CMD_monitor+0xca>
    }
//
//    currentMode = CMDLINE_MODE_MONITOR;

	welcome();
 8000dac:	f7ff fefa 	bl	8000ba4 <welcome>

	// Return success.
    TERMINAL_BACK_DEFAULT(); /* set terminal background color: black */
 8000db0:	482e      	ldr	r0, [pc, #184]	@ (8000e6c <CMD_monitor+0xd4>)
 8000db2:	f015 f895 	bl	8015ee0 <CDC_SendString>
    TERMINAL_FONT_DEFAULT(); /* set terminal display color: green */
 8000db6:	482e      	ldr	r0, [pc, #184]	@ (8000e70 <CMD_monitor+0xd8>)
 8000db8:	f015 f892 	bl	8015ee0 <CDC_SendString>

    /* This prints the clear screen and move cursor to top-left corner control
     * characters for VT100 terminals. This means it will not work on
     * non-VT100 compliant terminals, namely Windows' cmd.exe, but should
     * work on anything unix-y. */
    TERMINAL_RESET_CURSOR();
 8000dbc:	482d      	ldr	r0, [pc, #180]	@ (8000e74 <CMD_monitor+0xdc>)
 8000dbe:	f015 f88f 	bl	8015ee0 <CDC_SendString>
    TERMINAL_DISPLAY_CLEAR();
 8000dc2:	482d      	ldr	r0, [pc, #180]	@ (8000e78 <CMD_monitor+0xe0>)
 8000dc4:	f015 f88c 	bl	8015ee0 <CDC_SendString>

    CDC_SendString("Entering Monitor Mode...\r\n");
 8000dc8:	482c      	ldr	r0, [pc, #176]	@ (8000e7c <CMD_monitor+0xe4>)
 8000dca:	f015 f889 	bl	8015ee0 <CDC_SendString>
    CDC_SendString("OBC Board Dual Rev1.0\r\n\r\n");
 8000dce:	482c      	ldr	r0, [pc, #176]	@ (8000e80 <CMD_monitor+0xe8>)
 8000dd0:	f015 f886 	bl	8015ee0 <CDC_SendString>
    monitor_cover_generator();
 8000dd4:	f000 f8d4 	bl	8000f80 <monitor_cover_generator>

	cursor_move_to(8, 7);
 8000dd8:	2107      	movs	r1, #7
 8000dda:	2008      	movs	r0, #8
 8000ddc:	f000 f8b6 	bl	8000f4c <cursor_move_to>
	CDC_SendString("EXP Tec Mode:");
 8000de0:	4828      	ldr	r0, [pc, #160]	@ (8000e84 <CMD_monitor+0xec>)
 8000de2:	f015 f87d 	bl	8015ee0 <CDC_SendString>

	cursor_move_to(8, 8);
 8000de6:	2108      	movs	r1, #8
 8000de8:	2008      	movs	r0, #8
 8000dea:	f000 f8af 	bl	8000f4c <cursor_move_to>
	CDC_SendString("Set Temperature:");
 8000dee:	4826      	ldr	r0, [pc, #152]	@ (8000e88 <CMD_monitor+0xf0>)
 8000df0:	f015 f876 	bl	8015ee0 <CDC_SendString>

	cursor_move_to(8, 9);
 8000df4:	2109      	movs	r1, #9
 8000df6:	2008      	movs	r0, #8
 8000df8:	f000 f8a8 	bl	8000f4c <cursor_move_to>
	CDC_SendString("Current Temperature:");
 8000dfc:	4823      	ldr	r0, [pc, #140]	@ (8000e8c <CMD_monitor+0xf4>)
 8000dfe:	f015 f86f 	bl	8015ee0 <CDC_SendString>

	cursor_move_to(8, 11);
 8000e02:	210b      	movs	r1, #11
 8000e04:	2008      	movs	r0, #8
 8000e06:	f000 f8a1 	bl	8000f4c <cursor_move_to>

	const char *bottomLine = "──────────────────────────────────────────────────────────────────────\r\n";
 8000e0a:	4b21      	ldr	r3, [pc, #132]	@ (8000e90 <CMD_monitor+0xf8>)
 8000e0c:	60fb      	str	r3, [r7, #12]
    CDC_SendString(bottomLine);
 8000e0e:	68f8      	ldr	r0, [r7, #12]
 8000e10:	f015 f866 	bl	8015ee0 <CDC_SendString>

	cursor_move_to(8, 13);
 8000e14:	210d      	movs	r1, #13
 8000e16:	2008      	movs	r0, #8
 8000e18:	f000 f898 	bl	8000f4c <cursor_move_to>
	CDC_SendString("Laser Slot:");
 8000e1c:	481d      	ldr	r0, [pc, #116]	@ (8000e94 <CMD_monitor+0xfc>)
 8000e1e:	f015 f85f 	bl	8015ee0 <CDC_SendString>

	cursor_move_to(8, 14);
 8000e22:	210e      	movs	r1, #14
 8000e24:	2008      	movs	r0, #8
 8000e26:	f000 f891 	bl	8000f4c <cursor_move_to>
	CDC_SendString("Laser Current:");
 8000e2a:	481b      	ldr	r0, [pc, #108]	@ (8000e98 <CMD_monitor+0x100>)
 8000e2c:	f015 f858 	bl	8015ee0 <CDC_SendString>

	cursor_move_to(8, 15);
 8000e30:	210f      	movs	r1, #15
 8000e32:	2008      	movs	r0, #8
 8000e34:	f000 f88a 	bl	8000f4c <cursor_move_to>
	CDC_SendString("Laser Voltage:");
 8000e38:	4818      	ldr	r0, [pc, #96]	@ (8000e9c <CMD_monitor+0x104>)
 8000e3a:	f015 f851 	bl	8015ee0 <CDC_SendString>

	cursor_move_to(8, 16);
 8000e3e:	2110      	movs	r1, #16
 8000e40:	2008      	movs	r0, #8
 8000e42:	f000 f883 	bl	8000f4c <cursor_move_to>
	CDC_SendString("Photo Voltage:");
 8000e46:	4816      	ldr	r0, [pc, #88]	@ (8000ea0 <CMD_monitor+0x108>)
 8000e48:	f015 f84a 	bl	8015ee0 <CDC_SendString>

	cursor_move_to(32, 21);
 8000e4c:	2115      	movs	r1, #21
 8000e4e:	2020      	movs	r0, #32
 8000e50:	f000 f87c 	bl	8000f4c <cursor_move_to>
	CDC_SendString("<Key ESC to Exit>");
 8000e54:	4813      	ldr	r0, [pc, #76]	@ (8000ea4 <CMD_monitor+0x10c>)
 8000e56:	f015 f843 	bl	8015ee0 <CDC_SendString>


    monitor = 1;
 8000e5a:	4b13      	ldr	r3, [pc, #76]	@ (8000ea8 <CMD_monitor+0x110>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	701a      	strb	r2, [r3, #0]

    return CMDLINE_NONE_RETURN;
 8000e60:	2306      	movs	r3, #6

}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	0801c950 	.word	0x0801c950
 8000e70:	0801d168 	.word	0x0801d168
 8000e74:	0801c960 	.word	0x0801c960
 8000e78:	0801c958 	.word	0x0801c958
 8000e7c:	0801d1fc 	.word	0x0801d1fc
 8000e80:	0801d1e0 	.word	0x0801d1e0
 8000e84:	0801d218 	.word	0x0801d218
 8000e88:	0801d228 	.word	0x0801d228
 8000e8c:	0801d23c 	.word	0x0801d23c
 8000e90:	0801d254 	.word	0x0801d254
 8000e94:	0801d32c 	.word	0x0801d32c
 8000e98:	0801d338 	.word	0x0801d338
 8000e9c:	0801d348 	.word	0x0801d348
 8000ea0:	0801d358 	.word	0x0801d358
 8000ea4:	0801d368 	.word	0x0801d368
 8000ea8:	240020cd 	.word	0x240020cd

08000eac <menu_generator>:

void menu_generator(){
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	cursor_move_to(8, 7);
 8000eb0:	2107      	movs	r1, #7
 8000eb2:	2008      	movs	r0, #8
 8000eb4:	f000 f84a 	bl	8000f4c <cursor_move_to>
	TERMINAL_HIGHLIGHT();
 8000eb8:	4818      	ldr	r0, [pc, #96]	@ (8000f1c <menu_generator+0x70>)
 8000eba:	f015 f811 	bl	8015ee0 <CDC_SendString>
	CDC_SendString("1  ");
 8000ebe:	4818      	ldr	r0, [pc, #96]	@ (8000f20 <menu_generator+0x74>)
 8000ec0:	f015 f80e 	bl	8015ee0 <CDC_SendString>
	CDC_SendString("System Options");
 8000ec4:	4817      	ldr	r0, [pc, #92]	@ (8000f24 <menu_generator+0x78>)
 8000ec6:	f015 f80b 	bl	8015ee0 <CDC_SendString>

	CDC_SendString("            Do Something with Options in here    ");
 8000eca:	4817      	ldr	r0, [pc, #92]	@ (8000f28 <menu_generator+0x7c>)
 8000ecc:	f015 f808 	bl	8015ee0 <CDC_SendString>
	TERMINAL_UN_HIGHLIGHT();
 8000ed0:	4816      	ldr	r0, [pc, #88]	@ (8000f2c <menu_generator+0x80>)
 8000ed2:	f015 f805 	bl	8015ee0 <CDC_SendString>
	cursor_move_to(8, 8);
 8000ed6:	2108      	movs	r1, #8
 8000ed8:	2008      	movs	r0, #8
 8000eda:	f000 f837 	bl	8000f4c <cursor_move_to>
	CDC_SendString("2  ");
 8000ede:	4814      	ldr	r0, [pc, #80]	@ (8000f30 <menu_generator+0x84>)
 8000ee0:	f014 fffe 	bl	8015ee0 <CDC_SendString>
	CDC_SendString("Display Options");
 8000ee4:	4813      	ldr	r0, [pc, #76]	@ (8000f34 <menu_generator+0x88>)
 8000ee6:	f014 fffb 	bl	8015ee0 <CDC_SendString>

	CDC_SendString("           Do Something with Options in here    ");
 8000eea:	4813      	ldr	r0, [pc, #76]	@ (8000f38 <menu_generator+0x8c>)
 8000eec:	f014 fff8 	bl	8015ee0 <CDC_SendString>
	cursor_move_to(8, 9);
 8000ef0:	2109      	movs	r1, #9
 8000ef2:	2008      	movs	r0, #8
 8000ef4:	f000 f82a 	bl	8000f4c <cursor_move_to>
	CDC_SendString("3  ");
 8000ef8:	4810      	ldr	r0, [pc, #64]	@ (8000f3c <menu_generator+0x90>)
 8000efa:	f014 fff1 	bl	8015ee0 <CDC_SendString>
	CDC_SendString("LED Options");
 8000efe:	4810      	ldr	r0, [pc, #64]	@ (8000f40 <menu_generator+0x94>)
 8000f00:	f014 ffee 	bl	8015ee0 <CDC_SendString>

	CDC_SendString("               Do Something with Options in here    ");
 8000f04:	480f      	ldr	r0, [pc, #60]	@ (8000f44 <menu_generator+0x98>)
 8000f06:	f014 ffeb 	bl	8015ee0 <CDC_SendString>

	cursor_move_to(32, 21);
 8000f0a:	2115      	movs	r1, #21
 8000f0c:	2020      	movs	r0, #32
 8000f0e:	f000 f81d 	bl	8000f4c <cursor_move_to>
	CDC_SendString("<Key ESC to Exit>");
 8000f12:	480d      	ldr	r0, [pc, #52]	@ (8000f48 <menu_generator+0x9c>)
 8000f14:	f014 ffe4 	bl	8015ee0 <CDC_SendString>
}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	0801d37c 	.word	0x0801d37c
 8000f20:	0801d384 	.word	0x0801d384
 8000f24:	0801d388 	.word	0x0801d388
 8000f28:	0801d398 	.word	0x0801d398
 8000f2c:	0801d3cc 	.word	0x0801d3cc
 8000f30:	0801d3d4 	.word	0x0801d3d4
 8000f34:	0801d3d8 	.word	0x0801d3d8
 8000f38:	0801d3e8 	.word	0x0801d3e8
 8000f3c:	0801d41c 	.word	0x0801d41c
 8000f40:	0801d420 	.word	0x0801d420
 8000f44:	0801d42c 	.word	0x0801d42c
 8000f48:	0801d368 	.word	0x0801d368

08000f4c <cursor_move_to>:

void cursor_move_to(int x, int y){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08c      	sub	sp, #48	@ 0x30
 8000f50:	af02      	add	r7, sp, #8
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
	// ->x
	//   y
    char buffer[30];
    snprintf(buffer, sizeof(buffer), "\033[%d;%dH", (y), (x));
 8000f56:	f107 0008 	add.w	r0, r7, #8
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	4a06      	ldr	r2, [pc, #24]	@ (8000f7c <cursor_move_to+0x30>)
 8000f62:	211e      	movs	r1, #30
 8000f64:	f017 fa44 	bl	80183f0 <sniprintf>
    CDC_SendString(buffer);
 8000f68:	f107 0308 	add.w	r3, r7, #8
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f014 ffb7 	bl	8015ee0 <CDC_SendString>
}
 8000f72:	bf00      	nop
 8000f74:	3728      	adds	r7, #40	@ 0x28
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	0801d464 	.word	0x0801d464

08000f80 <monitor_cover_generator>:


void monitor_cover_generator(){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
    const char *topLine =    "┌──────────────────────────┤ OBCDual GUI >Monitor< ├───────────────────────────┐\r\n";
 8000f86:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc0 <monitor_cover_generator+0x40>)
 8000f88:	60bb      	str	r3, [r7, #8]
    const char *middleLine = "│                                                                              │\r\n";
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc4 <monitor_cover_generator+0x44>)
 8000f8c:	607b      	str	r3, [r7, #4]
    const char *bottomLine = "└──────────────────────────────────────────────────────────────────────────────┘\r\n";
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc8 <monitor_cover_generator+0x48>)
 8000f90:	603b      	str	r3, [r7, #0]
    CDC_SendString(topLine);
 8000f92:	68b8      	ldr	r0, [r7, #8]
 8000f94:	f014 ffa4 	bl	8015ee0 <CDC_SendString>
    for(int i = 0; i < 17 ; i++){
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	e005      	b.n	8000faa <monitor_cover_generator+0x2a>
    	CDC_SendString(middleLine);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f014 ff9e 	bl	8015ee0 <CDC_SendString>
    for(int i = 0; i < 17 ; i++){
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	2b10      	cmp	r3, #16
 8000fae:	ddf6      	ble.n	8000f9e <monitor_cover_generator+0x1e>
    }
    CDC_SendString(bottomLine);
 8000fb0:	6838      	ldr	r0, [r7, #0]
 8000fb2:	f014 ff95 	bl	8015ee0 <CDC_SendString>

}
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	0801d470 	.word	0x0801d470
 8000fc4:	0801d538 	.word	0x0801d538
 8000fc8:	0801d590 	.word	0x0801d590

08000fcc <gui_cover_generator>:

void gui_cover_generator(){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
    const char *topLine =    "┌──────────────────────────┤ OBCDual GUI ASSISTANT ├───────────────────────────┐\r\n";
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800100c <gui_cover_generator+0x40>)
 8000fd4:	60bb      	str	r3, [r7, #8]
    const char *middleLine = "│                                                                              │\r\n";
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001010 <gui_cover_generator+0x44>)
 8000fd8:	607b      	str	r3, [r7, #4]
    const char *bottomLine = "└──────────────────────────────────────────────────────────────────────────────┘\r\n";
 8000fda:	4b0e      	ldr	r3, [pc, #56]	@ (8001014 <gui_cover_generator+0x48>)
 8000fdc:	603b      	str	r3, [r7, #0]
    CDC_SendString(topLine);
 8000fde:	68b8      	ldr	r0, [r7, #8]
 8000fe0:	f014 ff7e 	bl	8015ee0 <CDC_SendString>
    for(int i = 0; i < 17 ; i++){
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	e005      	b.n	8000ff6 <gui_cover_generator+0x2a>
    	CDC_SendString(middleLine);
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f014 ff78 	bl	8015ee0 <CDC_SendString>
    for(int i = 0; i < 17 ; i++){
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	2b10      	cmp	r3, #16
 8000ffa:	ddf6      	ble.n	8000fea <gui_cover_generator+0x1e>
    }
    CDC_SendString(bottomLine);
 8000ffc:	6838      	ldr	r0, [r7, #0]
 8000ffe:	f014 ff6f 	bl	8015ee0 <CDC_SendString>

}
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	0801d684 	.word	0x0801d684
 8001010:	0801d538 	.word	0x0801d538
 8001014:	0801d590 	.word	0x0801d590

08001018 <process_gui_command>:


void process_gui_command(char rxData) {
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]

}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <find_matches>:


static int find_matches(const char *input, char matches[][COMMAND_MAX_LENGTH], int max_matches) {
 8001030:	b590      	push	{r4, r7, lr}
 8001032:	b087      	sub	sp, #28
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
    int count = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]

    for (int i = 0; g_psCmdTable[i].pcCmd != NULL; i++) {
 8001040:	2300      	movs	r3, #0
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	e034      	b.n	80010b0 <find_matches+0x80>
        if (strncmp(g_psCmdTable[i].pcCmd, input, strlen(input)) == 0) {
 8001046:	4923      	ldr	r1, [pc, #140]	@ (80010d4 <find_matches+0xa4>)
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	4613      	mov	r3, r2
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	4413      	add	r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	440b      	add	r3, r1
 8001054:	681c      	ldr	r4, [r3, #0]
 8001056:	68f8      	ldr	r0, [r7, #12]
 8001058:	f7ff f9a2 	bl	80003a0 <strlen>
 800105c:	4603      	mov	r3, r0
 800105e:	461a      	mov	r2, r3
 8001060:	68f9      	ldr	r1, [r7, #12]
 8001062:	4620      	mov	r0, r4
 8001064:	f017 fb41 	bl	80186ea <strncmp>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d11d      	bne.n	80010aa <find_matches+0x7a>
            strncpy(matches[count], g_psCmdTable[i].pcCmd, COMMAND_MAX_LENGTH);
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	019b      	lsls	r3, r3, #6
 8001072:	68ba      	ldr	r2, [r7, #8]
 8001074:	18d0      	adds	r0, r2, r3
 8001076:	4917      	ldr	r1, [pc, #92]	@ (80010d4 <find_matches+0xa4>)
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4613      	mov	r3, r2
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	4413      	add	r3, r2
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	440b      	add	r3, r1
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2240      	movs	r2, #64	@ 0x40
 8001088:	4619      	mov	r1, r3
 800108a:	f017 fb40 	bl	801870e <strncpy>
            matches[count][COMMAND_MAX_LENGTH - 1] = '\0';
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	019b      	lsls	r3, r3, #6
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	4413      	add	r3, r2
 8001096:	2200      	movs	r2, #0
 8001098:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
            count++;
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	3301      	adds	r3, #1
 80010a0:	617b      	str	r3, [r7, #20]
            if (count >= max_matches) {
 80010a2:	697a      	ldr	r2, [r7, #20]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	da0d      	bge.n	80010c6 <find_matches+0x96>
    for (int i = 0; g_psCmdTable[i].pcCmd != NULL; i++) {
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	3301      	adds	r3, #1
 80010ae:	613b      	str	r3, [r7, #16]
 80010b0:	4908      	ldr	r1, [pc, #32]	@ (80010d4 <find_matches+0xa4>)
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4613      	mov	r3, r2
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	4413      	add	r3, r2
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	440b      	add	r3, r1
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d1c0      	bne.n	8001046 <find_matches+0x16>
 80010c4:	e000      	b.n	80010c8 <find_matches+0x98>
                break;
 80010c6:	bf00      	nop
            }
        }
    }

    return count;
 80010c8:	697b      	ldr	r3, [r7, #20]
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	371c      	adds	r7, #28
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd90      	pop	{r4, r7, pc}
 80010d2:	bf00      	nop
 80010d4:	24000018 	.word	0x24000018

080010d8 <CMD_help>:


/*-----------------------COMMAND FUNCTION LIST---------------------------*/

int CMD_help(int argc, char *argv[]) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b0cc      	sub	sp, #304	@ 0x130
 80010dc:	af04      	add	r7, sp, #16
 80010de:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80010e2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80010e6:	6018      	str	r0, [r3, #0]
 80010e8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80010ec:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80010f0:	6019      	str	r1, [r3, #0]
    if ((argc) < 1) return CMDLINE_TOO_FEW_ARGS;
 80010f2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80010f6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	dc01      	bgt.n	8001104 <CMD_help+0x2c>
 8001100:	2303      	movs	r3, #3
 8001102:	e066      	b.n	80011d2 <CMD_help+0xfa>
    if ((argc) > 1) return CMDLINE_TOO_MANY_ARGS;
 8001104:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001108:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2b01      	cmp	r3, #1
 8001110:	dd01      	ble.n	8001116 <CMD_help+0x3e>
 8001112:	2302      	movs	r3, #2
 8001114:	e05d      	b.n	80011d2 <CMD_help+0xfa>

    CDC_SendString("\r\nAvailable commands:\r\n");
 8001116:	4831      	ldr	r0, [pc, #196]	@ (80011dc <CMD_help+0x104>)
 8001118:	f014 fee2 	bl	8015ee0 <CDC_SendString>

    tCmdLineEntry *pEntry = &g_psCmdTable[0];
 800111c:	4b30      	ldr	r3, [pc, #192]	@ (80011e0 <CMD_help+0x108>)
 800111e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    size_t maxCmdLength = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    while (pEntry->pcCmd) {
 8001128:	e016      	b.n	8001158 <CMD_help+0x80>
        size_t cmdLength = strlen(pEntry->pcCmd);
 800112a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff f935 	bl	80003a0 <strlen>
 8001136:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
        if (cmdLength > maxCmdLength) {
 800113a:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800113e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001142:	429a      	cmp	r2, r3
 8001144:	d903      	bls.n	800114e <CMD_help+0x76>
            maxCmdLength = cmdLength;
 8001146:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800114a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
        }
        pEntry++;
 800114e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001152:	330c      	adds	r3, #12
 8001154:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    while (pEntry->pcCmd) {
 8001158:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d1e3      	bne.n	800112a <CMD_help+0x52>
    }
    pEntry = &g_psCmdTable[0];
 8001162:	4b1f      	ldr	r3, [pc, #124]	@ (80011e0 <CMD_help+0x108>)
 8001164:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    while (pEntry->pcCmd) {
 8001168:	e02d      	b.n	80011c6 <CMD_help+0xee>
        char buffer[256];
        size_t cmdLength = strlen(pEntry->pcCmd);
 800116a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff f915 	bl	80003a0 <strlen>
 8001176:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
        int padding = (int)(maxCmdLength - cmdLength + 4);
 800117a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800117e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	3304      	adds	r3, #4
 8001186:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
        snprintf(buffer, sizeof(buffer), "\r\n[%s]%*s: %s",
 800118a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f107 000c 	add.w	r0, r7, #12
 800119a:	9302      	str	r3, [sp, #8]
 800119c:	4b11      	ldr	r3, [pc, #68]	@ (80011e4 <CMD_help+0x10c>)
 800119e:	9301      	str	r3, [sp, #4]
 80011a0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	4613      	mov	r3, r2
 80011a8:	4a0f      	ldr	r2, [pc, #60]	@ (80011e8 <CMD_help+0x110>)
 80011aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011ae:	f017 f91f 	bl	80183f0 <sniprintf>
                 pEntry->pcCmd, padding, "", pEntry->pcHelp);

        CDC_SendString(buffer);
 80011b2:	f107 030c 	add.w	r3, r7, #12
 80011b6:	4618      	mov	r0, r3
 80011b8:	f014 fe92 	bl	8015ee0 <CDC_SendString>
        pEntry++;
 80011bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80011c0:	330c      	adds	r3, #12
 80011c2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    while (pEntry->pcCmd) {
 80011c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d1cc      	bne.n	800116a <CMD_help+0x92>
    }

    return (CMDLINE_OK);
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	0801d74c 	.word	0x0801d74c
 80011e0:	24000018 	.word	0x24000018
 80011e4:	0801d774 	.word	0x0801d774
 80011e8:	0801d764 	.word	0x0801d764

080011ec <CMD_welcome>:


int CMD_welcome(int argc, char *argv[]) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
    if ((argc) < 1) return CMDLINE_TOO_FEW_ARGS;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	dc01      	bgt.n	8001200 <CMD_welcome+0x14>
 80011fc:	2303      	movs	r3, #3
 80011fe:	e007      	b.n	8001210 <CMD_welcome+0x24>
    if ((argc) > 1) return CMDLINE_TOO_MANY_ARGS;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b01      	cmp	r3, #1
 8001204:	dd01      	ble.n	800120a <CMD_welcome+0x1e>
 8001206:	2302      	movs	r3, #2
 8001208:	e002      	b.n	8001210 <CMD_welcome+0x24>
	welcome();
 800120a:	f7ff fccb 	bl	8000ba4 <welcome>
	// Return success.

	return (CMDLINE_OK);
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <CMD_cls>:

int CMD_cls(int argc, char *argv[]) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
    if ((argc) < 1) return CMDLINE_TOO_FEW_ARGS;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	dc01      	bgt.n	800122c <CMD_cls+0x14>
 8001228:	2303      	movs	r3, #3
 800122a:	e013      	b.n	8001254 <CMD_cls+0x3c>
    if ((argc) > 1) return CMDLINE_TOO_MANY_ARGS;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b01      	cmp	r3, #1
 8001230:	dd01      	ble.n	8001236 <CMD_cls+0x1e>
 8001232:	2302      	movs	r3, #2
 8001234:	e00e      	b.n	8001254 <CMD_cls+0x3c>
	welcome();
 8001236:	f7ff fcb5 	bl	8000ba4 <welcome>
	// Return success.
    TERMINAL_BACK_DEFAULT(); /* set terminal background color: black */
 800123a:	4808      	ldr	r0, [pc, #32]	@ (800125c <CMD_cls+0x44>)
 800123c:	f014 fe50 	bl	8015ee0 <CDC_SendString>
    TERMINAL_FONT_DEFAULT(); /* set terminal display color: green */
 8001240:	4807      	ldr	r0, [pc, #28]	@ (8001260 <CMD_cls+0x48>)
 8001242:	f014 fe4d 	bl	8015ee0 <CDC_SendString>

    /* This prints the clear screen and move cursor to top-left corner control
     * characters for VT100 terminals. This means it will not work on
     * non-VT100 compliant terminals, namely Windows' cmd.exe, but should
     * work on anything unix-y. */
    TERMINAL_RESET_CURSOR();
 8001246:	4807      	ldr	r0, [pc, #28]	@ (8001264 <CMD_cls+0x4c>)
 8001248:	f014 fe4a 	bl	8015ee0 <CDC_SendString>
    TERMINAL_DISPLAY_CLEAR();
 800124c:	4806      	ldr	r0, [pc, #24]	@ (8001268 <CMD_cls+0x50>)
 800124e:	f014 fe47 	bl	8015ee0 <CDC_SendString>

	return (CMDLINE_OK);
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	0801c950 	.word	0x0801c950
 8001260:	0801d168 	.word	0x0801d168
 8001264:	0801c960 	.word	0x0801c960
 8001268:	0801c958 	.word	0x0801c958

0800126c <CMD_sd_release>:

int CMD_sd_release(int argc, char *argv[]) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
    if ((argc) < 1) return CMDLINE_TOO_FEW_ARGS;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b00      	cmp	r3, #0
 800127a:	dc01      	bgt.n	8001280 <CMD_sd_release+0x14>
 800127c:	2303      	movs	r3, #3
 800127e:	e007      	b.n	8001290 <CMD_sd_release+0x24>
    if ((argc) > 1) return CMDLINE_TOO_MANY_ARGS;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2b01      	cmp	r3, #1
 8001284:	dd01      	ble.n	800128a <CMD_sd_release+0x1e>
 8001286:	2302      	movs	r3, #2
 8001288:	e002      	b.n	8001290 <CMD_sd_release+0x24>

    SD_Release();
 800128a:	f001 f84f 	bl	800232c <SD_Release>

	return (CMDLINE_OK);
 800128e:	2300      	movs	r3, #0
}
 8001290:	4618      	mov	r0, r3
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <CMD_sd_lockin>:


int CMD_sd_lockin(int argc, char *argv[]) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
    if ((argc) < 1) return CMDLINE_TOO_FEW_ARGS;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	dc01      	bgt.n	80012ac <CMD_sd_lockin+0x14>
 80012a8:	2303      	movs	r3, #3
 80012aa:	e009      	b.n	80012c0 <CMD_sd_lockin+0x28>
    if ((argc) > 1) return CMDLINE_TOO_MANY_ARGS;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	dd01      	ble.n	80012b6 <CMD_sd_lockin+0x1e>
 80012b2:	2302      	movs	r3, #2
 80012b4:	e004      	b.n	80012c0 <CMD_sd_lockin+0x28>

    SD_Lockin();
 80012b6:	f001 f813 	bl	80022e0 <SD_Lockin>

    Link_SDFS_Driver();
 80012ba:	f001 f8e5 	bl	8002488 <Link_SDFS_Driver>

	return (CMDLINE_OK);
 80012be:	2300      	movs	r3, #0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <CMD_sd_reset>:


int CMD_sd_reset(int argc, char *argv[]) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
    if ((argc) < 1) return CMDLINE_TOO_FEW_ARGS;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	dc01      	bgt.n	80012dc <CMD_sd_reset+0x14>
 80012d8:	2303      	movs	r3, #3
 80012da:	e012      	b.n	8001302 <CMD_sd_reset+0x3a>
    if ((argc) > 1) return CMDLINE_TOO_MANY_ARGS;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	dd01      	ble.n	80012e6 <CMD_sd_reset+0x1e>
 80012e2:	2302      	movs	r3, #2
 80012e4:	e00d      	b.n	8001302 <CMD_sd_reset+0x3a>

    LL_GPIO_ResetOutputPin(HUB_RESET_GPIO_Port, HUB_RESET_Pin);
 80012e6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012ea:	4808      	ldr	r0, [pc, #32]	@ (800130c <CMD_sd_reset+0x44>)
 80012ec:	f7ff fc4a 	bl	8000b84 <LL_GPIO_ResetOutputPin>
    HAL_Delay(200);
 80012f0:	20c8      	movs	r0, #200	@ 0xc8
 80012f2:	f004 fd75 	bl	8005de0 <HAL_Delay>
    LL_GPIO_SetOutputPin(HUB_RESET_GPIO_Port, HUB_RESET_Pin);
 80012f6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012fa:	4804      	ldr	r0, [pc, #16]	@ (800130c <CMD_sd_reset+0x44>)
 80012fc:	f7ff fc34 	bl	8000b68 <LL_GPIO_SetOutputPin>
//    LL_GPIO_TogglePin(HUB_RESET_GPIO_Port, HUB_RESET_Pin);

	return (CMDLINE_OK);
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	58020400 	.word	0x58020400

08001310 <CMD_time>:

int CMD_time(int argc, char *argv[]) {
 8001310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001312:	b0bd      	sub	sp, #244	@ 0xf4
 8001314:	af0c      	add	r7, sp, #48	@ 0x30
 8001316:	61f8      	str	r0, [r7, #28]
 8001318:	61b9      	str	r1, [r7, #24]
    if (argc > 3) return CMDLINE_TOO_MANY_ARGS;
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	2b03      	cmp	r3, #3
 800131e:	dd01      	ble.n	8001324 <CMD_time+0x14>
 8001320:	2302      	movs	r3, #2
 8001322:	e0b1      	b.n	8001488 <CMD_time+0x178>
    if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	2b01      	cmp	r3, #1
 8001328:	dc01      	bgt.n	800132e <CMD_time+0x1e>
 800132a:	2303      	movs	r3, #3
 800132c:	e0ac      	b.n	8001488 <CMD_time+0x178>


    const char *operation = argv[1];
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

    if (strcmp(operation, "sync") == 0) {
 8001336:	4956      	ldr	r1, [pc, #344]	@ (8001490 <CMD_time+0x180>)
 8001338:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 800133c:	f7fe ffd0 	bl	80002e0 <strcmp>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d10c      	bne.n	8001360 <CMD_time+0x50>
        if (rtc_sync_time()) {
 8001346:	f002 fb4b 	bl	80039e0 <rtc_sync_time>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d003      	beq.n	8001358 <CMD_time+0x48>
        	CDC_SendString("RTC synchronized successfully.\r\n");
 8001350:	4850      	ldr	r0, [pc, #320]	@ (8001494 <CMD_time+0x184>)
 8001352:	f014 fdc5 	bl	8015ee0 <CDC_SendString>
 8001356:	e096      	b.n	8001486 <CMD_time+0x176>
        } else {
        	CDC_SendString("RTC synchronization failed.\r\n");
 8001358:	484f      	ldr	r0, [pc, #316]	@ (8001498 <CMD_time+0x188>)
 800135a:	f014 fdc1 	bl	8015ee0 <CDC_SendString>
 800135e:	e092      	b.n	8001486 <CMD_time+0x176>
        }
    }
    else if (strcmp(operation, "hard") == 0) {
 8001360:	494e      	ldr	r1, [pc, #312]	@ (800149c <CMD_time+0x18c>)
 8001362:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8001366:	f7fe ffbb 	bl	80002e0 <strcmp>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d154      	bne.n	800141a <CMD_time+0x10a>
        rtc_date_time_t hardTime;
        if (rtc_get_hard_time(&hardTime)) {
 8001370:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001374:	4618      	mov	r0, r3
 8001376:	f002 fb3b 	bl	80039f0 <rtc_get_hard_time>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d048      	beq.n	8001412 <CMD_time+0x102>
            rtc_date_time_t softTime = {0};
 8001380:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]

            rtc_get_soft_time(&softTime);
 800138a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800138e:	4618      	mov	r0, r3
 8001390:	f002 fbd8 	bl	8003b44 <rtc_get_soft_time>

            char buffer[128];
            snprintf(buffer, sizeof(buffer),
                     "\r\nHard-time: %04u/%02u/%02u %02u:%02u:%02u\r\n"
                     "Soft-time: %04u/%02u/%02u %02u:%02u:%02u\r\n",
                     hardTime.year, hardTime.month, hardTime.day,
 8001394:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
            snprintf(buffer, sizeof(buffer),
 8001398:	469c      	mov	ip, r3
                     hardTime.year, hardTime.month, hardTime.day,
 800139a:	f897 30b5 	ldrb.w	r3, [r7, #181]	@ 0xb5
            snprintf(buffer, sizeof(buffer),
 800139e:	617b      	str	r3, [r7, #20]
                     hardTime.year, hardTime.month, hardTime.day,
 80013a0:	f897 20b4 	ldrb.w	r2, [r7, #180]	@ 0xb4
                     hardTime.hour, hardTime.minute, hardTime.second,
 80013a4:	f897 10b8 	ldrb.w	r1, [r7, #184]	@ 0xb8
 80013a8:	f897 00b9 	ldrb.w	r0, [r7, #185]	@ 0xb9
            snprintf(buffer, sizeof(buffer),
 80013ac:	4604      	mov	r4, r0
                     hardTime.hour, hardTime.minute, hardTime.second,
 80013ae:	f897 00ba 	ldrb.w	r0, [r7, #186]	@ 0xba
            snprintf(buffer, sizeof(buffer),
 80013b2:	4605      	mov	r5, r0
                     softTime.year, softTime.month, softTime.day,
 80013b4:	f8b7 00ae 	ldrh.w	r0, [r7, #174]	@ 0xae
            snprintf(buffer, sizeof(buffer),
 80013b8:	4606      	mov	r6, r0
                     softTime.year, softTime.month, softTime.day,
 80013ba:	f897 00ad 	ldrb.w	r0, [r7, #173]	@ 0xad
            snprintf(buffer, sizeof(buffer),
 80013be:	6138      	str	r0, [r7, #16]
                     softTime.year, softTime.month, softTime.day,
 80013c0:	f897 00ac 	ldrb.w	r0, [r7, #172]	@ 0xac
            snprintf(buffer, sizeof(buffer),
 80013c4:	60f8      	str	r0, [r7, #12]
                     softTime.hour, softTime.minute, softTime.second);
 80013c6:	f897 00b0 	ldrb.w	r0, [r7, #176]	@ 0xb0
            snprintf(buffer, sizeof(buffer),
 80013ca:	60b8      	str	r0, [r7, #8]
                     softTime.hour, softTime.minute, softTime.second);
 80013cc:	f897 00b1 	ldrb.w	r0, [r7, #177]	@ 0xb1
            snprintf(buffer, sizeof(buffer),
 80013d0:	6078      	str	r0, [r7, #4]
                     softTime.hour, softTime.minute, softTime.second);
 80013d2:	f897 00b2 	ldrb.w	r0, [r7, #178]	@ 0xb2
            snprintf(buffer, sizeof(buffer),
 80013d6:	4603      	mov	r3, r0
 80013d8:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80013dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	9308      	str	r3, [sp, #32]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	9307      	str	r3, [sp, #28]
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	9306      	str	r3, [sp, #24]
 80013ee:	9605      	str	r6, [sp, #20]
 80013f0:	9504      	str	r5, [sp, #16]
 80013f2:	9403      	str	r4, [sp, #12]
 80013f4:	9102      	str	r1, [sp, #8]
 80013f6:	9201      	str	r2, [sp, #4]
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	4663      	mov	r3, ip
 80013fe:	4a28      	ldr	r2, [pc, #160]	@ (80014a0 <CMD_time+0x190>)
 8001400:	2180      	movs	r1, #128	@ 0x80
 8001402:	f016 fff5 	bl	80183f0 <sniprintf>
            CDC_SendString(buffer);
 8001406:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800140a:	4618      	mov	r0, r3
 800140c:	f014 fd68 	bl	8015ee0 <CDC_SendString>
 8001410:	e039      	b.n	8001486 <CMD_time+0x176>
        } else {
        	CDC_SendString("\r\nFailed to read hard-time from RTC.\r\n");
 8001412:	4824      	ldr	r0, [pc, #144]	@ (80014a4 <CMD_time+0x194>)
 8001414:	f014 fd64 	bl	8015ee0 <CDC_SendString>
 8001418:	e035      	b.n	8001486 <CMD_time+0x176>
        }
    }
    else if (strcmp(operation, "soft") == 0) {
 800141a:	4923      	ldr	r1, [pc, #140]	@ (80014a8 <CMD_time+0x198>)
 800141c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8001420:	f7fe ff5e 	bl	80002e0 <strcmp>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d12a      	bne.n	8001480 <CMD_time+0x170>
        rtc_date_time_t softTime = {0};
 800142a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
        rtc_get_soft_time(&softTime);
 8001434:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001438:	4618      	mov	r0, r3
 800143a:	f002 fb83 	bl	8003b44 <rtc_get_soft_time>

        char buffer[128];
        snprintf(buffer, sizeof(buffer),
                 "\r\nSoft-time: %04u/%02u/%02u %02u:%02u:%02u\r\n",
                 softTime.year, softTime.month, softTime.day,
 800143e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
        snprintf(buffer, sizeof(buffer),
 8001442:	461e      	mov	r6, r3
                 softTime.year, softTime.month, softTime.day,
 8001444:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 8001448:	f897 20a4 	ldrb.w	r2, [r7, #164]	@ 0xa4
                 softTime.hour, softTime.minute, softTime.second);
 800144c:	f897 10a8 	ldrb.w	r1, [r7, #168]	@ 0xa8
 8001450:	f897 00a9 	ldrb.w	r0, [r7, #169]	@ 0xa9
        snprintf(buffer, sizeof(buffer),
 8001454:	4604      	mov	r4, r0
                 softTime.hour, softTime.minute, softTime.second);
 8001456:	f897 00aa 	ldrb.w	r0, [r7, #170]	@ 0xaa
        snprintf(buffer, sizeof(buffer),
 800145a:	4605      	mov	r5, r0
 800145c:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001460:	9504      	str	r5, [sp, #16]
 8001462:	9403      	str	r4, [sp, #12]
 8001464:	9102      	str	r1, [sp, #8]
 8001466:	9201      	str	r2, [sp, #4]
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	4633      	mov	r3, r6
 800146c:	4a0f      	ldr	r2, [pc, #60]	@ (80014ac <CMD_time+0x19c>)
 800146e:	2180      	movs	r1, #128	@ 0x80
 8001470:	f016 ffbe 	bl	80183f0 <sniprintf>
        CDC_SendString(buffer);
 8001474:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001478:	4618      	mov	r0, r3
 800147a:	f014 fd31 	bl	8015ee0 <CDC_SendString>
 800147e:	e002      	b.n	8001486 <CMD_time+0x176>
    }
    else {
    	CDC_SendString("\r\nInvalid command. Use 'hard', 'soft', or 'sync'.\r\n");
 8001480:	480b      	ldr	r0, [pc, #44]	@ (80014b0 <CMD_time+0x1a0>)
 8001482:	f014 fd2d 	bl	8015ee0 <CDC_SendString>
    }

    return CMDLINE_OK;
 8001486:	2300      	movs	r3, #0
}
 8001488:	4618      	mov	r0, r3
 800148a:	37c4      	adds	r7, #196	@ 0xc4
 800148c:	46bd      	mov	sp, r7
 800148e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001490:	0801d778 	.word	0x0801d778
 8001494:	0801d780 	.word	0x0801d780
 8001498:	0801d7a4 	.word	0x0801d7a4
 800149c:	0801d7c4 	.word	0x0801d7c4
 80014a0:	0801d7cc 	.word	0x0801d7cc
 80014a4:	0801d824 	.word	0x0801d824
 80014a8:	0801d84c 	.word	0x0801d84c
 80014ac:	0801d854 	.word	0x0801d854
 80014b0:	0801d884 	.word	0x0801d884

080014b4 <CMD_ls>:



int CMD_ls(int argc, char *argv[]) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
    if ((argc) < 1) return CMDLINE_TOO_FEW_ARGS;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	dc01      	bgt.n	80014c8 <CMD_ls+0x14>
 80014c4:	2303      	movs	r3, #3
 80014c6:	e007      	b.n	80014d8 <CMD_ls+0x24>
    if ((argc) > 1) return CMDLINE_TOO_MANY_ARGS;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	dd01      	ble.n	80014d2 <CMD_ls+0x1e>
 80014ce:	2302      	movs	r3, #2
 80014d0:	e002      	b.n	80014d8 <CMD_ls+0x24>

    FS_ListFiles_path();
 80014d2:	f000 ff51 	bl	8002378 <FS_ListFiles_path>

	return (CMDLINE_OK);
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <CMD_cat>:
int CMD_cat(int argc, char *argv[]) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]

    if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	dc01      	bgt.n	80014f4 <CMD_cat+0x14>
 80014f0:	2303      	movs	r3, #3
 80014f2:	e00b      	b.n	800150c <CMD_cat+0x2c>
    if (argc > 2) return CMDLINE_TOO_MANY_ARGS;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	dd01      	ble.n	80014fe <CMD_cat+0x1e>
 80014fa:	2302      	movs	r3, #2
 80014fc:	e006      	b.n	800150c <CMD_cat+0x2c>

    const char *filename = argv[1];
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	60fb      	str	r3, [r7, #12]
    (void)Cat_SDFS(filename);
 8001504:	68f8      	ldr	r0, [r7, #12]
 8001506:	f000 ffe5 	bl	80024d4 <Cat_SDFS>


    return (CMDLINE_OK);
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <CMD_nano>:

int CMD_nano(int argc, char *argv[]) {
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
    if (argc < 3) return CMDLINE_TOO_FEW_ARGS;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b02      	cmp	r3, #2
 8001522:	dc01      	bgt.n	8001528 <CMD_nano+0x14>
 8001524:	2303      	movs	r3, #3
 8001526:	e00f      	b.n	8001548 <CMD_nano+0x34>
    if (argc > 3) return CMDLINE_TOO_MANY_ARGS;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b03      	cmp	r3, #3
 800152c:	dd01      	ble.n	8001532 <CMD_nano+0x1e>
 800152e:	2302      	movs	r3, #2
 8001530:	e00a      	b.n	8001548 <CMD_nano+0x34>

    const char *filename = argv[1];
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	60fb      	str	r3, [r7, #12]
    const char *content = argv[2];
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	60bb      	str	r3, [r7, #8]

    (void)Nano_SDFS(filename, content);
 800153e:	68b9      	ldr	r1, [r7, #8]
 8001540:	68f8      	ldr	r0, [r7, #12]
 8001542:	f001 f86d 	bl	8002620 <Nano_SDFS>

    return (CMDLINE_OK);
 8001546:	2300      	movs	r3, #0
}
 8001548:	4618      	mov	r0, r3
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <CMD_vim>:

int CMD_vim(int argc, char *argv[]) {
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
    if (argc < 3) return CMDLINE_TOO_FEW_ARGS;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b02      	cmp	r3, #2
 800155e:	dc01      	bgt.n	8001564 <CMD_vim+0x14>
 8001560:	2303      	movs	r3, #3
 8001562:	e019      	b.n	8001598 <CMD_vim+0x48>
    if (argc > 3) return CMDLINE_TOO_MANY_ARGS;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b03      	cmp	r3, #3
 8001568:	dd01      	ble.n	800156e <CMD_vim+0x1e>
 800156a:	2302      	movs	r3, #2
 800156c:	e014      	b.n	8001598 <CMD_vim+0x48>

    const char *filename = argv[1];
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	60fb      	str	r3, [r7, #12]
    const char *content = argv[2];
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	60bb      	str	r3, [r7, #8]

    // Gọi hàm ghi nội dung vào hàng mới
    if (Vim_SDFS(filename, content) == 0) {
 800157a:	68b9      	ldr	r1, [r7, #8]
 800157c:	68f8      	ldr	r0, [r7, #12]
 800157e:	f001 f937 	bl	80027f0 <Vim_SDFS>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d103      	bne.n	8001590 <CMD_vim+0x40>
        CDC_SendString("\r\nContent written successfully.\r\n");
 8001588:	4805      	ldr	r0, [pc, #20]	@ (80015a0 <CMD_vim+0x50>)
 800158a:	f014 fca9 	bl	8015ee0 <CDC_SendString>
 800158e:	e002      	b.n	8001596 <CMD_vim+0x46>
    } else {
        CDC_SendString("\r\nFailed to write content.\r\n");
 8001590:	4804      	ldr	r0, [pc, #16]	@ (80015a4 <CMD_vim+0x54>)
 8001592:	f014 fca5 	bl	8015ee0 <CDC_SendString>
    }

    return CMDLINE_OK;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	0801d8b8 	.word	0x0801d8b8
 80015a4:	0801d8dc 	.word	0x0801d8dc

080015a8 <CMD_reset>:


int CMD_reset(int argc, char *argv[]) {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
	NVIC_SystemReset();
 80015b2:	f7ff fac3 	bl	8000b3c <__NVIC_SystemReset>
	...

080015b8 <CMD_cm4>:

    return (CMDLINE_OK);
}

int CMD_cm4(int argc, char *argv[]) {
 80015b8:	b590      	push	{r4, r7, lr}
 80015ba:	b0a7      	sub	sp, #156	@ 0x9c
 80015bc:	af02      	add	r7, sp, #8
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
    if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	dc01      	bgt.n	80015cc <CMD_cm4+0x14>
 80015c8:	2303      	movs	r3, #3
 80015ca:	e029      	b.n	8001620 <CMD_cm4+0x68>
    if (argc > 2) return CMDLINE_TOO_MANY_ARGS;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	dd01      	ble.n	80015d6 <CMD_cm4+0x1e>
 80015d2:	2302      	movs	r3, #2
 80015d4:	e024      	b.n	8001620 <CMD_cm4+0x68>

    const char *content = argv[1];
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    ringbuff_write(rb_cm7_to_cm4, content , strlen(content));
 80015de:	4b12      	ldr	r3, [pc, #72]	@ (8001628 <CMD_cm4+0x70>)
 80015e0:	681c      	ldr	r4, [r3, #0]
 80015e2:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 80015e6:	f7fe fedb 	bl	80003a0 <strlen>
 80015ea:	4603      	mov	r3, r0
 80015ec:	461a      	mov	r2, r3
 80015ee:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80015f2:	4620      	mov	r0, r4
 80015f4:	f001 fc2d 	bl	8002e52 <ringbuff_write>
    char buffer[128];
    snprintf(buffer, sizeof(buffer),
 80015f8:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 80015fc:	f7fe fed0 	bl	80003a0 <strlen>
 8001600:	4603      	mov	r3, r0
 8001602:	f107 000c 	add.w	r0, r7, #12
 8001606:	9300      	str	r3, [sp, #0]
 8001608:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800160c:	4a07      	ldr	r2, [pc, #28]	@ (800162c <CMD_cm4+0x74>)
 800160e:	2180      	movs	r1, #128	@ 0x80
 8001610:	f016 feee 	bl	80183f0 <sniprintf>
             "\r\nSend to CM4: %s , %d\r\n",
             content, strlen(content));
    CDC_SendString(buffer);
 8001614:	f107 030c 	add.w	r3, r7, #12
 8001618:	4618      	mov	r0, r3
 800161a:	f014 fc61 	bl	8015ee0 <CDC_SendString>
    return (CMDLINE_OK);
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3794      	adds	r7, #148	@ 0x94
 8001624:	46bd      	mov	sp, r7
 8001626:	bd90      	pop	{r4, r7, pc}
 8001628:	2400014c 	.word	0x2400014c
 800162c:	0801d8fc 	.word	0x0801d8fc

08001630 <CMD_lz_ctrl>:

int CMD_lz_ctrl(int argc, char *argv[]) {
 8001630:	b590      	push	{r4, r7, lr}
 8001632:	b0b7      	sub	sp, #220	@ 0xdc
 8001634:	af02      	add	r7, sp, #8
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
    if (argc != 2) {
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b02      	cmp	r3, #2
 800163e:	d001      	beq.n	8001644 <CMD_lz_ctrl+0x14>
        return CMDLINE_TOO_FEW_ARGS; // cần đúng 2 tham số: lệnh và số
 8001640:	2303      	movs	r3, #3
 8001642:	e044      	b.n	80016ce <CMD_lz_ctrl+0x9e>
    }

    int laser_num = atoi(argv[1]); // Chuyển đổi tham số thứ 2 thành số nguyên
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	3304      	adds	r3, #4
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f015 f8b3 	bl	80167b6 <atoi>
 8001650:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if (laser_num < 0 || laser_num > 48) {
 8001654:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001658:	2b00      	cmp	r3, #0
 800165a:	db03      	blt.n	8001664 <CMD_lz_ctrl+0x34>
 800165c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001660:	2b30      	cmp	r3, #48	@ 0x30
 8001662:	dd04      	ble.n	800166e <CMD_lz_ctrl+0x3e>
        CDC_SendString("Error: Laser number must be between 0 and 48.\r\n");
 8001664:	481c      	ldr	r0, [pc, #112]	@ (80016d8 <CMD_lz_ctrl+0xa8>)
 8001666:	f014 fc3b 	bl	8015ee0 <CDC_SendString>
        return CMDLINE_INVALID_ARG; // Kiểm tra giá trị trong khoảng hợp lệ
 800166a:	2304      	movs	r3, #4
 800166c:	e02f      	b.n	80016ce <CMD_lz_ctrl+0x9e>
    }

    // Tạo chuỗi JSON theo format yêu cầu
    char content[64];
    snprintf(content, sizeof(content), "{\"i2c\":{\"laser\":\"%d\"}}", laser_num);
 800166e:	f107 008c 	add.w	r0, r7, #140	@ 0x8c
 8001672:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001676:	4a19      	ldr	r2, [pc, #100]	@ (80016dc <CMD_lz_ctrl+0xac>)
 8001678:	2140      	movs	r1, #64	@ 0x40
 800167a:	f016 feb9 	bl	80183f0 <sniprintf>

    laser_status.laser_slot = laser_num;
 800167e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001682:	b2da      	uxtb	r2, r3
 8001684:	4b16      	ldr	r3, [pc, #88]	@ (80016e0 <CMD_lz_ctrl+0xb0>)
 8001686:	701a      	strb	r2, [r3, #0]

    // Gửi nội dung qua ring buffer
    ringbuff_write(rb_cm7_to_cm4, content, strlen(content));
 8001688:	4b16      	ldr	r3, [pc, #88]	@ (80016e4 <CMD_lz_ctrl+0xb4>)
 800168a:	681c      	ldr	r4, [r3, #0]
 800168c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001690:	4618      	mov	r0, r3
 8001692:	f7fe fe85 	bl	80003a0 <strlen>
 8001696:	4602      	mov	r2, r0
 8001698:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800169c:	4619      	mov	r1, r3
 800169e:	4620      	mov	r0, r4
 80016a0:	f001 fbd7 	bl	8002e52 <ringbuff_write>

    // Phản hồi lại qua CDC
    char buffer[128];
    snprintf(buffer, sizeof(buffer),
 80016a4:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7fe fe79 	bl	80003a0 <strlen>
 80016ae:	4602      	mov	r2, r0
 80016b0:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80016b4:	f107 000c 	add.w	r0, r7, #12
 80016b8:	9200      	str	r2, [sp, #0]
 80016ba:	4a0b      	ldr	r2, [pc, #44]	@ (80016e8 <CMD_lz_ctrl+0xb8>)
 80016bc:	2180      	movs	r1, #128	@ 0x80
 80016be:	f016 fe97 	bl	80183f0 <sniprintf>
             "\r\nLaser command sent: %s , Length: %d\r\n",
             content, strlen(content));
    CDC_SendString(buffer);
 80016c2:	f107 030c 	add.w	r3, r7, #12
 80016c6:	4618      	mov	r0, r3
 80016c8:	f014 fc0a 	bl	8015ee0 <CDC_SendString>

    return CMDLINE_OK;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	37d4      	adds	r7, #212	@ 0xd4
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd90      	pop	{r4, r7, pc}
 80016d6:	bf00      	nop
 80016d8:	0801d918 	.word	0x0801d918
 80016dc:	0801d948 	.word	0x0801d948
 80016e0:	240020c0 	.word	0x240020c0
 80016e4:	2400014c 	.word	0x2400014c
 80016e8:	0801d960 	.word	0x0801d960

080016ec <CMD_pd_poll>:


int CMD_pd_poll(int argc, char *argv[]) {
 80016ec:	b590      	push	{r4, r7, lr}
 80016ee:	b0b7      	sub	sp, #220	@ 0xdc
 80016f0:	af02      	add	r7, sp, #8
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
    if (argc != 2) {
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d001      	beq.n	8001700 <CMD_pd_poll+0x14>
        return CMDLINE_TOO_FEW_ARGS; // cần đúng 2 tham số: lệnh và số
 80016fc:	2303      	movs	r3, #3
 80016fe:	e03f      	b.n	8001780 <CMD_pd_poll+0x94>
    }

    int laser_num = atoi(argv[1]); // Chuyển đổi tham số thứ 2 thành số nguyên
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	3304      	adds	r3, #4
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f015 f855 	bl	80167b6 <atoi>
 800170c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if (laser_num < 1 || laser_num > 48) {
 8001710:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001714:	2b00      	cmp	r3, #0
 8001716:	dd03      	ble.n	8001720 <CMD_pd_poll+0x34>
 8001718:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800171c:	2b30      	cmp	r3, #48	@ 0x30
 800171e:	dd04      	ble.n	800172a <CMD_pd_poll+0x3e>
        CDC_SendString("\r\nError: Photodiode number must be between 1 and 48.\r\n");
 8001720:	4819      	ldr	r0, [pc, #100]	@ (8001788 <CMD_pd_poll+0x9c>)
 8001722:	f014 fbdd 	bl	8015ee0 <CDC_SendString>
        return CMDLINE_INVALID_ARG; // Kiểm tra giá trị trong khoảng hợp lệ
 8001726:	2304      	movs	r3, #4
 8001728:	e02a      	b.n	8001780 <CMD_pd_poll+0x94>
    }

    // Tạo chuỗi JSON theo format yêu cầu
    char content[64];
    snprintf(content, sizeof(content), "{\"spi\":{\"read\":\"%d\"}}", laser_num);
 800172a:	f107 008c 	add.w	r0, r7, #140	@ 0x8c
 800172e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001732:	4a16      	ldr	r2, [pc, #88]	@ (800178c <CMD_pd_poll+0xa0>)
 8001734:	2140      	movs	r1, #64	@ 0x40
 8001736:	f016 fe5b 	bl	80183f0 <sniprintf>

    // Gửi nội dung qua ring buffer
    ringbuff_write(rb_cm7_to_cm4, content, strlen(content));
 800173a:	4b15      	ldr	r3, [pc, #84]	@ (8001790 <CMD_pd_poll+0xa4>)
 800173c:	681c      	ldr	r4, [r3, #0]
 800173e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001742:	4618      	mov	r0, r3
 8001744:	f7fe fe2c 	bl	80003a0 <strlen>
 8001748:	4602      	mov	r2, r0
 800174a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800174e:	4619      	mov	r1, r3
 8001750:	4620      	mov	r0, r4
 8001752:	f001 fb7e 	bl	8002e52 <ringbuff_write>

    // Phản hồi lại qua CDC
    char buffer[128];
    snprintf(buffer, sizeof(buffer),
 8001756:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800175a:	4618      	mov	r0, r3
 800175c:	f7fe fe20 	bl	80003a0 <strlen>
 8001760:	4602      	mov	r2, r0
 8001762:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001766:	f107 000c 	add.w	r0, r7, #12
 800176a:	9200      	str	r2, [sp, #0]
 800176c:	4a09      	ldr	r2, [pc, #36]	@ (8001794 <CMD_pd_poll+0xa8>)
 800176e:	2180      	movs	r1, #128	@ 0x80
 8001770:	f016 fe3e 	bl	80183f0 <sniprintf>
             "\r\nPhotodiode command sent: %s , Length: %d\r\n",
             content, strlen(content));
    CDC_SendString(buffer);
 8001774:	f107 030c 	add.w	r3, r7, #12
 8001778:	4618      	mov	r0, r3
 800177a:	f014 fbb1 	bl	8015ee0 <CDC_SendString>

    return CMDLINE_OK;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	37d4      	adds	r7, #212	@ 0xd4
 8001784:	46bd      	mov	sp, r7
 8001786:	bd90      	pop	{r4, r7, pc}
 8001788:	0801d988 	.word	0x0801d988
 800178c:	0801d9c0 	.word	0x0801d9c0
 8001790:	2400014c 	.word	0x2400014c
 8001794:	0801d9d8 	.word	0x0801d9d8

08001798 <CMD_lz_cur>:

int CMD_lz_cur(int argc, char *argv[]) {
 8001798:	b590      	push	{r4, r7, lr}
 800179a:	b0a7      	sub	sp, #156	@ 0x9c
 800179c:	af02      	add	r7, sp, #8
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
    if (argc != 1) {
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d001      	beq.n	80017ac <CMD_lz_cur+0x14>
        return CMDLINE_TOO_MANY_ARGS; // Không cần tham số
 80017a8:	2302      	movs	r3, #2
 80017aa:	e023      	b.n	80017f4 <CMD_lz_cur+0x5c>
    }

    // Chuỗi JSON cố định
    const char *content = "{\"i2c\":{\"ampe\":\"0\"}}";
 80017ac:	4b13      	ldr	r3, [pc, #76]	@ (80017fc <CMD_lz_cur+0x64>)
 80017ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

    // Gửi nội dung qua ring buffer
    ringbuff_write(rb_cm7_to_cm4, content, strlen(content));
 80017b2:	4b13      	ldr	r3, [pc, #76]	@ (8001800 <CMD_lz_cur+0x68>)
 80017b4:	681c      	ldr	r4, [r3, #0]
 80017b6:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 80017ba:	f7fe fdf1 	bl	80003a0 <strlen>
 80017be:	4603      	mov	r3, r0
 80017c0:	461a      	mov	r2, r3
 80017c2:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80017c6:	4620      	mov	r0, r4
 80017c8:	f001 fb43 	bl	8002e52 <ringbuff_write>

    // Phản hồi lại qua CDC
    char buffer[128];
    snprintf(buffer, sizeof(buffer),
 80017cc:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 80017d0:	f7fe fde6 	bl	80003a0 <strlen>
 80017d4:	4603      	mov	r3, r0
 80017d6:	f107 000c 	add.w	r0, r7, #12
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80017e0:	4a08      	ldr	r2, [pc, #32]	@ (8001804 <CMD_lz_cur+0x6c>)
 80017e2:	2180      	movs	r1, #128	@ 0x80
 80017e4:	f016 fe04 	bl	80183f0 <sniprintf>
             "\r\nCurrent laser command sent: %s , Length: %d\r\n",
             content, strlen(content));
    CDC_SendString(buffer);
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	4618      	mov	r0, r3
 80017ee:	f014 fb77 	bl	8015ee0 <CDC_SendString>

    return CMDLINE_OK;
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3794      	adds	r7, #148	@ 0x94
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd90      	pop	{r4, r7, pc}
 80017fc:	0801da08 	.word	0x0801da08
 8001800:	2400014c 	.word	0x2400014c
 8001804:	0801da20 	.word	0x0801da20

08001808 <CMD_lz_vol>:

int CMD_lz_vol(int argc, char *argv[]) {
 8001808:	b590      	push	{r4, r7, lr}
 800180a:	b0b7      	sub	sp, #220	@ 0xdc
 800180c:	af02      	add	r7, sp, #8
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
    if (argc != 2) {
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2b02      	cmp	r3, #2
 8001816:	d001      	beq.n	800181c <CMD_lz_vol+0x14>
        return CMDLINE_TOO_FEW_ARGS; // Lệnh cần đúng 2 tham số
 8001818:	2303      	movs	r3, #3
 800181a:	e04c      	b.n	80018b6 <CMD_lz_vol+0xae>
    }

    int dac_value = atoi(argv[1]); // Chuyển đổi tham số sang số nguyên
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	3304      	adds	r3, #4
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f014 ffc7 	bl	80167b6 <atoi>
 8001828:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if (dac_value < 0 || dac_value > 255) {
 800182c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001830:	2b00      	cmp	r3, #0
 8001832:	db03      	blt.n	800183c <CMD_lz_vol+0x34>
 8001834:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001838:	2bff      	cmp	r3, #255	@ 0xff
 800183a:	dd04      	ble.n	8001846 <CMD_lz_vol+0x3e>
        CDC_SendString("\r\nError: DAC value must be between 0 and 255.\r\n");
 800183c:	4820      	ldr	r0, [pc, #128]	@ (80018c0 <CMD_lz_vol+0xb8>)
 800183e:	f014 fb4f 	bl	8015ee0 <CDC_SendString>
        return CMDLINE_INVALID_ARG; // Kiểm tra giá trị trong khoảng hợp lệ
 8001842:	2304      	movs	r3, #4
 8001844:	e037      	b.n	80018b6 <CMD_lz_vol+0xae>
    }

    // Tạo chuỗi JSON theo format yêu cầu
    char content[64];
    snprintf(content, sizeof(content), "{\"i2c\":{\"dac\":\"%d\"}}", dac_value);
 8001846:	f107 008c 	add.w	r0, r7, #140	@ 0x8c
 800184a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800184e:	4a1d      	ldr	r2, [pc, #116]	@ (80018c4 <CMD_lz_vol+0xbc>)
 8001850:	2140      	movs	r1, #64	@ 0x40
 8001852:	f016 fdcd 	bl	80183f0 <sniprintf>

    // Gửi nội dung qua ring buffer
    ringbuff_write(rb_cm7_to_cm4, content, strlen(content));
 8001856:	4b1c      	ldr	r3, [pc, #112]	@ (80018c8 <CMD_lz_vol+0xc0>)
 8001858:	681c      	ldr	r4, [r3, #0]
 800185a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800185e:	4618      	mov	r0, r3
 8001860:	f7fe fd9e 	bl	80003a0 <strlen>
 8001864:	4602      	mov	r2, r0
 8001866:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800186a:	4619      	mov	r1, r3
 800186c:	4620      	mov	r0, r4
 800186e:	f001 faf0 	bl	8002e52 <ringbuff_write>

    // Phản hồi lại qua CDC
    char buffer[128];
    snprintf(buffer, sizeof(buffer),
 8001872:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001876:	4618      	mov	r0, r3
 8001878:	f7fe fd92 	bl	80003a0 <strlen>
 800187c:	4602      	mov	r2, r0
 800187e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001882:	f107 000c 	add.w	r0, r7, #12
 8001886:	9200      	str	r2, [sp, #0]
 8001888:	4a10      	ldr	r2, [pc, #64]	@ (80018cc <CMD_lz_vol+0xc4>)
 800188a:	2180      	movs	r1, #128	@ 0x80
 800188c:	f016 fdb0 	bl	80183f0 <sniprintf>
             "\r\nDAC command sent: %s , Length: %d\r\n",
             content, strlen(content));
    CDC_SendString(buffer);
 8001890:	f107 030c 	add.w	r3, r7, #12
 8001894:	4618      	mov	r0, r3
 8001896:	f014 fb23 	bl	8015ee0 <CDC_SendString>

	 laser_status.laser_voltage =(float)dac_value / 85.0;
 800189a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800189e:	ee07 3a90 	vmov	s15, r3
 80018a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018a6:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80018d0 <CMD_lz_vol+0xc8>
 80018aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018ae:	4b09      	ldr	r3, [pc, #36]	@ (80018d4 <CMD_lz_vol+0xcc>)
 80018b0:	edc3 7a01 	vstr	s15, [r3, #4]


    return CMDLINE_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	37d4      	adds	r7, #212	@ 0xd4
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd90      	pop	{r4, r7, pc}
 80018be:	bf00      	nop
 80018c0:	0801da50 	.word	0x0801da50
 80018c4:	0801da80 	.word	0x0801da80
 80018c8:	2400014c 	.word	0x2400014c
 80018cc:	0801da98 	.word	0x0801da98
 80018d0:	42aa0000 	.word	0x42aa0000
 80018d4:	240020c0 	.word	0x240020c0

080018d8 <CMD_time_set>:





int CMD_time_set(int argc, char *argv[]) {
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
    // Kiểm tra số lượng tham số
    if (argc != 7) return CMDLINE_TOO_FEW_ARGS;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2b07      	cmp	r3, #7
 80018e6:	d001      	beq.n	80018ec <CMD_time_set+0x14>
 80018e8:	2303      	movs	r3, #3
 80018ea:	e065      	b.n	80019b8 <CMD_time_set+0xe0>

    // Chuyển đổi các tham số chuỗi thành số nguyên
    rtc_date_time_t dateTime;
    dateTime.year   = atoi(argv[1]); // Năm
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	3304      	adds	r3, #4
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f014 ff5f 	bl	80167b6 <atoi>
 80018f8:	4603      	mov	r3, r0
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	817b      	strh	r3, [r7, #10]
    dateTime.month  = atoi(argv[2]); // Tháng
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	3308      	adds	r3, #8
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f014 ff56 	bl	80167b6 <atoi>
 800190a:	4603      	mov	r3, r0
 800190c:	b2db      	uxtb	r3, r3
 800190e:	727b      	strb	r3, [r7, #9]
    dateTime.day    = atoi(argv[3]); // Ngày
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	330c      	adds	r3, #12
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f014 ff4d 	bl	80167b6 <atoi>
 800191c:	4603      	mov	r3, r0
 800191e:	b2db      	uxtb	r3, r3
 8001920:	723b      	strb	r3, [r7, #8]
    dateTime.hour   = atoi(argv[4]); // Giờ
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	3310      	adds	r3, #16
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f014 ff44 	bl	80167b6 <atoi>
 800192e:	4603      	mov	r3, r0
 8001930:	b2db      	uxtb	r3, r3
 8001932:	733b      	strb	r3, [r7, #12]
    dateTime.minute = atoi(argv[5]); // Phút
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	3314      	adds	r3, #20
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f014 ff3b 	bl	80167b6 <atoi>
 8001940:	4603      	mov	r3, r0
 8001942:	b2db      	uxtb	r3, r3
 8001944:	737b      	strb	r3, [r7, #13]
    dateTime.second = atoi(argv[6]); // Giây
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	3318      	adds	r3, #24
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f014 ff32 	bl	80167b6 <atoi>
 8001952:	4603      	mov	r3, r0
 8001954:	b2db      	uxtb	r3, r3
 8001956:	73bb      	strb	r3, [r7, #14]

    // Kiểm tra hợp lệ của dữ liệu nhập vào
    if (dateTime.year < 2000 || dateTime.year > 2099 ||
 8001958:	897b      	ldrh	r3, [r7, #10]
 800195a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800195e:	d319      	bcc.n	8001994 <CMD_time_set+0xbc>
 8001960:	897b      	ldrh	r3, [r7, #10]
 8001962:	f640 0233 	movw	r2, #2099	@ 0x833
 8001966:	4293      	cmp	r3, r2
 8001968:	d814      	bhi.n	8001994 <CMD_time_set+0xbc>
        dateTime.month < 1 || dateTime.month > 12 ||
 800196a:	7a7b      	ldrb	r3, [r7, #9]
    if (dateTime.year < 2000 || dateTime.year > 2099 ||
 800196c:	2b00      	cmp	r3, #0
 800196e:	d011      	beq.n	8001994 <CMD_time_set+0xbc>
        dateTime.month < 1 || dateTime.month > 12 ||
 8001970:	7a7b      	ldrb	r3, [r7, #9]
 8001972:	2b0c      	cmp	r3, #12
 8001974:	d80e      	bhi.n	8001994 <CMD_time_set+0xbc>
        dateTime.day < 1 || dateTime.day > 31 ||
 8001976:	7a3b      	ldrb	r3, [r7, #8]
        dateTime.month < 1 || dateTime.month > 12 ||
 8001978:	2b00      	cmp	r3, #0
 800197a:	d00b      	beq.n	8001994 <CMD_time_set+0xbc>
        dateTime.day < 1 || dateTime.day > 31 ||
 800197c:	7a3b      	ldrb	r3, [r7, #8]
 800197e:	2b1f      	cmp	r3, #31
 8001980:	d808      	bhi.n	8001994 <CMD_time_set+0xbc>
        dateTime.hour < 0 || dateTime.hour > 23 ||
 8001982:	7b3b      	ldrb	r3, [r7, #12]
 8001984:	2b17      	cmp	r3, #23
 8001986:	d805      	bhi.n	8001994 <CMD_time_set+0xbc>
        dateTime.minute < 0 || dateTime.minute > 59 ||
 8001988:	7b7b      	ldrb	r3, [r7, #13]
 800198a:	2b3b      	cmp	r3, #59	@ 0x3b
 800198c:	d802      	bhi.n	8001994 <CMD_time_set+0xbc>
        dateTime.second < 0 || dateTime.second > 59) {
 800198e:	7bbb      	ldrb	r3, [r7, #14]
 8001990:	2b3b      	cmp	r3, #59	@ 0x3b
 8001992:	d901      	bls.n	8001998 <CMD_time_set+0xc0>
        return (CMDLINE_INVALID_ARG);
 8001994:	2304      	movs	r3, #4
 8001996:	e00f      	b.n	80019b8 <CMD_time_set+0xe0>
    }

    // Gọi hàm thiết lập thời gian
    if (rtc_set_date_time(&dateTime)) {
 8001998:	f107 0308 	add.w	r3, r7, #8
 800199c:	4618      	mov	r0, r3
 800199e:	f001 fecb 	bl	8003738 <rtc_set_date_time>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d003      	beq.n	80019b0 <CMD_time_set+0xd8>
        CDC_SendString("\r\nTime set successfully.\r\n");
 80019a8:	4805      	ldr	r0, [pc, #20]	@ (80019c0 <CMD_time_set+0xe8>)
 80019aa:	f014 fa99 	bl	8015ee0 <CDC_SendString>
 80019ae:	e002      	b.n	80019b6 <CMD_time_set+0xde>
    } else {
        CDC_SendString("\r\nFailed to set time.\r\n");
 80019b0:	4804      	ldr	r0, [pc, #16]	@ (80019c4 <CMD_time_set+0xec>)
 80019b2:	f014 fa95 	bl	8015ee0 <CDC_SendString>
    }

    return CMDLINE_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	0801dac0 	.word	0x0801dac0
 80019c4:	0801dadc 	.word	0x0801dadc

080019c8 <CMD_exp_tec>:
	// Return success.
	return (CMDLINE_OK);
}


int CMD_exp_tec(int argc, char *argv[]) {
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b0a8      	sub	sp, #160	@ 0xa0
 80019cc:	af04      	add	r7, sp, #16
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
    if (argc < 2) return CMDLINE_TOO_FEW_ARGS; // Cần ít nhất 2 tham số (lệnh và hành động)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	dc01      	bgt.n	80019dc <CMD_exp_tec+0x14>
 80019d8:	2303      	movs	r3, #3
 80019da:	e098      	b.n	8001b0e <CMD_exp_tec+0x146>

    const char *action = argv[1];
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

    if (strcmp(action, "ena") == 0) {
 80019e4:	494c      	ldr	r1, [pc, #304]	@ (8001b18 <CMD_exp_tec+0x150>)
 80019e6:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 80019ea:	f7fe fc79 	bl	80002e0 <strcmp>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d109      	bne.n	8001a08 <CMD_exp_tec+0x40>
        tec_status.enabled = true;
 80019f4:	4b49      	ldr	r3, [pc, #292]	@ (8001b1c <CMD_exp_tec+0x154>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	701a      	strb	r2, [r3, #0]
        CDC_SendString("\r\nTEC enabled.\r\n");
 80019fa:	4849      	ldr	r0, [pc, #292]	@ (8001b20 <CMD_exp_tec+0x158>)
 80019fc:	f014 fa70 	bl	8015ee0 <CDC_SendString>
        counter_fake = 0;
 8001a00:	4b48      	ldr	r3, [pc, #288]	@ (8001b24 <CMD_exp_tec+0x15c>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	701a      	strb	r2, [r3, #0]
 8001a06:	e081      	b.n	8001b0c <CMD_exp_tec+0x144>
    }
    else if (strcmp(action, "dis") == 0) {
 8001a08:	4947      	ldr	r1, [pc, #284]	@ (8001b28 <CMD_exp_tec+0x160>)
 8001a0a:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8001a0e:	f7fe fc67 	bl	80002e0 <strcmp>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d106      	bne.n	8001a26 <CMD_exp_tec+0x5e>
        tec_status.enabled = false;
 8001a18:	4b40      	ldr	r3, [pc, #256]	@ (8001b1c <CMD_exp_tec+0x154>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	701a      	strb	r2, [r3, #0]
        CDC_SendString("\r\nTEC disabled.\r\n");
 8001a1e:	4843      	ldr	r0, [pc, #268]	@ (8001b2c <CMD_exp_tec+0x164>)
 8001a20:	f014 fa5e 	bl	8015ee0 <CDC_SendString>
 8001a24:	e072      	b.n	8001b0c <CMD_exp_tec+0x144>
    }
    else if (strcmp(action, "set") == 0) {
 8001a26:	4942      	ldr	r1, [pc, #264]	@ (8001b30 <CMD_exp_tec+0x168>)
 8001a28:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8001a2c:	f7fe fc58 	bl	80002e0 <strcmp>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d13c      	bne.n	8001ab0 <CMD_exp_tec+0xe8>
        if (argc != 3) return CMDLINE_TOO_FEW_ARGS; // Cần thêm tham số nhiệt độ
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b03      	cmp	r3, #3
 8001a3a:	d001      	beq.n	8001a40 <CMD_exp_tec+0x78>
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e066      	b.n	8001b0e <CMD_exp_tec+0x146>

        float temp = atof(argv[2]);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	3308      	adds	r3, #8
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f014 feb2 	bl	80167b0 <atof>
 8001a4c:	eeb0 7b40 	vmov.f64	d7, d0
 8001a50:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a54:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
        if (temp < 0.0 || temp > 100.0) { // Giới hạn nhiệt độ 0-100 °C (có thể chỉnh sửa)
 8001a58:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8001a5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a64:	d408      	bmi.n	8001a78 <CMD_exp_tec+0xb0>
 8001a66:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8001a6a:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001b34 <CMD_exp_tec+0x16c>
 8001a6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a76:	dd04      	ble.n	8001a82 <CMD_exp_tec+0xba>
            CDC_SendString("\r\nError: Temperature must be between 0.0 and 100.0°C.\r\n");
 8001a78:	482f      	ldr	r0, [pc, #188]	@ (8001b38 <CMD_exp_tec+0x170>)
 8001a7a:	f014 fa31 	bl	8015ee0 <CDC_SendString>
            return CMDLINE_INVALID_ARG;
 8001a7e:	2304      	movs	r3, #4
 8001a80:	e045      	b.n	8001b0e <CMD_exp_tec+0x146>
        }

        tec_status.temperature = temp;
 8001a82:	4a26      	ldr	r2, [pc, #152]	@ (8001b1c <CMD_exp_tec+0x154>)
 8001a84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001a88:	6053      	str	r3, [r2, #4]
        char buffer[64];
        snprintf(buffer, sizeof(buffer), "\r\nTEC temperature set to %.1f°C.\r\n", temp);
 8001a8a:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8001a8e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a92:	f107 0308 	add.w	r3, r7, #8
 8001a96:	ed8d 7b00 	vstr	d7, [sp]
 8001a9a:	4a28      	ldr	r2, [pc, #160]	@ (8001b3c <CMD_exp_tec+0x174>)
 8001a9c:	2140      	movs	r1, #64	@ 0x40
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f016 fca6 	bl	80183f0 <sniprintf>
        CDC_SendString(buffer);
 8001aa4:	f107 0308 	add.w	r3, r7, #8
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f014 fa19 	bl	8015ee0 <CDC_SendString>
 8001aae:	e02d      	b.n	8001b0c <CMD_exp_tec+0x144>
    }
    else if (strcmp(action, "get") == 0) {
 8001ab0:	4923      	ldr	r1, [pc, #140]	@ (8001b40 <CMD_exp_tec+0x178>)
 8001ab2:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8001ab6:	f7fe fc13 	bl	80002e0 <strcmp>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d120      	bne.n	8001b02 <CMD_exp_tec+0x13a>
        snprintf(buffer, sizeof(buffer),
                 "\r\nTEC Status:\r\n"
                 "  Enabled: %s\r\n"
                 "  Set Temp: %.1f°C\r\n"
                 "  Current Temp: %.1f°C\r\n",
                 tec_status.enabled ? "Yes" : "No",
 8001ac0:	4b16      	ldr	r3, [pc, #88]	@ (8001b1c <CMD_exp_tec+0x154>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
        snprintf(buffer, sizeof(buffer),
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <CMD_exp_tec+0x104>
 8001ac8:	4b1e      	ldr	r3, [pc, #120]	@ (8001b44 <CMD_exp_tec+0x17c>)
 8001aca:	e000      	b.n	8001ace <CMD_exp_tec+0x106>
 8001acc:	4b1e      	ldr	r3, [pc, #120]	@ (8001b48 <CMD_exp_tec+0x180>)
                 tec_status.temperature,
 8001ace:	4a13      	ldr	r2, [pc, #76]	@ (8001b1c <CMD_exp_tec+0x154>)
 8001ad0:	edd2 7a01 	vldr	s15, [r2, #4]
        snprintf(buffer, sizeof(buffer),
 8001ad4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
                 tec_status.currentTemp);
 8001ad8:	4a10      	ldr	r2, [pc, #64]	@ (8001b1c <CMD_exp_tec+0x154>)
 8001ada:	edd2 6a02 	vldr	s13, [r2, #8]
        snprintf(buffer, sizeof(buffer),
 8001ade:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001ae2:	f107 0008 	add.w	r0, r7, #8
 8001ae6:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001aea:	ed8d 7b00 	vstr	d7, [sp]
 8001aee:	4a17      	ldr	r2, [pc, #92]	@ (8001b4c <CMD_exp_tec+0x184>)
 8001af0:	2180      	movs	r1, #128	@ 0x80
 8001af2:	f016 fc7d 	bl	80183f0 <sniprintf>
        CDC_SendString(buffer);
 8001af6:	f107 0308 	add.w	r3, r7, #8
 8001afa:	4618      	mov	r0, r3
 8001afc:	f014 f9f0 	bl	8015ee0 <CDC_SendString>
 8001b00:	e004      	b.n	8001b0c <CMD_exp_tec+0x144>
    }
    else {
        CDC_SendString("\r\nInvalid action. Use 'ena', 'dis', 'set <value>', or 'get'.\r\n");
 8001b02:	4813      	ldr	r0, [pc, #76]	@ (8001b50 <CMD_exp_tec+0x188>)
 8001b04:	f014 f9ec 	bl	8015ee0 <CDC_SendString>
        return CMDLINE_INVALID_ARG;
 8001b08:	2304      	movs	r3, #4
 8001b0a:	e000      	b.n	8001b0e <CMD_exp_tec+0x146>
    }

    return CMDLINE_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3790      	adds	r7, #144	@ 0x90
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	0801db1c 	.word	0x0801db1c
 8001b1c:	24000154 	.word	0x24000154
 8001b20:	0801db20 	.word	0x0801db20
 8001b24:	240020cc 	.word	0x240020cc
 8001b28:	0801db34 	.word	0x0801db34
 8001b2c:	0801db38 	.word	0x0801db38
 8001b30:	0801db4c 	.word	0x0801db4c
 8001b34:	42c80000 	.word	0x42c80000
 8001b38:	0801db50 	.word	0x0801db50
 8001b3c:	0801db8c 	.word	0x0801db8c
 8001b40:	0801dbb0 	.word	0x0801dbb0
 8001b44:	0801dbb4 	.word	0x0801dbb4
 8001b48:	0801dbb8 	.word	0x0801dbb8
 8001b4c:	0801dbbc 	.word	0x0801dbbc
 8001b50:	0801dc0c 	.word	0x0801dc0c

08001b54 <process_command>:




void process_command(char rxData, CMDLine_Context* context)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	f5ad 7d5a 	sub.w	sp, sp, #872	@ 0x368
 8001b5a:	af02      	add	r7, sp, #8
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001b62:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001b66:	6019      	str	r1, [r3, #0]
 8001b68:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001b6c:	f2a3 3359 	subw	r3, r3, #857	@ 0x359
 8001b70:	701a      	strb	r2, [r3, #0]
//            memset(escapeSequence, 0, sizeof(escapeSequence));
//            return;
//        }
//    }

    if (rxData == 27){
 8001b72:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001b76:	f2a3 3359 	subw	r3, r3, #857	@ 0x359
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b1b      	cmp	r3, #27
 8001b7e:	d11a      	bne.n	8001bb6 <process_command+0x62>
        char buffer[30];
        snprintf(buffer, sizeof(buffer), "\r\n%s$ ", NAME_SHELL);
 8001b80:	f507 704c 	add.w	r0, r7, #816	@ 0x330
 8001b84:	4bbc      	ldr	r3, [pc, #752]	@ (8001e78 <process_command+0x324>)
 8001b86:	4abd      	ldr	r2, [pc, #756]	@ (8001e7c <process_command+0x328>)
 8001b88:	211e      	movs	r1, #30
 8001b8a:	f016 fc31 	bl	80183f0 <sniprintf>
        CDC_SendString(buffer);
 8001b8e:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001b92:	4618      	mov	r0, r3
 8001b94:	f014 f9a4 	bl	8015ee0 <CDC_SendString>
        context->commandBufferIndex = 0;
 8001b98:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001b9c:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
        context->commandBuffer[0] = '\0';
 8001ba8:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001bac:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	701a      	strb	r2, [r3, #0]
    }

    if (rxData == '\\') { // '\'
 8001bb6:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001bba:	f2a3 3359 	subw	r3, r3, #857	@ 0x359
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b5c      	cmp	r3, #92	@ 0x5c
 8001bc2:	d14d      	bne.n	8001c60 <process_command+0x10c>
        char matches[10][COMMAND_MAX_LENGTH];
        CDC_SendString("\x7f");
 8001bc4:	48ae      	ldr	r0, [pc, #696]	@ (8001e80 <process_command+0x32c>)
 8001bc6:	f014 f98b 	bl	8015ee0 <CDC_SendString>
        int match_count = find_matches(context->commandBuffer, matches, 10);
 8001bca:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001bce:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f107 0108 	add.w	r1, r7, #8
 8001bd8:	220a      	movs	r2, #10
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff fa28 	bl	8001030 <find_matches>
 8001be0:	f8c7 0350 	str.w	r0, [r7, #848]	@ 0x350

        // Display suggestions
        CDC_SendString("\r\n\033[1;36mSuggestions:\033[1;37m\r\n");
 8001be4:	48a7      	ldr	r0, [pc, #668]	@ (8001e84 <process_command+0x330>)
 8001be6:	f014 f97b 	bl	8015ee0 <CDC_SendString>
        if (match_count > 0) {
 8001bea:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	dd1e      	ble.n	8001c30 <process_command+0xdc>
            for (int i = 0; i < match_count; i++) {
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
 8001bf8:	e013      	b.n	8001c22 <process_command+0xce>
            	CDC_SendString("[");
 8001bfa:	48a3      	ldr	r0, [pc, #652]	@ (8001e88 <process_command+0x334>)
 8001bfc:	f014 f970 	bl	8015ee0 <CDC_SendString>
                CDC_SendString(matches[i]);
 8001c00:	f107 0208 	add.w	r2, r7, #8
 8001c04:	f8d7 335c 	ldr.w	r3, [r7, #860]	@ 0x35c
 8001c08:	019b      	lsls	r3, r3, #6
 8001c0a:	4413      	add	r3, r2
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f014 f967 	bl	8015ee0 <CDC_SendString>
                CDC_SendString("]\r\n");
 8001c12:	489e      	ldr	r0, [pc, #632]	@ (8001e8c <process_command+0x338>)
 8001c14:	f014 f964 	bl	8015ee0 <CDC_SendString>
            for (int i = 0; i < match_count; i++) {
 8001c18:	f8d7 335c 	ldr.w	r3, [r7, #860]	@ 0x35c
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
 8001c22:	f8d7 235c 	ldr.w	r2, [r7, #860]	@ 0x35c
 8001c26:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	dbe5      	blt.n	8001bfa <process_command+0xa6>
 8001c2e:	e002      	b.n	8001c36 <process_command+0xe2>
            }
        } else {
            CDC_SendString("No matches found.\r\n");
 8001c30:	4897      	ldr	r0, [pc, #604]	@ (8001e90 <process_command+0x33c>)
 8001c32:	f014 f955 	bl	8015ee0 <CDC_SendString>
        }

        // Redisplay the current buffer
        char buffer[30];
        snprintf(buffer, sizeof(buffer), "\r%s$ ", NAME_SHELL);
 8001c36:	f507 7044 	add.w	r0, r7, #784	@ 0x310
 8001c3a:	4b8f      	ldr	r3, [pc, #572]	@ (8001e78 <process_command+0x324>)
 8001c3c:	4a95      	ldr	r2, [pc, #596]	@ (8001e94 <process_command+0x340>)
 8001c3e:	211e      	movs	r1, #30
 8001c40:	f016 fbd6 	bl	80183f0 <sniprintf>
        CDC_SendString(buffer);
 8001c44:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f014 f949 	bl	8015ee0 <CDC_SendString>
        CDC_SendString(context->commandBuffer);
 8001c4e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001c52:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f014 f941 	bl	8015ee0 <CDC_SendString>
 8001c5e:	e2ff      	b.n	8002260 <process_command+0x70c>
        return;
    }

    // Check if we are handling an escape sequence
    if (rxData == 0x2D) { // '-' key (history up)
 8001c60:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001c64:	f2a3 3359 	subw	r3, r3, #857	@ 0x359
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b2d      	cmp	r3, #45	@ 0x2d
 8001c6c:	d17a      	bne.n	8001d64 <process_command+0x210>
        if (context->historyIndex > 0) {
 8001c6e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001c72:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f8b3 3184 	ldrh.w	r3, [r3, #388]	@ 0x184
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d00f      	beq.n	8001ca0 <process_command+0x14c>
            context->historyIndex--;
 8001c80:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001c84:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f8b3 3184 	ldrh.w	r3, [r3, #388]	@ 0x184
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001c96:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f8a3 2184 	strh.w	r2, [r3, #388]	@ 0x184
        }

        // Load history command
        if (context->historyIndex < context->historyCount) {
 8001ca0:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001ca4:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f8b3 2184 	ldrh.w	r2, [r3, #388]	@ 0x184
 8001cae:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001cb2:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f8b3 3182 	ldrh.w	r3, [r3, #386]	@ 0x182
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d22a      	bcs.n	8001d16 <process_command+0x1c2>
            strcpy(context->commandBuffer, context->commandHistory[context->historyIndex]);
 8001cc0:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001cc4:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001cc8:	6818      	ldr	r0, [r3, #0]
 8001cca:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001cce:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f8b3 3184 	ldrh.w	r3, [r3, #388]	@ 0x184
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001cde:	f5a3 7258 	sub.w	r2, r3, #864	@ 0x360
 8001ce2:	1c4b      	adds	r3, r1, #1
 8001ce4:	019b      	lsls	r3, r3, #6
 8001ce6:	6812      	ldr	r2, [r2, #0]
 8001ce8:	4413      	add	r3, r2
 8001cea:	3302      	adds	r3, #2
 8001cec:	4619      	mov	r1, r3
 8001cee:	f017 fb12 	bl	8019316 <strcpy>
            context->commandBufferIndex = strlen(context->commandBuffer);
 8001cf2:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001cf6:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7fe fb4f 	bl	80003a0 <strlen>
 8001d02:	4603      	mov	r3, r0
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001d0a:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 8001d14:	e00e      	b.n	8001d34 <process_command+0x1e0>
        } else {
            context->commandBuffer[0] = '\0';
 8001d16:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001d1a:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2200      	movs	r2, #0
 8001d22:	701a      	strb	r2, [r3, #0]
            context->commandBufferIndex = 0;
 8001d24:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001d28:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
        }

        // Clear current line and display updated command
        CDC_SendString("\033[2K"); // Clear entire line
 8001d34:	4858      	ldr	r0, [pc, #352]	@ (8001e98 <process_command+0x344>)
 8001d36:	f014 f8d3 	bl	8015ee0 <CDC_SendString>
        char buffer[30];
        snprintf(buffer, sizeof(buffer), "\r%s$ ", NAME_SHELL);
 8001d3a:	f507 703c 	add.w	r0, r7, #752	@ 0x2f0
 8001d3e:	4b4e      	ldr	r3, [pc, #312]	@ (8001e78 <process_command+0x324>)
 8001d40:	4a54      	ldr	r2, [pc, #336]	@ (8001e94 <process_command+0x340>)
 8001d42:	211e      	movs	r1, #30
 8001d44:	f016 fb54 	bl	80183f0 <sniprintf>
        CDC_SendString(buffer);
 8001d48:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f014 f8c7 	bl	8015ee0 <CDC_SendString>
        CDC_SendString(context->commandBuffer); // Display updated command
 8001d52:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001d56:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f014 f8bf 	bl	8015ee0 <CDC_SendString>
 8001d62:	e27d      	b.n	8002260 <process_command+0x70c>
        return;
    } else if (rxData == 0x3D) { // '=' key (history down)
 8001d64:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001d68:	f2a3 3359 	subw	r3, r3, #857	@ 0x359
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b3d      	cmp	r3, #61	@ 0x3d
 8001d70:	f040 8094 	bne.w	8001e9c <process_command+0x348>
        if (context->historyIndex < context->historyCount) {
 8001d74:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001d78:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f8b3 2184 	ldrh.w	r2, [r3, #388]	@ 0x184
 8001d82:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001d86:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f8b3 3182 	ldrh.w	r3, [r3, #386]	@ 0x182
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d20f      	bcs.n	8001db4 <process_command+0x260>
            context->historyIndex++;
 8001d94:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001d98:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f8b3 3184 	ldrh.w	r3, [r3, #388]	@ 0x184
 8001da2:	3301      	adds	r3, #1
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001daa:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f8a3 2184 	strh.w	r2, [r3, #388]	@ 0x184
        }

        // Load history command
        if (context->historyIndex < context->historyCount) {
 8001db4:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001db8:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f8b3 2184 	ldrh.w	r2, [r3, #388]	@ 0x184
 8001dc2:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001dc6:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f8b3 3182 	ldrh.w	r3, [r3, #386]	@ 0x182
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d22a      	bcs.n	8001e2a <process_command+0x2d6>
            strcpy(context->commandBuffer, context->commandHistory[context->historyIndex]);
 8001dd4:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001dd8:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001ddc:	6818      	ldr	r0, [r3, #0]
 8001dde:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001de2:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f8b3 3184 	ldrh.w	r3, [r3, #388]	@ 0x184
 8001dec:	4619      	mov	r1, r3
 8001dee:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001df2:	f5a3 7258 	sub.w	r2, r3, #864	@ 0x360
 8001df6:	1c4b      	adds	r3, r1, #1
 8001df8:	019b      	lsls	r3, r3, #6
 8001dfa:	6812      	ldr	r2, [r2, #0]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	3302      	adds	r3, #2
 8001e00:	4619      	mov	r1, r3
 8001e02:	f017 fa88 	bl	8019316 <strcpy>
            context->commandBufferIndex = strlen(context->commandBuffer);
 8001e06:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001e0a:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7fe fac5 	bl	80003a0 <strlen>
 8001e16:	4603      	mov	r3, r0
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001e1e:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 8001e28:	e00e      	b.n	8001e48 <process_command+0x2f4>
        } else {
            context->commandBuffer[0] = '\0';
 8001e2a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001e2e:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2200      	movs	r2, #0
 8001e36:	701a      	strb	r2, [r3, #0]
            context->commandBufferIndex = 0;
 8001e38:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001e3c:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
        }

        // Clear current line and display updated command
        CDC_SendString("\033[2K"); // Clear entire line
 8001e48:	4813      	ldr	r0, [pc, #76]	@ (8001e98 <process_command+0x344>)
 8001e4a:	f014 f849 	bl	8015ee0 <CDC_SendString>
        char buffer[30];
        snprintf(buffer, sizeof(buffer), "\r%s$ ", NAME_SHELL);
 8001e4e:	f507 7034 	add.w	r0, r7, #720	@ 0x2d0
 8001e52:	4b09      	ldr	r3, [pc, #36]	@ (8001e78 <process_command+0x324>)
 8001e54:	4a0f      	ldr	r2, [pc, #60]	@ (8001e94 <process_command+0x340>)
 8001e56:	211e      	movs	r1, #30
 8001e58:	f016 faca 	bl	80183f0 <sniprintf>
        CDC_SendString(buffer);
 8001e5c:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8001e60:	4618      	mov	r0, r3
 8001e62:	f014 f83d 	bl	8015ee0 <CDC_SendString>
        CDC_SendString(context->commandBuffer); // Display updated command
 8001e66:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001e6a:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f014 f835 	bl	8015ee0 <CDC_SendString>
 8001e76:	e1f3      	b.n	8002260 <process_command+0x70c>
 8001e78:	0801dc4c 	.word	0x0801dc4c
 8001e7c:	0801dc64 	.word	0x0801dc64
 8001e80:	0801dc6c 	.word	0x0801dc6c
 8001e84:	0801dc70 	.word	0x0801dc70
 8001e88:	0801dc90 	.word	0x0801dc90
 8001e8c:	0801dc94 	.word	0x0801dc94
 8001e90:	0801dc98 	.word	0x0801dc98
 8001e94:	0801dcac 	.word	0x0801dcac
 8001e98:	0801dcb4 	.word	0x0801dcb4
        return;
    }

    // Handle individual key presses
    if (((rxData >= 32 && rxData <= 126) || rxData == KEY_ENTER || rxData == KEY_BACKSPACE)
 8001e9c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001ea0:	f2a3 3359 	subw	r3, r3, #857	@ 0x359
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	2b1f      	cmp	r3, #31
 8001ea8:	d906      	bls.n	8001eb8 <process_command+0x364>
 8001eaa:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001eae:	f2a3 3359 	subw	r3, r3, #857	@ 0x359
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2b7e      	cmp	r3, #126	@ 0x7e
 8001eb6:	d90e      	bls.n	8001ed6 <process_command+0x382>
 8001eb8:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001ebc:	f2a3 3359 	subw	r3, r3, #857	@ 0x359
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	2b0d      	cmp	r3, #13
 8001ec4:	d007      	beq.n	8001ed6 <process_command+0x382>
 8001ec6:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001eca:	f2a3 3359 	subw	r3, r3, #857	@ 0x359
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ed2:	f040 81c5 	bne.w	8002260 <process_command+0x70c>
    										&& rxData != 0x2D && rxData != 0x3D && rxData != 0x5C) {
 8001ed6:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001eda:	f2a3 3359 	subw	r3, r3, #857	@ 0x359
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b2d      	cmp	r3, #45	@ 0x2d
 8001ee2:	f000 81bd 	beq.w	8002260 <process_command+0x70c>
 8001ee6:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001eea:	f2a3 3359 	subw	r3, r3, #857	@ 0x359
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b3d      	cmp	r3, #61	@ 0x3d
 8001ef2:	f000 81b5 	beq.w	8002260 <process_command+0x70c>
 8001ef6:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001efa:	f2a3 3359 	subw	r3, r3, #857	@ 0x359
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	2b5c      	cmp	r3, #92	@ 0x5c
 8001f02:	f000 81ad 	beq.w	8002260 <process_command+0x70c>
        if (rxData == KEY_ENTER) {
 8001f06:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001f0a:	f2a3 3359 	subw	r3, r3, #857	@ 0x359
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b0d      	cmp	r3, #13
 8001f12:	f040 811e 	bne.w	8002152 <process_command+0x5fe>

            rtc_date_time_t softTime = {0};
 8001f16:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	605a      	str	r2, [r3, #4]
            rtc_get_soft_time(&softTime);
 8001f20:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8001f24:	4618      	mov	r0, r3
 8001f26:	f001 fe0d 	bl	8003b44 <rtc_get_soft_time>
            char xtime[30];
            snprintf(xtime, sizeof(xtime),
                     "\033[1;35m[%02u:%02u:%02u]\033[1;37m ",
                     softTime.hour, softTime.minute, softTime.second);
 8001f2a:	f897 32cc 	ldrb.w	r3, [r7, #716]	@ 0x2cc
            snprintf(xtime, sizeof(xtime),
 8001f2e:	4619      	mov	r1, r3
                     softTime.hour, softTime.minute, softTime.second);
 8001f30:	f897 32cd 	ldrb.w	r3, [r7, #717]	@ 0x2cd
 8001f34:	f897 22ce 	ldrb.w	r2, [r7, #718]	@ 0x2ce
            snprintf(xtime, sizeof(xtime),
 8001f38:	f507 702a 	add.w	r0, r7, #680	@ 0x2a8
 8001f3c:	9201      	str	r2, [sp, #4]
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	460b      	mov	r3, r1
 8001f42:	4ac9      	ldr	r2, [pc, #804]	@ (8002268 <process_command+0x714>)
 8001f44:	211e      	movs	r1, #30
 8001f46:	f016 fa53 	bl	80183f0 <sniprintf>

            if (context->commandBufferIndex > 0) {
 8001f4a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001f4e:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 80ea 	beq.w	8002132 <process_command+0x5de>
                context->commandBuffer[context->commandBufferIndex] = '\0';
 8001f5e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001f62:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001f72:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2100      	movs	r1, #0
 8001f7a:	5499      	strb	r1, [r3, r2]

                // Save to history
                if (context->historyCount == 0 || strcmp(context->commandHistory[context->historyCount - 1], context->commandBuffer) != 0) {
 8001f7c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001f80:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f8b3 3182 	ldrh.w	r3, [r3, #386]	@ 0x182
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d01c      	beq.n	8001fc8 <process_command+0x474>
 8001f8e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001f92:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f8b3 3182 	ldrh.w	r3, [r3, #386]	@ 0x182
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	f507 7258 	add.w	r2, r7, #864	@ 0x360
 8001fa2:	f5a2 7258 	sub.w	r2, r2, #864	@ 0x360
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	019b      	lsls	r3, r3, #6
 8001faa:	6812      	ldr	r2, [r2, #0]
 8001fac:	4413      	add	r3, r2
 8001fae:	1c9a      	adds	r2, r3, #2
 8001fb0:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001fb4:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4610      	mov	r0, r2
 8001fbe:	f7fe f98f 	bl	80002e0 <strcmp>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d06a      	beq.n	800209e <process_command+0x54a>
                    if (context->historyCount < MAX_HISTORY) {
 8001fc8:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001fcc:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f8b3 3182 	ldrh.w	r3, [r3, #386]	@ 0x182
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	d82a      	bhi.n	8002030 <process_command+0x4dc>
                        strcpy(context->commandHistory[context->historyCount], context->commandBuffer);
 8001fda:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001fde:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f8b3 3182 	ldrh.w	r3, [r3, #386]	@ 0x182
 8001fe8:	4619      	mov	r1, r3
 8001fea:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001fee:	f5a3 7258 	sub.w	r2, r3, #864	@ 0x360
 8001ff2:	1c4b      	adds	r3, r1, #1
 8001ff4:	019b      	lsls	r3, r3, #6
 8001ff6:	6812      	ldr	r2, [r2, #0]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	1c9a      	adds	r2, r3, #2
 8001ffc:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8002000:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4619      	mov	r1, r3
 8002008:	4610      	mov	r0, r2
 800200a:	f017 f984 	bl	8019316 <strcpy>
                        context->historyCount++;
 800200e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8002012:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f8b3 3182 	ldrh.w	r3, [r3, #386]	@ 0x182
 800201c:	3301      	adds	r3, #1
 800201e:	b29a      	uxth	r2, r3
 8002020:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8002024:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f8a3 2182 	strh.w	r2, [r3, #386]	@ 0x182
 800202e:	e036      	b.n	800209e <process_command+0x54a>
                    } else {
                        for (int i = 0; i < MAX_HISTORY - 1; i++) {
 8002030:	2300      	movs	r3, #0
 8002032:	f8c7 3358 	str.w	r3, [r7, #856]	@ 0x358
 8002036:	e01e      	b.n	8002076 <process_command+0x522>
                            strcpy(context->commandHistory[i], context->commandHistory[i + 1]);
 8002038:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800203c:	f5a3 7258 	sub.w	r2, r3, #864	@ 0x360
 8002040:	f8d7 3358 	ldr.w	r3, [r7, #856]	@ 0x358
 8002044:	3301      	adds	r3, #1
 8002046:	019b      	lsls	r3, r3, #6
 8002048:	6812      	ldr	r2, [r2, #0]
 800204a:	4413      	add	r3, r2
 800204c:	1c98      	adds	r0, r3, #2
 800204e:	f8d7 3358 	ldr.w	r3, [r7, #856]	@ 0x358
 8002052:	3301      	adds	r3, #1
 8002054:	f507 7258 	add.w	r2, r7, #864	@ 0x360
 8002058:	f5a2 7258 	sub.w	r2, r2, #864	@ 0x360
 800205c:	3301      	adds	r3, #1
 800205e:	019b      	lsls	r3, r3, #6
 8002060:	6812      	ldr	r2, [r2, #0]
 8002062:	4413      	add	r3, r2
 8002064:	3302      	adds	r3, #2
 8002066:	4619      	mov	r1, r3
 8002068:	f017 f955 	bl	8019316 <strcpy>
                        for (int i = 0; i < MAX_HISTORY - 1; i++) {
 800206c:	f8d7 3358 	ldr.w	r3, [r7, #856]	@ 0x358
 8002070:	3301      	adds	r3, #1
 8002072:	f8c7 3358 	str.w	r3, [r7, #856]	@ 0x358
 8002076:	f8d7 3358 	ldr.w	r3, [r7, #856]	@ 0x358
 800207a:	2b03      	cmp	r3, #3
 800207c:	dddc      	ble.n	8002038 <process_command+0x4e4>
                        }
                        strcpy(context->commandHistory[MAX_HISTORY - 1], context->commandBuffer);
 800207e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8002082:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f503 72a1 	add.w	r2, r3, #322	@ 0x142
 800208c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8002090:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4619      	mov	r1, r3
 8002098:	4610      	mov	r0, r2
 800209a:	f017 f93c 	bl	8019316 <strcpy>
                    }
                }
                context->historyIndex = context->historyCount;
 800209e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80020a2:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f8b3 2182 	ldrh.w	r2, [r3, #386]	@ 0x182
 80020ac:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80020b0:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f8a3 2184 	strh.w	r2, [r3, #388]	@ 0x184

                // Process command
                int8_t ret_val = CmdLineProcess(context->commandBuffer);
 80020ba:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80020be:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7fe fcdf 	bl	8000a88 <CmdLineProcess>
 80020ca:	4603      	mov	r3, r0
 80020cc:	f887 3357 	strb.w	r3, [r7, #855]	@ 0x357
                if(ret_val == CMDLINE_NONE_RETURN){
 80020d0:	f997 3357 	ldrsb.w	r3, [r7, #855]	@ 0x357
 80020d4:	2b06      	cmp	r3, #6
 80020d6:	f000 80c3 	beq.w	8002260 <process_command+0x70c>

                }else{
					char buffer[60];
					snprintf(buffer, sizeof(buffer), "\r\n--> Return: ");
 80020da:	f107 0308 	add.w	r3, r7, #8
 80020de:	4a63      	ldr	r2, [pc, #396]	@ (800226c <process_command+0x718>)
 80020e0:	213c      	movs	r1, #60	@ 0x3c
 80020e2:	4618      	mov	r0, r3
 80020e4:	f016 f984 	bl	80183f0 <sniprintf>
					CDC_SendString(buffer);
 80020e8:	f107 0308 	add.w	r3, r7, #8
 80020ec:	4618      	mov	r0, r3
 80020ee:	f013 fef7 	bl	8015ee0 <CDC_SendString>
					CDC_SendString(ErrorCode[ret_val]);  //
 80020f2:	f997 3357 	ldrsb.w	r3, [r7, #855]	@ 0x357
 80020f6:	4a5e      	ldr	r2, [pc, #376]	@ (8002270 <process_command+0x71c>)
 80020f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f013 feef 	bl	8015ee0 <CDC_SendString>
					snprintf(buffer, sizeof(buffer), "%s%s$ ",xtime , NAME_SHELL);
 8002102:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8002106:	f107 0008 	add.w	r0, r7, #8
 800210a:	4a5a      	ldr	r2, [pc, #360]	@ (8002274 <process_command+0x720>)
 800210c:	9200      	str	r2, [sp, #0]
 800210e:	4a5a      	ldr	r2, [pc, #360]	@ (8002278 <process_command+0x724>)
 8002110:	213c      	movs	r1, #60	@ 0x3c
 8002112:	f016 f96d 	bl	80183f0 <sniprintf>
					CDC_SendString(buffer);
 8002116:	f107 0308 	add.w	r3, r7, #8
 800211a:	4618      	mov	r0, r3
 800211c:	f013 fee0 	bl	8015ee0 <CDC_SendString>


					context->commandBufferIndex = 0;
 8002120:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8002124:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2200      	movs	r2, #0
 800212c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 8002130:	e096      	b.n	8002260 <process_command+0x70c>
                }
            } else {
                char buffer[60];
                snprintf(buffer, sizeof(buffer), "\r\n%s%s$ ", xtime, NAME_SHELL);
 8002132:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8002136:	f107 0008 	add.w	r0, r7, #8
 800213a:	4a4e      	ldr	r2, [pc, #312]	@ (8002274 <process_command+0x720>)
 800213c:	9200      	str	r2, [sp, #0]
 800213e:	4a4f      	ldr	r2, [pc, #316]	@ (800227c <process_command+0x728>)
 8002140:	213c      	movs	r1, #60	@ 0x3c
 8002142:	f016 f955 	bl	80183f0 <sniprintf>

                CDC_SendString(buffer);
 8002146:	f107 0308 	add.w	r3, r7, #8
 800214a:	4618      	mov	r0, r3
 800214c:	f013 fec8 	bl	8015ee0 <CDC_SendString>
 8002150:	e086      	b.n	8002260 <process_command+0x70c>
            }
        } else if (rxData == KEY_BACKSPACE) {
 8002152:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8002156:	f2a3 3359 	subw	r3, r3, #857	@ 0x359
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b7f      	cmp	r3, #127	@ 0x7f
 800215e:	d12c      	bne.n	80021ba <process_command+0x666>
            if (context->commandBufferIndex > 0) {
 8002160:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8002164:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800216e:	2b00      	cmp	r3, #0
 8002170:	d01f      	beq.n	80021b2 <process_command+0x65e>
                context->commandBufferIndex--;
 8002172:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8002176:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002180:	3b01      	subs	r3, #1
 8002182:	b29a      	uxth	r2, r3
 8002184:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8002188:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
                context->commandBuffer[context->commandBufferIndex] = '\0';
 8002192:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8002196:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80021a0:	461a      	mov	r2, r3
 80021a2:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80021a6:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2100      	movs	r1, #0
 80021ae:	5499      	strb	r1, [r3, r2]
 80021b0:	e056      	b.n	8002260 <process_command+0x70c>
            }else{
            	CDC_SendString(" ");
 80021b2:	4833      	ldr	r0, [pc, #204]	@ (8002280 <process_command+0x72c>)
 80021b4:	f013 fe94 	bl	8015ee0 <CDC_SendString>
 80021b8:	e052      	b.n	8002260 <process_command+0x70c>
            }
        } else {
            if (context->commandBufferIndex < COMMAND_MAX_LENGTH - 1) {
 80021ba:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80021be:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80021c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80021ca:	d82b      	bhi.n	8002224 <process_command+0x6d0>
                context->commandBuffer[context->commandBufferIndex++] = rxData;
 80021cc:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80021d0:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80021da:	1c5a      	adds	r2, r3, #1
 80021dc:	b291      	uxth	r1, r2
 80021de:	f507 7258 	add.w	r2, r7, #864	@ 0x360
 80021e2:	f5a2 7258 	sub.w	r2, r2, #864	@ 0x360
 80021e6:	6812      	ldr	r2, [r2, #0]
 80021e8:	f8a2 1040 	strh.w	r1, [r2, #64]	@ 0x40
 80021ec:	4619      	mov	r1, r3
 80021ee:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80021f2:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f507 7258 	add.w	r2, r7, #864	@ 0x360
 80021fc:	f2a2 3259 	subw	r2, r2, #857	@ 0x359
 8002200:	7812      	ldrb	r2, [r2, #0]
 8002202:	545a      	strb	r2, [r3, r1]
                context->commandBuffer[context->commandBufferIndex] = '\0';
 8002204:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8002208:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002212:	461a      	mov	r2, r3
 8002214:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8002218:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2100      	movs	r1, #0
 8002220:	5499      	strb	r1, [r3, r2]
 8002222:	e01d      	b.n	8002260 <process_command+0x70c>
            } else {
                // Command too long
                CDC_SendString("\r\nError: Command too long.");
 8002224:	4817      	ldr	r0, [pc, #92]	@ (8002284 <process_command+0x730>)
 8002226:	f013 fe5b 	bl	8015ee0 <CDC_SendString>
                char buffer[30];
                snprintf(buffer, sizeof(buffer), "\r\n%s$ ", NAME_SHELL);
 800222a:	f507 7022 	add.w	r0, r7, #648	@ 0x288
 800222e:	4b11      	ldr	r3, [pc, #68]	@ (8002274 <process_command+0x720>)
 8002230:	4a15      	ldr	r2, [pc, #84]	@ (8002288 <process_command+0x734>)
 8002232:	211e      	movs	r1, #30
 8002234:	f016 f8dc 	bl	80183f0 <sniprintf>
                CDC_SendString(buffer);
 8002238:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800223c:	4618      	mov	r0, r3
 800223e:	f013 fe4f 	bl	8015ee0 <CDC_SendString>
                context->commandBufferIndex = 0;
 8002242:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8002246:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2200      	movs	r2, #0
 800224e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
                context->commandBuffer[0] = '\0';
 8002252:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8002256:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2200      	movs	r2, #0
 800225e:	701a      	strb	r2, [r3, #0]
//    	sprintf(debugBuffer, "0x%02X", rxData);
//    	CDC_SendString(debugBuffer);
        // Invalid character, do nothing
    }

}
 8002260:	f507 7758 	add.w	r7, r7, #864	@ 0x360
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	0801dcbc 	.word	0x0801dcbc
 800226c:	0801dcdc 	.word	0x0801dcdc
 8002270:	24000000 	.word	0x24000000
 8002274:	0801dc4c 	.word	0x0801dc4c
 8002278:	0801dcec 	.word	0x0801dcec
 800227c:	0801dcf4 	.word	0x0801dcf4
 8002280:	0801dd00 	.word	0x0801dd00
 8002284:	0801dd04 	.word	0x0801dd04
 8002288:	0801dc64 	.word	0x0801dc64

0800228c <command_create_task>:




void	command_create_task(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&s_CommandTaskContext.taskHandle, &s_CommandTaskContext.taskProperty);
 8002290:	4902      	ldr	r1, [pc, #8]	@ (800229c <command_create_task+0x10>)
 8002292:	4803      	ldr	r0, [pc, #12]	@ (80022a0 <command_create_task+0x14>)
 8002294:	f000 fc7a 	bl	8002b8c <SCH_TASK_CreateTask>
}
 8002298:	bf00      	nop
 800229a:	bd80      	pop	{r7, pc}
 800229c:	24000124 	.word	0x24000124
 80022a0:	24000120 	.word	0x24000120

080022a4 <LL_GPIO_SetOutputPin>:
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	619a      	str	r2, [r3, #24]
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <LL_GPIO_ResetOutputPin>:
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	041a      	lsls	r2, r3, #16
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	619a      	str	r2, [r3, #24]
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
	...

080022e0 <SD_Lockin>:
uint8_t workBuffer[FF_MAX_SS];
ALIGN_32BYTES(uint8_t rtext[96]);

uint8_t wtext[] = "This is FatFs running on CM7 core 2nd try"; /* File write buffer */

void SD_Lockin(void){
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOE, SDMMC_CTRL_ENA_Pin);
 80022e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80022e8:	480d      	ldr	r0, [pc, #52]	@ (8002320 <SD_Lockin+0x40>)
 80022ea:	f7ff ffdb 	bl	80022a4 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOD, SDMMC2_ENA_Pin);
 80022ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80022f2:	480c      	ldr	r0, [pc, #48]	@ (8002324 <SD_Lockin+0x44>)
 80022f4:	f7ff ffd6 	bl	80022a4 <LL_GPIO_SetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOE, SDMMC_SEL2_Pin);
 80022f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022fc:	4808      	ldr	r0, [pc, #32]	@ (8002320 <SD_Lockin+0x40>)
 80022fe:	f7ff ffdf 	bl	80022c0 <LL_GPIO_ResetOutputPin>



	LL_GPIO_ResetOutputPin(GPIOD, SDMMC1_ENA_Pin);
 8002302:	2110      	movs	r1, #16
 8002304:	4807      	ldr	r0, [pc, #28]	@ (8002324 <SD_Lockin+0x44>)
 8002306:	f7ff ffdb 	bl	80022c0 <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(GPIOE, SDMMC_SEL1_Pin);
 800230a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800230e:	4804      	ldr	r0, [pc, #16]	@ (8002320 <SD_Lockin+0x40>)
 8002310:	f7ff ffc8 	bl	80022a4 <LL_GPIO_SetOutputPin>
	SDFS_State = SDFS_READY;
 8002314:	4b04      	ldr	r3, [pc, #16]	@ (8002328 <SD_Lockin+0x48>)
 8002316:	2200      	movs	r2, #0
 8002318:	701a      	strb	r2, [r3, #0]
}
 800231a:	bf00      	nop
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	58021000 	.word	0x58021000
 8002324:	58020c00 	.word	0x58020c00
 8002328:	240006e5 	.word	0x240006e5

0800232c <SD_Release>:


void SD_Release(void){
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOD, SDMMC2_ENA_Pin);
 8002330:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002334:	480d      	ldr	r0, [pc, #52]	@ (800236c <SD_Release+0x40>)
 8002336:	f7ff ffc3 	bl	80022c0 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOD, SDMMC2_ENA_Pin);
 800233a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800233e:	480b      	ldr	r0, [pc, #44]	@ (800236c <SD_Release+0x40>)
 8002340:	f7ff ffbe 	bl	80022c0 <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(GPIOE, SDMMC_SEL2_Pin);
 8002344:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002348:	4809      	ldr	r0, [pc, #36]	@ (8002370 <SD_Release+0x44>)
 800234a:	f7ff ffab 	bl	80022a4 <LL_GPIO_SetOutputPin>



	LL_GPIO_ResetOutputPin(GPIOD, SDMMC1_ENA_Pin);
 800234e:	2110      	movs	r1, #16
 8002350:	4806      	ldr	r0, [pc, #24]	@ (800236c <SD_Release+0x40>)
 8002352:	f7ff ffb5 	bl	80022c0 <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(GPIOE, SDMMC_SEL1_Pin);
 8002356:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800235a:	4805      	ldr	r0, [pc, #20]	@ (8002370 <SD_Release+0x44>)
 800235c:	f7ff ffa2 	bl	80022a4 <LL_GPIO_SetOutputPin>
	SDFS_State = SDFS_RELEASE;
 8002360:	4b04      	ldr	r3, [pc, #16]	@ (8002374 <SD_Release+0x48>)
 8002362:	2201      	movs	r2, #1
 8002364:	701a      	strb	r2, [r3, #0]
}
 8002366:	bf00      	nop
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	58020c00 	.word	0x58020c00
 8002370:	58021000 	.word	0x58021000
 8002374:	240006e5 	.word	0x240006e5

08002378 <FS_ListFiles_path>:

uint32_t file_size;

void FS_ListFiles_path(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	f5ad 7d40 	sub.w	sp, sp, #768	@ 0x300
 800237e:	af02      	add	r7, sp, #8
  FRESULT res;
  DIR dir;
  FILINFO fno;
  char *path = MMC2Path;
 8002380:	4b3c      	ldr	r3, [pc, #240]	@ (8002474 <FS_ListFiles_path+0xfc>)
 8002382:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
  char buffer[384];
  snprintf(buffer, sizeof(buffer),
 8002386:	4638      	mov	r0, r7
 8002388:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 800238c:	4a3a      	ldr	r2, [pc, #232]	@ (8002478 <FS_ListFiles_path+0x100>)
 800238e:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8002392:	f016 f82d 	bl	80183f0 <sniprintf>
		  "\r\n[CM7]: Listing files in %s...\r\n",
           path);
  CDC_SendString(buffer);
 8002396:	463b      	mov	r3, r7
 8002398:	4618      	mov	r0, r3
 800239a:	f013 fda1 	bl	8015ee0 <CDC_SendString>


  /* Open the root directory */
  res = f_opendir(&dir, path);
 800239e:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 80023a2:	f8d7 12f4 	ldr.w	r1, [r7, #756]	@ 0x2f4
 80023a6:	4618      	mov	r0, r3
 80023a8:	f013 f85e 	bl	8015468 <f_opendir>
 80023ac:	4603      	mov	r3, r0
 80023ae:	f887 32f3 	strb.w	r3, [r7, #755]	@ 0x2f3
  if (res == FR_OK)
 80023b2:	f897 32f3 	ldrb.w	r3, [r7, #755]	@ 0x2f3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d147      	bne.n	800244a <FS_ListFiles_path+0xd2>
  {
    while (1)
    {
      res = f_readdir(&dir, &fno); /* Read a directory item */
 80023ba:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 80023be:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 80023c2:	4611      	mov	r1, r2
 80023c4:	4618      	mov	r0, r3
 80023c6:	f013 f98c 	bl	80156e2 <f_readdir>
 80023ca:	4603      	mov	r3, r0
 80023cc:	f887 32f3 	strb.w	r3, [r7, #755]	@ 0x2f3
      if (res != FR_OK || fno.fname[0] == 0)
 80023d0:	f897 32f3 	ldrb.w	r3, [r7, #755]	@ 0x2f3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d132      	bne.n	800243e <FS_ListFiles_path+0xc6>
 80023d8:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80023dc:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80023e0:	7e9b      	ldrb	r3, [r3, #26]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d02b      	beq.n	800243e <FS_ListFiles_path+0xc6>
      {
        break; /* Break on error or end of directory */
      }
      if (fno.fattrib & AM_DIR)
 80023e6:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80023ea:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80023ee:	7b1b      	ldrb	r3, [r3, #12]
 80023f0:	f003 0310 	and.w	r3, r3, #16
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00d      	beq.n	8002414 <FS_ListFiles_path+0x9c>
      {
        snprintf(buffer, sizeof(buffer),
 80023f8:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80023fc:	331a      	adds	r3, #26
 80023fe:	4638      	mov	r0, r7
 8002400:	4a1e      	ldr	r2, [pc, #120]	@ (800247c <FS_ListFiles_path+0x104>)
 8002402:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8002406:	f015 fff3 	bl	80183f0 <sniprintf>
        		"  [DIR]  %s\r\n", fno.fname);
        CDC_SendString(buffer);
 800240a:	463b      	mov	r3, r7
 800240c:	4618      	mov	r0, r3
 800240e:	f013 fd67 	bl	8015ee0 <CDC_SendString>
 8002412:	e7d2      	b.n	80023ba <FS_ListFiles_path+0x42>

      }
      else
      {
          snprintf(buffer, sizeof(buffer),
          		"  [FILE] %s\t%lu bytes\r\n", fno.fname, (unsigned long)fno.fsize);
 8002414:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8002418:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800241c:	e9d3 2300 	ldrd	r2, r3, [r3]
          snprintf(buffer, sizeof(buffer),
 8002420:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8002424:	331a      	adds	r3, #26
 8002426:	4638      	mov	r0, r7
 8002428:	9200      	str	r2, [sp, #0]
 800242a:	4a15      	ldr	r2, [pc, #84]	@ (8002480 <FS_ListFiles_path+0x108>)
 800242c:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8002430:	f015 ffde 	bl	80183f0 <sniprintf>
          CDC_SendString(buffer);
 8002434:	463b      	mov	r3, r7
 8002436:	4618      	mov	r0, r3
 8002438:	f013 fd52 	bl	8015ee0 <CDC_SendString>
      res = f_readdir(&dir, &fno); /* Read a directory item */
 800243c:	e7bd      	b.n	80023ba <FS_ListFiles_path+0x42>
      }
    }
    f_closedir(&dir);
 800243e:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8002442:	4618      	mov	r0, r3
 8002444:	f013 f927 	bl	8015696 <f_closedir>
  {
    snprintf(buffer, sizeof(buffer),
    		"Failed to open directory %s: %d\r\n", path, res);
    CDC_SendString(buffer);
  }
}
 8002448:	e00e      	b.n	8002468 <FS_ListFiles_path+0xf0>
    snprintf(buffer, sizeof(buffer),
 800244a:	f897 32f3 	ldrb.w	r3, [r7, #755]	@ 0x2f3
 800244e:	4638      	mov	r0, r7
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 8002456:	4a0b      	ldr	r2, [pc, #44]	@ (8002484 <FS_ListFiles_path+0x10c>)
 8002458:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 800245c:	f015 ffc8 	bl	80183f0 <sniprintf>
    CDC_SendString(buffer);
 8002460:	463b      	mov	r3, r7
 8002462:	4618      	mov	r0, r3
 8002464:	f013 fd3c 	bl	8015ee0 <CDC_SendString>
}
 8002468:	bf00      	nop
 800246a:	f507 773e 	add.w	r7, r7, #760	@ 0x2f8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	24001738 	.word	0x24001738
 8002478:	0801dd20 	.word	0x0801dd20
 800247c:	0801dd44 	.word	0x0801dd44
 8002480:	0801dd54 	.word	0x0801dd54
 8002484:	0801dd6c 	.word	0x0801dd6c

08002488 <Link_SDFS_Driver>:

void Link_SDFS_Driver(void){
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
	if(FATFS_LinkDriver(&MMC2_Driver, MMC2Path) == 0)
 800248e:	490d      	ldr	r1, [pc, #52]	@ (80024c4 <Link_SDFS_Driver+0x3c>)
 8002490:	480d      	ldr	r0, [pc, #52]	@ (80024c8 <Link_SDFS_Driver+0x40>)
 8002492:	f013 f9eb 	bl	801586c <FATFS_LinkDriver>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10e      	bne.n	80024ba <Link_SDFS_Driver+0x32>
	{
	//	printf("MMC Instance Base Address when done link drive: 0x%p ", (void*)hmmc1.Instance);
		  int ret2 = FR_OK;
 800249c:	2300      	movs	r3, #0
 800249e:	607b      	str	r3, [r7, #4]

		  ret2 = f_mount(&MMC2FatFs, (TCHAR const*)MMC2Path, 1);
 80024a0:	2201      	movs	r2, #1
 80024a2:	4908      	ldr	r1, [pc, #32]	@ (80024c4 <Link_SDFS_Driver+0x3c>)
 80024a4:	4809      	ldr	r0, [pc, #36]	@ (80024cc <Link_SDFS_Driver+0x44>)
 80024a6:	f011 fe9f 	bl	80141e8 <f_mount>
 80024aa:	4603      	mov	r3, r0
 80024ac:	607b      	str	r3, [r7, #4]

		  if(ret2 != FR_OK)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d002      	beq.n	80024ba <Link_SDFS_Driver+0x32>
		  {
			  /* FatFs Initialization Error */
			  CDC_SendString("Failed to mount\r\n");
 80024b4:	4806      	ldr	r0, [pc, #24]	@ (80024d0 <Link_SDFS_Driver+0x48>)
 80024b6:	f013 fd13 	bl	8015ee0 <CDC_SendString>
//			  Error_Handler();
		  }
	}

}
 80024ba:	bf00      	nop
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	24001738 	.word	0x24001738
 80024c8:	0801e47c 	.word	0x0801e47c
 80024cc:	240006e8 	.word	0x240006e8
 80024d0:	0801dd90 	.word	0x0801dd90

080024d4 <Cat_SDFS>:

int Cat_SDFS(const char *filename) {
 80024d4:	b590      	push	{r4, r7, lr}
 80024d6:	f5ad 5d93 	sub.w	sp, sp, #4704	@ 0x1260
 80024da:	b085      	sub	sp, #20
 80024dc:	af02      	add	r7, sp, #8
 80024de:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80024e2:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80024e6:	6018      	str	r0, [r3, #0]
 80024e8:	f241 2368 	movw	r3, #4712	@ 0x1268
 80024ec:	443b      	add	r3, r7
 80024ee:	f5a3 5393 	sub.w	r3, r3, #4704	@ 0x1260
 80024f2:	331f      	adds	r3, #31
 80024f4:	095b      	lsrs	r3, r3, #5
 80024f6:	015c      	lsls	r4, r3, #5
    char buffer[384];
    ALIGN_32BYTES(uint8_t rtext[96]);
    UINT bytesread;

    // Mở file chỉ để đọc
    res = f_open(&file, filename, FA_READ);
 80024f8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80024fc:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8002500:	f507 7002 	add.w	r0, r7, #520	@ 0x208
 8002504:	2201      	movs	r2, #1
 8002506:	6819      	ldr	r1, [r3, #0]
 8002508:	f011 feba 	bl	8014280 <f_open>
 800250c:	4603      	mov	r3, r0
 800250e:	f241 2267 	movw	r2, #4711	@ 0x1267
 8002512:	443a      	add	r2, r7
 8002514:	7013      	strb	r3, [r2, #0]
    if (res != FR_OK) {
 8002516:	f241 2367 	movw	r3, #4711	@ 0x1267
 800251a:	443b      	add	r3, r7
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d018      	beq.n	8002554 <Cat_SDFS+0x80>
        snprintf(buffer, sizeof(buffer), "Failed to open file %s: %d\r\n", filename, res);
 8002522:	f241 2367 	movw	r3, #4711	@ 0x1267
 8002526:	443b      	add	r3, r7
 8002528:	781a      	ldrb	r2, [r3, #0]
 800252a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800252e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8002532:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8002536:	9200      	str	r2, [sp, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a35      	ldr	r2, [pc, #212]	@ (8002610 <Cat_SDFS+0x13c>)
 800253c:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8002540:	f015 ff56 	bl	80183f0 <sniprintf>
        CDC_SendString(buffer);
 8002544:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8002548:	4618      	mov	r0, r3
 800254a:	f013 fcc9 	bl	8015ee0 <CDC_SendString>
        return -1; // Lỗi mở file
 800254e:	f04f 33ff 	mov.w	r3, #4294967295
 8002552:	e056      	b.n	8002602 <Cat_SDFS+0x12e>
    }
    CDC_SendString("\r\n");
 8002554:	482f      	ldr	r0, [pc, #188]	@ (8002614 <Cat_SDFS+0x140>)
 8002556:	f013 fcc3 	bl	8015ee0 <CDC_SendString>
    // Đọc nội dung file
    do {
        memset(rtext, 0, sizeof(rtext)); // Làm sạch buffer trước mỗi lần đọc
 800255a:	2260      	movs	r2, #96	@ 0x60
 800255c:	2100      	movs	r1, #0
 800255e:	4620      	mov	r0, r4
 8002560:	f016 f8ae 	bl	80186c0 <memset>
        res = f_read(&file, rtext, sizeof(rtext) - 1, &bytesread);
 8002564:	4b2c      	ldr	r3, [pc, #176]	@ (8002618 <Cat_SDFS+0x144>)
 8002566:	f503 5393 	add.w	r3, r3, #4704	@ 0x1260
 800256a:	f103 0308 	add.w	r3, r3, #8
 800256e:	443b      	add	r3, r7
 8002570:	f507 7002 	add.w	r0, r7, #520	@ 0x208
 8002574:	225f      	movs	r2, #95	@ 0x5f
 8002576:	4621      	mov	r1, r4
 8002578:	f012 fa35 	bl	80149e6 <f_read>
 800257c:	4603      	mov	r3, r0
 800257e:	f241 2267 	movw	r2, #4711	@ 0x1267
 8002582:	443a      	add	r2, r7
 8002584:	7013      	strb	r3, [r2, #0]
        if (res != FR_OK) {
 8002586:	f241 2367 	movw	r3, #4711	@ 0x1267
 800258a:	443b      	add	r3, r7
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d01d      	beq.n	80025ce <Cat_SDFS+0xfa>
            snprintf(buffer, sizeof(buffer), "Failed to read file %s: %d\r\n", filename, res);
 8002592:	f241 2367 	movw	r3, #4711	@ 0x1267
 8002596:	443b      	add	r3, r7
 8002598:	781a      	ldrb	r2, [r3, #0]
 800259a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800259e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80025a2:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 80025a6:	9200      	str	r2, [sp, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a1c      	ldr	r2, [pc, #112]	@ (800261c <Cat_SDFS+0x148>)
 80025ac:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 80025b0:	f015 ff1e 	bl	80183f0 <sniprintf>
            CDC_SendString(buffer);
 80025b4:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80025b8:	4618      	mov	r0, r3
 80025ba:	f013 fc91 	bl	8015ee0 <CDC_SendString>
            f_close(&file);
 80025be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025c2:	4618      	mov	r0, r3
 80025c4:	f012 ff26 	bl	8015414 <f_close>
            return -1; // Lỗi đọc file
 80025c8:	f04f 33ff 	mov.w	r3, #4294967295
 80025cc:	e019      	b.n	8002602 <Cat_SDFS+0x12e>
        }
        rtext[bytesread] = '\0'; // Đảm bảo buffer là chuỗi kết thúc
 80025ce:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80025d2:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2200      	movs	r2, #0
 80025da:	54e2      	strb	r2, [r4, r3]
        CDC_SendString((char *)rtext);
 80025dc:	4620      	mov	r0, r4
 80025de:	f013 fc7f 	bl	8015ee0 <CDC_SendString>
    } while (bytesread > 0);
 80025e2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80025e6:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1b4      	bne.n	800255a <Cat_SDFS+0x86>

    CDC_SendString("\r\n");
 80025f0:	4808      	ldr	r0, [pc, #32]	@ (8002614 <Cat_SDFS+0x140>)
 80025f2:	f013 fc75 	bl	8015ee0 <CDC_SendString>
    f_close(&file);
 80025f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025fa:	4618      	mov	r0, r3
 80025fc:	f012 ff0a 	bl	8015414 <f_close>
    return 0; // Thành công
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	f507 5793 	add.w	r7, r7, #4704	@ 0x1260
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	bd90      	pop	{r4, r7, pc}
 800260e:	bf00      	nop
 8002610:	0801dda4 	.word	0x0801dda4
 8002614:	0801ddc4 	.word	0x0801ddc4
 8002618:	ffffee1c 	.word	0xffffee1c
 800261c:	0801ddc8 	.word	0x0801ddc8

08002620 <Nano_SDFS>:

int Nano_SDFS(const char *filename, const char *content) {
 8002620:	b580      	push	{r7, lr}
 8002622:	f5ad 5d8f 	sub.w	sp, sp, #4576	@ 0x11e0
 8002626:	b086      	sub	sp, #24
 8002628:	af02      	add	r7, sp, #8
 800262a:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800262e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002632:	6018      	str	r0, [r3, #0]
 8002634:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8002638:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 800263c:	6019      	str	r1, [r3, #0]
    FRESULT res;
    char buffer[384];
    UINT byteswritten;

    // Mở hoặc tạo tệp, ghi vào cuối
    res = f_open(&file, filename, FA_OPEN_APPEND | FA_WRITE | FA_CREATE_ALWAYS);
 800263e:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8002642:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002646:	f507 70c8 	add.w	r0, r7, #400	@ 0x190
 800264a:	223a      	movs	r2, #58	@ 0x3a
 800264c:	6819      	ldr	r1, [r3, #0]
 800264e:	f011 fe17 	bl	8014280 <f_open>
 8002652:	4603      	mov	r3, r0
 8002654:	f241 12ef 	movw	r2, #4591	@ 0x11ef
 8002658:	443a      	add	r2, r7
 800265a:	7013      	strb	r3, [r2, #0]
    if (res != FR_OK) {
 800265c:	f241 13ef 	movw	r3, #4591	@ 0x11ef
 8002660:	443b      	add	r3, r7
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d018      	beq.n	800269a <Nano_SDFS+0x7a>
        snprintf(buffer, sizeof(buffer), "Failed to open or create file %s: %d\r\n", filename, res);
 8002668:	f241 13ef 	movw	r3, #4591	@ 0x11ef
 800266c:	443b      	add	r3, r7
 800266e:	781a      	ldrb	r2, [r3, #0]
 8002670:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8002674:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002678:	f107 0010 	add.w	r0, r7, #16
 800267c:	9200      	str	r2, [sp, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a56      	ldr	r2, [pc, #344]	@ (80027dc <Nano_SDFS+0x1bc>)
 8002682:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8002686:	f015 feb3 	bl	80183f0 <sniprintf>
        CDC_SendString(buffer);
 800268a:	f107 0310 	add.w	r3, r7, #16
 800268e:	4618      	mov	r0, r3
 8002690:	f013 fc26 	bl	8015ee0 <CDC_SendString>
        return -1; // Lỗi mở hoặc tạo file
 8002694:	f04f 33ff 	mov.w	r3, #4294967295
 8002698:	e09a      	b.n	80027d0 <Nano_SDFS+0x1b0>
    }

    // Ghi nội dung nếu có
    if (content && strlen(content) > 0) {
 800269a:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800269e:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f000 808d 	beq.w	80027c4 <Nano_SDFS+0x1a4>
 80026aa:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80026ae:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f000 8084 	beq.w	80027c4 <Nano_SDFS+0x1a4>
        res = f_write(&file, content, strlen(content), &byteswritten);
 80026bc:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80026c0:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80026c4:	6818      	ldr	r0, [r3, #0]
 80026c6:	f7fd fe6b 	bl	80003a0 <strlen>
 80026ca:	4602      	mov	r2, r0
 80026cc:	4b44      	ldr	r3, [pc, #272]	@ (80027e0 <Nano_SDFS+0x1c0>)
 80026ce:	f503 538f 	add.w	r3, r3, #4576	@ 0x11e0
 80026d2:	f103 0310 	add.w	r3, r3, #16
 80026d6:	443b      	add	r3, r7
 80026d8:	f507 71f8 	add.w	r1, r7, #496	@ 0x1f0
 80026dc:	f5a1 71f8 	sub.w	r1, r1, #496	@ 0x1f0
 80026e0:	f507 70c8 	add.w	r0, r7, #400	@ 0x190
 80026e4:	6809      	ldr	r1, [r1, #0]
 80026e6:	f012 fb16 	bl	8014d16 <f_write>
 80026ea:	4603      	mov	r3, r0
 80026ec:	f241 12ef 	movw	r2, #4591	@ 0x11ef
 80026f0:	443a      	add	r2, r7
 80026f2:	7013      	strb	r3, [r2, #0]
        if (res != FR_OK || byteswritten != strlen(content)) {
 80026f4:	f241 13ef 	movw	r3, #4591	@ 0x11ef
 80026f8:	443b      	add	r3, r7
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10e      	bne.n	800271e <Nano_SDFS+0xfe>
 8002700:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8002704:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8002708:	6818      	ldr	r0, [r3, #0]
 800270a:	f7fd fe49 	bl	80003a0 <strlen>
 800270e:	4602      	mov	r2, r0
 8002710:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8002714:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d01d      	beq.n	800275a <Nano_SDFS+0x13a>
            snprintf(buffer, sizeof(buffer), "Failed to write to file %s: %d\r\n", filename, res);
 800271e:	f241 13ef 	movw	r3, #4591	@ 0x11ef
 8002722:	443b      	add	r3, r7
 8002724:	781a      	ldrb	r2, [r3, #0]
 8002726:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800272a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800272e:	f107 0010 	add.w	r0, r7, #16
 8002732:	9200      	str	r2, [sp, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a2b      	ldr	r2, [pc, #172]	@ (80027e4 <Nano_SDFS+0x1c4>)
 8002738:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 800273c:	f015 fe58 	bl	80183f0 <sniprintf>
            CDC_SendString(buffer);
 8002740:	f107 0310 	add.w	r3, r7, #16
 8002744:	4618      	mov	r0, r3
 8002746:	f013 fbcb 	bl	8015ee0 <CDC_SendString>
            f_close(&file);
 800274a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800274e:	4618      	mov	r0, r3
 8002750:	f012 fe60 	bl	8015414 <f_close>
            return -1; // Lỗi ghi file
 8002754:	f04f 33ff 	mov.w	r3, #4294967295
 8002758:	e03a      	b.n	80027d0 <Nano_SDFS+0x1b0>
        }
        // Thêm xuống dòng vào cuối
        res = f_write(&file, "\r\n", 2, &byteswritten);
 800275a:	4b21      	ldr	r3, [pc, #132]	@ (80027e0 <Nano_SDFS+0x1c0>)
 800275c:	f503 538f 	add.w	r3, r3, #4576	@ 0x11e0
 8002760:	f103 0310 	add.w	r3, r3, #16
 8002764:	443b      	add	r3, r7
 8002766:	f507 70c8 	add.w	r0, r7, #400	@ 0x190
 800276a:	2202      	movs	r2, #2
 800276c:	491e      	ldr	r1, [pc, #120]	@ (80027e8 <Nano_SDFS+0x1c8>)
 800276e:	f012 fad2 	bl	8014d16 <f_write>
 8002772:	4603      	mov	r3, r0
 8002774:	f241 12ef 	movw	r2, #4591	@ 0x11ef
 8002778:	443a      	add	r2, r7
 800277a:	7013      	strb	r3, [r2, #0]
        if (res != FR_OK) {
 800277c:	f241 13ef 	movw	r3, #4591	@ 0x11ef
 8002780:	443b      	add	r3, r7
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d01d      	beq.n	80027c4 <Nano_SDFS+0x1a4>
            snprintf(buffer, sizeof(buffer), "Failed to write newline to file %s: %d\r\n", filename, res);
 8002788:	f241 13ef 	movw	r3, #4591	@ 0x11ef
 800278c:	443b      	add	r3, r7
 800278e:	781a      	ldrb	r2, [r3, #0]
 8002790:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8002794:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002798:	f107 0010 	add.w	r0, r7, #16
 800279c:	9200      	str	r2, [sp, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a12      	ldr	r2, [pc, #72]	@ (80027ec <Nano_SDFS+0x1cc>)
 80027a2:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 80027a6:	f015 fe23 	bl	80183f0 <sniprintf>
            CDC_SendString(buffer);
 80027aa:	f107 0310 	add.w	r3, r7, #16
 80027ae:	4618      	mov	r0, r3
 80027b0:	f013 fb96 	bl	8015ee0 <CDC_SendString>
            f_close(&file);
 80027b4:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80027b8:	4618      	mov	r0, r3
 80027ba:	f012 fe2b 	bl	8015414 <f_close>
            return -1; // Lỗi ghi xuống dòng
 80027be:	f04f 33ff 	mov.w	r3, #4294967295
 80027c2:	e005      	b.n	80027d0 <Nano_SDFS+0x1b0>
        }
    }

    f_close(&file);
 80027c4:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80027c8:	4618      	mov	r0, r3
 80027ca:	f012 fe23 	bl	8015414 <f_close>
    return 0; // Thành công
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	f507 578f 	add.w	r7, r7, #4576	@ 0x11e0
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	0801dde8 	.word	0x0801dde8
 80027e0:	ffffee1c 	.word	0xffffee1c
 80027e4:	0801de10 	.word	0x0801de10
 80027e8:	0801ddc4 	.word	0x0801ddc4
 80027ec:	0801de34 	.word	0x0801de34

080027f0 <Vim_SDFS>:

int Vim_SDFS(const char *filename, const char *content) {
 80027f0:	b580      	push	{r7, lr}
 80027f2:	f5ad 5d8f 	sub.w	sp, sp, #4576	@ 0x11e0
 80027f6:	b086      	sub	sp, #24
 80027f8:	af02      	add	r7, sp, #8
 80027fa:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80027fe:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002802:	6018      	str	r0, [r3, #0]
 8002804:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8002808:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 800280c:	6019      	str	r1, [r3, #0]
    FRESULT res;
    char buffer[384];
    UINT byteswritten;

    // Mở hoặc tạo tệp, ghi vào cuối
    res = f_open(&file, filename, FA_OPEN_APPEND | FA_WRITE);
 800280e:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8002812:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002816:	f507 70c8 	add.w	r0, r7, #400	@ 0x190
 800281a:	2232      	movs	r2, #50	@ 0x32
 800281c:	6819      	ldr	r1, [r3, #0]
 800281e:	f011 fd2f 	bl	8014280 <f_open>
 8002822:	4603      	mov	r3, r0
 8002824:	f241 12ef 	movw	r2, #4591	@ 0x11ef
 8002828:	443a      	add	r2, r7
 800282a:	7013      	strb	r3, [r2, #0]
    if (res != FR_OK) {
 800282c:	f241 13ef 	movw	r3, #4591	@ 0x11ef
 8002830:	443b      	add	r3, r7
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d018      	beq.n	800286a <Vim_SDFS+0x7a>
        snprintf(buffer, sizeof(buffer), "Failed to open or create file %s: %d\r\n", filename, res);
 8002838:	f241 13ef 	movw	r3, #4591	@ 0x11ef
 800283c:	443b      	add	r3, r7
 800283e:	781a      	ldrb	r2, [r3, #0]
 8002840:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8002844:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002848:	f107 0010 	add.w	r0, r7, #16
 800284c:	9200      	str	r2, [sp, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a59      	ldr	r2, [pc, #356]	@ (80029b8 <Vim_SDFS+0x1c8>)
 8002852:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8002856:	f015 fdcb 	bl	80183f0 <sniprintf>
        CDC_SendString(buffer);
 800285a:	f107 0310 	add.w	r3, r7, #16
 800285e:	4618      	mov	r0, r3
 8002860:	f013 fb3e 	bl	8015ee0 <CDC_SendString>
        return -1; // Lỗi mở hoặc tạo file
 8002864:	f04f 33ff 	mov.w	r3, #4294967295
 8002868:	e0a0      	b.n	80029ac <Vim_SDFS+0x1bc>
    }

    // Ghi nội dung mới vào hàng mới
    if (content && strlen(content) > 0) {
 800286a:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800286e:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 8093 	beq.w	80029a0 <Vim_SDFS+0x1b0>
 800287a:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800287e:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	2b00      	cmp	r3, #0
 8002888:	f000 808a 	beq.w	80029a0 <Vim_SDFS+0x1b0>

        // Ghi nội dung mới
        res = f_write(&file, content, strlen(content), &byteswritten);
 800288c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8002890:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8002894:	6818      	ldr	r0, [r3, #0]
 8002896:	f7fd fd83 	bl	80003a0 <strlen>
 800289a:	4602      	mov	r2, r0
 800289c:	4b47      	ldr	r3, [pc, #284]	@ (80029bc <Vim_SDFS+0x1cc>)
 800289e:	f503 538f 	add.w	r3, r3, #4576	@ 0x11e0
 80028a2:	f103 0310 	add.w	r3, r3, #16
 80028a6:	443b      	add	r3, r7
 80028a8:	f507 71f8 	add.w	r1, r7, #496	@ 0x1f0
 80028ac:	f5a1 71f8 	sub.w	r1, r1, #496	@ 0x1f0
 80028b0:	f507 70c8 	add.w	r0, r7, #400	@ 0x190
 80028b4:	6809      	ldr	r1, [r1, #0]
 80028b6:	f012 fa2e 	bl	8014d16 <f_write>
 80028ba:	4603      	mov	r3, r0
 80028bc:	f241 12ef 	movw	r2, #4591	@ 0x11ef
 80028c0:	443a      	add	r2, r7
 80028c2:	7013      	strb	r3, [r2, #0]
        if (res != FR_OK || byteswritten != strlen(content)) {
 80028c4:	f241 13ef 	movw	r3, #4591	@ 0x11ef
 80028c8:	443b      	add	r3, r7
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10e      	bne.n	80028ee <Vim_SDFS+0xfe>
 80028d0:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80028d4:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80028d8:	6818      	ldr	r0, [r3, #0]
 80028da:	f7fd fd61 	bl	80003a0 <strlen>
 80028de:	4602      	mov	r2, r0
 80028e0:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80028e4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d01d      	beq.n	800292a <Vim_SDFS+0x13a>
            snprintf(buffer, sizeof(buffer), "Failed to write content to file %s: %d\r\n", filename, res);
 80028ee:	f241 13ef 	movw	r3, #4591	@ 0x11ef
 80028f2:	443b      	add	r3, r7
 80028f4:	781a      	ldrb	r2, [r3, #0]
 80028f6:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80028fa:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80028fe:	f107 0010 	add.w	r0, r7, #16
 8002902:	9200      	str	r2, [sp, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a2e      	ldr	r2, [pc, #184]	@ (80029c0 <Vim_SDFS+0x1d0>)
 8002908:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 800290c:	f015 fd70 	bl	80183f0 <sniprintf>
            CDC_SendString(buffer);
 8002910:	f107 0310 	add.w	r3, r7, #16
 8002914:	4618      	mov	r0, r3
 8002916:	f013 fae3 	bl	8015ee0 <CDC_SendString>
            f_close(&file);
 800291a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800291e:	4618      	mov	r0, r3
 8002920:	f012 fd78 	bl	8015414 <f_close>
            return -1; // Lỗi ghi nội dung
 8002924:	f04f 33ff 	mov.w	r3, #4294967295
 8002928:	e040      	b.n	80029ac <Vim_SDFS+0x1bc>
        }

        // Thêm xuống dòng trước khi ghi nội dung mới (trừ khi tệp đang rỗng)
        if (f_size(&file) > 0) {
 800292a:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800292e:	e953 2314 	ldrd	r2, r3, [r3, #-80]	@ 0x50
 8002932:	4313      	orrs	r3, r2
 8002934:	d034      	beq.n	80029a0 <Vim_SDFS+0x1b0>
            res = f_write(&file, "\r\n", 2, &byteswritten);
 8002936:	4b21      	ldr	r3, [pc, #132]	@ (80029bc <Vim_SDFS+0x1cc>)
 8002938:	f503 538f 	add.w	r3, r3, #4576	@ 0x11e0
 800293c:	f103 0310 	add.w	r3, r3, #16
 8002940:	443b      	add	r3, r7
 8002942:	f507 70c8 	add.w	r0, r7, #400	@ 0x190
 8002946:	2202      	movs	r2, #2
 8002948:	491e      	ldr	r1, [pc, #120]	@ (80029c4 <Vim_SDFS+0x1d4>)
 800294a:	f012 f9e4 	bl	8014d16 <f_write>
 800294e:	4603      	mov	r3, r0
 8002950:	f241 12ef 	movw	r2, #4591	@ 0x11ef
 8002954:	443a      	add	r2, r7
 8002956:	7013      	strb	r3, [r2, #0]
            if (res != FR_OK) {
 8002958:	f241 13ef 	movw	r3, #4591	@ 0x11ef
 800295c:	443b      	add	r3, r7
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d01d      	beq.n	80029a0 <Vim_SDFS+0x1b0>
                snprintf(buffer, sizeof(buffer), "Failed to write newline to file %s: %d\r\n", filename, res);
 8002964:	f241 13ef 	movw	r3, #4591	@ 0x11ef
 8002968:	443b      	add	r3, r7
 800296a:	781a      	ldrb	r2, [r3, #0]
 800296c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8002970:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002974:	f107 0010 	add.w	r0, r7, #16
 8002978:	9200      	str	r2, [sp, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a12      	ldr	r2, [pc, #72]	@ (80029c8 <Vim_SDFS+0x1d8>)
 800297e:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8002982:	f015 fd35 	bl	80183f0 <sniprintf>
                CDC_SendString(buffer);
 8002986:	f107 0310 	add.w	r3, r7, #16
 800298a:	4618      	mov	r0, r3
 800298c:	f013 faa8 	bl	8015ee0 <CDC_SendString>
                f_close(&file);
 8002990:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8002994:	4618      	mov	r0, r3
 8002996:	f012 fd3d 	bl	8015414 <f_close>
                return -1; // Lỗi ghi xuống dòng
 800299a:	f04f 33ff 	mov.w	r3, #4294967295
 800299e:	e005      	b.n	80029ac <Vim_SDFS+0x1bc>
            }
        }

    }

    f_close(&file);
 80029a0:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80029a4:	4618      	mov	r0, r3
 80029a6:	f012 fd35 	bl	8015414 <f_close>
    return 0; // Thành công
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	f507 578f 	add.w	r7, r7, #4576	@ 0x11e0
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	0801dde8 	.word	0x0801dde8
 80029bc:	ffffee1c 	.word	0xffffee1c
 80029c0:	0801de60 	.word	0x0801de60
 80029c4:	0801ddc4 	.word	0x0801ddc4
 80029c8:	0801de34 	.word	0x0801de34

080029cc <log_level_to_string>:
 */


#include "log.h"

const char* log_level_to_string(log_level_t level) {
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	71fb      	strb	r3, [r7, #7]
    switch (level) {
 80029d6:	79fb      	ldrb	r3, [r7, #7]
 80029d8:	2b05      	cmp	r3, #5
 80029da:	d81b      	bhi.n	8002a14 <log_level_to_string+0x48>
 80029dc:	a201      	add	r2, pc, #4	@ (adr r2, 80029e4 <log_level_to_string+0x18>)
 80029de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e2:	bf00      	nop
 80029e4:	080029fd 	.word	0x080029fd
 80029e8:	08002a01 	.word	0x08002a01
 80029ec:	08002a05 	.word	0x08002a05
 80029f0:	08002a09 	.word	0x08002a09
 80029f4:	08002a0d 	.word	0x08002a0d
 80029f8:	08002a11 	.word	0x08002a11
        case LOG_INFOR:  return "INFOR";
 80029fc:	4b09      	ldr	r3, [pc, #36]	@ (8002a24 <log_level_to_string+0x58>)
 80029fe:	e00a      	b.n	8002a16 <log_level_to_string+0x4a>
        case LOG_DEBUG:  return "DEBUG";
 8002a00:	4b09      	ldr	r3, [pc, #36]	@ (8002a28 <log_level_to_string+0x5c>)
 8002a02:	e008      	b.n	8002a16 <log_level_to_string+0x4a>
        case LOG_NOTICE: return "NOTICE";
 8002a04:	4b09      	ldr	r3, [pc, #36]	@ (8002a2c <log_level_to_string+0x60>)
 8002a06:	e006      	b.n	8002a16 <log_level_to_string+0x4a>
        case LOG_WARN:   return "WARN";
 8002a08:	4b09      	ldr	r3, [pc, #36]	@ (8002a30 <log_level_to_string+0x64>)
 8002a0a:	e004      	b.n	8002a16 <log_level_to_string+0x4a>
        case LOG_ERROR:  return "ERROR";
 8002a0c:	4b09      	ldr	r3, [pc, #36]	@ (8002a34 <log_level_to_string+0x68>)
 8002a0e:	e002      	b.n	8002a16 <log_level_to_string+0x4a>
        case LOG_FATAL:  return "FATAL";
 8002a10:	4b09      	ldr	r3, [pc, #36]	@ (8002a38 <log_level_to_string+0x6c>)
 8002a12:	e000      	b.n	8002a16 <log_level_to_string+0x4a>
        default:     return "UNKNOWN";
 8002a14:	4b09      	ldr	r3, [pc, #36]	@ (8002a3c <log_level_to_string+0x70>)
    }
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	0801de8c 	.word	0x0801de8c
 8002a28:	0801de94 	.word	0x0801de94
 8002a2c:	0801de9c 	.word	0x0801de9c
 8002a30:	0801dea4 	.word	0x0801dea4
 8002a34:	0801deac 	.word	0x0801deac
 8002a38:	0801deb4 	.word	0x0801deb4
 8002a3c:	0801debc 	.word	0x0801debc

08002a40 <log_create>:

void log_create(log_struct_t log, char* output) {
 8002a40:	b084      	sub	sp, #16
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b08a      	sub	sp, #40	@ 0x28
 8002a46:	af08      	add	r7, sp, #32
 8002a48:	f107 0c10 	add.w	ip, r7, #16
 8002a4c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    const char* core = (strcmp(log.core, "M4") == 0 || strcmp(log.core, "M7") == 0) ? log.core : "Mx";
 8002a50:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 8002a54:	491e      	ldr	r1, [pc, #120]	@ (8002ad0 <log_create+0x90>)
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7fd fc42 	bl	80002e0 <strcmp>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d008      	beq.n	8002a74 <log_create+0x34>
 8002a62:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 8002a66:	491b      	ldr	r1, [pc, #108]	@ (8002ad4 <log_create+0x94>)
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7fd fc39 	bl	80002e0 <strcmp>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d102      	bne.n	8002a7a <log_create+0x3a>
 8002a74:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 8002a78:	e000      	b.n	8002a7c <log_create+0x3c>
 8002a7a:	4b17      	ldr	r3, [pc, #92]	@ (8002ad8 <log_create+0x98>)
 8002a7c:	607b      	str	r3, [r7, #4]

    snprintf(output, LOG_MSG_LEN + LOG_FUNC_LEN + 100,
 8002a7e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff ffa2 	bl	80029cc <log_level_to_string>
 8002a88:	4602      	mov	r2, r0
             "%s %s %s [%s] [%s] %s() line:%d \"%s\"_",
             log.date, log.time, log.actTime,
             log_level_to_string(log.level), core, log.function,
             log.line, log.message);
 8002a8a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
    snprintf(output, LOG_MSG_LEN + LOG_FUNC_LEN + 100,
 8002a8e:	4619      	mov	r1, r3
 8002a90:	f107 0366 	add.w	r3, r7, #102	@ 0x66
 8002a94:	9306      	str	r3, [sp, #24]
 8002a96:	9105      	str	r1, [sp, #20]
 8002a98:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002a9c:	9304      	str	r3, [sp, #16]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	9303      	str	r3, [sp, #12]
 8002aa2:	9202      	str	r2, [sp, #8]
 8002aa4:	f107 0325 	add.w	r3, r7, #37	@ 0x25
 8002aa8:	9301      	str	r3, [sp, #4]
 8002aaa:	f107 031c 	add.w	r3, r7, #28
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	f107 0310 	add.w	r3, r7, #16
 8002ab4:	4a09      	ldr	r2, [pc, #36]	@ (8002adc <log_create+0x9c>)
 8002ab6:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8002aba:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 8002abe:	f015 fc97 	bl	80183f0 <sniprintf>
}
 8002ac2:	bf00      	nop
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002acc:	b004      	add	sp, #16
 8002ace:	4770      	bx	lr
 8002ad0:	0801dec4 	.word	0x0801dec4
 8002ad4:	0801dec8 	.word	0x0801dec8
 8002ad8:	0801decc 	.word	0x0801decc
 8002adc:	0801ded0 	.word	0x0801ded0

08002ae0 <SCH_Initialize>:
  * @param  None
  * @retval None
  *****************************************************************************/

void SCH_Initialize(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  s_SystemTick = RESET;
 8002ae4:	4b0d      	ldr	r3, [pc, #52]	@ (8002b1c <SCH_Initialize+0x3c>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]
  s_NumOfTaskScheduled = RESET;
 8002aea:	4b0d      	ldr	r3, [pc, #52]	@ (8002b20 <SCH_Initialize+0x40>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	701a      	strb	r2, [r3, #0]
  s_NumOfTimers = RESET;
 8002af0:	4b0c      	ldr	r3, [pc, #48]	@ (8002b24 <SCH_Initialize+0x44>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	701a      	strb	r2, [r3, #0]

  // Initial Scheduler Context
  memset((uint8_t*)&s_TaskContext[0], RESET, (sizeof(SCH_TaskContextTypedef) * MAX_TASK));
 8002af6:	22f0      	movs	r2, #240	@ 0xf0
 8002af8:	2100      	movs	r1, #0
 8002afa:	480b      	ldr	r0, [pc, #44]	@ (8002b28 <SCH_Initialize+0x48>)
 8002afc:	f015 fde0 	bl	80186c0 <memset>
  memset((uint8_t*)&s_TimerContext[0], RESET, (sizeof(SCH_TimerContextTypedef) * MAX_TIMERS));
 8002b00:	22f0      	movs	r2, #240	@ 0xf0
 8002b02:	2100      	movs	r1, #0
 8002b04:	4809      	ldr	r0, [pc, #36]	@ (8002b2c <SCH_Initialize+0x4c>)
 8002b06:	f015 fddb 	bl	80186c0 <memset>
  memset((uint8_t*)&s_SoftTimers[0], RESET, (sizeof(uint32_t) * SCH_TIM_LAST));
 8002b0a:	2208      	movs	r2, #8
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	4808      	ldr	r0, [pc, #32]	@ (8002b30 <SCH_Initialize+0x50>)
 8002b10:	f015 fdd6 	bl	80186c0 <memset>

    // Initialize Scheduler context
  systick_timer_init();
 8002b14:	f000 f975 	bl	8002e02 <systick_timer_init>
}
 8002b18:	bf00      	nop
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	24001924 	.word	0x24001924
 8002b20:	2400182c 	.word	0x2400182c
 8002b24:	24001920 	.word	0x24001920
 8002b28:	2400173c 	.word	0x2400173c
 8002b2c:	24001830 	.word	0x24001830
 8002b30:	24001928 	.word	0x24001928

08002b34 <SCH_TIM_Start>:
  * @param  const SCH_SoftTimerTypedef timer - type of soft timer
  *         const uint32_t timeInMs - time in mSec
  * @retval None
  *****************************************************************************/
void SCH_TIM_Start(const SCH_SoftTimerTypedef timer, const uint32_t timeInMs)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	6039      	str	r1, [r7, #0]
 8002b3e:	71fb      	strb	r3, [r7, #7]
  if(timer < SCH_TIM_LAST)
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d804      	bhi.n	8002b50 <SCH_TIM_Start+0x1c>
  {
	//s_SoftTimers[timer] = timeInMs + s_SystemTick;
    s_SoftTimers[timer] = timeInMs;
 8002b46:	79fb      	ldrb	r3, [r7, #7]
 8002b48:	4904      	ldr	r1, [pc, #16]	@ (8002b5c <SCH_TIM_Start+0x28>)
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr
 8002b5c:	24001928 	.word	0x24001928

08002b60 <SCH_TIM_HasCompleted>:
  * @param  const SCH_SoftTimerTypedef timer - type of soft timer
  * @retval TRUE / FALSE
  *****************************************************************************/

uint16_t SCH_TIM_HasCompleted(const SCH_SoftTimerTypedef timer)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	71fb      	strb	r3, [r7, #7]
  return (s_SoftTimers[timer] == 0 ? 1:0 ) ;
 8002b6a:	79fb      	ldrb	r3, [r7, #7]
 8002b6c:	4a06      	ldr	r2, [pc, #24]	@ (8002b88 <SCH_TIM_HasCompleted+0x28>)
 8002b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	bf0c      	ite	eq
 8002b76:	2301      	moveq	r3, #1
 8002b78:	2300      	movne	r3, #0
 8002b7a:	b2db      	uxtb	r3, r3
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	24001928 	.word	0x24001928

08002b8c <SCH_TASK_CreateTask>:
  * @param  SCH_TASK_HANDLE* pHandle - pointer to task handle
  *         SCH_TaskPropertyTypedef* pTaskProperty - pointer to task property
  * @retval status
  *****************************************************************************/
t_Status SCH_TASK_CreateTask(SCH_TASK_HANDLE* pHandle, SCH_TaskPropertyTypedef* pTaskProperty)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  t_Status                      status = STS_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	73fb      	strb	r3, [r7, #15]

  // make sure that we have valid parameters
  if((pHandle) && (pTaskProperty))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d029      	beq.n	8002bf4 <SCH_TASK_CreateTask+0x68>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d026      	beq.n	8002bf4 <SCH_TASK_CreateTask+0x68>
  {
    // Check for number of task defined
    if(s_NumOfTaskScheduled < (MAX_TASK - 1))
 8002ba6:	4b17      	ldr	r3, [pc, #92]	@ (8002c04 <SCH_TASK_CreateTask+0x78>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b12      	cmp	r3, #18
 8002bac:	d822      	bhi.n	8002bf4 <SCH_TASK_CreateTask+0x68>
    {
      SCH_TaskContextTypedef* pTaskContext = &s_TaskContext[s_NumOfTaskScheduled];
 8002bae:	4b15      	ldr	r3, [pc, #84]	@ (8002c04 <SCH_TASK_CreateTask+0x78>)
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	4413      	add	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4a12      	ldr	r2, [pc, #72]	@ (8002c08 <SCH_TASK_CreateTask+0x7c>)
 8002bbe:	4413      	add	r3, r2
 8002bc0:	60bb      	str	r3, [r7, #8]
      // get task context
      // memcpy((uint8_t*)pTaskContext->pTaskProperty, (uint8_t*)pTaskProperty, sizeof(SCH_TaskPropertyTypedef));
      pTaskContext->pTaskProperty = pTaskProperty;
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	609a      	str	r2, [r3, #8]
      // Make sure we are initializing other members of task context
      pTaskContext->taskFlag = FALSE;
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	805a      	strh	r2, [r3, #2]
      pTaskContext->taskTick = pTaskProperty->taskTick;;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	605a      	str	r2, [r3, #4]
      // Put task in Ready State
      pTaskContext->taskState = TASK_StateReady;
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	701a      	strb	r2, [r3, #0]

      // Give Task Handle back to caller
      *pHandle = s_NumOfTaskScheduled;
 8002bdc:	4b09      	ldr	r3, [pc, #36]	@ (8002c04 <SCH_TASK_CreateTask+0x78>)
 8002bde:	781a      	ldrb	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	701a      	strb	r2, [r3, #0]

      s_NumOfTaskScheduled++;
 8002be4:	4b07      	ldr	r3, [pc, #28]	@ (8002c04 <SCH_TASK_CreateTask+0x78>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	3301      	adds	r3, #1
 8002bea:	b2da      	uxtb	r2, r3
 8002bec:	4b05      	ldr	r3, [pc, #20]	@ (8002c04 <SCH_TASK_CreateTask+0x78>)
 8002bee:	701a      	strb	r2, [r3, #0]
      // We were able to register task with schedular
      status = STS_DONE;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8002bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3714      	adds	r7, #20
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	2400182c 	.word	0x2400182c
 8002c08:	2400173c 	.word	0x2400173c

08002c0c <SCH_RunSystemTickTimer>:
  * @brief  Function handles system tick timer
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_RunSystemTickTimer(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
  uint8_t                       timerIndex;
  SCH_TimerContextTypedef*      pTimerContext;

  // Increment System Tick counter

  s_SystemTick++;
 8002c12:	4b42      	ldr	r3, [pc, #264]	@ (8002d1c <SCH_RunSystemTickTimer+0x110>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	3301      	adds	r3, #1
 8002c18:	4a40      	ldr	r2, [pc, #256]	@ (8002d1c <SCH_RunSystemTickTimer+0x110>)
 8002c1a:	6013      	str	r3, [r2, #0]
//  if(s_SystemTick > 100000){
//	  LL_GPIO_SetOutputPin(GPIOD, LL_GPIO_PIN_15);
//  }
  // Check Status of other Periodic Task
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	73fb      	strb	r3, [r7, #15]
 8002c20:	e025      	b.n	8002c6e <SCH_RunSystemTickTimer+0x62>
  {
    // Get Task Context
    pTaskContext = &s_TaskContext[taskIndex];
 8002c22:	7bfa      	ldrb	r2, [r7, #15]
 8002c24:	4613      	mov	r3, r2
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	4413      	add	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4a3c      	ldr	r2, [pc, #240]	@ (8002d20 <SCH_RunSystemTickTimer+0x114>)
 8002c2e:	4413      	add	r3, r2
 8002c30:	607b      	str	r3, [r7, #4]

    // Check type and State of the task
    if((SCH_TASK_SYNC == pTaskContext->pTaskProperty->taskType) && (TASK_StateReady == pTaskContext->taskState))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d115      	bne.n	8002c68 <SCH_RunSystemTickTimer+0x5c>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d111      	bne.n	8002c68 <SCH_RunSystemTickTimer+0x5c>
    {
      // Increment task tick
      pTaskContext->taskTick += 1;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	1c5a      	adds	r2, r3, #1
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	605a      	str	r2, [r3, #4]

      // Check if we reached task period
      if(pTaskContext->taskTick >= pTaskContext->pTaskProperty->taskPeriodInMS)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d305      	bcc.n	8002c68 <SCH_RunSystemTickTimer+0x5c>
      {
        // Yes
        // Reset Task tick timer
        pTaskContext->taskTick = RESET;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	605a      	str	r2, [r3, #4]
        // Enable Flag
        pTaskContext->taskFlag = TRUE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	805a      	strh	r2, [r3, #2]
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	73fb      	strb	r3, [r7, #15]
 8002c6e:	4b2d      	ldr	r3, [pc, #180]	@ (8002d24 <SCH_RunSystemTickTimer+0x118>)
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	7bfa      	ldrb	r2, [r7, #15]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d3d4      	bcc.n	8002c22 <SCH_RunSystemTickTimer+0x16>
      }
    }
  }

  // Check Status of other Periodic Task
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8002c78:	2300      	movs	r3, #0
 8002c7a:	73bb      	strb	r3, [r7, #14]
 8002c7c:	e02b      	b.n	8002cd6 <SCH_RunSystemTickTimer+0xca>
  {
    // Get Task Context
    pTimerContext = &s_TimerContext[timerIndex];
 8002c7e:	7bba      	ldrb	r2, [r7, #14]
 8002c80:	4613      	mov	r3, r2
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	4413      	add	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4a27      	ldr	r2, [pc, #156]	@ (8002d28 <SCH_RunSystemTickTimer+0x11c>)
 8002c8a:	4413      	add	r3, r2
 8002c8c:	60bb      	str	r3, [r7, #8]

    // Check type and State of the task
    if(TIM_StateRun == pTimerContext->timerState)
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d11c      	bne.n	8002cd0 <SCH_RunSystemTickTimer+0xc4>
    {
      // Increment task tick
      pTimerContext->timerTick += 1;
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	1c5a      	adds	r2, r3, #1
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	605a      	str	r2, [r3, #4]

      // Check if we reached task period
      if(pTimerContext->timerTick >= pTimerContext->pTimerProperty->timerPeriodInMS)
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d310      	bcc.n	8002cd0 <SCH_RunSystemTickTimer+0xc4>
      {
        // Yes
        // Enable Flag
        pTimerContext->timerFlag = TRUE;
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	805a      	strh	r2, [r3, #2]
        // Reset tick timer
        pTimerContext->timerTick = RESET;
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	605a      	str	r2, [r3, #4]
        // Check timer type and change the state
        pTimerContext->timerState = (SCH_TIMER_PERIODIC == pTimerContext->pTimerProperty->timerType)?TIM_StateRun:TIM_StateStop;
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	bf0c      	ite	eq
 8002cc4:	2301      	moveq	r3, #1
 8002cc6:	2300      	movne	r3, #0
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	461a      	mov	r2, r3
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	701a      	strb	r2, [r3, #0]
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8002cd0:	7bbb      	ldrb	r3, [r7, #14]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	73bb      	strb	r3, [r7, #14]
 8002cd6:	4b15      	ldr	r3, [pc, #84]	@ (8002d2c <SCH_RunSystemTickTimer+0x120>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	7bba      	ldrb	r2, [r7, #14]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d3ce      	bcc.n	8002c7e <SCH_RunSystemTickTimer+0x72>
      }
    }
  }
  // Update software timer
   for(timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	73bb      	strb	r3, [r7, #14]
 8002ce4:	e010      	b.n	8002d08 <SCH_RunSystemTickTimer+0xfc>
 	if (s_SoftTimers[timerIndex] > 0)	s_SoftTimers[timerIndex] --;
 8002ce6:	7bbb      	ldrb	r3, [r7, #14]
 8002ce8:	4a11      	ldr	r2, [pc, #68]	@ (8002d30 <SCH_RunSystemTickTimer+0x124>)
 8002cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d007      	beq.n	8002d02 <SCH_RunSystemTickTimer+0xf6>
 8002cf2:	7bbb      	ldrb	r3, [r7, #14]
 8002cf4:	4a0e      	ldr	r2, [pc, #56]	@ (8002d30 <SCH_RunSystemTickTimer+0x124>)
 8002cf6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002cfa:	3a01      	subs	r2, #1
 8002cfc:	490c      	ldr	r1, [pc, #48]	@ (8002d30 <SCH_RunSystemTickTimer+0x124>)
 8002cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   for(timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 8002d02:	7bbb      	ldrb	r3, [r7, #14]
 8002d04:	3301      	adds	r3, #1
 8002d06:	73bb      	strb	r3, [r7, #14]
 8002d08:	7bbb      	ldrb	r3, [r7, #14]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d9eb      	bls.n	8002ce6 <SCH_RunSystemTickTimer+0xda>
}
 8002d0e:	bf00      	nop
 8002d10:	bf00      	nop
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	24001924 	.word	0x24001924
 8002d20:	2400173c 	.word	0x2400173c
 8002d24:	2400182c 	.word	0x2400182c
 8002d28:	24001830 	.word	0x24001830
 8002d2c:	24001920 	.word	0x24001920
 8002d30:	24001928 	.word	0x24001928

08002d34 <SCH_StartSchedular>:
  * @brief  Start schedular
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_StartSchedular(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  // Start Schedular..i.e. start system tick timer
  SCH_START;
 8002d38:	f000 f85c 	bl	8002df4 <systick_timer_start>
}
 8002d3c:	bf00      	nop
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <SCH_HandleScheduledTask>:
  * @brief  Function handles scheduled task and timer events
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_HandleScheduledTask(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
  SCH_TaskContextTypedef*       pTaskContext;
  uint8_t                       timerIndex;
  SCH_TimerContextTypedef*      pTimerContext;

  // check for schedule flag
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8002d46:	2300      	movs	r3, #0
 8002d48:	73fb      	strb	r3, [r7, #15]
 8002d4a:	e01e      	b.n	8002d8a <SCH_HandleScheduledTask+0x4a>
  {
    // Get Task Context
    pTaskContext = &s_TaskContext[taskIndex];
 8002d4c:	7bfa      	ldrb	r2, [r7, #15]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	4413      	add	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4a23      	ldr	r2, [pc, #140]	@ (8002de4 <SCH_HandleScheduledTask+0xa4>)
 8002d58:	4413      	add	r3, r2
 8002d5a:	607b      	str	r3, [r7, #4]

    // Check type and State of the task
    if((TRUE == pTaskContext->taskFlag) && (TASK_StateReady == pTaskContext->taskState))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	885b      	ldrh	r3, [r3, #2]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d10f      	bne.n	8002d84 <SCH_HandleScheduledTask+0x44>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d10b      	bne.n	8002d84 <SCH_HandleScheduledTask+0x44>
    {
      pTaskContext->taskFlag = FALSE;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	805a      	strh	r2, [r3, #2]
      if(pTaskContext->pTaskProperty->taskFunction)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <SCH_HandleScheduledTask+0x44>
      {
        pTaskContext->pTaskProperty->taskFunction();
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	4798      	blx	r3
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8002d84:	7bfb      	ldrb	r3, [r7, #15]
 8002d86:	3301      	adds	r3, #1
 8002d88:	73fb      	strb	r3, [r7, #15]
 8002d8a:	4b17      	ldr	r3, [pc, #92]	@ (8002de8 <SCH_HandleScheduledTask+0xa8>)
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	7bfa      	ldrb	r2, [r7, #15]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d3db      	bcc.n	8002d4c <SCH_HandleScheduledTask+0xc>
      }
    }
  }

  // check for timer flag
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8002d94:	2300      	movs	r3, #0
 8002d96:	73bb      	strb	r3, [r7, #14]
 8002d98:	e01a      	b.n	8002dd0 <SCH_HandleScheduledTask+0x90>
  {
    // Get Timer Context
    pTimerContext = &s_TimerContext[timerIndex];
 8002d9a:	7bba      	ldrb	r2, [r7, #14]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	4413      	add	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4a11      	ldr	r2, [pc, #68]	@ (8002dec <SCH_HandleScheduledTask+0xac>)
 8002da6:	4413      	add	r3, r2
 8002da8:	60bb      	str	r3, [r7, #8]

    // Check timer flag
    if(TRUE == pTimerContext->timerFlag)
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	885b      	ldrh	r3, [r3, #2]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d10b      	bne.n	8002dca <SCH_HandleScheduledTask+0x8a>
    {
      pTimerContext->timerFlag = FALSE;
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	2200      	movs	r2, #0
 8002db6:	805a      	strh	r2, [r3, #2]
      if(pTimerContext->pTimerProperty->timerCallbackFunction)
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <SCH_HandleScheduledTask+0x8a>
      {
        pTimerContext->pTimerProperty->timerCallbackFunction();
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	4798      	blx	r3
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8002dca:	7bbb      	ldrb	r3, [r7, #14]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	73bb      	strb	r3, [r7, #14]
 8002dd0:	4b07      	ldr	r3, [pc, #28]	@ (8002df0 <SCH_HandleScheduledTask+0xb0>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	7bba      	ldrb	r2, [r7, #14]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d3df      	bcc.n	8002d9a <SCH_HandleScheduledTask+0x5a>
      }
    }
  }
}
 8002dda:	bf00      	nop
 8002ddc:	bf00      	nop
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	2400173c 	.word	0x2400173c
 8002de8:	2400182c 	.word	0x2400182c
 8002dec:	24001830 	.word	0x24001830
 8002df0:	24001920 	.word	0x24001920

08002df4 <systick_timer_start>:

#include "systick.h"
#include "stm32h7xx.h"

void systick_timer_start(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
    // Reset SysTick counter value
   // SysTick->VAL = 0;

    // Enable SysTick counter
//    SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
}
 8002df8:	bf00      	nop
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <systick_timer_init>:
    // Disable SysTick counter
   // SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
}

void systick_timer_init(void)
{
 8002e02:	b480      	push	{r7}
 8002e04:	af00      	add	r7, sp, #0
    // Set SysTick to trigger interrupt every 1ms
//    SysTick_Config(SystemCoreClock/1000);
}
 8002e06:	bf00      	nop
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <ringbuff_init>:
 * \param[in]       buffdata: Pointer to memory to use as buffer data
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
uint8_t ringbuff_init(RINGBUFF_VOLATILE ringbuff_t* buff, void* buffdata, size_t size) {
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
    if (buff == NULL || buffdata == NULL || size == 0) {
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d005      	beq.n	8002e2e <ringbuff_init+0x1e>
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d002      	beq.n	8002e2e <ringbuff_init+0x1e>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <ringbuff_init+0x22>
        return 0;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	e00b      	b.n	8002e4a <ringbuff_init+0x3a>
    }

    BUF_MEMSET((void *)buff, 0x00, sizeof(*buff));
 8002e32:	2214      	movs	r2, #20
 8002e34:	2100      	movs	r1, #0
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f015 fc42 	bl	80186c0 <memset>

    buff->size = size;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	605a      	str	r2, [r3, #4]
    buff->buff = buffdata;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	68ba      	ldr	r2, [r7, #8]
 8002e46:	601a      	str	r2, [r3, #0]
#if RINGBUFF_USE_MAGIC
    buff->magic1 = 0xDEADBEEF;
    buff->magic2 = ~0xDEADBEEF;
#endif /* RINGBUFF_USE_MAGIC */

    return 1;
 8002e48:	2301      	movs	r3, #1
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <ringbuff_write>:
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was no enough memory available
 *                      to copy full data array
 */
size_t
ringbuff_write(RINGBUFF_VOLATILE ringbuff_t* buff, const void* data, size_t btw) {
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b088      	sub	sp, #32
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	60f8      	str	r0, [r7, #12]
 8002e5a:	60b9      	str	r1, [r7, #8]
 8002e5c:	607a      	str	r2, [r7, #4]
    size_t tocopy, free;
    const uint8_t* d = data;
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00d      	beq.n	8002e84 <ringbuff_write+0x32>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d009      	beq.n	8002e84 <ringbuff_write+0x32>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d005      	beq.n	8002e84 <ringbuff_write+0x32>
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d002      	beq.n	8002e84 <ringbuff_write+0x32>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <ringbuff_write+0x36>
        return 0;
 8002e84:	2300      	movs	r3, #0
 8002e86:	e059      	b.n	8002f3c <ringbuff_write+0xea>
    }

    /* Calculate maximum number of bytes available to write */
    free = ringbuff_get_free(buff);
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f000 f85b 	bl	8002f44 <ringbuff_get_free>
 8002e8e:	61b8      	str	r0, [r7, #24]
    btw = BUF_MIN(free, btw);
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	4293      	cmp	r3, r2
 8002e96:	bf28      	it	cs
 8002e98:	4613      	movcs	r3, r2
 8002e9a:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <ringbuff_write+0x54>
        return 0;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	e04a      	b.n	8002f3c <ringbuff_write+0xea>
    }

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff->w, btw);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d905      	bls.n	8002ec2 <ringbuff_write+0x70>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	e000      	b.n	8002ec4 <ringbuff_write+0x72>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	4413      	add	r3, r2
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	69f9      	ldr	r1, [r7, #28]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f016 fa26 	bl	8019326 <memcpy>
    buff->w += tocopy;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	68da      	ldr	r2, [r3, #12]
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	441a      	add	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	60da      	str	r2, [r3, #12]
    btw -= tocopy;
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00b      	beq.n	8002f0c <ringbuff_write+0xba>
        BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6818      	ldr	r0, [r3, #0]
 8002ef8:	69fa      	ldr	r2, [r7, #28]
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	4413      	add	r3, r2
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	4619      	mov	r1, r3
 8002f02:	f016 fa10 	bl	8019326 <memcpy>
        buff->w = btw;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	60da      	str	r2, [r3, #12]
    }

    /* Step 3: Check end of buffer */
    if (buff->w >= buff->size) {
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	68da      	ldr	r2, [r3, #12]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d302      	bcc.n	8002f1e <ringbuff_write+0xcc>
        buff->w = 0;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	60da      	str	r2, [r3, #12]
    }
    BUF_SEND_EVT(buff, RINGBUFF_EVT_WRITE, tocopy + btw);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d007      	beq.n	8002f36 <ringbuff_write+0xe4>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	6979      	ldr	r1, [r7, #20]
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	440a      	add	r2, r1
 8002f30:	2101      	movs	r1, #1
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	4798      	blx	r3
    return tocopy + btw;
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4413      	add	r3, r2
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3720      	adds	r7, #32
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <ringbuff_get_free>:
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t
ringbuff_get_free(RINGBUFF_VOLATILE ringbuff_t* buff) {
 8002f44:	b480      	push	{r7}
 8002f46:	b087      	sub	sp, #28
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d007      	beq.n	8002f62 <ringbuff_get_free+0x1e>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <ringbuff_get_free+0x1e>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <ringbuff_get_free+0x22>
        return 0;
 8002f62:	2300      	movs	r3, #0
 8002f64:	e01f      	b.n	8002fa6 <ringbuff_get_free+0x62>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d103      	bne.n	8002f82 <ringbuff_get_free+0x3e>
        size = buff->size;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	617b      	str	r3, [r7, #20]
 8002f80:	e00f      	b.n	8002fa2 <ringbuff_get_free+0x5e>
    } else if (r > w) {
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d904      	bls.n	8002f94 <ringbuff_get_free+0x50>
        size = r - w;
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	617b      	str	r3, [r7, #20]
 8002f92:	e006      	b.n	8002fa2 <ringbuff_get_free+0x5e>
    } else {
        size = buff->size - (w - r);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685a      	ldr	r2, [r3, #4]
 8002f98:	68f9      	ldr	r1, [r7, #12]
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1acb      	subs	r3, r1, r3
 8002f9e:	4413      	add	r3, r2
 8002fa0:	617b      	str	r3, [r7, #20]
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	3b01      	subs	r3, #1
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	371c      	adds	r7, #28
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <ringbuff_get_full>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
ringbuff_get_full(RINGBUFF_VOLATILE ringbuff_t* buff) {
 8002fb2:	b480      	push	{r7}
 8002fb4:	b087      	sub	sp, #28
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
    size_t w, r, size;

    if (!BUF_IS_VALID(buff)) {
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d007      	beq.n	8002fd0 <ringbuff_get_full+0x1e>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d003      	beq.n	8002fd0 <ringbuff_get_full+0x1e>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <ringbuff_get_full+0x22>
        return 0;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	e01d      	b.n	8003010 <ringbuff_get_full+0x5e>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d102      	bne.n	8002fee <ringbuff_get_full+0x3c>
        size = 0;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	617b      	str	r3, [r7, #20]
 8002fec:	e00f      	b.n	800300e <ringbuff_get_full+0x5c>
    } else if (w > r) {
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d904      	bls.n	8003000 <ringbuff_get_full+0x4e>
        size = w - r;
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	617b      	str	r3, [r7, #20]
 8002ffe:	e006      	b.n	800300e <ringbuff_get_full+0x5c>
    } else {
        size = buff->size - (r - w);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	6939      	ldr	r1, [r7, #16]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	1acb      	subs	r3, r1, r3
 800300a:	4413      	add	r3, r2
 800300c:	617b      	str	r3, [r7, #20]
    }
    return size;
 800300e:	697b      	ldr	r3, [r7, #20]
}
 8003010:	4618      	mov	r0, r3
 8003012:	371c      	adds	r7, #28
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <ringbuff_get_linear_block_read_address>:
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
void *
ringbuff_get_linear_block_read_address(RINGBUFF_VOLATILE ringbuff_t* buff) {
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID(buff)) {
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d007      	beq.n	800303a <ringbuff_get_linear_block_read_address+0x1e>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <ringbuff_get_linear_block_read_address+0x1e>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <ringbuff_get_linear_block_read_address+0x22>
        return NULL;
 800303a:	2300      	movs	r3, #0
 800303c:	e004      	b.n	8003048 <ringbuff_get_linear_block_read_address+0x2c>
    }
    return &buff->buff[buff->r];
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	4413      	add	r3, r2
}
 8003048:	4618      	mov	r0, r3
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <ringbuff_get_linear_block_read_length>:
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer size in units of bytes for read operation
 */
size_t
ringbuff_get_linear_block_read_length(RINGBUFF_VOLATILE ringbuff_t* buff) {
 8003054:	b480      	push	{r7}
 8003056:	b087      	sub	sp, #28
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
    size_t w, r, len;

    if (!BUF_IS_VALID(buff)) {
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d007      	beq.n	8003072 <ringbuff_get_linear_block_read_length+0x1e>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <ringbuff_get_linear_block_read_length+0x1e>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <ringbuff_get_linear_block_read_length+0x22>
        return 0;
 8003072:	2300      	movs	r3, #0
 8003074:	e01b      	b.n	80030ae <ringbuff_get_linear_block_read_length+0x5a>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	613b      	str	r3, [r7, #16]
    r = buff->r;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	60fb      	str	r3, [r7, #12]
    if (w > r) {
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	429a      	cmp	r2, r3
 8003088:	d904      	bls.n	8003094 <ringbuff_get_linear_block_read_length+0x40>
        len = w - r;
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	617b      	str	r3, [r7, #20]
 8003092:	e00b      	b.n	80030ac <ringbuff_get_linear_block_read_length+0x58>
    } else if (r > w) {
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	429a      	cmp	r2, r3
 800309a:	d905      	bls.n	80030a8 <ringbuff_get_linear_block_read_length+0x54>
        len = buff->size - r;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	617b      	str	r3, [r7, #20]
 80030a6:	e001      	b.n	80030ac <ringbuff_get_linear_block_read_length+0x58>
    } else {
        len = 0;
 80030a8:	2300      	movs	r3, #0
 80030aa:	617b      	str	r3, [r7, #20]
    }
    return len;
 80030ac:	697b      	ldr	r3, [r7, #20]
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	371c      	adds	r7, #28
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <ringbuff_skip>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t
ringbuff_skip(RINGBUFF_VOLATILE ringbuff_t* buff, size_t len) {
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b084      	sub	sp, #16
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
 80030c2:	6039      	str	r1, [r7, #0]
    size_t full;

    if (!BUF_IS_VALID(buff) || len == 0) {
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00a      	beq.n	80030e0 <ringbuff_skip+0x26>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d006      	beq.n	80030e0 <ringbuff_skip+0x26>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d002      	beq.n	80030e0 <ringbuff_skip+0x26>
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <ringbuff_skip+0x2a>
        return 0;
 80030e0:	2300      	movs	r3, #0
 80030e2:	e027      	b.n	8003134 <ringbuff_skip+0x7a>
    }

    full = ringbuff_get_full(buff);             /* Get buffer used length */
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f7ff ff64 	bl	8002fb2 <ringbuff_get_full>
 80030ea:	60f8      	str	r0, [r7, #12]
    len = BUF_MIN(len, full);                   /* Calculate max skip */
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	4293      	cmp	r3, r2
 80030f2:	bf28      	it	cs
 80030f4:	4613      	movcs	r3, r2
 80030f6:	603b      	str	r3, [r7, #0]
    buff->r += len;                             /* Advance read pointer */
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	441a      	add	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	609a      	str	r2, [r3, #8]
    if (buff->r >= buff->size) {                /* Subtract possible overflow */
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	429a      	cmp	r2, r3
 800310e:	d306      	bcc.n	800311e <ringbuff_skip+0x64>
        buff->r -= buff->size;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	6892      	ldr	r2, [r2, #8]
 8003118:	1ad2      	subs	r2, r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	609a      	str	r2, [r3, #8]
    }
    BUF_SEND_EVT(buff, RINGBUFF_EVT_READ, len);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d005      	beq.n	8003132 <ringbuff_skip+0x78>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	683a      	ldr	r2, [r7, #0]
 800312c:	2100      	movs	r1, #0
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	4798      	blx	r3
    return len;
 8003132:	683b      	ldr	r3, [r7, #0]
}
 8003134:	4618      	mov	r0, r3
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <fifo_is_full>:
    .head = 0,
    .tail = 0,
    .size = CDC_BUFFER_SIZE
};

int fifo_is_full(struct fifo *f) {
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
    return ((f->head + 1) % f->size) == f->tail;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	889b      	ldrh	r3, [r3, #4]
 8003148:	3301      	adds	r3, #1
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	8912      	ldrh	r2, [r2, #8]
 800314e:	fb93 f1f2 	sdiv	r1, r3, r2
 8003152:	fb01 f202 	mul.w	r2, r1, r2
 8003156:	1a9b      	subs	r3, r3, r2
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	88d2      	ldrh	r2, [r2, #6]
 800315c:	4293      	cmp	r3, r2
 800315e:	bf0c      	ite	eq
 8003160:	2301      	moveq	r3, #1
 8003162:	2300      	movne	r3, #0
 8003164:	b2db      	uxtb	r3, r3
}
 8003166:	4618      	mov	r0, r3
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <fifo_is_empty>:

int fifo_is_empty(struct fifo *f) {
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
    return f->head == f->tail;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	889a      	ldrh	r2, [r3, #4]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	88db      	ldrh	r3, [r3, #6]
 8003182:	429a      	cmp	r2, r3
 8003184:	bf0c      	ite	eq
 8003186:	2301      	moveq	r3, #1
 8003188:	2300      	movne	r3, #0
 800318a:	b2db      	uxtb	r3, r3
}
 800318c:	4618      	mov	r0, r3
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <fifo_push>:

void fifo_push(struct fifo *f, uint8_t data) {
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	460b      	mov	r3, r1
 80031a2:	70fb      	strb	r3, [r7, #3]
    if (!fifo_is_full(f)) {
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f7ff ffc9 	bl	800313c <fifo_is_full>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d114      	bne.n	80031da <fifo_push+0x42>
        f->buffer[f->head] = data;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	8892      	ldrh	r2, [r2, #4]
 80031b8:	4413      	add	r3, r2
 80031ba:	78fa      	ldrb	r2, [r7, #3]
 80031bc:	701a      	strb	r2, [r3, #0]
        f->head = (f->head + 1) % f->size;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	889b      	ldrh	r3, [r3, #4]
 80031c2:	3301      	adds	r3, #1
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	8912      	ldrh	r2, [r2, #8]
 80031c8:	fb93 f1f2 	sdiv	r1, r3, r2
 80031cc:	fb01 f202 	mul.w	r2, r1, r2
 80031d0:	1a9b      	subs	r3, r3, r2
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	809a      	strh	r2, [r3, #4]
    } else {
        printf("FIFO full, data lost\r\n");
    }
}
 80031d8:	e002      	b.n	80031e0 <fifo_push+0x48>
        printf("FIFO full, data lost\r\n");
 80031da:	4803      	ldr	r0, [pc, #12]	@ (80031e8 <fifo_push+0x50>)
 80031dc:	f015 f900 	bl	80183e0 <puts>
}
 80031e0:	bf00      	nop
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	0801def8 	.word	0x0801def8

080031ec <fifo_pop>:

int fifo_pop(struct fifo *f) {
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
    if (!fifo_is_empty(f)) {
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f7ff ffbc 	bl	8003172 <fifo_is_empty>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d115      	bne.n	800322c <fifo_pop+0x40>
        uint8_t data = f->buffer[f->tail];
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	88d2      	ldrh	r2, [r2, #6]
 8003208:	4413      	add	r3, r2
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	73fb      	strb	r3, [r7, #15]
        f->tail = (f->tail + 1) % f->size;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	88db      	ldrh	r3, [r3, #6]
 8003212:	3301      	adds	r3, #1
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	8912      	ldrh	r2, [r2, #8]
 8003218:	fb93 f1f2 	sdiv	r1, r3, r2
 800321c:	fb01 f202 	mul.w	r2, r1, r2
 8003220:	1a9b      	subs	r3, r3, r2
 8003222:	b29a      	uxth	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	80da      	strh	r2, [r3, #6]
        return data;
 8003228:	7bfb      	ldrb	r3, [r7, #15]
 800322a:	e004      	b.n	8003236 <fifo_pop+0x4a>
    } else {
        printf("FIFO empty\r\n");
 800322c:	4804      	ldr	r0, [pc, #16]	@ (8003240 <fifo_pop+0x54>)
 800322e:	f015 f8d7 	bl	80183e0 <puts>
        return -1;
 8003232:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	0801df10 	.word	0x0801df10

08003244 <BSP_MMC_Init>:
  * @brief  Initializes the MMC card device.
  * @param  Instance      SDMMC Instance
  * @retval BSP status
  */
int32_t BSP_MMC_Init(MMC_HandleTypeDef *hmmc)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800324c:	2300      	movs	r3, #0
 800324e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_MMC_REGISTER_CALLBACKS == 0)
    /* Msp MMC initialization */

    MMC_MspInit(hmmc);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 f8b7 	bl	80033c4 <MMC_MspInit>
    if(ret == BSP_ERROR_NONE)
    {
#endif
      /* HAL MMC initialization */

      if(MX_MMC_SD_Init(hmmc) != HAL_OK)
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f80b 	bl	8003272 <MX_MMC_SD_Init>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d002      	beq.n	8003268 <BSP_MMC_Init+0x24>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8003262:	f06f 0303 	mvn.w	r3, #3
 8003266:	60fb      	str	r3, [r7, #12]
      }
    }
#endif /* USE_HAL_MMC_REGISTER_CALLBACKS */


  return  ret;
 8003268:	68fb      	ldr	r3, [r7, #12]
}
 800326a:	4618      	mov	r0, r3
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <MX_MMC_SD_Init>:
  * @brief  Initializes the SDMMC1 peripheral.
  * @param  hmmc SD handle
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_MMC_SD_Init(MMC_HandleTypeDef *hmmc)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b084      	sub	sp, #16
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800327a:	2300      	movs	r3, #0
 800327c:	73fb      	strb	r3, [r7, #15]
//  hmmc->Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
//  hmmc->Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
//  hmmc->Init.BusWide             = SDMMC_BUS_WIDE_4B;

  /* HAL SD initialization */
  if(HAL_MMC_Init(hmmc) != HAL_OK)
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f003 f8da 	bl	8006438 <HAL_MMC_Init>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <MX_MMC_SD_Init+0x1c>
  {
    ret = HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800328e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003290:	4618      	mov	r0, r3
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <BSP_MMC_ReadBlocks>:
  * @param  BlockIdx   Block index from where data is to be read
  * @param  BlocksNbr  Number of MMC blocks to read
  * @retval BSP status
  */
int32_t BSP_MMC_ReadBlocks(MMC_HandleTypeDef *hmmc, uint32_t *pData, uint32_t BlockIdx, uint32_t BlocksNbr)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b088      	sub	sp, #32
 800329c:	af02      	add	r7, sp, #8
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
 80032a4:	603b      	str	r3, [r7, #0]
  uint32_t timeout = MMC_READ_TIMEOUT*BlocksNbr;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2264      	movs	r2, #100	@ 0x64
 80032aa:	fb02 f303 	mul.w	r3, r2, r3
 80032ae:	613b      	str	r3, [r7, #16]
  int32_t ret;

  if(HAL_MMC_ReadBlocks(hmmc, (uint8_t *)pData, BlockIdx, BlocksNbr, timeout) != HAL_OK)
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	68b9      	ldr	r1, [r7, #8]
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f003 f998 	bl	80065f0 <HAL_MMC_ReadBlocks>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <BSP_MMC_ReadBlocks+0x36>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 80032c6:	f06f 0303 	mvn.w	r3, #3
 80032ca:	617b      	str	r3, [r7, #20]
 80032cc:	e001      	b.n	80032d2 <BSP_MMC_ReadBlocks+0x3a>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80032ce:	2300      	movs	r3, #0
 80032d0:	617b      	str	r3, [r7, #20]
  }
  /* Return BSP status */
  return ret;
 80032d2:	697b      	ldr	r3, [r7, #20]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <BSP_MMC_WriteBlocks>:
  * @param  BlockIdx   Block index from where data is to be written
  * @param  BlocksNbr  Number of MMC blocks to write
  * @retval BSP status
  */
int32_t BSP_MMC_WriteBlocks(MMC_HandleTypeDef *hmmc, uint32_t *pData, uint32_t BlockIdx, uint32_t BlocksNbr)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b088      	sub	sp, #32
 80032e0:	af02      	add	r7, sp, #8
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
 80032e8:	603b      	str	r3, [r7, #0]
  uint32_t timeout = MMC_READ_TIMEOUT*BlocksNbr;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2264      	movs	r2, #100	@ 0x64
 80032ee:	fb02 f303 	mul.w	r3, r2, r3
 80032f2:	613b      	str	r3, [r7, #16]
  int32_t ret;

  if(HAL_MMC_WriteBlocks(hmmc, (uint8_t *)pData, BlockIdx, BlocksNbr, timeout) != HAL_OK)
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	9300      	str	r3, [sp, #0]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	68b9      	ldr	r1, [r7, #8]
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f003 fb0a 	bl	8006918 <HAL_MMC_WriteBlocks>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <BSP_MMC_WriteBlocks+0x36>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 800330a:	f06f 0303 	mvn.w	r3, #3
 800330e:	617b      	str	r3, [r7, #20]
 8003310:	e001      	b.n	8003316 <BSP_MMC_WriteBlocks+0x3a>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8003312:	2300      	movs	r3, #0
 8003314:	617b      	str	r3, [r7, #20]
  }
  /* Return BSP status */
  return ret;
 8003316:	697b      	ldr	r3, [r7, #20]
}
 8003318:	4618      	mov	r0, r3
 800331a:	3718      	adds	r7, #24
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <BSP_MMC_GetCardState>:
  *            @arg  MMC_TRANSFER_OK: No data transfer is acting
  *            @arg  MMC_TRANSFER_BUSY: Data transfer is acting
  *            @arg  MMC_TRANSFER_ERROR: Data transfer error
  */
int32_t BSP_MMC_GetCardState(MMC_HandleTypeDef *hmmc)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  return((HAL_MMC_GetCardState(hmmc) == HAL_MMC_CARD_TRANSFER ) ? MMC_TRANSFER_OK : MMC_TRANSFER_BUSY);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f004 f9db 	bl	80076e4 <HAL_MMC_GetCardState>
 800332e:	4603      	mov	r3, r0
 8003330:	2b04      	cmp	r3, #4
 8003332:	bf14      	ite	ne
 8003334:	2301      	movne	r3, #1
 8003336:	2300      	moveq	r3, #0
 8003338:	b2db      	uxtb	r3, r3
}
 800333a:	4618      	mov	r0, r3
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <BSP_MMC_GetCardInfo>:
  * @param  Instance   MMC Instance
  * @param  CardInfo : Pointer to HAL_MMC_CardInfoTypedef structure
  * @retval None
  */
int32_t BSP_MMC_GetCardInfo(MMC_HandleTypeDef *hmmc, BSP_MMC_CardInfo *CardInfo)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b084      	sub	sp, #16
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
 800334a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if(HAL_MMC_GetCardInfo(hmmc, CardInfo) != HAL_OK)
 800334c:	6839      	ldr	r1, [r7, #0]
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f003 ffd8 	bl	8007304 <HAL_MMC_GetCardInfo>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <BSP_MMC_GetCardInfo+0x20>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 800335a:	f06f 0303 	mvn.w	r3, #3
 800335e:	60fb      	str	r3, [r7, #12]
 8003360:	e001      	b.n	8003366 <BSP_MMC_GetCardInfo+0x24>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8003362:	2300      	movs	r3, #0
 8003364:	60fb      	str	r3, [r7, #12]
  }
  /* Return BSP status */
  return ret;
 8003366:	68fb      	ldr	r3, [r7, #12]
}
 8003368:	4618      	mov	r0, r3
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <BSP_MMC_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callbacks
  * @param  Instance   MMC Instance
  * @retval None
  */
__weak void BSP_MMC_WriteCpltCallback(MMC_HandleTypeDef *hmmc)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hmmc);
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <BSP_MMC_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callbacks
  * @param  Instance   MMC Instance
  * @retval None
  */
__weak void BSP_MMC_ReadCpltCallback(MMC_HandleTypeDef *hmmc)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hmmc);
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <HAL_MMC_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hmmc: MMC handle
  * @retval None
  */
void HAL_MMC_TxCpltCallback(MMC_HandleTypeDef *hmmc)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  BSP_MMC_WriteCpltCallback(hmmc);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f7ff ffe5 	bl	8003370 <BSP_MMC_WriteCpltCallback>
}
 80033a6:	bf00      	nop
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <HAL_MMC_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hmmc: MMC handle
  * @retval None
  */
void HAL_MMC_RxCpltCallback(MMC_HandleTypeDef *hmmc)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b082      	sub	sp, #8
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  BSP_MMC_ReadCpltCallback(hmmc);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7ff ffe4 	bl	8003384 <BSP_MMC_ReadCpltCallback>
}
 80033bc:	bf00      	nop
 80033be:	3708      	adds	r7, #8
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <MMC_MspInit>:
  * @brief  Initializes the MMC MSP.
  * @param  hmmc  MMC handle
  * @retval None
  */
static void MMC_MspInit(MMC_HandleTypeDef *hmmc)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hmmc);

  /* __weak function can be modified by the application */
  HAL_MMC_MspInit(hmmc);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f001 fc8b 	bl	8004ce8 <HAL_MMC_MspInit>
}
 80033d2:	bf00      	nop
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
	...

080033dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80033e0:	4b3d      	ldr	r3, [pc, #244]	@ (80034d8 <SystemInit+0xfc>)
 80033e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033e6:	4a3c      	ldr	r2, [pc, #240]	@ (80034d8 <SystemInit+0xfc>)
 80033e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80033ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80033f0:	4b39      	ldr	r3, [pc, #228]	@ (80034d8 <SystemInit+0xfc>)
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	4a38      	ldr	r2, [pc, #224]	@ (80034d8 <SystemInit+0xfc>)
 80033f6:	f043 0310 	orr.w	r3, r3, #16
 80033fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80033fc:	4b37      	ldr	r3, [pc, #220]	@ (80034dc <SystemInit+0x100>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 030f 	and.w	r3, r3, #15
 8003404:	2b06      	cmp	r3, #6
 8003406:	d807      	bhi.n	8003418 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003408:	4b34      	ldr	r3, [pc, #208]	@ (80034dc <SystemInit+0x100>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f023 030f 	bic.w	r3, r3, #15
 8003410:	4a32      	ldr	r2, [pc, #200]	@ (80034dc <SystemInit+0x100>)
 8003412:	f043 0307 	orr.w	r3, r3, #7
 8003416:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003418:	4b31      	ldr	r3, [pc, #196]	@ (80034e0 <SystemInit+0x104>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a30      	ldr	r2, [pc, #192]	@ (80034e0 <SystemInit+0x104>)
 800341e:	f043 0301 	orr.w	r3, r3, #1
 8003422:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003424:	4b2e      	ldr	r3, [pc, #184]	@ (80034e0 <SystemInit+0x104>)
 8003426:	2200      	movs	r2, #0
 8003428:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800342a:	4b2d      	ldr	r3, [pc, #180]	@ (80034e0 <SystemInit+0x104>)
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	492c      	ldr	r1, [pc, #176]	@ (80034e0 <SystemInit+0x104>)
 8003430:	4b2c      	ldr	r3, [pc, #176]	@ (80034e4 <SystemInit+0x108>)
 8003432:	4013      	ands	r3, r2
 8003434:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003436:	4b29      	ldr	r3, [pc, #164]	@ (80034dc <SystemInit+0x100>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0308 	and.w	r3, r3, #8
 800343e:	2b00      	cmp	r3, #0
 8003440:	d007      	beq.n	8003452 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003442:	4b26      	ldr	r3, [pc, #152]	@ (80034dc <SystemInit+0x100>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f023 030f 	bic.w	r3, r3, #15
 800344a:	4a24      	ldr	r2, [pc, #144]	@ (80034dc <SystemInit+0x100>)
 800344c:	f043 0307 	orr.w	r3, r3, #7
 8003450:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003452:	4b23      	ldr	r3, [pc, #140]	@ (80034e0 <SystemInit+0x104>)
 8003454:	2200      	movs	r2, #0
 8003456:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003458:	4b21      	ldr	r3, [pc, #132]	@ (80034e0 <SystemInit+0x104>)
 800345a:	2200      	movs	r2, #0
 800345c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800345e:	4b20      	ldr	r3, [pc, #128]	@ (80034e0 <SystemInit+0x104>)
 8003460:	2200      	movs	r2, #0
 8003462:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003464:	4b1e      	ldr	r3, [pc, #120]	@ (80034e0 <SystemInit+0x104>)
 8003466:	4a20      	ldr	r2, [pc, #128]	@ (80034e8 <SystemInit+0x10c>)
 8003468:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800346a:	4b1d      	ldr	r3, [pc, #116]	@ (80034e0 <SystemInit+0x104>)
 800346c:	4a1f      	ldr	r2, [pc, #124]	@ (80034ec <SystemInit+0x110>)
 800346e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003470:	4b1b      	ldr	r3, [pc, #108]	@ (80034e0 <SystemInit+0x104>)
 8003472:	4a1f      	ldr	r2, [pc, #124]	@ (80034f0 <SystemInit+0x114>)
 8003474:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003476:	4b1a      	ldr	r3, [pc, #104]	@ (80034e0 <SystemInit+0x104>)
 8003478:	2200      	movs	r2, #0
 800347a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800347c:	4b18      	ldr	r3, [pc, #96]	@ (80034e0 <SystemInit+0x104>)
 800347e:	4a1c      	ldr	r2, [pc, #112]	@ (80034f0 <SystemInit+0x114>)
 8003480:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003482:	4b17      	ldr	r3, [pc, #92]	@ (80034e0 <SystemInit+0x104>)
 8003484:	2200      	movs	r2, #0
 8003486:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003488:	4b15      	ldr	r3, [pc, #84]	@ (80034e0 <SystemInit+0x104>)
 800348a:	4a19      	ldr	r2, [pc, #100]	@ (80034f0 <SystemInit+0x114>)
 800348c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800348e:	4b14      	ldr	r3, [pc, #80]	@ (80034e0 <SystemInit+0x104>)
 8003490:	2200      	movs	r2, #0
 8003492:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003494:	4b12      	ldr	r3, [pc, #72]	@ (80034e0 <SystemInit+0x104>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a11      	ldr	r2, [pc, #68]	@ (80034e0 <SystemInit+0x104>)
 800349a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800349e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80034a0:	4b0f      	ldr	r3, [pc, #60]	@ (80034e0 <SystemInit+0x104>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80034a6:	4b13      	ldr	r3, [pc, #76]	@ (80034f4 <SystemInit+0x118>)
 80034a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034aa:	4a12      	ldr	r2, [pc, #72]	@ (80034f4 <SystemInit+0x118>)
 80034ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034b0:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80034b2:	4b11      	ldr	r3, [pc, #68]	@ (80034f8 <SystemInit+0x11c>)
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	4b11      	ldr	r3, [pc, #68]	@ (80034fc <SystemInit+0x120>)
 80034b8:	4013      	ands	r3, r2
 80034ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034be:	d202      	bcs.n	80034c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80034c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003500 <SystemInit+0x124>)
 80034c2:	2201      	movs	r2, #1
 80034c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80034c6:	4b0f      	ldr	r3, [pc, #60]	@ (8003504 <SystemInit+0x128>)
 80034c8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80034cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80034ce:	bf00      	nop
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	e000ed00 	.word	0xe000ed00
 80034dc:	52002000 	.word	0x52002000
 80034e0:	58024400 	.word	0x58024400
 80034e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80034e8:	02020200 	.word	0x02020200
 80034ec:	01ff0000 	.word	0x01ff0000
 80034f0:	01010280 	.word	0x01010280
 80034f4:	580000c0 	.word	0x580000c0
 80034f8:	5c001000 	.word	0x5c001000
 80034fc:	ffff0000 	.word	0xffff0000
 8003500:	51008108 	.word	0x51008108
 8003504:	52004000 	.word	0x52004000

08003508 <LL_GPIO_SetOutputPin>:
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	619a      	str	r2, [r3, #24]
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <LL_GPIO_ResetOutputPin>:
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	041a      	lsls	r2, r3, #16
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	619a      	str	r2, [r3, #24]
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
	...

08003544 <prv_assert_cs>:
volatile uint32_t pubEpoch = 0;

static uint32_t prv_make_unix_time(void);
static rtc_date_time_t prv_make_date_time_from_epoch(uint32_t epoch);

static inline void prv_assert_cs(void) {
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(CS_RTC_GPIO_Port, CS_RTC_Pin);
 8003548:	2110      	movs	r1, #16
 800354a:	4802      	ldr	r0, [pc, #8]	@ (8003554 <prv_assert_cs+0x10>)
 800354c:	f7ff ffdc 	bl	8003508 <LL_GPIO_SetOutputPin>
}
 8003550:	bf00      	nop
 8003552:	bd80      	pop	{r7, pc}
 8003554:	58021000 	.word	0x58021000

08003558 <prv_deassert_cs>:

static inline void prv_deassert_cs(void) {
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(CS_RTC_GPIO_Port, CS_RTC_Pin);
 800355c:	2110      	movs	r1, #16
 800355e:	4802      	ldr	r0, [pc, #8]	@ (8003568 <prv_deassert_cs+0x10>)
 8003560:	f7ff ffe0 	bl	8003524 <LL_GPIO_ResetOutputPin>
}
 8003564:	bf00      	nop
 8003566:	bd80      	pop	{r7, pc}
 8003568:	58021000 	.word	0x58021000

0800356c <init_rtc>:

void init_rtc(void) {
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
//    //Enable 1 Hz Clkout
//    uint8_t clkout[2];
//    clkout[0] = COMMAND_WRITE(CONTROL_EEPROM);
//    clkout[1] = CONTROL_EEPROM_FD1 | CONTROL_EEPROM_FD0;
//
    pubRtcDateTime.second = 7;
 8003570:	4b0d      	ldr	r3, [pc, #52]	@ (80035a8 <init_rtc+0x3c>)
 8003572:	2207      	movs	r2, #7
 8003574:	719a      	strb	r2, [r3, #6]
    pubRtcDateTime.minute = 7;
 8003576:	4b0c      	ldr	r3, [pc, #48]	@ (80035a8 <init_rtc+0x3c>)
 8003578:	2207      	movs	r2, #7
 800357a:	715a      	strb	r2, [r3, #5]
    pubRtcDateTime.hour   = 7;
 800357c:	4b0a      	ldr	r3, [pc, #40]	@ (80035a8 <init_rtc+0x3c>)
 800357e:	2207      	movs	r2, #7
 8003580:	711a      	strb	r2, [r3, #4]
    pubRtcDateTime.day    = 7;
 8003582:	4b09      	ldr	r3, [pc, #36]	@ (80035a8 <init_rtc+0x3c>)
 8003584:	2207      	movs	r2, #7
 8003586:	701a      	strb	r2, [r3, #0]
    pubRtcDateTime.month  = 7;
 8003588:	4b07      	ldr	r3, [pc, #28]	@ (80035a8 <init_rtc+0x3c>)
 800358a:	2207      	movs	r2, #7
 800358c:	705a      	strb	r2, [r3, #1]
    pubRtcDateTime.year   = 77 + 2000;
 800358e:	4b06      	ldr	r3, [pc, #24]	@ (80035a8 <init_rtc+0x3c>)
 8003590:	f640 021d 	movw	r2, #2077	@ 0x81d
 8003594:	805a      	strh	r2, [r3, #2]

//    prv_assert_cs();
//    SPI_LL_TransmitArray(init, sizeof(init));
//    prv_deassert_cs();

    rtc_sync_ll();
 8003596:	f000 f80b 	bl	80035b0 <rtc_sync_ll>
    pubEpoch = prv_make_unix_time();
 800359a:	f000 f9e9 	bl	8003970 <prv_make_unix_time>
 800359e:	4603      	mov	r3, r0
 80035a0:	4a02      	ldr	r2, [pc, #8]	@ (80035ac <init_rtc+0x40>)
 80035a2:	6013      	str	r3, [r2, #0]
    // After this, start task, 10ms/1tick
}
 80035a4:	bf00      	nop
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	24001b30 	.word	0x24001b30
 80035ac:	24001b38 	.word	0x24001b38

080035b0 <rtc_sync_ll>:


bool rtc_sync_ll(void) {
 80035b0:	b590      	push	{r4, r7, lr}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
    uint8_t time[10];
    memset(time, 0xFF, sizeof(time));
 80035b6:	1d3b      	adds	r3, r7, #4
 80035b8:	220a      	movs	r2, #10
 80035ba:	21ff      	movs	r1, #255	@ 0xff
 80035bc:	4618      	mov	r0, r3
 80035be:	f015 f87f 	bl	80186c0 <memset>
    time[0] = COMMAND_READ(CLOCK_SECONDS);
 80035c2:	2388      	movs	r3, #136	@ 0x88
 80035c4:	713b      	strb	r3, [r7, #4]

    prv_assert_cs();
 80035c6:	f7ff ffbd 	bl	8003544 <prv_assert_cs>
    for (uint8_t i = 0; i < sizeof(time); i++) {
 80035ca:	2300      	movs	r3, #0
 80035cc:	73fb      	strb	r3, [r7, #15]
 80035ce:	e013      	b.n	80035f8 <rtc_sync_ll+0x48>
        time[i] = SPI_LL_Transmit(RTC_SPI, time[i]);
 80035d0:	7bfb      	ldrb	r3, [r7, #15]
 80035d2:	3310      	adds	r3, #16
 80035d4:	443b      	add	r3, r7
 80035d6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80035da:	7bfc      	ldrb	r4, [r7, #15]
 80035dc:	4619      	mov	r1, r3
 80035de:	4849      	ldr	r0, [pc, #292]	@ (8003704 <rtc_sync_ll+0x154>)
 80035e0:	f000 fb0a 	bl	8003bf8 <SPI_LL_Transmit>
 80035e4:	4603      	mov	r3, r0
 80035e6:	461a      	mov	r2, r3
 80035e8:	f104 0310 	add.w	r3, r4, #16
 80035ec:	443b      	add	r3, r7
 80035ee:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < sizeof(time); i++) {
 80035f2:	7bfb      	ldrb	r3, [r7, #15]
 80035f4:	3301      	adds	r3, #1
 80035f6:	73fb      	strb	r3, [r7, #15]
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
 80035fa:	2b09      	cmp	r3, #9
 80035fc:	d9e8      	bls.n	80035d0 <rtc_sync_ll+0x20>
    }
    prv_deassert_cs();
 80035fe:	f7ff ffab 	bl	8003558 <prv_deassert_cs>

   if (time[3] != 0xFF) {
 8003602:	79fb      	ldrb	r3, [r7, #7]
 8003604:	2bff      	cmp	r3, #255	@ 0xff
 8003606:	d078      	beq.n	80036fa <rtc_sync_ll+0x14a>
			pubRtcDateTime.second   = SECTODEC(time[3]);
 8003608:	79fb      	ldrb	r3, [r7, #7]
 800360a:	111b      	asrs	r3, r3, #4
 800360c:	b2db      	uxtb	r3, r3
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	b2db      	uxtb	r3, r3
 8003614:	461a      	mov	r2, r3
 8003616:	0092      	lsls	r2, r2, #2
 8003618:	4413      	add	r3, r2
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	b2da      	uxtb	r2, r3
 800361e:	79fb      	ldrb	r3, [r7, #7]
 8003620:	f003 030f 	and.w	r3, r3, #15
 8003624:	b2db      	uxtb	r3, r3
 8003626:	4413      	add	r3, r2
 8003628:	b2da      	uxtb	r2, r3
 800362a:	4b37      	ldr	r3, [pc, #220]	@ (8003708 <rtc_sync_ll+0x158>)
 800362c:	719a      	strb	r2, [r3, #6]
			pubRtcDateTime.minute    = MINTODEC(time[4]);
 800362e:	7a3b      	ldrb	r3, [r7, #8]
 8003630:	111b      	asrs	r3, r3, #4
 8003632:	b2db      	uxtb	r3, r3
 8003634:	f003 0307 	and.w	r3, r3, #7
 8003638:	b2db      	uxtb	r3, r3
 800363a:	461a      	mov	r2, r3
 800363c:	0092      	lsls	r2, r2, #2
 800363e:	4413      	add	r3, r2
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	b2da      	uxtb	r2, r3
 8003644:	7a3b      	ldrb	r3, [r7, #8]
 8003646:	f003 030f 	and.w	r3, r3, #15
 800364a:	b2db      	uxtb	r3, r3
 800364c:	4413      	add	r3, r2
 800364e:	b2da      	uxtb	r2, r3
 8003650:	4b2d      	ldr	r3, [pc, #180]	@ (8003708 <rtc_sync_ll+0x158>)
 8003652:	715a      	strb	r2, [r3, #5]
			pubRtcDateTime.hour = HOURTODEC(time[5]);
 8003654:	7a7b      	ldrb	r3, [r7, #9]
 8003656:	111b      	asrs	r3, r3, #4
 8003658:	b2db      	uxtb	r3, r3
 800365a:	f003 0303 	and.w	r3, r3, #3
 800365e:	b2db      	uxtb	r3, r3
 8003660:	461a      	mov	r2, r3
 8003662:	0092      	lsls	r2, r2, #2
 8003664:	4413      	add	r3, r2
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	b2da      	uxtb	r2, r3
 800366a:	7a7b      	ldrb	r3, [r7, #9]
 800366c:	f003 030f 	and.w	r3, r3, #15
 8003670:	b2db      	uxtb	r3, r3
 8003672:	4413      	add	r3, r2
 8003674:	b2da      	uxtb	r2, r3
 8003676:	4b24      	ldr	r3, [pc, #144]	@ (8003708 <rtc_sync_ll+0x158>)
 8003678:	711a      	strb	r2, [r3, #4]
			pubRtcDateTime.day = DAYTODEC(time[6]);
 800367a:	7abb      	ldrb	r3, [r7, #10]
 800367c:	111b      	asrs	r3, r3, #4
 800367e:	b2db      	uxtb	r3, r3
 8003680:	f003 0303 	and.w	r3, r3, #3
 8003684:	b2db      	uxtb	r3, r3
 8003686:	461a      	mov	r2, r3
 8003688:	0092      	lsls	r2, r2, #2
 800368a:	4413      	add	r3, r2
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	b2da      	uxtb	r2, r3
 8003690:	7abb      	ldrb	r3, [r7, #10]
 8003692:	f003 030f 	and.w	r3, r3, #15
 8003696:	b2db      	uxtb	r3, r3
 8003698:	4413      	add	r3, r2
 800369a:	b2da      	uxtb	r2, r3
 800369c:	4b1a      	ldr	r3, [pc, #104]	@ (8003708 <rtc_sync_ll+0x158>)
 800369e:	701a      	strb	r2, [r3, #0]
			pubRtcDateTime.month  = MONTODEC(time[8]);
 80036a0:	7b3b      	ldrb	r3, [r7, #12]
 80036a2:	111b      	asrs	r3, r3, #4
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	461a      	mov	r2, r3
 80036ae:	0092      	lsls	r2, r2, #2
 80036b0:	4413      	add	r3, r2
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	7b3b      	ldrb	r3, [r7, #12]
 80036b8:	f003 030f 	and.w	r3, r3, #15
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	4413      	add	r3, r2
 80036c0:	b2da      	uxtb	r2, r3
 80036c2:	4b11      	ldr	r3, [pc, #68]	@ (8003708 <rtc_sync_ll+0x158>)
 80036c4:	705a      	strb	r2, [r3, #1]
			pubRtcDateTime.year   = YEARTODEC(time[9]) + 2000;
 80036c6:	7b7b      	ldrb	r3, [r7, #13]
 80036c8:	091b      	lsrs	r3, r3, #4
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	461a      	mov	r2, r3
 80036ce:	0092      	lsls	r2, r2, #2
 80036d0:	4413      	add	r3, r2
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	7b7b      	ldrb	r3, [r7, #13]
 80036d8:	f003 030f 	and.w	r3, r3, #15
 80036dc:	b29b      	uxth	r3, r3
 80036de:	4413      	add	r3, r2
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	4b07      	ldr	r3, [pc, #28]	@ (8003708 <rtc_sync_ll+0x158>)
 80036ea:	805a      	strh	r2, [r3, #2]

        pubEpoch = prv_make_unix_time();
 80036ec:	f000 f940 	bl	8003970 <prv_make_unix_time>
 80036f0:	4603      	mov	r3, r0
 80036f2:	4a06      	ldr	r2, [pc, #24]	@ (800370c <rtc_sync_ll+0x15c>)
 80036f4:	6013      	str	r3, [r2, #0]
        return true;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e000      	b.n	80036fc <rtc_sync_ll+0x14c>
    } else {
    	//Should change to default value
//        printf("RTC sync failed: Invalid response from RTC\r\n");
        return false;
 80036fa:	2300      	movs	r3, #0
    }
   return true;
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3714      	adds	r7, #20
 8003700:	46bd      	mov	sp, r7
 8003702:	bd90      	pop	{r4, r7, pc}
 8003704:	40013400 	.word	0x40013400
 8003708:	24001b30 	.word	0x24001b30
 800370c:	24001b38 	.word	0x24001b38

08003710 <rtc_get_date_time>:


rtc_date_time_t rtc_get_date_time(void) {
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
    return pubRtcDateTime;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4906      	ldr	r1, [pc, #24]	@ (8003734 <rtc_get_date_time+0x24>)
 800371c:	461a      	mov	r2, r3
 800371e:	460b      	mov	r3, r1
 8003720:	cb03      	ldmia	r3!, {r0, r1}
 8003722:	6010      	str	r0, [r2, #0]
 8003724:	6051      	str	r1, [r2, #4]
}
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	24001b30 	.word	0x24001b30

08003738 <rtc_set_date_time>:

uint32_t rtc_get_unix_time(void) {
    return pubEpoch;
}

bool rtc_set_date_time(rtc_date_time_t *dateTime) {
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
    uint8_t buffer[9];
    int8_t ret = -1;
 8003740:	23ff      	movs	r3, #255	@ 0xff
 8003742:	757b      	strb	r3, [r7, #21]
    buffer[0] = COMMAND_WRITE(CLOCK_SECONDS);
 8003744:	2308      	movs	r3, #8
 8003746:	733b      	strb	r3, [r7, #12]
    buffer[1] = DECTOSEC(dateTime->second);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	799b      	ldrb	r3, [r3, #6]
 800374c:	4a83      	ldr	r2, [pc, #524]	@ (800395c <rtc_set_date_time+0x224>)
 800374e:	fba2 2303 	umull	r2, r3, r2, r3
 8003752:	08db      	lsrs	r3, r3, #3
 8003754:	b2db      	uxtb	r3, r3
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	b25b      	sxtb	r3, r3
 800375a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800375e:	b258      	sxtb	r0, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	799a      	ldrb	r2, [r3, #6]
 8003764:	4b7d      	ldr	r3, [pc, #500]	@ (800395c <rtc_set_date_time+0x224>)
 8003766:	fba3 1302 	umull	r1, r3, r3, r2
 800376a:	08d9      	lsrs	r1, r3, #3
 800376c:	460b      	mov	r3, r1
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	440b      	add	r3, r1
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	b2db      	uxtb	r3, r3
 8003778:	b25b      	sxtb	r3, r3
 800377a:	f003 030f 	and.w	r3, r3, #15
 800377e:	b25b      	sxtb	r3, r3
 8003780:	4303      	orrs	r3, r0
 8003782:	b25b      	sxtb	r3, r3
 8003784:	b2db      	uxtb	r3, r3
 8003786:	737b      	strb	r3, [r7, #13]
    buffer[2] = DECTOMIN(dateTime->minute);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	795b      	ldrb	r3, [r3, #5]
 800378c:	4a73      	ldr	r2, [pc, #460]	@ (800395c <rtc_set_date_time+0x224>)
 800378e:	fba2 2303 	umull	r2, r3, r2, r3
 8003792:	08db      	lsrs	r3, r3, #3
 8003794:	b2db      	uxtb	r3, r3
 8003796:	011b      	lsls	r3, r3, #4
 8003798:	b25b      	sxtb	r3, r3
 800379a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800379e:	b258      	sxtb	r0, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	795a      	ldrb	r2, [r3, #5]
 80037a4:	4b6d      	ldr	r3, [pc, #436]	@ (800395c <rtc_set_date_time+0x224>)
 80037a6:	fba3 1302 	umull	r1, r3, r3, r2
 80037aa:	08d9      	lsrs	r1, r3, #3
 80037ac:	460b      	mov	r3, r1
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	440b      	add	r3, r1
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	b25b      	sxtb	r3, r3
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	b25b      	sxtb	r3, r3
 80037c0:	4303      	orrs	r3, r0
 80037c2:	b25b      	sxtb	r3, r3
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	73bb      	strb	r3, [r7, #14]
    buffer[3] = DECTOHOUR(dateTime->hour);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	791b      	ldrb	r3, [r3, #4]
 80037cc:	4a63      	ldr	r2, [pc, #396]	@ (800395c <rtc_set_date_time+0x224>)
 80037ce:	fba2 2303 	umull	r2, r3, r2, r3
 80037d2:	08db      	lsrs	r3, r3, #3
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	011b      	lsls	r3, r3, #4
 80037d8:	b25b      	sxtb	r3, r3
 80037da:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80037de:	b258      	sxtb	r0, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	791a      	ldrb	r2, [r3, #4]
 80037e4:	4b5d      	ldr	r3, [pc, #372]	@ (800395c <rtc_set_date_time+0x224>)
 80037e6:	fba3 1302 	umull	r1, r3, r3, r2
 80037ea:	08d9      	lsrs	r1, r3, #3
 80037ec:	460b      	mov	r3, r1
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	440b      	add	r3, r1
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	b25b      	sxtb	r3, r3
 80037fa:	f003 030f 	and.w	r3, r3, #15
 80037fe:	b25b      	sxtb	r3, r3
 8003800:	4303      	orrs	r3, r0
 8003802:	b25b      	sxtb	r3, r3
 8003804:	b2db      	uxtb	r3, r3
 8003806:	73fb      	strb	r3, [r7, #15]
    buffer[4] = DECTODAY(dateTime->day);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	4a53      	ldr	r2, [pc, #332]	@ (800395c <rtc_set_date_time+0x224>)
 800380e:	fba2 2303 	umull	r2, r3, r2, r3
 8003812:	08db      	lsrs	r3, r3, #3
 8003814:	b2db      	uxtb	r3, r3
 8003816:	011b      	lsls	r3, r3, #4
 8003818:	b25b      	sxtb	r3, r3
 800381a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800381e:	b258      	sxtb	r0, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	781a      	ldrb	r2, [r3, #0]
 8003824:	4b4d      	ldr	r3, [pc, #308]	@ (800395c <rtc_set_date_time+0x224>)
 8003826:	fba3 1302 	umull	r1, r3, r3, r2
 800382a:	08d9      	lsrs	r1, r3, #3
 800382c:	460b      	mov	r3, r1
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	440b      	add	r3, r1
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	b2db      	uxtb	r3, r3
 8003838:	b25b      	sxtb	r3, r3
 800383a:	f003 030f 	and.w	r3, r3, #15
 800383e:	b25b      	sxtb	r3, r3
 8003840:	4303      	orrs	r3, r0
 8003842:	b25b      	sxtb	r3, r3
 8003844:	b2db      	uxtb	r3, r3
 8003846:	743b      	strb	r3, [r7, #16]
    buffer[5] = 1; //Weekday
 8003848:	2301      	movs	r3, #1
 800384a:	747b      	strb	r3, [r7, #17]
    buffer[6] = DECTOMON(dateTime->month);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	785b      	ldrb	r3, [r3, #1]
 8003850:	4a42      	ldr	r2, [pc, #264]	@ (800395c <rtc_set_date_time+0x224>)
 8003852:	fba2 2303 	umull	r2, r3, r2, r3
 8003856:	08db      	lsrs	r3, r3, #3
 8003858:	b2db      	uxtb	r3, r3
 800385a:	011b      	lsls	r3, r3, #4
 800385c:	b25b      	sxtb	r3, r3
 800385e:	f003 0310 	and.w	r3, r3, #16
 8003862:	b258      	sxtb	r0, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	785a      	ldrb	r2, [r3, #1]
 8003868:	4b3c      	ldr	r3, [pc, #240]	@ (800395c <rtc_set_date_time+0x224>)
 800386a:	fba3 1302 	umull	r1, r3, r3, r2
 800386e:	08d9      	lsrs	r1, r3, #3
 8003870:	460b      	mov	r3, r1
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	440b      	add	r3, r1
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	b2db      	uxtb	r3, r3
 800387c:	b25b      	sxtb	r3, r3
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	b25b      	sxtb	r3, r3
 8003884:	4303      	orrs	r3, r0
 8003886:	b25b      	sxtb	r3, r3
 8003888:	b2db      	uxtb	r3, r3
 800388a:	74bb      	strb	r3, [r7, #18]
    buffer[7] = DECTOYEAR((dateTime->year - 2000));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	885b      	ldrh	r3, [r3, #2]
 8003890:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8003894:	4a32      	ldr	r2, [pc, #200]	@ (8003960 <rtc_set_date_time+0x228>)
 8003896:	fb82 1203 	smull	r1, r2, r2, r3
 800389a:	1092      	asrs	r2, r2, #2
 800389c:	17db      	asrs	r3, r3, #31
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	011b      	lsls	r3, r3, #4
 80038a2:	b258      	sxtb	r0, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	885b      	ldrh	r3, [r3, #2]
 80038a8:	f5a3 62fa 	sub.w	r2, r3, #2000	@ 0x7d0
 80038ac:	4b2c      	ldr	r3, [pc, #176]	@ (8003960 <rtc_set_date_time+0x228>)
 80038ae:	fb83 1302 	smull	r1, r3, r3, r2
 80038b2:	1099      	asrs	r1, r3, #2
 80038b4:	17d3      	asrs	r3, r2, #31
 80038b6:	1ac9      	subs	r1, r1, r3
 80038b8:	460b      	mov	r3, r1
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	1ad1      	subs	r1, r2, r3
 80038c2:	b24b      	sxtb	r3, r1
 80038c4:	f003 030f 	and.w	r3, r3, #15
 80038c8:	b25b      	sxtb	r3, r3
 80038ca:	4303      	orrs	r3, r0
 80038cc:	b25b      	sxtb	r3, r3
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	74fb      	strb	r3, [r7, #19]
    buffer[8] = 0;
 80038d2:	2300      	movs	r3, #0
 80038d4:	753b      	strb	r3, [r7, #20]

    prv_assert_cs();
 80038d6:	f7ff fe35 	bl	8003544 <prv_assert_cs>
    for (uint16_t i = 0; i < sizeof(buffer); i++) {
 80038da:	2300      	movs	r3, #0
 80038dc:	82fb      	strh	r3, [r7, #22]
 80038de:	e015      	b.n	800390c <rtc_set_date_time+0x1d4>
        ret = SPI_LL_Write(RTC_SPI, buffer[i]);
 80038e0:	8afb      	ldrh	r3, [r7, #22]
 80038e2:	3318      	adds	r3, #24
 80038e4:	443b      	add	r3, r7
 80038e6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80038ea:	4619      	mov	r1, r3
 80038ec:	481d      	ldr	r0, [pc, #116]	@ (8003964 <rtc_set_date_time+0x22c>)
 80038ee:	f000 f9c7 	bl	8003c80 <SPI_LL_Write>
 80038f2:	4603      	mov	r3, r0
 80038f4:	757b      	strb	r3, [r7, #21]
        if(ret != 0){
 80038f6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d003      	beq.n	8003906 <rtc_set_date_time+0x1ce>
            prv_deassert_cs();
 80038fe:	f7ff fe2b 	bl	8003558 <prv_deassert_cs>
        	return false;
 8003902:	2300      	movs	r3, #0
 8003904:	e025      	b.n	8003952 <rtc_set_date_time+0x21a>
    for (uint16_t i = 0; i < sizeof(buffer); i++) {
 8003906:	8afb      	ldrh	r3, [r7, #22]
 8003908:	3301      	adds	r3, #1
 800390a:	82fb      	strh	r3, [r7, #22]
 800390c:	8afb      	ldrh	r3, [r7, #22]
 800390e:	2b08      	cmp	r3, #8
 8003910:	d9e6      	bls.n	80038e0 <rtc_set_date_time+0x1a8>
        }
    }
    prv_deassert_cs();
 8003912:	f7ff fe21 	bl	8003558 <prv_deassert_cs>

    pubRtcDateTime.second = dateTime->second;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	799a      	ldrb	r2, [r3, #6]
 800391a:	4b13      	ldr	r3, [pc, #76]	@ (8003968 <rtc_set_date_time+0x230>)
 800391c:	719a      	strb	r2, [r3, #6]
    pubRtcDateTime.minute = dateTime->minute;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	795a      	ldrb	r2, [r3, #5]
 8003922:	4b11      	ldr	r3, [pc, #68]	@ (8003968 <rtc_set_date_time+0x230>)
 8003924:	715a      	strb	r2, [r3, #5]
    pubRtcDateTime.hour   = dateTime->hour;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	791a      	ldrb	r2, [r3, #4]
 800392a:	4b0f      	ldr	r3, [pc, #60]	@ (8003968 <rtc_set_date_time+0x230>)
 800392c:	711a      	strb	r2, [r3, #4]
    pubRtcDateTime.day    = dateTime->day;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	781a      	ldrb	r2, [r3, #0]
 8003932:	4b0d      	ldr	r3, [pc, #52]	@ (8003968 <rtc_set_date_time+0x230>)
 8003934:	701a      	strb	r2, [r3, #0]
    pubRtcDateTime.month  = dateTime->month;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	785a      	ldrb	r2, [r3, #1]
 800393a:	4b0b      	ldr	r3, [pc, #44]	@ (8003968 <rtc_set_date_time+0x230>)
 800393c:	705a      	strb	r2, [r3, #1]
    pubRtcDateTime.year   = dateTime->year;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	885a      	ldrh	r2, [r3, #2]
 8003942:	4b09      	ldr	r3, [pc, #36]	@ (8003968 <rtc_set_date_time+0x230>)
 8003944:	805a      	strh	r2, [r3, #2]
    pubEpoch = prv_make_unix_time();
 8003946:	f000 f813 	bl	8003970 <prv_make_unix_time>
 800394a:	4603      	mov	r3, r0
 800394c:	4a07      	ldr	r2, [pc, #28]	@ (800396c <rtc_set_date_time+0x234>)
 800394e:	6013      	str	r3, [r2, #0]
    return true;
 8003950:	2301      	movs	r3, #1
}
 8003952:	4618      	mov	r0, r3
 8003954:	3718      	adds	r7, #24
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	cccccccd 	.word	0xcccccccd
 8003960:	66666667 	.word	0x66666667
 8003964:	40013400 	.word	0x40013400
 8003968:	24001b30 	.word	0x24001b30
 800396c:	24001b38 	.word	0x24001b38

08003970 <prv_make_unix_time>:
    snprintf(timestamp, sizeof(timestamp), "%04u-%02u-%02u_%02u-%02u-%02u\n\r", pubRtcDateTime.year,
            pubRtcDateTime.month, pubRtcDateTime.day, pubRtcDateTime.hour, pubRtcDateTime.minute, pubRtcDateTime.second);
    return timestamp;
}

static uint32_t prv_make_unix_time(void) {
 8003970:	b5b0      	push	{r4, r5, r7, lr}
 8003972:	b08c      	sub	sp, #48	@ 0x30
 8003974:	af00      	add	r7, sp, #0
    struct tm t;
    time_t epoch;

    t.tm_year = pubRtcDateTime.year-1900;
 8003976:	4b18      	ldr	r3, [pc, #96]	@ (80039d8 <prv_make_unix_time+0x68>)
 8003978:	885b      	ldrh	r3, [r3, #2]
 800397a:	b29b      	uxth	r3, r3
 800397c:	f2a3 736c 	subw	r3, r3, #1900	@ 0x76c
 8003980:	61bb      	str	r3, [r7, #24]
    t.tm_mon = pubRtcDateTime.month - 1;
 8003982:	4b15      	ldr	r3, [pc, #84]	@ (80039d8 <prv_make_unix_time+0x68>)
 8003984:	785b      	ldrb	r3, [r3, #1]
 8003986:	b2db      	uxtb	r3, r3
 8003988:	3b01      	subs	r3, #1
 800398a:	617b      	str	r3, [r7, #20]
    t.tm_mday = pubRtcDateTime.day;
 800398c:	4b12      	ldr	r3, [pc, #72]	@ (80039d8 <prv_make_unix_time+0x68>)
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	b2db      	uxtb	r3, r3
 8003992:	613b      	str	r3, [r7, #16]
    t.tm_hour = pubRtcDateTime.hour;
 8003994:	4b10      	ldr	r3, [pc, #64]	@ (80039d8 <prv_make_unix_time+0x68>)
 8003996:	791b      	ldrb	r3, [r3, #4]
 8003998:	b2db      	uxtb	r3, r3
 800399a:	60fb      	str	r3, [r7, #12]
    t.tm_min = pubRtcDateTime.minute;
 800399c:	4b0e      	ldr	r3, [pc, #56]	@ (80039d8 <prv_make_unix_time+0x68>)
 800399e:	795b      	ldrb	r3, [r3, #5]
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	60bb      	str	r3, [r7, #8]
    t.tm_sec = pubRtcDateTime.second;
 80039a4:	4b0c      	ldr	r3, [pc, #48]	@ (80039d8 <prv_make_unix_time+0x68>)
 80039a6:	799b      	ldrb	r3, [r3, #6]
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	607b      	str	r3, [r7, #4]
    t.tm_isdst = -1; //TODO DST flag should be stored in EEPROM
 80039ac:	f04f 33ff 	mov.w	r3, #4294967295
 80039b0:	627b      	str	r3, [r7, #36]	@ 0x24
    epoch = mktime(&t);
 80039b2:	1d3b      	adds	r3, r7, #4
 80039b4:	4618      	mov	r0, r3
 80039b6:	f014 ffa7 	bl	8018908 <mktime>
 80039ba:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
    epoch -= TIMEZONE_GMT_PLUS_7;
 80039be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80039c2:	4906      	ldr	r1, [pc, #24]	@ (80039dc <prv_make_unix_time+0x6c>)
 80039c4:	1854      	adds	r4, r2, r1
 80039c6:	f143 35ff 	adc.w	r5, r3, #4294967295
 80039ca:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
    return (uint32_t) epoch;
 80039ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3730      	adds	r7, #48	@ 0x30
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bdb0      	pop	{r4, r5, r7, pc}
 80039d8:	24001b30 	.word	0x24001b30
 80039dc:	ffff9d90 	.word	0xffff9d90

080039e0 <rtc_sync_time>:
    dateTime.minute = t.tm_min;
    dateTime.second = t.tm_sec;
    return dateTime;
}

bool rtc_sync_time(void) {
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
    return rtc_sync_ll();
 80039e4:	f7ff fde4 	bl	80035b0 <rtc_sync_ll>
 80039e8:	4603      	mov	r3, r0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	bd80      	pop	{r7, pc}
	...

080039f0 <rtc_get_hard_time>:

bool rtc_get_hard_time(rtc_date_time_t *hardTime) {
 80039f0:	b590      	push	{r4, r7, lr}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
    uint8_t time[10];
    memset(time, 0xFF, sizeof(time));
 80039f8:	f107 030c 	add.w	r3, r7, #12
 80039fc:	220a      	movs	r2, #10
 80039fe:	21ff      	movs	r1, #255	@ 0xff
 8003a00:	4618      	mov	r0, r3
 8003a02:	f014 fe5d 	bl	80186c0 <memset>
    time[0] = COMMAND_READ(CLOCK_SECONDS);
 8003a06:	2388      	movs	r3, #136	@ 0x88
 8003a08:	733b      	strb	r3, [r7, #12]

    prv_assert_cs();
 8003a0a:	f7ff fd9b 	bl	8003544 <prv_assert_cs>
    for (uint8_t i = 0; i < sizeof(time); i++) {
 8003a0e:	2300      	movs	r3, #0
 8003a10:	75fb      	strb	r3, [r7, #23]
 8003a12:	e013      	b.n	8003a3c <rtc_get_hard_time+0x4c>
        time[i] = SPI_LL_Transmit(RTC_SPI, time[i]);
 8003a14:	7dfb      	ldrb	r3, [r7, #23]
 8003a16:	3318      	adds	r3, #24
 8003a18:	443b      	add	r3, r7
 8003a1a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003a1e:	7dfc      	ldrb	r4, [r7, #23]
 8003a20:	4619      	mov	r1, r3
 8003a22:	4847      	ldr	r0, [pc, #284]	@ (8003b40 <rtc_get_hard_time+0x150>)
 8003a24:	f000 f8e8 	bl	8003bf8 <SPI_LL_Transmit>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	f104 0318 	add.w	r3, r4, #24
 8003a30:	443b      	add	r3, r7
 8003a32:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < sizeof(time); i++) {
 8003a36:	7dfb      	ldrb	r3, [r7, #23]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	75fb      	strb	r3, [r7, #23]
 8003a3c:	7dfb      	ldrb	r3, [r7, #23]
 8003a3e:	2b09      	cmp	r3, #9
 8003a40:	d9e8      	bls.n	8003a14 <rtc_get_hard_time+0x24>
    }
    prv_deassert_cs();
 8003a42:	f7ff fd89 	bl	8003558 <prv_deassert_cs>

    if (time[3] != 0xFF) {
 8003a46:	7bfb      	ldrb	r3, [r7, #15]
 8003a48:	2bff      	cmp	r3, #255	@ 0xff
 8003a4a:	d073      	beq.n	8003b34 <rtc_get_hard_time+0x144>
        hardTime->second = SECTODEC(time[3]);
 8003a4c:	7bfb      	ldrb	r3, [r7, #15]
 8003a4e:	111b      	asrs	r3, r3, #4
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	f003 0307 	and.w	r3, r3, #7
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	461a      	mov	r2, r3
 8003a5a:	0092      	lsls	r2, r2, #2
 8003a5c:	4413      	add	r3, r2
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	b2da      	uxtb	r2, r3
 8003a62:	7bfb      	ldrb	r3, [r7, #15]
 8003a64:	f003 030f 	and.w	r3, r3, #15
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	4413      	add	r3, r2
 8003a6c:	b2da      	uxtb	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	719a      	strb	r2, [r3, #6]
        hardTime->minute = MINTODEC(time[4]);
 8003a72:	7c3b      	ldrb	r3, [r7, #16]
 8003a74:	111b      	asrs	r3, r3, #4
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	f003 0307 	and.w	r3, r3, #7
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	461a      	mov	r2, r3
 8003a80:	0092      	lsls	r2, r2, #2
 8003a82:	4413      	add	r3, r2
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	b2da      	uxtb	r2, r3
 8003a88:	7c3b      	ldrb	r3, [r7, #16]
 8003a8a:	f003 030f 	and.w	r3, r3, #15
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	4413      	add	r3, r2
 8003a92:	b2da      	uxtb	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	715a      	strb	r2, [r3, #5]
        hardTime->hour = HOURTODEC(time[5]);
 8003a98:	7c7b      	ldrb	r3, [r7, #17]
 8003a9a:	111b      	asrs	r3, r3, #4
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	f003 0303 	and.w	r3, r3, #3
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	0092      	lsls	r2, r2, #2
 8003aa8:	4413      	add	r3, r2
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	b2da      	uxtb	r2, r3
 8003aae:	7c7b      	ldrb	r3, [r7, #17]
 8003ab0:	f003 030f 	and.w	r3, r3, #15
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	4413      	add	r3, r2
 8003ab8:	b2da      	uxtb	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	711a      	strb	r2, [r3, #4]
        hardTime->day = DAYTODEC(time[6]);
 8003abe:	7cbb      	ldrb	r3, [r7, #18]
 8003ac0:	111b      	asrs	r3, r3, #4
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	f003 0303 	and.w	r3, r3, #3
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	461a      	mov	r2, r3
 8003acc:	0092      	lsls	r2, r2, #2
 8003ace:	4413      	add	r3, r2
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	b2da      	uxtb	r2, r3
 8003ad4:	7cbb      	ldrb	r3, [r7, #18]
 8003ad6:	f003 030f 	and.w	r3, r3, #15
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	4413      	add	r3, r2
 8003ade:	b2da      	uxtb	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	701a      	strb	r2, [r3, #0]
        hardTime->month = MONTODEC(time[8]);
 8003ae4:	7d3b      	ldrb	r3, [r7, #20]
 8003ae6:	111b      	asrs	r3, r3, #4
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	461a      	mov	r2, r3
 8003af2:	0092      	lsls	r2, r2, #2
 8003af4:	4413      	add	r3, r2
 8003af6:	005b      	lsls	r3, r3, #1
 8003af8:	b2da      	uxtb	r2, r3
 8003afa:	7d3b      	ldrb	r3, [r7, #20]
 8003afc:	f003 030f 	and.w	r3, r3, #15
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	4413      	add	r3, r2
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	705a      	strb	r2, [r3, #1]
        hardTime->year = YEARTODEC(time[9]) + 2000;
 8003b0a:	7d7b      	ldrb	r3, [r7, #21]
 8003b0c:	091b      	lsrs	r3, r3, #4
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	461a      	mov	r2, r3
 8003b12:	0092      	lsls	r2, r2, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	005b      	lsls	r3, r3, #1
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	7d7b      	ldrb	r3, [r7, #21]
 8003b1c:	f003 030f 	and.w	r3, r3, #15
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	4413      	add	r3, r2
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	805a      	strh	r2, [r3, #2]
        return true;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e000      	b.n	8003b36 <rtc_get_hard_time+0x146>
    }
    return false;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	371c      	adds	r7, #28
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd90      	pop	{r4, r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	40013400 	.word	0x40013400

08003b44 <rtc_get_soft_time>:

void rtc_get_soft_time(rtc_date_time_t *softTime) {
 8003b44:	b590      	push	{r4, r7, lr}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
    *softTime = rtc_get_date_time();
 8003b4c:	68fc      	ldr	r4, [r7, #12]
 8003b4e:	463b      	mov	r3, r7
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7ff fddd 	bl	8003710 <rtc_get_date_time>
 8003b56:	4622      	mov	r2, r4
 8003b58:	463b      	mov	r3, r7
 8003b5a:	6819      	ldr	r1, [r3, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	6011      	str	r1, [r2, #0]
 8003b60:	6053      	str	r3, [r2, #4]
}
 8003b62:	bf00      	nop
 8003b64:	3714      	adds	r7, #20
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd90      	pop	{r4, r7, pc}

08003b6a <LL_SPI_IsActiveFlag_TXC>:
  * @rmtoll SR           TXC           LL_SPI_IsActiveFlag_TXC
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXC(const SPI_TypeDef *SPIx)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b083      	sub	sp, #12
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXC) == (SPI_SR_TXC)) ? 1UL : 0UL);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b7e:	d101      	bne.n	8003b84 <LL_SPI_IsActiveFlag_TXC+0x1a>
 8003b80:	2301      	movs	r3, #1
 8003b82:	e000      	b.n	8003b86 <LL_SPI_IsActiveFlag_TXC+0x1c>
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <LL_SPI_IsActiveFlag_RXWNE>:
  * @rmtoll SR           RXWNE         LL_SPI_IsActiveFlag_RXWNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0)
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXWNE(const SPI_TypeDef *SPIx)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXWNE) == (SPI_SR_RXWNE)) ? 1UL : 0UL);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ba2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ba6:	d101      	bne.n	8003bac <LL_SPI_IsActiveFlag_RXWNE+0x1a>
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e000      	b.n	8003bae <LL_SPI_IsActiveFlag_RXWNE+0x1c>
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <LL_SPI_ReceiveData8>:
  * @rmtoll RXDR         .       LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval 0..0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->RXDR));
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	3330      	adds	r3, #48	@ 0x30
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	b2db      	uxtb	r3, r3
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData 0..0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	b083      	sub	sp, #12
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
 8003bde:	460b      	mov	r3, r1
 8003be0:	70fb      	strb	r3, [r7, #3]
  *((__IO uint8_t *)&SPIx->TXDR) = TxData;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	3320      	adds	r3, #32
 8003be6:	78fa      	ldrb	r2, [r7, #3]
 8003be8:	701a      	strb	r2, [r3, #0]
}
 8003bea:	bf00      	nop
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
	...

08003bf8 <SPI_LL_Transmit>:
#include "stdio.h"
#include "usbd_cdc_if.h"

#define SPI_TIMEOUT 500000

uint8_t SPI_LL_Transmit(SPI_TypeDef *SPIx, uint8_t data){
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	460b      	mov	r3, r1
 8003c02:	70fb      	strb	r3, [r7, #3]
	uint32_t timeout = SPI_TIMEOUT;
 8003c04:	4b1b      	ldr	r3, [pc, #108]	@ (8003c74 <SPI_LL_Transmit+0x7c>)
 8003c06:	60fb      	str	r3, [r7, #12]
	LL_SPI_TransmitData8(SPIx, data);
 8003c08:	78fb      	ldrb	r3, [r7, #3]
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f7ff ffe2 	bl	8003bd6 <LL_SPI_TransmitData8>

	while (!LL_SPI_IsActiveFlag_TXC(SPIx)) {
 8003c12:	e00a      	b.n	8003c2a <SPI_LL_Transmit+0x32>
	    if (timeout == 0) {
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d104      	bne.n	8003c24 <SPI_LL_Transmit+0x2c>
	        CDC_SendString("SPI Timeout during TX getting data\r\n");
 8003c1a:	4817      	ldr	r0, [pc, #92]	@ (8003c78 <SPI_LL_Transmit+0x80>)
 8003c1c:	f012 f960 	bl	8015ee0 <CDC_SendString>
	        return ERROR_SPI_TRANS;
 8003c20:	23fe      	movs	r3, #254	@ 0xfe
 8003c22:	e023      	b.n	8003c6c <SPI_LL_Transmit+0x74>
	    }
	    timeout--;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	3b01      	subs	r3, #1
 8003c28:	60fb      	str	r3, [r7, #12]
	while (!LL_SPI_IsActiveFlag_TXC(SPIx)) {
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7ff ff9d 	bl	8003b6a <LL_SPI_IsActiveFlag_TXC>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0ee      	beq.n	8003c14 <SPI_LL_Transmit+0x1c>
	}
	timeout = SPI_TIMEOUT;
 8003c36:	4b0f      	ldr	r3, [pc, #60]	@ (8003c74 <SPI_LL_Transmit+0x7c>)
 8003c38:	60fb      	str	r3, [r7, #12]
	while (!LL_SPI_IsActiveFlag_RXWNE(SPIx)) {
 8003c3a:	e00a      	b.n	8003c52 <SPI_LL_Transmit+0x5a>
	    if (timeout == 0) {
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d104      	bne.n	8003c4c <SPI_LL_Transmit+0x54>
	        CDC_SendString("SPI Timeout during RX getting data\r\n");
 8003c42:	480e      	ldr	r0, [pc, #56]	@ (8003c7c <SPI_LL_Transmit+0x84>)
 8003c44:	f012 f94c 	bl	8015ee0 <CDC_SendString>
	        return ERROR_SPI_RECV;
 8003c48:	23ff      	movs	r3, #255	@ 0xff
 8003c4a:	e00f      	b.n	8003c6c <SPI_LL_Transmit+0x74>
	    }
	    timeout--;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	60fb      	str	r3, [r7, #12]
	while (!LL_SPI_IsActiveFlag_RXWNE(SPIx)) {
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7ff ff9d 	bl	8003b92 <LL_SPI_IsActiveFlag_RXWNE>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d0ee      	beq.n	8003c3c <SPI_LL_Transmit+0x44>
	}

	HAL_Delay(1);
 8003c5e:	2001      	movs	r0, #1
 8003c60:	f002 f8be 	bl	8005de0 <HAL_Delay>
//    	  CDC_SendString("Timeout Cost: %lu", (SPI_TIMEOUT - timeout));

	return LL_SPI_ReceiveData8(SPIx);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f7ff ffa8 	bl	8003bba <LL_SPI_ReceiveData8>
 8003c6a:	4603      	mov	r3, r0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3710      	adds	r7, #16
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	0007a120 	.word	0x0007a120
 8003c78:	0801df1c 	.word	0x0801df1c
 8003c7c:	0801df44 	.word	0x0801df44

08003c80 <SPI_LL_Write>:
//    	  CDC_SendString("Timeout Cost: %lu", (SPI_TIMEOUT - timeout));
//    CDC_SendString("Hello!");
	return LL_SPI_ReceiveData16(SPIx);
}

int8_t SPI_LL_Write(SPI_TypeDef *SPIx, uint8_t data){
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	460b      	mov	r3, r1
 8003c8a:	70fb      	strb	r3, [r7, #3]
	uint32_t timeout = SPI_TIMEOUT;
 8003c8c:	4b10      	ldr	r3, [pc, #64]	@ (8003cd0 <SPI_LL_Write+0x50>)
 8003c8e:	60fb      	str	r3, [r7, #12]
	LL_SPI_TransmitData8(SPIx, data);
 8003c90:	78fb      	ldrb	r3, [r7, #3]
 8003c92:	4619      	mov	r1, r3
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f7ff ff9e 	bl	8003bd6 <LL_SPI_TransmitData8>

	while (LL_SPI_IsActiveFlag_TXC(SPIx)) {
 8003c9a:	e00b      	b.n	8003cb4 <SPI_LL_Write+0x34>
	    if (timeout == 0) {
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d105      	bne.n	8003cae <SPI_LL_Write+0x2e>
	        CDC_SendString("SPI Timeout during getting data\r\n");
 8003ca2:	480c      	ldr	r0, [pc, #48]	@ (8003cd4 <SPI_LL_Write+0x54>)
 8003ca4:	f012 f91c 	bl	8015ee0 <CDC_SendString>
	        return -1;
 8003ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8003cac:	e00c      	b.n	8003cc8 <SPI_LL_Write+0x48>
	    }
	    timeout--;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	60fb      	str	r3, [r7, #12]
	while (LL_SPI_IsActiveFlag_TXC(SPIx)) {
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f7ff ff58 	bl	8003b6a <LL_SPI_IsActiveFlag_TXC>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1ed      	bne.n	8003c9c <SPI_LL_Write+0x1c>
	}

    LL_SPI_ReceiveData8(SPIx);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7ff ff7a 	bl	8003bba <LL_SPI_ReceiveData8>
    return 0;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	0007a120 	.word	0x0007a120
 8003cd4:	0801df6c 	.word	0x0801df6c

08003cd8 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003cdc:	4b05      	ldr	r3, [pc, #20]	@ (8003cf4 <LL_RCC_HSE_Enable+0x1c>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a04      	ldr	r2, [pc, #16]	@ (8003cf4 <LL_RCC_HSE_Enable+0x1c>)
 8003ce2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ce6:	6013      	str	r3, [r2, #0]
}
 8003ce8:	bf00      	nop
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	58024400 	.word	0x58024400

08003cf8 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003cfc:	4b07      	ldr	r3, [pc, #28]	@ (8003d1c <LL_RCC_HSE_IsReady+0x24>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d08:	d101      	bne.n	8003d0e <LL_RCC_HSE_IsReady+0x16>
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e000      	b.n	8003d10 <LL_RCC_HSE_IsReady+0x18>
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	58024400 	.word	0x58024400

08003d20 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48 oscillator
  * @rmtoll CR           HSI48ON         LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSI48ON);
 8003d24:	4b05      	ldr	r3, [pc, #20]	@ (8003d3c <LL_RCC_HSI48_Enable+0x1c>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a04      	ldr	r2, [pc, #16]	@ (8003d3c <LL_RCC_HSI48_Enable+0x1c>)
 8003d2a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003d2e:	6013      	str	r3, [r2, #0]
}
 8003d30:	bf00      	nop
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	58024400 	.word	0x58024400

08003d40 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 clock is ready
  * @rmtoll CR           HSI48RDY        LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == (RCC_CR_HSI48RDY)) ? 1UL : 0UL);
 8003d44:	4b07      	ldr	r3, [pc, #28]	@ (8003d64 <LL_RCC_HSI48_IsReady+0x24>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d50:	d101      	bne.n	8003d56 <LL_RCC_HSI48_IsReady+0x16>
 8003d52:	2301      	movs	r3, #1
 8003d54:	e000      	b.n	8003d58 <LL_RCC_HSI48_IsReady+0x18>
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	58024400 	.word	0x58024400

08003d68 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL1
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003d70:	4b06      	ldr	r3, [pc, #24]	@ (8003d8c <LL_RCC_SetSysClkSource+0x24>)
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	f023 0207 	bic.w	r2, r3, #7
 8003d78:	4904      	ldr	r1, [pc, #16]	@ (8003d8c <LL_RCC_SetSysClkSource+0x24>)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	610b      	str	r3, [r1, #16]
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr
 8003d8c:	58024400 	.word	0x58024400

08003d90 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_CSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL1
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003d94:	4b04      	ldr	r3, [pc, #16]	@ (8003da8 <LL_RCC_GetSysClkSource+0x18>)
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	58024400 	.word	0x58024400

08003dac <LL_RCC_SetSysPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysPrescaler(uint32_t Prescaler)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
#if defined(RCC_D1CFGR_D1CPRE)
  MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, Prescaler);
 8003db4:	4b06      	ldr	r3, [pc, #24]	@ (8003dd0 <LL_RCC_SetSysPrescaler+0x24>)
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003dbc:	4904      	ldr	r1, [pc, #16]	@ (8003dd0 <LL_RCC_SetSysPrescaler+0x24>)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	618b      	str	r3, [r1, #24]
#else
  MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, Prescaler);
#endif /* RCC_D1CFGR_D1CPRE */
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	58024400 	.word	0x58024400

08003dd4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_AHB_DIV_256
  *         @arg @ref LL_RCC_AHB_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
#if defined(RCC_D1CFGR_HPRE)
  MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, Prescaler);
 8003ddc:	4b06      	ldr	r3, [pc, #24]	@ (8003df8 <LL_RCC_SetAHBPrescaler+0x24>)
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	f023 020f 	bic.w	r2, r3, #15
 8003de4:	4904      	ldr	r1, [pc, #16]	@ (8003df8 <LL_RCC_SetAHBPrescaler+0x24>)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	618b      	str	r3, [r1, #24]
#else
  MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, Prescaler);
#endif /* RCC_D1CFGR_HPRE */
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	58024400 	.word	0x58024400

08003dfc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
#if defined(RCC_D2CFGR_D2PPRE1)
  MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, Prescaler);
 8003e04:	4b06      	ldr	r3, [pc, #24]	@ (8003e20 <LL_RCC_SetAPB1Prescaler+0x24>)
 8003e06:	69db      	ldr	r3, [r3, #28]
 8003e08:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003e0c:	4904      	ldr	r1, [pc, #16]	@ (8003e20 <LL_RCC_SetAPB1Prescaler+0x24>)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	61cb      	str	r3, [r1, #28]
#else
  MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, Prescaler);
#endif /* RCC_D2CFGR_D2PPRE1 */
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr
 8003e20:	58024400 	.word	0x58024400

08003e24 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
#if defined(RCC_D2CFGR_D2PPRE2)
  MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, Prescaler);
 8003e2c:	4b06      	ldr	r3, [pc, #24]	@ (8003e48 <LL_RCC_SetAPB2Prescaler+0x24>)
 8003e2e:	69db      	ldr	r3, [r3, #28]
 8003e30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e34:	4904      	ldr	r1, [pc, #16]	@ (8003e48 <LL_RCC_SetAPB2Prescaler+0x24>)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	61cb      	str	r3, [r1, #28]
#else
  MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, Prescaler);
#endif /* RCC_D2CFGR_D2PPRE2 */
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr
 8003e48:	58024400 	.word	0x58024400

08003e4c <LL_RCC_SetAPB3Prescaler>:
  *         @arg @ref LL_RCC_APB3_DIV_8
  *         @arg @ref LL_RCC_APB3_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB3Prescaler(uint32_t Prescaler)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
#if defined(RCC_D1CFGR_D1PPRE)
  MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, Prescaler);
 8003e54:	4b06      	ldr	r3, [pc, #24]	@ (8003e70 <LL_RCC_SetAPB3Prescaler+0x24>)
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003e5c:	4904      	ldr	r1, [pc, #16]	@ (8003e70 <LL_RCC_SetAPB3Prescaler+0x24>)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	618b      	str	r3, [r1, #24]
#else
  MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, Prescaler);
#endif /* RCC_D1CFGR_D1PPRE */
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	58024400 	.word	0x58024400

08003e74 <LL_RCC_SetAPB4Prescaler>:
  *         @arg @ref LL_RCC_APB4_DIV_8
  *         @arg @ref LL_RCC_APB4_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB4Prescaler(uint32_t Prescaler)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
#if defined(RCC_D3CFGR_D3PPRE)
  MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, Prescaler);
 8003e7c:	4b06      	ldr	r3, [pc, #24]	@ (8003e98 <LL_RCC_SetAPB4Prescaler+0x24>)
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003e84:	4904      	ldr	r1, [pc, #16]	@ (8003e98 <LL_RCC_SetAPB4Prescaler+0x24>)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	620b      	str	r3, [r1, #32]
#else
  MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, Prescaler);
#endif /* RCC_D3CFGR_D3PPRE */
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	58024400 	.word	0x58024400

08003e9c <LL_RCC_SetClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClockSource(uint32_t ClkSource)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
#if defined(RCC_D1CCIPR_FMCSEL)
  uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->D1CCIPR + LL_CLKSOURCE_REG(ClkSource));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	b2da      	uxtb	r2, r3
 8003ea8:	4b10      	ldr	r3, [pc, #64]	@ (8003eec <LL_RCC_SetClockSource+0x50>)
 8003eaa:	4413      	add	r3, r2
 8003eac:	60fb      	str	r3, [r7, #12]
#else
  uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->CDCCIPR + LL_CLKSOURCE_REG(ClkSource));
#endif /*  */
  MODIFY_REG(*pReg, LL_CLKSOURCE_MASK(ClkSource), LL_CLKSOURCE_CONFIG(ClkSource));
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	0e19      	lsrs	r1, r3, #24
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	0a1b      	lsrs	r3, r3, #8
 8003eba:	f003 031f 	and.w	r3, r3, #31
 8003ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec2:	43db      	mvns	r3, r3
 8003ec4:	401a      	ands	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	0c1b      	lsrs	r3, r3, #16
 8003eca:	b2d9      	uxtb	r1, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	0a1b      	lsrs	r3, r3, #8
 8003ed0:	f003 031f 	and.w	r3, r3, #31
 8003ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	601a      	str	r2, [r3, #0]
}
 8003ede:	bf00      	nop
 8003ee0:	3714      	adds	r7, #20
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	5802444c 	.word	0x5802444c

08003ef0 <LL_RCC_SetSPIClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSPIClockSource(uint32_t ClkSource)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f7ff ffcf 	bl	8003e9c <LL_RCC_SetClockSource>
}
 8003efe:	bf00      	nop
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
	...

08003f08 <LL_RCC_PLL_SetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_SetSource(uint32_t PLLSource)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC, PLLSource);
 8003f10:	4b06      	ldr	r3, [pc, #24]	@ (8003f2c <LL_RCC_PLL_SetSource+0x24>)
 8003f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f14:	f023 0203 	bic.w	r2, r3, #3
 8003f18:	4904      	ldr	r1, [pc, #16]	@ (8003f2c <LL_RCC_PLL_SetSource+0x24>)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr
 8003f2c:	58024400 	.word	0x58024400

08003f30 <LL_RCC_PLL1_Enable>:
  * @brief  Enable PLL1
  * @rmtoll CR           PLL1ON         LL_RCC_PLL1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1_Enable(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLL1ON);
 8003f34:	4b05      	ldr	r3, [pc, #20]	@ (8003f4c <LL_RCC_PLL1_Enable+0x1c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a04      	ldr	r2, [pc, #16]	@ (8003f4c <LL_RCC_PLL1_Enable+0x1c>)
 8003f3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f3e:	6013      	str	r3, [r2, #0]
}
 8003f40:	bf00      	nop
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	58024400 	.word	0x58024400

08003f50 <LL_RCC_PLL1_IsReady>:
  * @brief  Check if PLL1 Ready
  * @rmtoll CR           PLL1RDY        LL_RCC_PLL1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsReady(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == (RCC_CR_PLL1RDY)) ? 1UL : 0UL);
 8003f54:	4b07      	ldr	r3, [pc, #28]	@ (8003f74 <LL_RCC_PLL1_IsReady+0x24>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f60:	d101      	bne.n	8003f66 <LL_RCC_PLL1_IsReady+0x16>
 8003f62:	2301      	movs	r3, #1
 8003f64:	e000      	b.n	8003f68 <LL_RCC_PLL1_IsReady+0x18>
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	58024400 	.word	0x58024400

08003f78 <LL_RCC_PLL1P_Enable>:
  * @note   This API shall be called only when PLL1 is disabled.
  * @rmtoll PLLCFGR           DIVP1EN         LL_RCC_PLL1P_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1P_Enable(void)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN);
 8003f7c:	4b05      	ldr	r3, [pc, #20]	@ (8003f94 <LL_RCC_PLL1P_Enable+0x1c>)
 8003f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f80:	4a04      	ldr	r2, [pc, #16]	@ (8003f94 <LL_RCC_PLL1P_Enable+0x1c>)
 8003f82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f86:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8003f88:	bf00      	nop
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	58024400 	.word	0x58024400

08003f98 <LL_RCC_PLL1Q_Enable>:
  * @note   This API shall be called only when PLL1 is disabled.
  * @rmtoll PLLCFGR           DIVQ1EN         LL_RCC_PLL1Q_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1Q_Enable(void)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ1EN);
 8003f9c:	4b05      	ldr	r3, [pc, #20]	@ (8003fb4 <LL_RCC_PLL1Q_Enable+0x1c>)
 8003f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa0:	4a04      	ldr	r2, [pc, #16]	@ (8003fb4 <LL_RCC_PLL1Q_Enable+0x1c>)
 8003fa2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fa6:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8003fa8:	bf00      	nop
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	58024400 	.word	0x58024400

08003fb8 <LL_RCC_PLL1R_Enable>:
  * @note   This API shall be called only when PLL1 is disabled.
  * @rmtoll PLLCFGR           DIVR1EN         LL_RCC_PLL1R_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1R_Enable(void)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR1EN);
 8003fbc:	4b05      	ldr	r3, [pc, #20]	@ (8003fd4 <LL_RCC_PLL1R_Enable+0x1c>)
 8003fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc0:	4a04      	ldr	r2, [pc, #16]	@ (8003fd4 <LL_RCC_PLL1R_Enable+0x1c>)
 8003fc2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fc6:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8003fc8:	bf00      	nop
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	58024400 	.word	0x58024400

08003fd8 <LL_RCC_PLL1_SetVCOOutputRange>:
  *         @arg @ref LL_RCC_PLLVCORANGE_WIDE
  *         @arg @ref LL_RCC_PLLVCORANGE_MEDIUM
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1_SetVCOOutputRange(uint32_t VCORange)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL1VCOSEL, VCORange << RCC_PLLCFGR_PLL1VCOSEL_Pos);
 8003fe0:	4b07      	ldr	r3, [pc, #28]	@ (8004000 <LL_RCC_PLL1_SetVCOOutputRange+0x28>)
 8003fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe4:	f023 0202 	bic.w	r2, r3, #2
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	005b      	lsls	r3, r3, #1
 8003fec:	4904      	ldr	r1, [pc, #16]	@ (8004000 <LL_RCC_PLL1_SetVCOOutputRange+0x28>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8003ff2:	bf00      	nop
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	58024400 	.word	0x58024400

08004004 <LL_RCC_PLL1_SetVCOInputRange>:
  *         @arg @ref LL_RCC_PLLINPUTRANGE_4_8
  *         @arg @ref LL_RCC_PLLINPUTRANGE_8_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1_SetVCOInputRange(uint32_t InputRange)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL1RGE, InputRange << RCC_PLLCFGR_PLL1RGE_Pos);
 800400c:	4b07      	ldr	r3, [pc, #28]	@ (800402c <LL_RCC_PLL1_SetVCOInputRange+0x28>)
 800400e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004010:	f023 020c 	bic.w	r2, r3, #12
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4904      	ldr	r1, [pc, #16]	@ (800402c <LL_RCC_PLL1_SetVCOInputRange+0x28>)
 800401a:	4313      	orrs	r3, r2
 800401c:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 800401e:	bf00      	nop
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	58024400 	.word	0x58024400

08004030 <LL_RCC_PLL1_SetN>:
  * @note   This API shall be called only when PLL1 is disabled.
  * @rmtoll PLL1DIVR        N1          LL_RCC_PLL1_SetN
  * @param  N parameter can be a value between 4 and 512
  */
__STATIC_INLINE void LL_RCC_PLL1_SetN(uint32_t N)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_N1, (N - 1UL) << RCC_PLL1DIVR_N1_Pos);
 8004038:	4b07      	ldr	r3, [pc, #28]	@ (8004058 <LL_RCC_PLL1_SetN+0x28>)
 800403a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800403c:	4b07      	ldr	r3, [pc, #28]	@ (800405c <LL_RCC_PLL1_SetN+0x2c>)
 800403e:	4013      	ands	r3, r2
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	3a01      	subs	r2, #1
 8004044:	4904      	ldr	r1, [pc, #16]	@ (8004058 <LL_RCC_PLL1_SetN+0x28>)
 8004046:	4313      	orrs	r3, r2
 8004048:	630b      	str	r3, [r1, #48]	@ 0x30
}
 800404a:	bf00      	nop
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	58024400 	.word	0x58024400
 800405c:	fffffe00 	.word	0xfffffe00

08004060 <LL_RCC_PLL1_SetM>:
  * @note   This API shall be called only when PLL1 is disabled.
  * @rmtoll PLLCKSELR       DIVM1          LL_RCC_PLL1_SetM
  * @param  M parameter can be a value between 0 and 63
  */
__STATIC_INLINE void LL_RCC_PLL1_SetM(uint32_t M)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1, M << RCC_PLLCKSELR_DIVM1_Pos);
 8004068:	4b07      	ldr	r3, [pc, #28]	@ (8004088 <LL_RCC_PLL1_SetM+0x28>)
 800406a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800406c:	f423 727c 	bic.w	r2, r3, #1008	@ 0x3f0
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	011b      	lsls	r3, r3, #4
 8004074:	4904      	ldr	r1, [pc, #16]	@ (8004088 <LL_RCC_PLL1_SetM+0x28>)
 8004076:	4313      	orrs	r3, r2
 8004078:	628b      	str	r3, [r1, #40]	@ 0x28
}
 800407a:	bf00      	nop
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	58024400 	.word	0x58024400

0800408c <LL_RCC_PLL1_SetP>:
  * @param  P parameter can be a value between 2 (or 1*) and 128 (ODD division factor not supported)
  *
  * (*) : For stm32h72xxx and stm32h73xxx family lines.
  */
__STATIC_INLINE void LL_RCC_PLL1_SetP(uint32_t P)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_P1, (P - 1UL) << RCC_PLL1DIVR_P1_Pos);
 8004094:	4b07      	ldr	r3, [pc, #28]	@ (80040b4 <LL_RCC_PLL1_SetP+0x28>)
 8004096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004098:	f423 427e 	bic.w	r2, r3, #65024	@ 0xfe00
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	3b01      	subs	r3, #1
 80040a0:	025b      	lsls	r3, r3, #9
 80040a2:	4904      	ldr	r1, [pc, #16]	@ (80040b4 <LL_RCC_PLL1_SetP+0x28>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	630b      	str	r3, [r1, #48]	@ 0x30
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	58024400 	.word	0x58024400

080040b8 <LL_RCC_PLL1_SetQ>:
  * @note   This API shall be called only when PLL1 is disabled.
  * @rmtoll PLL1DIVR        Q1          LL_RCC_PLL1_SetQ
  * @param  Q parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL1_SetQ(uint32_t Q)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1, (Q - 1UL) << RCC_PLL1DIVR_Q1_Pos);
 80040c0:	4b07      	ldr	r3, [pc, #28]	@ (80040e0 <LL_RCC_PLL1_SetQ+0x28>)
 80040c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c4:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	3b01      	subs	r3, #1
 80040cc:	041b      	lsls	r3, r3, #16
 80040ce:	4904      	ldr	r1, [pc, #16]	@ (80040e0 <LL_RCC_PLL1_SetQ+0x28>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	630b      	str	r3, [r1, #48]	@ 0x30
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	58024400 	.word	0x58024400

080040e4 <LL_RCC_PLL1_SetR>:
  * @note   This API shall be called only when PLL1 is disabled.
  * @rmtoll PLL1DIVR        R1          LL_RCC_PLL1_SetR
  * @param  R parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL1_SetR(uint32_t R)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_R1, (R - 1UL) << RCC_PLL1DIVR_R1_Pos);
 80040ec:	4b07      	ldr	r3, [pc, #28]	@ (800410c <LL_RCC_PLL1_SetR+0x28>)
 80040ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	3b01      	subs	r3, #1
 80040f8:	061b      	lsls	r3, r3, #24
 80040fa:	4904      	ldr	r1, [pc, #16]	@ (800410c <LL_RCC_PLL1_SetR+0x28>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	630b      	str	r3, [r1, #48]	@ 0x30
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	58024400 	.word	0x58024400

08004110 <LL_RCC_PLL2_Enable>:
  * @brief  Enable PLL2
  * @rmtoll CR           PLL2ON         LL_RCC_PLL2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL2_Enable(void)
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLL2ON);
 8004114:	4b05      	ldr	r3, [pc, #20]	@ (800412c <LL_RCC_PLL2_Enable+0x1c>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a04      	ldr	r2, [pc, #16]	@ (800412c <LL_RCC_PLL2_Enable+0x1c>)
 800411a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800411e:	6013      	str	r3, [r2, #0]
}
 8004120:	bf00      	nop
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	58024400 	.word	0x58024400

08004130 <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll CR           PLL2RDY        LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL2RDY) == (RCC_CR_PLL2RDY)) ? 1UL : 0UL);
 8004134:	4b07      	ldr	r3, [pc, #28]	@ (8004154 <LL_RCC_PLL2_IsReady+0x24>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800413c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004140:	d101      	bne.n	8004146 <LL_RCC_PLL2_IsReady+0x16>
 8004142:	2301      	movs	r3, #1
 8004144:	e000      	b.n	8004148 <LL_RCC_PLL2_IsReady+0x18>
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	58024400 	.word	0x58024400

08004158 <LL_RCC_PLL2Q_Enable>:
  * @note   This API shall be called only when PLL2 is disabled.
  * @rmtoll PLLCFGR           DIVQ2EN         LL_RCC_PLL2Q_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL2Q_Enable(void)
{
 8004158:	b480      	push	{r7}
 800415a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ2EN);
 800415c:	4b05      	ldr	r3, [pc, #20]	@ (8004174 <LL_RCC_PLL2Q_Enable+0x1c>)
 800415e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004160:	4a04      	ldr	r2, [pc, #16]	@ (8004174 <LL_RCC_PLL2Q_Enable+0x1c>)
 8004162:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004166:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8004168:	bf00      	nop
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	58024400 	.word	0x58024400

08004178 <LL_RCC_PLL2_SetVCOOutputRange>:
  *         @arg @ref LL_RCC_PLLVCORANGE_WIDE
  *         @arg @ref LL_RCC_PLLVCORANGE_MEDIUM
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL2_SetVCOOutputRange(uint32_t VCORange)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL2VCOSEL, VCORange << RCC_PLLCFGR_PLL2VCOSEL_Pos);
 8004180:	4b07      	ldr	r3, [pc, #28]	@ (80041a0 <LL_RCC_PLL2_SetVCOOutputRange+0x28>)
 8004182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004184:	f023 0220 	bic.w	r2, r3, #32
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	015b      	lsls	r3, r3, #5
 800418c:	4904      	ldr	r1, [pc, #16]	@ (80041a0 <LL_RCC_PLL2_SetVCOOutputRange+0x28>)
 800418e:	4313      	orrs	r3, r2
 8004190:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8004192:	bf00      	nop
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	58024400 	.word	0x58024400

080041a4 <LL_RCC_PLL2_SetVCOInputRange>:
  *         @arg @ref LL_RCC_PLLINPUTRANGE_4_8
  *         @arg @ref LL_RCC_PLLINPUTRANGE_8_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL2_SetVCOInputRange(uint32_t InputRange)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL2RGE, InputRange << RCC_PLLCFGR_PLL2RGE_Pos);
 80041ac:	4b07      	ldr	r3, [pc, #28]	@ (80041cc <LL_RCC_PLL2_SetVCOInputRange+0x28>)
 80041ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	019b      	lsls	r3, r3, #6
 80041b8:	4904      	ldr	r1, [pc, #16]	@ (80041cc <LL_RCC_PLL2_SetVCOInputRange+0x28>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 80041be:	bf00      	nop
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	58024400 	.word	0x58024400

080041d0 <LL_RCC_PLL2_SetN>:
  * @note   This API shall be called only when PLL2 is disabled.
  * @rmtoll PLL2DIVR        N2          LL_RCC_PLL2_SetN
  * @param  N parameter can be a value between 4 and 512
  */
__STATIC_INLINE void LL_RCC_PLL2_SetN(uint32_t N)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL2DIVR, RCC_PLL2DIVR_N2, (N - 1UL) << RCC_PLL2DIVR_N2_Pos);
 80041d8:	4b07      	ldr	r3, [pc, #28]	@ (80041f8 <LL_RCC_PLL2_SetN+0x28>)
 80041da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041dc:	4b07      	ldr	r3, [pc, #28]	@ (80041fc <LL_RCC_PLL2_SetN+0x2c>)
 80041de:	4013      	ands	r3, r2
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	3a01      	subs	r2, #1
 80041e4:	4904      	ldr	r1, [pc, #16]	@ (80041f8 <LL_RCC_PLL2_SetN+0x28>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	638b      	str	r3, [r1, #56]	@ 0x38
}
 80041ea:	bf00      	nop
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	58024400 	.word	0x58024400
 80041fc:	fffffe00 	.word	0xfffffe00

08004200 <LL_RCC_PLL2_SetM>:
  * @note   This API shall be called only when PLL2 is disabled.
  * @rmtoll PLLCKSELR       DIVM2          LL_RCC_PLL2_SetM
  * @param  M parameter can be a value between 0 and 63
  */
__STATIC_INLINE void LL_RCC_PLL2_SetM(uint32_t M)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM2, M << RCC_PLLCKSELR_DIVM2_Pos);
 8004208:	4b07      	ldr	r3, [pc, #28]	@ (8004228 <LL_RCC_PLL2_SetM+0x28>)
 800420a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800420c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	031b      	lsls	r3, r3, #12
 8004214:	4904      	ldr	r1, [pc, #16]	@ (8004228 <LL_RCC_PLL2_SetM+0x28>)
 8004216:	4313      	orrs	r3, r2
 8004218:	628b      	str	r3, [r1, #40]	@ 0x28
}
 800421a:	bf00      	nop
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	58024400 	.word	0x58024400

0800422c <LL_RCC_PLL2_SetP>:
  * @note   This API shall be called only when PLL2 is disabled.
  * @rmtoll PLL2DIVR        P2          LL_RCC_PLL2_SetP
  * @param  P parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL2_SetP(uint32_t P)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL2DIVR, RCC_PLL2DIVR_P2, (P - 1UL) << RCC_PLL2DIVR_P2_Pos);
 8004234:	4b07      	ldr	r3, [pc, #28]	@ (8004254 <LL_RCC_PLL2_SetP+0x28>)
 8004236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004238:	f423 427e 	bic.w	r2, r3, #65024	@ 0xfe00
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	3b01      	subs	r3, #1
 8004240:	025b      	lsls	r3, r3, #9
 8004242:	4904      	ldr	r1, [pc, #16]	@ (8004254 <LL_RCC_PLL2_SetP+0x28>)
 8004244:	4313      	orrs	r3, r2
 8004246:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr
 8004254:	58024400 	.word	0x58024400

08004258 <LL_RCC_PLL2_SetQ>:
  * @note   This API shall be called only when PLL2 is disabled.
  * @rmtoll PLL2DIVR        Q2          LL_RCC_PLL2_SetQ
  * @param  Q parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL2_SetQ(uint32_t Q)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL2DIVR, RCC_PLL2DIVR_Q2, (Q - 1UL) << RCC_PLL2DIVR_Q2_Pos);
 8004260:	4b07      	ldr	r3, [pc, #28]	@ (8004280 <LL_RCC_PLL2_SetQ+0x28>)
 8004262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004264:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	3b01      	subs	r3, #1
 800426c:	041b      	lsls	r3, r3, #16
 800426e:	4904      	ldr	r1, [pc, #16]	@ (8004280 <LL_RCC_PLL2_SetQ+0x28>)
 8004270:	4313      	orrs	r3, r2
 8004272:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr
 8004280:	58024400 	.word	0x58024400

08004284 <LL_RCC_PLL2_SetR>:
  * @note   This API shall be called only when PLL2 is disabled.
  * @rmtoll PLL2DIVR        R2          LL_RCC_PLL2_SetR
  * @param  R parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL2_SetR(uint32_t R)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL2DIVR, RCC_PLL2DIVR_R2, (R - 1UL) << RCC_PLL2DIVR_R2_Pos);
 800428c:	4b07      	ldr	r3, [pc, #28]	@ (80042ac <LL_RCC_PLL2_SetR+0x28>)
 800428e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004290:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3b01      	subs	r3, #1
 8004298:	061b      	lsls	r3, r3, #24
 800429a:	4904      	ldr	r1, [pc, #16]	@ (80042ac <LL_RCC_PLL2_SetR+0x28>)
 800429c:	4313      	orrs	r3, r2
 800429e:	638b      	str	r3, [r1, #56]	@ 0x38
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr
 80042ac:	58024400 	.word	0x58024400

080042b0 <LL_AHB4_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB4ENR, Periphs);
 80042b8:	4b0a      	ldr	r3, [pc, #40]	@ (80042e4 <LL_AHB4_GRP1_EnableClock+0x34>)
 80042ba:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80042be:	4909      	ldr	r1, [pc, #36]	@ (80042e4 <LL_AHB4_GRP1_EnableClock+0x34>)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 80042c8:	4b06      	ldr	r3, [pc, #24]	@ (80042e4 <LL_AHB4_GRP1_EnableClock+0x34>)
 80042ca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4013      	ands	r3, r2
 80042d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80042d4:	68fb      	ldr	r3, [r7, #12]
}
 80042d6:	bf00      	nop
 80042d8:	3714      	adds	r7, #20
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	58024400 	.word	0x58024400

080042e8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80042f0:	4b0a      	ldr	r3, [pc, #40]	@ (800431c <LL_APB2_GRP1_EnableClock+0x34>)
 80042f2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80042f6:	4909      	ldr	r1, [pc, #36]	@ (800431c <LL_APB2_GRP1_EnableClock+0x34>)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004300:	4b06      	ldr	r3, [pc, #24]	@ (800431c <LL_APB2_GRP1_EnableClock+0x34>)
 8004302:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4013      	ands	r3, r2
 800430a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800430c:	68fb      	ldr	r3, [r7, #12]
}
 800430e:	bf00      	nop
 8004310:	3714      	adds	r7, #20
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	58024400 	.word	0x58024400

08004320 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_6
  *         @arg @ref LL_FLASH_LATENCY_7
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8004328:	4b06      	ldr	r3, [pc, #24]	@ (8004344 <LL_FLASH_SetLatency+0x24>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f023 020f 	bic.w	r2, r3, #15
 8004330:	4904      	ldr	r1, [pc, #16]	@ (8004344 <LL_FLASH_SetLatency+0x24>)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4313      	orrs	r3, r2
 8004336:	600b      	str	r3, [r1, #0]
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	52002000 	.word	0x52002000

08004348 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_5
  *         @arg @ref LL_FLASH_LATENCY_6
  *         @arg @ref LL_FLASH_LATENCY_7
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8004348:	b480      	push	{r7}
 800434a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800434c:	4b04      	ldr	r3, [pc, #16]	@ (8004360 <LL_FLASH_GetLatency+0x18>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 030f 	and.w	r3, r3, #15
}
 8004354:	4618      	mov	r0, r3
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	52002000 	.word	0x52002000

08004364 <LL_MPU_Enable>:
  *         @arg @ref LL_MPU_CTRL_PRIVILEGED_DEFAULT
  *         @arg @ref LL_MPU_CTRL_HFNMI_PRIVDEF
  * @retval None
  */
__STATIC_INLINE void LL_MPU_Enable(uint32_t Options)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU*/
  WRITE_REG(MPU->CTRL, (MPU_CTRL_ENABLE_Msk | Options));
 800436c:	4a08      	ldr	r2, [pc, #32]	@ (8004390 <LL_MPU_Enable+0x2c>)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f043 0301 	orr.w	r3, r3, #1
 8004374:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8004376:	f3bf 8f4f 	dsb	sy
}
 800437a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800437c:	f3bf 8f6f 	isb	sy
}
 8004380:	bf00      	nop
  /* Ensure MPU settings take effects */
  __DSB();
  /* Sequence instruction fetches using update settings */
  __ISB();
}
 8004382:	bf00      	nop
 8004384:	370c      	adds	r7, #12
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	e000ed90 	.word	0xe000ed90

08004394 <LL_MPU_Disable>:
  * @brief  Disable MPU
  * @rmtoll MPU_CTRL     ENABLE        LL_MPU_Disable
  * @retval None
  */
__STATIC_INLINE void LL_MPU_Disable(void)
{
 8004394:	b480      	push	{r7}
 8004396:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8004398:	f3bf 8f5f 	dmb	sy
}
 800439c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();
  /* Disable MPU*/
  WRITE_REG(MPU->CTRL, 0U);
 800439e:	4b04      	ldr	r3, [pc, #16]	@ (80043b0 <LL_MPU_Disable+0x1c>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	605a      	str	r2, [r3, #4]
}
 80043a4:	bf00      	nop
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	e000ed90 	.word	0xe000ed90

080043b4 <LL_MPU_ConfigRegion>:
  *         @arg @ref LL_MPU_ACCESS_BUFFERABLE or @ref LL_MPU_ACCESS_NOT_BUFFERABLE
  * @note   For cortex-M4 only 8 regions are available i.e only values from LL_MPU_REGION_NUMBER0 to LL_MPU_REGION_NUMBER7 are possible.
  * @retval None
  */
__STATIC_INLINE void LL_MPU_ConfigRegion(uint32_t Region, uint32_t SubRegionDisable, uint32_t Address, uint32_t Attributes)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
 80043c0:	603b      	str	r3, [r7, #0]
  /* Set Region number */
  WRITE_REG(MPU->RNR, Region);
 80043c2:	4a0b      	ldr	r2, [pc, #44]	@ (80043f0 <LL_MPU_ConfigRegion+0x3c>)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6093      	str	r3, [r2, #8]
  /* Set base address */
  WRITE_REG(MPU->RBAR, (Address & 0xFFFFFFE0U));
 80043c8:	4a09      	ldr	r2, [pc, #36]	@ (80043f0 <LL_MPU_ConfigRegion+0x3c>)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f023 031f 	bic.w	r3, r3, #31
 80043d0:	60d3      	str	r3, [r2, #12]
  /* Configure MPU */
  WRITE_REG(MPU->RASR, (MPU_RASR_ENABLE_Msk | Attributes | (SubRegionDisable << MPU_RASR_SRD_Pos)));
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	021a      	lsls	r2, r3, #8
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	4313      	orrs	r3, r2
 80043da:	4a05      	ldr	r2, [pc, #20]	@ (80043f0 <LL_MPU_ConfigRegion+0x3c>)
 80043dc:	f043 0301 	orr.w	r3, r3, #1
 80043e0:	6113      	str	r3, [r2, #16]
}
 80043e2:	bf00      	nop
 80043e4:	3714      	adds	r7, #20
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	e000ed90 	.word	0xe000ed90

080043f4 <LL_PWR_ConfigSupply>:
  *         @arg @ref LL_PWR_SMPS_2V5_SUPPLIES_EXT
  *         @arg @ref LL_PWR_EXTERNAL_SOURCE_SUPPLY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ConfigSupply(uint32_t SupplySource)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, (PWR_CR3_SMPSLEVEL | PWR_CR3_SMPSEXTHP | PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS), SupplySource);
 80043fc:	4b06      	ldr	r3, [pc, #24]	@ (8004418 <LL_PWR_ConfigSupply+0x24>)
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8004404:	4904      	ldr	r1, [pc, #16]	@ (8004418 <LL_PWR_ConfigSupply+0x24>)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4313      	orrs	r3, r2
 800440a:	60cb      	str	r3, [r1, #12]
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr
 8004418:	58024800 	.word	0x58024800

0800441c <LL_PWR_SetRegulVoltageScaling>:
  * @note   For all H7 lines except STM32H7Axxx and STM32H7Bxxx lines, VOS0
  *         is applied when PWR_D3CR_VOS[1:0] = 0b11 and  SYSCFG_PWRCR_ODEN = 0b1.
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
#if defined (PWR_CPUCR_PDDS_D2)
  MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
 8004424:	4b06      	ldr	r3, [pc, #24]	@ (8004440 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800442c:	4904      	ldr	r1, [pc, #16]	@ (8004440 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4313      	orrs	r3, r2
 8004432:	618b      	str	r3, [r1, #24]
#else
  MODIFY_REG(PWR->SRDCR, PWR_SRDCR_VOS, VoltageScaling);
#endif /* PWR_CPUCR_PDDS_D2 */
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr
 8004440:	58024800 	.word	0x58024800

08004444 <LL_PWR_IsActiveFlag_VOS>:
  *         or if its output voltage is still changing to the required voltage level
  * @rmtoll D3CR   VOSRDY       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8004444:	b480      	push	{r7}
 8004446:	af00      	add	r7, sp, #0
#if defined (PWR_CPUCR_PDDS_D2)
  return ((READ_BIT(PWR->D3CR, PWR_D3CR_VOSRDY) == (PWR_D3CR_VOSRDY)) ? 1UL : 0UL);
 8004448:	4b07      	ldr	r3, [pc, #28]	@ (8004468 <LL_PWR_IsActiveFlag_VOS+0x24>)
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004450:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004454:	d101      	bne.n	800445a <LL_PWR_IsActiveFlag_VOS+0x16>
 8004456:	2301      	movs	r3, #1
 8004458:	e000      	b.n	800445c <LL_PWR_IsActiveFlag_VOS+0x18>
 800445a:	2300      	movs	r3, #0
#else
  return ((READ_BIT(PWR->SRDCR, PWR_SRDCR_VOSRDY) == (PWR_SRDCR_VOSRDY)) ? 1UL : 0UL);
#endif /* PWR_CPUCR_PDDS_D2 */
}
 800445c:	4618      	mov	r0, r3
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	58024800 	.word	0x58024800

0800446c <LL_SPI_Enable>:
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f043 0201 	orr.w	r2, r3, #1
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	601a      	str	r2, [r3, #0]
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <LL_SPI_StartMasterTransfer>:
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_CSTART);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	601a      	str	r2, [r3, #0]
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <LL_SPI_SetStandard>:
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_SP, Standard);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	f423 1260 	bic.w	r2, r3, #3670016	@ 0x380000
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	431a      	orrs	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	60da      	str	r2, [r3, #12]
}
 80044c6:	bf00      	nop
 80044c8:	370c      	adds	r7, #12
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr

080044d2 <LL_SPI_SetFIFOThreshold>:
{
 80044d2:	b480      	push	{r7}
 80044d4:	b083      	sub	sp, #12
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
 80044da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG1, SPI_CFG1_FTHLV, Threshold);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f423 72f0 	bic.w	r2, r3, #480	@ 0x1e0
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	431a      	orrs	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	609a      	str	r2, [r3, #8]
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <LL_SPI_EnableNSSPulseMgt>:
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CFG2, SPI_CFG2_SSOM);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	60da      	str	r2, [r3, #12]
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <LL_GPIO_SetOutputPin>:
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	619a      	str	r2, [r3, #24]
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <LL_GPIO_ResetOutputPin>:
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	041a      	lsls	r2, r3, #16
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	619a      	str	r2, [r3, #24]
}
 8004546:	bf00      	nop
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
	...

08004554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	f5ad 7d2c 	sub.w	sp, sp, #688	@ 0x2b0
 800455a:	af34      	add	r7, sp, #208	@ 0xd0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800455c:	f000 fb30 	bl	8004bc0 <MPU_Config>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8004560:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004564:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8004568:	bf00      	nop
 800456a:	4b53      	ldr	r3, [pc, #332]	@ (80046b8 <main+0x164>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d006      	beq.n	8004584 <main+0x30>
 8004576:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 800457a:	1e5a      	subs	r2, r3, #1
 800457c:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8004580:	2b00      	cmp	r3, #0
 8004582:	dcf2      	bgt.n	800456a <main+0x16>
  if ( timeout < 0 )
 8004584:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8004588:	2b00      	cmp	r3, #0
 800458a:	da01      	bge.n	8004590 <main+0x3c>
  {
  Error_Handler();
 800458c:	f000 fb2a 	bl	8004be4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004590:	f001 fb94 	bl	8005cbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004594:	f000 f8a2 	bl	80046dc <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8004598:	f000 f91c 	bl	80047d4 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800459c:	4b46      	ldr	r3, [pc, #280]	@ (80046b8 <main+0x164>)
 800459e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80045a2:	4a45      	ldr	r2, [pc, #276]	@ (80046b8 <main+0x164>)
 80045a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80045a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80045ac:	4b42      	ldr	r3, [pc, #264]	@ (80046b8 <main+0x164>)
 80045ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80045b2:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 80045b6:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80045ba:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80045be:	601a      	str	r2, [r3, #0]
 80045c0:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80045c4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80045c8:	681b      	ldr	r3, [r3, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80045ca:	2000      	movs	r0, #0
 80045cc:	f001 ff06 	bl	80063dc <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80045d0:	2100      	movs	r1, #0
 80045d2:	2000      	movs	r0, #0
 80045d4:	f001 ff1c 	bl	8006410 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80045d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80045dc:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80045e0:	bf00      	nop
 80045e2:	4b35      	ldr	r3, [pc, #212]	@ (80046b8 <main+0x164>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d106      	bne.n	80045fc <main+0xa8>
 80045ee:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 80045f2:	1e5a      	subs	r2, r3, #1
 80045f4:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	dcf2      	bgt.n	80045e2 <main+0x8e>
if ( timeout < 0 )
 80045fc:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8004600:	2b00      	cmp	r3, #0
 8004602:	da01      	bge.n	8004608 <main+0xb4>
{
Error_Handler();
 8004604:	f000 faee 	bl	8004be4 <Error_Handler>
}
/* USER CODE END Boot_Mode_Sequence_2 */

  /* USER CODE BEGIN SysInit */
ringbuff_init(rb_cm7_to_cm4, (void *)BUFFDATA_CM7_TO_CM4_ADDR, BUFFDATA_CM7_TO_CM4_LEN);
 8004608:	4b2c      	ldr	r3, [pc, #176]	@ (80046bc <main+0x168>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004610:	492b      	ldr	r1, [pc, #172]	@ (80046c0 <main+0x16c>)
 8004612:	4618      	mov	r0, r3
 8004614:	f7fe fbfc 	bl	8002e10 <ringbuff_init>
ringbuff_init(rb_cm4_to_cm7, (void *)BUFFDATA_CM4_TO_CM7_ADDR, BUFFDATA_CM4_TO_CM7_LEN);
 8004618:	4b2a      	ldr	r3, [pc, #168]	@ (80046c4 <main+0x170>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004620:	4929      	ldr	r1, [pc, #164]	@ (80046c8 <main+0x174>)
 8004622:	4618      	mov	r0, r3
 8004624:	f7fe fbf4 	bl	8002e10 <ringbuff_init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
	MX_GPIO_Init();
 8004628:	f000 fa38 	bl	8004a9c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800462c:	f000 f9ea 	bl	8004a04 <MX_USART2_UART_Init>
	//  MX_SDMMC1_MMC_Init();
	SD_Lockin();
 8004630:	f7fd fe56 	bl	80022e0 <SD_Lockin>

	MX_SDMMC2_MMC_Init();
 8004634:	f000 f8f2 	bl	800481c <MX_SDMMC2_MMC_Init>

	MX_USB_DEVICE_Init();
 8004638:	f011 fb28 	bl	8015c8c <MX_USB_DEVICE_Init>
	MX_SPI4_Init();
 800463c:	f000 f912 	bl	8004864 <MX_SPI4_Init>
	MX_SPI5_Init();
 8004640:	f000 f978 	bl	8004934 <MX_SPI5_Init>



	/* USER CODE BEGIN 2 */
	Link_SDFS_Driver();
 8004644:	f7fd ff20 	bl	8002488 <Link_SDFS_Driver>
//  LL_GPIO_ResetOutputPin(GPIOE, SDMMC_SEL1_Pin);
//
//  LL_GPIO_SetOutputPin(GPIOD, SDMMC2_ENA_Pin);
//  LL_GPIO_ResetOutputPin(GPIOE, SDMMC_SEL2_Pin);

     log_struct_t log = {
 8004648:	4a20      	ldr	r2, [pc, #128]	@ (80046cc <main+0x178>)
 800464a:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800464e:	4611      	mov	r1, r2
 8004650:	22d6      	movs	r2, #214	@ 0xd6
 8004652:	4618      	mov	r0, r3
 8004654:	f014 fe67 	bl	8019326 <memcpy>
         .function = "main",
         .line = 172,
         .message = "Start up"
     };
     char log_output[256];
     log_create(log, log_output);
 8004658:	1d3b      	adds	r3, r7, #4
 800465a:	9332      	str	r3, [sp, #200]	@ 0xc8
 800465c:	4668      	mov	r0, sp
 800465e:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8004662:	22c6      	movs	r2, #198	@ 0xc6
 8004664:	4619      	mov	r1, r3
 8004666:	f014 fe5e 	bl	8019326 <memcpy>
 800466a:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800466e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004670:	f7fe f9e6 	bl	8002a40 <log_create>
     if(SDFS_State == SDFS_READY){
 8004674:	4b16      	ldr	r3, [pc, #88]	@ (80046d0 <main+0x17c>)
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10a      	bne.n	8004692 <main+0x13e>
		 if (Vim_SDFS(CM7_FILE, log_output) == 0) {
 800467c:	1d3b      	adds	r3, r7, #4
 800467e:	4619      	mov	r1, r3
 8004680:	4814      	ldr	r0, [pc, #80]	@ (80046d4 <main+0x180>)
 8004682:	f7fe f8b5 	bl	80027f0 <Vim_SDFS>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d002      	beq.n	8004692 <main+0x13e>
//			 CDC_SendString("\r\nContent written successfully.\r\n");
		 } else {
			 CDC_SendString("\r\nFailed to write content.\r\n");
 800468c:	4812      	ldr	r0, [pc, #72]	@ (80046d8 <main+0x184>)
 800468e:	f011 fc27 	bl	8015ee0 <CDC_SendString>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Initialize();
 8004692:	f7fe fa25 	bl	8002ae0 <SCH_Initialize>


  command_create_task();
 8004696:	f7fd fdf9 	bl	800228c <command_create_task>
  RTC_create_task();
 800469a:	f001 fac7 	bl	8005c2c <RTC_create_task>
  status_led_create_task();
 800469e:	f001 f963 	bl	8005968 <status_led_create_task>

  cmdline_init();
 80046a2:	f7fc faed 	bl	8000c80 <cmdline_init>

  DUALCORECMD_create_task();
 80046a6:	f001 f979 	bl	800599c <DUALCORECMD_create_task>
  FAKEEXP_create_task();
 80046aa:	f000 fdeb 	bl	8005284 <FAKEEXP_create_task>

  SCH_StartSchedular();
 80046ae:	f7fe fb41 	bl	8002d34 <SCH_StartSchedular>
{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	SCH_HandleScheduledTask();
 80046b2:	f7fe fb45 	bl	8002d40 <SCH_HandleScheduledTask>
 80046b6:	e7fc      	b.n	80046b2 <main+0x15e>
 80046b8:	58024400 	.word	0x58024400
 80046bc:	2400014c 	.word	0x2400014c
 80046c0:	38000428 	.word	0x38000428
 80046c4:	24000148 	.word	0x24000148
 80046c8:	38000014 	.word	0x38000014
 80046cc:	0801dfc0 	.word	0x0801dfc0
 80046d0:	240006e5 	.word	0x240006e5
 80046d4:	0801df90 	.word	0x0801df90
 80046d8:	0801dfa0 	.word	0x0801dfa0

080046dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 80046e0:	2002      	movs	r0, #2
 80046e2:	f7ff fe1d 	bl	8004320 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 80046e6:	bf00      	nop
 80046e8:	f7ff fe2e 	bl	8004348 <LL_FLASH_GetLatency>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d1fa      	bne.n	80046e8 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_ConfigSupply(LL_PWR_LDO_SUPPLY);
 80046f2:	2002      	movs	r0, #2
 80046f4:	f7ff fe7e 	bl	80043f4 <LL_PWR_ConfigSupply>
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 80046f8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80046fc:	f7ff fe8e 	bl	800441c <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8004700:	bf00      	nop
 8004702:	f7ff fe9f 	bl	8004444 <LL_PWR_IsActiveFlag_VOS>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d0fa      	beq.n	8004702 <SystemClock_Config+0x26>
  {
  }
  LL_RCC_HSE_Enable();
 800470c:	f7ff fae4 	bl	8003cd8 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8004710:	bf00      	nop
 8004712:	f7ff faf1 	bl	8003cf8 <LL_RCC_HSE_IsReady>
 8004716:	4603      	mov	r3, r0
 8004718:	2b01      	cmp	r3, #1
 800471a:	d1fa      	bne.n	8004712 <SystemClock_Config+0x36>
  {

  }
  LL_RCC_HSI48_Enable();
 800471c:	f7ff fb00 	bl	8003d20 <LL_RCC_HSI48_Enable>

   /* Wait till HSI48 is ready */
  while(LL_RCC_HSI48_IsReady() != 1)
 8004720:	bf00      	nop
 8004722:	f7ff fb0d 	bl	8003d40 <LL_RCC_HSI48_IsReady>
 8004726:	4603      	mov	r3, r0
 8004728:	2b01      	cmp	r3, #1
 800472a:	d1fa      	bne.n	8004722 <SystemClock_Config+0x46>
  {

  }
  LL_RCC_PLL_SetSource(LL_RCC_PLLSOURCE_HSE);
 800472c:	2002      	movs	r0, #2
 800472e:	f7ff fbeb 	bl	8003f08 <LL_RCC_PLL_SetSource>
  LL_RCC_PLL1P_Enable();
 8004732:	f7ff fc21 	bl	8003f78 <LL_RCC_PLL1P_Enable>
  LL_RCC_PLL1Q_Enable();
 8004736:	f7ff fc2f 	bl	8003f98 <LL_RCC_PLL1Q_Enable>
  LL_RCC_PLL1R_Enable();
 800473a:	f7ff fc3d 	bl	8003fb8 <LL_RCC_PLL1R_Enable>
  LL_RCC_PLL1_SetVCOInputRange(LL_RCC_PLLINPUTRANGE_4_8);
 800473e:	2002      	movs	r0, #2
 8004740:	f7ff fc60 	bl	8004004 <LL_RCC_PLL1_SetVCOInputRange>
  LL_RCC_PLL1_SetVCOOutputRange(LL_RCC_PLLVCORANGE_WIDE);
 8004744:	2000      	movs	r0, #0
 8004746:	f7ff fc47 	bl	8003fd8 <LL_RCC_PLL1_SetVCOOutputRange>
  LL_RCC_PLL1_SetM(5);
 800474a:	2005      	movs	r0, #5
 800474c:	f7ff fc88 	bl	8004060 <LL_RCC_PLL1_SetM>
  LL_RCC_PLL1_SetN(96);
 8004750:	2060      	movs	r0, #96	@ 0x60
 8004752:	f7ff fc6d 	bl	8004030 <LL_RCC_PLL1_SetN>
  LL_RCC_PLL1_SetP(2);
 8004756:	2002      	movs	r0, #2
 8004758:	f7ff fc98 	bl	800408c <LL_RCC_PLL1_SetP>
  LL_RCC_PLL1_SetQ(8);
 800475c:	2008      	movs	r0, #8
 800475e:	f7ff fcab 	bl	80040b8 <LL_RCC_PLL1_SetQ>
  LL_RCC_PLL1_SetR(4);
 8004762:	2004      	movs	r0, #4
 8004764:	f7ff fcbe 	bl	80040e4 <LL_RCC_PLL1_SetR>
  LL_RCC_PLL1_Enable();
 8004768:	f7ff fbe2 	bl	8003f30 <LL_RCC_PLL1_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL1_IsReady() != 1)
 800476c:	bf00      	nop
 800476e:	f7ff fbef 	bl	8003f50 <LL_RCC_PLL1_IsReady>
 8004772:	4603      	mov	r3, r0
 8004774:	2b01      	cmp	r3, #1
 8004776:	d1fa      	bne.n	800476e <SystemClock_Config+0x92>
  {
  }

   /* Intermediate AHB prescaler 2 when target frequency clock is higher than 80 MHz */
   LL_RCC_SetAHBPrescaler(LL_RCC_AHB_DIV_2);
 8004778:	2008      	movs	r0, #8
 800477a:	f7ff fb2b 	bl	8003dd4 <LL_RCC_SetAHBPrescaler>

  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL1);
 800477e:	2003      	movs	r0, #3
 8004780:	f7ff faf2 	bl	8003d68 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL1)
 8004784:	bf00      	nop
 8004786:	f7ff fb03 	bl	8003d90 <LL_RCC_GetSysClkSource>
 800478a:	4603      	mov	r3, r0
 800478c:	2b18      	cmp	r3, #24
 800478e:	d1fa      	bne.n	8004786 <SystemClock_Config+0xaa>
  {

  }
  LL_RCC_SetSysPrescaler(LL_RCC_SYSCLK_DIV_1);
 8004790:	2000      	movs	r0, #0
 8004792:	f7ff fb0b 	bl	8003dac <LL_RCC_SetSysPrescaler>
  LL_RCC_SetAHBPrescaler(LL_RCC_AHB_DIV_2);
 8004796:	2008      	movs	r0, #8
 8004798:	f7ff fb1c 	bl	8003dd4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 800479c:	2040      	movs	r0, #64	@ 0x40
 800479e:	f7ff fb2d 	bl	8003dfc <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 80047a2:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80047a6:	f7ff fb3d 	bl	8003e24 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetAPB3Prescaler(LL_RCC_APB3_DIV_2);
 80047aa:	2040      	movs	r0, #64	@ 0x40
 80047ac:	f7ff fb4e 	bl	8003e4c <LL_RCC_SetAPB3Prescaler>
  LL_RCC_SetAPB4Prescaler(LL_RCC_APB4_DIV_2);
 80047b0:	2040      	movs	r0, #64	@ 0x40
 80047b2:	f7ff fb5f 	bl	8003e74 <LL_RCC_SetAPB4Prescaler>
  LL_SetSystemCoreClock(240000000);
 80047b6:	4806      	ldr	r0, [pc, #24]	@ (80047d0 <SystemClock_Config+0xf4>)
 80047b8:	f009 fcf2 	bl	800e1a0 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80047bc:	200f      	movs	r0, #15
 80047be:	f001 fab9 	bl	8005d34 <HAL_InitTick>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d001      	beq.n	80047cc <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80047c8:	f000 fa0c 	bl	8004be4 <Error_Handler>
  }
}
 80047cc:	bf00      	nop
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	0e4e1c00 	.word	0x0e4e1c00

080047d4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	af00      	add	r7, sp, #0
  LL_RCC_PLL2Q_Enable();
 80047d8:	f7ff fcbe 	bl	8004158 <LL_RCC_PLL2Q_Enable>
  LL_RCC_PLL2_SetVCOInputRange(LL_RCC_PLLINPUTRANGE_4_8);
 80047dc:	2002      	movs	r0, #2
 80047de:	f7ff fce1 	bl	80041a4 <LL_RCC_PLL2_SetVCOInputRange>
  LL_RCC_PLL2_SetVCOOutputRange(LL_RCC_PLLVCORANGE_WIDE);
 80047e2:	2000      	movs	r0, #0
 80047e4:	f7ff fcc8 	bl	8004178 <LL_RCC_PLL2_SetVCOOutputRange>
  LL_RCC_PLL2_SetM(5);
 80047e8:	2005      	movs	r0, #5
 80047ea:	f7ff fd09 	bl	8004200 <LL_RCC_PLL2_SetM>
  LL_RCC_PLL2_SetN(48);
 80047ee:	2030      	movs	r0, #48	@ 0x30
 80047f0:	f7ff fcee 	bl	80041d0 <LL_RCC_PLL2_SetN>
  LL_RCC_PLL2_SetP(2);
 80047f4:	2002      	movs	r0, #2
 80047f6:	f7ff fd19 	bl	800422c <LL_RCC_PLL2_SetP>
  LL_RCC_PLL2_SetQ(30);
 80047fa:	201e      	movs	r0, #30
 80047fc:	f7ff fd2c 	bl	8004258 <LL_RCC_PLL2_SetQ>
  LL_RCC_PLL2_SetR(4);
 8004800:	2004      	movs	r0, #4
 8004802:	f7ff fd3f 	bl	8004284 <LL_RCC_PLL2_SetR>
  LL_RCC_PLL2_Enable();
 8004806:	f7ff fc83 	bl	8004110 <LL_RCC_PLL2_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL2_IsReady() != 1)
 800480a:	bf00      	nop
 800480c:	f7ff fc90 	bl	8004130 <LL_RCC_PLL2_IsReady>
 8004810:	4603      	mov	r3, r0
 8004812:	2b01      	cmp	r3, #1
 8004814:	d1fa      	bne.n	800480c <PeriphCommonClock_Config+0x38>
  {
  }

}
 8004816:	bf00      	nop
 8004818:	bf00      	nop
 800481a:	bd80      	pop	{r7, pc}

0800481c <MX_SDMMC2_MMC_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_MMC_Init(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hmmc2.Instance = SDMMC2;
 8004820:	4b0e      	ldr	r3, [pc, #56]	@ (800485c <MX_SDMMC2_MMC_Init+0x40>)
 8004822:	4a0f      	ldr	r2, [pc, #60]	@ (8004860 <MX_SDMMC2_MMC_Init+0x44>)
 8004824:	601a      	str	r2, [r3, #0]
  hmmc2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8004826:	4b0d      	ldr	r3, [pc, #52]	@ (800485c <MX_SDMMC2_MMC_Init+0x40>)
 8004828:	2200      	movs	r2, #0
 800482a:	605a      	str	r2, [r3, #4]
  hmmc2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800482c:	4b0b      	ldr	r3, [pc, #44]	@ (800485c <MX_SDMMC2_MMC_Init+0x40>)
 800482e:	2200      	movs	r2, #0
 8004830:	609a      	str	r2, [r3, #8]
  hmmc2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8004832:	4b0a      	ldr	r3, [pc, #40]	@ (800485c <MX_SDMMC2_MMC_Init+0x40>)
 8004834:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004838:	60da      	str	r2, [r3, #12]
  hmmc2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800483a:	4b08      	ldr	r3, [pc, #32]	@ (800485c <MX_SDMMC2_MMC_Init+0x40>)
 800483c:	2200      	movs	r2, #0
 800483e:	611a      	str	r2, [r3, #16]
  hmmc2.Init.ClockDiv = 5;
 8004840:	4b06      	ldr	r3, [pc, #24]	@ (800485c <MX_SDMMC2_MMC_Init+0x40>)
 8004842:	2205      	movs	r2, #5
 8004844:	615a      	str	r2, [r3, #20]
  if (HAL_MMC_Init(&hmmc2) != HAL_OK)
 8004846:	4805      	ldr	r0, [pc, #20]	@ (800485c <MX_SDMMC2_MMC_Init+0x40>)
 8004848:	f001 fdf6 	bl	8006438 <HAL_MMC_Init>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <MX_SDMMC2_MMC_Init+0x3a>
  {
    Error_Handler();
 8004852:	f000 f9c7 	bl	8004be4 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8004856:	bf00      	nop
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	24001db0 	.word	0x24001db0
 8004860:	48022400 	.word	0x48022400

08004864 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b090      	sub	sp, #64	@ 0x40
 8004868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 0 */

  /* USER CODE END SPI4_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800486a:	f107 0318 	add.w	r3, r7, #24
 800486e:	2228      	movs	r2, #40	@ 0x28
 8004870:	2100      	movs	r1, #0
 8004872:	4618      	mov	r0, r3
 8004874:	f013 ff24 	bl	80186c0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004878:	463b      	mov	r3, r7
 800487a:	2200      	movs	r2, #0
 800487c:	601a      	str	r2, [r3, #0]
 800487e:	605a      	str	r2, [r3, #4]
 8004880:	609a      	str	r2, [r3, #8]
 8004882:	60da      	str	r2, [r3, #12]
 8004884:	611a      	str	r2, [r3, #16]
 8004886:	615a      	str	r2, [r3, #20]

  LL_RCC_SetSPIClockSource(LL_RCC_SPI45_CLKSOURCE_PLL2Q);
 8004888:	4827      	ldr	r0, [pc, #156]	@ (8004928 <MX_SPI4_Init+0xc4>)
 800488a:	f7ff fb31 	bl	8003ef0 <LL_RCC_SetSPIClockSource>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI4);
 800488e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004892:	f7ff fd29 	bl	80042e8 <LL_APB2_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOE);
 8004896:	2010      	movs	r0, #16
 8004898:	f7ff fd0a 	bl	80042b0 <LL_AHB4_GRP1_EnableClock>
  /**SPI4 GPIO Configuration
  PE5   ------> SPI4_MISO
  PE6   ------> SPI4_MOSI
  PE12   ------> SPI4_SCK
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_12;
 800489c:	f44f 5383 	mov.w	r3, #4192	@ 0x1060
 80048a0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80048a2:	2302      	movs	r3, #2
 80048a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80048a6:	2303      	movs	r3, #3
 80048a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80048aa:	2300      	movs	r3, #0
 80048ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80048ae:	2300      	movs	r3, #0
 80048b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80048b2:	2305      	movs	r3, #5
 80048b4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80048b6:	463b      	mov	r3, r7
 80048b8:	4619      	mov	r1, r3
 80048ba:	481c      	ldr	r0, [pc, #112]	@ (800492c <MX_SPI4_Init+0xc8>)
 80048bc:	f007 fb4c 	bl	800bf58 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80048c0:	2300      	movs	r3, #0
 80048c2:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80048c4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80048c8:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80048ca:	2307      	movs	r3, #7
 80048cc:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80048ce:	2300      	movs	r3, #0
 80048d0:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80048d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80048d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80048d8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80048dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 80048de:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80048e2:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80048e4:	2300      	movs	r3, #0
 80048e6:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80048e8:	2300      	movs	r3, #0
 80048ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 0x0;
 80048ec:	2300      	movs	r3, #0
 80048ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI4, &SPI_InitStruct);
 80048f0:	f107 0318 	add.w	r3, r7, #24
 80048f4:	4619      	mov	r1, r3
 80048f6:	480e      	ldr	r0, [pc, #56]	@ (8004930 <MX_SPI4_Init+0xcc>)
 80048f8:	f008 f880 	bl	800c9fc <LL_SPI_Init>
  LL_SPI_SetStandard(SPI4, LL_SPI_PROTOCOL_MOTOROLA);
 80048fc:	2100      	movs	r1, #0
 80048fe:	480c      	ldr	r0, [pc, #48]	@ (8004930 <MX_SPI4_Init+0xcc>)
 8004900:	f7ff fdd4 	bl	80044ac <LL_SPI_SetStandard>
  LL_SPI_SetFIFOThreshold(SPI4, LL_SPI_FIFO_TH_01DATA);
 8004904:	2100      	movs	r1, #0
 8004906:	480a      	ldr	r0, [pc, #40]	@ (8004930 <MX_SPI4_Init+0xcc>)
 8004908:	f7ff fde3 	bl	80044d2 <LL_SPI_SetFIFOThreshold>
  LL_SPI_EnableNSSPulseMgt(SPI4);
 800490c:	4808      	ldr	r0, [pc, #32]	@ (8004930 <MX_SPI4_Init+0xcc>)
 800490e:	f7ff fdf3 	bl	80044f8 <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI4_Init 2 */
  LL_SPI_Enable(SPI4);
 8004912:	4807      	ldr	r0, [pc, #28]	@ (8004930 <MX_SPI4_Init+0xcc>)
 8004914:	f7ff fdaa 	bl	800446c <LL_SPI_Enable>
  LL_SPI_StartMasterTransfer(SPI4);
 8004918:	4805      	ldr	r0, [pc, #20]	@ (8004930 <MX_SPI4_Init+0xcc>)
 800491a:	f7ff fdb7 	bl	800448c <LL_SPI_StartMasterTransfer>
  /* USER CODE END SPI4_Init 2 */

}
 800491e:	bf00      	nop
 8004920:	3740      	adds	r7, #64	@ 0x40
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	07011004 	.word	0x07011004
 800492c:	58021000 	.word	0x58021000
 8004930:	40013400 	.word	0x40013400

08004934 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b090      	sub	sp, #64	@ 0x40
 8004938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 0 */

  /* USER CODE END SPI5_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800493a:	f107 0318 	add.w	r3, r7, #24
 800493e:	2228      	movs	r2, #40	@ 0x28
 8004940:	2100      	movs	r1, #0
 8004942:	4618      	mov	r0, r3
 8004944:	f013 febc 	bl	80186c0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004948:	463b      	mov	r3, r7
 800494a:	2200      	movs	r2, #0
 800494c:	601a      	str	r2, [r3, #0]
 800494e:	605a      	str	r2, [r3, #4]
 8004950:	609a      	str	r2, [r3, #8]
 8004952:	60da      	str	r2, [r3, #12]
 8004954:	611a      	str	r2, [r3, #16]
 8004956:	615a      	str	r2, [r3, #20]

  LL_RCC_SetSPIClockSource(LL_RCC_SPI45_CLKSOURCE_PLL2Q);
 8004958:	4827      	ldr	r0, [pc, #156]	@ (80049f8 <MX_SPI5_Init+0xc4>)
 800495a:	f7ff fac9 	bl	8003ef0 <LL_RCC_SetSPIClockSource>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI5);
 800495e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8004962:	f7ff fcc1 	bl	80042e8 <LL_APB2_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOF);
 8004966:	2020      	movs	r0, #32
 8004968:	f7ff fca2 	bl	80042b0 <LL_AHB4_GRP1_EnableClock>
  /**SPI5 GPIO Configuration
  PF7   ------> SPI5_SCK
  PF8   ------> SPI5_MISO
  PF9   ------> SPI5_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 800496c:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8004970:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004972:	2302      	movs	r3, #2
 8004974:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004976:	2300      	movs	r3, #0
 8004978:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800497a:	2300      	movs	r3, #0
 800497c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800497e:	2300      	movs	r3, #0
 8004980:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8004982:	2305      	movs	r3, #5
 8004984:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004986:	463b      	mov	r3, r7
 8004988:	4619      	mov	r1, r3
 800498a:	481c      	ldr	r0, [pc, #112]	@ (80049fc <MX_SPI5_Init+0xc8>)
 800498c:	f007 fae4 	bl	800bf58 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8004990:	2300      	movs	r3, #0
 8004992:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8004994:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004998:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800499a:	2307      	movs	r3, #7
 800499c:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 800499e:	2300      	movs	r3, #0
 80049a0:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80049a2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80049a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80049a8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80049ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32;
 80049ae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80049b2:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80049b4:	2300      	movs	r3, #0
 80049b6:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80049b8:	2300      	movs	r3, #0
 80049ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 0x0;
 80049bc:	2300      	movs	r3, #0
 80049be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI5, &SPI_InitStruct);
 80049c0:	f107 0318 	add.w	r3, r7, #24
 80049c4:	4619      	mov	r1, r3
 80049c6:	480e      	ldr	r0, [pc, #56]	@ (8004a00 <MX_SPI5_Init+0xcc>)
 80049c8:	f008 f818 	bl	800c9fc <LL_SPI_Init>
  LL_SPI_SetStandard(SPI5, LL_SPI_PROTOCOL_MOTOROLA);
 80049cc:	2100      	movs	r1, #0
 80049ce:	480c      	ldr	r0, [pc, #48]	@ (8004a00 <MX_SPI5_Init+0xcc>)
 80049d0:	f7ff fd6c 	bl	80044ac <LL_SPI_SetStandard>
  LL_SPI_SetFIFOThreshold(SPI5, LL_SPI_FIFO_TH_01DATA);
 80049d4:	2100      	movs	r1, #0
 80049d6:	480a      	ldr	r0, [pc, #40]	@ (8004a00 <MX_SPI5_Init+0xcc>)
 80049d8:	f7ff fd7b 	bl	80044d2 <LL_SPI_SetFIFOThreshold>
  LL_SPI_EnableNSSPulseMgt(SPI5);
 80049dc:	4808      	ldr	r0, [pc, #32]	@ (8004a00 <MX_SPI5_Init+0xcc>)
 80049de:	f7ff fd8b 	bl	80044f8 <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI5_Init 2 */
  LL_SPI_Enable(SPI5);
 80049e2:	4807      	ldr	r0, [pc, #28]	@ (8004a00 <MX_SPI5_Init+0xcc>)
 80049e4:	f7ff fd42 	bl	800446c <LL_SPI_Enable>
  LL_SPI_StartMasterTransfer(SPI5);
 80049e8:	4805      	ldr	r0, [pc, #20]	@ (8004a00 <MX_SPI5_Init+0xcc>)
 80049ea:	f7ff fd4f 	bl	800448c <LL_SPI_StartMasterTransfer>
  /* USER CODE END SPI5_Init 2 */

}
 80049ee:	bf00      	nop
 80049f0:	3740      	adds	r7, #64	@ 0x40
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	07011004 	.word	0x07011004
 80049fc:	58021400 	.word	0x58021400
 8004a00:	40015000 	.word	0x40015000

08004a04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004a08:	4b22      	ldr	r3, [pc, #136]	@ (8004a94 <MX_USART2_UART_Init+0x90>)
 8004a0a:	4a23      	ldr	r2, [pc, #140]	@ (8004a98 <MX_USART2_UART_Init+0x94>)
 8004a0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004a0e:	4b21      	ldr	r3, [pc, #132]	@ (8004a94 <MX_USART2_UART_Init+0x90>)
 8004a10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004a14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004a16:	4b1f      	ldr	r3, [pc, #124]	@ (8004a94 <MX_USART2_UART_Init+0x90>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8004a94 <MX_USART2_UART_Init+0x90>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004a22:	4b1c      	ldr	r3, [pc, #112]	@ (8004a94 <MX_USART2_UART_Init+0x90>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004a28:	4b1a      	ldr	r3, [pc, #104]	@ (8004a94 <MX_USART2_UART_Init+0x90>)
 8004a2a:	220c      	movs	r2, #12
 8004a2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a2e:	4b19      	ldr	r3, [pc, #100]	@ (8004a94 <MX_USART2_UART_Init+0x90>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a34:	4b17      	ldr	r3, [pc, #92]	@ (8004a94 <MX_USART2_UART_Init+0x90>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004a3a:	4b16      	ldr	r3, [pc, #88]	@ (8004a94 <MX_USART2_UART_Init+0x90>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004a40:	4b14      	ldr	r3, [pc, #80]	@ (8004a94 <MX_USART2_UART_Init+0x90>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004a46:	4b13      	ldr	r3, [pc, #76]	@ (8004a94 <MX_USART2_UART_Init+0x90>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004a4c:	4811      	ldr	r0, [pc, #68]	@ (8004a94 <MX_USART2_UART_Init+0x90>)
 8004a4e:	f006 f83f 	bl	800aad0 <HAL_UART_Init>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d001      	beq.n	8004a5c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8004a58:	f000 f8c4 	bl	8004be4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004a5c:	2100      	movs	r1, #0
 8004a5e:	480d      	ldr	r0, [pc, #52]	@ (8004a94 <MX_USART2_UART_Init+0x90>)
 8004a60:	f007 f8d5 	bl	800bc0e <HAL_UARTEx_SetTxFifoThreshold>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8004a6a:	f000 f8bb 	bl	8004be4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004a6e:	2100      	movs	r1, #0
 8004a70:	4808      	ldr	r0, [pc, #32]	@ (8004a94 <MX_USART2_UART_Init+0x90>)
 8004a72:	f007 f90a 	bl	800bc8a <HAL_UARTEx_SetRxFifoThreshold>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d001      	beq.n	8004a80 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8004a7c:	f000 f8b2 	bl	8004be4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004a80:	4804      	ldr	r0, [pc, #16]	@ (8004a94 <MX_USART2_UART_Init+0x90>)
 8004a82:	f007 f88b 	bl	800bb9c <HAL_UARTEx_DisableFifoMode>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d001      	beq.n	8004a90 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8004a8c:	f000 f8aa 	bl	8004be4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004a90:	bf00      	nop
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	24002024 	.word	0x24002024
 8004a98:	40004400 	.word	0x40004400

08004a9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004aa2:	463b      	mov	r3, r7
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	601a      	str	r2, [r3, #0]
 8004aa8:	605a      	str	r2, [r3, #4]
 8004aaa:	609a      	str	r2, [r3, #8]
 8004aac:	60da      	str	r2, [r3, #12]
 8004aae:	611a      	str	r2, [r3, #16]
 8004ab0:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOE);
 8004ab2:	2010      	movs	r0, #16
 8004ab4:	f7ff fbfc 	bl	80042b0 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOF);
 8004ab8:	2020      	movs	r0, #32
 8004aba:	f7ff fbf9 	bl	80042b0 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOC);
 8004abe:	2004      	movs	r0, #4
 8004ac0:	f7ff fbf6 	bl	80042b0 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 8004ac4:	2001      	movs	r0, #1
 8004ac6:	f7ff fbf3 	bl	80042b0 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOB);
 8004aca:	2002      	movs	r0, #2
 8004acc:	f7ff fbf0 	bl	80042b0 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOD);
 8004ad0:	2008      	movs	r0, #8
 8004ad2:	f7ff fbed 	bl	80042b0 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOG);
 8004ad6:	2040      	movs	r0, #64	@ 0x40
 8004ad8:	f7ff fbea 	bl	80042b0 <LL_AHB4_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, CS_RTC_Pin|SDMMC_CTRL_ENA_Pin|SDMMC_SEL1_Pin|SDMMC_SEL2_Pin);
 8004adc:	f24e 0110 	movw	r1, #57360	@ 0xe010
 8004ae0:	482a      	ldr	r0, [pc, #168]	@ (8004b8c <MX_GPIO_Init+0xf0>)
 8004ae2:	f7ff fd27 	bl	8004534 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 8004ae6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004aea:	4829      	ldr	r0, [pc, #164]	@ (8004b90 <MX_GPIO_Init+0xf4>)
 8004aec:	f7ff fd22 	bl	8004534 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, SDMMC2_ENA_Pin|SDMMC1_ENA_Pin);
 8004af0:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8004af4:	4827      	ldr	r0, [pc, #156]	@ (8004b94 <MX_GPIO_Init+0xf8>)
 8004af6:	f7ff fd1d 	bl	8004534 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(HUB_RESET_GPIO_Port, HUB_RESET_Pin);
 8004afa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004afe:	4826      	ldr	r0, [pc, #152]	@ (8004b98 <MX_GPIO_Init+0xfc>)
 8004b00:	f7ff fd0a 	bl	8004518 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = CS_RTC_Pin|SDMMC_CTRL_ENA_Pin|SDMMC_SEL1_Pin|SDMMC_SEL2_Pin;
 8004b04:	f24e 0310 	movw	r3, #57360	@ 0xe010
 8004b08:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004b12:	2300      	movs	r3, #0
 8004b14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004b16:	2300      	movs	r3, #0
 8004b18:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004b1a:	463b      	mov	r3, r7
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	481b      	ldr	r0, [pc, #108]	@ (8004b8c <MX_GPIO_Init+0xf0>)
 8004b20:	f007 fa1a 	bl	800bf58 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_DEBUG_Pin;
 8004b24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b28:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004b32:	2300      	movs	r3, #0
 8004b34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004b36:	2300      	movs	r3, #0
 8004b38:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED_DEBUG_GPIO_Port, &GPIO_InitStruct);
 8004b3a:	463b      	mov	r3, r7
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	4814      	ldr	r0, [pc, #80]	@ (8004b90 <MX_GPIO_Init+0xf4>)
 8004b40:	f007 fa0a 	bl	800bf58 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SDMMC2_ENA_Pin|SDMMC1_ENA_Pin;
 8004b44:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 8004b48:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004b52:	2300      	movs	r3, #0
 8004b54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004b56:	2300      	movs	r3, #0
 8004b58:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b5a:	463b      	mov	r3, r7
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	480d      	ldr	r0, [pc, #52]	@ (8004b94 <MX_GPIO_Init+0xf8>)
 8004b60:	f007 f9fa 	bl	800bf58 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = HUB_RESET_Pin;
 8004b64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004b68:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004b72:	2300      	movs	r3, #0
 8004b74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004b76:	2300      	movs	r3, #0
 8004b78:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(HUB_RESET_GPIO_Port, &GPIO_InitStruct);
 8004b7a:	463b      	mov	r3, r7
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	4806      	ldr	r0, [pc, #24]	@ (8004b98 <MX_GPIO_Init+0xfc>)
 8004b80:	f007 f9ea 	bl	800bf58 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004b84:	bf00      	nop
 8004b86:	3718      	adds	r7, #24
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	58021000 	.word	0x58021000
 8004b90:	58021400 	.word	0x58021400
 8004b94:	58020c00 	.word	0x58020c00
 8004b98:	58020400 	.word	0x58020400

08004b9c <__io_putchar>:

/* USER CODE BEGIN 4 */
PRINTF2USART2{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) &data, 1, 0xFFFF);
 8004ba4:	1d39      	adds	r1, r7, #4
 8004ba6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004baa:	2201      	movs	r2, #1
 8004bac:	4803      	ldr	r0, [pc, #12]	@ (8004bbc <__io_putchar+0x20>)
 8004bae:	f005 ffdf 	bl	800ab70 <HAL_UART_Transmit>
	return data;
 8004bb2:	687b      	ldr	r3, [r7, #4]
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3708      	adds	r7, #8
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	24002024 	.word	0x24002024

08004bc0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	af00      	add	r7, sp, #0

  /* Disables the MPU */
  LL_MPU_Disable();
 8004bc4:	f7ff fbe6 	bl	8004394 <LL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  LL_MPU_ConfigRegion(LL_MPU_REGION_NUMBER0, 0x87, 0x0, LL_MPU_REGION_SIZE_4GB|LL_MPU_TEX_LEVEL0|LL_MPU_REGION_NO_ACCESS|LL_MPU_INSTRUCTION_ACCESS_DISABLE|LL_MPU_ACCESS_SHAREABLE|LL_MPU_ACCESS_NOT_CACHEABLE|LL_MPU_ACCESS_NOT_BUFFERABLE);
 8004bc8:	4b05      	ldr	r3, [pc, #20]	@ (8004be0 <MPU_Config+0x20>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	2187      	movs	r1, #135	@ 0x87
 8004bce:	2000      	movs	r0, #0
 8004bd0:	f7ff fbf0 	bl	80043b4 <LL_MPU_ConfigRegion>
  /* Enables the MPU */
  LL_MPU_Enable(LL_MPU_CTRL_PRIVILEGED_DEFAULT);
 8004bd4:	2004      	movs	r0, #4
 8004bd6:	f7ff fbc5 	bl	8004364 <LL_MPU_Enable>

}
 8004bda:	bf00      	nop
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	1004003e 	.word	0x1004003e

08004be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	printf("Error_Handler!\r\n");
 8004be8:	480b      	ldr	r0, [pc, #44]	@ (8004c18 <Error_Handler+0x34>)
 8004bea:	f013 fbf9 	bl	80183e0 <puts>
	while(1){
		HAL_GPIO_WritePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin, 1);
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004bf4:	4809      	ldr	r0, [pc, #36]	@ (8004c1c <Error_Handler+0x38>)
 8004bf6:	f001 fbd7 	bl	80063a8 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8004bfa:	2032      	movs	r0, #50	@ 0x32
 8004bfc:	f001 f8f0 	bl	8005de0 <HAL_Delay>
		HAL_GPIO_WritePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin, 0);
 8004c00:	2200      	movs	r2, #0
 8004c02:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004c06:	4805      	ldr	r0, [pc, #20]	@ (8004c1c <Error_Handler+0x38>)
 8004c08:	f001 fbce 	bl	80063a8 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8004c0c:	2032      	movs	r0, #50	@ 0x32
 8004c0e:	f001 f8e7 	bl	8005de0 <HAL_Delay>
		HAL_GPIO_WritePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin, 1);
 8004c12:	bf00      	nop
 8004c14:	e7eb      	b.n	8004bee <Error_Handler+0xa>
 8004c16:	bf00      	nop
 8004c18:	0801e098 	.word	0x0801e098
 8004c1c:	58021400 	.word	0x58021400

08004c20 <LL_RCC_SetClockSource>:
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->D1CCIPR + LL_CLKSOURCE_REG(ClkSource));
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	b2da      	uxtb	r2, r3
 8004c2c:	4b10      	ldr	r3, [pc, #64]	@ (8004c70 <LL_RCC_SetClockSource+0x50>)
 8004c2e:	4413      	add	r3, r2
 8004c30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*pReg, LL_CLKSOURCE_MASK(ClkSource), LL_CLKSOURCE_CONFIG(ClkSource));
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	0e19      	lsrs	r1, r3, #24
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	0a1b      	lsrs	r3, r3, #8
 8004c3e:	f003 031f 	and.w	r3, r3, #31
 8004c42:	fa01 f303 	lsl.w	r3, r1, r3
 8004c46:	43db      	mvns	r3, r3
 8004c48:	401a      	ands	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	0c1b      	lsrs	r3, r3, #16
 8004c4e:	b2d9      	uxtb	r1, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	0a1b      	lsrs	r3, r3, #8
 8004c54:	f003 031f 	and.w	r3, r3, #31
 8004c58:	fa01 f303 	lsl.w	r3, r1, r3
 8004c5c:	431a      	orrs	r2, r3
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	601a      	str	r2, [r3, #0]
}
 8004c62:	bf00      	nop
 8004c64:	3714      	adds	r7, #20
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	5802444c 	.word	0x5802444c

08004c74 <LL_RCC_SetUSARTClockSource>:
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f7ff ffcf 	bl	8004c20 <LL_RCC_SetClockSource>
}
 8004c82:	bf00      	nop
 8004c84:	3708      	adds	r7, #8
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
	...

08004c8c <LL_RCC_SetSDMMCClockSource>:
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->D1CCIPR, RCC_D1CCIPR_SDMMCSEL, ClkSource);
 8004c94:	4b06      	ldr	r3, [pc, #24]	@ (8004cb0 <LL_RCC_SetSDMMCClockSource+0x24>)
 8004c96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c98:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004c9c:	4904      	ldr	r1, [pc, #16]	@ (8004cb0 <LL_RCC_SetSDMMCClockSource+0x24>)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	64cb      	str	r3, [r1, #76]	@ 0x4c
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr
 8004cb0:	58024400 	.word	0x58024400

08004cb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cba:	4b0a      	ldr	r3, [pc, #40]	@ (8004ce4 <HAL_MspInit+0x30>)
 8004cbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004cc0:	4a08      	ldr	r2, [pc, #32]	@ (8004ce4 <HAL_MspInit+0x30>)
 8004cc2:	f043 0302 	orr.w	r3, r3, #2
 8004cc6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004cca:	4b06      	ldr	r3, [pc, #24]	@ (8004ce4 <HAL_MspInit+0x30>)
 8004ccc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004cd0:	f003 0302 	and.w	r3, r3, #2
 8004cd4:	607b      	str	r3, [r7, #4]
 8004cd6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr
 8004ce4:	58024400 	.word	0x58024400

08004ce8 <HAL_MMC_MspInit>:
* This function configures the hardware resources used in this example
* @param hmmc: MMC handle pointer
* @retval None
*/
void HAL_MMC_MspInit(MMC_HandleTypeDef* hmmc)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b090      	sub	sp, #64	@ 0x40
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cf0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	601a      	str	r2, [r3, #0]
 8004cf8:	605a      	str	r2, [r3, #4]
 8004cfa:	609a      	str	r2, [r3, #8]
 8004cfc:	60da      	str	r2, [r3, #12]
 8004cfe:	611a      	str	r2, [r3, #16]
  if(hmmc->Instance==SDMMC1)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a7f      	ldr	r2, [pc, #508]	@ (8004f04 <HAL_MMC_MspInit+0x21c>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d159      	bne.n	8004dbe <HAL_MMC_MspInit+0xd6>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    LL_RCC_SetSDMMCClockSource(LL_RCC_SDMMC_CLKSOURCE_PLL1Q);
 8004d0a:	2000      	movs	r0, #0
 8004d0c:	f7ff ffbe 	bl	8004c8c <LL_RCC_SetSDMMCClockSource>

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8004d10:	4b7d      	ldr	r3, [pc, #500]	@ (8004f08 <HAL_MMC_MspInit+0x220>)
 8004d12:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004d16:	4a7c      	ldr	r2, [pc, #496]	@ (8004f08 <HAL_MMC_MspInit+0x220>)
 8004d18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d1c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8004d20:	4b79      	ldr	r3, [pc, #484]	@ (8004f08 <HAL_MMC_MspInit+0x220>)
 8004d22:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004d26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d2e:	4b76      	ldr	r3, [pc, #472]	@ (8004f08 <HAL_MMC_MspInit+0x220>)
 8004d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d34:	4a74      	ldr	r2, [pc, #464]	@ (8004f08 <HAL_MMC_MspInit+0x220>)
 8004d36:	f043 0304 	orr.w	r3, r3, #4
 8004d3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004d3e:	4b72      	ldr	r3, [pc, #456]	@ (8004f08 <HAL_MMC_MspInit+0x220>)
 8004d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d44:	f003 0304 	and.w	r3, r3, #4
 8004d48:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004d4c:	4b6e      	ldr	r3, [pc, #440]	@ (8004f08 <HAL_MMC_MspInit+0x220>)
 8004d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d52:	4a6d      	ldr	r2, [pc, #436]	@ (8004f08 <HAL_MMC_MspInit+0x220>)
 8004d54:	f043 0308 	orr.w	r3, r3, #8
 8004d58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004d5c:	4b6a      	ldr	r3, [pc, #424]	@ (8004f08 <HAL_MMC_MspInit+0x220>)
 8004d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d62:	f003 0308 	and.w	r3, r3, #8
 8004d66:	623b      	str	r3, [r7, #32]
 8004d68:	6a3b      	ldr	r3, [r7, #32]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004d6a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8004d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d70:	2302      	movs	r3, #2
 8004d72:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d74:	2301      	movs	r3, #1
 8004d76:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8004d7c:	230c      	movs	r3, #12
 8004d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d80:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004d84:	4619      	mov	r1, r3
 8004d86:	4861      	ldr	r0, [pc, #388]	@ (8004f0c <HAL_MMC_MspInit+0x224>)
 8004d88:	f001 f95e 	bl	8006048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004d8c:	2304      	movs	r3, #4
 8004d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d90:	2302      	movs	r3, #2
 8004d92:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d94:	2301      	movs	r3, #1
 8004d96:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8004d9c:	230c      	movs	r3, #12
 8004d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004da0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004da4:	4619      	mov	r1, r3
 8004da6:	485a      	ldr	r0, [pc, #360]	@ (8004f10 <HAL_MMC_MspInit+0x228>)
 8004da8:	f001 f94e 	bl	8006048 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8004dac:	2200      	movs	r2, #0
 8004dae:	2100      	movs	r1, #0
 8004db0:	2031      	movs	r0, #49	@ 0x31
 8004db2:	f001 f914 	bl	8005fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8004db6:	2031      	movs	r0, #49	@ 0x31
 8004db8:	f001 f92b 	bl	8006012 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8004dbc:	e09d      	b.n	8004efa <HAL_MMC_MspInit+0x212>
  else if(hmmc->Instance==SDMMC2)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a54      	ldr	r2, [pc, #336]	@ (8004f14 <HAL_MMC_MspInit+0x22c>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	f040 8098 	bne.w	8004efa <HAL_MMC_MspInit+0x212>
    LL_RCC_SetSDMMCClockSource(LL_RCC_SDMMC_CLKSOURCE_PLL1Q);
 8004dca:	2000      	movs	r0, #0
 8004dcc:	f7ff ff5e 	bl	8004c8c <LL_RCC_SetSDMMCClockSource>
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8004dd0:	4b4d      	ldr	r3, [pc, #308]	@ (8004f08 <HAL_MMC_MspInit+0x220>)
 8004dd2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004dd6:	4a4c      	ldr	r2, [pc, #304]	@ (8004f08 <HAL_MMC_MspInit+0x220>)
 8004dd8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004ddc:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004de0:	4b49      	ldr	r3, [pc, #292]	@ (8004f08 <HAL_MMC_MspInit+0x220>)
 8004de2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004de6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004dea:	61fb      	str	r3, [r7, #28]
 8004dec:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004dee:	4b46      	ldr	r3, [pc, #280]	@ (8004f08 <HAL_MMC_MspInit+0x220>)
 8004df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004df4:	4a44      	ldr	r2, [pc, #272]	@ (8004f08 <HAL_MMC_MspInit+0x220>)
 8004df6:	f043 0304 	orr.w	r3, r3, #4
 8004dfa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004dfe:	4b42      	ldr	r3, [pc, #264]	@ (8004f08 <HAL_MMC_MspInit+0x220>)
 8004e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e04:	f003 0304 	and.w	r3, r3, #4
 8004e08:	61bb      	str	r3, [r7, #24]
 8004e0a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e0c:	4b3e      	ldr	r3, [pc, #248]	@ (8004f08 <HAL_MMC_MspInit+0x220>)
 8004e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e12:	4a3d      	ldr	r2, [pc, #244]	@ (8004f08 <HAL_MMC_MspInit+0x220>)
 8004e14:	f043 0301 	orr.w	r3, r3, #1
 8004e18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004e1c:	4b3a      	ldr	r3, [pc, #232]	@ (8004f08 <HAL_MMC_MspInit+0x220>)
 8004e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	617b      	str	r3, [r7, #20]
 8004e28:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e2a:	4b37      	ldr	r3, [pc, #220]	@ (8004f08 <HAL_MMC_MspInit+0x220>)
 8004e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e30:	4a35      	ldr	r2, [pc, #212]	@ (8004f08 <HAL_MMC_MspInit+0x220>)
 8004e32:	f043 0302 	orr.w	r3, r3, #2
 8004e36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004e3a:	4b33      	ldr	r3, [pc, #204]	@ (8004f08 <HAL_MMC_MspInit+0x220>)
 8004e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	613b      	str	r3, [r7, #16]
 8004e46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004e48:	4b2f      	ldr	r3, [pc, #188]	@ (8004f08 <HAL_MMC_MspInit+0x220>)
 8004e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e4e:	4a2e      	ldr	r2, [pc, #184]	@ (8004f08 <HAL_MMC_MspInit+0x220>)
 8004e50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004e58:	4b2b      	ldr	r3, [pc, #172]	@ (8004f08 <HAL_MMC_MspInit+0x220>)
 8004e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e62:	60fb      	str	r3, [r7, #12]
 8004e64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004e66:	2302      	movs	r3, #2
 8004e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e6a:	2302      	movs	r3, #2
 8004e6c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e72:	2303      	movs	r3, #3
 8004e74:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_SDIO2;
 8004e76:	2309      	movs	r3, #9
 8004e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004e7e:	4619      	mov	r1, r3
 8004e80:	4822      	ldr	r0, [pc, #136]	@ (8004f0c <HAL_MMC_MspInit+0x224>)
 8004e82:	f001 f8e1 	bl	8006048 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004e86:	2301      	movs	r3, #1
 8004e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e8a:	2302      	movs	r3, #2
 8004e8c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e92:	2303      	movs	r3, #3
 8004e94:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_SDIO2;
 8004e96:	2309      	movs	r3, #9
 8004e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	481d      	ldr	r0, [pc, #116]	@ (8004f18 <HAL_MMC_MspInit+0x230>)
 8004ea2:	f001 f8d1 	bl	8006048 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4;
 8004ea6:	f24c 0310 	movw	r3, #49168	@ 0xc010
 8004eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eac:	2302      	movs	r3, #2
 8004eae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_SDIO2;
 8004eb8:	2309      	movs	r3, #9
 8004eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ebc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	4816      	ldr	r0, [pc, #88]	@ (8004f1c <HAL_MMC_MspInit+0x234>)
 8004ec4:	f001 f8c0 	bl	8006048 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004ec8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ece:	2302      	movs	r3, #2
 8004ed0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_SDIO2;
 8004eda:	230a      	movs	r3, #10
 8004edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004ede:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	480e      	ldr	r0, [pc, #56]	@ (8004f20 <HAL_MMC_MspInit+0x238>)
 8004ee6:	f001 f8af 	bl	8006048 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 8004eea:	2200      	movs	r2, #0
 8004eec:	2100      	movs	r1, #0
 8004eee:	207c      	movs	r0, #124	@ 0x7c
 8004ef0:	f001 f875 	bl	8005fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8004ef4:	207c      	movs	r0, #124	@ 0x7c
 8004ef6:	f001 f88c 	bl	8006012 <HAL_NVIC_EnableIRQ>
}
 8004efa:	bf00      	nop
 8004efc:	3740      	adds	r7, #64	@ 0x40
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	52007000 	.word	0x52007000
 8004f08:	58024400 	.word	0x58024400
 8004f0c:	58020800 	.word	0x58020800
 8004f10:	58020c00 	.word	0x58020c00
 8004f14:	48022400 	.word	0x48022400
 8004f18:	58020000 	.word	0x58020000
 8004f1c:	58020400 	.word	0x58020400
 8004f20:	58021800 	.word	0x58021800

08004f24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b08a      	sub	sp, #40	@ 0x28
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f2c:	f107 0314 	add.w	r3, r7, #20
 8004f30:	2200      	movs	r2, #0
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	605a      	str	r2, [r3, #4]
 8004f36:	609a      	str	r2, [r3, #8]
 8004f38:	60da      	str	r2, [r3, #12]
 8004f3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a2b      	ldr	r2, [pc, #172]	@ (8004ff0 <HAL_UART_MspInit+0xcc>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d14f      	bne.n	8004fe6 <HAL_UART_MspInit+0xc2>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    LL_RCC_SetUSARTClockSource(LL_RCC_USART234578_CLKSOURCE_PCLK1);
 8004f46:	482b      	ldr	r0, [pc, #172]	@ (8004ff4 <HAL_UART_MspInit+0xd0>)
 8004f48:	f7ff fe94 	bl	8004c74 <LL_RCC_SetUSARTClockSource>

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004f4c:	4b2a      	ldr	r3, [pc, #168]	@ (8004ff8 <HAL_UART_MspInit+0xd4>)
 8004f4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f52:	4a29      	ldr	r2, [pc, #164]	@ (8004ff8 <HAL_UART_MspInit+0xd4>)
 8004f54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f58:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004f5c:	4b26      	ldr	r3, [pc, #152]	@ (8004ff8 <HAL_UART_MspInit+0xd4>)
 8004f5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f66:	613b      	str	r3, [r7, #16]
 8004f68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f6a:	4b23      	ldr	r3, [pc, #140]	@ (8004ff8 <HAL_UART_MspInit+0xd4>)
 8004f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f70:	4a21      	ldr	r2, [pc, #132]	@ (8004ff8 <HAL_UART_MspInit+0xd4>)
 8004f72:	f043 0301 	orr.w	r3, r3, #1
 8004f76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004f7a:	4b1f      	ldr	r3, [pc, #124]	@ (8004ff8 <HAL_UART_MspInit+0xd4>)
 8004f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f80:	f003 0301 	and.w	r3, r3, #1
 8004f84:	60fb      	str	r3, [r7, #12]
 8004f86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f88:	4b1b      	ldr	r3, [pc, #108]	@ (8004ff8 <HAL_UART_MspInit+0xd4>)
 8004f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f8e:	4a1a      	ldr	r2, [pc, #104]	@ (8004ff8 <HAL_UART_MspInit+0xd4>)
 8004f90:	f043 0308 	orr.w	r3, r3, #8
 8004f94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004f98:	4b17      	ldr	r3, [pc, #92]	@ (8004ff8 <HAL_UART_MspInit+0xd4>)
 8004f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f9e:	f003 0308 	and.w	r3, r3, #8
 8004fa2:	60bb      	str	r3, [r7, #8]
 8004fa4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004fa6:	2304      	movs	r3, #4
 8004fa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004faa:	2302      	movs	r3, #2
 8004fac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004fb6:	2307      	movs	r3, #7
 8004fb8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fba:	f107 0314 	add.w	r3, r7, #20
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	480e      	ldr	r0, [pc, #56]	@ (8004ffc <HAL_UART_MspInit+0xd8>)
 8004fc2:	f001 f841 	bl	8006048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004fc6:	2340      	movs	r3, #64	@ 0x40
 8004fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fca:	2302      	movs	r3, #2
 8004fcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004fd6:	2307      	movs	r3, #7
 8004fd8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004fda:	f107 0314 	add.w	r3, r7, #20
 8004fde:	4619      	mov	r1, r3
 8004fe0:	4807      	ldr	r0, [pc, #28]	@ (8005000 <HAL_UART_MspInit+0xdc>)
 8004fe2:	f001 f831 	bl	8006048 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8004fe6:	bf00      	nop
 8004fe8:	3728      	adds	r7, #40	@ 0x28
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	40004400 	.word	0x40004400
 8004ff4:	07000008 	.word	0x07000008
 8004ff8:	58024400 	.word	0x58024400
 8004ffc:	58020000 	.word	0x58020000
 8005000:	58020c00 	.word	0x58020c00

08005004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005004:	b480      	push	{r7}
 8005006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005008:	bf00      	nop
 800500a:	e7fd      	b.n	8005008 <NMI_Handler+0x4>

0800500c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800500c:	b480      	push	{r7}
 800500e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005010:	bf00      	nop
 8005012:	e7fd      	b.n	8005010 <HardFault_Handler+0x4>

08005014 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005014:	b480      	push	{r7}
 8005016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005018:	bf00      	nop
 800501a:	e7fd      	b.n	8005018 <MemManage_Handler+0x4>

0800501c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800501c:	b480      	push	{r7}
 800501e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005020:	bf00      	nop
 8005022:	e7fd      	b.n	8005020 <BusFault_Handler+0x4>

08005024 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005024:	b480      	push	{r7}
 8005026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005028:	bf00      	nop
 800502a:	e7fd      	b.n	8005028 <UsageFault_Handler+0x4>

0800502c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800502c:	b480      	push	{r7}
 800502e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005030:	bf00      	nop
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800503a:	b480      	push	{r7}
 800503c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800503e:	bf00      	nop
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005048:	b480      	push	{r7}
 800504a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800504c:	bf00      	nop
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005056:	b580      	push	{r7, lr}
 8005058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800505a:	f000 fea1 	bl	8005da0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SCH_RunSystemTickTimer();
 800505e:	f7fd fdd5 	bl	8002c0c <SCH_RunSystemTickTimer>
  /* USER CODE END SysTick_IRQn 1 */
}
 8005062:	bf00      	nop
 8005064:	bd80      	pop	{r7, pc}
	...

08005068 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_MMC_IRQHandler(&hmmc1);
 800506c:	4802      	ldr	r0, [pc, #8]	@ (8005078 <SDMMC1_IRQHandler+0x10>)
 800506e:	f001 fdeb 	bl	8006c48 <HAL_MMC_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8005072:	bf00      	nop
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	24001b3c 	.word	0x24001b3c

0800507c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8005080:	4802      	ldr	r0, [pc, #8]	@ (800508c <OTG_FS_IRQHandler+0x10>)
 8005082:	f003 f852 	bl	800812a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8005086:	bf00      	nop
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	24003620 	.word	0x24003620

08005090 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_MMC_IRQHandler(&hmmc2);
 8005094:	4802      	ldr	r0, [pc, #8]	@ (80050a0 <SDMMC2_IRQHandler+0x10>)
 8005096:	f001 fdd7 	bl	8006c48 <HAL_MMC_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 800509a:	bf00      	nop
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	24001db0 	.word	0x24001db0

080050a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80050a4:	b480      	push	{r7}
 80050a6:	af00      	add	r7, sp, #0
  return 1;
 80050a8:	2301      	movs	r3, #1
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <_kill>:

int _kill(int pid, int sig)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b082      	sub	sp, #8
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80050be:	f014 f8fb 	bl	80192b8 <__errno>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2216      	movs	r2, #22
 80050c6:	601a      	str	r2, [r3, #0]
  return -1;
 80050c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3708      	adds	r7, #8
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <_exit>:

void _exit (int status)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80050dc:	f04f 31ff 	mov.w	r1, #4294967295
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f7ff ffe7 	bl	80050b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80050e6:	bf00      	nop
 80050e8:	e7fd      	b.n	80050e6 <_exit+0x12>

080050ea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b086      	sub	sp, #24
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	60f8      	str	r0, [r7, #12]
 80050f2:	60b9      	str	r1, [r7, #8]
 80050f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050f6:	2300      	movs	r3, #0
 80050f8:	617b      	str	r3, [r7, #20]
 80050fa:	e00a      	b.n	8005112 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80050fc:	f3af 8000 	nop.w
 8005100:	4601      	mov	r1, r0
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	1c5a      	adds	r2, r3, #1
 8005106:	60ba      	str	r2, [r7, #8]
 8005108:	b2ca      	uxtb	r2, r1
 800510a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	3301      	adds	r3, #1
 8005110:	617b      	str	r3, [r7, #20]
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	429a      	cmp	r2, r3
 8005118:	dbf0      	blt.n	80050fc <_read+0x12>
  }

  return len;
 800511a:	687b      	ldr	r3, [r7, #4]
}
 800511c:	4618      	mov	r0, r3
 800511e:	3718      	adds	r7, #24
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005130:	2300      	movs	r3, #0
 8005132:	617b      	str	r3, [r7, #20]
 8005134:	e009      	b.n	800514a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	1c5a      	adds	r2, r3, #1
 800513a:	60ba      	str	r2, [r7, #8]
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	4618      	mov	r0, r3
 8005140:	f7ff fd2c 	bl	8004b9c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	3301      	adds	r3, #1
 8005148:	617b      	str	r3, [r7, #20]
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	429a      	cmp	r2, r3
 8005150:	dbf1      	blt.n	8005136 <_write+0x12>
  }
  return len;
 8005152:	687b      	ldr	r3, [r7, #4]
}
 8005154:	4618      	mov	r0, r3
 8005156:	3718      	adds	r7, #24
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <_close>:

int _close(int file)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005164:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005168:	4618      	mov	r0, r3
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005184:	605a      	str	r2, [r3, #4]
  return 0;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <_isatty>:

int _isatty(int file)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800519c:	2301      	movs	r3, #1
}
 800519e:	4618      	mov	r0, r3
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr

080051aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80051aa:	b480      	push	{r7}
 80051ac:	b085      	sub	sp, #20
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	60f8      	str	r0, [r7, #12]
 80051b2:	60b9      	str	r1, [r7, #8]
 80051b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3714      	adds	r7, #20
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80051cc:	4a14      	ldr	r2, [pc, #80]	@ (8005220 <_sbrk+0x5c>)
 80051ce:	4b15      	ldr	r3, [pc, #84]	@ (8005224 <_sbrk+0x60>)
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80051d8:	4b13      	ldr	r3, [pc, #76]	@ (8005228 <_sbrk+0x64>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d102      	bne.n	80051e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80051e0:	4b11      	ldr	r3, [pc, #68]	@ (8005228 <_sbrk+0x64>)
 80051e2:	4a12      	ldr	r2, [pc, #72]	@ (800522c <_sbrk+0x68>)
 80051e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80051e6:	4b10      	ldr	r3, [pc, #64]	@ (8005228 <_sbrk+0x64>)
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4413      	add	r3, r2
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d207      	bcs.n	8005204 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80051f4:	f014 f860 	bl	80192b8 <__errno>
 80051f8:	4603      	mov	r3, r0
 80051fa:	220c      	movs	r2, #12
 80051fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80051fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005202:	e009      	b.n	8005218 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005204:	4b08      	ldr	r3, [pc, #32]	@ (8005228 <_sbrk+0x64>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800520a:	4b07      	ldr	r3, [pc, #28]	@ (8005228 <_sbrk+0x64>)
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4413      	add	r3, r2
 8005212:	4a05      	ldr	r2, [pc, #20]	@ (8005228 <_sbrk+0x64>)
 8005214:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005216:	68fb      	ldr	r3, [r7, #12]
}
 8005218:	4618      	mov	r0, r3
 800521a:	3718      	adds	r7, #24
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	24080000 	.word	0x24080000
 8005224:	00000800 	.word	0x00000800
 8005228:	240020bc 	.word	0x240020bc
 800522c:	24003e98 	.word	0x24003e98

08005230 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8005230:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005268 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005234:	f7fe f8d2 	bl	80033dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005238:	480c      	ldr	r0, [pc, #48]	@ (800526c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800523a:	490d      	ldr	r1, [pc, #52]	@ (8005270 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800523c:	4a0d      	ldr	r2, [pc, #52]	@ (8005274 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800523e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005240:	e002      	b.n	8005248 <LoopCopyDataInit>

08005242 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005242:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005244:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005246:	3304      	adds	r3, #4

08005248 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005248:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800524a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800524c:	d3f9      	bcc.n	8005242 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800524e:	4a0a      	ldr	r2, [pc, #40]	@ (8005278 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005250:	4c0a      	ldr	r4, [pc, #40]	@ (800527c <LoopFillZerobss+0x22>)
  movs r3, #0
 8005252:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005254:	e001      	b.n	800525a <LoopFillZerobss>

08005256 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005256:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005258:	3204      	adds	r2, #4

0800525a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800525a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800525c:	d3fb      	bcc.n	8005256 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800525e:	f014 f831 	bl	80192c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005262:	f7ff f977 	bl	8004554 <main>
  bx  lr
 8005266:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005268:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800526c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005270:	240004d8 	.word	0x240004d8
  ldr r2, =_sidata
 8005274:	0801edfc 	.word	0x0801edfc
  ldr r2, =_sbss
 8005278:	240004d8 	.word	0x240004d8
  ldr r4, =_ebss
 800527c:	24003e94 	.word	0x24003e94

08005280 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005280:	e7fe      	b.n	8005280 <ADC3_IRQHandler>
	...

08005284 <FAKEEXP_create_task>:
		}

};

void FAKEEXP_create_task(void)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&fakeexp_task_context.taskHandle, &fakeexp_task_context.taskProperty);
 8005288:	4902      	ldr	r1, [pc, #8]	@ (8005294 <FAKEEXP_create_task+0x10>)
 800528a:	4803      	ldr	r0, [pc, #12]	@ (8005298 <FAKEEXP_create_task+0x14>)
 800528c:	f7fd fc7e 	bl	8002b8c <SCH_TASK_CreateTask>
}
 8005290:	bf00      	nop
 8005292:	bd80      	pop	{r7, pc}
 8005294:	24000164 	.word	0x24000164
 8005298:	24000160 	.word	0x24000160

0800529c <cursor_move_to_fake>:

void cursor_move_to_fake(int x, int y){
 800529c:	b580      	push	{r7, lr}
 800529e:	b08c      	sub	sp, #48	@ 0x30
 80052a0:	af02      	add	r7, sp, #8
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
	// ->x
	//   y
    char buffer[30];
    snprintf(buffer, sizeof(buffer), "\033[%d;%dH", (y), (x));
 80052a6:	f107 0008 	add.w	r0, r7, #8
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	9300      	str	r3, [sp, #0]
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	4a06      	ldr	r2, [pc, #24]	@ (80052cc <cursor_move_to_fake+0x30>)
 80052b2:	211e      	movs	r1, #30
 80052b4:	f013 f89c 	bl	80183f0 <sniprintf>
    CDC_SendString(buffer);
 80052b8:	f107 0308 	add.w	r3, r7, #8
 80052bc:	4618      	mov	r0, r3
 80052be:	f010 fe0f 	bl	8015ee0 <CDC_SendString>
}
 80052c2:	bf00      	nop
 80052c4:	3728      	adds	r7, #40	@ 0x28
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	0801e0a8 	.word	0x0801e0a8

080052d0 <FAKEEXP_update_task>:


static void FAKEEXP_update_task(void){
 80052d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052d2:	f2ad 4d14 	subw	sp, sp, #1044	@ 0x414
 80052d6:	af34      	add	r7, sp, #208	@ 0xd0
	if (tec_status.enabled == true){
 80052d8:	4b90      	ldr	r3, [pc, #576]	@ (800551c <FAKEEXP_update_task+0x24c>)
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d008      	beq.n	80052f2 <FAKEEXP_update_task+0x22>
		 counter_fake++;
 80052e0:	4b8f      	ldr	r3, [pc, #572]	@ (8005520 <FAKEEXP_update_task+0x250>)
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	3301      	adds	r3, #1
 80052e8:	b2da      	uxtb	r2, r3
 80052ea:	4b8d      	ldr	r3, [pc, #564]	@ (8005520 <FAKEEXP_update_task+0x250>)
 80052ec:	701a      	strb	r2, [r3, #0]
		 Fake_Temperature_Update();
 80052ee:	f000 f9eb 	bl	80056c8 <Fake_Temperature_Update>
	}
	if(monitor){
 80052f2:	4b8c      	ldr	r3, [pc, #560]	@ (8005524 <FAKEEXP_update_task+0x254>)
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f000 81cb 	beq.w	8005694 <FAKEEXP_update_task+0x3c4>

        const char *content = "{\"i2c\":{\"ampe\":\"0\"}}";
 80052fe:	4b8a      	ldr	r3, [pc, #552]	@ (8005528 <FAKEEXP_update_task+0x258>)
 8005300:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
        ringbuff_write(rb_cm7_to_cm4, content, strlen(content));
 8005304:	4b89      	ldr	r3, [pc, #548]	@ (800552c <FAKEEXP_update_task+0x25c>)
 8005306:	681c      	ldr	r4, [r3, #0]
 8005308:	f8d7 033c 	ldr.w	r0, [r7, #828]	@ 0x33c
 800530c:	f7fb f848 	bl	80003a0 <strlen>
 8005310:	4603      	mov	r3, r0
 8005312:	461a      	mov	r2, r3
 8005314:	f8d7 133c 	ldr.w	r1, [r7, #828]	@ 0x33c
 8005318:	4620      	mov	r0, r4
 800531a:	f7fd fd9a 	bl	8002e52 <ringbuff_write>


        rtc_date_time_t softTime = {0};
 800531e:	f507 734d 	add.w	r3, r7, #820	@ 0x334
 8005322:	2200      	movs	r2, #0
 8005324:	601a      	str	r2, [r3, #0]
 8005326:	605a      	str	r2, [r3, #4]
        rtc_get_soft_time(&softTime);
 8005328:	f507 734d 	add.w	r3, r7, #820	@ 0x334
 800532c:	4618      	mov	r0, r3
 800532e:	f7fe fc09 	bl	8003b44 <rtc_get_soft_time>
        char buffer[128];
        snprintf(buffer, sizeof(buffer),
                 "[%04u/%02u/%02u %02u:%02u:%02u]",
                 softTime.year, softTime.month, softTime.day,
 8005332:	f8b7 3336 	ldrh.w	r3, [r7, #822]	@ 0x336
        snprintf(buffer, sizeof(buffer),
 8005336:	461e      	mov	r6, r3
                 softTime.year, softTime.month, softTime.day,
 8005338:	f897 3335 	ldrb.w	r3, [r7, #821]	@ 0x335
 800533c:	f897 2334 	ldrb.w	r2, [r7, #820]	@ 0x334
                 softTime.hour, softTime.minute, softTime.second);
 8005340:	f897 1338 	ldrb.w	r1, [r7, #824]	@ 0x338
 8005344:	f897 0339 	ldrb.w	r0, [r7, #825]	@ 0x339
        snprintf(buffer, sizeof(buffer),
 8005348:	4604      	mov	r4, r0
                 softTime.hour, softTime.minute, softTime.second);
 800534a:	f897 033a 	ldrb.w	r0, [r7, #826]	@ 0x33a
        snprintf(buffer, sizeof(buffer),
 800534e:	4605      	mov	r5, r0
 8005350:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8005354:	9504      	str	r5, [sp, #16]
 8005356:	9403      	str	r4, [sp, #12]
 8005358:	9102      	str	r1, [sp, #8]
 800535a:	9201      	str	r2, [sp, #4]
 800535c:	9300      	str	r3, [sp, #0]
 800535e:	4633      	mov	r3, r6
 8005360:	4a73      	ldr	r2, [pc, #460]	@ (8005530 <FAKEEXP_update_task+0x260>)
 8005362:	2180      	movs	r1, #128	@ 0x80
 8005364:	f013 f844 	bl	80183f0 <sniprintf>
		cursor_move_to_fake(55, 1);
 8005368:	2101      	movs	r1, #1
 800536a:	2037      	movs	r0, #55	@ 0x37
 800536c:	f7ff ff96 	bl	800529c <cursor_move_to_fake>
        CDC_SendString(buffer);
 8005370:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005374:	4618      	mov	r0, r3
 8005376:	f010 fdb3 	bl	8015ee0 <CDC_SendString>

		cursor_move_to_fake(60, 7);
 800537a:	2107      	movs	r1, #7
 800537c:	203c      	movs	r0, #60	@ 0x3c
 800537e:	f7ff ff8d 	bl	800529c <cursor_move_to_fake>
		snprintf(buffer, sizeof(buffer), "%s", tec_status.enabled ? "Yes" : "No");
 8005382:	4b66      	ldr	r3, [pc, #408]	@ (800551c <FAKEEXP_update_task+0x24c>)
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d001      	beq.n	800538e <FAKEEXP_update_task+0xbe>
 800538a:	4b6a      	ldr	r3, [pc, #424]	@ (8005534 <FAKEEXP_update_task+0x264>)
 800538c:	e000      	b.n	8005390 <FAKEEXP_update_task+0xc0>
 800538e:	4b6a      	ldr	r3, [pc, #424]	@ (8005538 <FAKEEXP_update_task+0x268>)
 8005390:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8005394:	4a69      	ldr	r2, [pc, #420]	@ (800553c <FAKEEXP_update_task+0x26c>)
 8005396:	2180      	movs	r1, #128	@ 0x80
 8005398:	f013 f82a 	bl	80183f0 <sniprintf>
        CDC_SendString(buffer);
 800539c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80053a0:	4618      	mov	r0, r3
 80053a2:	f010 fd9d 	bl	8015ee0 <CDC_SendString>

		cursor_move_to_fake(60, 8);
 80053a6:	2108      	movs	r1, #8
 80053a8:	203c      	movs	r0, #60	@ 0x3c
 80053aa:	f7ff ff77 	bl	800529c <cursor_move_to_fake>
		snprintf(buffer, sizeof(buffer), "%.1f°C",tec_status.temperature);
 80053ae:	4b5b      	ldr	r3, [pc, #364]	@ (800551c <FAKEEXP_update_task+0x24c>)
 80053b0:	edd3 7a01 	vldr	s15, [r3, #4]
 80053b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80053b8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80053bc:	ed8d 7b00 	vstr	d7, [sp]
 80053c0:	4a5f      	ldr	r2, [pc, #380]	@ (8005540 <FAKEEXP_update_task+0x270>)
 80053c2:	2180      	movs	r1, #128	@ 0x80
 80053c4:	4618      	mov	r0, r3
 80053c6:	f013 f813 	bl	80183f0 <sniprintf>
        CDC_SendString(buffer);
 80053ca:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80053ce:	4618      	mov	r0, r3
 80053d0:	f010 fd86 	bl	8015ee0 <CDC_SendString>

		cursor_move_to_fake(60, 9);
 80053d4:	2109      	movs	r1, #9
 80053d6:	203c      	movs	r0, #60	@ 0x3c
 80053d8:	f7ff ff60 	bl	800529c <cursor_move_to_fake>
		snprintf(buffer, sizeof(buffer), "%.1f°C",tec_status.currentTemp);
 80053dc:	4b4f      	ldr	r3, [pc, #316]	@ (800551c <FAKEEXP_update_task+0x24c>)
 80053de:	edd3 7a02 	vldr	s15, [r3, #8]
 80053e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80053e6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80053ea:	ed8d 7b00 	vstr	d7, [sp]
 80053ee:	4a54      	ldr	r2, [pc, #336]	@ (8005540 <FAKEEXP_update_task+0x270>)
 80053f0:	2180      	movs	r1, #128	@ 0x80
 80053f2:	4618      	mov	r0, r3
 80053f4:	f012 fffc 	bl	80183f0 <sniprintf>
        CDC_SendString(buffer);
 80053f8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80053fc:	4618      	mov	r0, r3
 80053fe:	f010 fd6f 	bl	8015ee0 <CDC_SendString>


        HAL_Delay(5);
 8005402:	2005      	movs	r0, #5
 8005404:	f000 fcec 	bl	8005de0 <HAL_Delay>
        char contenxt[64];
        snprintf(contenxt, sizeof(contenxt), "{\"spi\":{\"read\":\"%d\"}}", laser_status.laser_slot);
 8005408:	4b4e      	ldr	r3, [pc, #312]	@ (8005544 <FAKEEXP_update_task+0x274>)
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	4638      	mov	r0, r7
 800540e:	4a4e      	ldr	r2, [pc, #312]	@ (8005548 <FAKEEXP_update_task+0x278>)
 8005410:	2140      	movs	r1, #64	@ 0x40
 8005412:	f012 ffed 	bl	80183f0 <sniprintf>

        // Gửi nội dung qua ring buffer
        ringbuff_write(rb_cm7_to_cm4, contenxt, strlen(contenxt));
 8005416:	4b45      	ldr	r3, [pc, #276]	@ (800552c <FAKEEXP_update_task+0x25c>)
 8005418:	681c      	ldr	r4, [r3, #0]
 800541a:	463b      	mov	r3, r7
 800541c:	4618      	mov	r0, r3
 800541e:	f7fa ffbf 	bl	80003a0 <strlen>
 8005422:	4602      	mov	r2, r0
 8005424:	463b      	mov	r3, r7
 8005426:	4619      	mov	r1, r3
 8005428:	4620      	mov	r0, r4
 800542a:	f7fd fd12 	bl	8002e52 <ringbuff_write>

		cursor_move_to_fake(60, 13);
 800542e:	210d      	movs	r1, #13
 8005430:	203c      	movs	r0, #60	@ 0x3c
 8005432:	f7ff ff33 	bl	800529c <cursor_move_to_fake>
		snprintf(buffer, sizeof(buffer), "%d", laser_status.laser_slot);
 8005436:	4b43      	ldr	r3, [pc, #268]	@ (8005544 <FAKEEXP_update_task+0x274>)
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 800543e:	4a43      	ldr	r2, [pc, #268]	@ (800554c <FAKEEXP_update_task+0x27c>)
 8005440:	2180      	movs	r1, #128	@ 0x80
 8005442:	f012 ffd5 	bl	80183f0 <sniprintf>
        CDC_SendString(buffer);
 8005446:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800544a:	4618      	mov	r0, r3
 800544c:	f010 fd48 	bl	8015ee0 <CDC_SendString>

		cursor_move_to_fake(60, 14);
 8005450:	210e      	movs	r1, #14
 8005452:	203c      	movs	r0, #60	@ 0x3c
 8005454:	f7ff ff22 	bl	800529c <cursor_move_to_fake>
		snprintf(buffer, sizeof(buffer), "%d mA",laser_status.current);
 8005458:	4b3a      	ldr	r3, [pc, #232]	@ (8005544 <FAKEEXP_update_task+0x274>)
 800545a:	885b      	ldrh	r3, [r3, #2]
 800545c:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8005460:	4a3b      	ldr	r2, [pc, #236]	@ (8005550 <FAKEEXP_update_task+0x280>)
 8005462:	2180      	movs	r1, #128	@ 0x80
 8005464:	f012 ffc4 	bl	80183f0 <sniprintf>
        CDC_SendString(buffer);
 8005468:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800546c:	4618      	mov	r0, r3
 800546e:	f010 fd37 	bl	8015ee0 <CDC_SendString>

		cursor_move_to_fake(60, 15);
 8005472:	210f      	movs	r1, #15
 8005474:	203c      	movs	r0, #60	@ 0x3c
 8005476:	f7ff ff11 	bl	800529c <cursor_move_to_fake>
		snprintf(buffer, sizeof(buffer), "%.2f V",laser_status.laser_voltage);
 800547a:	4b32      	ldr	r3, [pc, #200]	@ (8005544 <FAKEEXP_update_task+0x274>)
 800547c:	edd3 7a01 	vldr	s15, [r3, #4]
 8005480:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005484:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005488:	ed8d 7b00 	vstr	d7, [sp]
 800548c:	4a31      	ldr	r2, [pc, #196]	@ (8005554 <FAKEEXP_update_task+0x284>)
 800548e:	2180      	movs	r1, #128	@ 0x80
 8005490:	4618      	mov	r0, r3
 8005492:	f012 ffad 	bl	80183f0 <sniprintf>
        CDC_SendString(buffer);
 8005496:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800549a:	4618      	mov	r0, r3
 800549c:	f010 fd20 	bl	8015ee0 <CDC_SendString>

		cursor_move_to_fake(60, 16);
 80054a0:	2110      	movs	r1, #16
 80054a2:	203c      	movs	r0, #60	@ 0x3c
 80054a4:	f7ff fefa 	bl	800529c <cursor_move_to_fake>
		snprintf(buffer, sizeof(buffer), "%.2f V",laser_status.photo_voltage);
 80054a8:	4b26      	ldr	r3, [pc, #152]	@ (8005544 <FAKEEXP_update_task+0x274>)
 80054aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80054ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80054b2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80054b6:	ed8d 7b00 	vstr	d7, [sp]
 80054ba:	4a26      	ldr	r2, [pc, #152]	@ (8005554 <FAKEEXP_update_task+0x284>)
 80054bc:	2180      	movs	r1, #128	@ 0x80
 80054be:	4618      	mov	r0, r3
 80054c0:	f012 ff96 	bl	80183f0 <sniprintf>
        CDC_SendString(buffer);
 80054c4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80054c8:	4618      	mov	r0, r3
 80054ca:	f010 fd09 	bl	8015ee0 <CDC_SendString>


        char date[14]; // Định dạng: YYYY-MM-DD
        snprintf(date, sizeof(date), "%04u-%02u-%02u",
        		softTime.year, softTime.month, softTime.day);
 80054ce:	f8b7 3336 	ldrh.w	r3, [r7, #822]	@ 0x336
        snprintf(date, sizeof(date), "%04u-%02u-%02u",
 80054d2:	4619      	mov	r1, r3
        		softTime.year, softTime.month, softTime.day);
 80054d4:	f897 3335 	ldrb.w	r3, [r7, #821]	@ 0x335
 80054d8:	f897 2334 	ldrb.w	r2, [r7, #820]	@ 0x334
        snprintf(date, sizeof(date), "%04u-%02u-%02u",
 80054dc:	f507 7049 	add.w	r0, r7, #804	@ 0x324
 80054e0:	9201      	str	r2, [sp, #4]
 80054e2:	9300      	str	r3, [sp, #0]
 80054e4:	460b      	mov	r3, r1
 80054e6:	4a1c      	ldr	r2, [pc, #112]	@ (8005558 <FAKEEXP_update_task+0x288>)
 80054e8:	210e      	movs	r1, #14
 80054ea:	f012 ff81 	bl	80183f0 <sniprintf>

        char time[12]; // Định dạng: HH:MM:SS
        snprintf(time, sizeof(time), "%02u:%02u:%02u",
        		softTime.hour, softTime.minute, softTime.second);
 80054ee:	f897 3338 	ldrb.w	r3, [r7, #824]	@ 0x338
        snprintf(time, sizeof(time), "%02u:%02u:%02u",
 80054f2:	4619      	mov	r1, r3
        		softTime.hour, softTime.minute, softTime.second);
 80054f4:	f897 3339 	ldrb.w	r3, [r7, #825]	@ 0x339
 80054f8:	f897 233a 	ldrb.w	r2, [r7, #826]	@ 0x33a
        snprintf(time, sizeof(time), "%02u:%02u:%02u",
 80054fc:	f507 7046 	add.w	r0, r7, #792	@ 0x318
 8005500:	9201      	str	r2, [sp, #4]
 8005502:	9300      	str	r3, [sp, #0]
 8005504:	460b      	mov	r3, r1
 8005506:	4a15      	ldr	r2, [pc, #84]	@ (800555c <FAKEEXP_update_task+0x28c>)
 8005508:	210c      	movs	r1, #12
 800550a:	f012 ff71 	bl	80183f0 <sniprintf>
        // Tạo chuỗi JSON từ cấu trúc dữ liệu
        char json_message[128];
        snprintf(json_message, sizeof(json_message),
                 "{\"TEC\":{\"enabled\":%s,\"temp\":%.1f,\"currentTemp\":%.1f},"
                 "\"Laser\":{\"slot\":%u,\"current\":%u,\"laserVolt\":%.2f,\"photoVolt\":%.2f}}",
                 tec_status.enabled ? "true" : "false",
 800550e:	4b03      	ldr	r3, [pc, #12]	@ (800551c <FAKEEXP_update_task+0x24c>)
 8005510:	781b      	ldrb	r3, [r3, #0]
        snprintf(json_message, sizeof(json_message),
 8005512:	2b00      	cmp	r3, #0
 8005514:	d026      	beq.n	8005564 <FAKEEXP_update_task+0x294>
 8005516:	4b12      	ldr	r3, [pc, #72]	@ (8005560 <FAKEEXP_update_task+0x290>)
 8005518:	e025      	b.n	8005566 <FAKEEXP_update_task+0x296>
 800551a:	bf00      	nop
 800551c:	24000154 	.word	0x24000154
 8005520:	240020cc 	.word	0x240020cc
 8005524:	240020cd 	.word	0x240020cd
 8005528:	0801e0b4 	.word	0x0801e0b4
 800552c:	2400014c 	.word	0x2400014c
 8005530:	0801e0cc 	.word	0x0801e0cc
 8005534:	0801e0ec 	.word	0x0801e0ec
 8005538:	0801e0f0 	.word	0x0801e0f0
 800553c:	0801e0f4 	.word	0x0801e0f4
 8005540:	0801e0f8 	.word	0x0801e0f8
 8005544:	240020c0 	.word	0x240020c0
 8005548:	0801e100 	.word	0x0801e100
 800554c:	0801e118 	.word	0x0801e118
 8005550:	0801e11c 	.word	0x0801e11c
 8005554:	0801e124 	.word	0x0801e124
 8005558:	0801e12c 	.word	0x0801e12c
 800555c:	0801e13c 	.word	0x0801e13c
 8005560:	0801e14c 	.word	0x0801e14c
 8005564:	4b4e      	ldr	r3, [pc, #312]	@ (80056a0 <FAKEEXP_update_task+0x3d0>)
                 tec_status.temperature, tec_status.currentTemp,
 8005566:	4a4f      	ldr	r2, [pc, #316]	@ (80056a4 <FAKEEXP_update_task+0x3d4>)
 8005568:	edd2 7a01 	vldr	s15, [r2, #4]
        snprintf(json_message, sizeof(json_message),
 800556c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
                 tec_status.temperature, tec_status.currentTemp,
 8005570:	4a4c      	ldr	r2, [pc, #304]	@ (80056a4 <FAKEEXP_update_task+0x3d4>)
 8005572:	edd2 6a02 	vldr	s13, [r2, #8]
        snprintf(json_message, sizeof(json_message),
 8005576:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
                 laser_status.laser_slot, laser_status.current,
 800557a:	4a4b      	ldr	r2, [pc, #300]	@ (80056a8 <FAKEEXP_update_task+0x3d8>)
 800557c:	7812      	ldrb	r2, [r2, #0]
        snprintf(json_message, sizeof(json_message),
 800557e:	4611      	mov	r1, r2
                 laser_status.laser_slot, laser_status.current,
 8005580:	4a49      	ldr	r2, [pc, #292]	@ (80056a8 <FAKEEXP_update_task+0x3d8>)
 8005582:	8852      	ldrh	r2, [r2, #2]
        snprintf(json_message, sizeof(json_message),
 8005584:	4614      	mov	r4, r2
                 laser_status.laser_voltage, laser_status.photo_voltage);
 8005586:	4a48      	ldr	r2, [pc, #288]	@ (80056a8 <FAKEEXP_update_task+0x3d8>)
 8005588:	edd2 5a01 	vldr	s11, [r2, #4]
        snprintf(json_message, sizeof(json_message),
 800558c:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
                 laser_status.laser_voltage, laser_status.photo_voltage);
 8005590:	4a45      	ldr	r2, [pc, #276]	@ (80056a8 <FAKEEXP_update_task+0x3d8>)
 8005592:	edd2 4a02 	vldr	s9, [r2, #8]
        snprintf(json_message, sizeof(json_message),
 8005596:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 800559a:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 800559e:	ed8d 4b08 	vstr	d4, [sp, #32]
 80055a2:	ed8d 5b06 	vstr	d5, [sp, #24]
 80055a6:	9405      	str	r4, [sp, #20]
 80055a8:	9104      	str	r1, [sp, #16]
 80055aa:	ed8d 6b02 	vstr	d6, [sp, #8]
 80055ae:	ed8d 7b00 	vstr	d7, [sp]
 80055b2:	4a3e      	ldr	r2, [pc, #248]	@ (80056ac <FAKEEXP_update_task+0x3dc>)
 80055b4:	2180      	movs	r1, #128	@ 0x80
 80055b6:	f012 ff1b 	bl	80183f0 <sniprintf>

        // Tạo log struct
        log_struct_t log = {0};
 80055ba:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 80055be:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80055c2:	4618      	mov	r0, r3
 80055c4:	23d6      	movs	r3, #214	@ 0xd6
 80055c6:	461a      	mov	r2, r3
 80055c8:	2100      	movs	r1, #0
 80055ca:	f013 f879 	bl	80186c0 <memset>
        strncpy(log.date, date, sizeof(log.date) - 1);
 80055ce:	f507 7149 	add.w	r1, r7, #804	@ 0x324
 80055d2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80055d6:	220b      	movs	r2, #11
 80055d8:	4618      	mov	r0, r3
 80055da:	f013 f898 	bl	801870e <strncpy>
        strncpy(log.time, time, sizeof(log.time) - 1);
 80055de:	f507 7146 	add.w	r1, r7, #792	@ 0x318
 80055e2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80055e6:	330c      	adds	r3, #12
 80055e8:	2208      	movs	r2, #8
 80055ea:	4618      	mov	r0, r3
 80055ec:	f013 f88f 	bl	801870e <strncpy>
        strncpy(log.actTime, time, sizeof(log.actTime) - 1); // Bằng với thời gian hiện tại
 80055f0:	f507 7146 	add.w	r1, r7, #792	@ 0x318
 80055f4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80055f8:	3315      	adds	r3, #21
 80055fa:	2213      	movs	r2, #19
 80055fc:	4618      	mov	r0, r3
 80055fe:	f013 f886 	bl	801870e <strncpy>
        strncpy(log.message, json_message, sizeof(log.message) - 1);
 8005602:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 8005606:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800560a:	3356      	adds	r3, #86	@ 0x56
 800560c:	227f      	movs	r2, #127	@ 0x7f
 800560e:	4618      	mov	r0, r3
 8005610:	f013 f87d 	bl	801870e <strncpy>
        log.level = LOG_NOTICE;
 8005614:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8005618:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800561c:	2202      	movs	r2, #2
 800561e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
        strncpy(log.core, "M7", sizeof(log.core) - 1);
 8005622:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005626:	332a      	adds	r3, #42	@ 0x2a
 8005628:	2209      	movs	r2, #9
 800562a:	4921      	ldr	r1, [pc, #132]	@ (80056b0 <FAKEEXP_update_task+0x3e0>)
 800562c:	4618      	mov	r0, r3
 800562e:	f013 f86e 	bl	801870e <strncpy>
        strncpy(log.function, "log_data", sizeof(log.function) - 1);
 8005632:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005636:	3334      	adds	r3, #52	@ 0x34
 8005638:	221f      	movs	r2, #31
 800563a:	491e      	ldr	r1, [pc, #120]	@ (80056b4 <FAKEEXP_update_task+0x3e4>)
 800563c:	4618      	mov	r0, r3
 800563e:	f013 f866 	bl	801870e <strncpy>
        log.line = 0;
 8005642:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8005646:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800564a:	2200      	movs	r2, #0
 800564c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

        // Tạo chuỗi log
        char log_output[256];
        log_create(log, log_output);
 8005650:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8005654:	f5a3 7400 	sub.w	r4, r3, #512	@ 0x200
 8005658:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800565c:	9332      	str	r3, [sp, #200]	@ 0xc8
 800565e:	4668      	mov	r0, sp
 8005660:	f104 0310 	add.w	r3, r4, #16
 8005664:	22c6      	movs	r2, #198	@ 0xc6
 8005666:	4619      	mov	r1, r3
 8005668:	f013 fe5d 	bl	8019326 <memcpy>
 800566c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005670:	f7fd f9e6 	bl	8002a40 <log_create>

        // Ghi log vào file
        if (SDFS_State == SDFS_READY) {
 8005674:	4b10      	ldr	r3, [pc, #64]	@ (80056b8 <FAKEEXP_update_task+0x3e8>)
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d10b      	bne.n	8005694 <FAKEEXP_update_task+0x3c4>
            if (Vim_SDFS("data.log", log_output) == 0) {
 800567c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005680:	4619      	mov	r1, r3
 8005682:	480e      	ldr	r0, [pc, #56]	@ (80056bc <FAKEEXP_update_task+0x3ec>)
 8005684:	f7fd f8b4 	bl	80027f0 <Vim_SDFS>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d002      	beq.n	8005694 <FAKEEXP_update_task+0x3c4>
                // Nội dung ghi thành công
            } else {
                CDC_SendString("\r\nFailed to write content.\r\n");
 800568e:	480c      	ldr	r0, [pc, #48]	@ (80056c0 <FAKEEXP_update_task+0x3f0>)
 8005690:	f010 fc26 	bl	8015ee0 <CDC_SendString>
        }


	}

}
 8005694:	bf00      	nop
 8005696:	f507 7751 	add.w	r7, r7, #836	@ 0x344
 800569a:	46bd      	mov	sp, r7
 800569c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800569e:	bf00      	nop
 80056a0:	0801e154 	.word	0x0801e154
 80056a4:	24000154 	.word	0x24000154
 80056a8:	240020c0 	.word	0x240020c0
 80056ac:	0801e15c 	.word	0x0801e15c
 80056b0:	0801e1d8 	.word	0x0801e1d8
 80056b4:	0801e1dc 	.word	0x0801e1dc
 80056b8:	240006e5 	.word	0x240006e5
 80056bc:	0801e1e8 	.word	0x0801e1e8
 80056c0:	0801e1f4 	.word	0x0801e1f4
 80056c4:	00000000 	.word	0x00000000

080056c8 <Fake_Temperature_Update>:



// Hàm cập nhật giá trị nhiệt độ hiện tại
void Fake_Temperature_Update() {
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
    static bool initialized = false;

    // Khởi tạo seed cho hàm random nếu chưa được khởi tạo
    if (!initialized) {
 80056ce:	4b56      	ldr	r3, [pc, #344]	@ (8005828 <Fake_Temperature_Update+0x160>)
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	f083 0301 	eor.w	r3, r3, #1
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d005      	beq.n	80056e8 <Fake_Temperature_Update+0x20>
        uint32_t seed = HAL_GetTick(); // Lấy số tick từ khi hệ thống khởi động
 80056dc:	f000 fb74 	bl	8005dc8 <HAL_GetTick>
 80056e0:	60f8      	str	r0, [r7, #12]
        srand(seed);
 80056e2:	68f8      	ldr	r0, [r7, #12]
 80056e4:	f011 f86c 	bl	80167c0 <srand>
    }

    // Tính khoảng chênh lệch giữa nhiệt độ thiết lập và nhiệt độ hiện tại
    float delta = tec_status.temperature - tec_status.currentTemp;
 80056e8:	4b50      	ldr	r3, [pc, #320]	@ (800582c <Fake_Temperature_Update+0x164>)
 80056ea:	ed93 7a01 	vldr	s14, [r3, #4]
 80056ee:	4b4f      	ldr	r3, [pc, #316]	@ (800582c <Fake_Temperature_Update+0x164>)
 80056f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80056f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056f8:	edc7 7a02 	vstr	s15, [r7, #8]

    // Tính toán bước tiến dần về nhiệt độ thiết lập
    float adjustment = delta * 0.05; // Tiến gần 5% mỗi lần gọi
 80056fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8005700:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005704:	ed9f 6b46 	vldr	d6, [pc, #280]	@ 8005820 <Fake_Temperature_Update+0x158>
 8005708:	ee27 7b06 	vmul.f64	d7, d7, d6
 800570c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005710:	edc7 7a01 	vstr	s15, [r7, #4]
    tec_status.currentTemp += adjustment;
 8005714:	4b45      	ldr	r3, [pc, #276]	@ (800582c <Fake_Temperature_Update+0x164>)
 8005716:	ed93 7a02 	vldr	s14, [r3, #8]
 800571a:	edd7 7a01 	vldr	s15, [r7, #4]
 800571e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005722:	4b42      	ldr	r3, [pc, #264]	@ (800582c <Fake_Temperature_Update+0x164>)
 8005724:	edc3 7a02 	vstr	s15, [r3, #8]

    // Thêm nhiễu ngẫu nhiên trong khoảng ±0.5°C
    float random_noise = ((float)rand() / RAND_MAX) * 1.0 - 0.5;
 8005728:	f011 f878 	bl	801681c <rand>
 800572c:	ee07 0a90 	vmov	s15, r0
 8005730:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005734:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8005830 <Fake_Temperature_Update+0x168>
 8005738:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800573c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005740:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8005744:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005748:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800574c:	edc7 7a00 	vstr	s15, [r7]
    tec_status.currentTemp += random_noise;
 8005750:	4b36      	ldr	r3, [pc, #216]	@ (800582c <Fake_Temperature_Update+0x164>)
 8005752:	ed93 7a02 	vldr	s14, [r3, #8]
 8005756:	edd7 7a00 	vldr	s15, [r7]
 800575a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800575e:	4b33      	ldr	r3, [pc, #204]	@ (800582c <Fake_Temperature_Update+0x164>)
 8005760:	edc3 7a02 	vstr	s15, [r3, #8]

    // Giới hạn giá trị nhiệt độ trong khoảng nhiệt độ thiết lập ±0.5°C để tránh vượt quá
    if (fabs(tec_status.currentTemp - tec_status.temperature) < 0.5) {
 8005764:	4b31      	ldr	r3, [pc, #196]	@ (800582c <Fake_Temperature_Update+0x164>)
 8005766:	ed93 7a02 	vldr	s14, [r3, #8]
 800576a:	4b30      	ldr	r3, [pc, #192]	@ (800582c <Fake_Temperature_Update+0x164>)
 800576c:	edd3 7a01 	vldr	s15, [r3, #4]
 8005770:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005774:	eef0 7ae7 	vabs.f32	s15, s15
 8005778:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800577c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005784:	d509      	bpl.n	800579a <Fake_Temperature_Update+0xd2>
        tec_status.currentTemp = tec_status.temperature - random_noise;
 8005786:	4b29      	ldr	r3, [pc, #164]	@ (800582c <Fake_Temperature_Update+0x164>)
 8005788:	ed93 7a01 	vldr	s14, [r3, #4]
 800578c:	edd7 7a00 	vldr	s15, [r7]
 8005790:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005794:	4b25      	ldr	r3, [pc, #148]	@ (800582c <Fake_Temperature_Update+0x164>)
 8005796:	edc3 7a02 	vstr	s15, [r3, #8]
    }
    if(counter_fake > 40){
 800579a:	4b26      	ldr	r3, [pc, #152]	@ (8005834 <Fake_Temperature_Update+0x16c>)
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	2b28      	cmp	r3, #40	@ 0x28
 80057a2:	d938      	bls.n	8005816 <Fake_Temperature_Update+0x14e>
		if (fabs(tec_status.currentTemp - tec_status.temperature) > 1) {
 80057a4:	4b21      	ldr	r3, [pc, #132]	@ (800582c <Fake_Temperature_Update+0x164>)
 80057a6:	ed93 7a02 	vldr	s14, [r3, #8]
 80057aa:	4b20      	ldr	r3, [pc, #128]	@ (800582c <Fake_Temperature_Update+0x164>)
 80057ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80057b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057b4:	eef0 7ae7 	vabs.f32	s15, s15
 80057b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80057bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057c4:	dd09      	ble.n	80057da <Fake_Temperature_Update+0x112>
			tec_status.currentTemp = tec_status.temperature - random_noise;
 80057c6:	4b19      	ldr	r3, [pc, #100]	@ (800582c <Fake_Temperature_Update+0x164>)
 80057c8:	ed93 7a01 	vldr	s14, [r3, #4]
 80057cc:	edd7 7a00 	vldr	s15, [r7]
 80057d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057d4:	4b15      	ldr	r3, [pc, #84]	@ (800582c <Fake_Temperature_Update+0x164>)
 80057d6:	edc3 7a02 	vstr	s15, [r3, #8]
		}
		if (fabs(tec_status.currentTemp - tec_status.temperature) > 2) {
 80057da:	4b14      	ldr	r3, [pc, #80]	@ (800582c <Fake_Temperature_Update+0x164>)
 80057dc:	ed93 7a02 	vldr	s14, [r3, #8]
 80057e0:	4b12      	ldr	r3, [pc, #72]	@ (800582c <Fake_Temperature_Update+0x164>)
 80057e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80057e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057ea:	eef0 7ae7 	vabs.f32	s15, s15
 80057ee:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80057f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057fa:	dd09      	ble.n	8005810 <Fake_Temperature_Update+0x148>
			tec_status.currentTemp = tec_status.temperature + random_noise;
 80057fc:	4b0b      	ldr	r3, [pc, #44]	@ (800582c <Fake_Temperature_Update+0x164>)
 80057fe:	ed93 7a01 	vldr	s14, [r3, #4]
 8005802:	edd7 7a00 	vldr	s15, [r7]
 8005806:	ee77 7a27 	vadd.f32	s15, s14, s15
 800580a:	4b08      	ldr	r3, [pc, #32]	@ (800582c <Fake_Temperature_Update+0x164>)
 800580c:	edc3 7a02 	vstr	s15, [r3, #8]
		}
		counter_fake = 41;
 8005810:	4b08      	ldr	r3, [pc, #32]	@ (8005834 <Fake_Temperature_Update+0x16c>)
 8005812:	2229      	movs	r2, #41	@ 0x29
 8005814:	701a      	strb	r2, [r3, #0]
	}
}
 8005816:	bf00      	nop
 8005818:	3710      	adds	r7, #16
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	9999999a 	.word	0x9999999a
 8005824:	3fa99999 	.word	0x3fa99999
 8005828:	240020ce 	.word	0x240020ce
 800582c:	24000154 	.word	0x24000154
 8005830:	4f000000 	.word	0x4f000000
 8005834:	240020cc 	.word	0x240020cc

08005838 <LL_GPIO_SetOutputPin>:
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	683a      	ldr	r2, [r7, #0]
 8005846:	619a      	str	r2, [r3, #24]
}
 8005848:	bf00      	nop
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <LL_GPIO_ResetOutputPin>:
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	041a      	lsls	r2, r3, #16
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	619a      	str	r2, [r3, #24]
}
 8005866:	bf00      	nop
 8005868:	370c      	adds	r7, #12
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
	...

08005874 <status_led_off>:
	s_led_display_status.state = status;
}


static void status_led_off(void)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	af00      	add	r7, sp, #0

	LL_GPIO_ResetOutputPin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 8005878:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800587c:	4802      	ldr	r0, [pc, #8]	@ (8005888 <status_led_off+0x14>)
 800587e:	f7ff ffe9 	bl	8005854 <LL_GPIO_ResetOutputPin>
}
 8005882:	bf00      	nop
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	58021400 	.word	0x58021400

0800588c <status_led_on>:

static void status_led_on(void)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	af00      	add	r7, sp, #0

	LL_GPIO_SetOutputPin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 8005890:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005894:	4802      	ldr	r0, [pc, #8]	@ (80058a0 <status_led_on+0x14>)
 8005896:	f7ff ffcf 	bl	8005838 <LL_GPIO_SetOutputPin>
}
 800589a:	bf00      	nop
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	58021400 	.word	0x58021400

080058a4 <status_led_update>:



void	status_led_update(void)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	af00      	add	r7, sp, #0

	switch (s_led_display_status.state) {
 80058a8:	4b0d      	ldr	r3, [pc, #52]	@ (80058e0 <status_led_update+0x3c>)
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b03      	cmp	r3, #3
 80058b4:	d811      	bhi.n	80058da <status_led_update+0x36>
 80058b6:	a201      	add	r2, pc, #4	@ (adr r2, 80058bc <status_led_update+0x18>)
 80058b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058bc:	080058cd 	.word	0x080058cd
 80058c0:	080058d3 	.word	0x080058d3
 80058c4:	080058d9 	.word	0x080058d9
 80058c8:	080058d9 	.word	0x080058d9
	case POWERUP:
		status_led_powerup();
 80058cc:	f000 f80a 	bl	80058e4 <status_led_powerup>
		break;
 80058d0:	e003      	b.n	80058da <status_led_update+0x36>
	case NORMAL:
		status_led_normal();
 80058d2:	f000 f841 	bl	8005958 <status_led_normal>
		break;
 80058d6:	e000      	b.n	80058da <status_led_update+0x36>
	case POWERING_SUB:
		break;
 80058d8:	bf00      	nop
	case OVERCURRENT:
		break;
	}
}
 80058da:	bf00      	nop
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	240020d0 	.word	0x240020d0

080058e4 <status_led_powerup>:


static void status_led_powerup(void)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	af00      	add	r7, sp, #0
    if (s_led_display_status.led == 1) // LED is ON
 80058e8:	4b1a      	ldr	r3, [pc, #104]	@ (8005954 <status_led_powerup+0x70>)
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d012      	beq.n	800591c <status_led_powerup+0x38>
    {
        if (SCH_TIM_HasCompleted(SCH_TIM_LED))
 80058f6:	2000      	movs	r0, #0
 80058f8:	f7fd f932 	bl	8002b60 <SCH_TIM_HasCompleted>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d025      	beq.n	800594e <status_led_powerup+0x6a>
        {
            s_led_display_status.led = 0;
 8005902:	4a14      	ldr	r2, [pc, #80]	@ (8005954 <status_led_powerup+0x70>)
 8005904:	7813      	ldrb	r3, [r2, #0]
 8005906:	f36f 0300 	bfc	r3, #0, #1
 800590a:	7013      	strb	r3, [r2, #0]
            status_led_off();
 800590c:	f7ff ffb2 	bl	8005874 <status_led_off>
            SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD); // restart
 8005910:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005914:	2000      	movs	r0, #0
 8005916:	f7fd f90d 	bl	8002b34 <SCH_TIM_Start>

        }

    }

}
 800591a:	e018      	b.n	800594e <status_led_powerup+0x6a>
    else if (s_led_display_status.led == 0) // LED is OFF
 800591c:	4b0d      	ldr	r3, [pc, #52]	@ (8005954 <status_led_powerup+0x70>)
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	f003 0301 	and.w	r3, r3, #1
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d111      	bne.n	800594e <status_led_powerup+0x6a>
        if (SCH_TIM_HasCompleted(SCH_TIM_LED))
 800592a:	2000      	movs	r0, #0
 800592c:	f7fd f918 	bl	8002b60 <SCH_TIM_HasCompleted>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00b      	beq.n	800594e <status_led_powerup+0x6a>
            s_led_display_status.led = 1;
 8005936:	4a07      	ldr	r2, [pc, #28]	@ (8005954 <status_led_powerup+0x70>)
 8005938:	7813      	ldrb	r3, [r2, #0]
 800593a:	f043 0301 	orr.w	r3, r3, #1
 800593e:	7013      	strb	r3, [r2, #0]
            status_led_on();
 8005940:	f7ff ffa4 	bl	800588c <status_led_on>
            SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD); // restart
 8005944:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005948:	2000      	movs	r0, #0
 800594a:	f7fd f8f3 	bl	8002b34 <SCH_TIM_Start>
}
 800594e:	bf00      	nop
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	240020d0 	.word	0x240020d0

08005958 <status_led_normal>:




static void status_led_normal(void)
{
 8005958:	b480      	push	{r7}
 800595a:	af00      	add	r7, sp, #0

}
 800595c:	bf00      	nop
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
	...

08005968 <status_led_create_task>:

void	status_led_create_task(void)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	af00      	add	r7, sp, #0
    s_led_display_status.led = 0;
 800596c:	4a08      	ldr	r2, [pc, #32]	@ (8005990 <status_led_create_task+0x28>)
 800596e:	7813      	ldrb	r3, [r2, #0]
 8005970:	f36f 0300 	bfc	r3, #0, #1
 8005974:	7013      	strb	r3, [r2, #0]
    s_led_display_status.state = POWERUP;
 8005976:	4a06      	ldr	r2, [pc, #24]	@ (8005990 <status_led_create_task+0x28>)
 8005978:	7813      	ldrb	r3, [r2, #0]
 800597a:	f36f 0347 	bfc	r3, #1, #7
 800597e:	7013      	strb	r3, [r2, #0]
    status_led_on();
 8005980:	f7ff ff84 	bl	800588c <status_led_on>
	SCH_TASK_CreateTask(&s_task_context.taskHandle, &s_task_context.taskProperty);
 8005984:	4903      	ldr	r1, [pc, #12]	@ (8005994 <status_led_create_task+0x2c>)
 8005986:	4804      	ldr	r0, [pc, #16]	@ (8005998 <status_led_create_task+0x30>)
 8005988:	f7fd f900 	bl	8002b8c <SCH_TASK_CreateTask>
}
 800598c:	bf00      	nop
 800598e:	bd80      	pop	{r7, pc}
 8005990:	240020d0 	.word	0x240020d0
 8005994:	24000178 	.word	0x24000178
 8005998:	24000174 	.word	0x24000174

0800599c <DUALCORECMD_create_task>:
		}

};

void DUALCORECMD_create_task(void)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&dualcorecmd_task_context.taskHandle, &dualcorecmd_task_context.taskProperty);
 80059a0:	4902      	ldr	r1, [pc, #8]	@ (80059ac <DUALCORECMD_create_task+0x10>)
 80059a2:	4803      	ldr	r0, [pc, #12]	@ (80059b0 <DUALCORECMD_create_task+0x14>)
 80059a4:	f7fd f8f2 	bl	8002b8c <SCH_TASK_CreateTask>
}
 80059a8:	bf00      	nop
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	24000190 	.word	0x24000190
 80059b0:	2400018c 	.word	0x2400018c

080059b4 <DUALCORECMD_update_task>:

static void DUALCORECMD_update_task(void){
 80059b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80059b8:	b085      	sub	sp, #20
 80059ba:	af00      	add	r7, sp, #0
    size_t len = 0;
 80059bc:	2300      	movs	r3, #0
 80059be:	60fb      	str	r3, [r7, #12]
    void* addr;
	while ((len = ringbuff_get_linear_block_read_length(rb_cm4_to_cm7)) > 0) {
 80059c0:	e049      	b.n	8005a56 <DUALCORECMD_update_task+0xa2>
 80059c2:	466b      	mov	r3, sp
 80059c4:	461e      	mov	r6, r3
	    addr = ringbuff_get_linear_block_read_address(rb_cm4_to_cm7);
 80059c6:	4b2b      	ldr	r3, [pc, #172]	@ (8005a74 <DUALCORECMD_update_task+0xc0>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7fd fb26 	bl	800301c <ringbuff_get_linear_block_read_address>
 80059d0:	60b8      	str	r0, [r7, #8]

//	    HAL_UART_Transmit(&huart1, addr, len, 1000);
	    char content[len + 1];
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	1c59      	adds	r1, r3, #1
 80059d6:	460b      	mov	r3, r1
 80059d8:	3b01      	subs	r3, #1
 80059da:	607b      	str	r3, [r7, #4]
 80059dc:	2300      	movs	r3, #0
 80059de:	460c      	mov	r4, r1
 80059e0:	461d      	mov	r5, r3
 80059e2:	f04f 0200 	mov.w	r2, #0
 80059e6:	f04f 0300 	mov.w	r3, #0
 80059ea:	00eb      	lsls	r3, r5, #3
 80059ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059f0:	00e2      	lsls	r2, r4, #3
 80059f2:	2300      	movs	r3, #0
 80059f4:	4688      	mov	r8, r1
 80059f6:	4699      	mov	r9, r3
 80059f8:	f04f 0200 	mov.w	r2, #0
 80059fc:	f04f 0300 	mov.w	r3, #0
 8005a00:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a04:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a08:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a0c:	1dcb      	adds	r3, r1, #7
 8005a0e:	08db      	lsrs	r3, r3, #3
 8005a10:	00db      	lsls	r3, r3, #3
 8005a12:	ebad 0d03 	sub.w	sp, sp, r3
 8005a16:	466b      	mov	r3, sp
 8005a18:	3300      	adds	r3, #0
 8005a1a:	603b      	str	r3, [r7, #0]
	    strncpy(content, (char *)addr, len);
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	68b9      	ldr	r1, [r7, #8]
 8005a20:	6838      	ldr	r0, [r7, #0]
 8005a22:	f012 fe74 	bl	801870e <strncpy>
	    content[len] = '\0';
 8005a26:	683a      	ldr	r2, [r7, #0]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	701a      	strb	r2, [r3, #0]
	    if(monitor){
 8005a30:	4b11      	ldr	r3, [pc, #68]	@ (8005a78 <DUALCORECMD_update_task+0xc4>)
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d003      	beq.n	8005a42 <DUALCORECMD_update_task+0x8e>
	    	parse_and_update_laser_status(content);
 8005a3a:	6838      	ldr	r0, [r7, #0]
 8005a3c:	f000 f81e 	bl	8005a7c <parse_and_update_laser_status>
 8005a40:	e002      	b.n	8005a48 <DUALCORECMD_update_task+0x94>
	    }else{
		    CDC_SendString(content);
 8005a42:	6838      	ldr	r0, [r7, #0]
 8005a44:	f010 fa4c 	bl	8015ee0 <CDC_SendString>
	    }


//	    parse_and_print_json(content);
	    ringbuff_skip(rb_cm4_to_cm7, len);
 8005a48:	4b0a      	ldr	r3, [pc, #40]	@ (8005a74 <DUALCORECMD_update_task+0xc0>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68f9      	ldr	r1, [r7, #12]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7fd fb33 	bl	80030ba <ringbuff_skip>
 8005a54:	46b5      	mov	sp, r6
	while ((len = ringbuff_get_linear_block_read_length(rb_cm4_to_cm7)) > 0) {
 8005a56:	4b07      	ldr	r3, [pc, #28]	@ (8005a74 <DUALCORECMD_update_task+0xc0>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fd fafa 	bl	8003054 <ringbuff_get_linear_block_read_length>
 8005a60:	60f8      	str	r0, [r7, #12]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1ac      	bne.n	80059c2 <DUALCORECMD_update_task+0xe>
	}

}
 8005a68:	bf00      	nop
 8005a6a:	bf00      	nop
 8005a6c:	3714      	adds	r7, #20
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a74:	24000148 	.word	0x24000148
 8005a78:	240020cd 	.word	0x240020cd

08005a7c <parse_and_update_laser_status>:


void parse_and_update_laser_status(const char *content) {
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
    if (strstr(content, "Laser Current")) {
 8005a84:	491b      	ldr	r1, [pc, #108]	@ (8005af4 <parse_and_update_laser_status+0x78>)
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f012 fe54 	bl	8018734 <strstr>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00d      	beq.n	8005aae <parse_and_update_laser_status+0x32>
        // Bóc giá trị current
        uint16_t current;
        if (sscanf(content, "\r\n --->[CM4]: Laser Current: %hu mA", &current) == 1) {
 8005a92:	f107 030e 	add.w	r3, r7, #14
 8005a96:	461a      	mov	r2, r3
 8005a98:	4917      	ldr	r1, [pc, #92]	@ (8005af8 <parse_and_update_laser_status+0x7c>)
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f012 fcfc 	bl	8018498 <siscanf>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d121      	bne.n	8005aea <parse_and_update_laser_status+0x6e>
            laser_status.current = current;
 8005aa6:	89fa      	ldrh	r2, [r7, #14]
 8005aa8:	4b14      	ldr	r3, [pc, #80]	@ (8005afc <parse_and_update_laser_status+0x80>)
 8005aaa:	805a      	strh	r2, [r3, #2]

        }
    } else {

    }
}
 8005aac:	e01d      	b.n	8005aea <parse_and_update_laser_status+0x6e>
    } else if (strstr(content, "Photodiode Voltage")) {
 8005aae:	4914      	ldr	r1, [pc, #80]	@ (8005b00 <parse_and_update_laser_status+0x84>)
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f012 fe3f 	bl	8018734 <strstr>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d016      	beq.n	8005aea <parse_and_update_laser_status+0x6e>
        if (sscanf(content, "\r\n --->[CM4]: *Photodiode Voltage: %f V", &photo_voltage) == 1 ||
 8005abc:	f107 0308 	add.w	r3, r7, #8
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	4910      	ldr	r1, [pc, #64]	@ (8005b04 <parse_and_update_laser_status+0x88>)
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f012 fce7 	bl	8018498 <siscanf>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d009      	beq.n	8005ae4 <parse_and_update_laser_status+0x68>
            sscanf(content, "\r\n --->[CM4]: RPhotodiode Voltage: %f V", &photo_voltage) == 1) {
 8005ad0:	f107 0308 	add.w	r3, r7, #8
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	490c      	ldr	r1, [pc, #48]	@ (8005b08 <parse_and_update_laser_status+0x8c>)
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f012 fcdd 	bl	8018498 <siscanf>
 8005ade:	4603      	mov	r3, r0
        if (sscanf(content, "\r\n --->[CM4]: *Photodiode Voltage: %f V", &photo_voltage) == 1 ||
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d102      	bne.n	8005aea <parse_and_update_laser_status+0x6e>
            laser_status.photo_voltage = photo_voltage;
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	4a05      	ldr	r2, [pc, #20]	@ (8005afc <parse_and_update_laser_status+0x80>)
 8005ae8:	6093      	str	r3, [r2, #8]
}
 8005aea:	bf00      	nop
 8005aec:	3710      	adds	r7, #16
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	0801e214 	.word	0x0801e214
 8005af8:	0801e224 	.word	0x0801e224
 8005afc:	240020c0 	.word	0x240020c0
 8005b00:	0801e248 	.word	0x0801e248
 8005b04:	0801e25c 	.word	0x0801e25c
 8005b08:	0801e284 	.word	0x0801e284

08005b0c <update_time>:

};

volatile uint16_t current_ms;

void update_time(void){
 8005b0c:	b480      	push	{r7}
 8005b0e:	af00      	add	r7, sp, #0
    current_ms += 100;
 8005b10:	4b44      	ldr	r3, [pc, #272]	@ (8005c24 <update_time+0x118>)
 8005b12:	881b      	ldrh	r3, [r3, #0]
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	3364      	adds	r3, #100	@ 0x64
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	4b42      	ldr	r3, [pc, #264]	@ (8005c24 <update_time+0x118>)
 8005b1c:	801a      	strh	r2, [r3, #0]
    if (current_ms >= 1000)
 8005b1e:	4b41      	ldr	r3, [pc, #260]	@ (8005c24 <update_time+0x118>)
 8005b20:	881b      	ldrh	r3, [r3, #0]
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005b28:	d377      	bcc.n	8005c1a <update_time+0x10e>
    {
    	current_ms = 0;
 8005b2a:	4b3e      	ldr	r3, [pc, #248]	@ (8005c24 <update_time+0x118>)
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	801a      	strh	r2, [r3, #0]
    	pubRtcDateTime.second++;
 8005b30:	4b3d      	ldr	r3, [pc, #244]	@ (8005c28 <update_time+0x11c>)
 8005b32:	799b      	ldrb	r3, [r3, #6]
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	3301      	adds	r3, #1
 8005b38:	b2da      	uxtb	r2, r3
 8005b3a:	4b3b      	ldr	r3, [pc, #236]	@ (8005c28 <update_time+0x11c>)
 8005b3c:	719a      	strb	r2, [r3, #6]
        if (pubRtcDateTime.second >= 60)
 8005b3e:	4b3a      	ldr	r3, [pc, #232]	@ (8005c28 <update_time+0x11c>)
 8005b40:	799b      	ldrb	r3, [r3, #6]
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	2b3b      	cmp	r3, #59	@ 0x3b
 8005b46:	d968      	bls.n	8005c1a <update_time+0x10e>
        {
            pubRtcDateTime.second = 0;
 8005b48:	4b37      	ldr	r3, [pc, #220]	@ (8005c28 <update_time+0x11c>)
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	719a      	strb	r2, [r3, #6]
            pubRtcDateTime.minute++;
 8005b4e:	4b36      	ldr	r3, [pc, #216]	@ (8005c28 <update_time+0x11c>)
 8005b50:	795b      	ldrb	r3, [r3, #5]
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	3301      	adds	r3, #1
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	4b33      	ldr	r3, [pc, #204]	@ (8005c28 <update_time+0x11c>)
 8005b5a:	715a      	strb	r2, [r3, #5]

            if (pubRtcDateTime.minute >= 60)
 8005b5c:	4b32      	ldr	r3, [pc, #200]	@ (8005c28 <update_time+0x11c>)
 8005b5e:	795b      	ldrb	r3, [r3, #5]
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	2b3b      	cmp	r3, #59	@ 0x3b
 8005b64:	d959      	bls.n	8005c1a <update_time+0x10e>
            {
                pubRtcDateTime.minute = 0;
 8005b66:	4b30      	ldr	r3, [pc, #192]	@ (8005c28 <update_time+0x11c>)
 8005b68:	2200      	movs	r2, #0
 8005b6a:	715a      	strb	r2, [r3, #5]
                pubRtcDateTime.hour++;
 8005b6c:	4b2e      	ldr	r3, [pc, #184]	@ (8005c28 <update_time+0x11c>)
 8005b6e:	791b      	ldrb	r3, [r3, #4]
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	3301      	adds	r3, #1
 8005b74:	b2da      	uxtb	r2, r3
 8005b76:	4b2c      	ldr	r3, [pc, #176]	@ (8005c28 <update_time+0x11c>)
 8005b78:	711a      	strb	r2, [r3, #4]

                if (pubRtcDateTime.hour >= 24)
 8005b7a:	4b2b      	ldr	r3, [pc, #172]	@ (8005c28 <update_time+0x11c>)
 8005b7c:	791b      	ldrb	r3, [r3, #4]
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	2b17      	cmp	r3, #23
 8005b82:	d94a      	bls.n	8005c1a <update_time+0x10e>
                {
                    pubRtcDateTime.hour = 0;
 8005b84:	4b28      	ldr	r3, [pc, #160]	@ (8005c28 <update_time+0x11c>)
 8005b86:	2200      	movs	r2, #0
 8005b88:	711a      	strb	r2, [r3, #4]
                    pubRtcDateTime.day++;
 8005b8a:	4b27      	ldr	r3, [pc, #156]	@ (8005c28 <update_time+0x11c>)
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	3301      	adds	r3, #1
 8005b92:	b2da      	uxtb	r2, r3
 8005b94:	4b24      	ldr	r3, [pc, #144]	@ (8005c28 <update_time+0x11c>)
 8005b96:	701a      	strb	r2, [r3, #0]

                    if ((pubRtcDateTime.month == 2 && pubRtcDateTime.day > 28) ||
 8005b98:	4b23      	ldr	r3, [pc, #140]	@ (8005c28 <update_time+0x11c>)
 8005b9a:	785b      	ldrb	r3, [r3, #1]
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d104      	bne.n	8005bac <update_time+0xa0>
 8005ba2:	4b21      	ldr	r3, [pc, #132]	@ (8005c28 <update_time+0x11c>)
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	2b1c      	cmp	r3, #28
 8005baa:	d81d      	bhi.n	8005be8 <update_time+0xdc>
                        ((pubRtcDateTime.month == 4 || pubRtcDateTime.month == 6 || pubRtcDateTime.month == 9 || pubRtcDateTime.month == 11) && pubRtcDateTime.day > 30) ||
 8005bac:	4b1e      	ldr	r3, [pc, #120]	@ (8005c28 <update_time+0x11c>)
 8005bae:	785b      	ldrb	r3, [r3, #1]
 8005bb0:	b2db      	uxtb	r3, r3
                    if ((pubRtcDateTime.month == 2 && pubRtcDateTime.day > 28) ||
 8005bb2:	2b04      	cmp	r3, #4
 8005bb4:	d00e      	beq.n	8005bd4 <update_time+0xc8>
                        ((pubRtcDateTime.month == 4 || pubRtcDateTime.month == 6 || pubRtcDateTime.month == 9 || pubRtcDateTime.month == 11) && pubRtcDateTime.day > 30) ||
 8005bb6:	4b1c      	ldr	r3, [pc, #112]	@ (8005c28 <update_time+0x11c>)
 8005bb8:	785b      	ldrb	r3, [r3, #1]
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	2b06      	cmp	r3, #6
 8005bbe:	d009      	beq.n	8005bd4 <update_time+0xc8>
 8005bc0:	4b19      	ldr	r3, [pc, #100]	@ (8005c28 <update_time+0x11c>)
 8005bc2:	785b      	ldrb	r3, [r3, #1]
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b09      	cmp	r3, #9
 8005bc8:	d004      	beq.n	8005bd4 <update_time+0xc8>
 8005bca:	4b17      	ldr	r3, [pc, #92]	@ (8005c28 <update_time+0x11c>)
 8005bcc:	785b      	ldrb	r3, [r3, #1]
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	2b0b      	cmp	r3, #11
 8005bd2:	d104      	bne.n	8005bde <update_time+0xd2>
 8005bd4:	4b14      	ldr	r3, [pc, #80]	@ (8005c28 <update_time+0x11c>)
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b1e      	cmp	r3, #30
 8005bdc:	d804      	bhi.n	8005be8 <update_time+0xdc>
                        (pubRtcDateTime.day > 31))
 8005bde:	4b12      	ldr	r3, [pc, #72]	@ (8005c28 <update_time+0x11c>)
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	b2db      	uxtb	r3, r3
                        ((pubRtcDateTime.month == 4 || pubRtcDateTime.month == 6 || pubRtcDateTime.month == 9 || pubRtcDateTime.month == 11) && pubRtcDateTime.day > 30) ||
 8005be4:	2b1f      	cmp	r3, #31
 8005be6:	d918      	bls.n	8005c1a <update_time+0x10e>
                    {
                        pubRtcDateTime.day = 1;
 8005be8:	4b0f      	ldr	r3, [pc, #60]	@ (8005c28 <update_time+0x11c>)
 8005bea:	2201      	movs	r2, #1
 8005bec:	701a      	strb	r2, [r3, #0]
                        pubRtcDateTime.month++;
 8005bee:	4b0e      	ldr	r3, [pc, #56]	@ (8005c28 <update_time+0x11c>)
 8005bf0:	785b      	ldrb	r3, [r3, #1]
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	b2da      	uxtb	r2, r3
 8005bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8005c28 <update_time+0x11c>)
 8005bfa:	705a      	strb	r2, [r3, #1]

                        if (pubRtcDateTime.month > 12)
 8005bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8005c28 <update_time+0x11c>)
 8005bfe:	785b      	ldrb	r3, [r3, #1]
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	2b0c      	cmp	r3, #12
 8005c04:	d909      	bls.n	8005c1a <update_time+0x10e>
                        {
                            pubRtcDateTime.month = 1;
 8005c06:	4b08      	ldr	r3, [pc, #32]	@ (8005c28 <update_time+0x11c>)
 8005c08:	2201      	movs	r2, #1
 8005c0a:	705a      	strb	r2, [r3, #1]
                            pubRtcDateTime.year++;
 8005c0c:	4b06      	ldr	r3, [pc, #24]	@ (8005c28 <update_time+0x11c>)
 8005c0e:	885b      	ldrh	r3, [r3, #2]
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	3301      	adds	r3, #1
 8005c14:	b29a      	uxth	r2, r3
 8005c16:	4b04      	ldr	r3, [pc, #16]	@ (8005c28 <update_time+0x11c>)
 8005c18:	805a      	strh	r2, [r3, #2]
                    }
                }
            }
        }
    }
}
 8005c1a:	bf00      	nop
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr
 8005c24:	240020d2 	.word	0x240020d2
 8005c28:	24001b30 	.word	0x24001b30

08005c2c <RTC_create_task>:



uint32_t timing = 0;
void RTC_create_task(void)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
	init_rtc();
 8005c32:	f7fd fc9b 	bl	800356c <init_rtc>
	rtc_date_time_t DEFAULT_TIME;
	DEFAULT_TIME.second = 35;
 8005c36:	2323      	movs	r3, #35	@ 0x23
 8005c38:	71bb      	strb	r3, [r7, #6]
	DEFAULT_TIME.minute = 59;
 8005c3a:	233b      	movs	r3, #59	@ 0x3b
 8005c3c:	717b      	strb	r3, [r7, #5]
	DEFAULT_TIME.hour 	= 23;
 8005c3e:	2317      	movs	r3, #23
 8005c40:	713b      	strb	r3, [r7, #4]
	DEFAULT_TIME.day 	= 31;
 8005c42:	231f      	movs	r3, #31
 8005c44:	703b      	strb	r3, [r7, #0]
	DEFAULT_TIME.month	= 12;
 8005c46:	230c      	movs	r3, #12
 8005c48:	707b      	strb	r3, [r7, #1]
	DEFAULT_TIME.year	= 2024;
 8005c4a:	f44f 63fd 	mov.w	r3, #2024	@ 0x7e8
 8005c4e:	807b      	strh	r3, [r7, #2]
	if(rtc_set_date_time(&DEFAULT_TIME)){
 8005c50:	463b      	mov	r3, r7
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7fd fd70 	bl	8003738 <rtc_set_date_time>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d003      	beq.n	8005c66 <RTC_create_task+0x3a>
	    CDC_SendString("RTC set date time successfully: 23:59:35 31/12/2024\r\n");
 8005c5e:	4807      	ldr	r0, [pc, #28]	@ (8005c7c <RTC_create_task+0x50>)
 8005c60:	f010 f93e 	bl	8015ee0 <CDC_SendString>
 8005c64:	e002      	b.n	8005c6c <RTC_create_task+0x40>
	}else{
		CDC_SendString("Fail to set date&time\r\n");
 8005c66:	4806      	ldr	r0, [pc, #24]	@ (8005c80 <RTC_create_task+0x54>)
 8005c68:	f010 f93a 	bl	8015ee0 <CDC_SendString>
	}

	SCH_TASK_CreateTask(&rtc_task_context.taskHandle, &rtc_task_context.taskProperty);
 8005c6c:	4905      	ldr	r1, [pc, #20]	@ (8005c84 <RTC_create_task+0x58>)
 8005c6e:	4806      	ldr	r0, [pc, #24]	@ (8005c88 <RTC_create_task+0x5c>)
 8005c70:	f7fc ff8c 	bl	8002b8c <SCH_TASK_CreateTask>
}
 8005c74:	bf00      	nop
 8005c76:	3708      	adds	r7, #8
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	0801e2ac 	.word	0x0801e2ac
 8005c80:	0801e2e4 	.word	0x0801e2e4
 8005c84:	240001a4 	.word	0x240001a4
 8005c88:	240001a0 	.word	0x240001a0

08005c8c <RTC_update_task>:

static void RTC_update_task(void){
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	af00      	add	r7, sp, #0
	timing++;
 8005c90:	4b09      	ldr	r3, [pc, #36]	@ (8005cb8 <RTC_update_task+0x2c>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	3301      	adds	r3, #1
 8005c96:	4a08      	ldr	r2, [pc, #32]	@ (8005cb8 <RTC_update_task+0x2c>)
 8005c98:	6013      	str	r3, [r2, #0]
	update_time();
 8005c9a:	f7ff ff37 	bl	8005b0c <update_time>
//        CDC_SendString("Temperature: %.2f*C\r\n", temperature);
//        uint8_t o18 = SPI4_ReadRegister(0x18);
//        uint8_t o19 = SPI4_ReadRegister(0x19);
//        uint8_t o20 = SPI4_ReadRegister(0x20);
//        CDC_SendString("18: %d, 19: %d, 20: %d\r\n", TEMPTODEC(o18), TEMPTODEC(o19), TEMPTODEC(o20));
	if(timing > 18000){
 8005c9e:	4b06      	ldr	r3, [pc, #24]	@ (8005cb8 <RTC_update_task+0x2c>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f244 6250 	movw	r2, #18000	@ 0x4650
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d904      	bls.n	8005cb4 <RTC_update_task+0x28>
		timing = 0;
 8005caa:	4b03      	ldr	r3, [pc, #12]	@ (8005cb8 <RTC_update_task+0x2c>)
 8005cac:	2200      	movs	r2, #0
 8005cae:	601a      	str	r2, [r3, #0]
		rtc_sync_ll();
 8005cb0:	f7fd fc7e 	bl	80035b0 <rtc_sync_ll>
	}

}
 8005cb4:	bf00      	nop
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	240020d4 	.word	0x240020d4

08005cbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005cc2:	2003      	movs	r0, #3
 8005cc4:	f000 f980 	bl	8005fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005cc8:	f003 fb9c 	bl	8009404 <HAL_RCC_GetSysClockFreq>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	4b15      	ldr	r3, [pc, #84]	@ (8005d24 <HAL_Init+0x68>)
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	0a1b      	lsrs	r3, r3, #8
 8005cd4:	f003 030f 	and.w	r3, r3, #15
 8005cd8:	4913      	ldr	r1, [pc, #76]	@ (8005d28 <HAL_Init+0x6c>)
 8005cda:	5ccb      	ldrb	r3, [r1, r3]
 8005cdc:	f003 031f 	and.w	r3, r3, #31
 8005ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ce4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8005d24 <HAL_Init+0x68>)
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	f003 030f 	and.w	r3, r3, #15
 8005cee:	4a0e      	ldr	r2, [pc, #56]	@ (8005d28 <HAL_Init+0x6c>)
 8005cf0:	5cd3      	ldrb	r3, [r2, r3]
 8005cf2:	f003 031f 	and.w	r3, r3, #31
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8005cfc:	4a0b      	ldr	r2, [pc, #44]	@ (8005d2c <HAL_Init+0x70>)
 8005cfe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005d00:	4a0b      	ldr	r2, [pc, #44]	@ (8005d30 <HAL_Init+0x74>)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005d06:	200f      	movs	r0, #15
 8005d08:	f000 f814 	bl	8005d34 <HAL_InitTick>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d001      	beq.n	8005d16 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e002      	b.n	8005d1c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005d16:	f7fe ffcd 	bl	8004cb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3708      	adds	r7, #8
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	58024400 	.word	0x58024400
 8005d28:	0801e3b4 	.word	0x0801e3b4
 8005d2c:	24000144 	.word	0x24000144
 8005d30:	24000140 	.word	0x24000140

08005d34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005d3c:	4b15      	ldr	r3, [pc, #84]	@ (8005d94 <HAL_InitTick+0x60>)
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d101      	bne.n	8005d48 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e021      	b.n	8005d8c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005d48:	4b13      	ldr	r3, [pc, #76]	@ (8005d98 <HAL_InitTick+0x64>)
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	4b11      	ldr	r3, [pc, #68]	@ (8005d94 <HAL_InitTick+0x60>)
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	4619      	mov	r1, r3
 8005d52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f000 f965 	bl	800602e <HAL_SYSTICK_Config>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d001      	beq.n	8005d6e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e00e      	b.n	8005d8c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2b0f      	cmp	r3, #15
 8005d72:	d80a      	bhi.n	8005d8a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005d74:	2200      	movs	r2, #0
 8005d76:	6879      	ldr	r1, [r7, #4]
 8005d78:	f04f 30ff 	mov.w	r0, #4294967295
 8005d7c:	f000 f92f 	bl	8005fde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005d80:	4a06      	ldr	r2, [pc, #24]	@ (8005d9c <HAL_InitTick+0x68>)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005d86:	2300      	movs	r3, #0
 8005d88:	e000      	b.n	8005d8c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3708      	adds	r7, #8
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	240001b8 	.word	0x240001b8
 8005d98:	24000140 	.word	0x24000140
 8005d9c:	240001b4 	.word	0x240001b4

08005da0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005da0:	b480      	push	{r7}
 8005da2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005da4:	4b06      	ldr	r3, [pc, #24]	@ (8005dc0 <HAL_IncTick+0x20>)
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	461a      	mov	r2, r3
 8005daa:	4b06      	ldr	r3, [pc, #24]	@ (8005dc4 <HAL_IncTick+0x24>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4413      	add	r3, r2
 8005db0:	4a04      	ldr	r2, [pc, #16]	@ (8005dc4 <HAL_IncTick+0x24>)
 8005db2:	6013      	str	r3, [r2, #0]
}
 8005db4:	bf00      	nop
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	240001b8 	.word	0x240001b8
 8005dc4:	240020d8 	.word	0x240020d8

08005dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	af00      	add	r7, sp, #0
  return uwTick;
 8005dcc:	4b03      	ldr	r3, [pc, #12]	@ (8005ddc <HAL_GetTick+0x14>)
 8005dce:	681b      	ldr	r3, [r3, #0]
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	240020d8 	.word	0x240020d8

08005de0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005de8:	f7ff ffee 	bl	8005dc8 <HAL_GetTick>
 8005dec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df8:	d005      	beq.n	8005e06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8005e24 <HAL_Delay+0x44>)
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	461a      	mov	r2, r3
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	4413      	add	r3, r2
 8005e04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005e06:	bf00      	nop
 8005e08:	f7ff ffde 	bl	8005dc8 <HAL_GetTick>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d8f7      	bhi.n	8005e08 <HAL_Delay+0x28>
  {
  }
}
 8005e18:	bf00      	nop
 8005e1a:	bf00      	nop
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	240001b8 	.word	0x240001b8

08005e28 <__NVIC_SetPriorityGrouping>:
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f003 0307 	and.w	r3, r3, #7
 8005e36:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e38:	4b0b      	ldr	r3, [pc, #44]	@ (8005e68 <__NVIC_SetPriorityGrouping+0x40>)
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e3e:	68ba      	ldr	r2, [r7, #8]
 8005e40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005e44:	4013      	ands	r3, r2
 8005e46:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005e50:	4b06      	ldr	r3, [pc, #24]	@ (8005e6c <__NVIC_SetPriorityGrouping+0x44>)
 8005e52:	4313      	orrs	r3, r2
 8005e54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e56:	4a04      	ldr	r2, [pc, #16]	@ (8005e68 <__NVIC_SetPriorityGrouping+0x40>)
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	60d3      	str	r3, [r2, #12]
}
 8005e5c:	bf00      	nop
 8005e5e:	3714      	adds	r7, #20
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr
 8005e68:	e000ed00 	.word	0xe000ed00
 8005e6c:	05fa0000 	.word	0x05fa0000

08005e70 <__NVIC_GetPriorityGrouping>:
{
 8005e70:	b480      	push	{r7}
 8005e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e74:	4b04      	ldr	r3, [pc, #16]	@ (8005e88 <__NVIC_GetPriorityGrouping+0x18>)
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	0a1b      	lsrs	r3, r3, #8
 8005e7a:	f003 0307 	and.w	r3, r3, #7
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr
 8005e88:	e000ed00 	.word	0xe000ed00

08005e8c <__NVIC_EnableIRQ>:
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	4603      	mov	r3, r0
 8005e94:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005e96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	db0b      	blt.n	8005eb6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e9e:	88fb      	ldrh	r3, [r7, #6]
 8005ea0:	f003 021f 	and.w	r2, r3, #31
 8005ea4:	4907      	ldr	r1, [pc, #28]	@ (8005ec4 <__NVIC_EnableIRQ+0x38>)
 8005ea6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005eaa:	095b      	lsrs	r3, r3, #5
 8005eac:	2001      	movs	r0, #1
 8005eae:	fa00 f202 	lsl.w	r2, r0, r2
 8005eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005eb6:	bf00      	nop
 8005eb8:	370c      	adds	r7, #12
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	e000e100 	.word	0xe000e100

08005ec8 <__NVIC_SetPriority>:
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	4603      	mov	r3, r0
 8005ed0:	6039      	str	r1, [r7, #0]
 8005ed2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005ed4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	db0a      	blt.n	8005ef2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	b2da      	uxtb	r2, r3
 8005ee0:	490c      	ldr	r1, [pc, #48]	@ (8005f14 <__NVIC_SetPriority+0x4c>)
 8005ee2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ee6:	0112      	lsls	r2, r2, #4
 8005ee8:	b2d2      	uxtb	r2, r2
 8005eea:	440b      	add	r3, r1
 8005eec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005ef0:	e00a      	b.n	8005f08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	b2da      	uxtb	r2, r3
 8005ef6:	4908      	ldr	r1, [pc, #32]	@ (8005f18 <__NVIC_SetPriority+0x50>)
 8005ef8:	88fb      	ldrh	r3, [r7, #6]
 8005efa:	f003 030f 	and.w	r3, r3, #15
 8005efe:	3b04      	subs	r3, #4
 8005f00:	0112      	lsls	r2, r2, #4
 8005f02:	b2d2      	uxtb	r2, r2
 8005f04:	440b      	add	r3, r1
 8005f06:	761a      	strb	r2, [r3, #24]
}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr
 8005f14:	e000e100 	.word	0xe000e100
 8005f18:	e000ed00 	.word	0xe000ed00

08005f1c <NVIC_EncodePriority>:
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b089      	sub	sp, #36	@ 0x24
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f003 0307 	and.w	r3, r3, #7
 8005f2e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	f1c3 0307 	rsb	r3, r3, #7
 8005f36:	2b04      	cmp	r3, #4
 8005f38:	bf28      	it	cs
 8005f3a:	2304      	movcs	r3, #4
 8005f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	3304      	adds	r3, #4
 8005f42:	2b06      	cmp	r3, #6
 8005f44:	d902      	bls.n	8005f4c <NVIC_EncodePriority+0x30>
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	3b03      	subs	r3, #3
 8005f4a:	e000      	b.n	8005f4e <NVIC_EncodePriority+0x32>
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f50:	f04f 32ff 	mov.w	r2, #4294967295
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5a:	43da      	mvns	r2, r3
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	401a      	ands	r2, r3
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f64:	f04f 31ff 	mov.w	r1, #4294967295
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f6e:	43d9      	mvns	r1, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f74:	4313      	orrs	r3, r2
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3724      	adds	r7, #36	@ 0x24
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
	...

08005f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f94:	d301      	bcc.n	8005f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005f96:	2301      	movs	r3, #1
 8005f98:	e00f      	b.n	8005fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005f9a:	4a0a      	ldr	r2, [pc, #40]	@ (8005fc4 <SysTick_Config+0x40>)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005fa2:	210f      	movs	r1, #15
 8005fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa8:	f7ff ff8e 	bl	8005ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005fac:	4b05      	ldr	r3, [pc, #20]	@ (8005fc4 <SysTick_Config+0x40>)
 8005fae:	2200      	movs	r2, #0
 8005fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005fb2:	4b04      	ldr	r3, [pc, #16]	@ (8005fc4 <SysTick_Config+0x40>)
 8005fb4:	2207      	movs	r2, #7
 8005fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3708      	adds	r7, #8
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	e000e010 	.word	0xe000e010

08005fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f7ff ff29 	bl	8005e28 <__NVIC_SetPriorityGrouping>
}
 8005fd6:	bf00      	nop
 8005fd8:	3708      	adds	r7, #8
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b086      	sub	sp, #24
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	60b9      	str	r1, [r7, #8]
 8005fe8:	607a      	str	r2, [r7, #4]
 8005fea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005fec:	f7ff ff40 	bl	8005e70 <__NVIC_GetPriorityGrouping>
 8005ff0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	68b9      	ldr	r1, [r7, #8]
 8005ff6:	6978      	ldr	r0, [r7, #20]
 8005ff8:	f7ff ff90 	bl	8005f1c <NVIC_EncodePriority>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006002:	4611      	mov	r1, r2
 8006004:	4618      	mov	r0, r3
 8006006:	f7ff ff5f 	bl	8005ec8 <__NVIC_SetPriority>
}
 800600a:	bf00      	nop
 800600c:	3718      	adds	r7, #24
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}

08006012 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006012:	b580      	push	{r7, lr}
 8006014:	b082      	sub	sp, #8
 8006016:	af00      	add	r7, sp, #0
 8006018:	4603      	mov	r3, r0
 800601a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800601c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006020:	4618      	mov	r0, r3
 8006022:	f7ff ff33 	bl	8005e8c <__NVIC_EnableIRQ>
}
 8006026:	bf00      	nop
 8006028:	3708      	adds	r7, #8
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800602e:	b580      	push	{r7, lr}
 8006030:	b082      	sub	sp, #8
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f7ff ffa4 	bl	8005f84 <SysTick_Config>
 800603c:	4603      	mov	r3, r0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3708      	adds	r7, #8
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
	...

08006048 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006048:	b480      	push	{r7}
 800604a:	b089      	sub	sp, #36	@ 0x24
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006052:	2300      	movs	r3, #0
 8006054:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006056:	4b89      	ldr	r3, [pc, #548]	@ (800627c <HAL_GPIO_Init+0x234>)
 8006058:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800605a:	e194      	b.n	8006386 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	2101      	movs	r1, #1
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	fa01 f303 	lsl.w	r3, r1, r3
 8006068:	4013      	ands	r3, r2
 800606a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	2b00      	cmp	r3, #0
 8006070:	f000 8186 	beq.w	8006380 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	f003 0303 	and.w	r3, r3, #3
 800607c:	2b01      	cmp	r3, #1
 800607e:	d005      	beq.n	800608c <HAL_GPIO_Init+0x44>
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	f003 0303 	and.w	r3, r3, #3
 8006088:	2b02      	cmp	r3, #2
 800608a:	d130      	bne.n	80060ee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	005b      	lsls	r3, r3, #1
 8006096:	2203      	movs	r2, #3
 8006098:	fa02 f303 	lsl.w	r3, r2, r3
 800609c:	43db      	mvns	r3, r3
 800609e:	69ba      	ldr	r2, [r7, #24]
 80060a0:	4013      	ands	r3, r2
 80060a2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	68da      	ldr	r2, [r3, #12]
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	005b      	lsls	r3, r3, #1
 80060ac:	fa02 f303 	lsl.w	r3, r2, r3
 80060b0:	69ba      	ldr	r2, [r7, #24]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	69ba      	ldr	r2, [r7, #24]
 80060ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80060c2:	2201      	movs	r2, #1
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ca:	43db      	mvns	r3, r3
 80060cc:	69ba      	ldr	r2, [r7, #24]
 80060ce:	4013      	ands	r3, r2
 80060d0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	091b      	lsrs	r3, r3, #4
 80060d8:	f003 0201 	and.w	r2, r3, #1
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	fa02 f303 	lsl.w	r3, r2, r3
 80060e2:	69ba      	ldr	r2, [r7, #24]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	69ba      	ldr	r2, [r7, #24]
 80060ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	f003 0303 	and.w	r3, r3, #3
 80060f6:	2b03      	cmp	r3, #3
 80060f8:	d017      	beq.n	800612a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	005b      	lsls	r3, r3, #1
 8006104:	2203      	movs	r2, #3
 8006106:	fa02 f303 	lsl.w	r3, r2, r3
 800610a:	43db      	mvns	r3, r3
 800610c:	69ba      	ldr	r2, [r7, #24]
 800610e:	4013      	ands	r3, r2
 8006110:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	689a      	ldr	r2, [r3, #8]
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	005b      	lsls	r3, r3, #1
 800611a:	fa02 f303 	lsl.w	r3, r2, r3
 800611e:	69ba      	ldr	r2, [r7, #24]
 8006120:	4313      	orrs	r3, r2
 8006122:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	69ba      	ldr	r2, [r7, #24]
 8006128:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	f003 0303 	and.w	r3, r3, #3
 8006132:	2b02      	cmp	r3, #2
 8006134:	d123      	bne.n	800617e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	08da      	lsrs	r2, r3, #3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	3208      	adds	r2, #8
 800613e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006142:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	f003 0307 	and.w	r3, r3, #7
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	220f      	movs	r2, #15
 800614e:	fa02 f303 	lsl.w	r3, r2, r3
 8006152:	43db      	mvns	r3, r3
 8006154:	69ba      	ldr	r2, [r7, #24]
 8006156:	4013      	ands	r3, r2
 8006158:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	691a      	ldr	r2, [r3, #16]
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	f003 0307 	and.w	r3, r3, #7
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	fa02 f303 	lsl.w	r3, r2, r3
 800616a:	69ba      	ldr	r2, [r7, #24]
 800616c:	4313      	orrs	r3, r2
 800616e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	08da      	lsrs	r2, r3, #3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	3208      	adds	r2, #8
 8006178:	69b9      	ldr	r1, [r7, #24]
 800617a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	005b      	lsls	r3, r3, #1
 8006188:	2203      	movs	r2, #3
 800618a:	fa02 f303 	lsl.w	r3, r2, r3
 800618e:	43db      	mvns	r3, r3
 8006190:	69ba      	ldr	r2, [r7, #24]
 8006192:	4013      	ands	r3, r2
 8006194:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	f003 0203 	and.w	r2, r3, #3
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	005b      	lsls	r3, r3, #1
 80061a2:	fa02 f303 	lsl.w	r3, r2, r3
 80061a6:	69ba      	ldr	r2, [r7, #24]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	69ba      	ldr	r2, [r7, #24]
 80061b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	f000 80e0 	beq.w	8006380 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061c0:	4b2f      	ldr	r3, [pc, #188]	@ (8006280 <HAL_GPIO_Init+0x238>)
 80061c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80061c6:	4a2e      	ldr	r2, [pc, #184]	@ (8006280 <HAL_GPIO_Init+0x238>)
 80061c8:	f043 0302 	orr.w	r3, r3, #2
 80061cc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80061d0:	4b2b      	ldr	r3, [pc, #172]	@ (8006280 <HAL_GPIO_Init+0x238>)
 80061d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80061d6:	f003 0302 	and.w	r3, r3, #2
 80061da:	60fb      	str	r3, [r7, #12]
 80061dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80061de:	4a29      	ldr	r2, [pc, #164]	@ (8006284 <HAL_GPIO_Init+0x23c>)
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	089b      	lsrs	r3, r3, #2
 80061e4:	3302      	adds	r3, #2
 80061e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	f003 0303 	and.w	r3, r3, #3
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	220f      	movs	r2, #15
 80061f6:	fa02 f303 	lsl.w	r3, r2, r3
 80061fa:	43db      	mvns	r3, r3
 80061fc:	69ba      	ldr	r2, [r7, #24]
 80061fe:	4013      	ands	r3, r2
 8006200:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a20      	ldr	r2, [pc, #128]	@ (8006288 <HAL_GPIO_Init+0x240>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d052      	beq.n	80062b0 <HAL_GPIO_Init+0x268>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a1f      	ldr	r2, [pc, #124]	@ (800628c <HAL_GPIO_Init+0x244>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d031      	beq.n	8006276 <HAL_GPIO_Init+0x22e>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a1e      	ldr	r2, [pc, #120]	@ (8006290 <HAL_GPIO_Init+0x248>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d02b      	beq.n	8006272 <HAL_GPIO_Init+0x22a>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a1d      	ldr	r2, [pc, #116]	@ (8006294 <HAL_GPIO_Init+0x24c>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d025      	beq.n	800626e <HAL_GPIO_Init+0x226>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a1c      	ldr	r2, [pc, #112]	@ (8006298 <HAL_GPIO_Init+0x250>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d01f      	beq.n	800626a <HAL_GPIO_Init+0x222>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a1b      	ldr	r2, [pc, #108]	@ (800629c <HAL_GPIO_Init+0x254>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d019      	beq.n	8006266 <HAL_GPIO_Init+0x21e>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a1a      	ldr	r2, [pc, #104]	@ (80062a0 <HAL_GPIO_Init+0x258>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d013      	beq.n	8006262 <HAL_GPIO_Init+0x21a>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a19      	ldr	r2, [pc, #100]	@ (80062a4 <HAL_GPIO_Init+0x25c>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d00d      	beq.n	800625e <HAL_GPIO_Init+0x216>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a18      	ldr	r2, [pc, #96]	@ (80062a8 <HAL_GPIO_Init+0x260>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d007      	beq.n	800625a <HAL_GPIO_Init+0x212>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a17      	ldr	r2, [pc, #92]	@ (80062ac <HAL_GPIO_Init+0x264>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d101      	bne.n	8006256 <HAL_GPIO_Init+0x20e>
 8006252:	2309      	movs	r3, #9
 8006254:	e02d      	b.n	80062b2 <HAL_GPIO_Init+0x26a>
 8006256:	230a      	movs	r3, #10
 8006258:	e02b      	b.n	80062b2 <HAL_GPIO_Init+0x26a>
 800625a:	2308      	movs	r3, #8
 800625c:	e029      	b.n	80062b2 <HAL_GPIO_Init+0x26a>
 800625e:	2307      	movs	r3, #7
 8006260:	e027      	b.n	80062b2 <HAL_GPIO_Init+0x26a>
 8006262:	2306      	movs	r3, #6
 8006264:	e025      	b.n	80062b2 <HAL_GPIO_Init+0x26a>
 8006266:	2305      	movs	r3, #5
 8006268:	e023      	b.n	80062b2 <HAL_GPIO_Init+0x26a>
 800626a:	2304      	movs	r3, #4
 800626c:	e021      	b.n	80062b2 <HAL_GPIO_Init+0x26a>
 800626e:	2303      	movs	r3, #3
 8006270:	e01f      	b.n	80062b2 <HAL_GPIO_Init+0x26a>
 8006272:	2302      	movs	r3, #2
 8006274:	e01d      	b.n	80062b2 <HAL_GPIO_Init+0x26a>
 8006276:	2301      	movs	r3, #1
 8006278:	e01b      	b.n	80062b2 <HAL_GPIO_Init+0x26a>
 800627a:	bf00      	nop
 800627c:	58000080 	.word	0x58000080
 8006280:	58024400 	.word	0x58024400
 8006284:	58000400 	.word	0x58000400
 8006288:	58020000 	.word	0x58020000
 800628c:	58020400 	.word	0x58020400
 8006290:	58020800 	.word	0x58020800
 8006294:	58020c00 	.word	0x58020c00
 8006298:	58021000 	.word	0x58021000
 800629c:	58021400 	.word	0x58021400
 80062a0:	58021800 	.word	0x58021800
 80062a4:	58021c00 	.word	0x58021c00
 80062a8:	58022000 	.word	0x58022000
 80062ac:	58022400 	.word	0x58022400
 80062b0:	2300      	movs	r3, #0
 80062b2:	69fa      	ldr	r2, [r7, #28]
 80062b4:	f002 0203 	and.w	r2, r2, #3
 80062b8:	0092      	lsls	r2, r2, #2
 80062ba:	4093      	lsls	r3, r2
 80062bc:	69ba      	ldr	r2, [r7, #24]
 80062be:	4313      	orrs	r3, r2
 80062c0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80062c2:	4938      	ldr	r1, [pc, #224]	@ (80063a4 <HAL_GPIO_Init+0x35c>)
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	089b      	lsrs	r3, r3, #2
 80062c8:	3302      	adds	r3, #2
 80062ca:	69ba      	ldr	r2, [r7, #24]
 80062cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80062d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	43db      	mvns	r3, r3
 80062dc:	69ba      	ldr	r2, [r7, #24]
 80062de:	4013      	ands	r3, r2
 80062e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d003      	beq.n	80062f6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80062ee:	69ba      	ldr	r2, [r7, #24]
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80062f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80062fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	43db      	mvns	r3, r3
 800630a:	69ba      	ldr	r2, [r7, #24]
 800630c:	4013      	ands	r3, r2
 800630e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d003      	beq.n	8006324 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800631c:	69ba      	ldr	r2, [r7, #24]
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	4313      	orrs	r3, r2
 8006322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006324:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	43db      	mvns	r3, r3
 8006336:	69ba      	ldr	r2, [r7, #24]
 8006338:	4013      	ands	r3, r2
 800633a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006344:	2b00      	cmp	r3, #0
 8006346:	d003      	beq.n	8006350 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006348:	69ba      	ldr	r2, [r7, #24]
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	4313      	orrs	r3, r2
 800634e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	69ba      	ldr	r2, [r7, #24]
 8006354:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	43db      	mvns	r3, r3
 8006360:	69ba      	ldr	r2, [r7, #24]
 8006362:	4013      	ands	r3, r2
 8006364:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800636e:	2b00      	cmp	r3, #0
 8006370:	d003      	beq.n	800637a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006372:	69ba      	ldr	r2, [r7, #24]
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	4313      	orrs	r3, r2
 8006378:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	69ba      	ldr	r2, [r7, #24]
 800637e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	3301      	adds	r3, #1
 8006384:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	fa22 f303 	lsr.w	r3, r2, r3
 8006390:	2b00      	cmp	r3, #0
 8006392:	f47f ae63 	bne.w	800605c <HAL_GPIO_Init+0x14>
  }
}
 8006396:	bf00      	nop
 8006398:	bf00      	nop
 800639a:	3724      	adds	r7, #36	@ 0x24
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr
 80063a4:	58000400 	.word	0x58000400

080063a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	460b      	mov	r3, r1
 80063b2:	807b      	strh	r3, [r7, #2]
 80063b4:	4613      	mov	r3, r2
 80063b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80063b8:	787b      	ldrb	r3, [r7, #1]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d003      	beq.n	80063c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80063be:	887a      	ldrh	r2, [r7, #2]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80063c4:	e003      	b.n	80063ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80063c6:	887b      	ldrh	r3, [r7, #2]
 80063c8:	041a      	lsls	r2, r3, #16
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	619a      	str	r2, [r3, #24]
}
 80063ce:	bf00      	nop
 80063d0:	370c      	adds	r7, #12
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr
	...

080063dc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80063e4:	4a08      	ldr	r2, [pc, #32]	@ (8006408 <HAL_HSEM_FastTake+0x2c>)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	3320      	adds	r3, #32
 80063ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063ee:	4a07      	ldr	r2, [pc, #28]	@ (800640c <HAL_HSEM_FastTake+0x30>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d101      	bne.n	80063f8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80063f4:	2300      	movs	r3, #0
 80063f6:	e000      	b.n	80063fa <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	370c      	adds	r7, #12
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	58026400 	.word	0x58026400
 800640c:	80000300 	.word	0x80000300

08006410 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800641a:	4906      	ldr	r1, [pc, #24]	@ (8006434 <HAL_HSEM_Release+0x24>)
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr
 8006434:	58026400 	.word	0x58026400

08006438 <HAL_MMC_Init>:
            MMC_HandleTypeDef and create the associated handle.
  * @param  hmmc: Pointer to the MMC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_Init(MMC_HandleTypeDef *hmmc)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  /* Check the MMC handle allocation */
  if (hmmc == NULL)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d101      	bne.n	800644a <HAL_MMC_Init+0x12>
  {
    return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e031      	b.n	80064ae <HAL_MMC_Init+0x76>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hmmc->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hmmc->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hmmc->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hmmc->Init.ClockDiv));

  if (hmmc->State == HAL_MMC_STATE_RESET)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b00      	cmp	r3, #0
 8006454:	d105      	bne.n	8006462 <HAL_MMC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hmmc->Lock = HAL_UNLOCKED;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hmmc->MspInitCallback(hmmc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_MMC_MspInit(hmmc);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f7fe fc43 	bl	8004ce8 <HAL_MMC_MspInit>
#endif /* USE_HAL_MMC_REGISTER_CALLBACKS */
  }

  hmmc->State = HAL_MMC_STATE_BUSY;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2203      	movs	r2, #3
 8006466:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_MMC_InitCard(hmmc) == HAL_ERROR)
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f824 	bl	80064b8 <HAL_MMC_InitCard>
 8006470:	4603      	mov	r3, r0
 8006472:	2b01      	cmp	r3, #1
 8006474:	d101      	bne.n	800647a <HAL_MMC_Init+0x42>
  {
    return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e019      	b.n	80064ae <HAL_MMC_Init+0x76>
  }

  /* Initialize the error code */
  hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the MMC operation */
  hmmc->Context = MMC_CONTEXT_NONE;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the MMC state */
  hmmc->State = HAL_MMC_STATE_READY;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2201      	movs	r2, #1
 800648a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Configure bus width */
  if (hmmc->Init.BusWide != SDMMC_BUS_WIDE_1B)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00a      	beq.n	80064ac <HAL_MMC_Init+0x74>
  {
    if (HAL_MMC_ConfigWideBusOperation(hmmc, hmmc->Init.BusWide) != HAL_OK)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	4619      	mov	r1, r3
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f001 f855 	bl	800754c <HAL_MMC_ConfigWideBusOperation>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d001      	beq.n	80064ac <HAL_MMC_Init+0x74>
    {
      return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e000      	b.n	80064ae <HAL_MMC_Init+0x76>
    }
  }

  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3708      	adds	r7, #8
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
	...

080064b8 <HAL_MMC_InitCard>:
  * @note   This function initializes the MMC card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 80064b8:	b590      	push	{r4, r7, lr}
 80064ba:	b08d      	sub	sp, #52	@ 0x34
 80064bc:	af02      	add	r7, sp, #8
 80064be:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  MMC_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for MMC card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80064c0:	2300      	movs	r3, #0
 80064c2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80064c4:	2300      	movs	r3, #0
 80064c6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80064c8:	2300      	movs	r3, #0
 80064ca:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80064cc:	2300      	movs	r3, #0
 80064ce:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80064d0:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80064d4:	f04f 0100 	mov.w	r1, #0
 80064d8:	f003 f96a 	bl	80097b0 <HAL_RCCEx_GetPeriphCLKFreq>
 80064dc:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 80064de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d109      	bne.n	80064f8 <HAL_MMC_InitCard+0x40>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hmmc->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80064f2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e070      	b.n	80065da <HAL_MMC_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * MMC_INIT_FREQ);
 80064f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064fa:	0a1b      	lsrs	r3, r3, #8
 80064fc:	4a39      	ldr	r2, [pc, #228]	@ (80065e4 <HAL_MMC_InitCard+0x12c>)
 80064fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006502:	091b      	lsrs	r3, r3, #4
 8006504:	61fb      	str	r3, [r7, #28]
#if (USE_SD_TRANSCEIVER != 0U)
  Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
#endif /* USE_SD_TRANSCEIVER */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hmmc->Instance, Init);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681c      	ldr	r4, [r3, #0]
 800650a:	466a      	mov	r2, sp
 800650c:	f107 0318 	add.w	r3, r7, #24
 8006510:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006514:	e882 0003 	stmia.w	r2, {r0, r1}
 8006518:	f107 030c 	add.w	r3, r7, #12
 800651c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800651e:	4620      	mov	r0, r4
 8006520:	f005 fd88 	bl	800c034 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hmmc->Instance);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4618      	mov	r0, r3
 800652a:	f005 fdcb 	bl	800c0c4 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the MMC initialization sequence */
  if (Init.ClockDiv != 0U)
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d005      	beq.n	8006540 <HAL_MMC_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	005b      	lsls	r3, r3, #1
 8006538:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800653a:	fbb2 f3f3 	udiv	r3, r2, r3
 800653e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8006540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006542:	2b00      	cmp	r3, #0
 8006544:	d007      	beq.n	8006556 <HAL_MMC_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8006546:	4a28      	ldr	r2, [pc, #160]	@ (80065e8 <HAL_MMC_InitCard+0x130>)
 8006548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800654a:	fbb2 f3f3 	udiv	r3, r2, r3
 800654e:	3301      	adds	r3, #1
 8006550:	4618      	mov	r0, r3
 8006552:	f7ff fc45 	bl	8005de0 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = MMC_PowerON(hmmc);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f001 f9e2 	bl	8007920 <MMC_PowerON>
 800655c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 800655e:	6a3b      	ldr	r3, [r7, #32]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00b      	beq.n	800657c <HAL_MMC_InitCard+0xc4>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hmmc->ErrorCode |= errorstate;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006570:	6a3b      	ldr	r3, [r7, #32]
 8006572:	431a      	orrs	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e02e      	b.n	80065da <HAL_MMC_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = MMC_InitCard(hmmc);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f001 f8d1 	bl	8007724 <MMC_InitCard>
 8006582:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8006584:	6a3b      	ldr	r3, [r7, #32]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00b      	beq.n	80065a2 <HAL_MMC_InitCard+0xea>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2201      	movs	r2, #1
 800658e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hmmc->ErrorCode |= errorstate;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006596:	6a3b      	ldr	r3, [r7, #32]
 8006598:	431a      	orrs	r2, r3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e01b      	b.n	80065da <HAL_MMC_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hmmc->Instance, MMC_BLOCKSIZE);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80065aa:	4618      	mov	r0, r3
 80065ac:	f005 fe20 	bl	800c1f0 <SDMMC_CmdBlockLength>
 80065b0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 80065b2:	6a3b      	ldr	r3, [r7, #32]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d00f      	beq.n	80065d8 <HAL_MMC_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a0b      	ldr	r2, [pc, #44]	@ (80065ec <HAL_MMC_InitCard+0x134>)
 80065be:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065c4:	6a3b      	ldr	r3, [r7, #32]
 80065c6:	431a      	orrs	r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e000      	b.n	80065da <HAL_MMC_InitCard+0x122>
  }

  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	372c      	adds	r7, #44	@ 0x2c
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd90      	pop	{r4, r7, pc}
 80065e2:	bf00      	nop
 80065e4:	014f8b59 	.word	0x014f8b59
 80065e8:	00012110 	.word	0x00012110
 80065ec:	1fe00fff 	.word	0x1fe00fff

080065f0 <HAL_MMC_ReadBlocks>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_ReadBlocks(MMC_HandleTypeDef *hmmc, uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks,
                                     uint32_t Timeout)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b092      	sub	sp, #72	@ 0x48
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	607a      	str	r2, [r7, #4]
 80065fc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80065fe:	f7ff fbe3 	bl	8005dc8 <HAL_GetTick>
 8006602:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d107      	bne.n	8006622 <HAL_MMC_ReadBlocks+0x32>
  {
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006616:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e172      	b.n	8006908 <HAL_MMC_ReadBlocks+0x318>
  }

  if (hmmc->State == HAL_MMC_STATE_READY)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006628:	b2db      	uxtb	r3, r3
 800662a:	2b01      	cmp	r3, #1
 800662c:	f040 8165 	bne.w	80068fa <HAL_MMC_ReadBlocks+0x30a>
  {
    hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2200      	movs	r2, #0
 8006634:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((BlockAdd + NumberOfBlocks) > (hmmc->MmcCard.LogBlockNbr))
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	441a      	add	r2, r3
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006640:	429a      	cmp	r2, r3
 8006642:	d907      	bls.n	8006654 <HAL_MMC_ReadBlocks+0x64>
    {
      hmmc->ErrorCode |= HAL_MMC_ERROR_ADDR_OUT_OF_RANGE;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006648:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e159      	b.n	8006908 <HAL_MMC_ReadBlocks+0x318>
    }

    /* Check the case of 4kB blocks (field DATA SECTOR SIZE of extended CSD register) */
    if (((hmmc->Ext_CSD[(MMC_EXT_CSD_DATA_SEC_SIZE_INDEX / 4)] >> MMC_EXT_CSD_DATA_SEC_SIZE_POS)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800665a:	0a1b      	lsrs	r3, r3, #8
         & 0x000000FFU) != 0x0U)
 800665c:	b2db      	uxtb	r3, r3
    if (((hmmc->Ext_CSD[(MMC_EXT_CSD_DATA_SEC_SIZE_INDEX / 4)] >> MMC_EXT_CSD_DATA_SEC_SIZE_POS)
 800665e:	2b00      	cmp	r3, #0
 8006660:	d019      	beq.n	8006696 <HAL_MMC_ReadBlocks+0xa6>
    {
      if ((NumberOfBlocks % 8U) != 0U)
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	f003 0307 	and.w	r3, r3, #7
 8006668:	2b00      	cmp	r3, #0
 800666a:	d007      	beq.n	800667c <HAL_MMC_ReadBlocks+0x8c>
      {
        /* The number of blocks should be a multiple of 8 sectors of 512 bytes = 4 KBytes */
        hmmc->ErrorCode |= HAL_MMC_ERROR_BLOCK_LEN_ERR;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006670:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	635a      	str	r2, [r3, #52]	@ 0x34
        return HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	e145      	b.n	8006908 <HAL_MMC_ReadBlocks+0x318>
      }

      if ((BlockAdd % 8U) != 0U)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f003 0307 	and.w	r3, r3, #7
 8006682:	2b00      	cmp	r3, #0
 8006684:	d007      	beq.n	8006696 <HAL_MMC_ReadBlocks+0xa6>
      {
        /* The address should be aligned to 8 (corresponding to 4 KBytes blocks) */
        hmmc->ErrorCode |= HAL_MMC_ERROR_ADDR_MISALIGNED;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800668a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	635a      	str	r2, [r3, #52]	@ 0x34
        return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e138      	b.n	8006908 <HAL_MMC_ReadBlocks+0x318>
      }
    }

    hmmc->State = HAL_MMC_STATE_BUSY;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2203      	movs	r2, #3
 800669a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hmmc->Instance->DCTRL = 0U;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2200      	movs	r2, #0
 80066a4:	62da      	str	r2, [r3, #44]	@ 0x2c

    if ((hmmc->MmcCard.CardType) != MMC_HIGH_CAPACITY_CARD)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d002      	beq.n	80066b4 <HAL_MMC_ReadBlocks+0xc4>
    {
      add *= 512U;
 80066ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066b0:	025b      	lsls	r3, r3, #9
 80066b2:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the MMC DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80066b4:	f04f 33ff 	mov.w	r3, #4294967295
 80066b8:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * MMC_BLOCKSIZE;
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	025b      	lsls	r3, r3, #9
 80066be:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80066c0:	2390      	movs	r3, #144	@ 0x90
 80066c2:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80066c4:	2302      	movs	r3, #2
 80066c6:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80066c8:	2300      	movs	r3, #0
 80066ca:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80066cc:	2300      	movs	r3, #0
 80066ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hmmc->Instance, &config);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f107 0214 	add.w	r2, r7, #20
 80066d8:	4611      	mov	r1, r2
 80066da:	4618      	mov	r0, r3
 80066dc:	f005 fd5c 	bl	800c198 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hmmc->Instance);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68da      	ldr	r2, [r3, #12]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80066ee:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d90a      	bls.n	800670c <HAL_MMC_ReadBlocks+0x11c>
    {
      hmmc->Context = MMC_CONTEXT_READ_MULTIPLE_BLOCK;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2202      	movs	r2, #2
 80066fa:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hmmc->Instance, add);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006702:	4618      	mov	r0, r3
 8006704:	f005 fdba 	bl	800c27c <SDMMC_CmdReadMultiBlock>
 8006708:	6478      	str	r0, [r7, #68]	@ 0x44
 800670a:	e009      	b.n	8006720 <HAL_MMC_ReadBlocks+0x130>
    }
    else
    {
      hmmc->Context = MMC_CONTEXT_READ_SINGLE_BLOCK;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2201      	movs	r2, #1
 8006710:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hmmc->Instance, add);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006718:	4618      	mov	r0, r3
 800671a:	f005 fd8c 	bl	800c236 <SDMMC_CmdReadSingleBlock>
 800671e:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_MMC_ERROR_NONE)
 8006720:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00f      	beq.n	8006746 <HAL_MMC_ReadBlocks+0x156>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a79      	ldr	r2, [pc, #484]	@ (8006910 <HAL_MMC_ReadBlocks+0x320>)
 800672c:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= errorstate;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006732:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006734:	431a      	orrs	r2, r3
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2201      	movs	r2, #1
 800673e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e0e0      	b.n	8006908 <HAL_MMC_ReadBlocks+0x318>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_MMC_GET_FLAG(hmmc,
 800674a:	e055      	b.n	80067f8 <HAL_MMC_ReadBlocks+0x208>
                               SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
    {
      if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006752:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d033      	beq.n	80067c2 <HAL_MMC_ReadBlocks+0x1d2>
 800675a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800675c:	2b1f      	cmp	r3, #31
 800675e:	d930      	bls.n	80067c2 <HAL_MMC_ReadBlocks+0x1d2>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8006760:	2300      	movs	r3, #0
 8006762:	643b      	str	r3, [r7, #64]	@ 0x40
 8006764:	e027      	b.n	80067b6 <HAL_MMC_ReadBlocks+0x1c6>
        {
          data = SDMMC_ReadFIFO(hmmc->Instance);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4618      	mov	r0, r3
 800676c:	f005 fc8c 	bl	800c088 <SDMMC_ReadFIFO>
 8006770:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8006772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006774:	b2da      	uxtb	r2, r3
 8006776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006778:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800677a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800677c:	3301      	adds	r3, #1
 800677e:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006782:	0a1b      	lsrs	r3, r3, #8
 8006784:	b2da      	uxtb	r2, r3
 8006786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006788:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800678a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800678c:	3301      	adds	r3, #1
 800678e:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006792:	0c1b      	lsrs	r3, r3, #16
 8006794:	b2da      	uxtb	r2, r3
 8006796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006798:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800679a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800679c:	3301      	adds	r3, #1
 800679e:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80067a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067a2:	0e1b      	lsrs	r3, r3, #24
 80067a4:	b2da      	uxtb	r2, r3
 80067a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067a8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80067aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067ac:	3301      	adds	r3, #1
 80067ae:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < 8U; count++)
 80067b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067b2:	3301      	adds	r3, #1
 80067b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80067b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067b8:	2b07      	cmp	r3, #7
 80067ba:	d9d4      	bls.n	8006766 <HAL_MMC_ReadBlocks+0x176>
        }
        dataremaining -= 32U;
 80067bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067be:	3b20      	subs	r3, #32
 80067c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80067c2:	f7ff fb01 	bl	8005dc8 <HAL_GetTick>
 80067c6:	4602      	mov	r2, r0
 80067c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d902      	bls.n	80067d8 <HAL_MMC_ReadBlocks+0x1e8>
 80067d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d10f      	bne.n	80067f8 <HAL_MMC_ReadBlocks+0x208>
      {
        /* Clear all the static flags */
        __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a4c      	ldr	r2, [pc, #304]	@ (8006910 <HAL_MMC_ReadBlocks+0x320>)
 80067de:	639a      	str	r2, [r3, #56]	@ 0x38
        hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067e4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	635a      	str	r2, [r3, #52]	@ 0x34
        hmmc->State = HAL_MMC_STATE_READY;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e087      	b.n	8006908 <HAL_MMC_ReadBlocks+0x318>
    while (!__HAL_MMC_GET_FLAG(hmmc,
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067fe:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8006802:	2b00      	cmp	r3, #0
 8006804:	d0a2      	beq.n	800674c <HAL_MMC_ReadBlocks+0x15c>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hmmc->Instance);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68da      	ldr	r2, [r3, #12]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006814:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800681c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006820:	2b00      	cmp	r3, #0
 8006822:	d01b      	beq.n	800685c <HAL_MMC_ReadBlocks+0x26c>
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	2b01      	cmp	r3, #1
 8006828:	d918      	bls.n	800685c <HAL_MMC_ReadBlocks+0x26c>
    {
      /* Send stop transmission command */
      errorstate = SDMMC_CmdStopTransfer(hmmc->Instance);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4618      	mov	r0, r3
 8006830:	f005 fd8e 	bl	800c350 <SDMMC_CmdStopTransfer>
 8006834:	6478      	str	r0, [r7, #68]	@ 0x44
      if (errorstate != HAL_MMC_ERROR_NONE)
 8006836:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006838:	2b00      	cmp	r3, #0
 800683a:	d00f      	beq.n	800685c <HAL_MMC_ReadBlocks+0x26c>
      {
        /* Clear all the static flags */
        __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a33      	ldr	r2, [pc, #204]	@ (8006910 <HAL_MMC_ReadBlocks+0x320>)
 8006842:	639a      	str	r2, [r3, #56]	@ 0x38
        hmmc->ErrorCode |= errorstate;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006848:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800684a:	431a      	orrs	r2, r3
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	635a      	str	r2, [r3, #52]	@ 0x34
        hmmc->State = HAL_MMC_STATE_READY;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	e055      	b.n	8006908 <HAL_MMC_ReadBlocks+0x318>
      }
    }

    /* Get error state */
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006862:	f003 0308 	and.w	r3, r3, #8
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00f      	beq.n	800688a <HAL_MMC_ReadBlocks+0x29a>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a28      	ldr	r2, [pc, #160]	@ (8006910 <HAL_MMC_ReadBlocks+0x320>)
 8006870:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006876:	f043 0208 	orr.w	r2, r3, #8
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2201      	movs	r2, #1
 8006882:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	e03e      	b.n	8006908 <HAL_MMC_ReadBlocks+0x318>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006890:	f003 0302 	and.w	r3, r3, #2
 8006894:	2b00      	cmp	r3, #0
 8006896:	d00f      	beq.n	80068b8 <HAL_MMC_ReadBlocks+0x2c8>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a1c      	ldr	r2, [pc, #112]	@ (8006910 <HAL_MMC_ReadBlocks+0x320>)
 800689e:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068a4:	f043 0202 	orr.w	r2, r3, #2
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e027      	b.n	8006908 <HAL_MMC_ReadBlocks+0x318>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068be:	f003 0320 	and.w	r3, r3, #32
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d00f      	beq.n	80068e6 <HAL_MMC_ReadBlocks+0x2f6>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a11      	ldr	r2, [pc, #68]	@ (8006910 <HAL_MMC_ReadBlocks+0x320>)
 80068cc:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068d2:	f043 0220 	orr.w	r2, r3, #32
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2201      	movs	r2, #1
 80068de:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e010      	b.n	8006908 <HAL_MMC_ReadBlocks+0x318>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a0a      	ldr	r2, [pc, #40]	@ (8006914 <HAL_MMC_ReadBlocks+0x324>)
 80068ec:	639a      	str	r2, [r3, #56]	@ 0x38

    hmmc->State = HAL_MMC_STATE_READY;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2201      	movs	r2, #1
 80068f2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 80068f6:	2300      	movs	r3, #0
 80068f8:	e006      	b.n	8006908 <HAL_MMC_ReadBlocks+0x318>
  }
  else
  {
    hmmc->ErrorCode |= HAL_MMC_ERROR_BUSY;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068fe:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
  }
}
 8006908:	4618      	mov	r0, r3
 800690a:	3748      	adds	r7, #72	@ 0x48
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}
 8006910:	1fe00fff 	.word	0x1fe00fff
 8006914:	18000f3a 	.word	0x18000f3a

08006918 <HAL_MMC_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_WriteBlocks(MMC_HandleTypeDef *hmmc, const uint8_t *pData, uint32_t BlockAdd,
                                      uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b092      	sub	sp, #72	@ 0x48
 800691c:	af00      	add	r7, sp, #0
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	60b9      	str	r1, [r7, #8]
 8006922:	607a      	str	r2, [r7, #4]
 8006924:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006926:	f7ff fa4f 	bl	8005dc8 <HAL_GetTick>
 800692a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	63bb      	str	r3, [r7, #56]	@ 0x38
  const uint8_t *tempbuff = pData;
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d107      	bne.n	800694a <HAL_MMC_WriteBlocks+0x32>
  {
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800693e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e176      	b.n	8006c38 <HAL_MMC_WriteBlocks+0x320>
  }

  if (hmmc->State == HAL_MMC_STATE_READY)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006950:	b2db      	uxtb	r3, r3
 8006952:	2b01      	cmp	r3, #1
 8006954:	f040 8169 	bne.w	8006c2a <HAL_MMC_WriteBlocks+0x312>
  {
    hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2200      	movs	r2, #0
 800695c:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((BlockAdd + NumberOfBlocks) > (hmmc->MmcCard.LogBlockNbr))
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	441a      	add	r2, r3
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006968:	429a      	cmp	r2, r3
 800696a:	d907      	bls.n	800697c <HAL_MMC_WriteBlocks+0x64>
    {
      hmmc->ErrorCode |= HAL_MMC_ERROR_ADDR_OUT_OF_RANGE;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006970:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e15d      	b.n	8006c38 <HAL_MMC_WriteBlocks+0x320>
    }

    /* Check the case of 4kB blocks (field DATA SECTOR SIZE of extended CSD register) */
    if (((hmmc->Ext_CSD[(MMC_EXT_CSD_DATA_SEC_SIZE_INDEX / 4)] >> MMC_EXT_CSD_DATA_SEC_SIZE_POS) & 0x000000FFU) != 0x0U)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006982:	0a1b      	lsrs	r3, r3, #8
 8006984:	b2db      	uxtb	r3, r3
 8006986:	2b00      	cmp	r3, #0
 8006988:	d019      	beq.n	80069be <HAL_MMC_WriteBlocks+0xa6>
    {
      if ((NumberOfBlocks % 8U) != 0U)
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	f003 0307 	and.w	r3, r3, #7
 8006990:	2b00      	cmp	r3, #0
 8006992:	d007      	beq.n	80069a4 <HAL_MMC_WriteBlocks+0x8c>
      {
        /* The number of blocks should be a multiple of 8 sectors of 512 bytes = 4 KBytes */
        hmmc->ErrorCode |= HAL_MMC_ERROR_BLOCK_LEN_ERR;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006998:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	635a      	str	r2, [r3, #52]	@ 0x34
        return HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	e149      	b.n	8006c38 <HAL_MMC_WriteBlocks+0x320>
      }

      if ((BlockAdd % 8U) != 0U)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f003 0307 	and.w	r3, r3, #7
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d007      	beq.n	80069be <HAL_MMC_WriteBlocks+0xa6>
      {
        /* The address should be aligned to 8 (corresponding to 4 KBytes blocks) */
        hmmc->ErrorCode |= HAL_MMC_ERROR_ADDR_MISALIGNED;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069b2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	635a      	str	r2, [r3, #52]	@ 0x34
        return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e13c      	b.n	8006c38 <HAL_MMC_WriteBlocks+0x320>
      }
    }

    hmmc->State = HAL_MMC_STATE_BUSY;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2203      	movs	r2, #3
 80069c2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hmmc->Instance->DCTRL = 0U;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2200      	movs	r2, #0
 80069cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    if ((hmmc->MmcCard.CardType) != MMC_HIGH_CAPACITY_CARD)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d002      	beq.n	80069dc <HAL_MMC_WriteBlocks+0xc4>
    {
      add *= 512U;
 80069d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d8:	025b      	lsls	r3, r3, #9
 80069da:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the MMC DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80069dc:	f04f 33ff 	mov.w	r3, #4294967295
 80069e0:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * MMC_BLOCKSIZE;
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	025b      	lsls	r3, r3, #9
 80069e6:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80069e8:	2390      	movs	r3, #144	@ 0x90
 80069ea:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80069ec:	2300      	movs	r3, #0
 80069ee:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80069f0:	2300      	movs	r3, #0
 80069f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80069f4:	2300      	movs	r3, #0
 80069f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hmmc->Instance, &config);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f107 0218 	add.w	r2, r7, #24
 8006a00:	4611      	mov	r1, r2
 8006a02:	4618      	mov	r0, r3
 8006a04:	f005 fbc8 	bl	800c198 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hmmc->Instance);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68da      	ldr	r2, [r3, #12]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a16:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d90a      	bls.n	8006a34 <HAL_MMC_WriteBlocks+0x11c>
    {
      hmmc->Context = MMC_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2220      	movs	r2, #32
 8006a22:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hmmc->Instance, add);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f005 fc6c 	bl	800c308 <SDMMC_CmdWriteMultiBlock>
 8006a30:	6478      	str	r0, [r7, #68]	@ 0x44
 8006a32:	e009      	b.n	8006a48 <HAL_MMC_WriteBlocks+0x130>
    }
    else
    {
      hmmc->Context = MMC_CONTEXT_WRITE_SINGLE_BLOCK;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2210      	movs	r2, #16
 8006a38:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hmmc->Instance, add);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006a40:	4618      	mov	r0, r3
 8006a42:	f005 fc3e 	bl	800c2c2 <SDMMC_CmdWriteSingleBlock>
 8006a46:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_MMC_ERROR_NONE)
 8006a48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00f      	beq.n	8006a6e <HAL_MMC_WriteBlocks+0x156>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a7b      	ldr	r2, [pc, #492]	@ (8006c40 <HAL_MMC_WriteBlocks+0x328>)
 8006a54:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= errorstate;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a5c:	431a      	orrs	r2, r3
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2201      	movs	r2, #1
 8006a66:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e0e4      	b.n	8006c38 <HAL_MMC_WriteBlocks+0x320>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_MMC_GET_FLAG(hmmc,
 8006a72:	e059      	b.n	8006b28 <HAL_MMC_WriteBlocks+0x210>
                               SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
    {
      if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d037      	beq.n	8006af2 <HAL_MMC_WriteBlocks+0x1da>
 8006a82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a84:	2b1f      	cmp	r3, #31
 8006a86:	d934      	bls.n	8006af2 <HAL_MMC_WriteBlocks+0x1da>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 8006a88:	2300      	movs	r3, #0
 8006a8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a8c:	e02b      	b.n	8006ae6 <HAL_MMC_WriteBlocks+0x1ce>
        {
          data = (uint32_t)(*tempbuff);
 8006a8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006a94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a96:	3301      	adds	r3, #1
 8006a98:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8006a9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	021a      	lsls	r2, r3, #8
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8006aac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	041a      	lsls	r2, r3, #16
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aba:	3301      	adds	r3, #1
 8006abc:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	061a      	lsls	r2, r3, #24
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006aca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006acc:	3301      	adds	r3, #1
 8006ace:	637b      	str	r3, [r7, #52]	@ 0x34
          (void)SDMMC_WriteFIFO(hmmc->Instance, &data);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f107 0214 	add.w	r2, r7, #20
 8006ad8:	4611      	mov	r1, r2
 8006ada:	4618      	mov	r0, r3
 8006adc:	f005 fae1 	bl	800c0a2 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8006ae0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ae6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ae8:	2b07      	cmp	r3, #7
 8006aea:	d9d0      	bls.n	8006a8e <HAL_MMC_WriteBlocks+0x176>
        }
        dataremaining -= 32U;
 8006aec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006aee:	3b20      	subs	r3, #32
 8006af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8006af2:	f7ff f969 	bl	8005dc8 <HAL_GetTick>
 8006af6:	4602      	mov	r2, r0
 8006af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d902      	bls.n	8006b08 <HAL_MMC_WriteBlocks+0x1f0>
 8006b02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d10f      	bne.n	8006b28 <HAL_MMC_WriteBlocks+0x210>
      {
        /* Clear all the static flags */
        __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a4c      	ldr	r2, [pc, #304]	@ (8006c40 <HAL_MMC_WriteBlocks+0x328>)
 8006b0e:	639a      	str	r2, [r3, #56]	@ 0x38
        hmmc->ErrorCode |= errorstate;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b16:	431a      	orrs	r2, r3
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	635a      	str	r2, [r3, #52]	@ 0x34
        hmmc->State = HAL_MMC_STATE_READY;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8006b24:	2303      	movs	r3, #3
 8006b26:	e087      	b.n	8006c38 <HAL_MMC_WriteBlocks+0x320>
    while (!__HAL_MMC_GET_FLAG(hmmc,
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b2e:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d09e      	beq.n	8006a74 <HAL_MMC_WriteBlocks+0x15c>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hmmc->Instance);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	68da      	ldr	r2, [r3, #12]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b44:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d01b      	beq.n	8006b8c <HAL_MMC_WriteBlocks+0x274>
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d918      	bls.n	8006b8c <HAL_MMC_WriteBlocks+0x274>
    {
      /* Send stop transmission command */
      errorstate = SDMMC_CmdStopTransfer(hmmc->Instance);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f005 fbf6 	bl	800c350 <SDMMC_CmdStopTransfer>
 8006b64:	6478      	str	r0, [r7, #68]	@ 0x44
      if (errorstate != HAL_MMC_ERROR_NONE)
 8006b66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d00f      	beq.n	8006b8c <HAL_MMC_WriteBlocks+0x274>
      {
        /* Clear all the static flags */
        __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a33      	ldr	r2, [pc, #204]	@ (8006c40 <HAL_MMC_WriteBlocks+0x328>)
 8006b72:	639a      	str	r2, [r3, #56]	@ 0x38
        hmmc->ErrorCode |= errorstate;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b7a:	431a      	orrs	r2, r3
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	635a      	str	r2, [r3, #52]	@ 0x34
        hmmc->State = HAL_MMC_STATE_READY;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e055      	b.n	8006c38 <HAL_MMC_WriteBlocks+0x320>
      }
    }

    /* Get error state */
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b92:	f003 0308 	and.w	r3, r3, #8
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d00f      	beq.n	8006bba <HAL_MMC_WriteBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a28      	ldr	r2, [pc, #160]	@ (8006c40 <HAL_MMC_WriteBlocks+0x328>)
 8006ba0:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ba6:	f043 0208 	orr.w	r2, r3, #8
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e03e      	b.n	8006c38 <HAL_MMC_WriteBlocks+0x320>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bc0:	f003 0302 	and.w	r3, r3, #2
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d00f      	beq.n	8006be8 <HAL_MMC_WriteBlocks+0x2d0>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a1c      	ldr	r2, [pc, #112]	@ (8006c40 <HAL_MMC_WriteBlocks+0x328>)
 8006bce:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bd4:	f043 0202 	orr.w	r2, r3, #2
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	e027      	b.n	8006c38 <HAL_MMC_WriteBlocks+0x320>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_TXUNDERR))
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bee:	f003 0310 	and.w	r3, r3, #16
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00f      	beq.n	8006c16 <HAL_MMC_WriteBlocks+0x2fe>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a11      	ldr	r2, [pc, #68]	@ (8006c40 <HAL_MMC_WriteBlocks+0x328>)
 8006bfc:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_TX_UNDERRUN;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c02:	f043 0210 	orr.w	r2, r3, #16
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e010      	b.n	8006c38 <HAL_MMC_WriteBlocks+0x320>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8006c44 <HAL_MMC_WriteBlocks+0x32c>)
 8006c1c:	639a      	str	r2, [r3, #56]	@ 0x38

    hmmc->State = HAL_MMC_STATE_READY;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2201      	movs	r2, #1
 8006c22:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 8006c26:	2300      	movs	r3, #0
 8006c28:	e006      	b.n	8006c38 <HAL_MMC_WriteBlocks+0x320>
  }
  else
  {
    hmmc->ErrorCode |= HAL_MMC_ERROR_BUSY;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c2e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
  }
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3748      	adds	r7, #72	@ 0x48
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	1fe00fff 	.word	0x1fe00fff
 8006c44:	18000f3a 	.word	0x18000f3a

08006c48 <HAL_MMC_IRQHandler>:
  * @brief  This function handles MMC card interrupt request.
  * @param  hmmc: Pointer to MMC handle
  * @retval None
  */
void HAL_MMC_IRQHandler(MMC_HandleTypeDef *hmmc)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hmmc->Context;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c54:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & MMC_CONTEXT_IT) != 0U))
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d008      	beq.n	8006c76 <HAL_MMC_IRQHandler+0x2e>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f003 0308 	and.w	r3, r3, #8
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d003      	beq.n	8006c76 <HAL_MMC_IRQHandler+0x2e>
  {
    MMC_Read_IT(hmmc);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 ffc2 	bl	8007bf8 <MMC_Read_IT>
 8006c74:	e194      	b.n	8006fa0 <HAL_MMC_IRQHandler+0x358>
  }

  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DATAEND) != RESET)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f000 80aa 	beq.w	8006dda <HAL_MMC_IRQHandler+0x192>
  {
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_FLAG_DATAEND);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006c8e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_MMC_DISABLE_IT(hmmc, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	4b9a      	ldr	r3, [pc, #616]	@ (8006f04 <HAL_MMC_IRQHandler+0x2bc>)
 8006c9c:	400b      	ands	r3, r1
 8006c9e:	63d3      	str	r3, [r2, #60]	@ 0x3c
                         SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                         SDMMC_IT_RXFIFOHF);

    __HAL_MMC_DISABLE_IT(hmmc, SDMMC_IT_IDMABTC);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8006cae:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hmmc->Instance);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	68da      	ldr	r2, [r3, #12]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cbe:	60da      	str	r2, [r3, #12]

    if ((context & MMC_CONTEXT_DMA) != 0U)
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d04b      	beq.n	8006d62 <HAL_MMC_IRQHandler+0x11a>
    {
      hmmc->Instance->DLEN = 0;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	629a      	str	r2, [r3, #40]	@ 0x28
      hmmc->Instance->DCTRL = 0;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	62da      	str	r2, [r3, #44]	@ 0x2c
      hmmc->Instance->IDMACTRL = SDMMC_DISABLE_IDMA ;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Stop Transfer for Write Multi blocks or Read Multi blocks */
      if (((context & MMC_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & MMC_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f003 0302 	and.w	r3, r3, #2
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d104      	bne.n	8006cf6 <HAL_MMC_IRQHandler+0xae>
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f003 0320 	and.w	r3, r3, #32
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d011      	beq.n	8006d1a <HAL_MMC_IRQHandler+0xd2>
      {
        errorstate = SDMMC_CmdStopTransfer(hmmc->Instance);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f005 fb28 	bl	800c350 <SDMMC_CmdStopTransfer>
 8006d00:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_MMC_ERROR_NONE)
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d008      	beq.n	8006d1a <HAL_MMC_IRQHandler+0xd2>
        {
          hmmc->ErrorCode |= errorstate;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	431a      	orrs	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_MMC_REGISTER_CALLBACKS) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)
          hmmc->ErrorCallback(hmmc);
#else
          HAL_MMC_ErrorCallback(hmmc);
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 f947 	bl	8006fa8 <HAL_MMC_ErrorCallback>
#endif /* USE_HAL_MMC_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a7a      	ldr	r2, [pc, #488]	@ (8006f08 <HAL_MMC_IRQHandler+0x2c0>)
 8006d20:	639a      	str	r2, [r3, #56]	@ 0x38

      hmmc->State = HAL_MMC_STATE_READY;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2201      	movs	r2, #1
 8006d26:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      if (((context & MMC_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & MMC_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f003 0310 	and.w	r3, r3, #16
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d104      	bne.n	8006d3e <HAL_MMC_IRQHandler+0xf6>
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f003 0320 	and.w	r3, r3, #32
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d002      	beq.n	8006d44 <HAL_MMC_IRQHandler+0xfc>
      {
#if defined (USE_HAL_MMC_REGISTER_CALLBACKS) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)
        hmmc->TxCpltCallback(hmmc);
#else
        HAL_MMC_TxCpltCallback(hmmc);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f7fc fb2a 	bl	8003398 <HAL_MMC_TxCpltCallback>
#endif /* USE_HAL_MMC_REGISTER_CALLBACKS */
      }
      if (((context & MMC_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & MMC_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f003 0301 	and.w	r3, r3, #1
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d105      	bne.n	8006d5a <HAL_MMC_IRQHandler+0x112>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f003 0302 	and.w	r3, r3, #2
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f000 8123 	beq.w	8006fa0 <HAL_MMC_IRQHandler+0x358>
      {
#if defined (USE_HAL_MMC_REGISTER_CALLBACKS) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)
        hmmc->RxCpltCallback(hmmc);
#else
        HAL_MMC_RxCpltCallback(hmmc);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f7fc fb27 	bl	80033ae <HAL_MMC_RxCpltCallback>

  else
  {
    /* Nothing to do */
  }
}
 8006d60:	e11e      	b.n	8006fa0 <HAL_MMC_IRQHandler+0x358>
    else if ((context & MMC_CONTEXT_IT) != 0U)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f003 0308 	and.w	r3, r3, #8
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	f000 8119 	beq.w	8006fa0 <HAL_MMC_IRQHandler+0x358>
      if (((context & MMC_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & MMC_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f003 0302 	and.w	r3, r3, #2
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d104      	bne.n	8006d82 <HAL_MMC_IRQHandler+0x13a>
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f003 0320 	and.w	r3, r3, #32
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d011      	beq.n	8006da6 <HAL_MMC_IRQHandler+0x15e>
        errorstate = SDMMC_CmdStopTransfer(hmmc->Instance);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4618      	mov	r0, r3
 8006d88:	f005 fae2 	bl	800c350 <SDMMC_CmdStopTransfer>
 8006d8c:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_MMC_ERROR_NONE)
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d008      	beq.n	8006da6 <HAL_MMC_IRQHandler+0x15e>
          hmmc->ErrorCode |= errorstate;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	431a      	orrs	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_MMC_ErrorCallback(hmmc);
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 f901 	bl	8006fa8 <HAL_MMC_ErrorCallback>
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a57      	ldr	r2, [pc, #348]	@ (8006f08 <HAL_MMC_IRQHandler+0x2c0>)
 8006dac:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->State = HAL_MMC_STATE_READY;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2201      	movs	r2, #1
 8006db2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      if (((context & MMC_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & MMC_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f003 0301 	and.w	r3, r3, #1
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d104      	bne.n	8006dca <HAL_MMC_IRQHandler+0x182>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f003 0302 	and.w	r3, r3, #2
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d003      	beq.n	8006dd2 <HAL_MMC_IRQHandler+0x18a>
        HAL_MMC_RxCpltCallback(hmmc);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f7fc faef 	bl	80033ae <HAL_MMC_RxCpltCallback>
 8006dd0:	e0e6      	b.n	8006fa0 <HAL_MMC_IRQHandler+0x358>
        HAL_MMC_TxCpltCallback(hmmc);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f7fc fae0 	bl	8003398 <HAL_MMC_TxCpltCallback>
}
 8006dd8:	e0e2      	b.n	8006fa0 <HAL_MMC_IRQHandler+0x358>
  else if ((__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & MMC_CONTEXT_IT) != 0U))
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006de0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d008      	beq.n	8006dfa <HAL_MMC_IRQHandler+0x1b2>
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f003 0308 	and.w	r3, r3, #8
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d003      	beq.n	8006dfa <HAL_MMC_IRQHandler+0x1b2>
    MMC_Write_IT(hmmc);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 ff46 	bl	8007c84 <MMC_Write_IT>
 8006df8:	e0d2      	b.n	8006fa0 <HAL_MMC_IRQHandler+0x358>
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL |
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e00:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	f000 809e 	beq.w	8006f46 <HAL_MMC_IRQHandler+0x2fe>
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_IT_DCRCFAIL) != RESET)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e10:	f003 0302 	and.w	r3, r3, #2
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d005      	beq.n	8006e24 <HAL_MMC_IRQHandler+0x1dc>
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e1c:	f043 0202 	orr.w	r2, r3, #2
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_IT_DTIMEOUT) != RESET)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e2a:	f003 0308 	and.w	r3, r3, #8
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d005      	beq.n	8006e3e <HAL_MMC_IRQHandler+0x1f6>
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e36:	f043 0208 	orr.w	r2, r3, #8
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_IT_RXOVERR) != RESET)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e44:	f003 0320 	and.w	r3, r3, #32
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d005      	beq.n	8006e58 <HAL_MMC_IRQHandler+0x210>
      hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e50:	f043 0220 	orr.w	r2, r3, #32
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_IT_TXUNDERR) != RESET)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e5e:	f003 0310 	and.w	r3, r3, #16
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d005      	beq.n	8006e72 <HAL_MMC_IRQHandler+0x22a>
      hmmc->ErrorCode |= HAL_MMC_ERROR_TX_UNDERRUN;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e6a:	f043 0210 	orr.w	r2, r3, #16
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a24      	ldr	r2, [pc, #144]	@ (8006f08 <HAL_MMC_IRQHandler+0x2c0>)
 8006e78:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_MMC_DISABLE_IT(hmmc, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8006e88:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hmmc->Instance);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	68da      	ldr	r2, [r3, #12]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e98:	60da      	str	r2, [r3, #12]
    hmmc->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006ea8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmmc->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68da      	ldr	r2, [r3, #12]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006eb8:	60da      	str	r2, [r3, #12]
    hmmc->ErrorCode |= SDMMC_CmdStopTransfer(hmmc->Instance);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f005 fa46 	bl	800c350 <SDMMC_CmdStopTransfer>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006eca:	431a      	orrs	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	68da      	ldr	r2, [r3, #12]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006ede:	60da      	str	r2, [r3, #12]
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_FLAG_DABORT);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006ee8:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & MMC_CONTEXT_IT) != 0U)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f003 0308 	and.w	r3, r3, #8
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00b      	beq.n	8006f0c <HAL_MMC_IRQHandler+0x2c4>
      hmmc->State = HAL_MMC_STATE_READY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      HAL_MMC_ErrorCallback(hmmc);
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 f853 	bl	8006fa8 <HAL_MMC_ErrorCallback>
}
 8006f02:	e04d      	b.n	8006fa0 <HAL_MMC_IRQHandler+0x358>
 8006f04:	ffff3ec5 	.word	0xffff3ec5
 8006f08:	18000f3a 	.word	0x18000f3a
    else if ((context & MMC_CONTEXT_DMA) != 0U)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d044      	beq.n	8006fa0 <HAL_MMC_IRQHandler+0x358>
      if (hmmc->ErrorCode != HAL_MMC_ERROR_NONE)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d040      	beq.n	8006fa0 <HAL_MMC_IRQHandler+0x358>
        __HAL_MMC_DISABLE_IT(hmmc, SDMMC_IT_IDMABTC);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8006f2c:	63da      	str	r2, [r3, #60]	@ 0x3c
        hmmc->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2200      	movs	r2, #0
 8006f34:	651a      	str	r2, [r3, #80]	@ 0x50
        hmmc->State = HAL_MMC_STATE_READY;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_MMC_ErrorCallback(hmmc);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 f832 	bl	8006fa8 <HAL_MMC_ErrorCallback>
}
 8006f44:	e02c      	b.n	8006fa0 <HAL_MMC_IRQHandler+0x358>
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_IDMABTC) != RESET)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d025      	beq.n	8006fa0 <HAL_MMC_IRQHandler+0x358>
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_IT_IDMABTC);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f5c:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hmmc->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f64:	f003 0304 	and.w	r3, r3, #4
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d10c      	bne.n	8006f86 <HAL_MMC_IRQHandler+0x33e>
      if ((context & MMC_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f003 0320 	and.w	r3, r3, #32
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d003      	beq.n	8006f7e <HAL_MMC_IRQHandler+0x336>
        HAL_MMCEx_Write_DMADoubleBuf1CpltCallback(hmmc);
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 ff8c 	bl	8007e94 <HAL_MMCEx_Write_DMADoubleBuf1CpltCallback>
}
 8006f7c:	e010      	b.n	8006fa0 <HAL_MMC_IRQHandler+0x358>
        HAL_MMCEx_Read_DMADoubleBuf1CpltCallback(hmmc);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 ff74 	bl	8007e6c <HAL_MMCEx_Read_DMADoubleBuf1CpltCallback>
}
 8006f84:	e00c      	b.n	8006fa0 <HAL_MMC_IRQHandler+0x358>
      if ((context & MMC_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f003 0320 	and.w	r3, r3, #32
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d003      	beq.n	8006f98 <HAL_MMC_IRQHandler+0x350>
        HAL_MMCEx_Write_DMADoubleBuf0CpltCallback(hmmc);
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 ff75 	bl	8007e80 <HAL_MMCEx_Write_DMADoubleBuf0CpltCallback>
}
 8006f96:	e003      	b.n	8006fa0 <HAL_MMC_IRQHandler+0x358>
        HAL_MMCEx_Read_DMADoubleBuf0CpltCallback(hmmc);
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 ff5d 	bl	8007e58 <HAL_MMCEx_Read_DMADoubleBuf0CpltCallback>
}
 8006f9e:	e7ff      	b.n	8006fa0 <HAL_MMC_IRQHandler+0x358>
 8006fa0:	bf00      	nop
 8006fa2:	3710      	adds	r7, #16
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <HAL_MMC_ErrorCallback>:
  * @brief MMC error callbacks
  * @param hmmc: Pointer MMC handle
  * @retval None
  */
__weak void HAL_MMC_ErrorCallback(MMC_HandleTypeDef *hmmc)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  UNUSED(hmmc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MMC_ErrorCallback can be implemented in the user file
   */
}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <HAL_MMC_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_MMC_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardCSD(MMC_HandleTypeDef *hmmc, HAL_MMC_CardCSDTypeDef *pCSD)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
  uint32_t block_nbr = 0;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	60fb      	str	r3, [r7, #12]

  pCSD->CSDStruct = (uint8_t)((hmmc->CSD[0] & 0xC0000000U) >> 30U);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fce:	0f9b      	lsrs	r3, r3, #30
 8006fd0:	b2da      	uxtb	r2, r3
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hmmc->CSD[0] & 0x3C000000U) >> 26U);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fda:	0e9b      	lsrs	r3, r3, #26
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	f003 030f 	and.w	r3, r3, #15
 8006fe2:	b2da      	uxtb	r2, r3
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hmmc->CSD[0] & 0x03000000U) >> 24U);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fec:	0e1b      	lsrs	r3, r3, #24
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	f003 0303 	and.w	r3, r3, #3
 8006ff4:	b2da      	uxtb	r2, r3
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hmmc->CSD[0] & 0x00FF0000U) >> 16U);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ffe:	0c1b      	lsrs	r3, r3, #16
 8007000:	b2da      	uxtb	r2, r3
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hmmc->CSD[0] & 0x0000FF00U) >> 8U);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800700a:	0a1b      	lsrs	r3, r3, #8
 800700c:	b2da      	uxtb	r2, r3
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hmmc->CSD[0] & 0x000000FFU);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007016:	b2da      	uxtb	r2, r3
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hmmc->CSD[1] & 0xFFF00000U) >> 20U);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007020:	0d1b      	lsrs	r3, r3, #20
 8007022:	b29a      	uxth	r2, r3
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hmmc->CSD[1] & 0x000F0000U) >> 16U);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800702c:	0c1b      	lsrs	r3, r3, #16
 800702e:	b2db      	uxtb	r3, r3
 8007030:	f003 030f 	and.w	r3, r3, #15
 8007034:	b2da      	uxtb	r2, r3
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hmmc->CSD[1] & 0x00008000U) >> 15U);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800703e:	0bdb      	lsrs	r3, r3, #15
 8007040:	b2db      	uxtb	r3, r3
 8007042:	f003 0301 	and.w	r3, r3, #1
 8007046:	b2da      	uxtb	r2, r3
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00004000U) >> 14U);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007050:	0b9b      	lsrs	r3, r3, #14
 8007052:	b2db      	uxtb	r3, r3
 8007054:	f003 0301 	and.w	r3, r3, #1
 8007058:	b2da      	uxtb	r2, r3
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00002000U) >> 13U);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007062:	0b5b      	lsrs	r3, r3, #13
 8007064:	b2db      	uxtb	r3, r3
 8007066:	f003 0301 	and.w	r3, r3, #1
 800706a:	b2da      	uxtb	r2, r3
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hmmc->CSD[1] & 0x00001000U) >> 12U);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007074:	0b1b      	lsrs	r3, r3, #12
 8007076:	b2db      	uxtb	r3, r3
 8007078:	f003 0301 	and.w	r3, r3, #1
 800707c:	b2da      	uxtb	r2, r3
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	2200      	movs	r2, #0
 8007086:	735a      	strb	r2, [r3, #13]

  if (MMC_ReadExtCSD(hmmc, &block_nbr, 212, 0x0FFFFFFFU) != HAL_OK) /* Field SEC_COUNT [215:212] */
 8007088:	f107 010c 	add.w	r1, r7, #12
 800708c:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
 8007090:	22d4      	movs	r2, #212	@ 0xd4
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 fcbc 	bl	8007a10 <MMC_ReadExtCSD>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d001      	beq.n	80070a2 <HAL_MMC_GetCardCSD+0xe6>
  {
    return HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	e129      	b.n	80072f6 <HAL_MMC_GetCardCSD+0x33a>
  }

  if (hmmc->MmcCard.CardType == MMC_LOW_CAPACITY_CARD)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d163      	bne.n	8007172 <HAL_MMC_GetCardCSD+0x1b6>
  {
    pCSD->DeviceSize = (((hmmc->CSD[1] & 0x000003FFU) << 2U) | ((hmmc->CSD[2] & 0xC0000000U) >> 30U));
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070ae:	009a      	lsls	r2, r3, #2
 80070b0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80070b4:	4013      	ands	r3, r2
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80070ba:	0f92      	lsrs	r2, r2, #30
 80070bc:	431a      	orrs	r2, r3
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x38000000U) >> 27U);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070c6:	0edb      	lsrs	r3, r3, #27
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	f003 0307 	and.w	r3, r3, #7
 80070ce:	b2da      	uxtb	r2, r3
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x07000000U) >> 24U);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070d8:	0e1b      	lsrs	r3, r3, #24
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	f003 0307 	and.w	r3, r3, #7
 80070e0:	b2da      	uxtb	r2, r3
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x00E00000U) >> 21U);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070ea:	0d5b      	lsrs	r3, r3, #21
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	f003 0307 	and.w	r3, r3, #7
 80070f2:	b2da      	uxtb	r2, r3
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x001C0000U) >> 18U);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070fc:	0c9b      	lsrs	r3, r3, #18
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	f003 0307 	and.w	r3, r3, #7
 8007104:	b2da      	uxtb	r2, r3
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hmmc->CSD[2] & 0x00038000U) >> 15U);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800710e:	0bdb      	lsrs	r3, r3, #15
 8007110:	b2db      	uxtb	r3, r3
 8007112:	f003 0307 	and.w	r3, r3, #7
 8007116:	b2da      	uxtb	r2, r3
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	761a      	strb	r2, [r3, #24]

    hmmc->MmcCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	691b      	ldr	r3, [r3, #16]
 8007120:	1c5a      	adds	r2, r3, #1
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	645a      	str	r2, [r3, #68]	@ 0x44
    hmmc->MmcCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	7e1b      	ldrb	r3, [r3, #24]
 800712a:	b2db      	uxtb	r3, r3
 800712c:	f003 0307 	and.w	r3, r3, #7
 8007130:	3302      	adds	r3, #2
 8007132:	2201      	movs	r2, #1
 8007134:	fa02 f303 	lsl.w	r3, r2, r3
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800713c:	fb03 f202 	mul.w	r2, r3, r2
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	645a      	str	r2, [r3, #68]	@ 0x44
    hmmc->MmcCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	7a1b      	ldrb	r3, [r3, #8]
 8007148:	b2db      	uxtb	r3, r3
 800714a:	f003 030f 	and.w	r3, r3, #15
 800714e:	2201      	movs	r2, #1
 8007150:	409a      	lsls	r2, r3
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	649a      	str	r2, [r3, #72]	@ 0x48

    hmmc->MmcCard.LogBlockNbr = (hmmc->MmcCard.BlockNbr) * ((hmmc->MmcCard.BlockSize) / 512U);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800715e:	0a52      	lsrs	r2, r2, #9
 8007160:	fb03 f202 	mul.w	r2, r3, r2
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	64da      	str	r2, [r3, #76]	@ 0x4c
    hmmc->MmcCard.LogBlockSize = 512U;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800716e:	651a      	str	r2, [r3, #80]	@ 0x50
 8007170:	e023      	b.n	80071ba <HAL_MMC_GetCardCSD+0x1fe>
  }
  else if (hmmc->MmcCard.CardType == MMC_HIGH_CAPACITY_CARD)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007176:	2b01      	cmp	r3, #1
 8007178:	d10f      	bne.n	800719a <HAL_MMC_GetCardCSD+0x1de>
  {
    hmmc->MmcCard.BlockNbr = block_nbr;
 800717a:	68fa      	ldr	r2, [r7, #12]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	645a      	str	r2, [r3, #68]	@ 0x44
    hmmc->MmcCard.LogBlockNbr = hmmc->MmcCard.BlockNbr;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	64da      	str	r2, [r3, #76]	@ 0x4c
    hmmc->MmcCard.BlockSize = 512U;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800718e:	649a      	str	r2, [r3, #72]	@ 0x48
    hmmc->MmcCard.LogBlockSize = hmmc->MmcCard.BlockSize;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	651a      	str	r2, [r3, #80]	@ 0x50
 8007198:	e00f      	b.n	80071ba <HAL_MMC_GetCardCSD+0x1fe>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a58      	ldr	r2, [pc, #352]	@ (8007300 <HAL_MMC_GetCardCSD+0x344>)
 80071a0:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071a6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2201      	movs	r2, #1
 80071b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	e09d      	b.n	80072f6 <HAL_MMC_GetCardCSD+0x33a>
  }

  pCSD->EraseGrSize = (uint8_t)((hmmc->CSD[2] & 0x00004000U) >> 14U);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071be:	0b9b      	lsrs	r3, r3, #14
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	f003 0301 	and.w	r3, r3, #1
 80071c6:	b2da      	uxtb	r2, r3
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hmmc->CSD[2] & 0x00003F80U) >> 7U);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071d0:	09db      	lsrs	r3, r3, #7
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071d8:	b2da      	uxtb	r2, r3
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hmmc->CSD[2] & 0x0000007FU);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071e8:	b2da      	uxtb	r2, r3
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hmmc->CSD[3] & 0x80000000U) >> 31U);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071f2:	0fdb      	lsrs	r3, r3, #31
 80071f4:	b2da      	uxtb	r2, r3
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hmmc->CSD[3] & 0x60000000U) >> 29U);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071fe:	0f5b      	lsrs	r3, r3, #29
 8007200:	b2db      	uxtb	r3, r3
 8007202:	f003 0303 	and.w	r3, r3, #3
 8007206:	b2da      	uxtb	r2, r3
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hmmc->CSD[3] & 0x1C000000U) >> 26U);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007210:	0e9b      	lsrs	r3, r3, #26
 8007212:	b2db      	uxtb	r3, r3
 8007214:	f003 0307 	and.w	r3, r3, #7
 8007218:	b2da      	uxtb	r2, r3
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hmmc->CSD[3] & 0x03C00000U) >> 22U);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007222:	0d9b      	lsrs	r3, r3, #22
 8007224:	b2db      	uxtb	r3, r3
 8007226:	f003 030f 	and.w	r3, r3, #15
 800722a:	b2da      	uxtb	r2, r3
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hmmc->CSD[3] & 0x00200000U) >> 21U);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007234:	0d5b      	lsrs	r3, r3, #21
 8007236:	b2db      	uxtb	r3, r3
 8007238:	f003 0301 	and.w	r3, r3, #1
 800723c:	b2da      	uxtb	r2, r3
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	2200      	movs	r2, #0
 8007248:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hmmc->CSD[3] & 0x00010000U) >> 16U);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007250:	0c1b      	lsrs	r3, r3, #16
 8007252:	b2db      	uxtb	r3, r3
 8007254:	f003 0301 	and.w	r3, r3, #1
 8007258:	b2da      	uxtb	r2, r3
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hmmc->CSD[3] & 0x00008000U) >> 15U);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007264:	0bdb      	lsrs	r3, r3, #15
 8007266:	b2db      	uxtb	r3, r3
 8007268:	f003 0301 	and.w	r3, r3, #1
 800726c:	b2da      	uxtb	r2, r3
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hmmc->CSD[3] & 0x00004000U) >> 14U);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007278:	0b9b      	lsrs	r3, r3, #14
 800727a:	b2db      	uxtb	r3, r3
 800727c:	f003 0301 	and.w	r3, r3, #1
 8007280:	b2da      	uxtb	r2, r3
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00002000U) >> 13U);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800728c:	0b5b      	lsrs	r3, r3, #13
 800728e:	b2db      	uxtb	r3, r3
 8007290:	f003 0301 	and.w	r3, r3, #1
 8007294:	b2da      	uxtb	r2, r3
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00001000U) >> 12U);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072a0:	0b1b      	lsrs	r3, r3, #12
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	f003 0301 	and.w	r3, r3, #1
 80072a8:	b2da      	uxtb	r2, r3
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hmmc->CSD[3] & 0x00000C00U) >> 10U);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072b4:	0a9b      	lsrs	r3, r3, #10
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	f003 0303 	and.w	r3, r3, #3
 80072bc:	b2da      	uxtb	r2, r3
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hmmc->CSD[3] & 0x00000300U) >> 8U);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072c8:	0a1b      	lsrs	r3, r3, #8
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	f003 0303 	and.w	r3, r3, #3
 80072d0:	b2da      	uxtb	r2, r3
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hmmc->CSD[3] & 0x000000FEU) >> 1U);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072dc:	085b      	lsrs	r3, r3, #1
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072e4:	b2da      	uxtb	r2, r3
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3710      	adds	r7, #16
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop
 8007300:	1fe00fff 	.word	0x1fe00fff

08007304 <HAL_MMC_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_MMC_CardInfoTypeDef structure that
  *         will contain the MMC card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardInfo(MMC_HandleTypeDef *hmmc, HAL_MMC_CardInfoTypeDef *pCardInfo)
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hmmc->MmcCard.CardType);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	601a      	str	r2, [r3, #0]
  pCardInfo->Class        = (uint32_t)(hmmc->MmcCard.Class);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	605a      	str	r2, [r3, #4]
  pCardInfo->RelCardAdd   = (uint32_t)(hmmc->MmcCard.RelCardAdd);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	609a      	str	r2, [r3, #8]
  pCardInfo->BlockNbr     = (uint32_t)(hmmc->MmcCard.BlockNbr);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockSize    = (uint32_t)(hmmc->MmcCard.BlockSize);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	611a      	str	r2, [r3, #16]
  pCardInfo->LogBlockNbr  = (uint32_t)(hmmc->MmcCard.LogBlockNbr);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockSize = (uint32_t)(hmmc->MmcCard.LogBlockSize);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	619a      	str	r2, [r3, #24]

  return HAL_OK;
 8007346:	2300      	movs	r3, #0
}
 8007348:	4618      	mov	r0, r3
 800734a:	370c      	adds	r7, #12
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <HAL_MMC_GetCardExtCSD>:
  *         Extended CSD register parameters
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pExtCSD, uint32_t Timeout)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b08e      	sub	sp, #56	@ 0x38
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	607a      	str	r2, [r7, #4]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007360:	f7fe fd32 	bl	8005dc8 <HAL_GetTick>
 8007364:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t count;
  uint32_t *tmp_buf;

  if (NULL == pExtCSD)
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d107      	bne.n	800737c <HAL_MMC_GetCardExtCSD+0x28>
  {
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007370:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	e0de      	b.n	800753a <HAL_MMC_GetCardExtCSD+0x1e6>
  }

  if (hmmc->State == HAL_MMC_STATE_READY)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007382:	b2db      	uxtb	r3, r3
 8007384:	2b01      	cmp	r3, #1
 8007386:	f040 80d7 	bne.w	8007538 <HAL_MMC_GetCardExtCSD+0x1e4>
  {
    hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2200      	movs	r2, #0
 800738e:	635a      	str	r2, [r3, #52]	@ 0x34

    hmmc->State = HAL_MMC_STATE_BUSY;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2203      	movs	r2, #3
 8007394:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hmmc->Instance->DCTRL = 0;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2200      	movs	r2, #0
 800739e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Initiaize the destination pointer */
    tmp_buf = pExtCSD;
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Configure the MMC DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80073a4:	f04f 33ff 	mov.w	r3, #4294967295
 80073a8:	613b      	str	r3, [r7, #16]
    config.DataLength    = 512U;
 80073aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80073ae:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80073b0:	2390      	movs	r3, #144	@ 0x90
 80073b2:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80073b4:	2302      	movs	r3, #2
 80073b6:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80073b8:	2300      	movs	r3, #0
 80073ba:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80073bc:	2300      	movs	r3, #0
 80073be:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hmmc->Instance, &config);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f107 0210 	add.w	r2, r7, #16
 80073c8:	4611      	mov	r1, r2
 80073ca:	4618      	mov	r0, r3
 80073cc:	f004 fee4 	bl	800c198 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hmmc->Instance);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68da      	ldr	r2, [r3, #12]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80073de:	60da      	str	r2, [r3, #12]

    /* Send ExtCSD Read command to Card */
    errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2100      	movs	r1, #0
 80073e6:	4618      	mov	r0, r3
 80073e8:	f005 f8f9 	bl	800c5de <SDMMC_CmdSendEXTCSD>
 80073ec:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (errorstate != HAL_MMC_ERROR_NONE)
 80073ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d045      	beq.n	8007480 <HAL_MMC_GetCardExtCSD+0x12c>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a52      	ldr	r2, [pc, #328]	@ (8007544 <HAL_MMC_GetCardExtCSD+0x1f0>)
 80073fa:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= errorstate;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007402:	431a      	orrs	r2, r3
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	e092      	b.n	800753a <HAL_MMC_GetCardExtCSD+0x1e6>

    /* Poll on SDMMC flags */
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
                               SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
    {
      if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800741a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800741e:	2b00      	cmp	r3, #0
 8007420:	d013      	beq.n	800744a <HAL_MMC_GetCardExtCSD+0xf6>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8007422:	2300      	movs	r3, #0
 8007424:	637b      	str	r3, [r7, #52]	@ 0x34
 8007426:	e00d      	b.n	8007444 <HAL_MMC_GetCardExtCSD+0xf0>
        {
          *tmp_buf = SDMMC_ReadFIFO(hmmc->Instance);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4618      	mov	r0, r3
 800742e:	f004 fe2b 	bl	800c088 <SDMMC_ReadFIFO>
 8007432:	4602      	mov	r2, r0
 8007434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007436:	601a      	str	r2, [r3, #0]
          tmp_buf++;
 8007438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800743a:	3304      	adds	r3, #4
 800743c:	633b      	str	r3, [r7, #48]	@ 0x30
        for (count = 0U; count < 8U; count++)
 800743e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007440:	3301      	adds	r3, #1
 8007442:	637b      	str	r3, [r7, #52]	@ 0x34
 8007444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007446:	2b07      	cmp	r3, #7
 8007448:	d9ee      	bls.n	8007428 <HAL_MMC_GetCardExtCSD+0xd4>
        }
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800744a:	f7fe fcbd 	bl	8005dc8 <HAL_GetTick>
 800744e:	4602      	mov	r2, r0
 8007450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007452:	1ad3      	subs	r3, r2, r3
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	429a      	cmp	r2, r3
 8007458:	d902      	bls.n	8007460 <HAL_MMC_GetCardExtCSD+0x10c>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d10f      	bne.n	8007480 <HAL_MMC_GetCardExtCSD+0x12c>
      {
        /* Clear all the static flags */
        __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a37      	ldr	r2, [pc, #220]	@ (8007544 <HAL_MMC_GetCardExtCSD+0x1f0>)
 8007466:	639a      	str	r2, [r3, #56]	@ 0x38
        hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800746c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	635a      	str	r2, [r3, #52]	@ 0x34
        hmmc->State = HAL_MMC_STATE_READY;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800747c:	2303      	movs	r3, #3
 800747e:	e05c      	b.n	800753a <HAL_MMC_GetCardExtCSD+0x1e6>
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007486:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800748a:	2b00      	cmp	r3, #0
 800748c:	d0c2      	beq.n	8007414 <HAL_MMC_GetCardExtCSD+0xc0>
      }
    }

    __SDMMC_CMDTRANS_DISABLE(hmmc->Instance);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	68da      	ldr	r2, [r3, #12]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800749c:	60da      	str	r2, [r3, #12]

    /* Get error state */
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074a4:	f003 0308 	and.w	r3, r3, #8
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00f      	beq.n	80074cc <HAL_MMC_GetCardExtCSD+0x178>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a24      	ldr	r2, [pc, #144]	@ (8007544 <HAL_MMC_GetCardExtCSD+0x1f0>)
 80074b2:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074b8:	f043 0208 	orr.w	r2, r3, #8
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	e036      	b.n	800753a <HAL_MMC_GetCardExtCSD+0x1e6>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074d2:	f003 0302 	and.w	r3, r3, #2
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d00f      	beq.n	80074fa <HAL_MMC_GetCardExtCSD+0x1a6>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a19      	ldr	r2, [pc, #100]	@ (8007544 <HAL_MMC_GetCardExtCSD+0x1f0>)
 80074e0:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074e6:	f043 0202 	orr.w	r2, r3, #2
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2201      	movs	r2, #1
 80074f2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e01f      	b.n	800753a <HAL_MMC_GetCardExtCSD+0x1e6>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007500:	f003 0320 	and.w	r3, r3, #32
 8007504:	2b00      	cmp	r3, #0
 8007506:	d00f      	beq.n	8007528 <HAL_MMC_GetCardExtCSD+0x1d4>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a0d      	ldr	r2, [pc, #52]	@ (8007544 <HAL_MMC_GetCardExtCSD+0x1f0>)
 800750e:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007514:	f043 0220 	orr.w	r2, r3, #32
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2201      	movs	r2, #1
 8007520:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	e008      	b.n	800753a <HAL_MMC_GetCardExtCSD+0x1e6>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a06      	ldr	r2, [pc, #24]	@ (8007548 <HAL_MMC_GetCardExtCSD+0x1f4>)
 800752e:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2201      	movs	r2, #1
 8007534:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  }

  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3738      	adds	r7, #56	@ 0x38
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	1fe00fff 	.word	0x1fe00fff
 8007548:	18000f3a 	.word	0x18000f3a

0800754c <HAL_MMC_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_ConfigWideBusOperation(MMC_HandleTypeDef *hmmc, uint32_t WideMode)
{
 800754c:	b5b0      	push	{r4, r5, r7, lr}
 800754e:	b08c      	sub	sp, #48	@ 0x30
 8007550:	af02      	add	r7, sp, #8
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  uint32_t count;
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t response = 0U;
 8007556:	2300      	movs	r3, #0
 8007558:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hmmc->State = HAL_MMC_STATE_BUSY;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2203      	movs	r2, #3
 800755e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Check and update the power class if needed */
  if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_BUSSPEED) != 0U)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800756c:	2b00      	cmp	r3, #0
 800756e:	d014      	beq.n	800759a <HAL_MMC_ConfigWideBusOperation+0x4e>
  {
    if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_DDR) != 0U)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800757a:	2b00      	cmp	r3, #0
 800757c:	d006      	beq.n	800758c <HAL_MMC_ConfigWideBusOperation+0x40>
    {
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DDR);
 800757e:	2204      	movs	r2, #4
 8007580:	6839      	ldr	r1, [r7, #0]
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 fbc8 	bl	8007d18 <MMC_PwrClassUpdate>
 8007588:	6238      	str	r0, [r7, #32]
 800758a:	e00c      	b.n	80075a6 <HAL_MMC_ConfigWideBusOperation+0x5a>
    }
    else
    {
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_HIGH);
 800758c:	2202      	movs	r2, #2
 800758e:	6839      	ldr	r1, [r7, #0]
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 fbc1 	bl	8007d18 <MMC_PwrClassUpdate>
 8007596:	6238      	str	r0, [r7, #32]
 8007598:	e005      	b.n	80075a6 <HAL_MMC_ConfigWideBusOperation+0x5a>
    }
  }
  else
  {
    errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DEFAULT);
 800759a:	2201      	movs	r2, #1
 800759c:	6839      	ldr	r1, [r7, #0]
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 fbba 	bl	8007d18 <MMC_PwrClassUpdate>
 80075a4:	6238      	str	r0, [r7, #32]
  }

  if (errorstate == HAL_MMC_ERROR_NONE)
 80075a6:	6a3b      	ldr	r3, [r7, #32]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d17b      	bne.n	80076a4 <HAL_MMC_ConfigWideBusOperation+0x158>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075b2:	d107      	bne.n	80075c4 <HAL_MMC_ConfigWideBusOperation+0x78>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70200U);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4946      	ldr	r1, [pc, #280]	@ (80076d4 <HAL_MMC_ConfigWideBusOperation+0x188>)
 80075ba:	4618      	mov	r0, r3
 80075bc:	f004 ffec 	bl	800c598 <SDMMC_CmdSwitch>
 80075c0:	6238      	str	r0, [r7, #32]
 80075c2:	e019      	b.n	80075f8 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80075ca:	d107      	bne.n	80075dc <HAL_MMC_ConfigWideBusOperation+0x90>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70100U);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4941      	ldr	r1, [pc, #260]	@ (80076d8 <HAL_MMC_ConfigWideBusOperation+0x18c>)
 80075d2:	4618      	mov	r0, r3
 80075d4:	f004 ffe0 	bl	800c598 <SDMMC_CmdSwitch>
 80075d8:	6238      	str	r0, [r7, #32]
 80075da:	e00d      	b.n	80075f8 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d107      	bne.n	80075f2 <HAL_MMC_ConfigWideBusOperation+0xa6>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70000U);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	493d      	ldr	r1, [pc, #244]	@ (80076dc <HAL_MMC_ConfigWideBusOperation+0x190>)
 80075e8:	4618      	mov	r0, r3
 80075ea:	f004 ffd5 	bl	800c598 <SDMMC_CmdSwitch>
 80075ee:	6238      	str	r0, [r7, #32]
 80075f0:	e002      	b.n	80075f8 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else
    {
      /* WideMode is not a valid argument*/
      errorstate = HAL_MMC_ERROR_PARAM;
 80075f2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80075f6:	623b      	str	r3, [r7, #32]
    }

    /* Check for switch error and violation of the trial number of sending CMD 13 */
    if (errorstate == HAL_MMC_ERROR_NONE)
 80075f8:	6a3b      	ldr	r3, [r7, #32]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d152      	bne.n	80076a4 <HAL_MMC_ConfigWideBusOperation+0x158>
    {
      /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
      count = SDMMC_MAX_TRIAL;
 80075fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007602:	627b      	str	r3, [r7, #36]	@ 0x24
      do
      {
        errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800760c:	041b      	lsls	r3, r3, #16
 800760e:	4619      	mov	r1, r3
 8007610:	4610      	mov	r0, r2
 8007612:	f004 ff7e 	bl	800c512 <SDMMC_CmdSendStatus>
 8007616:	6238      	str	r0, [r7, #32]
        if (errorstate != HAL_MMC_ERROR_NONE)
 8007618:	6a3b      	ldr	r3, [r7, #32]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d112      	bne.n	8007644 <HAL_MMC_ConfigWideBusOperation+0xf8>
        {
          break;
        }

        /* Get command response */
        response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2100      	movs	r1, #0
 8007624:	4618      	mov	r0, r3
 8007626:	f004 fda4 	bl	800c172 <SDMMC_GetResponse>
 800762a:	61f8      	str	r0, [r7, #28]
        count--;
 800762c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800762e:	3b01      	subs	r3, #1
 8007630:	627b      	str	r3, [r7, #36]	@ 0x24
      } while (((response & 0x100U) == 0U) && (count != 0U));
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007638:	2b00      	cmp	r3, #0
 800763a:	d104      	bne.n	8007646 <HAL_MMC_ConfigWideBusOperation+0xfa>
 800763c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800763e:	2b00      	cmp	r3, #0
 8007640:	d1e0      	bne.n	8007604 <HAL_MMC_ConfigWideBusOperation+0xb8>
 8007642:	e000      	b.n	8007646 <HAL_MMC_ConfigWideBusOperation+0xfa>
          break;
 8007644:	bf00      	nop

      /* Check the status after the switch command execution */
      if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 8007646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007648:	2b00      	cmp	r3, #0
 800764a:	d025      	beq.n	8007698 <HAL_MMC_ConfigWideBusOperation+0x14c>
 800764c:	6a3b      	ldr	r3, [r7, #32]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d122      	bne.n	8007698 <HAL_MMC_ConfigWideBusOperation+0x14c>
      {
        /* Check the bit SWITCH_ERROR of the device status */
        if ((response & 0x80U) != 0U)
 8007652:	69fb      	ldr	r3, [r7, #28]
 8007654:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007658:	2b00      	cmp	r3, #0
 800765a:	d003      	beq.n	8007664 <HAL_MMC_ConfigWideBusOperation+0x118>
        {
          errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800765c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007660:	623b      	str	r3, [r7, #32]
        if ((response & 0x80U) != 0U)
 8007662:	e01f      	b.n	80076a4 <HAL_MMC_ConfigWideBusOperation+0x158>
        }
        else
        {
          /* Configure the SDMMC peripheral */
          Init = hmmc->Init;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f107 0408 	add.w	r4, r7, #8
 800766a:	1d1d      	adds	r5, r3, #4
 800766c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800766e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007670:	682b      	ldr	r3, [r5, #0]
 8007672:	6023      	str	r3, [r4, #0]
          Init.BusWide = WideMode;
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	613b      	str	r3, [r7, #16]
          (void)SDMMC_Init(hmmc->Instance, Init);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681c      	ldr	r4, [r3, #0]
 800767c:	466a      	mov	r2, sp
 800767e:	f107 0314 	add.w	r3, r7, #20
 8007682:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007686:	e882 0003 	stmia.w	r2, {r0, r1}
 800768a:	f107 0308 	add.w	r3, r7, #8
 800768e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007690:	4620      	mov	r0, r4
 8007692:	f004 fccf 	bl	800c034 <SDMMC_Init>
        if ((response & 0x80U) != 0U)
 8007696:	e005      	b.n	80076a4 <HAL_MMC_ConfigWideBusOperation+0x158>
        }
      }
      else if (count == 0U)
 8007698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800769a:	2b00      	cmp	r3, #0
 800769c:	d102      	bne.n	80076a4 <HAL_MMC_ConfigWideBusOperation+0x158>
      {
        errorstate = SDMMC_ERROR_TIMEOUT;
 800769e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80076a2:	623b      	str	r3, [r7, #32]
      }
    }
  }

  /* Change State */
  hmmc->State = HAL_MMC_STATE_READY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (errorstate != HAL_MMC_ERROR_NONE)
 80076ac:	6a3b      	ldr	r3, [r7, #32]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00b      	beq.n	80076ca <HAL_MMC_ConfigWideBusOperation+0x17e>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a0a      	ldr	r2, [pc, #40]	@ (80076e0 <HAL_MMC_ConfigWideBusOperation+0x194>)
 80076b8:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076be:	6a3b      	ldr	r3, [r7, #32]
 80076c0:	431a      	orrs	r2, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e000      	b.n	80076cc <HAL_MMC_ConfigWideBusOperation+0x180>
  }

  return HAL_OK;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3728      	adds	r7, #40	@ 0x28
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bdb0      	pop	{r4, r5, r7, pc}
 80076d4:	03b70200 	.word	0x03b70200
 80076d8:	03b70100 	.word	0x03b70100
 80076dc:	03b70000 	.word	0x03b70000
 80076e0:	1fe00fff 	.word	0x1fe00fff

080076e4 <HAL_MMC_GetCardState>:
  * @brief  Gets the current mmc card data state.
  * @param  hmmc: pointer to MMC handle
  * @retval Card state
  */
HAL_MMC_CardStateTypeDef HAL_MMC_GetCardState(MMC_HandleTypeDef *hmmc)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b086      	sub	sp, #24
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0U;
 80076ec:	2300      	movs	r3, #0
 80076ee:	60fb      	str	r3, [r7, #12]

  errorstate = MMC_SendStatus(hmmc, &resp1);
 80076f0:	f107 030c 	add.w	r3, r7, #12
 80076f4:	4619      	mov	r1, r3
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 f962 	bl	80079c0 <MMC_SendStatus>
 80076fc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_MMC_ERROR_NONE)
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d005      	beq.n	8007710 <HAL_MMC_GetCardState+0x2c>
  {
    hmmc->ErrorCode |= errorstate;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	431a      	orrs	r2, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	0a5b      	lsrs	r3, r3, #9
 8007714:	f003 030f 	and.w	r3, r3, #15
 8007718:	613b      	str	r3, [r7, #16]

  return (HAL_MMC_CardStateTypeDef)cardstate;
 800771a:	693b      	ldr	r3, [r7, #16]
}
 800771c:	4618      	mov	r0, r3
 800771e:	3718      	adds	r7, #24
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <MMC_InitCard>:
  * @brief  Initializes the mmc card.
  * @param  hmmc: Pointer to MMC handle
  * @retval MMC Card error state
  */
static uint32_t MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 8007724:	b5b0      	push	{r4, r5, r7, lr}
 8007726:	b096      	sub	sp, #88	@ 0x58
 8007728:	af02      	add	r7, sp, #8
 800772a:	6078      	str	r0, [r7, #4]
  HAL_MMC_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t mmc_rca = 2U;
 800772c:	2302      	movs	r3, #2
 800772e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  MMC_InitTypeDef Init;

  /* Check the power State */
  if (SDMMC_GetPowerState(hmmc->Instance) == 0U)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4618      	mov	r0, r3
 8007738:	f004 fcd5 	bl	800c0e6 <SDMMC_GetPowerState>
 800773c:	4603      	mov	r3, r0
 800773e:	2b00      	cmp	r3, #0
 8007740:	d102      	bne.n	8007748 <MMC_InitCard+0x24>
  {
    /* Power off */
    return HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 8007742:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8007746:	e0e6      	b.n	8007916 <MMC_InitCard+0x1f2>
  }

  /* Send CMD2 ALL_SEND_CID */
  errorstate = SDMMC_CmdSendCID(hmmc->Instance);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4618      	mov	r0, r3
 800774e:	f004 fe7c 	bl	800c44a <SDMMC_CmdSendCID>
 8007752:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8007754:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007756:	2b00      	cmp	r3, #0
 8007758:	d001      	beq.n	800775e <MMC_InitCard+0x3a>
  {
    return errorstate;
 800775a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800775c:	e0db      	b.n	8007916 <MMC_InitCard+0x1f2>
  }
  else
  {
    /* Get Card identification number data */
    hmmc->CID[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	2100      	movs	r1, #0
 8007764:	4618      	mov	r0, r3
 8007766:	f004 fd04 	bl	800c172 <SDMMC_GetResponse>
 800776a:	4602      	mov	r2, r0
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	665a      	str	r2, [r3, #100]	@ 0x64
    hmmc->CID[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2104      	movs	r1, #4
 8007776:	4618      	mov	r0, r3
 8007778:	f004 fcfb 	bl	800c172 <SDMMC_GetResponse>
 800777c:	4602      	mov	r2, r0
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	669a      	str	r2, [r3, #104]	@ 0x68
    hmmc->CID[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	2108      	movs	r1, #8
 8007788:	4618      	mov	r0, r3
 800778a:	f004 fcf2 	bl	800c172 <SDMMC_GetResponse>
 800778e:	4602      	mov	r2, r0
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	66da      	str	r2, [r3, #108]	@ 0x6c
    hmmc->CID[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	210c      	movs	r1, #12
 800779a:	4618      	mov	r0, r3
 800779c:	f004 fce9 	bl	800c172 <SDMMC_GetResponse>
 80077a0:	4602      	mov	r2, r0
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	671a      	str	r2, [r3, #112]	@ 0x70
  }

  /* Send CMD3 SET_REL_ADDR with RCA = 2 (should be greater than 1) */
  /* MMC Card publishes its RCA. */
  errorstate = SDMMC_CmdSetRelAddMmc(hmmc->Instance, mmc_rca);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80077ae:	4611      	mov	r1, r2
 80077b0:	4618      	mov	r0, r3
 80077b2:	f004 fe89 	bl	800c4c8 <SDMMC_CmdSetRelAddMmc>
 80077b6:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 80077b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d001      	beq.n	80077c2 <MMC_InitCard+0x9e>
  {
    return errorstate;
 80077be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077c0:	e0a9      	b.n	8007916 <MMC_InitCard+0x1f2>
  }

  /* Get the MMC card RCA */
  hmmc->MmcCard.RelCardAdd = mmc_rca;
 80077c2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Send CMD9 SEND_CSD with argument as card's RCA */
  errorstate = SDMMC_CmdSendCSD(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077d2:	041b      	lsls	r3, r3, #16
 80077d4:	4619      	mov	r1, r3
 80077d6:	4610      	mov	r0, r2
 80077d8:	f004 fe56 	bl	800c488 <SDMMC_CmdSendCSD>
 80077dc:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 80077de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d001      	beq.n	80077e8 <MMC_InitCard+0xc4>
  {
    return errorstate;
 80077e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077e6:	e096      	b.n	8007916 <MMC_InitCard+0x1f2>
  }
  else
  {
    /* Get Card Specific Data */
    hmmc->CSD[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2100      	movs	r1, #0
 80077ee:	4618      	mov	r0, r3
 80077f0:	f004 fcbf 	bl	800c172 <SDMMC_GetResponse>
 80077f4:	4602      	mov	r2, r0
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	655a      	str	r2, [r3, #84]	@ 0x54
    hmmc->CSD[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	2104      	movs	r1, #4
 8007800:	4618      	mov	r0, r3
 8007802:	f004 fcb6 	bl	800c172 <SDMMC_GetResponse>
 8007806:	4602      	mov	r2, r0
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	659a      	str	r2, [r3, #88]	@ 0x58
    hmmc->CSD[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2108      	movs	r1, #8
 8007812:	4618      	mov	r0, r3
 8007814:	f004 fcad 	bl	800c172 <SDMMC_GetResponse>
 8007818:	4602      	mov	r2, r0
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hmmc->CSD[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	210c      	movs	r1, #12
 8007824:	4618      	mov	r0, r3
 8007826:	f004 fca4 	bl	800c172 <SDMMC_GetResponse>
 800782a:	4602      	mov	r2, r0
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get the Card Class */
  hmmc->MmcCard.Class = (SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2) >> 20U);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2104      	movs	r1, #4
 8007836:	4618      	mov	r0, r3
 8007838:	f004 fc9b 	bl	800c172 <SDMMC_GetResponse>
 800783c:	4603      	mov	r3, r0
 800783e:	0d1a      	lsrs	r2, r3, #20
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800784c:	041b      	lsls	r3, r3, #16
 800784e:	4619      	mov	r1, r3
 8007850:	4610      	mov	r0, r2
 8007852:	f004 fdb9 	bl	800c3c8 <SDMMC_CmdSelDesel>
 8007856:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8007858:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800785a:	2b00      	cmp	r3, #0
 800785c:	d001      	beq.n	8007862 <MMC_InitCard+0x13e>
  {
    return errorstate;
 800785e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007860:	e059      	b.n	8007916 <MMC_InitCard+0x1f2>
  }

  /* Get CSD parameters */
  if (HAL_MMC_GetCardCSD(hmmc, &CSD) != HAL_OK)
 8007862:	f107 031c 	add.w	r3, r7, #28
 8007866:	4619      	mov	r1, r3
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f7ff fba7 	bl	8006fbc <HAL_MMC_GetCardCSD>
 800786e:	4603      	mov	r3, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d002      	beq.n	800787a <MMC_InitCard+0x156>
  {
    return hmmc->ErrorCode;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007878:	e04d      	b.n	8007916 <MMC_InitCard+0x1f2>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007882:	041b      	lsls	r3, r3, #16
 8007884:	4619      	mov	r1, r3
 8007886:	4610      	mov	r0, r2
 8007888:	f004 fe43 	bl	800c512 <SDMMC_CmdSendStatus>
 800788c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 800788e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007890:	2b00      	cmp	r3, #0
 8007892:	d005      	beq.n	80078a0 <MMC_InitCard+0x17c>
  {
    hmmc->ErrorCode |= errorstate;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007898:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800789a:	431a      	orrs	r2, r3
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	635a      	str	r2, [r3, #52]	@ 0x34
  }


  /* Get Extended CSD parameters */
  if (HAL_MMC_GetCardExtCSD(hmmc, hmmc->Ext_CSD, SDMMC_DATATIMEOUT) != HAL_OK)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	3374      	adds	r3, #116	@ 0x74
 80078a4:	f04f 32ff 	mov.w	r2, #4294967295
 80078a8:	4619      	mov	r1, r3
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f7ff fd52 	bl	8007354 <HAL_MMC_GetCardExtCSD>
 80078b0:	4603      	mov	r3, r0
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d002      	beq.n	80078bc <MMC_InitCard+0x198>
  {
    return hmmc->ErrorCode;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078ba:	e02c      	b.n	8007916 <MMC_InitCard+0x1f2>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078c4:	041b      	lsls	r3, r3, #16
 80078c6:	4619      	mov	r1, r3
 80078c8:	4610      	mov	r0, r2
 80078ca:	f004 fe22 	bl	800c512 <SDMMC_CmdSendStatus>
 80078ce:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 80078d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d005      	beq.n	80078e2 <MMC_InitCard+0x1be>
  {
    hmmc->ErrorCode |= errorstate;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80078da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078dc:	431a      	orrs	r2, r3
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Configure the SDMMC peripheral */
  Init = hmmc->Init;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f107 0408 	add.w	r4, r7, #8
 80078e8:	1d1d      	adds	r5, r3, #4
 80078ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80078ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80078ee:	682b      	ldr	r3, [r5, #0]
 80078f0:	6023      	str	r3, [r4, #0]
  Init.BusWide = SDMMC_BUS_WIDE_1B;
 80078f2:	2300      	movs	r3, #0
 80078f4:	613b      	str	r3, [r7, #16]
  (void)SDMMC_Init(hmmc->Instance, Init);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681c      	ldr	r4, [r3, #0]
 80078fa:	466a      	mov	r2, sp
 80078fc:	f107 0314 	add.w	r3, r7, #20
 8007900:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007904:	e882 0003 	stmia.w	r2, {r0, r1}
 8007908:	f107 0308 	add.w	r3, r7, #8
 800790c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800790e:	4620      	mov	r0, r4
 8007910:	f004 fb90 	bl	800c034 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_MMC_ERROR_NONE;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3750      	adds	r7, #80	@ 0x50
 800791a:	46bd      	mov	sp, r7
 800791c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007920 <MMC_PowerON>:
  *         in the MMC handle.
  * @param  hmmc: Pointer to MMC handle
  * @retval error state
  */
static uint32_t MMC_PowerON(MMC_HandleTypeDef *hmmc)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b086      	sub	sp, #24
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007928:	2300      	movs	r3, #0
 800792a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800792c:	2300      	movs	r3, #0
 800792e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8007930:	2300      	movs	r3, #0
 8007932:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hmmc->Instance);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4618      	mov	r0, r3
 800793a:	f004 fd68 	bl	800c40e <SDMMC_CmdGoIdleState>
 800793e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d027      	beq.n	8007996 <MMC_PowerON+0x76>
  {
    return errorstate;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	e034      	b.n	80079b4 <MMC_PowerON+0x94>
  }

  while (validvoltage == 0U)
  {
    if (count++ == SDMMC_MAX_VOLT_TRIAL)
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	1c5a      	adds	r2, r3, #1
 800794e:	60ba      	str	r2, [r7, #8]
 8007950:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007954:	4293      	cmp	r3, r2
 8007956:	d102      	bne.n	800795e <MMC_PowerON+0x3e>
    {
      return HAL_MMC_ERROR_INVALID_VOLTRANGE;
 8007958:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800795c:	e02a      	b.n	80079b4 <MMC_PowerON+0x94>
    }

    /* SEND CMD1 APP_CMD with voltage range as argument */
    errorstate = SDMMC_CmdOpCondition(hmmc->Instance, MMC_VOLTAGE_RANGE);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4916      	ldr	r1, [pc, #88]	@ (80079bc <MMC_PowerON+0x9c>)
 8007964:	4618      	mov	r0, r3
 8007966:	f004 fdf7 	bl	800c558 <SDMMC_CmdOpCondition>
 800796a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_MMC_ERROR_NONE)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d002      	beq.n	8007978 <MMC_PowerON+0x58>
    {
      return HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 8007972:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007976:	e01d      	b.n	80079b4 <MMC_PowerON+0x94>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2100      	movs	r1, #0
 800797e:	4618      	mov	r0, r3
 8007980:	f004 fbf7 	bl	800c172 <SDMMC_GetResponse>
 8007984:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	0fdb      	lsrs	r3, r3, #31
 800798a:	2b01      	cmp	r3, #1
 800798c:	d101      	bne.n	8007992 <MMC_PowerON+0x72>
 800798e:	2301      	movs	r3, #1
 8007990:	e000      	b.n	8007994 <MMC_PowerON+0x74>
 8007992:	2300      	movs	r3, #0
 8007994:	613b      	str	r3, [r7, #16]
  while (validvoltage == 0U)
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d0d6      	beq.n	800794a <MMC_PowerON+0x2a>
  }

  /* When power routine is finished and command returns valid voltage */
  if (((response & (0xFF000000U)) >> 24) == 0xC0U)
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	0e1b      	lsrs	r3, r3, #24
 80079a0:	2bc0      	cmp	r3, #192	@ 0xc0
 80079a2:	d103      	bne.n	80079ac <MMC_PowerON+0x8c>
  {
    hmmc->MmcCard.CardType = MMC_HIGH_CAPACITY_CARD;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	639a      	str	r2, [r3, #56]	@ 0x38
 80079aa:	e002      	b.n	80079b2 <MMC_PowerON+0x92>
  }
  else
  {
    hmmc->MmcCard.CardType = MMC_LOW_CAPACITY_CARD;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return HAL_MMC_ERROR_NONE;
 80079b2:	2300      	movs	r3, #0
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3718      	adds	r7, #24
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	c0ff8000 	.word	0xc0ff8000

080079c0 <MMC_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the MMC card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t MMC_SendStatus(MMC_HandleTypeDef *hmmc, uint32_t *pCardStatus)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d102      	bne.n	80079d6 <MMC_SendStatus+0x16>
  {
    return HAL_MMC_ERROR_PARAM;
 80079d0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80079d4:	e018      	b.n	8007a08 <MMC_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079de:	041b      	lsls	r3, r3, #16
 80079e0:	4619      	mov	r1, r3
 80079e2:	4610      	mov	r0, r2
 80079e4:	f004 fd95 	bl	800c512 <SDMMC_CmdSendStatus>
 80079e8:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_MMC_ERROR_NONE)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d001      	beq.n	80079f4 <MMC_SendStatus+0x34>
  {
    return errorstate;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	e009      	b.n	8007a08 <MMC_SendStatus+0x48>
  }

  /* Get MMC card status */
  *pCardStatus = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2100      	movs	r1, #0
 80079fa:	4618      	mov	r0, r3
 80079fc:	f004 fbb9 	bl	800c172 <SDMMC_GetResponse>
 8007a00:	4602      	mov	r2, r0
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	601a      	str	r2, [r3, #0]

  return HAL_MMC_ERROR_NONE;
 8007a06:	2300      	movs	r3, #0
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3710      	adds	r7, #16
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <MMC_ReadExtCSD>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef MMC_ReadExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pFieldData,
                                        uint16_t FieldIndex, uint32_t Timeout)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b090      	sub	sp, #64	@ 0x40
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	603b      	str	r3, [r7, #0]
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	80fb      	strh	r3, [r7, #6]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007a20:	f7fe f9d2 	bl	8005dc8 <HAL_GetTick>
 8007a24:	6378      	str	r0, [r7, #52]	@ 0x34
  uint32_t count;
  uint32_t i = 0;
 8007a26:	2300      	movs	r3, #0
 8007a28:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t tmp_data;

  hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize data control register */
  hmmc->Instance->DCTRL = 0;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2200      	movs	r2, #0
 8007a36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Configure the MMC DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007a38:	f04f 33ff 	mov.w	r3, #4294967295
 8007a3c:	617b      	str	r3, [r7, #20]
  config.DataLength    = 512U;
 8007a3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007a42:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007a44:	2390      	movs	r3, #144	@ 0x90
 8007a46:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007a48:	2302      	movs	r3, #2
 8007a4a:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	627b      	str	r3, [r7, #36]	@ 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007a50:	2301      	movs	r3, #1
 8007a52:	62bb      	str	r3, [r7, #40]	@ 0x28
  (void)SDMMC_ConfigData(hmmc->Instance, &config);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f107 0214 	add.w	r2, r7, #20
 8007a5c:	4611      	mov	r1, r2
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f004 fb9a 	bl	800c198 <SDMMC_ConfigData>

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	2100      	movs	r1, #0
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f004 fdb7 	bl	800c5de <SDMMC_CmdSendEXTCSD>
 8007a70:	6338      	str	r0, [r7, #48]	@ 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 8007a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d04e      	beq.n	8007b16 <MMC_ReadExtCSD+0x106>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a5c      	ldr	r2, [pc, #368]	@ (8007bf0 <MMC_ReadExtCSD+0x1e0>)
 8007a7e:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a86:	431a      	orrs	r2, r3
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8007a94:	2301      	movs	r3, #1
 8007a96:	e0a6      	b.n	8007be6 <MMC_ReadExtCSD+0x1d6>

  /* Poll on SDMMC flags */
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
                             SDMMC_FLAG_DATAEND))
  {
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d01c      	beq.n	8007ae0 <MMC_ReadExtCSD+0xd0>
    {
      /* Read data from SDMMC Rx FIFO */
      for (count = 0U; count < 8U; count++)
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007aaa:	e013      	b.n	8007ad4 <MMC_ReadExtCSD+0xc4>
      {
        tmp_data = SDMMC_ReadFIFO(hmmc->Instance);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f004 fae9 	bl	800c088 <SDMMC_ReadFIFO>
 8007ab6:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* eg : SEC_COUNT   : FieldIndex = 212 => i+count = 53 */
        /*      DEVICE_TYPE : FieldIndex = 196 => i+count = 49 */
        if ((i + count) == ((uint32_t)FieldIndex / 4U))
 8007ab8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007aba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007abc:	4413      	add	r3, r2
 8007abe:	88fa      	ldrh	r2, [r7, #6]
 8007ac0:	0892      	lsrs	r2, r2, #2
 8007ac2:	b292      	uxth	r2, r2
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d102      	bne.n	8007ace <MMC_ReadExtCSD+0xbe>
        {
          *pFieldData = tmp_data;
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007acc:	601a      	str	r2, [r3, #0]
      for (count = 0U; count < 8U; count++)
 8007ace:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ad4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ad6:	2b07      	cmp	r3, #7
 8007ad8:	d9e8      	bls.n	8007aac <MMC_ReadExtCSD+0x9c>
        }
      }
      i += 8U;
 8007ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007adc:	3308      	adds	r3, #8
 8007ade:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8007ae0:	f7fe f972 	bl	8005dc8 <HAL_GetTick>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ae8:	1ad3      	subs	r3, r2, r3
 8007aea:	683a      	ldr	r2, [r7, #0]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d902      	bls.n	8007af6 <MMC_ReadExtCSD+0xe6>
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d10f      	bne.n	8007b16 <MMC_ReadExtCSD+0x106>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a3d      	ldr	r2, [pc, #244]	@ (8007bf0 <MMC_ReadExtCSD+0x1e0>)
 8007afc:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b02:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8007b12:	2303      	movs	r3, #3
 8007b14:	e067      	b.n	8007be6 <MMC_ReadExtCSD+0x1d6>
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b1c:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d0b9      	beq.n	8007a98 <MMC_ReadExtCSD+0x88>
    }
  }

  /* Get error state */
  if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b2a:	f003 0308 	and.w	r3, r3, #8
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00f      	beq.n	8007b52 <MMC_ReadExtCSD+0x142>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a2e      	ldr	r2, [pc, #184]	@ (8007bf0 <MMC_ReadExtCSD+0x1e0>)
 8007b38:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b3e:	f043 0208 	orr.w	r2, r3, #8
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e049      	b.n	8007be6 <MMC_ReadExtCSD+0x1d6>
  }
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b58:	f003 0302 	and.w	r3, r3, #2
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00f      	beq.n	8007b80 <MMC_ReadExtCSD+0x170>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a22      	ldr	r2, [pc, #136]	@ (8007bf0 <MMC_ReadExtCSD+0x1e0>)
 8007b66:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b6c:	f043 0202 	orr.w	r2, r3, #2
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e032      	b.n	8007be6 <MMC_ReadExtCSD+0x1d6>
  }
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b86:	f003 0320 	and.w	r3, r3, #32
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d00f      	beq.n	8007bae <MMC_ReadExtCSD+0x19e>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a17      	ldr	r2, [pc, #92]	@ (8007bf0 <MMC_ReadExtCSD+0x1e0>)
 8007b94:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b9a:	f043 0220 	orr.w	r2, r3, #32
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	e01b      	b.n	8007be6 <MMC_ReadExtCSD+0x1d6>
  {
    /* Nothing to do */
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16));
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bb6:	041b      	lsls	r3, r3, #16
 8007bb8:	4619      	mov	r1, r3
 8007bba:	4610      	mov	r0, r2
 8007bbc:	f004 fca9 	bl	800c512 <SDMMC_CmdSendStatus>
 8007bc0:	6338      	str	r0, [r7, #48]	@ 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 8007bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d005      	beq.n	8007bd4 <MMC_ReadExtCSD+0x1c4>
  {
    hmmc->ErrorCode |= errorstate;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bce:	431a      	orrs	r2, r3
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Clear all the static flags */
  __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a06      	ldr	r2, [pc, #24]	@ (8007bf4 <MMC_ReadExtCSD+0x1e4>)
 8007bda:	639a      	str	r2, [r3, #56]	@ 0x38

  hmmc->State = HAL_MMC_STATE_READY;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3740      	adds	r7, #64	@ 0x40
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	1fe00fff 	.word	0x1fe00fff
 8007bf4:	18000f3a 	.word	0x18000f3a

08007bf8 <MMC_Read_IT>:
  * @param  hmmc: pointer to a MMC_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void MMC_Read_IT(MMC_HandleTypeDef *hmmc)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b086      	sub	sp, #24
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hmmc->pRxBuffPtr;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c04:	613b      	str	r3, [r7, #16]

  if (hmmc->RxXferSize >= 32U)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c0a:	2b1f      	cmp	r3, #31
 8007c0c:	d936      	bls.n	8007c7c <MMC_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 8007c0e:	2300      	movs	r3, #0
 8007c10:	617b      	str	r3, [r7, #20]
 8007c12:	e027      	b.n	8007c64 <MMC_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hmmc->Instance);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f004 fa35 	bl	800c088 <SDMMC_ReadFIFO>
 8007c1e:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	b2da      	uxtb	r2, r3
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	0a1b      	lsrs	r3, r3, #8
 8007c32:	b2da      	uxtb	r2, r3
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	0c1b      	lsrs	r3, r3, #16
 8007c42:	b2da      	uxtb	r2, r3
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	0e1b      	lsrs	r3, r3, #24
 8007c52:	b2da      	uxtb	r2, r3
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	3301      	adds	r3, #1
 8007c62:	617b      	str	r3, [r7, #20]
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	2b07      	cmp	r3, #7
 8007c68:	d9d4      	bls.n	8007c14 <MMC_Read_IT+0x1c>
    }

    hmmc->pRxBuffPtr = tmp;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	693a      	ldr	r2, [r7, #16]
 8007c6e:	625a      	str	r2, [r3, #36]	@ 0x24
    hmmc->RxXferSize -= 32U;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c74:	f1a3 0220 	sub.w	r2, r3, #32
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 8007c7c:	bf00      	nop
 8007c7e:	3718      	adds	r7, #24
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <MMC_Write_IT>:
  * @param  hmmc: pointer to a MMC_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void MMC_Write_IT(MMC_HandleTypeDef *hmmc)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b086      	sub	sp, #24
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hmmc->pTxBuffPtr;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	69db      	ldr	r3, [r3, #28]
 8007c90:	613b      	str	r3, [r7, #16]

  if (hmmc->TxXferSize >= 32U)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a1b      	ldr	r3, [r3, #32]
 8007c96:	2b1f      	cmp	r3, #31
 8007c98:	d93a      	bls.n	8007d10 <MMC_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	617b      	str	r3, [r7, #20]
 8007c9e:	e02b      	b.n	8007cf8 <MMC_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	3301      	adds	r3, #1
 8007caa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	021a      	lsls	r2, r3, #8
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	041a      	lsls	r2, r3, #16
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	3301      	adds	r3, #1
 8007cce:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	061a      	lsls	r2, r3, #24
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	3301      	adds	r3, #1
 8007ce0:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hmmc->Instance, &data);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f107 020c 	add.w	r2, r7, #12
 8007cea:	4611      	mov	r1, r2
 8007cec:	4618      	mov	r0, r3
 8007cee:	f004 f9d8 	bl	800c0a2 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	617b      	str	r3, [r7, #20]
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	2b07      	cmp	r3, #7
 8007cfc:	d9d0      	bls.n	8007ca0 <MMC_Write_IT+0x1c>
    }

    hmmc->pTxBuffPtr = tmp;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	693a      	ldr	r2, [r7, #16]
 8007d02:	61da      	str	r2, [r3, #28]
    hmmc->TxXferSize -= 32U;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6a1b      	ldr	r3, [r3, #32]
 8007d08:	f1a3 0220 	sub.w	r2, r3, #32
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	621a      	str	r2, [r3, #32]
  }
}
 8007d10:	bf00      	nop
 8007d12:	3718      	adds	r7, #24
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <MMC_PwrClassUpdate>:
  * @param  Wide Wide of MMC bus
  * @param  Speed Speed of the MMC bus
  * @retval MMC Card error state
  */
static uint32_t MMC_PwrClassUpdate(MMC_HandleTypeDef *hmmc, uint32_t Wide, uint32_t Speed)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b08a      	sub	sp, #40	@ 0x28
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	607a      	str	r2, [r7, #4]
  uint32_t count;
  uint32_t response = 0U;
 8007d24:	2300      	movs	r3, #0
 8007d26:	623b      	str	r3, [r7, #32]
  uint32_t errorstate = HAL_MMC_ERROR_NONE;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	61fb      	str	r3, [r7, #28]
  uint32_t power_class;
  uint32_t supported_pwr_class;

  if ((Wide == SDMMC_BUS_WIDE_8B) || (Wide == SDMMC_BUS_WIDE_4B))
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d32:	d004      	beq.n	8007d3e <MMC_PwrClassUpdate+0x26>
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d3a:	f040 8085 	bne.w	8007e48 <MMC_PwrClassUpdate+0x130>
  {
    power_class = 0U; /* Default value after power-on or software reset */
 8007d3e:	2300      	movs	r3, #0
 8007d40:	617b      	str	r3, [r7, #20]

    /* Read the PowerClass field of the Extended CSD register */
    if (MMC_ReadExtCSD(hmmc, &power_class, 187, SDMMC_DATATIMEOUT) != HAL_OK) /* Field POWER_CLASS [187] */
 8007d42:	f107 0114 	add.w	r1, r7, #20
 8007d46:	f04f 33ff 	mov.w	r3, #4294967295
 8007d4a:	22bb      	movs	r2, #187	@ 0xbb
 8007d4c:	68f8      	ldr	r0, [r7, #12]
 8007d4e:	f7ff fe5f 	bl	8007a10 <MMC_ReadExtCSD>
 8007d52:	4603      	mov	r3, r0
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d003      	beq.n	8007d60 <MMC_PwrClassUpdate+0x48>
    {
      errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007d58:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007d5c:	61fb      	str	r3, [r7, #28]
 8007d5e:	e002      	b.n	8007d66 <MMC_PwrClassUpdate+0x4e>
    }
    else
    {
      power_class = ((power_class >> 24U) & 0x000000FFU);
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	0e1b      	lsrs	r3, r3, #24
 8007d64:	617b      	str	r3, [r7, #20]
    }

    /* Get the supported PowerClass field of the Extended CSD register */
    if (Speed == SDMMC_SPEED_MODE_DDR)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2b04      	cmp	r3, #4
 8007d6a:	d105      	bne.n	8007d78 <MMC_PwrClassUpdate+0x60>
    {
      /* Field PWR_CL_DDR_52_xxx [238 or 239] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_DDR_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_DDR_52_POS) &
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8007d72:	0e1b      	lsrs	r3, r3, #24
 8007d74:	61bb      	str	r3, [r7, #24]
 8007d76:	e00e      	b.n	8007d96 <MMC_PwrClassUpdate+0x7e>
                             0x000000FFU);
    }
    else if (Speed == SDMMC_SPEED_MODE_HIGH)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2b02      	cmp	r3, #2
 8007d7c:	d106      	bne.n	8007d8c <MMC_PwrClassUpdate+0x74>
    {
      /* Field PWR_CL_52_xxx [200 or 202] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_52_POS) &
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8007d84:	0c1b      	lsrs	r3, r3, #16
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	61bb      	str	r3, [r7, #24]
 8007d8a:	e004      	b.n	8007d96 <MMC_PwrClassUpdate+0x7e>
                             0x000000FFU);
    }
    else
    {
      /* Field PWR_CL_26_xxx [201 or 203] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_26_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_26_POS) &
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8007d92:	0e1b      	lsrs	r3, r3, #24
 8007d94:	61bb      	str	r3, [r7, #24]
                             0x000000FFU);
    }

    if (errorstate == HAL_MMC_ERROR_NONE)
 8007d96:	69fb      	ldr	r3, [r7, #28]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d155      	bne.n	8007e48 <MMC_PwrClassUpdate+0x130>
    {
      if (Wide == SDMMC_BUS_WIDE_8B)
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007da2:	d102      	bne.n	8007daa <MMC_PwrClassUpdate+0x92>
      {
        /* Bit [7:4]: power class for 8-bits bus configuration - Bit [3:0]: power class for 4-bits bus configuration */
        supported_pwr_class = (supported_pwr_class >> 4U);
 8007da4:	69bb      	ldr	r3, [r7, #24]
 8007da6:	091b      	lsrs	r3, r3, #4
 8007da8:	61bb      	str	r3, [r7, #24]
      }

      if ((power_class & 0x0FU) != (supported_pwr_class & 0x0FU))
 8007daa:	697a      	ldr	r2, [r7, #20]
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	4053      	eors	r3, r2
 8007db0:	f003 030f 	and.w	r3, r3, #15
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d047      	beq.n	8007e48 <MMC_PwrClassUpdate+0x130>
      {
        /* Need to change current power class */
        errorstate = SDMMC_CmdSwitch(hmmc->Instance, (0x03BB0000U | ((supported_pwr_class & 0x0FU) << 8U)));
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6818      	ldr	r0, [r3, #0]
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	021b      	lsls	r3, r3, #8
 8007dc0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8007dc4:	4b23      	ldr	r3, [pc, #140]	@ (8007e54 <MMC_PwrClassUpdate+0x13c>)
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	4619      	mov	r1, r3
 8007dca:	f004 fbe5 	bl	800c598 <SDMMC_CmdSwitch>
 8007dce:	61f8      	str	r0, [r7, #28]

        if (errorstate == HAL_MMC_ERROR_NONE)
 8007dd0:	69fb      	ldr	r3, [r7, #28]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d138      	bne.n	8007e48 <MMC_PwrClassUpdate+0x130>
        {
          /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
          count = SDMMC_MAX_TRIAL;
 8007dd6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007dda:	627b      	str	r3, [r7, #36]	@ 0x24
          do
          {
            errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007de4:	041b      	lsls	r3, r3, #16
 8007de6:	4619      	mov	r1, r3
 8007de8:	4610      	mov	r0, r2
 8007dea:	f004 fb92 	bl	800c512 <SDMMC_CmdSendStatus>
 8007dee:	61f8      	str	r0, [r7, #28]
            if (errorstate != HAL_MMC_ERROR_NONE)
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d112      	bne.n	8007e1c <MMC_PwrClassUpdate+0x104>
            {
              break;
            }

            /* Get command response */
            response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2100      	movs	r1, #0
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f004 f9b8 	bl	800c172 <SDMMC_GetResponse>
 8007e02:	6238      	str	r0, [r7, #32]
            count--;
 8007e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e06:	3b01      	subs	r3, #1
 8007e08:	627b      	str	r3, [r7, #36]	@ 0x24
          } while (((response & 0x100U) == 0U) && (count != 0U));
 8007e0a:	6a3b      	ldr	r3, [r7, #32]
 8007e0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d104      	bne.n	8007e1e <MMC_PwrClassUpdate+0x106>
 8007e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d1e0      	bne.n	8007ddc <MMC_PwrClassUpdate+0xc4>
 8007e1a:	e000      	b.n	8007e1e <MMC_PwrClassUpdate+0x106>
              break;
 8007e1c:	bf00      	nop

          /* Check the status after the switch command execution */
          if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 8007e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d00b      	beq.n	8007e3c <MMC_PwrClassUpdate+0x124>
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d108      	bne.n	8007e3c <MMC_PwrClassUpdate+0x124>
          {
            /* Check the bit SWITCH_ERROR of the device status */
            if ((response & 0x80U) != 0U)
 8007e2a:	6a3b      	ldr	r3, [r7, #32]
 8007e2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d009      	beq.n	8007e48 <MMC_PwrClassUpdate+0x130>
            {
              errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8007e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007e38:	61fb      	str	r3, [r7, #28]
            if ((response & 0x80U) != 0U)
 8007e3a:	e005      	b.n	8007e48 <MMC_PwrClassUpdate+0x130>
            }
          }
          else if (count == 0U)
 8007e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d102      	bne.n	8007e48 <MMC_PwrClassUpdate+0x130>
          {
            errorstate = SDMMC_ERROR_TIMEOUT;
 8007e42:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007e46:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return errorstate;
 8007e48:	69fb      	ldr	r3, [r7, #28]
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3728      	adds	r7, #40	@ 0x28
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	03bb0000 	.word	0x03bb0000

08007e58 <HAL_MMCEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hmmc: MMC handle
  * @retval None
  */
__weak void HAL_MMCEx_Read_DMADoubleBuf0CpltCallback(MMC_HandleTypeDef *hmmc)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hmmc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MMCEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8007e60:	bf00      	nop
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <HAL_MMCEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hmmc: MMC handle
  * @retval None
  */
__weak void HAL_MMCEx_Read_DMADoubleBuf1CpltCallback(MMC_HandleTypeDef *hmmc)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  UNUSED(hmmc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MMCEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8007e74:	bf00      	nop
 8007e76:	370c      	adds	r7, #12
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr

08007e80 <HAL_MMCEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hmmc: MMC handle
  * @retval None
  */
__weak void HAL_MMCEx_Write_DMADoubleBuf0CpltCallback(MMC_HandleTypeDef *hmmc)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b083      	sub	sp, #12
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  UNUSED(hmmc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MMCEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8007e88:	bf00      	nop
 8007e8a:	370c      	adds	r7, #12
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <HAL_MMCEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hmmc: MMC handle
  * @retval None
  */
__weak void HAL_MMCEx_Write_DMADoubleBuf1CpltCallback(MMC_HandleTypeDef *hmmc)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hmmc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MMCEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8007e9c:	bf00      	nop
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b086      	sub	sp, #24
 8007eac:	af02      	add	r7, sp, #8
 8007eae:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d101      	bne.n	8007eba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e0fe      	b.n	80080b8 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d106      	bne.n	8007ed4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f00e f952 	bl	8016178 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2203      	movs	r2, #3
 8007ed8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f004 ff2e 	bl	800cd42 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6818      	ldr	r0, [r3, #0]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	7c1a      	ldrb	r2, [r3, #16]
 8007eee:	f88d 2000 	strb.w	r2, [sp]
 8007ef2:	3304      	adds	r3, #4
 8007ef4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007ef6:	f004 fdff 	bl	800caf8 <USB_CoreInit>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d005      	beq.n	8007f0c <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2202      	movs	r2, #2
 8007f04:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	e0d5      	b.n	80080b8 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2100      	movs	r1, #0
 8007f12:	4618      	mov	r0, r3
 8007f14:	f004 ff26 	bl	800cd64 <USB_SetCurrentMode>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d005      	beq.n	8007f2a <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2202      	movs	r2, #2
 8007f22:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007f26:	2301      	movs	r3, #1
 8007f28:	e0c6      	b.n	80080b8 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	73fb      	strb	r3, [r7, #15]
 8007f2e:	e04a      	b.n	8007fc6 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007f30:	7bfa      	ldrb	r2, [r7, #15]
 8007f32:	6879      	ldr	r1, [r7, #4]
 8007f34:	4613      	mov	r3, r2
 8007f36:	00db      	lsls	r3, r3, #3
 8007f38:	4413      	add	r3, r2
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	440b      	add	r3, r1
 8007f3e:	3315      	adds	r3, #21
 8007f40:	2201      	movs	r2, #1
 8007f42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007f44:	7bfa      	ldrb	r2, [r7, #15]
 8007f46:	6879      	ldr	r1, [r7, #4]
 8007f48:	4613      	mov	r3, r2
 8007f4a:	00db      	lsls	r3, r3, #3
 8007f4c:	4413      	add	r3, r2
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	440b      	add	r3, r1
 8007f52:	3314      	adds	r3, #20
 8007f54:	7bfa      	ldrb	r2, [r7, #15]
 8007f56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007f58:	7bfa      	ldrb	r2, [r7, #15]
 8007f5a:	7bfb      	ldrb	r3, [r7, #15]
 8007f5c:	b298      	uxth	r0, r3
 8007f5e:	6879      	ldr	r1, [r7, #4]
 8007f60:	4613      	mov	r3, r2
 8007f62:	00db      	lsls	r3, r3, #3
 8007f64:	4413      	add	r3, r2
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	440b      	add	r3, r1
 8007f6a:	332e      	adds	r3, #46	@ 0x2e
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007f70:	7bfa      	ldrb	r2, [r7, #15]
 8007f72:	6879      	ldr	r1, [r7, #4]
 8007f74:	4613      	mov	r3, r2
 8007f76:	00db      	lsls	r3, r3, #3
 8007f78:	4413      	add	r3, r2
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	440b      	add	r3, r1
 8007f7e:	3318      	adds	r3, #24
 8007f80:	2200      	movs	r2, #0
 8007f82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007f84:	7bfa      	ldrb	r2, [r7, #15]
 8007f86:	6879      	ldr	r1, [r7, #4]
 8007f88:	4613      	mov	r3, r2
 8007f8a:	00db      	lsls	r3, r3, #3
 8007f8c:	4413      	add	r3, r2
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	440b      	add	r3, r1
 8007f92:	331c      	adds	r3, #28
 8007f94:	2200      	movs	r2, #0
 8007f96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007f98:	7bfa      	ldrb	r2, [r7, #15]
 8007f9a:	6879      	ldr	r1, [r7, #4]
 8007f9c:	4613      	mov	r3, r2
 8007f9e:	00db      	lsls	r3, r3, #3
 8007fa0:	4413      	add	r3, r2
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	440b      	add	r3, r1
 8007fa6:	3320      	adds	r3, #32
 8007fa8:	2200      	movs	r2, #0
 8007faa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007fac:	7bfa      	ldrb	r2, [r7, #15]
 8007fae:	6879      	ldr	r1, [r7, #4]
 8007fb0:	4613      	mov	r3, r2
 8007fb2:	00db      	lsls	r3, r3, #3
 8007fb4:	4413      	add	r3, r2
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	440b      	add	r3, r1
 8007fba:	3324      	adds	r3, #36	@ 0x24
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007fc0:	7bfb      	ldrb	r3, [r7, #15]
 8007fc2:	3301      	adds	r3, #1
 8007fc4:	73fb      	strb	r3, [r7, #15]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	791b      	ldrb	r3, [r3, #4]
 8007fca:	7bfa      	ldrb	r2, [r7, #15]
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d3af      	bcc.n	8007f30 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	73fb      	strb	r3, [r7, #15]
 8007fd4:	e044      	b.n	8008060 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007fd6:	7bfa      	ldrb	r2, [r7, #15]
 8007fd8:	6879      	ldr	r1, [r7, #4]
 8007fda:	4613      	mov	r3, r2
 8007fdc:	00db      	lsls	r3, r3, #3
 8007fde:	4413      	add	r3, r2
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	440b      	add	r3, r1
 8007fe4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8007fe8:	2200      	movs	r2, #0
 8007fea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007fec:	7bfa      	ldrb	r2, [r7, #15]
 8007fee:	6879      	ldr	r1, [r7, #4]
 8007ff0:	4613      	mov	r3, r2
 8007ff2:	00db      	lsls	r3, r3, #3
 8007ff4:	4413      	add	r3, r2
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	440b      	add	r3, r1
 8007ffa:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8007ffe:	7bfa      	ldrb	r2, [r7, #15]
 8008000:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008002:	7bfa      	ldrb	r2, [r7, #15]
 8008004:	6879      	ldr	r1, [r7, #4]
 8008006:	4613      	mov	r3, r2
 8008008:	00db      	lsls	r3, r3, #3
 800800a:	4413      	add	r3, r2
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	440b      	add	r3, r1
 8008010:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8008014:	2200      	movs	r2, #0
 8008016:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008018:	7bfa      	ldrb	r2, [r7, #15]
 800801a:	6879      	ldr	r1, [r7, #4]
 800801c:	4613      	mov	r3, r2
 800801e:	00db      	lsls	r3, r3, #3
 8008020:	4413      	add	r3, r2
 8008022:	009b      	lsls	r3, r3, #2
 8008024:	440b      	add	r3, r1
 8008026:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800802a:	2200      	movs	r2, #0
 800802c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800802e:	7bfa      	ldrb	r2, [r7, #15]
 8008030:	6879      	ldr	r1, [r7, #4]
 8008032:	4613      	mov	r3, r2
 8008034:	00db      	lsls	r3, r3, #3
 8008036:	4413      	add	r3, r2
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	440b      	add	r3, r1
 800803c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008040:	2200      	movs	r2, #0
 8008042:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008044:	7bfa      	ldrb	r2, [r7, #15]
 8008046:	6879      	ldr	r1, [r7, #4]
 8008048:	4613      	mov	r3, r2
 800804a:	00db      	lsls	r3, r3, #3
 800804c:	4413      	add	r3, r2
 800804e:	009b      	lsls	r3, r3, #2
 8008050:	440b      	add	r3, r1
 8008052:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008056:	2200      	movs	r2, #0
 8008058:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800805a:	7bfb      	ldrb	r3, [r7, #15]
 800805c:	3301      	adds	r3, #1
 800805e:	73fb      	strb	r3, [r7, #15]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	791b      	ldrb	r3, [r3, #4]
 8008064:	7bfa      	ldrb	r2, [r7, #15]
 8008066:	429a      	cmp	r2, r3
 8008068:	d3b5      	bcc.n	8007fd6 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6818      	ldr	r0, [r3, #0]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	7c1a      	ldrb	r2, [r3, #16]
 8008072:	f88d 2000 	strb.w	r2, [sp]
 8008076:	3304      	adds	r3, #4
 8008078:	cb0e      	ldmia	r3, {r1, r2, r3}
 800807a:	f004 febf 	bl	800cdfc <USB_DevInit>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d005      	beq.n	8008090 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2202      	movs	r2, #2
 8008088:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	e013      	b.n	80080b8 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2201      	movs	r2, #1
 800809a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	7b1b      	ldrb	r3, [r3, #12]
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d102      	bne.n	80080ac <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f001 f96c 	bl	8009384 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4618      	mov	r0, r3
 80080b2:	f005 fefe 	bl	800deb2 <USB_DevDisconnect>

  return HAL_OK;
 80080b6:	2300      	movs	r3, #0
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3710      	adds	r7, #16
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d101      	bne.n	80080dc <HAL_PCD_Start+0x1c>
 80080d8:	2302      	movs	r3, #2
 80080da:	e022      	b.n	8008122 <HAL_PCD_Start+0x62>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2201      	movs	r2, #1
 80080e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d009      	beq.n	8008104 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d105      	bne.n	8008104 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080fc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4618      	mov	r0, r3
 800810a:	f004 fe09 	bl	800cd20 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4618      	mov	r0, r3
 8008114:	f005 feac 	bl	800de70 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}

0800812a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800812a:	b590      	push	{r4, r7, lr}
 800812c:	b08d      	sub	sp, #52	@ 0x34
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008138:	6a3b      	ldr	r3, [r7, #32]
 800813a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4618      	mov	r0, r3
 8008142:	f005 ff6a 	bl	800e01a <USB_GetMode>
 8008146:	4603      	mov	r3, r0
 8008148:	2b00      	cmp	r3, #0
 800814a:	f040 84b9 	bne.w	8008ac0 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4618      	mov	r0, r3
 8008154:	f005 fece 	bl	800def4 <USB_ReadInterrupts>
 8008158:	4603      	mov	r3, r0
 800815a:	2b00      	cmp	r3, #0
 800815c:	f000 84af 	beq.w	8008abe <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	0a1b      	lsrs	r3, r3, #8
 800816a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4618      	mov	r0, r3
 800817a:	f005 febb 	bl	800def4 <USB_ReadInterrupts>
 800817e:	4603      	mov	r3, r0
 8008180:	f003 0302 	and.w	r3, r3, #2
 8008184:	2b02      	cmp	r3, #2
 8008186:	d107      	bne.n	8008198 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	695a      	ldr	r2, [r3, #20]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f002 0202 	and.w	r2, r2, #2
 8008196:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4618      	mov	r0, r3
 800819e:	f005 fea9 	bl	800def4 <USB_ReadInterrupts>
 80081a2:	4603      	mov	r3, r0
 80081a4:	f003 0310 	and.w	r3, r3, #16
 80081a8:	2b10      	cmp	r3, #16
 80081aa:	d161      	bne.n	8008270 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	699a      	ldr	r2, [r3, #24]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f022 0210 	bic.w	r2, r2, #16
 80081ba:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80081bc:	6a3b      	ldr	r3, [r7, #32]
 80081be:	6a1b      	ldr	r3, [r3, #32]
 80081c0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80081c2:	69bb      	ldr	r3, [r7, #24]
 80081c4:	f003 020f 	and.w	r2, r3, #15
 80081c8:	4613      	mov	r3, r2
 80081ca:	00db      	lsls	r3, r3, #3
 80081cc:	4413      	add	r3, r2
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	4413      	add	r3, r2
 80081d8:	3304      	adds	r3, #4
 80081da:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	0c5b      	lsrs	r3, r3, #17
 80081e0:	f003 030f 	and.w	r3, r3, #15
 80081e4:	2b02      	cmp	r3, #2
 80081e6:	d124      	bne.n	8008232 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80081e8:	69ba      	ldr	r2, [r7, #24]
 80081ea:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80081ee:	4013      	ands	r3, r2
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d035      	beq.n	8008260 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80081f8:	69bb      	ldr	r3, [r7, #24]
 80081fa:	091b      	lsrs	r3, r3, #4
 80081fc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80081fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008202:	b29b      	uxth	r3, r3
 8008204:	461a      	mov	r2, r3
 8008206:	6a38      	ldr	r0, [r7, #32]
 8008208:	f005 fce0 	bl	800dbcc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	68da      	ldr	r2, [r3, #12]
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	091b      	lsrs	r3, r3, #4
 8008214:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008218:	441a      	add	r2, r3
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	695a      	ldr	r2, [r3, #20]
 8008222:	69bb      	ldr	r3, [r7, #24]
 8008224:	091b      	lsrs	r3, r3, #4
 8008226:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800822a:	441a      	add	r2, r3
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	615a      	str	r2, [r3, #20]
 8008230:	e016      	b.n	8008260 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	0c5b      	lsrs	r3, r3, #17
 8008236:	f003 030f 	and.w	r3, r3, #15
 800823a:	2b06      	cmp	r3, #6
 800823c:	d110      	bne.n	8008260 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008244:	2208      	movs	r2, #8
 8008246:	4619      	mov	r1, r3
 8008248:	6a38      	ldr	r0, [r7, #32]
 800824a:	f005 fcbf 	bl	800dbcc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	695a      	ldr	r2, [r3, #20]
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	091b      	lsrs	r3, r3, #4
 8008256:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800825a:	441a      	add	r2, r3
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	699a      	ldr	r2, [r3, #24]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f042 0210 	orr.w	r2, r2, #16
 800826e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4618      	mov	r0, r3
 8008276:	f005 fe3d 	bl	800def4 <USB_ReadInterrupts>
 800827a:	4603      	mov	r3, r0
 800827c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008280:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008284:	f040 80a7 	bne.w	80083d6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8008288:	2300      	movs	r3, #0
 800828a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4618      	mov	r0, r3
 8008292:	f005 fe42 	bl	800df1a <USB_ReadDevAllOutEpInterrupt>
 8008296:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8008298:	e099      	b.n	80083ce <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800829a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800829c:	f003 0301 	and.w	r3, r3, #1
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	f000 808e 	beq.w	80083c2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082ac:	b2d2      	uxtb	r2, r2
 80082ae:	4611      	mov	r1, r2
 80082b0:	4618      	mov	r0, r3
 80082b2:	f005 fe66 	bl	800df82 <USB_ReadDevOutEPInterrupt>
 80082b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	f003 0301 	and.w	r3, r3, #1
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d00c      	beq.n	80082dc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80082c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c4:	015a      	lsls	r2, r3, #5
 80082c6:	69fb      	ldr	r3, [r7, #28]
 80082c8:	4413      	add	r3, r2
 80082ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082ce:	461a      	mov	r2, r3
 80082d0:	2301      	movs	r3, #1
 80082d2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80082d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 fece 	bl	8009078 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	f003 0308 	and.w	r3, r3, #8
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00c      	beq.n	8008300 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80082e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e8:	015a      	lsls	r2, r3, #5
 80082ea:	69fb      	ldr	r3, [r7, #28]
 80082ec:	4413      	add	r3, r2
 80082ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082f2:	461a      	mov	r2, r3
 80082f4:	2308      	movs	r3, #8
 80082f6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80082f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 ffa4 	bl	8009248 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	f003 0310 	and.w	r3, r3, #16
 8008306:	2b00      	cmp	r3, #0
 8008308:	d008      	beq.n	800831c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800830a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800830c:	015a      	lsls	r2, r3, #5
 800830e:	69fb      	ldr	r3, [r7, #28]
 8008310:	4413      	add	r3, r2
 8008312:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008316:	461a      	mov	r2, r3
 8008318:	2310      	movs	r3, #16
 800831a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	f003 0302 	and.w	r3, r3, #2
 8008322:	2b00      	cmp	r3, #0
 8008324:	d030      	beq.n	8008388 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8008326:	6a3b      	ldr	r3, [r7, #32]
 8008328:	695b      	ldr	r3, [r3, #20]
 800832a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800832e:	2b80      	cmp	r3, #128	@ 0x80
 8008330:	d109      	bne.n	8008346 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8008332:	69fb      	ldr	r3, [r7, #28]
 8008334:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	69fa      	ldr	r2, [r7, #28]
 800833c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008340:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008344:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008346:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008348:	4613      	mov	r3, r2
 800834a:	00db      	lsls	r3, r3, #3
 800834c:	4413      	add	r3, r2
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	4413      	add	r3, r2
 8008358:	3304      	adds	r3, #4
 800835a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	78db      	ldrb	r3, [r3, #3]
 8008360:	2b01      	cmp	r3, #1
 8008362:	d108      	bne.n	8008376 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	2200      	movs	r2, #0
 8008368:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800836a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800836c:	b2db      	uxtb	r3, r3
 800836e:	4619      	mov	r1, r3
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f00e f80b 	bl	801638c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008378:	015a      	lsls	r2, r3, #5
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	4413      	add	r3, r2
 800837e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008382:	461a      	mov	r2, r3
 8008384:	2302      	movs	r3, #2
 8008386:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	f003 0320 	and.w	r3, r3, #32
 800838e:	2b00      	cmp	r3, #0
 8008390:	d008      	beq.n	80083a4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008394:	015a      	lsls	r2, r3, #5
 8008396:	69fb      	ldr	r3, [r7, #28]
 8008398:	4413      	add	r3, r2
 800839a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800839e:	461a      	mov	r2, r3
 80083a0:	2320      	movs	r3, #32
 80083a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d009      	beq.n	80083c2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80083ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b0:	015a      	lsls	r2, r3, #5
 80083b2:	69fb      	ldr	r3, [r7, #28]
 80083b4:	4413      	add	r3, r2
 80083b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083ba:	461a      	mov	r2, r3
 80083bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80083c0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80083c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083c4:	3301      	adds	r3, #1
 80083c6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80083c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ca:	085b      	lsrs	r3, r3, #1
 80083cc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80083ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	f47f af62 	bne.w	800829a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4618      	mov	r0, r3
 80083dc:	f005 fd8a 	bl	800def4 <USB_ReadInterrupts>
 80083e0:	4603      	mov	r3, r0
 80083e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80083e6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80083ea:	f040 80db 	bne.w	80085a4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4618      	mov	r0, r3
 80083f4:	f005 fdab 	bl	800df4e <USB_ReadDevAllInEpInterrupt>
 80083f8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80083fa:	2300      	movs	r3, #0
 80083fc:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80083fe:	e0cd      	b.n	800859c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008402:	f003 0301 	and.w	r3, r3, #1
 8008406:	2b00      	cmp	r3, #0
 8008408:	f000 80c2 	beq.w	8008590 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008412:	b2d2      	uxtb	r2, r2
 8008414:	4611      	mov	r1, r2
 8008416:	4618      	mov	r0, r3
 8008418:	f005 fdd1 	bl	800dfbe <USB_ReadDevInEPInterrupt>
 800841c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	f003 0301 	and.w	r3, r3, #1
 8008424:	2b00      	cmp	r3, #0
 8008426:	d057      	beq.n	80084d8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800842a:	f003 030f 	and.w	r3, r3, #15
 800842e:	2201      	movs	r2, #1
 8008430:	fa02 f303 	lsl.w	r3, r2, r3
 8008434:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008436:	69fb      	ldr	r3, [r7, #28]
 8008438:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800843c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	43db      	mvns	r3, r3
 8008442:	69f9      	ldr	r1, [r7, #28]
 8008444:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008448:	4013      	ands	r3, r2
 800844a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800844c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800844e:	015a      	lsls	r2, r3, #5
 8008450:	69fb      	ldr	r3, [r7, #28]
 8008452:	4413      	add	r3, r2
 8008454:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008458:	461a      	mov	r2, r3
 800845a:	2301      	movs	r3, #1
 800845c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	799b      	ldrb	r3, [r3, #6]
 8008462:	2b01      	cmp	r3, #1
 8008464:	d132      	bne.n	80084cc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008466:	6879      	ldr	r1, [r7, #4]
 8008468:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800846a:	4613      	mov	r3, r2
 800846c:	00db      	lsls	r3, r3, #3
 800846e:	4413      	add	r3, r2
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	440b      	add	r3, r1
 8008474:	3320      	adds	r3, #32
 8008476:	6819      	ldr	r1, [r3, #0]
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800847c:	4613      	mov	r3, r2
 800847e:	00db      	lsls	r3, r3, #3
 8008480:	4413      	add	r3, r2
 8008482:	009b      	lsls	r3, r3, #2
 8008484:	4403      	add	r3, r0
 8008486:	331c      	adds	r3, #28
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4419      	add	r1, r3
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008490:	4613      	mov	r3, r2
 8008492:	00db      	lsls	r3, r3, #3
 8008494:	4413      	add	r3, r2
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	4403      	add	r3, r0
 800849a:	3320      	adds	r3, #32
 800849c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800849e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d113      	bne.n	80084cc <HAL_PCD_IRQHandler+0x3a2>
 80084a4:	6879      	ldr	r1, [r7, #4]
 80084a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084a8:	4613      	mov	r3, r2
 80084aa:	00db      	lsls	r3, r3, #3
 80084ac:	4413      	add	r3, r2
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	440b      	add	r3, r1
 80084b2:	3324      	adds	r3, #36	@ 0x24
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d108      	bne.n	80084cc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6818      	ldr	r0, [r3, #0]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80084c4:	461a      	mov	r2, r3
 80084c6:	2101      	movs	r1, #1
 80084c8:	f005 fdda 	bl	800e080 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80084cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	4619      	mov	r1, r3
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f00d fed5 	bl	8016282 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	f003 0308 	and.w	r3, r3, #8
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d008      	beq.n	80084f4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80084e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e4:	015a      	lsls	r2, r3, #5
 80084e6:	69fb      	ldr	r3, [r7, #28]
 80084e8:	4413      	add	r3, r2
 80084ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084ee:	461a      	mov	r2, r3
 80084f0:	2308      	movs	r3, #8
 80084f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	f003 0310 	and.w	r3, r3, #16
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d008      	beq.n	8008510 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80084fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008500:	015a      	lsls	r2, r3, #5
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	4413      	add	r3, r2
 8008506:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800850a:	461a      	mov	r2, r3
 800850c:	2310      	movs	r3, #16
 800850e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008516:	2b00      	cmp	r3, #0
 8008518:	d008      	beq.n	800852c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800851a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800851c:	015a      	lsls	r2, r3, #5
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	4413      	add	r3, r2
 8008522:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008526:	461a      	mov	r2, r3
 8008528:	2340      	movs	r3, #64	@ 0x40
 800852a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	f003 0302 	and.w	r3, r3, #2
 8008532:	2b00      	cmp	r3, #0
 8008534:	d023      	beq.n	800857e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008536:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008538:	6a38      	ldr	r0, [r7, #32]
 800853a:	f004 fdbd 	bl	800d0b8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800853e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008540:	4613      	mov	r3, r2
 8008542:	00db      	lsls	r3, r3, #3
 8008544:	4413      	add	r3, r2
 8008546:	009b      	lsls	r3, r3, #2
 8008548:	3310      	adds	r3, #16
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	4413      	add	r3, r2
 800854e:	3304      	adds	r3, #4
 8008550:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	78db      	ldrb	r3, [r3, #3]
 8008556:	2b01      	cmp	r3, #1
 8008558:	d108      	bne.n	800856c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	2200      	movs	r2, #0
 800855e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008562:	b2db      	uxtb	r3, r3
 8008564:	4619      	mov	r1, r3
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f00d ff22 	bl	80163b0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800856c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800856e:	015a      	lsls	r2, r3, #5
 8008570:	69fb      	ldr	r3, [r7, #28]
 8008572:	4413      	add	r3, r2
 8008574:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008578:	461a      	mov	r2, r3
 800857a:	2302      	movs	r3, #2
 800857c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008584:	2b00      	cmp	r3, #0
 8008586:	d003      	beq.n	8008590 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008588:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 fce8 	bl	8008f60 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008592:	3301      	adds	r3, #1
 8008594:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8008596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008598:	085b      	lsrs	r3, r3, #1
 800859a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800859c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800859e:	2b00      	cmp	r3, #0
 80085a0:	f47f af2e 	bne.w	8008400 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4618      	mov	r0, r3
 80085aa:	f005 fca3 	bl	800def4 <USB_ReadInterrupts>
 80085ae:	4603      	mov	r3, r0
 80085b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80085b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80085b8:	d122      	bne.n	8008600 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80085ba:	69fb      	ldr	r3, [r7, #28]
 80085bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	69fa      	ldr	r2, [r7, #28]
 80085c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80085c8:	f023 0301 	bic.w	r3, r3, #1
 80085cc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d108      	bne.n	80085ea <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80085e0:	2100      	movs	r1, #0
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 fef2 	bl	80093cc <HAL_PCDEx_LPM_Callback>
 80085e8:	e002      	b.n	80085f0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f00d fec0 	bl	8016370 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	695a      	ldr	r2, [r3, #20]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80085fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4618      	mov	r0, r3
 8008606:	f005 fc75 	bl	800def4 <USB_ReadInterrupts>
 800860a:	4603      	mov	r3, r0
 800860c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008610:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008614:	d112      	bne.n	800863c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	f003 0301 	and.w	r3, r3, #1
 8008622:	2b01      	cmp	r3, #1
 8008624:	d102      	bne.n	800862c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f00d fe7c 	bl	8016324 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	695a      	ldr	r2, [r3, #20]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800863a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4618      	mov	r0, r3
 8008642:	f005 fc57 	bl	800def4 <USB_ReadInterrupts>
 8008646:	4603      	mov	r3, r0
 8008648:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800864c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008650:	d121      	bne.n	8008696 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	695a      	ldr	r2, [r3, #20]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8008660:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8008668:	2b00      	cmp	r3, #0
 800866a:	d111      	bne.n	8008690 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2201      	movs	r2, #1
 8008670:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800867a:	089b      	lsrs	r3, r3, #2
 800867c:	f003 020f 	and.w	r2, r3, #15
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008686:	2101      	movs	r1, #1
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 fe9f 	bl	80093cc <HAL_PCDEx_LPM_Callback>
 800868e:	e002      	b.n	8008696 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f00d fe47 	bl	8016324 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4618      	mov	r0, r3
 800869c:	f005 fc2a 	bl	800def4 <USB_ReadInterrupts>
 80086a0:	4603      	mov	r3, r0
 80086a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80086a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086aa:	f040 80b7 	bne.w	800881c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80086ae:	69fb      	ldr	r3, [r7, #28]
 80086b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	69fa      	ldr	r2, [r7, #28]
 80086b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80086bc:	f023 0301 	bic.w	r3, r3, #1
 80086c0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	2110      	movs	r1, #16
 80086c8:	4618      	mov	r0, r3
 80086ca:	f004 fcf5 	bl	800d0b8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80086ce:	2300      	movs	r3, #0
 80086d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80086d2:	e046      	b.n	8008762 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80086d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086d6:	015a      	lsls	r2, r3, #5
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	4413      	add	r3, r2
 80086dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086e0:	461a      	mov	r2, r3
 80086e2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80086e6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80086e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ea:	015a      	lsls	r2, r3, #5
 80086ec:	69fb      	ldr	r3, [r7, #28]
 80086ee:	4413      	add	r3, r2
 80086f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80086f8:	0151      	lsls	r1, r2, #5
 80086fa:	69fa      	ldr	r2, [r7, #28]
 80086fc:	440a      	add	r2, r1
 80086fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008702:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008706:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800870a:	015a      	lsls	r2, r3, #5
 800870c:	69fb      	ldr	r3, [r7, #28]
 800870e:	4413      	add	r3, r2
 8008710:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008714:	461a      	mov	r2, r3
 8008716:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800871a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800871c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800871e:	015a      	lsls	r2, r3, #5
 8008720:	69fb      	ldr	r3, [r7, #28]
 8008722:	4413      	add	r3, r2
 8008724:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800872c:	0151      	lsls	r1, r2, #5
 800872e:	69fa      	ldr	r2, [r7, #28]
 8008730:	440a      	add	r2, r1
 8008732:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008736:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800873a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800873c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800873e:	015a      	lsls	r2, r3, #5
 8008740:	69fb      	ldr	r3, [r7, #28]
 8008742:	4413      	add	r3, r2
 8008744:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800874c:	0151      	lsls	r1, r2, #5
 800874e:	69fa      	ldr	r2, [r7, #28]
 8008750:	440a      	add	r2, r1
 8008752:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008756:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800875a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800875c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800875e:	3301      	adds	r3, #1
 8008760:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	791b      	ldrb	r3, [r3, #4]
 8008766:	461a      	mov	r2, r3
 8008768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800876a:	4293      	cmp	r3, r2
 800876c:	d3b2      	bcc.n	80086d4 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800876e:	69fb      	ldr	r3, [r7, #28]
 8008770:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008774:	69db      	ldr	r3, [r3, #28]
 8008776:	69fa      	ldr	r2, [r7, #28]
 8008778:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800877c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8008780:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	7bdb      	ldrb	r3, [r3, #15]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d016      	beq.n	80087b8 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008790:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008794:	69fa      	ldr	r2, [r7, #28]
 8008796:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800879a:	f043 030b 	orr.w	r3, r3, #11
 800879e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80087a2:	69fb      	ldr	r3, [r7, #28]
 80087a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087aa:	69fa      	ldr	r2, [r7, #28]
 80087ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80087b0:	f043 030b 	orr.w	r3, r3, #11
 80087b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80087b6:	e015      	b.n	80087e4 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80087b8:	69fb      	ldr	r3, [r7, #28]
 80087ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087be:	695a      	ldr	r2, [r3, #20]
 80087c0:	69fb      	ldr	r3, [r7, #28]
 80087c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087c6:	4619      	mov	r1, r3
 80087c8:	f242 032b 	movw	r3, #8235	@ 0x202b
 80087cc:	4313      	orrs	r3, r2
 80087ce:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80087d0:	69fb      	ldr	r3, [r7, #28]
 80087d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087d6:	691b      	ldr	r3, [r3, #16]
 80087d8:	69fa      	ldr	r2, [r7, #28]
 80087da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80087de:	f043 030b 	orr.w	r3, r3, #11
 80087e2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80087e4:	69fb      	ldr	r3, [r7, #28]
 80087e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	69fa      	ldr	r2, [r7, #28]
 80087ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80087f2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80087f6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6818      	ldr	r0, [r3, #0]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008806:	461a      	mov	r2, r3
 8008808:	f005 fc3a 	bl	800e080 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	695a      	ldr	r2, [r3, #20]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800881a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4618      	mov	r0, r3
 8008822:	f005 fb67 	bl	800def4 <USB_ReadInterrupts>
 8008826:	4603      	mov	r3, r0
 8008828:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800882c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008830:	d123      	bne.n	800887a <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4618      	mov	r0, r3
 8008838:	f005 fbfe 	bl	800e038 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4618      	mov	r0, r3
 8008842:	f004 fcb2 	bl	800d1aa <USB_GetDevSpeed>
 8008846:	4603      	mov	r3, r0
 8008848:	461a      	mov	r2, r3
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681c      	ldr	r4, [r3, #0]
 8008852:	f000 ff51 	bl	80096f8 <HAL_RCC_GetHCLKFreq>
 8008856:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800885c:	461a      	mov	r2, r3
 800885e:	4620      	mov	r0, r4
 8008860:	f004 f9bc 	bl	800cbdc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f00d fd34 	bl	80162d2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	695a      	ldr	r2, [r3, #20]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8008878:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4618      	mov	r0, r3
 8008880:	f005 fb38 	bl	800def4 <USB_ReadInterrupts>
 8008884:	4603      	mov	r3, r0
 8008886:	f003 0308 	and.w	r3, r3, #8
 800888a:	2b08      	cmp	r3, #8
 800888c:	d10a      	bne.n	80088a4 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f00d fd11 	bl	80162b6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	695a      	ldr	r2, [r3, #20]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f002 0208 	and.w	r2, r2, #8
 80088a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4618      	mov	r0, r3
 80088aa:	f005 fb23 	bl	800def4 <USB_ReadInterrupts>
 80088ae:	4603      	mov	r3, r0
 80088b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088b4:	2b80      	cmp	r3, #128	@ 0x80
 80088b6:	d123      	bne.n	8008900 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80088b8:	6a3b      	ldr	r3, [r7, #32]
 80088ba:	699b      	ldr	r3, [r3, #24]
 80088bc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80088c0:	6a3b      	ldr	r3, [r7, #32]
 80088c2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80088c4:	2301      	movs	r3, #1
 80088c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80088c8:	e014      	b.n	80088f4 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80088ca:	6879      	ldr	r1, [r7, #4]
 80088cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088ce:	4613      	mov	r3, r2
 80088d0:	00db      	lsls	r3, r3, #3
 80088d2:	4413      	add	r3, r2
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	440b      	add	r3, r1
 80088d8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80088dc:	781b      	ldrb	r3, [r3, #0]
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d105      	bne.n	80088ee <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80088e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	4619      	mov	r1, r3
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 fb08 	bl	8008efe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80088ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088f0:	3301      	adds	r3, #1
 80088f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	791b      	ldrb	r3, [r3, #4]
 80088f8:	461a      	mov	r2, r3
 80088fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d3e4      	bcc.n	80088ca <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4618      	mov	r0, r3
 8008906:	f005 faf5 	bl	800def4 <USB_ReadInterrupts>
 800890a:	4603      	mov	r3, r0
 800890c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008910:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008914:	d13c      	bne.n	8008990 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008916:	2301      	movs	r3, #1
 8008918:	627b      	str	r3, [r7, #36]	@ 0x24
 800891a:	e02b      	b.n	8008974 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800891c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800891e:	015a      	lsls	r2, r3, #5
 8008920:	69fb      	ldr	r3, [r7, #28]
 8008922:	4413      	add	r3, r2
 8008924:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800892c:	6879      	ldr	r1, [r7, #4]
 800892e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008930:	4613      	mov	r3, r2
 8008932:	00db      	lsls	r3, r3, #3
 8008934:	4413      	add	r3, r2
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	440b      	add	r3, r1
 800893a:	3318      	adds	r3, #24
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	2b01      	cmp	r3, #1
 8008940:	d115      	bne.n	800896e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008942:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008944:	2b00      	cmp	r3, #0
 8008946:	da12      	bge.n	800896e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008948:	6879      	ldr	r1, [r7, #4]
 800894a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800894c:	4613      	mov	r3, r2
 800894e:	00db      	lsls	r3, r3, #3
 8008950:	4413      	add	r3, r2
 8008952:	009b      	lsls	r3, r3, #2
 8008954:	440b      	add	r3, r1
 8008956:	3317      	adds	r3, #23
 8008958:	2201      	movs	r2, #1
 800895a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800895c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800895e:	b2db      	uxtb	r3, r3
 8008960:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008964:	b2db      	uxtb	r3, r3
 8008966:	4619      	mov	r1, r3
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 fac8 	bl	8008efe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800896e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008970:	3301      	adds	r3, #1
 8008972:	627b      	str	r3, [r7, #36]	@ 0x24
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	791b      	ldrb	r3, [r3, #4]
 8008978:	461a      	mov	r2, r3
 800897a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800897c:	4293      	cmp	r3, r2
 800897e:	d3cd      	bcc.n	800891c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	695a      	ldr	r2, [r3, #20]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800898e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4618      	mov	r0, r3
 8008996:	f005 faad 	bl	800def4 <USB_ReadInterrupts>
 800899a:	4603      	mov	r3, r0
 800899c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80089a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80089a4:	d156      	bne.n	8008a54 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80089a6:	2301      	movs	r3, #1
 80089a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80089aa:	e045      	b.n	8008a38 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80089ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ae:	015a      	lsls	r2, r3, #5
 80089b0:	69fb      	ldr	r3, [r7, #28]
 80089b2:	4413      	add	r3, r2
 80089b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80089bc:	6879      	ldr	r1, [r7, #4]
 80089be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089c0:	4613      	mov	r3, r2
 80089c2:	00db      	lsls	r3, r3, #3
 80089c4:	4413      	add	r3, r2
 80089c6:	009b      	lsls	r3, r3, #2
 80089c8:	440b      	add	r3, r1
 80089ca:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d12e      	bne.n	8008a32 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80089d4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	da2b      	bge.n	8008a32 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80089da:	69bb      	ldr	r3, [r7, #24]
 80089dc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80089e6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d121      	bne.n	8008a32 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80089ee:	6879      	ldr	r1, [r7, #4]
 80089f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089f2:	4613      	mov	r3, r2
 80089f4:	00db      	lsls	r3, r3, #3
 80089f6:	4413      	add	r3, r2
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	440b      	add	r3, r1
 80089fc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8008a00:	2201      	movs	r2, #1
 8008a02:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008a04:	6a3b      	ldr	r3, [r7, #32]
 8008a06:	699b      	ldr	r3, [r3, #24]
 8008a08:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008a0c:	6a3b      	ldr	r3, [r7, #32]
 8008a0e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008a10:	6a3b      	ldr	r3, [r7, #32]
 8008a12:	695b      	ldr	r3, [r3, #20]
 8008a14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d10a      	bne.n	8008a32 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008a1c:	69fb      	ldr	r3, [r7, #28]
 8008a1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	69fa      	ldr	r2, [r7, #28]
 8008a26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008a2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008a2e:	6053      	str	r3, [r2, #4]
            break;
 8008a30:	e008      	b.n	8008a44 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a34:	3301      	adds	r3, #1
 8008a36:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	791b      	ldrb	r3, [r3, #4]
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d3b3      	bcc.n	80089ac <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	695a      	ldr	r2, [r3, #20]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8008a52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f005 fa4b 	bl	800def4 <USB_ReadInterrupts>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008a64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a68:	d10a      	bne.n	8008a80 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f00d fcb2 	bl	80163d4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	695a      	ldr	r2, [r3, #20]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8008a7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4618      	mov	r0, r3
 8008a86:	f005 fa35 	bl	800def4 <USB_ReadInterrupts>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	f003 0304 	and.w	r3, r3, #4
 8008a90:	2b04      	cmp	r3, #4
 8008a92:	d115      	bne.n	8008ac0 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008a9c:	69bb      	ldr	r3, [r7, #24]
 8008a9e:	f003 0304 	and.w	r3, r3, #4
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d002      	beq.n	8008aac <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f00d fca2 	bl	80163f0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	6859      	ldr	r1, [r3, #4]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	69ba      	ldr	r2, [r7, #24]
 8008ab8:	430a      	orrs	r2, r1
 8008aba:	605a      	str	r2, [r3, #4]
 8008abc:	e000      	b.n	8008ac0 <HAL_PCD_IRQHandler+0x996>
      return;
 8008abe:	bf00      	nop
    }
  }
}
 8008ac0:	3734      	adds	r7, #52	@ 0x34
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd90      	pop	{r4, r7, pc}

08008ac6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008ac6:	b580      	push	{r7, lr}
 8008ac8:	b082      	sub	sp, #8
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
 8008ace:	460b      	mov	r3, r1
 8008ad0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d101      	bne.n	8008ae0 <HAL_PCD_SetAddress+0x1a>
 8008adc:	2302      	movs	r3, #2
 8008ade:	e012      	b.n	8008b06 <HAL_PCD_SetAddress+0x40>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	78fa      	ldrb	r2, [r7, #3]
 8008aec:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	78fa      	ldrb	r2, [r7, #3]
 8008af4:	4611      	mov	r1, r2
 8008af6:	4618      	mov	r0, r3
 8008af8:	f005 f994 	bl	800de24 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2200      	movs	r2, #0
 8008b00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008b04:	2300      	movs	r3, #0
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3708      	adds	r7, #8
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}

08008b0e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008b0e:	b580      	push	{r7, lr}
 8008b10:	b084      	sub	sp, #16
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	6078      	str	r0, [r7, #4]
 8008b16:	4608      	mov	r0, r1
 8008b18:	4611      	mov	r1, r2
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	70fb      	strb	r3, [r7, #3]
 8008b20:	460b      	mov	r3, r1
 8008b22:	803b      	strh	r3, [r7, #0]
 8008b24:	4613      	mov	r3, r2
 8008b26:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008b2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	da0f      	bge.n	8008b54 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b34:	78fb      	ldrb	r3, [r7, #3]
 8008b36:	f003 020f 	and.w	r2, r3, #15
 8008b3a:	4613      	mov	r3, r2
 8008b3c:	00db      	lsls	r3, r3, #3
 8008b3e:	4413      	add	r3, r2
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	3310      	adds	r3, #16
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	4413      	add	r3, r2
 8008b48:	3304      	adds	r3, #4
 8008b4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	705a      	strb	r2, [r3, #1]
 8008b52:	e00f      	b.n	8008b74 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008b54:	78fb      	ldrb	r3, [r7, #3]
 8008b56:	f003 020f 	and.w	r2, r3, #15
 8008b5a:	4613      	mov	r3, r2
 8008b5c:	00db      	lsls	r3, r3, #3
 8008b5e:	4413      	add	r3, r2
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	4413      	add	r3, r2
 8008b6a:	3304      	adds	r3, #4
 8008b6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2200      	movs	r2, #0
 8008b72:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008b74:	78fb      	ldrb	r3, [r7, #3]
 8008b76:	f003 030f 	and.w	r3, r3, #15
 8008b7a:	b2da      	uxtb	r2, r3
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008b80:	883a      	ldrh	r2, [r7, #0]
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	78ba      	ldrb	r2, [r7, #2]
 8008b8a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	785b      	ldrb	r3, [r3, #1]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d004      	beq.n	8008b9e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	461a      	mov	r2, r3
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008b9e:	78bb      	ldrb	r3, [r7, #2]
 8008ba0:	2b02      	cmp	r3, #2
 8008ba2:	d102      	bne.n	8008baa <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d101      	bne.n	8008bb8 <HAL_PCD_EP_Open+0xaa>
 8008bb4:	2302      	movs	r3, #2
 8008bb6:	e00e      	b.n	8008bd6 <HAL_PCD_EP_Open+0xc8>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	68f9      	ldr	r1, [r7, #12]
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f004 fb14 	bl	800d1f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8008bd4:	7afb      	ldrb	r3, [r7, #11]
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3710      	adds	r7, #16
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}

08008bde <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008bde:	b580      	push	{r7, lr}
 8008be0:	b084      	sub	sp, #16
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	6078      	str	r0, [r7, #4]
 8008be6:	460b      	mov	r3, r1
 8008be8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008bea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	da0f      	bge.n	8008c12 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008bf2:	78fb      	ldrb	r3, [r7, #3]
 8008bf4:	f003 020f 	and.w	r2, r3, #15
 8008bf8:	4613      	mov	r3, r2
 8008bfa:	00db      	lsls	r3, r3, #3
 8008bfc:	4413      	add	r3, r2
 8008bfe:	009b      	lsls	r3, r3, #2
 8008c00:	3310      	adds	r3, #16
 8008c02:	687a      	ldr	r2, [r7, #4]
 8008c04:	4413      	add	r3, r2
 8008c06:	3304      	adds	r3, #4
 8008c08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	705a      	strb	r2, [r3, #1]
 8008c10:	e00f      	b.n	8008c32 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008c12:	78fb      	ldrb	r3, [r7, #3]
 8008c14:	f003 020f 	and.w	r2, r3, #15
 8008c18:	4613      	mov	r3, r2
 8008c1a:	00db      	lsls	r3, r3, #3
 8008c1c:	4413      	add	r3, r2
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	4413      	add	r3, r2
 8008c28:	3304      	adds	r3, #4
 8008c2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8008c32:	78fb      	ldrb	r3, [r7, #3]
 8008c34:	f003 030f 	and.w	r3, r3, #15
 8008c38:	b2da      	uxtb	r2, r3
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d101      	bne.n	8008c4c <HAL_PCD_EP_Close+0x6e>
 8008c48:	2302      	movs	r3, #2
 8008c4a:	e00e      	b.n	8008c6a <HAL_PCD_EP_Close+0x8c>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	68f9      	ldr	r1, [r7, #12]
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f004 fb52 	bl	800d304 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8008c68:	2300      	movs	r3, #0
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3710      	adds	r7, #16
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008c72:	b580      	push	{r7, lr}
 8008c74:	b086      	sub	sp, #24
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	60f8      	str	r0, [r7, #12]
 8008c7a:	607a      	str	r2, [r7, #4]
 8008c7c:	603b      	str	r3, [r7, #0]
 8008c7e:	460b      	mov	r3, r1
 8008c80:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008c82:	7afb      	ldrb	r3, [r7, #11]
 8008c84:	f003 020f 	and.w	r2, r3, #15
 8008c88:	4613      	mov	r3, r2
 8008c8a:	00db      	lsls	r3, r3, #3
 8008c8c:	4413      	add	r3, r2
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008c94:	68fa      	ldr	r2, [r7, #12]
 8008c96:	4413      	add	r3, r2
 8008c98:	3304      	adds	r3, #4
 8008c9a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	683a      	ldr	r2, [r7, #0]
 8008ca6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	2200      	movs	r2, #0
 8008cac:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008cb4:	7afb      	ldrb	r3, [r7, #11]
 8008cb6:	f003 030f 	and.w	r3, r3, #15
 8008cba:	b2da      	uxtb	r2, r3
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	799b      	ldrb	r3, [r3, #6]
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d102      	bne.n	8008cce <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	6818      	ldr	r0, [r3, #0]
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	799b      	ldrb	r3, [r3, #6]
 8008cd6:	461a      	mov	r2, r3
 8008cd8:	6979      	ldr	r1, [r7, #20]
 8008cda:	f004 fbef 	bl	800d4bc <USB_EPStartXfer>

  return HAL_OK;
 8008cde:	2300      	movs	r3, #0
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3718      	adds	r7, #24
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008cf4:	78fb      	ldrb	r3, [r7, #3]
 8008cf6:	f003 020f 	and.w	r2, r3, #15
 8008cfa:	6879      	ldr	r1, [r7, #4]
 8008cfc:	4613      	mov	r3, r2
 8008cfe:	00db      	lsls	r3, r3, #3
 8008d00:	4413      	add	r3, r2
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	440b      	add	r3, r1
 8008d06:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8008d0a:	681b      	ldr	r3, [r3, #0]
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	370c      	adds	r7, #12
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr

08008d18 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b086      	sub	sp, #24
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	60f8      	str	r0, [r7, #12]
 8008d20:	607a      	str	r2, [r7, #4]
 8008d22:	603b      	str	r3, [r7, #0]
 8008d24:	460b      	mov	r3, r1
 8008d26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d28:	7afb      	ldrb	r3, [r7, #11]
 8008d2a:	f003 020f 	and.w	r2, r3, #15
 8008d2e:	4613      	mov	r3, r2
 8008d30:	00db      	lsls	r3, r3, #3
 8008d32:	4413      	add	r3, r2
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	3310      	adds	r3, #16
 8008d38:	68fa      	ldr	r2, [r7, #12]
 8008d3a:	4413      	add	r3, r2
 8008d3c:	3304      	adds	r3, #4
 8008d3e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	683a      	ldr	r2, [r7, #0]
 8008d4a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	2201      	movs	r2, #1
 8008d56:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008d58:	7afb      	ldrb	r3, [r7, #11]
 8008d5a:	f003 030f 	and.w	r3, r3, #15
 8008d5e:	b2da      	uxtb	r2, r3
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	799b      	ldrb	r3, [r3, #6]
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	d102      	bne.n	8008d72 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	6818      	ldr	r0, [r3, #0]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	799b      	ldrb	r3, [r3, #6]
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	6979      	ldr	r1, [r7, #20]
 8008d7e:	f004 fb9d 	bl	800d4bc <USB_EPStartXfer>

  return HAL_OK;
 8008d82:	2300      	movs	r3, #0
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3718      	adds	r7, #24
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	460b      	mov	r3, r1
 8008d96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008d98:	78fb      	ldrb	r3, [r7, #3]
 8008d9a:	f003 030f 	and.w	r3, r3, #15
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	7912      	ldrb	r2, [r2, #4]
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d901      	bls.n	8008daa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	e04f      	b.n	8008e4a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008daa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	da0f      	bge.n	8008dd2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008db2:	78fb      	ldrb	r3, [r7, #3]
 8008db4:	f003 020f 	and.w	r2, r3, #15
 8008db8:	4613      	mov	r3, r2
 8008dba:	00db      	lsls	r3, r3, #3
 8008dbc:	4413      	add	r3, r2
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	3310      	adds	r3, #16
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	4413      	add	r3, r2
 8008dc6:	3304      	adds	r3, #4
 8008dc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2201      	movs	r2, #1
 8008dce:	705a      	strb	r2, [r3, #1]
 8008dd0:	e00d      	b.n	8008dee <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008dd2:	78fa      	ldrb	r2, [r7, #3]
 8008dd4:	4613      	mov	r3, r2
 8008dd6:	00db      	lsls	r3, r3, #3
 8008dd8:	4413      	add	r3, r2
 8008dda:	009b      	lsls	r3, r3, #2
 8008ddc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	4413      	add	r3, r2
 8008de4:	3304      	adds	r3, #4
 8008de6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2200      	movs	r2, #0
 8008dec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2201      	movs	r2, #1
 8008df2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008df4:	78fb      	ldrb	r3, [r7, #3]
 8008df6:	f003 030f 	and.w	r3, r3, #15
 8008dfa:	b2da      	uxtb	r2, r3
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d101      	bne.n	8008e0e <HAL_PCD_EP_SetStall+0x82>
 8008e0a:	2302      	movs	r3, #2
 8008e0c:	e01d      	b.n	8008e4a <HAL_PCD_EP_SetStall+0xbe>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2201      	movs	r2, #1
 8008e12:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	68f9      	ldr	r1, [r7, #12]
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f004 ff2d 	bl	800dc7c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008e22:	78fb      	ldrb	r3, [r7, #3]
 8008e24:	f003 030f 	and.w	r3, r3, #15
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d109      	bne.n	8008e40 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6818      	ldr	r0, [r3, #0]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	7999      	ldrb	r1, [r3, #6]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	f005 f920 	bl	800e080 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2200      	movs	r2, #0
 8008e44:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}

08008e52 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008e52:	b580      	push	{r7, lr}
 8008e54:	b084      	sub	sp, #16
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	6078      	str	r0, [r7, #4]
 8008e5a:	460b      	mov	r3, r1
 8008e5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008e5e:	78fb      	ldrb	r3, [r7, #3]
 8008e60:	f003 030f 	and.w	r3, r3, #15
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	7912      	ldrb	r2, [r2, #4]
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d901      	bls.n	8008e70 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	e042      	b.n	8008ef6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008e70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	da0f      	bge.n	8008e98 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008e78:	78fb      	ldrb	r3, [r7, #3]
 8008e7a:	f003 020f 	and.w	r2, r3, #15
 8008e7e:	4613      	mov	r3, r2
 8008e80:	00db      	lsls	r3, r3, #3
 8008e82:	4413      	add	r3, r2
 8008e84:	009b      	lsls	r3, r3, #2
 8008e86:	3310      	adds	r3, #16
 8008e88:	687a      	ldr	r2, [r7, #4]
 8008e8a:	4413      	add	r3, r2
 8008e8c:	3304      	adds	r3, #4
 8008e8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2201      	movs	r2, #1
 8008e94:	705a      	strb	r2, [r3, #1]
 8008e96:	e00f      	b.n	8008eb8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008e98:	78fb      	ldrb	r3, [r7, #3]
 8008e9a:	f003 020f 	and.w	r2, r3, #15
 8008e9e:	4613      	mov	r3, r2
 8008ea0:	00db      	lsls	r3, r3, #3
 8008ea2:	4413      	add	r3, r2
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	4413      	add	r3, r2
 8008eae:	3304      	adds	r3, #4
 8008eb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008ebe:	78fb      	ldrb	r3, [r7, #3]
 8008ec0:	f003 030f 	and.w	r3, r3, #15
 8008ec4:	b2da      	uxtb	r2, r3
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d101      	bne.n	8008ed8 <HAL_PCD_EP_ClrStall+0x86>
 8008ed4:	2302      	movs	r3, #2
 8008ed6:	e00e      	b.n	8008ef6 <HAL_PCD_EP_ClrStall+0xa4>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2201      	movs	r2, #1
 8008edc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	68f9      	ldr	r1, [r7, #12]
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f004 ff36 	bl	800dd58 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008ef4:	2300      	movs	r3, #0
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3710      	adds	r7, #16
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}

08008efe <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008efe:	b580      	push	{r7, lr}
 8008f00:	b084      	sub	sp, #16
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
 8008f06:	460b      	mov	r3, r1
 8008f08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008f0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	da0c      	bge.n	8008f2c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008f12:	78fb      	ldrb	r3, [r7, #3]
 8008f14:	f003 020f 	and.w	r2, r3, #15
 8008f18:	4613      	mov	r3, r2
 8008f1a:	00db      	lsls	r3, r3, #3
 8008f1c:	4413      	add	r3, r2
 8008f1e:	009b      	lsls	r3, r3, #2
 8008f20:	3310      	adds	r3, #16
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	4413      	add	r3, r2
 8008f26:	3304      	adds	r3, #4
 8008f28:	60fb      	str	r3, [r7, #12]
 8008f2a:	e00c      	b.n	8008f46 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008f2c:	78fb      	ldrb	r3, [r7, #3]
 8008f2e:	f003 020f 	and.w	r2, r3, #15
 8008f32:	4613      	mov	r3, r2
 8008f34:	00db      	lsls	r3, r3, #3
 8008f36:	4413      	add	r3, r2
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	4413      	add	r3, r2
 8008f42:	3304      	adds	r3, #4
 8008f44:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	68f9      	ldr	r1, [r7, #12]
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f004 fd55 	bl	800d9fc <USB_EPStopXfer>
 8008f52:	4603      	mov	r3, r0
 8008f54:	72fb      	strb	r3, [r7, #11]

  return ret;
 8008f56:	7afb      	ldrb	r3, [r7, #11]
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3710      	adds	r7, #16
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b08a      	sub	sp, #40	@ 0x28
 8008f64:	af02      	add	r7, sp, #8
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008f74:	683a      	ldr	r2, [r7, #0]
 8008f76:	4613      	mov	r3, r2
 8008f78:	00db      	lsls	r3, r3, #3
 8008f7a:	4413      	add	r3, r2
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	3310      	adds	r3, #16
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	4413      	add	r3, r2
 8008f84:	3304      	adds	r3, #4
 8008f86:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	695a      	ldr	r2, [r3, #20]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	691b      	ldr	r3, [r3, #16]
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d901      	bls.n	8008f98 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008f94:	2301      	movs	r3, #1
 8008f96:	e06b      	b.n	8009070 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	691a      	ldr	r2, [r3, #16]
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	695b      	ldr	r3, [r3, #20]
 8008fa0:	1ad3      	subs	r3, r2, r3
 8008fa2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	689b      	ldr	r3, [r3, #8]
 8008fa8:	69fa      	ldr	r2, [r7, #28]
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d902      	bls.n	8008fb4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008fb4:	69fb      	ldr	r3, [r7, #28]
 8008fb6:	3303      	adds	r3, #3
 8008fb8:	089b      	lsrs	r3, r3, #2
 8008fba:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008fbc:	e02a      	b.n	8009014 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	691a      	ldr	r2, [r3, #16]
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	695b      	ldr	r3, [r3, #20]
 8008fc6:	1ad3      	subs	r3, r2, r3
 8008fc8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	689b      	ldr	r3, [r3, #8]
 8008fce:	69fa      	ldr	r2, [r7, #28]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d902      	bls.n	8008fda <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	689b      	ldr	r3, [r3, #8]
 8008fd8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008fda:	69fb      	ldr	r3, [r7, #28]
 8008fdc:	3303      	adds	r3, #3
 8008fde:	089b      	lsrs	r3, r3, #2
 8008fe0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	68d9      	ldr	r1, [r3, #12]
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	b2da      	uxtb	r2, r3
 8008fea:	69fb      	ldr	r3, [r7, #28]
 8008fec:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008ff2:	9300      	str	r3, [sp, #0]
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	6978      	ldr	r0, [r7, #20]
 8008ff8:	f004 fdaa 	bl	800db50 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	68da      	ldr	r2, [r3, #12]
 8009000:	69fb      	ldr	r3, [r7, #28]
 8009002:	441a      	add	r2, r3
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	695a      	ldr	r2, [r3, #20]
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	441a      	add	r2, r3
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	015a      	lsls	r2, r3, #5
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	4413      	add	r3, r2
 800901c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009020:	699b      	ldr	r3, [r3, #24]
 8009022:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009024:	69ba      	ldr	r2, [r7, #24]
 8009026:	429a      	cmp	r2, r3
 8009028:	d809      	bhi.n	800903e <PCD_WriteEmptyTxFifo+0xde>
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	695a      	ldr	r2, [r3, #20]
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009032:	429a      	cmp	r2, r3
 8009034:	d203      	bcs.n	800903e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	691b      	ldr	r3, [r3, #16]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d1bf      	bne.n	8008fbe <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	691a      	ldr	r2, [r3, #16]
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	695b      	ldr	r3, [r3, #20]
 8009046:	429a      	cmp	r2, r3
 8009048:	d811      	bhi.n	800906e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	f003 030f 	and.w	r3, r3, #15
 8009050:	2201      	movs	r2, #1
 8009052:	fa02 f303 	lsl.w	r3, r2, r3
 8009056:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800905e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	43db      	mvns	r3, r3
 8009064:	6939      	ldr	r1, [r7, #16]
 8009066:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800906a:	4013      	ands	r3, r2
 800906c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800906e:	2300      	movs	r3, #0
}
 8009070:	4618      	mov	r0, r3
 8009072:	3720      	adds	r7, #32
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}

08009078 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b088      	sub	sp, #32
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009088:	69fb      	ldr	r3, [r7, #28]
 800908a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800908c:	69fb      	ldr	r3, [r7, #28]
 800908e:	333c      	adds	r3, #60	@ 0x3c
 8009090:	3304      	adds	r3, #4
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	015a      	lsls	r2, r3, #5
 800909a:	69bb      	ldr	r3, [r7, #24]
 800909c:	4413      	add	r3, r2
 800909e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	799b      	ldrb	r3, [r3, #6]
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d17b      	bne.n	80091a6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	f003 0308 	and.w	r3, r3, #8
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d015      	beq.n	80090e4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	4a61      	ldr	r2, [pc, #388]	@ (8009240 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	f240 80b9 	bls.w	8009234 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	f000 80b3 	beq.w	8009234 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	015a      	lsls	r2, r3, #5
 80090d2:	69bb      	ldr	r3, [r7, #24]
 80090d4:	4413      	add	r3, r2
 80090d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090da:	461a      	mov	r2, r3
 80090dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80090e0:	6093      	str	r3, [r2, #8]
 80090e2:	e0a7      	b.n	8009234 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	f003 0320 	and.w	r3, r3, #32
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d009      	beq.n	8009102 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	015a      	lsls	r2, r3, #5
 80090f2:	69bb      	ldr	r3, [r7, #24]
 80090f4:	4413      	add	r3, r2
 80090f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090fa:	461a      	mov	r2, r3
 80090fc:	2320      	movs	r3, #32
 80090fe:	6093      	str	r3, [r2, #8]
 8009100:	e098      	b.n	8009234 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009108:	2b00      	cmp	r3, #0
 800910a:	f040 8093 	bne.w	8009234 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	4a4b      	ldr	r2, [pc, #300]	@ (8009240 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d90f      	bls.n	8009136 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800911c:	2b00      	cmp	r3, #0
 800911e:	d00a      	beq.n	8009136 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	015a      	lsls	r2, r3, #5
 8009124:	69bb      	ldr	r3, [r7, #24]
 8009126:	4413      	add	r3, r2
 8009128:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800912c:	461a      	mov	r2, r3
 800912e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009132:	6093      	str	r3, [r2, #8]
 8009134:	e07e      	b.n	8009234 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8009136:	683a      	ldr	r2, [r7, #0]
 8009138:	4613      	mov	r3, r2
 800913a:	00db      	lsls	r3, r3, #3
 800913c:	4413      	add	r3, r2
 800913e:	009b      	lsls	r3, r3, #2
 8009140:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009144:	687a      	ldr	r2, [r7, #4]
 8009146:	4413      	add	r3, r2
 8009148:	3304      	adds	r3, #4
 800914a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	6a1a      	ldr	r2, [r3, #32]
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	0159      	lsls	r1, r3, #5
 8009154:	69bb      	ldr	r3, [r7, #24]
 8009156:	440b      	add	r3, r1
 8009158:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800915c:	691b      	ldr	r3, [r3, #16]
 800915e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009162:	1ad2      	subs	r2, r2, r3
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d114      	bne.n	8009198 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	691b      	ldr	r3, [r3, #16]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d109      	bne.n	800918a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6818      	ldr	r0, [r3, #0]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009180:	461a      	mov	r2, r3
 8009182:	2101      	movs	r1, #1
 8009184:	f004 ff7c 	bl	800e080 <USB_EP0_OutStart>
 8009188:	e006      	b.n	8009198 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	68da      	ldr	r2, [r3, #12]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	695b      	ldr	r3, [r3, #20]
 8009192:	441a      	add	r2, r3
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	b2db      	uxtb	r3, r3
 800919c:	4619      	mov	r1, r3
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f00d f854 	bl	801624c <HAL_PCD_DataOutStageCallback>
 80091a4:	e046      	b.n	8009234 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	4a26      	ldr	r2, [pc, #152]	@ (8009244 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d124      	bne.n	80091f8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d00a      	beq.n	80091ce <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	015a      	lsls	r2, r3, #5
 80091bc:	69bb      	ldr	r3, [r7, #24]
 80091be:	4413      	add	r3, r2
 80091c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091c4:	461a      	mov	r2, r3
 80091c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091ca:	6093      	str	r3, [r2, #8]
 80091cc:	e032      	b.n	8009234 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	f003 0320 	and.w	r3, r3, #32
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d008      	beq.n	80091ea <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	015a      	lsls	r2, r3, #5
 80091dc:	69bb      	ldr	r3, [r7, #24]
 80091de:	4413      	add	r3, r2
 80091e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091e4:	461a      	mov	r2, r3
 80091e6:	2320      	movs	r3, #32
 80091e8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	4619      	mov	r1, r3
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f00d f82b 	bl	801624c <HAL_PCD_DataOutStageCallback>
 80091f6:	e01d      	b.n	8009234 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d114      	bne.n	8009228 <PCD_EP_OutXfrComplete_int+0x1b0>
 80091fe:	6879      	ldr	r1, [r7, #4]
 8009200:	683a      	ldr	r2, [r7, #0]
 8009202:	4613      	mov	r3, r2
 8009204:	00db      	lsls	r3, r3, #3
 8009206:	4413      	add	r3, r2
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	440b      	add	r3, r1
 800920c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d108      	bne.n	8009228 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6818      	ldr	r0, [r3, #0]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009220:	461a      	mov	r2, r3
 8009222:	2100      	movs	r1, #0
 8009224:	f004 ff2c 	bl	800e080 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	b2db      	uxtb	r3, r3
 800922c:	4619      	mov	r1, r3
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f00d f80c 	bl	801624c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009234:	2300      	movs	r3, #0
}
 8009236:	4618      	mov	r0, r3
 8009238:	3720      	adds	r7, #32
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
 800923e:	bf00      	nop
 8009240:	4f54300a 	.word	0x4f54300a
 8009244:	4f54310a 	.word	0x4f54310a

08009248 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b086      	sub	sp, #24
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	333c      	adds	r3, #60	@ 0x3c
 8009260:	3304      	adds	r3, #4
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	015a      	lsls	r2, r3, #5
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	4413      	add	r3, r2
 800926e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	4a15      	ldr	r2, [pc, #84]	@ (80092d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d90e      	bls.n	800929c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009284:	2b00      	cmp	r3, #0
 8009286:	d009      	beq.n	800929c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	015a      	lsls	r2, r3, #5
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	4413      	add	r3, r2
 8009290:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009294:	461a      	mov	r2, r3
 8009296:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800929a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f00c ffc3 	bl	8016228 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	4a0a      	ldr	r2, [pc, #40]	@ (80092d0 <PCD_EP_OutSetupPacket_int+0x88>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d90c      	bls.n	80092c4 <PCD_EP_OutSetupPacket_int+0x7c>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	799b      	ldrb	r3, [r3, #6]
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	d108      	bne.n	80092c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6818      	ldr	r0, [r3, #0]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80092bc:	461a      	mov	r2, r3
 80092be:	2101      	movs	r1, #1
 80092c0:	f004 fede 	bl	800e080 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3718      	adds	r7, #24
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	4f54300a 	.word	0x4f54300a

080092d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b085      	sub	sp, #20
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	460b      	mov	r3, r1
 80092de:	70fb      	strb	r3, [r7, #3]
 80092e0:	4613      	mov	r3, r2
 80092e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80092ec:	78fb      	ldrb	r3, [r7, #3]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d107      	bne.n	8009302 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80092f2:	883b      	ldrh	r3, [r7, #0]
 80092f4:	0419      	lsls	r1, r3, #16
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	68ba      	ldr	r2, [r7, #8]
 80092fc:	430a      	orrs	r2, r1
 80092fe:	629a      	str	r2, [r3, #40]	@ 0x28
 8009300:	e028      	b.n	8009354 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009308:	0c1b      	lsrs	r3, r3, #16
 800930a:	68ba      	ldr	r2, [r7, #8]
 800930c:	4413      	add	r3, r2
 800930e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009310:	2300      	movs	r3, #0
 8009312:	73fb      	strb	r3, [r7, #15]
 8009314:	e00d      	b.n	8009332 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	7bfb      	ldrb	r3, [r7, #15]
 800931c:	3340      	adds	r3, #64	@ 0x40
 800931e:	009b      	lsls	r3, r3, #2
 8009320:	4413      	add	r3, r2
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	0c1b      	lsrs	r3, r3, #16
 8009326:	68ba      	ldr	r2, [r7, #8]
 8009328:	4413      	add	r3, r2
 800932a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800932c:	7bfb      	ldrb	r3, [r7, #15]
 800932e:	3301      	adds	r3, #1
 8009330:	73fb      	strb	r3, [r7, #15]
 8009332:	7bfa      	ldrb	r2, [r7, #15]
 8009334:	78fb      	ldrb	r3, [r7, #3]
 8009336:	3b01      	subs	r3, #1
 8009338:	429a      	cmp	r2, r3
 800933a:	d3ec      	bcc.n	8009316 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800933c:	883b      	ldrh	r3, [r7, #0]
 800933e:	0418      	lsls	r0, r3, #16
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6819      	ldr	r1, [r3, #0]
 8009344:	78fb      	ldrb	r3, [r7, #3]
 8009346:	3b01      	subs	r3, #1
 8009348:	68ba      	ldr	r2, [r7, #8]
 800934a:	4302      	orrs	r2, r0
 800934c:	3340      	adds	r3, #64	@ 0x40
 800934e:	009b      	lsls	r3, r3, #2
 8009350:	440b      	add	r3, r1
 8009352:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009354:	2300      	movs	r3, #0
}
 8009356:	4618      	mov	r0, r3
 8009358:	3714      	adds	r7, #20
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr

08009362 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009362:	b480      	push	{r7}
 8009364:	b083      	sub	sp, #12
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
 800936a:	460b      	mov	r3, r1
 800936c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	887a      	ldrh	r2, [r7, #2]
 8009374:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8009376:	2300      	movs	r3, #0
}
 8009378:	4618      	mov	r0, r3
 800937a:	370c      	adds	r7, #12
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr

08009384 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009384:	b480      	push	{r7}
 8009386:	b085      	sub	sp, #20
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2201      	movs	r2, #1
 8009396:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2200      	movs	r2, #0
 800939e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	699b      	ldr	r3, [r3, #24]
 80093a6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80093b2:	4b05      	ldr	r3, [pc, #20]	@ (80093c8 <HAL_PCDEx_ActivateLPM+0x44>)
 80093b4:	4313      	orrs	r3, r2
 80093b6:	68fa      	ldr	r2, [r7, #12]
 80093b8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80093ba:	2300      	movs	r3, #0
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3714      	adds	r7, #20
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr
 80093c8:	10000003 	.word	0x10000003

080093cc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b083      	sub	sp, #12
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	460b      	mov	r3, r1
 80093d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80093d8:	bf00      	nop
 80093da:	370c      	adds	r7, #12
 80093dc:	46bd      	mov	sp, r7
 80093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e2:	4770      	bx	lr

080093e4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80093e4:	b480      	push	{r7}
 80093e6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80093e8:	4b05      	ldr	r3, [pc, #20]	@ (8009400 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80093ea:	68db      	ldr	r3, [r3, #12]
 80093ec:	4a04      	ldr	r2, [pc, #16]	@ (8009400 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80093ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80093f2:	60d3      	str	r3, [r2, #12]
}
 80093f4:	bf00      	nop
 80093f6:	46bd      	mov	sp, r7
 80093f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fc:	4770      	bx	lr
 80093fe:	bf00      	nop
 8009400:	58024800 	.word	0x58024800

08009404 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009404:	b480      	push	{r7}
 8009406:	b089      	sub	sp, #36	@ 0x24
 8009408:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800940a:	4bb3      	ldr	r3, [pc, #716]	@ (80096d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800940c:	691b      	ldr	r3, [r3, #16]
 800940e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009412:	2b18      	cmp	r3, #24
 8009414:	f200 8155 	bhi.w	80096c2 <HAL_RCC_GetSysClockFreq+0x2be>
 8009418:	a201      	add	r2, pc, #4	@ (adr r2, 8009420 <HAL_RCC_GetSysClockFreq+0x1c>)
 800941a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800941e:	bf00      	nop
 8009420:	08009485 	.word	0x08009485
 8009424:	080096c3 	.word	0x080096c3
 8009428:	080096c3 	.word	0x080096c3
 800942c:	080096c3 	.word	0x080096c3
 8009430:	080096c3 	.word	0x080096c3
 8009434:	080096c3 	.word	0x080096c3
 8009438:	080096c3 	.word	0x080096c3
 800943c:	080096c3 	.word	0x080096c3
 8009440:	080094ab 	.word	0x080094ab
 8009444:	080096c3 	.word	0x080096c3
 8009448:	080096c3 	.word	0x080096c3
 800944c:	080096c3 	.word	0x080096c3
 8009450:	080096c3 	.word	0x080096c3
 8009454:	080096c3 	.word	0x080096c3
 8009458:	080096c3 	.word	0x080096c3
 800945c:	080096c3 	.word	0x080096c3
 8009460:	080094b1 	.word	0x080094b1
 8009464:	080096c3 	.word	0x080096c3
 8009468:	080096c3 	.word	0x080096c3
 800946c:	080096c3 	.word	0x080096c3
 8009470:	080096c3 	.word	0x080096c3
 8009474:	080096c3 	.word	0x080096c3
 8009478:	080096c3 	.word	0x080096c3
 800947c:	080096c3 	.word	0x080096c3
 8009480:	080094b7 	.word	0x080094b7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009484:	4b94      	ldr	r3, [pc, #592]	@ (80096d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f003 0320 	and.w	r3, r3, #32
 800948c:	2b00      	cmp	r3, #0
 800948e:	d009      	beq.n	80094a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009490:	4b91      	ldr	r3, [pc, #580]	@ (80096d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	08db      	lsrs	r3, r3, #3
 8009496:	f003 0303 	and.w	r3, r3, #3
 800949a:	4a90      	ldr	r2, [pc, #576]	@ (80096dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800949c:	fa22 f303 	lsr.w	r3, r2, r3
 80094a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80094a2:	e111      	b.n	80096c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80094a4:	4b8d      	ldr	r3, [pc, #564]	@ (80096dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80094a6:	61bb      	str	r3, [r7, #24]
      break;
 80094a8:	e10e      	b.n	80096c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80094aa:	4b8d      	ldr	r3, [pc, #564]	@ (80096e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80094ac:	61bb      	str	r3, [r7, #24]
      break;
 80094ae:	e10b      	b.n	80096c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80094b0:	4b8c      	ldr	r3, [pc, #560]	@ (80096e4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80094b2:	61bb      	str	r3, [r7, #24]
      break;
 80094b4:	e108      	b.n	80096c8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80094b6:	4b88      	ldr	r3, [pc, #544]	@ (80096d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094ba:	f003 0303 	and.w	r3, r3, #3
 80094be:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80094c0:	4b85      	ldr	r3, [pc, #532]	@ (80096d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094c4:	091b      	lsrs	r3, r3, #4
 80094c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80094ca:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80094cc:	4b82      	ldr	r3, [pc, #520]	@ (80096d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094d0:	f003 0301 	and.w	r3, r3, #1
 80094d4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80094d6:	4b80      	ldr	r3, [pc, #512]	@ (80096d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094da:	08db      	lsrs	r3, r3, #3
 80094dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80094e0:	68fa      	ldr	r2, [r7, #12]
 80094e2:	fb02 f303 	mul.w	r3, r2, r3
 80094e6:	ee07 3a90 	vmov	s15, r3
 80094ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094ee:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	f000 80e1 	beq.w	80096bc <HAL_RCC_GetSysClockFreq+0x2b8>
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	2b02      	cmp	r3, #2
 80094fe:	f000 8083 	beq.w	8009608 <HAL_RCC_GetSysClockFreq+0x204>
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	2b02      	cmp	r3, #2
 8009506:	f200 80a1 	bhi.w	800964c <HAL_RCC_GetSysClockFreq+0x248>
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d003      	beq.n	8009518 <HAL_RCC_GetSysClockFreq+0x114>
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	2b01      	cmp	r3, #1
 8009514:	d056      	beq.n	80095c4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009516:	e099      	b.n	800964c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009518:	4b6f      	ldr	r3, [pc, #444]	@ (80096d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f003 0320 	and.w	r3, r3, #32
 8009520:	2b00      	cmp	r3, #0
 8009522:	d02d      	beq.n	8009580 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009524:	4b6c      	ldr	r3, [pc, #432]	@ (80096d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	08db      	lsrs	r3, r3, #3
 800952a:	f003 0303 	and.w	r3, r3, #3
 800952e:	4a6b      	ldr	r2, [pc, #428]	@ (80096dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009530:	fa22 f303 	lsr.w	r3, r2, r3
 8009534:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	ee07 3a90 	vmov	s15, r3
 800953c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	ee07 3a90 	vmov	s15, r3
 8009546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800954a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800954e:	4b62      	ldr	r3, [pc, #392]	@ (80096d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009556:	ee07 3a90 	vmov	s15, r3
 800955a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800955e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009562:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80096e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800956a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800956e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800957a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800957e:	e087      	b.n	8009690 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	ee07 3a90 	vmov	s15, r3
 8009586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800958a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80096ec <HAL_RCC_GetSysClockFreq+0x2e8>
 800958e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009592:	4b51      	ldr	r3, [pc, #324]	@ (80096d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800959a:	ee07 3a90 	vmov	s15, r3
 800959e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80095a6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80096e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80095aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80095b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80095c2:	e065      	b.n	8009690 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	ee07 3a90 	vmov	s15, r3
 80095ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ce:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80096f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80095d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095d6:	4b40      	ldr	r3, [pc, #256]	@ (80096d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095de:	ee07 3a90 	vmov	s15, r3
 80095e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80095ea:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80096e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80095ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80095fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009602:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009606:	e043      	b.n	8009690 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	ee07 3a90 	vmov	s15, r3
 800960e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009612:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80096f4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800961a:	4b2f      	ldr	r3, [pc, #188]	@ (80096d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800961c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800961e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009622:	ee07 3a90 	vmov	s15, r3
 8009626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800962a:	ed97 6a02 	vldr	s12, [r7, #8]
 800962e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80096e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800963a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800963e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009646:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800964a:	e021      	b.n	8009690 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	ee07 3a90 	vmov	s15, r3
 8009652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009656:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80096f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800965a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800965e:	4b1e      	ldr	r3, [pc, #120]	@ (80096d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009666:	ee07 3a90 	vmov	s15, r3
 800966a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800966e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009672:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80096e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800967a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800967e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800968a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800968e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009690:	4b11      	ldr	r3, [pc, #68]	@ (80096d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009694:	0a5b      	lsrs	r3, r3, #9
 8009696:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800969a:	3301      	adds	r3, #1
 800969c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	ee07 3a90 	vmov	s15, r3
 80096a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80096a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80096ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096b4:	ee17 3a90 	vmov	r3, s15
 80096b8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80096ba:	e005      	b.n	80096c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80096bc:	2300      	movs	r3, #0
 80096be:	61bb      	str	r3, [r7, #24]
      break;
 80096c0:	e002      	b.n	80096c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80096c2:	4b07      	ldr	r3, [pc, #28]	@ (80096e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80096c4:	61bb      	str	r3, [r7, #24]
      break;
 80096c6:	bf00      	nop
  }

  return sysclockfreq;
 80096c8:	69bb      	ldr	r3, [r7, #24]
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3724      	adds	r7, #36	@ 0x24
 80096ce:	46bd      	mov	sp, r7
 80096d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d4:	4770      	bx	lr
 80096d6:	bf00      	nop
 80096d8:	58024400 	.word	0x58024400
 80096dc:	03d09000 	.word	0x03d09000
 80096e0:	003d0900 	.word	0x003d0900
 80096e4:	017d7840 	.word	0x017d7840
 80096e8:	46000000 	.word	0x46000000
 80096ec:	4c742400 	.word	0x4c742400
 80096f0:	4a742400 	.word	0x4a742400
 80096f4:	4bbebc20 	.word	0x4bbebc20

080096f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b082      	sub	sp, #8
 80096fc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80096fe:	f7ff fe81 	bl	8009404 <HAL_RCC_GetSysClockFreq>
 8009702:	4602      	mov	r2, r0
 8009704:	4b10      	ldr	r3, [pc, #64]	@ (8009748 <HAL_RCC_GetHCLKFreq+0x50>)
 8009706:	699b      	ldr	r3, [r3, #24]
 8009708:	0a1b      	lsrs	r3, r3, #8
 800970a:	f003 030f 	and.w	r3, r3, #15
 800970e:	490f      	ldr	r1, [pc, #60]	@ (800974c <HAL_RCC_GetHCLKFreq+0x54>)
 8009710:	5ccb      	ldrb	r3, [r1, r3]
 8009712:	f003 031f 	and.w	r3, r3, #31
 8009716:	fa22 f303 	lsr.w	r3, r2, r3
 800971a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800971c:	4b0a      	ldr	r3, [pc, #40]	@ (8009748 <HAL_RCC_GetHCLKFreq+0x50>)
 800971e:	699b      	ldr	r3, [r3, #24]
 8009720:	f003 030f 	and.w	r3, r3, #15
 8009724:	4a09      	ldr	r2, [pc, #36]	@ (800974c <HAL_RCC_GetHCLKFreq+0x54>)
 8009726:	5cd3      	ldrb	r3, [r2, r3]
 8009728:	f003 031f 	and.w	r3, r3, #31
 800972c:	687a      	ldr	r2, [r7, #4]
 800972e:	fa22 f303 	lsr.w	r3, r2, r3
 8009732:	4a07      	ldr	r2, [pc, #28]	@ (8009750 <HAL_RCC_GetHCLKFreq+0x58>)
 8009734:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009736:	4a07      	ldr	r2, [pc, #28]	@ (8009754 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800973c:	4b04      	ldr	r3, [pc, #16]	@ (8009750 <HAL_RCC_GetHCLKFreq+0x58>)
 800973e:	681b      	ldr	r3, [r3, #0]
}
 8009740:	4618      	mov	r0, r3
 8009742:	3708      	adds	r7, #8
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}
 8009748:	58024400 	.word	0x58024400
 800974c:	0801e3b4 	.word	0x0801e3b4
 8009750:	24000144 	.word	0x24000144
 8009754:	24000140 	.word	0x24000140

08009758 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800975c:	f7ff ffcc 	bl	80096f8 <HAL_RCC_GetHCLKFreq>
 8009760:	4602      	mov	r2, r0
 8009762:	4b06      	ldr	r3, [pc, #24]	@ (800977c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009764:	69db      	ldr	r3, [r3, #28]
 8009766:	091b      	lsrs	r3, r3, #4
 8009768:	f003 0307 	and.w	r3, r3, #7
 800976c:	4904      	ldr	r1, [pc, #16]	@ (8009780 <HAL_RCC_GetPCLK1Freq+0x28>)
 800976e:	5ccb      	ldrb	r3, [r1, r3]
 8009770:	f003 031f 	and.w	r3, r3, #31
 8009774:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009778:	4618      	mov	r0, r3
 800977a:	bd80      	pop	{r7, pc}
 800977c:	58024400 	.word	0x58024400
 8009780:	0801e3b4 	.word	0x0801e3b4

08009784 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009788:	f7ff ffb6 	bl	80096f8 <HAL_RCC_GetHCLKFreq>
 800978c:	4602      	mov	r2, r0
 800978e:	4b06      	ldr	r3, [pc, #24]	@ (80097a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009790:	69db      	ldr	r3, [r3, #28]
 8009792:	0a1b      	lsrs	r3, r3, #8
 8009794:	f003 0307 	and.w	r3, r3, #7
 8009798:	4904      	ldr	r1, [pc, #16]	@ (80097ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800979a:	5ccb      	ldrb	r3, [r1, r3]
 800979c:	f003 031f 	and.w	r3, r3, #31
 80097a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	bd80      	pop	{r7, pc}
 80097a8:	58024400 	.word	0x58024400
 80097ac:	0801e3b4 	.word	0x0801e3b4

080097b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b090      	sub	sp, #64	@ 0x40
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80097ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097be:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80097c2:	430b      	orrs	r3, r1
 80097c4:	f040 8094 	bne.w	80098f0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80097c8:	4b9e      	ldr	r3, [pc, #632]	@ (8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80097ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097cc:	f003 0307 	and.w	r3, r3, #7
 80097d0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80097d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097d4:	2b04      	cmp	r3, #4
 80097d6:	f200 8087 	bhi.w	80098e8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80097da:	a201      	add	r2, pc, #4	@ (adr r2, 80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80097dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097e0:	080097f5 	.word	0x080097f5
 80097e4:	0800981d 	.word	0x0800981d
 80097e8:	08009845 	.word	0x08009845
 80097ec:	080098e1 	.word	0x080098e1
 80097f0:	0800986d 	.word	0x0800986d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80097f4:	4b93      	ldr	r3, [pc, #588]	@ (8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80097fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009800:	d108      	bne.n	8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009802:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009806:	4618      	mov	r0, r3
 8009808:	f001 f810 	bl	800a82c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800980c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800980e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009810:	f000 bd45 	b.w	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009814:	2300      	movs	r3, #0
 8009816:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009818:	f000 bd41 	b.w	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800981c:	4b89      	ldr	r3, [pc, #548]	@ (8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009824:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009828:	d108      	bne.n	800983c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800982a:	f107 0318 	add.w	r3, r7, #24
 800982e:	4618      	mov	r0, r3
 8009830:	f000 fd54 	bl	800a2dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009834:	69bb      	ldr	r3, [r7, #24]
 8009836:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009838:	f000 bd31 	b.w	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800983c:	2300      	movs	r3, #0
 800983e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009840:	f000 bd2d 	b.w	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009844:	4b7f      	ldr	r3, [pc, #508]	@ (8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800984c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009850:	d108      	bne.n	8009864 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009852:	f107 030c 	add.w	r3, r7, #12
 8009856:	4618      	mov	r0, r3
 8009858:	f000 fe94 	bl	800a584 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009860:	f000 bd1d 	b.w	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009864:	2300      	movs	r3, #0
 8009866:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009868:	f000 bd19 	b.w	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800986c:	4b75      	ldr	r3, [pc, #468]	@ (8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800986e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009870:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009874:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009876:	4b73      	ldr	r3, [pc, #460]	@ (8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f003 0304 	and.w	r3, r3, #4
 800987e:	2b04      	cmp	r3, #4
 8009880:	d10c      	bne.n	800989c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009884:	2b00      	cmp	r3, #0
 8009886:	d109      	bne.n	800989c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009888:	4b6e      	ldr	r3, [pc, #440]	@ (8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	08db      	lsrs	r3, r3, #3
 800988e:	f003 0303 	and.w	r3, r3, #3
 8009892:	4a6d      	ldr	r2, [pc, #436]	@ (8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009894:	fa22 f303 	lsr.w	r3, r2, r3
 8009898:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800989a:	e01f      	b.n	80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800989c:	4b69      	ldr	r3, [pc, #420]	@ (8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098a8:	d106      	bne.n	80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80098aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80098b0:	d102      	bne.n	80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80098b2:	4b66      	ldr	r3, [pc, #408]	@ (8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80098b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80098b6:	e011      	b.n	80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80098b8:	4b62      	ldr	r3, [pc, #392]	@ (8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098c4:	d106      	bne.n	80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80098c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098cc:	d102      	bne.n	80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80098ce:	4b60      	ldr	r3, [pc, #384]	@ (8009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80098d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80098d2:	e003      	b.n	80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80098d4:	2300      	movs	r3, #0
 80098d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80098d8:	f000 bce1 	b.w	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80098dc:	f000 bcdf 	b.w	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80098e0:	4b5c      	ldr	r3, [pc, #368]	@ (8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80098e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098e4:	f000 bcdb 	b.w	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80098e8:	2300      	movs	r3, #0
 80098ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098ec:	f000 bcd7 	b.w	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80098f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098f4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80098f8:	430b      	orrs	r3, r1
 80098fa:	f040 80ad 	bne.w	8009a58 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80098fe:	4b51      	ldr	r3, [pc, #324]	@ (8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009900:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009902:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009906:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800990a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800990e:	d056      	beq.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8009910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009912:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009916:	f200 8090 	bhi.w	8009a3a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800991a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800991c:	2bc0      	cmp	r3, #192	@ 0xc0
 800991e:	f000 8088 	beq.w	8009a32 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8009922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009924:	2bc0      	cmp	r3, #192	@ 0xc0
 8009926:	f200 8088 	bhi.w	8009a3a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800992a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800992c:	2b80      	cmp	r3, #128	@ 0x80
 800992e:	d032      	beq.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009932:	2b80      	cmp	r3, #128	@ 0x80
 8009934:	f200 8081 	bhi.w	8009a3a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800993a:	2b00      	cmp	r3, #0
 800993c:	d003      	beq.n	8009946 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800993e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009940:	2b40      	cmp	r3, #64	@ 0x40
 8009942:	d014      	beq.n	800996e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8009944:	e079      	b.n	8009a3a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009946:	4b3f      	ldr	r3, [pc, #252]	@ (8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800994e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009952:	d108      	bne.n	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009954:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009958:	4618      	mov	r0, r3
 800995a:	f000 ff67 	bl	800a82c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800995e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009960:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009962:	f000 bc9c 	b.w	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009966:	2300      	movs	r3, #0
 8009968:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800996a:	f000 bc98 	b.w	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800996e:	4b35      	ldr	r3, [pc, #212]	@ (8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009976:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800997a:	d108      	bne.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800997c:	f107 0318 	add.w	r3, r7, #24
 8009980:	4618      	mov	r0, r3
 8009982:	f000 fcab 	bl	800a2dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009986:	69bb      	ldr	r3, [r7, #24]
 8009988:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800998a:	f000 bc88 	b.w	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800998e:	2300      	movs	r3, #0
 8009990:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009992:	f000 bc84 	b.w	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009996:	4b2b      	ldr	r3, [pc, #172]	@ (8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800999e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099a2:	d108      	bne.n	80099b6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099a4:	f107 030c 	add.w	r3, r7, #12
 80099a8:	4618      	mov	r0, r3
 80099aa:	f000 fdeb 	bl	800a584 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099b2:	f000 bc74 	b.w	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80099b6:	2300      	movs	r3, #0
 80099b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099ba:	f000 bc70 	b.w	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80099be:	4b21      	ldr	r3, [pc, #132]	@ (8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80099c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80099c6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80099c8:	4b1e      	ldr	r3, [pc, #120]	@ (8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f003 0304 	and.w	r3, r3, #4
 80099d0:	2b04      	cmp	r3, #4
 80099d2:	d10c      	bne.n	80099ee <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80099d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d109      	bne.n	80099ee <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80099da:	4b1a      	ldr	r3, [pc, #104]	@ (8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	08db      	lsrs	r3, r3, #3
 80099e0:	f003 0303 	and.w	r3, r3, #3
 80099e4:	4a18      	ldr	r2, [pc, #96]	@ (8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80099e6:	fa22 f303 	lsr.w	r3, r2, r3
 80099ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80099ec:	e01f      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80099ee:	4b15      	ldr	r3, [pc, #84]	@ (8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80099fa:	d106      	bne.n	8009a0a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80099fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a02:	d102      	bne.n	8009a0a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009a04:	4b11      	ldr	r3, [pc, #68]	@ (8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a08:	e011      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a16:	d106      	bne.n	8009a26 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8009a18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a1e:	d102      	bne.n	8009a26 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009a20:	4b0b      	ldr	r3, [pc, #44]	@ (8009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a24:	e003      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009a26:	2300      	movs	r3, #0
 8009a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009a2a:	f000 bc38 	b.w	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009a2e:	f000 bc36 	b.w	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009a32:	4b08      	ldr	r3, [pc, #32]	@ (8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a36:	f000 bc32 	b.w	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a3e:	f000 bc2e 	b.w	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009a42:	bf00      	nop
 8009a44:	58024400 	.word	0x58024400
 8009a48:	03d09000 	.word	0x03d09000
 8009a4c:	003d0900 	.word	0x003d0900
 8009a50:	017d7840 	.word	0x017d7840
 8009a54:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009a58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a5c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009a60:	430b      	orrs	r3, r1
 8009a62:	f040 809c 	bne.w	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8009a66:	4b9e      	ldr	r3, [pc, #632]	@ (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a6a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8009a6e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a72:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009a76:	d054      	beq.n	8009b22 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a7a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009a7e:	f200 808b 	bhi.w	8009b98 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a84:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009a88:	f000 8083 	beq.w	8009b92 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a8e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009a92:	f200 8081 	bhi.w	8009b98 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009a9c:	d02f      	beq.n	8009afe <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8009a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aa0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009aa4:	d878      	bhi.n	8009b98 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d004      	beq.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009ab2:	d012      	beq.n	8009ada <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009ab4:	e070      	b.n	8009b98 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009ab6:	4b8a      	ldr	r3, [pc, #552]	@ (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009abe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009ac2:	d107      	bne.n	8009ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ac4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f000 feaf 	bl	800a82c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ad2:	e3e4      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ad8:	e3e1      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009ada:	4b81      	ldr	r3, [pc, #516]	@ (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ae2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ae6:	d107      	bne.n	8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ae8:	f107 0318 	add.w	r3, r7, #24
 8009aec:	4618      	mov	r0, r3
 8009aee:	f000 fbf5 	bl	800a2dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009af2:	69bb      	ldr	r3, [r7, #24]
 8009af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009af6:	e3d2      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009af8:	2300      	movs	r3, #0
 8009afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009afc:	e3cf      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009afe:	4b78      	ldr	r3, [pc, #480]	@ (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b0a:	d107      	bne.n	8009b1c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b0c:	f107 030c 	add.w	r3, r7, #12
 8009b10:	4618      	mov	r0, r3
 8009b12:	f000 fd37 	bl	800a584 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b1a:	e3c0      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b20:	e3bd      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009b22:	4b6f      	ldr	r3, [pc, #444]	@ (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b26:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009b2a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009b2c:	4b6c      	ldr	r3, [pc, #432]	@ (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f003 0304 	and.w	r3, r3, #4
 8009b34:	2b04      	cmp	r3, #4
 8009b36:	d10c      	bne.n	8009b52 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009b38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d109      	bne.n	8009b52 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b3e:	4b68      	ldr	r3, [pc, #416]	@ (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	08db      	lsrs	r3, r3, #3
 8009b44:	f003 0303 	and.w	r3, r3, #3
 8009b48:	4a66      	ldr	r2, [pc, #408]	@ (8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8009b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b50:	e01e      	b.n	8009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009b52:	4b63      	ldr	r3, [pc, #396]	@ (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b5e:	d106      	bne.n	8009b6e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009b60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b66:	d102      	bne.n	8009b6e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009b68:	4b5f      	ldr	r3, [pc, #380]	@ (8009ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b6c:	e010      	b.n	8009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009b6e:	4b5c      	ldr	r3, [pc, #368]	@ (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b7a:	d106      	bne.n	8009b8a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009b7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b82:	d102      	bne.n	8009b8a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009b84:	4b59      	ldr	r3, [pc, #356]	@ (8009cec <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b88:	e002      	b.n	8009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009b8e:	e386      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009b90:	e385      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009b92:	4b57      	ldr	r3, [pc, #348]	@ (8009cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b96:	e382      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b9c:	e37f      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009b9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ba2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8009ba6:	430b      	orrs	r3, r1
 8009ba8:	f040 80a7 	bne.w	8009cfa <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009bac:	4b4c      	ldr	r3, [pc, #304]	@ (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bb0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009bb4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bb8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009bbc:	d055      	beq.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8009bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bc0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009bc4:	f200 8096 	bhi.w	8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bca:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009bce:	f000 8084 	beq.w	8009cda <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8009bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bd4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009bd8:	f200 808c 	bhi.w	8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bde:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009be2:	d030      	beq.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8009be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009be6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009bea:	f200 8083 	bhi.w	8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d004      	beq.n	8009bfe <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8009bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bf6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009bfa:	d012      	beq.n	8009c22 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8009bfc:	e07a      	b.n	8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009bfe:	4b38      	ldr	r3, [pc, #224]	@ (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c06:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009c0a:	d107      	bne.n	8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c10:	4618      	mov	r0, r3
 8009c12:	f000 fe0b 	bl	800a82c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c1a:	e340      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c20:	e33d      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c22:	4b2f      	ldr	r3, [pc, #188]	@ (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c2e:	d107      	bne.n	8009c40 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c30:	f107 0318 	add.w	r3, r7, #24
 8009c34:	4618      	mov	r0, r3
 8009c36:	f000 fb51 	bl	800a2dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009c3a:	69bb      	ldr	r3, [r7, #24]
 8009c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c3e:	e32e      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c40:	2300      	movs	r3, #0
 8009c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c44:	e32b      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009c46:	4b26      	ldr	r3, [pc, #152]	@ (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009c4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c52:	d107      	bne.n	8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c54:	f107 030c 	add.w	r3, r7, #12
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f000 fc93 	bl	800a584 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c62:	e31c      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c64:	2300      	movs	r3, #0
 8009c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c68:	e319      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009c6a:	4b1d      	ldr	r3, [pc, #116]	@ (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c6e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009c72:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009c74:	4b1a      	ldr	r3, [pc, #104]	@ (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f003 0304 	and.w	r3, r3, #4
 8009c7c:	2b04      	cmp	r3, #4
 8009c7e:	d10c      	bne.n	8009c9a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d109      	bne.n	8009c9a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009c86:	4b16      	ldr	r3, [pc, #88]	@ (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	08db      	lsrs	r3, r3, #3
 8009c8c:	f003 0303 	and.w	r3, r3, #3
 8009c90:	4a14      	ldr	r2, [pc, #80]	@ (8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009c92:	fa22 f303 	lsr.w	r3, r2, r3
 8009c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c98:	e01e      	b.n	8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009c9a:	4b11      	ldr	r3, [pc, #68]	@ (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ca2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ca6:	d106      	bne.n	8009cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009caa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009cae:	d102      	bne.n	8009cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009cb0:	4b0d      	ldr	r3, [pc, #52]	@ (8009ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009cb4:	e010      	b.n	8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009cbe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009cc2:	d106      	bne.n	8009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8009cc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009cca:	d102      	bne.n	8009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009ccc:	4b07      	ldr	r3, [pc, #28]	@ (8009cec <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009cd0:	e002      	b.n	8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009cd6:	e2e2      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009cd8:	e2e1      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009cda:	4b05      	ldr	r3, [pc, #20]	@ (8009cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cde:	e2de      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009ce0:	58024400 	.word	0x58024400
 8009ce4:	03d09000 	.word	0x03d09000
 8009ce8:	003d0900 	.word	0x003d0900
 8009cec:	017d7840 	.word	0x017d7840
 8009cf0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cf8:	e2d1      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009cfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cfe:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8009d02:	430b      	orrs	r3, r1
 8009d04:	f040 809c 	bne.w	8009e40 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009d08:	4b93      	ldr	r3, [pc, #588]	@ (8009f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009d0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d0c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009d10:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009d18:	d054      	beq.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8009d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009d20:	f200 808b 	bhi.w	8009e3a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d26:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009d2a:	f000 8083 	beq.w	8009e34 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8009d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d30:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009d34:	f200 8081 	bhi.w	8009e3a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d3e:	d02f      	beq.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8009d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d46:	d878      	bhi.n	8009e3a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d004      	beq.n	8009d58 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8009d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d54:	d012      	beq.n	8009d7c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8009d56:	e070      	b.n	8009e3a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009d58:	4b7f      	ldr	r3, [pc, #508]	@ (8009f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009d64:	d107      	bne.n	8009d76 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f000 fd5e 	bl	800a82c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d74:	e293      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d76:	2300      	movs	r3, #0
 8009d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d7a:	e290      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009d7c:	4b76      	ldr	r3, [pc, #472]	@ (8009f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d88:	d107      	bne.n	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d8a:	f107 0318 	add.w	r3, r7, #24
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f000 faa4 	bl	800a2dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009d94:	69bb      	ldr	r3, [r7, #24]
 8009d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d98:	e281      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d9e:	e27e      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009da0:	4b6d      	ldr	r3, [pc, #436]	@ (8009f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009da8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009dac:	d107      	bne.n	8009dbe <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009dae:	f107 030c 	add.w	r3, r7, #12
 8009db2:	4618      	mov	r0, r3
 8009db4:	f000 fbe6 	bl	800a584 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009dbc:	e26f      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009dc2:	e26c      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009dc4:	4b64      	ldr	r3, [pc, #400]	@ (8009f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009dc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009dc8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009dcc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009dce:	4b62      	ldr	r3, [pc, #392]	@ (8009f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f003 0304 	and.w	r3, r3, #4
 8009dd6:	2b04      	cmp	r3, #4
 8009dd8:	d10c      	bne.n	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8009dda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d109      	bne.n	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009de0:	4b5d      	ldr	r3, [pc, #372]	@ (8009f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	08db      	lsrs	r3, r3, #3
 8009de6:	f003 0303 	and.w	r3, r3, #3
 8009dea:	4a5c      	ldr	r2, [pc, #368]	@ (8009f5c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009dec:	fa22 f303 	lsr.w	r3, r2, r3
 8009df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009df2:	e01e      	b.n	8009e32 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009df4:	4b58      	ldr	r3, [pc, #352]	@ (8009f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009dfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e00:	d106      	bne.n	8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8009e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e08:	d102      	bne.n	8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009e0a:	4b55      	ldr	r3, [pc, #340]	@ (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e0e:	e010      	b.n	8009e32 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009e10:	4b51      	ldr	r3, [pc, #324]	@ (8009f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e1c:	d106      	bne.n	8009e2c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8009e1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e24:	d102      	bne.n	8009e2c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009e26:	4b4f      	ldr	r3, [pc, #316]	@ (8009f64 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e2a:	e002      	b.n	8009e32 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009e30:	e235      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009e32:	e234      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009e34:	4b4c      	ldr	r3, [pc, #304]	@ (8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e38:	e231      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e3e:	e22e      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009e40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e44:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8009e48:	430b      	orrs	r3, r1
 8009e4a:	f040 808f 	bne.w	8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009e4e:	4b42      	ldr	r3, [pc, #264]	@ (8009f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009e50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e52:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009e56:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8009e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e5a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009e5e:	d06b      	beq.n	8009f38 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8009e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e62:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009e66:	d874      	bhi.n	8009f52 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e6a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009e6e:	d056      	beq.n	8009f1e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8009e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e72:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009e76:	d86c      	bhi.n	8009f52 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e7a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009e7e:	d03b      	beq.n	8009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8009e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e82:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009e86:	d864      	bhi.n	8009f52 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e8e:	d021      	beq.n	8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e96:	d85c      	bhi.n	8009f52 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d004      	beq.n	8009ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8009e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ea0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ea4:	d004      	beq.n	8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8009ea6:	e054      	b.n	8009f52 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009ea8:	f7ff fc56 	bl	8009758 <HAL_RCC_GetPCLK1Freq>
 8009eac:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009eae:	e1f6      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009eb0:	4b29      	ldr	r3, [pc, #164]	@ (8009f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009eb8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ebc:	d107      	bne.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ebe:	f107 0318 	add.w	r3, r7, #24
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f000 fa0a 	bl	800a2dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009ec8:	69fb      	ldr	r3, [r7, #28]
 8009eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ecc:	e1e7      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ed2:	e1e4      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009ed4:	4b20      	ldr	r3, [pc, #128]	@ (8009f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009edc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ee0:	d107      	bne.n	8009ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ee2:	f107 030c 	add.w	r3, r7, #12
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f000 fb4c 	bl	800a584 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ef0:	e1d5      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ef6:	e1d2      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009ef8:	4b17      	ldr	r3, [pc, #92]	@ (8009f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f003 0304 	and.w	r3, r3, #4
 8009f00:	2b04      	cmp	r3, #4
 8009f02:	d109      	bne.n	8009f18 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f04:	4b14      	ldr	r3, [pc, #80]	@ (8009f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	08db      	lsrs	r3, r3, #3
 8009f0a:	f003 0303 	and.w	r3, r3, #3
 8009f0e:	4a13      	ldr	r2, [pc, #76]	@ (8009f5c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009f10:	fa22 f303 	lsr.w	r3, r2, r3
 8009f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f16:	e1c2      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f1c:	e1bf      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8009f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f2a:	d102      	bne.n	8009f32 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8009f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f30:	e1b5      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f32:	2300      	movs	r3, #0
 8009f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f36:	e1b2      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009f38:	4b07      	ldr	r3, [pc, #28]	@ (8009f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f44:	d102      	bne.n	8009f4c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8009f46:	4b07      	ldr	r3, [pc, #28]	@ (8009f64 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f4a:	e1a8      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f50:	e1a5      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009f52:	2300      	movs	r3, #0
 8009f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f56:	e1a2      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009f58:	58024400 	.word	0x58024400
 8009f5c:	03d09000 	.word	0x03d09000
 8009f60:	003d0900 	.word	0x003d0900
 8009f64:	017d7840 	.word	0x017d7840
 8009f68:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009f6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f70:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009f74:	430b      	orrs	r3, r1
 8009f76:	d173      	bne.n	800a060 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009f78:	4b9c      	ldr	r3, [pc, #624]	@ (800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009f80:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f88:	d02f      	beq.n	8009fea <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f90:	d863      	bhi.n	800a05a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8009f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d004      	beq.n	8009fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8009f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f9e:	d012      	beq.n	8009fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009fa0:	e05b      	b.n	800a05a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009fa2:	4b92      	ldr	r3, [pc, #584]	@ (800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009faa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009fae:	d107      	bne.n	8009fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009fb0:	f107 0318 	add.w	r3, r7, #24
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f000 f991 	bl	800a2dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009fba:	69bb      	ldr	r3, [r7, #24]
 8009fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009fbe:	e16e      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fc4:	e16b      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009fc6:	4b89      	ldr	r3, [pc, #548]	@ (800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009fce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fd2:	d107      	bne.n	8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009fd4:	f107 030c 	add.w	r3, r7, #12
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f000 fad3 	bl	800a584 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009fe2:	e15c      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fe8:	e159      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009fea:	4b80      	ldr	r3, [pc, #512]	@ (800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009fee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009ff2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009ff4:	4b7d      	ldr	r3, [pc, #500]	@ (800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f003 0304 	and.w	r3, r3, #4
 8009ffc:	2b04      	cmp	r3, #4
 8009ffe:	d10c      	bne.n	800a01a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a002:	2b00      	cmp	r3, #0
 800a004:	d109      	bne.n	800a01a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a006:	4b79      	ldr	r3, [pc, #484]	@ (800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	08db      	lsrs	r3, r3, #3
 800a00c:	f003 0303 	and.w	r3, r3, #3
 800a010:	4a77      	ldr	r2, [pc, #476]	@ (800a1f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a012:	fa22 f303 	lsr.w	r3, r2, r3
 800a016:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a018:	e01e      	b.n	800a058 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a01a:	4b74      	ldr	r3, [pc, #464]	@ (800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a022:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a026:	d106      	bne.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800a028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a02a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a02e:	d102      	bne.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a030:	4b70      	ldr	r3, [pc, #448]	@ (800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a032:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a034:	e010      	b.n	800a058 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a036:	4b6d      	ldr	r3, [pc, #436]	@ (800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a03e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a042:	d106      	bne.n	800a052 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800a044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a046:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a04a:	d102      	bne.n	800a052 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a04c:	4b6a      	ldr	r3, [pc, #424]	@ (800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a04e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a050:	e002      	b.n	800a058 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a052:	2300      	movs	r3, #0
 800a054:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a056:	e122      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a058:	e121      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a05a:	2300      	movs	r3, #0
 800a05c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a05e:	e11e      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a060:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a064:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a068:	430b      	orrs	r3, r1
 800a06a:	d133      	bne.n	800a0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a06c:	4b5f      	ldr	r3, [pc, #380]	@ (800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a06e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a070:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a074:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d004      	beq.n	800a086 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a07c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a07e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a082:	d012      	beq.n	800a0aa <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800a084:	e023      	b.n	800a0ce <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a086:	4b59      	ldr	r3, [pc, #356]	@ (800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a08e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a092:	d107      	bne.n	800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a094:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a098:	4618      	mov	r0, r3
 800a09a:	f000 fbc7 	bl	800a82c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a09e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0a2:	e0fc      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0a8:	e0f9      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a0aa:	4b50      	ldr	r3, [pc, #320]	@ (800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a0b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a0b6:	d107      	bne.n	800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0b8:	f107 0318 	add.w	r3, r7, #24
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f000 f90d 	bl	800a2dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a0c2:	6a3b      	ldr	r3, [r7, #32]
 800a0c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0c6:	e0ea      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0cc:	e0e7      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0d2:	e0e4      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a0d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0d8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a0dc:	430b      	orrs	r3, r1
 800a0de:	f040 808d 	bne.w	800a1fc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a0e2:	4b42      	ldr	r3, [pc, #264]	@ (800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a0e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0e6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a0ea:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a0ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a0f2:	d06b      	beq.n	800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800a0f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a0fa:	d874      	bhi.n	800a1e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a0fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a102:	d056      	beq.n	800a1b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800a104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a106:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a10a:	d86c      	bhi.n	800a1e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a10c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a10e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a112:	d03b      	beq.n	800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800a114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a116:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a11a:	d864      	bhi.n	800a1e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a11c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a11e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a122:	d021      	beq.n	800a168 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a126:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a12a:	d85c      	bhi.n	800a1e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a12c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d004      	beq.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800a132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a134:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a138:	d004      	beq.n	800a144 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800a13a:	e054      	b.n	800a1e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a13c:	f000 f8b8 	bl	800a2b0 <HAL_RCCEx_GetD3PCLK1Freq>
 800a140:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a142:	e0ac      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a144:	4b29      	ldr	r3, [pc, #164]	@ (800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a14c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a150:	d107      	bne.n	800a162 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a152:	f107 0318 	add.w	r3, r7, #24
 800a156:	4618      	mov	r0, r3
 800a158:	f000 f8c0 	bl	800a2dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a15c:	69fb      	ldr	r3, [r7, #28]
 800a15e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a160:	e09d      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a162:	2300      	movs	r3, #0
 800a164:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a166:	e09a      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a168:	4b20      	ldr	r3, [pc, #128]	@ (800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a170:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a174:	d107      	bne.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a176:	f107 030c 	add.w	r3, r7, #12
 800a17a:	4618      	mov	r0, r3
 800a17c:	f000 fa02 	bl	800a584 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a184:	e08b      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a186:	2300      	movs	r3, #0
 800a188:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a18a:	e088      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a18c:	4b17      	ldr	r3, [pc, #92]	@ (800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f003 0304 	and.w	r3, r3, #4
 800a194:	2b04      	cmp	r3, #4
 800a196:	d109      	bne.n	800a1ac <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a198:	4b14      	ldr	r3, [pc, #80]	@ (800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	08db      	lsrs	r3, r3, #3
 800a19e:	f003 0303 	and.w	r3, r3, #3
 800a1a2:	4a13      	ldr	r2, [pc, #76]	@ (800a1f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a1a4:	fa22 f303 	lsr.w	r3, r2, r3
 800a1a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1aa:	e078      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1b0:	e075      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a1b2:	4b0e      	ldr	r3, [pc, #56]	@ (800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1be:	d102      	bne.n	800a1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800a1c0:	4b0c      	ldr	r3, [pc, #48]	@ (800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a1c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1c4:	e06b      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1ca:	e068      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a1cc:	4b07      	ldr	r3, [pc, #28]	@ (800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a1d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a1d8:	d102      	bne.n	800a1e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800a1da:	4b07      	ldr	r3, [pc, #28]	@ (800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a1dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1de:	e05e      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1e4:	e05b      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1ea:	e058      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a1ec:	58024400 	.word	0x58024400
 800a1f0:	03d09000 	.word	0x03d09000
 800a1f4:	003d0900 	.word	0x003d0900
 800a1f8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a1fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a200:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a204:	430b      	orrs	r3, r1
 800a206:	d148      	bne.n	800a29a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a208:	4b27      	ldr	r3, [pc, #156]	@ (800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a20a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a20c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a210:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a214:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a218:	d02a      	beq.n	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800a21a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a21c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a220:	d838      	bhi.n	800a294 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800a222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a224:	2b00      	cmp	r3, #0
 800a226:	d004      	beq.n	800a232 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800a228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a22a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a22e:	d00d      	beq.n	800a24c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800a230:	e030      	b.n	800a294 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a232:	4b1d      	ldr	r3, [pc, #116]	@ (800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a23a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a23e:	d102      	bne.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800a240:	4b1a      	ldr	r3, [pc, #104]	@ (800a2ac <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800a242:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a244:	e02b      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a246:	2300      	movs	r3, #0
 800a248:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a24a:	e028      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a24c:	4b16      	ldr	r3, [pc, #88]	@ (800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a254:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a258:	d107      	bne.n	800a26a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a25a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a25e:	4618      	mov	r0, r3
 800a260:	f000 fae4 	bl	800a82c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a268:	e019      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a26a:	2300      	movs	r3, #0
 800a26c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a26e:	e016      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a270:	4b0d      	ldr	r3, [pc, #52]	@ (800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a278:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a27c:	d107      	bne.n	800a28e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a27e:	f107 0318 	add.w	r3, r7, #24
 800a282:	4618      	mov	r0, r3
 800a284:	f000 f82a 	bl	800a2dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a288:	69fb      	ldr	r3, [r7, #28]
 800a28a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a28c:	e007      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a28e:	2300      	movs	r3, #0
 800a290:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a292:	e004      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a294:	2300      	movs	r3, #0
 800a296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a298:	e001      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800a29a:	2300      	movs	r3, #0
 800a29c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800a29e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	3740      	adds	r7, #64	@ 0x40
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}
 800a2a8:	58024400 	.word	0x58024400
 800a2ac:	017d7840 	.word	0x017d7840

0800a2b0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a2b4:	f7ff fa20 	bl	80096f8 <HAL_RCC_GetHCLKFreq>
 800a2b8:	4602      	mov	r2, r0
 800a2ba:	4b06      	ldr	r3, [pc, #24]	@ (800a2d4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a2bc:	6a1b      	ldr	r3, [r3, #32]
 800a2be:	091b      	lsrs	r3, r3, #4
 800a2c0:	f003 0307 	and.w	r3, r3, #7
 800a2c4:	4904      	ldr	r1, [pc, #16]	@ (800a2d8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a2c6:	5ccb      	ldrb	r3, [r1, r3]
 800a2c8:	f003 031f 	and.w	r3, r3, #31
 800a2cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	bd80      	pop	{r7, pc}
 800a2d4:	58024400 	.word	0x58024400
 800a2d8:	0801e3b4 	.word	0x0801e3b4

0800a2dc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b089      	sub	sp, #36	@ 0x24
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a2e4:	4ba1      	ldr	r3, [pc, #644]	@ (800a56c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2e8:	f003 0303 	and.w	r3, r3, #3
 800a2ec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a2ee:	4b9f      	ldr	r3, [pc, #636]	@ (800a56c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2f2:	0b1b      	lsrs	r3, r3, #12
 800a2f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a2f8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a2fa:	4b9c      	ldr	r3, [pc, #624]	@ (800a56c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2fe:	091b      	lsrs	r3, r3, #4
 800a300:	f003 0301 	and.w	r3, r3, #1
 800a304:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a306:	4b99      	ldr	r3, [pc, #612]	@ (800a56c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a30a:	08db      	lsrs	r3, r3, #3
 800a30c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a310:	693a      	ldr	r2, [r7, #16]
 800a312:	fb02 f303 	mul.w	r3, r2, r3
 800a316:	ee07 3a90 	vmov	s15, r3
 800a31a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a31e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	2b00      	cmp	r3, #0
 800a326:	f000 8111 	beq.w	800a54c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a32a:	69bb      	ldr	r3, [r7, #24]
 800a32c:	2b02      	cmp	r3, #2
 800a32e:	f000 8083 	beq.w	800a438 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a332:	69bb      	ldr	r3, [r7, #24]
 800a334:	2b02      	cmp	r3, #2
 800a336:	f200 80a1 	bhi.w	800a47c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a33a:	69bb      	ldr	r3, [r7, #24]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d003      	beq.n	800a348 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a340:	69bb      	ldr	r3, [r7, #24]
 800a342:	2b01      	cmp	r3, #1
 800a344:	d056      	beq.n	800a3f4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a346:	e099      	b.n	800a47c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a348:	4b88      	ldr	r3, [pc, #544]	@ (800a56c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f003 0320 	and.w	r3, r3, #32
 800a350:	2b00      	cmp	r3, #0
 800a352:	d02d      	beq.n	800a3b0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a354:	4b85      	ldr	r3, [pc, #532]	@ (800a56c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	08db      	lsrs	r3, r3, #3
 800a35a:	f003 0303 	and.w	r3, r3, #3
 800a35e:	4a84      	ldr	r2, [pc, #528]	@ (800a570 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a360:	fa22 f303 	lsr.w	r3, r2, r3
 800a364:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	ee07 3a90 	vmov	s15, r3
 800a36c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	ee07 3a90 	vmov	s15, r3
 800a376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a37a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a37e:	4b7b      	ldr	r3, [pc, #492]	@ (800a56c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a386:	ee07 3a90 	vmov	s15, r3
 800a38a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a38e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a392:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a574 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a39a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a39e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a3a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a3ae:	e087      	b.n	800a4c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	ee07 3a90 	vmov	s15, r3
 800a3b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3ba:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a578 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a3be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3c2:	4b6a      	ldr	r3, [pc, #424]	@ (800a56c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a3c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3ca:	ee07 3a90 	vmov	s15, r3
 800a3ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3d6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a574 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a3da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a3e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a3f2:	e065      	b.n	800a4c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	ee07 3a90 	vmov	s15, r3
 800a3fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3fe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a57c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a406:	4b59      	ldr	r3, [pc, #356]	@ (800a56c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a40a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a40e:	ee07 3a90 	vmov	s15, r3
 800a412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a416:	ed97 6a03 	vldr	s12, [r7, #12]
 800a41a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a574 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a41e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a426:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a42a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a42e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a432:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a436:	e043      	b.n	800a4c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	ee07 3a90 	vmov	s15, r3
 800a43e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a442:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a580 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a44a:	4b48      	ldr	r3, [pc, #288]	@ (800a56c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a44c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a44e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a452:	ee07 3a90 	vmov	s15, r3
 800a456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a45a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a45e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a574 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a46a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a46e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a472:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a476:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a47a:	e021      	b.n	800a4c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	ee07 3a90 	vmov	s15, r3
 800a482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a486:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a57c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a48a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a48e:	4b37      	ldr	r3, [pc, #220]	@ (800a56c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a496:	ee07 3a90 	vmov	s15, r3
 800a49a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a49e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4a2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a574 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a4a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a4b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a4be:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a4c0:	4b2a      	ldr	r3, [pc, #168]	@ (800a56c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4c4:	0a5b      	lsrs	r3, r3, #9
 800a4c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a4ca:	ee07 3a90 	vmov	s15, r3
 800a4ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a4d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a4da:	edd7 6a07 	vldr	s13, [r7, #28]
 800a4de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4e6:	ee17 2a90 	vmov	r2, s15
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a4ee:	4b1f      	ldr	r3, [pc, #124]	@ (800a56c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4f2:	0c1b      	lsrs	r3, r3, #16
 800a4f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a4f8:	ee07 3a90 	vmov	s15, r3
 800a4fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a500:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a504:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a508:	edd7 6a07 	vldr	s13, [r7, #28]
 800a50c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a510:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a514:	ee17 2a90 	vmov	r2, s15
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a51c:	4b13      	ldr	r3, [pc, #76]	@ (800a56c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a51e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a520:	0e1b      	lsrs	r3, r3, #24
 800a522:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a526:	ee07 3a90 	vmov	s15, r3
 800a52a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a52e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a532:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a536:	edd7 6a07 	vldr	s13, [r7, #28]
 800a53a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a53e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a542:	ee17 2a90 	vmov	r2, s15
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a54a:	e008      	b.n	800a55e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2200      	movs	r2, #0
 800a550:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2200      	movs	r2, #0
 800a556:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2200      	movs	r2, #0
 800a55c:	609a      	str	r2, [r3, #8]
}
 800a55e:	bf00      	nop
 800a560:	3724      	adds	r7, #36	@ 0x24
 800a562:	46bd      	mov	sp, r7
 800a564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a568:	4770      	bx	lr
 800a56a:	bf00      	nop
 800a56c:	58024400 	.word	0x58024400
 800a570:	03d09000 	.word	0x03d09000
 800a574:	46000000 	.word	0x46000000
 800a578:	4c742400 	.word	0x4c742400
 800a57c:	4a742400 	.word	0x4a742400
 800a580:	4bbebc20 	.word	0x4bbebc20

0800a584 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a584:	b480      	push	{r7}
 800a586:	b089      	sub	sp, #36	@ 0x24
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a58c:	4ba1      	ldr	r3, [pc, #644]	@ (800a814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a58e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a590:	f003 0303 	and.w	r3, r3, #3
 800a594:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a596:	4b9f      	ldr	r3, [pc, #636]	@ (800a814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a59a:	0d1b      	lsrs	r3, r3, #20
 800a59c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a5a0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a5a2:	4b9c      	ldr	r3, [pc, #624]	@ (800a814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5a6:	0a1b      	lsrs	r3, r3, #8
 800a5a8:	f003 0301 	and.w	r3, r3, #1
 800a5ac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a5ae:	4b99      	ldr	r3, [pc, #612]	@ (800a814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5b2:	08db      	lsrs	r3, r3, #3
 800a5b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a5b8:	693a      	ldr	r2, [r7, #16]
 800a5ba:	fb02 f303 	mul.w	r3, r2, r3
 800a5be:	ee07 3a90 	vmov	s15, r3
 800a5c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	f000 8111 	beq.w	800a7f4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a5d2:	69bb      	ldr	r3, [r7, #24]
 800a5d4:	2b02      	cmp	r3, #2
 800a5d6:	f000 8083 	beq.w	800a6e0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a5da:	69bb      	ldr	r3, [r7, #24]
 800a5dc:	2b02      	cmp	r3, #2
 800a5de:	f200 80a1 	bhi.w	800a724 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a5e2:	69bb      	ldr	r3, [r7, #24]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d003      	beq.n	800a5f0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a5e8:	69bb      	ldr	r3, [r7, #24]
 800a5ea:	2b01      	cmp	r3, #1
 800a5ec:	d056      	beq.n	800a69c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a5ee:	e099      	b.n	800a724 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a5f0:	4b88      	ldr	r3, [pc, #544]	@ (800a814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f003 0320 	and.w	r3, r3, #32
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d02d      	beq.n	800a658 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a5fc:	4b85      	ldr	r3, [pc, #532]	@ (800a814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	08db      	lsrs	r3, r3, #3
 800a602:	f003 0303 	and.w	r3, r3, #3
 800a606:	4a84      	ldr	r2, [pc, #528]	@ (800a818 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a608:	fa22 f303 	lsr.w	r3, r2, r3
 800a60c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	ee07 3a90 	vmov	s15, r3
 800a614:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	ee07 3a90 	vmov	s15, r3
 800a61e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a622:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a626:	4b7b      	ldr	r3, [pc, #492]	@ (800a814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a62a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a62e:	ee07 3a90 	vmov	s15, r3
 800a632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a636:	ed97 6a03 	vldr	s12, [r7, #12]
 800a63a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a81c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a63e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a646:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a64a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a64e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a652:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a656:	e087      	b.n	800a768 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	ee07 3a90 	vmov	s15, r3
 800a65e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a662:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a820 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a66a:	4b6a      	ldr	r3, [pc, #424]	@ (800a814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a66c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a66e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a672:	ee07 3a90 	vmov	s15, r3
 800a676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a67a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a67e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a81c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a682:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a686:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a68a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a68e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a692:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a696:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a69a:	e065      	b.n	800a768 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	ee07 3a90 	vmov	s15, r3
 800a6a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6a6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a824 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a6aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6ae:	4b59      	ldr	r3, [pc, #356]	@ (800a814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a6b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6b6:	ee07 3a90 	vmov	s15, r3
 800a6ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6be:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6c2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a81c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a6c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a6d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a6de:	e043      	b.n	800a768 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	ee07 3a90 	vmov	s15, r3
 800a6e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6ea:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a828 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a6ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6f2:	4b48      	ldr	r3, [pc, #288]	@ (800a814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a6f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6fa:	ee07 3a90 	vmov	s15, r3
 800a6fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a702:	ed97 6a03 	vldr	s12, [r7, #12]
 800a706:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a81c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a70a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a70e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a712:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a71a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a71e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a722:	e021      	b.n	800a768 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	ee07 3a90 	vmov	s15, r3
 800a72a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a72e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a824 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a736:	4b37      	ldr	r3, [pc, #220]	@ (800a814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a73a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a73e:	ee07 3a90 	vmov	s15, r3
 800a742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a746:	ed97 6a03 	vldr	s12, [r7, #12]
 800a74a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a81c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a74e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a756:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a75a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a75e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a762:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a766:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a768:	4b2a      	ldr	r3, [pc, #168]	@ (800a814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a76a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a76c:	0a5b      	lsrs	r3, r3, #9
 800a76e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a772:	ee07 3a90 	vmov	s15, r3
 800a776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a77a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a77e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a782:	edd7 6a07 	vldr	s13, [r7, #28]
 800a786:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a78a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a78e:	ee17 2a90 	vmov	r2, s15
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a796:	4b1f      	ldr	r3, [pc, #124]	@ (800a814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a79a:	0c1b      	lsrs	r3, r3, #16
 800a79c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a7a0:	ee07 3a90 	vmov	s15, r3
 800a7a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a7ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a7b0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a7b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a7b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7bc:	ee17 2a90 	vmov	r2, s15
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a7c4:	4b13      	ldr	r3, [pc, #76]	@ (800a814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a7c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7c8:	0e1b      	lsrs	r3, r3, #24
 800a7ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a7ce:	ee07 3a90 	vmov	s15, r3
 800a7d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a7da:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a7de:	edd7 6a07 	vldr	s13, [r7, #28]
 800a7e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a7e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7ea:	ee17 2a90 	vmov	r2, s15
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a7f2:	e008      	b.n	800a806 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2200      	movs	r2, #0
 800a804:	609a      	str	r2, [r3, #8]
}
 800a806:	bf00      	nop
 800a808:	3724      	adds	r7, #36	@ 0x24
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr
 800a812:	bf00      	nop
 800a814:	58024400 	.word	0x58024400
 800a818:	03d09000 	.word	0x03d09000
 800a81c:	46000000 	.word	0x46000000
 800a820:	4c742400 	.word	0x4c742400
 800a824:	4a742400 	.word	0x4a742400
 800a828:	4bbebc20 	.word	0x4bbebc20

0800a82c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b089      	sub	sp, #36	@ 0x24
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a834:	4ba0      	ldr	r3, [pc, #640]	@ (800aab8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a838:	f003 0303 	and.w	r3, r3, #3
 800a83c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a83e:	4b9e      	ldr	r3, [pc, #632]	@ (800aab8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a842:	091b      	lsrs	r3, r3, #4
 800a844:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a848:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a84a:	4b9b      	ldr	r3, [pc, #620]	@ (800aab8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a84c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a84e:	f003 0301 	and.w	r3, r3, #1
 800a852:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a854:	4b98      	ldr	r3, [pc, #608]	@ (800aab8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a856:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a858:	08db      	lsrs	r3, r3, #3
 800a85a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a85e:	693a      	ldr	r2, [r7, #16]
 800a860:	fb02 f303 	mul.w	r3, r2, r3
 800a864:	ee07 3a90 	vmov	s15, r3
 800a868:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a86c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	2b00      	cmp	r3, #0
 800a874:	f000 8111 	beq.w	800aa9a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a878:	69bb      	ldr	r3, [r7, #24]
 800a87a:	2b02      	cmp	r3, #2
 800a87c:	f000 8083 	beq.w	800a986 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a880:	69bb      	ldr	r3, [r7, #24]
 800a882:	2b02      	cmp	r3, #2
 800a884:	f200 80a1 	bhi.w	800a9ca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a888:	69bb      	ldr	r3, [r7, #24]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d003      	beq.n	800a896 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a88e:	69bb      	ldr	r3, [r7, #24]
 800a890:	2b01      	cmp	r3, #1
 800a892:	d056      	beq.n	800a942 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a894:	e099      	b.n	800a9ca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a896:	4b88      	ldr	r3, [pc, #544]	@ (800aab8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f003 0320 	and.w	r3, r3, #32
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d02d      	beq.n	800a8fe <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a8a2:	4b85      	ldr	r3, [pc, #532]	@ (800aab8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	08db      	lsrs	r3, r3, #3
 800a8a8:	f003 0303 	and.w	r3, r3, #3
 800a8ac:	4a83      	ldr	r2, [pc, #524]	@ (800aabc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a8ae:	fa22 f303 	lsr.w	r3, r2, r3
 800a8b2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	ee07 3a90 	vmov	s15, r3
 800a8ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	ee07 3a90 	vmov	s15, r3
 800a8c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8cc:	4b7a      	ldr	r3, [pc, #488]	@ (800aab8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a8ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8d4:	ee07 3a90 	vmov	s15, r3
 800a8d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8dc:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8e0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800aac0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a8e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a8f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8f8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a8fc:	e087      	b.n	800aa0e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	ee07 3a90 	vmov	s15, r3
 800a904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a908:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800aac4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a90c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a910:	4b69      	ldr	r3, [pc, #420]	@ (800aab8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a918:	ee07 3a90 	vmov	s15, r3
 800a91c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a920:	ed97 6a03 	vldr	s12, [r7, #12]
 800a924:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800aac0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a928:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a92c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a930:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a934:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a93c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a940:	e065      	b.n	800aa0e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	ee07 3a90 	vmov	s15, r3
 800a948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a94c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800aac8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a950:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a954:	4b58      	ldr	r3, [pc, #352]	@ (800aab8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a95c:	ee07 3a90 	vmov	s15, r3
 800a960:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a964:	ed97 6a03 	vldr	s12, [r7, #12]
 800a968:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800aac0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a96c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a970:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a974:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a978:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a97c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a980:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a984:	e043      	b.n	800aa0e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	ee07 3a90 	vmov	s15, r3
 800a98c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a990:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800aacc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a994:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a998:	4b47      	ldr	r3, [pc, #284]	@ (800aab8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a99a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a99c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9a0:	ee07 3a90 	vmov	s15, r3
 800a9a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9a8:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9ac:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800aac0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a9b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a9bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a9c8:	e021      	b.n	800aa0e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	ee07 3a90 	vmov	s15, r3
 800a9d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9d4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800aac4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a9d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9dc:	4b36      	ldr	r3, [pc, #216]	@ (800aab8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a9de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9e4:	ee07 3a90 	vmov	s15, r3
 800a9e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9ec:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9f0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800aac0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a9f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa04:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa08:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa0c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800aa0e:	4b2a      	ldr	r3, [pc, #168]	@ (800aab8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa12:	0a5b      	lsrs	r3, r3, #9
 800aa14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa18:	ee07 3a90 	vmov	s15, r3
 800aa1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa20:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aa24:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa28:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa34:	ee17 2a90 	vmov	r2, s15
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800aa3c:	4b1e      	ldr	r3, [pc, #120]	@ (800aab8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa40:	0c1b      	lsrs	r3, r3, #16
 800aa42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa46:	ee07 3a90 	vmov	s15, r3
 800aa4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aa52:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa56:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa62:	ee17 2a90 	vmov	r2, s15
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800aa6a:	4b13      	ldr	r3, [pc, #76]	@ (800aab8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa6e:	0e1b      	lsrs	r3, r3, #24
 800aa70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa74:	ee07 3a90 	vmov	s15, r3
 800aa78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa7c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aa80:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa84:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa90:	ee17 2a90 	vmov	r2, s15
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800aa98:	e008      	b.n	800aaac <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	609a      	str	r2, [r3, #8]
}
 800aaac:	bf00      	nop
 800aaae:	3724      	adds	r7, #36	@ 0x24
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr
 800aab8:	58024400 	.word	0x58024400
 800aabc:	03d09000 	.word	0x03d09000
 800aac0:	46000000 	.word	0x46000000
 800aac4:	4c742400 	.word	0x4c742400
 800aac8:	4a742400 	.word	0x4a742400
 800aacc:	4bbebc20 	.word	0x4bbebc20

0800aad0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b082      	sub	sp, #8
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d101      	bne.n	800aae2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aade:	2301      	movs	r3, #1
 800aae0:	e042      	b.n	800ab68 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d106      	bne.n	800aafa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f7fa fa15 	bl	8004f24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2224      	movs	r2, #36	@ 0x24
 800aafe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	681a      	ldr	r2, [r3, #0]
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f022 0201 	bic.w	r2, r2, #1
 800ab10:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d002      	beq.n	800ab20 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f000 fe1e 	bl	800b75c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f000 f8b3 	bl	800ac8c <UART_SetConfig>
 800ab26:	4603      	mov	r3, r0
 800ab28:	2b01      	cmp	r3, #1
 800ab2a:	d101      	bne.n	800ab30 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	e01b      	b.n	800ab68 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	685a      	ldr	r2, [r3, #4]
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ab3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	689a      	ldr	r2, [r3, #8]
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ab4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	681a      	ldr	r2, [r3, #0]
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f042 0201 	orr.w	r2, r2, #1
 800ab5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f000 fe9d 	bl	800b8a0 <UART_CheckIdleState>
 800ab66:	4603      	mov	r3, r0
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3708      	adds	r7, #8
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}

0800ab70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b08a      	sub	sp, #40	@ 0x28
 800ab74:	af02      	add	r7, sp, #8
 800ab76:	60f8      	str	r0, [r7, #12]
 800ab78:	60b9      	str	r1, [r7, #8]
 800ab7a:	603b      	str	r3, [r7, #0]
 800ab7c:	4613      	mov	r3, r2
 800ab7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab86:	2b20      	cmp	r3, #32
 800ab88:	d17b      	bne.n	800ac82 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d002      	beq.n	800ab96 <HAL_UART_Transmit+0x26>
 800ab90:	88fb      	ldrh	r3, [r7, #6]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d101      	bne.n	800ab9a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ab96:	2301      	movs	r3, #1
 800ab98:	e074      	b.n	800ac84 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	2221      	movs	r2, #33	@ 0x21
 800aba6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800abaa:	f7fb f90d 	bl	8005dc8 <HAL_GetTick>
 800abae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	88fa      	ldrh	r2, [r7, #6]
 800abb4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	88fa      	ldrh	r2, [r7, #6]
 800abbc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	689b      	ldr	r3, [r3, #8]
 800abc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800abc8:	d108      	bne.n	800abdc <HAL_UART_Transmit+0x6c>
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	691b      	ldr	r3, [r3, #16]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d104      	bne.n	800abdc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800abd2:	2300      	movs	r3, #0
 800abd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	61bb      	str	r3, [r7, #24]
 800abda:	e003      	b.n	800abe4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800abe0:	2300      	movs	r3, #0
 800abe2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800abe4:	e030      	b.n	800ac48 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	9300      	str	r3, [sp, #0]
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	2200      	movs	r2, #0
 800abee:	2180      	movs	r1, #128	@ 0x80
 800abf0:	68f8      	ldr	r0, [r7, #12]
 800abf2:	f000 feff 	bl	800b9f4 <UART_WaitOnFlagUntilTimeout>
 800abf6:	4603      	mov	r3, r0
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d005      	beq.n	800ac08 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	2220      	movs	r2, #32
 800ac00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ac04:	2303      	movs	r3, #3
 800ac06:	e03d      	b.n	800ac84 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ac08:	69fb      	ldr	r3, [r7, #28]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d10b      	bne.n	800ac26 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ac0e:	69bb      	ldr	r3, [r7, #24]
 800ac10:	881b      	ldrh	r3, [r3, #0]
 800ac12:	461a      	mov	r2, r3
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ac1c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ac1e:	69bb      	ldr	r3, [r7, #24]
 800ac20:	3302      	adds	r3, #2
 800ac22:	61bb      	str	r3, [r7, #24]
 800ac24:	e007      	b.n	800ac36 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ac26:	69fb      	ldr	r3, [r7, #28]
 800ac28:	781a      	ldrb	r2, [r3, #0]
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ac30:	69fb      	ldr	r3, [r7, #28]
 800ac32:	3301      	adds	r3, #1
 800ac34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ac3c:	b29b      	uxth	r3, r3
 800ac3e:	3b01      	subs	r3, #1
 800ac40:	b29a      	uxth	r2, r3
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ac4e:	b29b      	uxth	r3, r3
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d1c8      	bne.n	800abe6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	9300      	str	r3, [sp, #0]
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	2140      	movs	r1, #64	@ 0x40
 800ac5e:	68f8      	ldr	r0, [r7, #12]
 800ac60:	f000 fec8 	bl	800b9f4 <UART_WaitOnFlagUntilTimeout>
 800ac64:	4603      	mov	r3, r0
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d005      	beq.n	800ac76 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	2220      	movs	r2, #32
 800ac6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800ac72:	2303      	movs	r3, #3
 800ac74:	e006      	b.n	800ac84 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	2220      	movs	r2, #32
 800ac7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	e000      	b.n	800ac84 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800ac82:	2302      	movs	r3, #2
  }
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3720      	adds	r7, #32
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ac8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ac90:	b092      	sub	sp, #72	@ 0x48
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ac96:	2300      	movs	r3, #0
 800ac98:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	689a      	ldr	r2, [r3, #8]
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	691b      	ldr	r3, [r3, #16]
 800aca4:	431a      	orrs	r2, r3
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	695b      	ldr	r3, [r3, #20]
 800acaa:	431a      	orrs	r2, r3
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	69db      	ldr	r3, [r3, #28]
 800acb0:	4313      	orrs	r3, r2
 800acb2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	681a      	ldr	r2, [r3, #0]
 800acba:	4bbe      	ldr	r3, [pc, #760]	@ (800afb4 <UART_SetConfig+0x328>)
 800acbc:	4013      	ands	r3, r2
 800acbe:	697a      	ldr	r2, [r7, #20]
 800acc0:	6812      	ldr	r2, [r2, #0]
 800acc2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800acc4:	430b      	orrs	r3, r1
 800acc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	685b      	ldr	r3, [r3, #4]
 800acce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	68da      	ldr	r2, [r3, #12]
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	430a      	orrs	r2, r1
 800acdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	699b      	ldr	r3, [r3, #24]
 800ace2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	4ab3      	ldr	r2, [pc, #716]	@ (800afb8 <UART_SetConfig+0x32c>)
 800acea:	4293      	cmp	r3, r2
 800acec:	d004      	beq.n	800acf8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	6a1b      	ldr	r3, [r3, #32]
 800acf2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800acf4:	4313      	orrs	r3, r2
 800acf6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	689a      	ldr	r2, [r3, #8]
 800acfe:	4baf      	ldr	r3, [pc, #700]	@ (800afbc <UART_SetConfig+0x330>)
 800ad00:	4013      	ands	r3, r2
 800ad02:	697a      	ldr	r2, [r7, #20]
 800ad04:	6812      	ldr	r2, [r2, #0]
 800ad06:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ad08:	430b      	orrs	r3, r1
 800ad0a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad12:	f023 010f 	bic.w	r1, r3, #15
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	430a      	orrs	r2, r1
 800ad20:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	4aa6      	ldr	r2, [pc, #664]	@ (800afc0 <UART_SetConfig+0x334>)
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d177      	bne.n	800ae1c <UART_SetConfig+0x190>
 800ad2c:	4ba5      	ldr	r3, [pc, #660]	@ (800afc4 <UART_SetConfig+0x338>)
 800ad2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad30:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ad34:	2b28      	cmp	r3, #40	@ 0x28
 800ad36:	d86d      	bhi.n	800ae14 <UART_SetConfig+0x188>
 800ad38:	a201      	add	r2, pc, #4	@ (adr r2, 800ad40 <UART_SetConfig+0xb4>)
 800ad3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad3e:	bf00      	nop
 800ad40:	0800ade5 	.word	0x0800ade5
 800ad44:	0800ae15 	.word	0x0800ae15
 800ad48:	0800ae15 	.word	0x0800ae15
 800ad4c:	0800ae15 	.word	0x0800ae15
 800ad50:	0800ae15 	.word	0x0800ae15
 800ad54:	0800ae15 	.word	0x0800ae15
 800ad58:	0800ae15 	.word	0x0800ae15
 800ad5c:	0800ae15 	.word	0x0800ae15
 800ad60:	0800aded 	.word	0x0800aded
 800ad64:	0800ae15 	.word	0x0800ae15
 800ad68:	0800ae15 	.word	0x0800ae15
 800ad6c:	0800ae15 	.word	0x0800ae15
 800ad70:	0800ae15 	.word	0x0800ae15
 800ad74:	0800ae15 	.word	0x0800ae15
 800ad78:	0800ae15 	.word	0x0800ae15
 800ad7c:	0800ae15 	.word	0x0800ae15
 800ad80:	0800adf5 	.word	0x0800adf5
 800ad84:	0800ae15 	.word	0x0800ae15
 800ad88:	0800ae15 	.word	0x0800ae15
 800ad8c:	0800ae15 	.word	0x0800ae15
 800ad90:	0800ae15 	.word	0x0800ae15
 800ad94:	0800ae15 	.word	0x0800ae15
 800ad98:	0800ae15 	.word	0x0800ae15
 800ad9c:	0800ae15 	.word	0x0800ae15
 800ada0:	0800adfd 	.word	0x0800adfd
 800ada4:	0800ae15 	.word	0x0800ae15
 800ada8:	0800ae15 	.word	0x0800ae15
 800adac:	0800ae15 	.word	0x0800ae15
 800adb0:	0800ae15 	.word	0x0800ae15
 800adb4:	0800ae15 	.word	0x0800ae15
 800adb8:	0800ae15 	.word	0x0800ae15
 800adbc:	0800ae15 	.word	0x0800ae15
 800adc0:	0800ae05 	.word	0x0800ae05
 800adc4:	0800ae15 	.word	0x0800ae15
 800adc8:	0800ae15 	.word	0x0800ae15
 800adcc:	0800ae15 	.word	0x0800ae15
 800add0:	0800ae15 	.word	0x0800ae15
 800add4:	0800ae15 	.word	0x0800ae15
 800add8:	0800ae15 	.word	0x0800ae15
 800addc:	0800ae15 	.word	0x0800ae15
 800ade0:	0800ae0d 	.word	0x0800ae0d
 800ade4:	2301      	movs	r3, #1
 800ade6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adea:	e222      	b.n	800b232 <UART_SetConfig+0x5a6>
 800adec:	2304      	movs	r3, #4
 800adee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adf2:	e21e      	b.n	800b232 <UART_SetConfig+0x5a6>
 800adf4:	2308      	movs	r3, #8
 800adf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adfa:	e21a      	b.n	800b232 <UART_SetConfig+0x5a6>
 800adfc:	2310      	movs	r3, #16
 800adfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae02:	e216      	b.n	800b232 <UART_SetConfig+0x5a6>
 800ae04:	2320      	movs	r3, #32
 800ae06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae0a:	e212      	b.n	800b232 <UART_SetConfig+0x5a6>
 800ae0c:	2340      	movs	r3, #64	@ 0x40
 800ae0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae12:	e20e      	b.n	800b232 <UART_SetConfig+0x5a6>
 800ae14:	2380      	movs	r3, #128	@ 0x80
 800ae16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae1a:	e20a      	b.n	800b232 <UART_SetConfig+0x5a6>
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4a69      	ldr	r2, [pc, #420]	@ (800afc8 <UART_SetConfig+0x33c>)
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d130      	bne.n	800ae88 <UART_SetConfig+0x1fc>
 800ae26:	4b67      	ldr	r3, [pc, #412]	@ (800afc4 <UART_SetConfig+0x338>)
 800ae28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae2a:	f003 0307 	and.w	r3, r3, #7
 800ae2e:	2b05      	cmp	r3, #5
 800ae30:	d826      	bhi.n	800ae80 <UART_SetConfig+0x1f4>
 800ae32:	a201      	add	r2, pc, #4	@ (adr r2, 800ae38 <UART_SetConfig+0x1ac>)
 800ae34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae38:	0800ae51 	.word	0x0800ae51
 800ae3c:	0800ae59 	.word	0x0800ae59
 800ae40:	0800ae61 	.word	0x0800ae61
 800ae44:	0800ae69 	.word	0x0800ae69
 800ae48:	0800ae71 	.word	0x0800ae71
 800ae4c:	0800ae79 	.word	0x0800ae79
 800ae50:	2300      	movs	r3, #0
 800ae52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae56:	e1ec      	b.n	800b232 <UART_SetConfig+0x5a6>
 800ae58:	2304      	movs	r3, #4
 800ae5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae5e:	e1e8      	b.n	800b232 <UART_SetConfig+0x5a6>
 800ae60:	2308      	movs	r3, #8
 800ae62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae66:	e1e4      	b.n	800b232 <UART_SetConfig+0x5a6>
 800ae68:	2310      	movs	r3, #16
 800ae6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae6e:	e1e0      	b.n	800b232 <UART_SetConfig+0x5a6>
 800ae70:	2320      	movs	r3, #32
 800ae72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae76:	e1dc      	b.n	800b232 <UART_SetConfig+0x5a6>
 800ae78:	2340      	movs	r3, #64	@ 0x40
 800ae7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae7e:	e1d8      	b.n	800b232 <UART_SetConfig+0x5a6>
 800ae80:	2380      	movs	r3, #128	@ 0x80
 800ae82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae86:	e1d4      	b.n	800b232 <UART_SetConfig+0x5a6>
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	4a4f      	ldr	r2, [pc, #316]	@ (800afcc <UART_SetConfig+0x340>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d130      	bne.n	800aef4 <UART_SetConfig+0x268>
 800ae92:	4b4c      	ldr	r3, [pc, #304]	@ (800afc4 <UART_SetConfig+0x338>)
 800ae94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae96:	f003 0307 	and.w	r3, r3, #7
 800ae9a:	2b05      	cmp	r3, #5
 800ae9c:	d826      	bhi.n	800aeec <UART_SetConfig+0x260>
 800ae9e:	a201      	add	r2, pc, #4	@ (adr r2, 800aea4 <UART_SetConfig+0x218>)
 800aea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aea4:	0800aebd 	.word	0x0800aebd
 800aea8:	0800aec5 	.word	0x0800aec5
 800aeac:	0800aecd 	.word	0x0800aecd
 800aeb0:	0800aed5 	.word	0x0800aed5
 800aeb4:	0800aedd 	.word	0x0800aedd
 800aeb8:	0800aee5 	.word	0x0800aee5
 800aebc:	2300      	movs	r3, #0
 800aebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aec2:	e1b6      	b.n	800b232 <UART_SetConfig+0x5a6>
 800aec4:	2304      	movs	r3, #4
 800aec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeca:	e1b2      	b.n	800b232 <UART_SetConfig+0x5a6>
 800aecc:	2308      	movs	r3, #8
 800aece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aed2:	e1ae      	b.n	800b232 <UART_SetConfig+0x5a6>
 800aed4:	2310      	movs	r3, #16
 800aed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeda:	e1aa      	b.n	800b232 <UART_SetConfig+0x5a6>
 800aedc:	2320      	movs	r3, #32
 800aede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aee2:	e1a6      	b.n	800b232 <UART_SetConfig+0x5a6>
 800aee4:	2340      	movs	r3, #64	@ 0x40
 800aee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeea:	e1a2      	b.n	800b232 <UART_SetConfig+0x5a6>
 800aeec:	2380      	movs	r3, #128	@ 0x80
 800aeee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aef2:	e19e      	b.n	800b232 <UART_SetConfig+0x5a6>
 800aef4:	697b      	ldr	r3, [r7, #20]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	4a35      	ldr	r2, [pc, #212]	@ (800afd0 <UART_SetConfig+0x344>)
 800aefa:	4293      	cmp	r3, r2
 800aefc:	d130      	bne.n	800af60 <UART_SetConfig+0x2d4>
 800aefe:	4b31      	ldr	r3, [pc, #196]	@ (800afc4 <UART_SetConfig+0x338>)
 800af00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af02:	f003 0307 	and.w	r3, r3, #7
 800af06:	2b05      	cmp	r3, #5
 800af08:	d826      	bhi.n	800af58 <UART_SetConfig+0x2cc>
 800af0a:	a201      	add	r2, pc, #4	@ (adr r2, 800af10 <UART_SetConfig+0x284>)
 800af0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af10:	0800af29 	.word	0x0800af29
 800af14:	0800af31 	.word	0x0800af31
 800af18:	0800af39 	.word	0x0800af39
 800af1c:	0800af41 	.word	0x0800af41
 800af20:	0800af49 	.word	0x0800af49
 800af24:	0800af51 	.word	0x0800af51
 800af28:	2300      	movs	r3, #0
 800af2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af2e:	e180      	b.n	800b232 <UART_SetConfig+0x5a6>
 800af30:	2304      	movs	r3, #4
 800af32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af36:	e17c      	b.n	800b232 <UART_SetConfig+0x5a6>
 800af38:	2308      	movs	r3, #8
 800af3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af3e:	e178      	b.n	800b232 <UART_SetConfig+0x5a6>
 800af40:	2310      	movs	r3, #16
 800af42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af46:	e174      	b.n	800b232 <UART_SetConfig+0x5a6>
 800af48:	2320      	movs	r3, #32
 800af4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af4e:	e170      	b.n	800b232 <UART_SetConfig+0x5a6>
 800af50:	2340      	movs	r3, #64	@ 0x40
 800af52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af56:	e16c      	b.n	800b232 <UART_SetConfig+0x5a6>
 800af58:	2380      	movs	r3, #128	@ 0x80
 800af5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af5e:	e168      	b.n	800b232 <UART_SetConfig+0x5a6>
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	4a1b      	ldr	r2, [pc, #108]	@ (800afd4 <UART_SetConfig+0x348>)
 800af66:	4293      	cmp	r3, r2
 800af68:	d142      	bne.n	800aff0 <UART_SetConfig+0x364>
 800af6a:	4b16      	ldr	r3, [pc, #88]	@ (800afc4 <UART_SetConfig+0x338>)
 800af6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af6e:	f003 0307 	and.w	r3, r3, #7
 800af72:	2b05      	cmp	r3, #5
 800af74:	d838      	bhi.n	800afe8 <UART_SetConfig+0x35c>
 800af76:	a201      	add	r2, pc, #4	@ (adr r2, 800af7c <UART_SetConfig+0x2f0>)
 800af78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af7c:	0800af95 	.word	0x0800af95
 800af80:	0800af9d 	.word	0x0800af9d
 800af84:	0800afa5 	.word	0x0800afa5
 800af88:	0800afad 	.word	0x0800afad
 800af8c:	0800afd9 	.word	0x0800afd9
 800af90:	0800afe1 	.word	0x0800afe1
 800af94:	2300      	movs	r3, #0
 800af96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af9a:	e14a      	b.n	800b232 <UART_SetConfig+0x5a6>
 800af9c:	2304      	movs	r3, #4
 800af9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afa2:	e146      	b.n	800b232 <UART_SetConfig+0x5a6>
 800afa4:	2308      	movs	r3, #8
 800afa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afaa:	e142      	b.n	800b232 <UART_SetConfig+0x5a6>
 800afac:	2310      	movs	r3, #16
 800afae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afb2:	e13e      	b.n	800b232 <UART_SetConfig+0x5a6>
 800afb4:	cfff69f3 	.word	0xcfff69f3
 800afb8:	58000c00 	.word	0x58000c00
 800afbc:	11fff4ff 	.word	0x11fff4ff
 800afc0:	40011000 	.word	0x40011000
 800afc4:	58024400 	.word	0x58024400
 800afc8:	40004400 	.word	0x40004400
 800afcc:	40004800 	.word	0x40004800
 800afd0:	40004c00 	.word	0x40004c00
 800afd4:	40005000 	.word	0x40005000
 800afd8:	2320      	movs	r3, #32
 800afda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afde:	e128      	b.n	800b232 <UART_SetConfig+0x5a6>
 800afe0:	2340      	movs	r3, #64	@ 0x40
 800afe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afe6:	e124      	b.n	800b232 <UART_SetConfig+0x5a6>
 800afe8:	2380      	movs	r3, #128	@ 0x80
 800afea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afee:	e120      	b.n	800b232 <UART_SetConfig+0x5a6>
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	4acb      	ldr	r2, [pc, #812]	@ (800b324 <UART_SetConfig+0x698>)
 800aff6:	4293      	cmp	r3, r2
 800aff8:	d176      	bne.n	800b0e8 <UART_SetConfig+0x45c>
 800affa:	4bcb      	ldr	r3, [pc, #812]	@ (800b328 <UART_SetConfig+0x69c>)
 800affc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800affe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b002:	2b28      	cmp	r3, #40	@ 0x28
 800b004:	d86c      	bhi.n	800b0e0 <UART_SetConfig+0x454>
 800b006:	a201      	add	r2, pc, #4	@ (adr r2, 800b00c <UART_SetConfig+0x380>)
 800b008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b00c:	0800b0b1 	.word	0x0800b0b1
 800b010:	0800b0e1 	.word	0x0800b0e1
 800b014:	0800b0e1 	.word	0x0800b0e1
 800b018:	0800b0e1 	.word	0x0800b0e1
 800b01c:	0800b0e1 	.word	0x0800b0e1
 800b020:	0800b0e1 	.word	0x0800b0e1
 800b024:	0800b0e1 	.word	0x0800b0e1
 800b028:	0800b0e1 	.word	0x0800b0e1
 800b02c:	0800b0b9 	.word	0x0800b0b9
 800b030:	0800b0e1 	.word	0x0800b0e1
 800b034:	0800b0e1 	.word	0x0800b0e1
 800b038:	0800b0e1 	.word	0x0800b0e1
 800b03c:	0800b0e1 	.word	0x0800b0e1
 800b040:	0800b0e1 	.word	0x0800b0e1
 800b044:	0800b0e1 	.word	0x0800b0e1
 800b048:	0800b0e1 	.word	0x0800b0e1
 800b04c:	0800b0c1 	.word	0x0800b0c1
 800b050:	0800b0e1 	.word	0x0800b0e1
 800b054:	0800b0e1 	.word	0x0800b0e1
 800b058:	0800b0e1 	.word	0x0800b0e1
 800b05c:	0800b0e1 	.word	0x0800b0e1
 800b060:	0800b0e1 	.word	0x0800b0e1
 800b064:	0800b0e1 	.word	0x0800b0e1
 800b068:	0800b0e1 	.word	0x0800b0e1
 800b06c:	0800b0c9 	.word	0x0800b0c9
 800b070:	0800b0e1 	.word	0x0800b0e1
 800b074:	0800b0e1 	.word	0x0800b0e1
 800b078:	0800b0e1 	.word	0x0800b0e1
 800b07c:	0800b0e1 	.word	0x0800b0e1
 800b080:	0800b0e1 	.word	0x0800b0e1
 800b084:	0800b0e1 	.word	0x0800b0e1
 800b088:	0800b0e1 	.word	0x0800b0e1
 800b08c:	0800b0d1 	.word	0x0800b0d1
 800b090:	0800b0e1 	.word	0x0800b0e1
 800b094:	0800b0e1 	.word	0x0800b0e1
 800b098:	0800b0e1 	.word	0x0800b0e1
 800b09c:	0800b0e1 	.word	0x0800b0e1
 800b0a0:	0800b0e1 	.word	0x0800b0e1
 800b0a4:	0800b0e1 	.word	0x0800b0e1
 800b0a8:	0800b0e1 	.word	0x0800b0e1
 800b0ac:	0800b0d9 	.word	0x0800b0d9
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0b6:	e0bc      	b.n	800b232 <UART_SetConfig+0x5a6>
 800b0b8:	2304      	movs	r3, #4
 800b0ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0be:	e0b8      	b.n	800b232 <UART_SetConfig+0x5a6>
 800b0c0:	2308      	movs	r3, #8
 800b0c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0c6:	e0b4      	b.n	800b232 <UART_SetConfig+0x5a6>
 800b0c8:	2310      	movs	r3, #16
 800b0ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0ce:	e0b0      	b.n	800b232 <UART_SetConfig+0x5a6>
 800b0d0:	2320      	movs	r3, #32
 800b0d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0d6:	e0ac      	b.n	800b232 <UART_SetConfig+0x5a6>
 800b0d8:	2340      	movs	r3, #64	@ 0x40
 800b0da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0de:	e0a8      	b.n	800b232 <UART_SetConfig+0x5a6>
 800b0e0:	2380      	movs	r3, #128	@ 0x80
 800b0e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0e6:	e0a4      	b.n	800b232 <UART_SetConfig+0x5a6>
 800b0e8:	697b      	ldr	r3, [r7, #20]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	4a8f      	ldr	r2, [pc, #572]	@ (800b32c <UART_SetConfig+0x6a0>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d130      	bne.n	800b154 <UART_SetConfig+0x4c8>
 800b0f2:	4b8d      	ldr	r3, [pc, #564]	@ (800b328 <UART_SetConfig+0x69c>)
 800b0f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b0f6:	f003 0307 	and.w	r3, r3, #7
 800b0fa:	2b05      	cmp	r3, #5
 800b0fc:	d826      	bhi.n	800b14c <UART_SetConfig+0x4c0>
 800b0fe:	a201      	add	r2, pc, #4	@ (adr r2, 800b104 <UART_SetConfig+0x478>)
 800b100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b104:	0800b11d 	.word	0x0800b11d
 800b108:	0800b125 	.word	0x0800b125
 800b10c:	0800b12d 	.word	0x0800b12d
 800b110:	0800b135 	.word	0x0800b135
 800b114:	0800b13d 	.word	0x0800b13d
 800b118:	0800b145 	.word	0x0800b145
 800b11c:	2300      	movs	r3, #0
 800b11e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b122:	e086      	b.n	800b232 <UART_SetConfig+0x5a6>
 800b124:	2304      	movs	r3, #4
 800b126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b12a:	e082      	b.n	800b232 <UART_SetConfig+0x5a6>
 800b12c:	2308      	movs	r3, #8
 800b12e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b132:	e07e      	b.n	800b232 <UART_SetConfig+0x5a6>
 800b134:	2310      	movs	r3, #16
 800b136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b13a:	e07a      	b.n	800b232 <UART_SetConfig+0x5a6>
 800b13c:	2320      	movs	r3, #32
 800b13e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b142:	e076      	b.n	800b232 <UART_SetConfig+0x5a6>
 800b144:	2340      	movs	r3, #64	@ 0x40
 800b146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b14a:	e072      	b.n	800b232 <UART_SetConfig+0x5a6>
 800b14c:	2380      	movs	r3, #128	@ 0x80
 800b14e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b152:	e06e      	b.n	800b232 <UART_SetConfig+0x5a6>
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4a75      	ldr	r2, [pc, #468]	@ (800b330 <UART_SetConfig+0x6a4>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d130      	bne.n	800b1c0 <UART_SetConfig+0x534>
 800b15e:	4b72      	ldr	r3, [pc, #456]	@ (800b328 <UART_SetConfig+0x69c>)
 800b160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b162:	f003 0307 	and.w	r3, r3, #7
 800b166:	2b05      	cmp	r3, #5
 800b168:	d826      	bhi.n	800b1b8 <UART_SetConfig+0x52c>
 800b16a:	a201      	add	r2, pc, #4	@ (adr r2, 800b170 <UART_SetConfig+0x4e4>)
 800b16c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b170:	0800b189 	.word	0x0800b189
 800b174:	0800b191 	.word	0x0800b191
 800b178:	0800b199 	.word	0x0800b199
 800b17c:	0800b1a1 	.word	0x0800b1a1
 800b180:	0800b1a9 	.word	0x0800b1a9
 800b184:	0800b1b1 	.word	0x0800b1b1
 800b188:	2300      	movs	r3, #0
 800b18a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b18e:	e050      	b.n	800b232 <UART_SetConfig+0x5a6>
 800b190:	2304      	movs	r3, #4
 800b192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b196:	e04c      	b.n	800b232 <UART_SetConfig+0x5a6>
 800b198:	2308      	movs	r3, #8
 800b19a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b19e:	e048      	b.n	800b232 <UART_SetConfig+0x5a6>
 800b1a0:	2310      	movs	r3, #16
 800b1a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1a6:	e044      	b.n	800b232 <UART_SetConfig+0x5a6>
 800b1a8:	2320      	movs	r3, #32
 800b1aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1ae:	e040      	b.n	800b232 <UART_SetConfig+0x5a6>
 800b1b0:	2340      	movs	r3, #64	@ 0x40
 800b1b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1b6:	e03c      	b.n	800b232 <UART_SetConfig+0x5a6>
 800b1b8:	2380      	movs	r3, #128	@ 0x80
 800b1ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1be:	e038      	b.n	800b232 <UART_SetConfig+0x5a6>
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	4a5b      	ldr	r2, [pc, #364]	@ (800b334 <UART_SetConfig+0x6a8>)
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	d130      	bne.n	800b22c <UART_SetConfig+0x5a0>
 800b1ca:	4b57      	ldr	r3, [pc, #348]	@ (800b328 <UART_SetConfig+0x69c>)
 800b1cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b1ce:	f003 0307 	and.w	r3, r3, #7
 800b1d2:	2b05      	cmp	r3, #5
 800b1d4:	d826      	bhi.n	800b224 <UART_SetConfig+0x598>
 800b1d6:	a201      	add	r2, pc, #4	@ (adr r2, 800b1dc <UART_SetConfig+0x550>)
 800b1d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1dc:	0800b1f5 	.word	0x0800b1f5
 800b1e0:	0800b1fd 	.word	0x0800b1fd
 800b1e4:	0800b205 	.word	0x0800b205
 800b1e8:	0800b20d 	.word	0x0800b20d
 800b1ec:	0800b215 	.word	0x0800b215
 800b1f0:	0800b21d 	.word	0x0800b21d
 800b1f4:	2302      	movs	r3, #2
 800b1f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1fa:	e01a      	b.n	800b232 <UART_SetConfig+0x5a6>
 800b1fc:	2304      	movs	r3, #4
 800b1fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b202:	e016      	b.n	800b232 <UART_SetConfig+0x5a6>
 800b204:	2308      	movs	r3, #8
 800b206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b20a:	e012      	b.n	800b232 <UART_SetConfig+0x5a6>
 800b20c:	2310      	movs	r3, #16
 800b20e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b212:	e00e      	b.n	800b232 <UART_SetConfig+0x5a6>
 800b214:	2320      	movs	r3, #32
 800b216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b21a:	e00a      	b.n	800b232 <UART_SetConfig+0x5a6>
 800b21c:	2340      	movs	r3, #64	@ 0x40
 800b21e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b222:	e006      	b.n	800b232 <UART_SetConfig+0x5a6>
 800b224:	2380      	movs	r3, #128	@ 0x80
 800b226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b22a:	e002      	b.n	800b232 <UART_SetConfig+0x5a6>
 800b22c:	2380      	movs	r3, #128	@ 0x80
 800b22e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	4a3f      	ldr	r2, [pc, #252]	@ (800b334 <UART_SetConfig+0x6a8>)
 800b238:	4293      	cmp	r3, r2
 800b23a:	f040 80f8 	bne.w	800b42e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b23e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b242:	2b20      	cmp	r3, #32
 800b244:	dc46      	bgt.n	800b2d4 <UART_SetConfig+0x648>
 800b246:	2b02      	cmp	r3, #2
 800b248:	f2c0 8082 	blt.w	800b350 <UART_SetConfig+0x6c4>
 800b24c:	3b02      	subs	r3, #2
 800b24e:	2b1e      	cmp	r3, #30
 800b250:	d87e      	bhi.n	800b350 <UART_SetConfig+0x6c4>
 800b252:	a201      	add	r2, pc, #4	@ (adr r2, 800b258 <UART_SetConfig+0x5cc>)
 800b254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b258:	0800b2db 	.word	0x0800b2db
 800b25c:	0800b351 	.word	0x0800b351
 800b260:	0800b2e3 	.word	0x0800b2e3
 800b264:	0800b351 	.word	0x0800b351
 800b268:	0800b351 	.word	0x0800b351
 800b26c:	0800b351 	.word	0x0800b351
 800b270:	0800b2f3 	.word	0x0800b2f3
 800b274:	0800b351 	.word	0x0800b351
 800b278:	0800b351 	.word	0x0800b351
 800b27c:	0800b351 	.word	0x0800b351
 800b280:	0800b351 	.word	0x0800b351
 800b284:	0800b351 	.word	0x0800b351
 800b288:	0800b351 	.word	0x0800b351
 800b28c:	0800b351 	.word	0x0800b351
 800b290:	0800b303 	.word	0x0800b303
 800b294:	0800b351 	.word	0x0800b351
 800b298:	0800b351 	.word	0x0800b351
 800b29c:	0800b351 	.word	0x0800b351
 800b2a0:	0800b351 	.word	0x0800b351
 800b2a4:	0800b351 	.word	0x0800b351
 800b2a8:	0800b351 	.word	0x0800b351
 800b2ac:	0800b351 	.word	0x0800b351
 800b2b0:	0800b351 	.word	0x0800b351
 800b2b4:	0800b351 	.word	0x0800b351
 800b2b8:	0800b351 	.word	0x0800b351
 800b2bc:	0800b351 	.word	0x0800b351
 800b2c0:	0800b351 	.word	0x0800b351
 800b2c4:	0800b351 	.word	0x0800b351
 800b2c8:	0800b351 	.word	0x0800b351
 800b2cc:	0800b351 	.word	0x0800b351
 800b2d0:	0800b343 	.word	0x0800b343
 800b2d4:	2b40      	cmp	r3, #64	@ 0x40
 800b2d6:	d037      	beq.n	800b348 <UART_SetConfig+0x6bc>
 800b2d8:	e03a      	b.n	800b350 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b2da:	f7fe ffe9 	bl	800a2b0 <HAL_RCCEx_GetD3PCLK1Freq>
 800b2de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b2e0:	e03c      	b.n	800b35c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f7fe fff8 	bl	800a2dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b2ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2f0:	e034      	b.n	800b35c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2f2:	f107 0318 	add.w	r3, r7, #24
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f7ff f944 	bl	800a584 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b2fc:	69fb      	ldr	r3, [r7, #28]
 800b2fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b300:	e02c      	b.n	800b35c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b302:	4b09      	ldr	r3, [pc, #36]	@ (800b328 <UART_SetConfig+0x69c>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f003 0320 	and.w	r3, r3, #32
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d016      	beq.n	800b33c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b30e:	4b06      	ldr	r3, [pc, #24]	@ (800b328 <UART_SetConfig+0x69c>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	08db      	lsrs	r3, r3, #3
 800b314:	f003 0303 	and.w	r3, r3, #3
 800b318:	4a07      	ldr	r2, [pc, #28]	@ (800b338 <UART_SetConfig+0x6ac>)
 800b31a:	fa22 f303 	lsr.w	r3, r2, r3
 800b31e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b320:	e01c      	b.n	800b35c <UART_SetConfig+0x6d0>
 800b322:	bf00      	nop
 800b324:	40011400 	.word	0x40011400
 800b328:	58024400 	.word	0x58024400
 800b32c:	40007800 	.word	0x40007800
 800b330:	40007c00 	.word	0x40007c00
 800b334:	58000c00 	.word	0x58000c00
 800b338:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b33c:	4b9d      	ldr	r3, [pc, #628]	@ (800b5b4 <UART_SetConfig+0x928>)
 800b33e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b340:	e00c      	b.n	800b35c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b342:	4b9d      	ldr	r3, [pc, #628]	@ (800b5b8 <UART_SetConfig+0x92c>)
 800b344:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b346:	e009      	b.n	800b35c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b348:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b34c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b34e:	e005      	b.n	800b35c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b350:	2300      	movs	r3, #0
 800b352:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b354:	2301      	movs	r3, #1
 800b356:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b35a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b35c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b35e:	2b00      	cmp	r3, #0
 800b360:	f000 81de 	beq.w	800b720 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b364:	697b      	ldr	r3, [r7, #20]
 800b366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b368:	4a94      	ldr	r2, [pc, #592]	@ (800b5bc <UART_SetConfig+0x930>)
 800b36a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b36e:	461a      	mov	r2, r3
 800b370:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b372:	fbb3 f3f2 	udiv	r3, r3, r2
 800b376:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	685a      	ldr	r2, [r3, #4]
 800b37c:	4613      	mov	r3, r2
 800b37e:	005b      	lsls	r3, r3, #1
 800b380:	4413      	add	r3, r2
 800b382:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b384:	429a      	cmp	r2, r3
 800b386:	d305      	bcc.n	800b394 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	685b      	ldr	r3, [r3, #4]
 800b38c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b38e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b390:	429a      	cmp	r2, r3
 800b392:	d903      	bls.n	800b39c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b394:	2301      	movs	r3, #1
 800b396:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b39a:	e1c1      	b.n	800b720 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b39c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b39e:	2200      	movs	r2, #0
 800b3a0:	60bb      	str	r3, [r7, #8]
 800b3a2:	60fa      	str	r2, [r7, #12]
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3a8:	4a84      	ldr	r2, [pc, #528]	@ (800b5bc <UART_SetConfig+0x930>)
 800b3aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3ae:	b29b      	uxth	r3, r3
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	603b      	str	r3, [r7, #0]
 800b3b4:	607a      	str	r2, [r7, #4]
 800b3b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b3be:	f7f5 f9b3 	bl	8000728 <__aeabi_uldivmod>
 800b3c2:	4602      	mov	r2, r0
 800b3c4:	460b      	mov	r3, r1
 800b3c6:	4610      	mov	r0, r2
 800b3c8:	4619      	mov	r1, r3
 800b3ca:	f04f 0200 	mov.w	r2, #0
 800b3ce:	f04f 0300 	mov.w	r3, #0
 800b3d2:	020b      	lsls	r3, r1, #8
 800b3d4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b3d8:	0202      	lsls	r2, r0, #8
 800b3da:	6979      	ldr	r1, [r7, #20]
 800b3dc:	6849      	ldr	r1, [r1, #4]
 800b3de:	0849      	lsrs	r1, r1, #1
 800b3e0:	2000      	movs	r0, #0
 800b3e2:	460c      	mov	r4, r1
 800b3e4:	4605      	mov	r5, r0
 800b3e6:	eb12 0804 	adds.w	r8, r2, r4
 800b3ea:	eb43 0905 	adc.w	r9, r3, r5
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	685b      	ldr	r3, [r3, #4]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	469a      	mov	sl, r3
 800b3f6:	4693      	mov	fp, r2
 800b3f8:	4652      	mov	r2, sl
 800b3fa:	465b      	mov	r3, fp
 800b3fc:	4640      	mov	r0, r8
 800b3fe:	4649      	mov	r1, r9
 800b400:	f7f5 f992 	bl	8000728 <__aeabi_uldivmod>
 800b404:	4602      	mov	r2, r0
 800b406:	460b      	mov	r3, r1
 800b408:	4613      	mov	r3, r2
 800b40a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b40c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b40e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b412:	d308      	bcc.n	800b426 <UART_SetConfig+0x79a>
 800b414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b416:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b41a:	d204      	bcs.n	800b426 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b422:	60da      	str	r2, [r3, #12]
 800b424:	e17c      	b.n	800b720 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b426:	2301      	movs	r3, #1
 800b428:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b42c:	e178      	b.n	800b720 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	69db      	ldr	r3, [r3, #28]
 800b432:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b436:	f040 80c5 	bne.w	800b5c4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b43a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b43e:	2b20      	cmp	r3, #32
 800b440:	dc48      	bgt.n	800b4d4 <UART_SetConfig+0x848>
 800b442:	2b00      	cmp	r3, #0
 800b444:	db7b      	blt.n	800b53e <UART_SetConfig+0x8b2>
 800b446:	2b20      	cmp	r3, #32
 800b448:	d879      	bhi.n	800b53e <UART_SetConfig+0x8b2>
 800b44a:	a201      	add	r2, pc, #4	@ (adr r2, 800b450 <UART_SetConfig+0x7c4>)
 800b44c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b450:	0800b4db 	.word	0x0800b4db
 800b454:	0800b4e3 	.word	0x0800b4e3
 800b458:	0800b53f 	.word	0x0800b53f
 800b45c:	0800b53f 	.word	0x0800b53f
 800b460:	0800b4eb 	.word	0x0800b4eb
 800b464:	0800b53f 	.word	0x0800b53f
 800b468:	0800b53f 	.word	0x0800b53f
 800b46c:	0800b53f 	.word	0x0800b53f
 800b470:	0800b4fb 	.word	0x0800b4fb
 800b474:	0800b53f 	.word	0x0800b53f
 800b478:	0800b53f 	.word	0x0800b53f
 800b47c:	0800b53f 	.word	0x0800b53f
 800b480:	0800b53f 	.word	0x0800b53f
 800b484:	0800b53f 	.word	0x0800b53f
 800b488:	0800b53f 	.word	0x0800b53f
 800b48c:	0800b53f 	.word	0x0800b53f
 800b490:	0800b50b 	.word	0x0800b50b
 800b494:	0800b53f 	.word	0x0800b53f
 800b498:	0800b53f 	.word	0x0800b53f
 800b49c:	0800b53f 	.word	0x0800b53f
 800b4a0:	0800b53f 	.word	0x0800b53f
 800b4a4:	0800b53f 	.word	0x0800b53f
 800b4a8:	0800b53f 	.word	0x0800b53f
 800b4ac:	0800b53f 	.word	0x0800b53f
 800b4b0:	0800b53f 	.word	0x0800b53f
 800b4b4:	0800b53f 	.word	0x0800b53f
 800b4b8:	0800b53f 	.word	0x0800b53f
 800b4bc:	0800b53f 	.word	0x0800b53f
 800b4c0:	0800b53f 	.word	0x0800b53f
 800b4c4:	0800b53f 	.word	0x0800b53f
 800b4c8:	0800b53f 	.word	0x0800b53f
 800b4cc:	0800b53f 	.word	0x0800b53f
 800b4d0:	0800b531 	.word	0x0800b531
 800b4d4:	2b40      	cmp	r3, #64	@ 0x40
 800b4d6:	d02e      	beq.n	800b536 <UART_SetConfig+0x8aa>
 800b4d8:	e031      	b.n	800b53e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b4da:	f7fe f93d 	bl	8009758 <HAL_RCC_GetPCLK1Freq>
 800b4de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b4e0:	e033      	b.n	800b54a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b4e2:	f7fe f94f 	bl	8009784 <HAL_RCC_GetPCLK2Freq>
 800b4e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b4e8:	e02f      	b.n	800b54a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b4ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f7fe fef4 	bl	800a2dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b4f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4f8:	e027      	b.n	800b54a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b4fa:	f107 0318 	add.w	r3, r7, #24
 800b4fe:	4618      	mov	r0, r3
 800b500:	f7ff f840 	bl	800a584 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b504:	69fb      	ldr	r3, [r7, #28]
 800b506:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b508:	e01f      	b.n	800b54a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b50a:	4b2d      	ldr	r3, [pc, #180]	@ (800b5c0 <UART_SetConfig+0x934>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f003 0320 	and.w	r3, r3, #32
 800b512:	2b00      	cmp	r3, #0
 800b514:	d009      	beq.n	800b52a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b516:	4b2a      	ldr	r3, [pc, #168]	@ (800b5c0 <UART_SetConfig+0x934>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	08db      	lsrs	r3, r3, #3
 800b51c:	f003 0303 	and.w	r3, r3, #3
 800b520:	4a24      	ldr	r2, [pc, #144]	@ (800b5b4 <UART_SetConfig+0x928>)
 800b522:	fa22 f303 	lsr.w	r3, r2, r3
 800b526:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b528:	e00f      	b.n	800b54a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b52a:	4b22      	ldr	r3, [pc, #136]	@ (800b5b4 <UART_SetConfig+0x928>)
 800b52c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b52e:	e00c      	b.n	800b54a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b530:	4b21      	ldr	r3, [pc, #132]	@ (800b5b8 <UART_SetConfig+0x92c>)
 800b532:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b534:	e009      	b.n	800b54a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b536:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b53a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b53c:	e005      	b.n	800b54a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b53e:	2300      	movs	r3, #0
 800b540:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b542:	2301      	movs	r3, #1
 800b544:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b548:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b54a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	f000 80e7 	beq.w	800b720 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b556:	4a19      	ldr	r2, [pc, #100]	@ (800b5bc <UART_SetConfig+0x930>)
 800b558:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b55c:	461a      	mov	r2, r3
 800b55e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b560:	fbb3 f3f2 	udiv	r3, r3, r2
 800b564:	005a      	lsls	r2, r3, #1
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	685b      	ldr	r3, [r3, #4]
 800b56a:	085b      	lsrs	r3, r3, #1
 800b56c:	441a      	add	r2, r3
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	685b      	ldr	r3, [r3, #4]
 800b572:	fbb2 f3f3 	udiv	r3, r2, r3
 800b576:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b57a:	2b0f      	cmp	r3, #15
 800b57c:	d916      	bls.n	800b5ac <UART_SetConfig+0x920>
 800b57e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b580:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b584:	d212      	bcs.n	800b5ac <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b588:	b29b      	uxth	r3, r3
 800b58a:	f023 030f 	bic.w	r3, r3, #15
 800b58e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b592:	085b      	lsrs	r3, r3, #1
 800b594:	b29b      	uxth	r3, r3
 800b596:	f003 0307 	and.w	r3, r3, #7
 800b59a:	b29a      	uxth	r2, r3
 800b59c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b59e:	4313      	orrs	r3, r2
 800b5a0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b5a8:	60da      	str	r2, [r3, #12]
 800b5aa:	e0b9      	b.n	800b720 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b5b2:	e0b5      	b.n	800b720 <UART_SetConfig+0xa94>
 800b5b4:	03d09000 	.word	0x03d09000
 800b5b8:	003d0900 	.word	0x003d0900
 800b5bc:	0801e3c4 	.word	0x0801e3c4
 800b5c0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b5c4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b5c8:	2b20      	cmp	r3, #32
 800b5ca:	dc49      	bgt.n	800b660 <UART_SetConfig+0x9d4>
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	db7c      	blt.n	800b6ca <UART_SetConfig+0xa3e>
 800b5d0:	2b20      	cmp	r3, #32
 800b5d2:	d87a      	bhi.n	800b6ca <UART_SetConfig+0xa3e>
 800b5d4:	a201      	add	r2, pc, #4	@ (adr r2, 800b5dc <UART_SetConfig+0x950>)
 800b5d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5da:	bf00      	nop
 800b5dc:	0800b667 	.word	0x0800b667
 800b5e0:	0800b66f 	.word	0x0800b66f
 800b5e4:	0800b6cb 	.word	0x0800b6cb
 800b5e8:	0800b6cb 	.word	0x0800b6cb
 800b5ec:	0800b677 	.word	0x0800b677
 800b5f0:	0800b6cb 	.word	0x0800b6cb
 800b5f4:	0800b6cb 	.word	0x0800b6cb
 800b5f8:	0800b6cb 	.word	0x0800b6cb
 800b5fc:	0800b687 	.word	0x0800b687
 800b600:	0800b6cb 	.word	0x0800b6cb
 800b604:	0800b6cb 	.word	0x0800b6cb
 800b608:	0800b6cb 	.word	0x0800b6cb
 800b60c:	0800b6cb 	.word	0x0800b6cb
 800b610:	0800b6cb 	.word	0x0800b6cb
 800b614:	0800b6cb 	.word	0x0800b6cb
 800b618:	0800b6cb 	.word	0x0800b6cb
 800b61c:	0800b697 	.word	0x0800b697
 800b620:	0800b6cb 	.word	0x0800b6cb
 800b624:	0800b6cb 	.word	0x0800b6cb
 800b628:	0800b6cb 	.word	0x0800b6cb
 800b62c:	0800b6cb 	.word	0x0800b6cb
 800b630:	0800b6cb 	.word	0x0800b6cb
 800b634:	0800b6cb 	.word	0x0800b6cb
 800b638:	0800b6cb 	.word	0x0800b6cb
 800b63c:	0800b6cb 	.word	0x0800b6cb
 800b640:	0800b6cb 	.word	0x0800b6cb
 800b644:	0800b6cb 	.word	0x0800b6cb
 800b648:	0800b6cb 	.word	0x0800b6cb
 800b64c:	0800b6cb 	.word	0x0800b6cb
 800b650:	0800b6cb 	.word	0x0800b6cb
 800b654:	0800b6cb 	.word	0x0800b6cb
 800b658:	0800b6cb 	.word	0x0800b6cb
 800b65c:	0800b6bd 	.word	0x0800b6bd
 800b660:	2b40      	cmp	r3, #64	@ 0x40
 800b662:	d02e      	beq.n	800b6c2 <UART_SetConfig+0xa36>
 800b664:	e031      	b.n	800b6ca <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b666:	f7fe f877 	bl	8009758 <HAL_RCC_GetPCLK1Freq>
 800b66a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b66c:	e033      	b.n	800b6d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b66e:	f7fe f889 	bl	8009784 <HAL_RCC_GetPCLK2Freq>
 800b672:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b674:	e02f      	b.n	800b6d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b676:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b67a:	4618      	mov	r0, r3
 800b67c:	f7fe fe2e 	bl	800a2dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b682:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b684:	e027      	b.n	800b6d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b686:	f107 0318 	add.w	r3, r7, #24
 800b68a:	4618      	mov	r0, r3
 800b68c:	f7fe ff7a 	bl	800a584 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b690:	69fb      	ldr	r3, [r7, #28]
 800b692:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b694:	e01f      	b.n	800b6d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b696:	4b2d      	ldr	r3, [pc, #180]	@ (800b74c <UART_SetConfig+0xac0>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f003 0320 	and.w	r3, r3, #32
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d009      	beq.n	800b6b6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b6a2:	4b2a      	ldr	r3, [pc, #168]	@ (800b74c <UART_SetConfig+0xac0>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	08db      	lsrs	r3, r3, #3
 800b6a8:	f003 0303 	and.w	r3, r3, #3
 800b6ac:	4a28      	ldr	r2, [pc, #160]	@ (800b750 <UART_SetConfig+0xac4>)
 800b6ae:	fa22 f303 	lsr.w	r3, r2, r3
 800b6b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b6b4:	e00f      	b.n	800b6d6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b6b6:	4b26      	ldr	r3, [pc, #152]	@ (800b750 <UART_SetConfig+0xac4>)
 800b6b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6ba:	e00c      	b.n	800b6d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b6bc:	4b25      	ldr	r3, [pc, #148]	@ (800b754 <UART_SetConfig+0xac8>)
 800b6be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6c0:	e009      	b.n	800b6d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b6c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b6c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6c8:	e005      	b.n	800b6d6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b6d4:	bf00      	nop
    }

    if (pclk != 0U)
 800b6d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d021      	beq.n	800b720 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b6dc:	697b      	ldr	r3, [r7, #20]
 800b6de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6e0:	4a1d      	ldr	r2, [pc, #116]	@ (800b758 <UART_SetConfig+0xacc>)
 800b6e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6e6:	461a      	mov	r2, r3
 800b6e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6ea:	fbb3 f2f2 	udiv	r2, r3, r2
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	685b      	ldr	r3, [r3, #4]
 800b6f2:	085b      	lsrs	r3, r3, #1
 800b6f4:	441a      	add	r2, r3
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	685b      	ldr	r3, [r3, #4]
 800b6fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b702:	2b0f      	cmp	r3, #15
 800b704:	d909      	bls.n	800b71a <UART_SetConfig+0xa8e>
 800b706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b708:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b70c:	d205      	bcs.n	800b71a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b70e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b710:	b29a      	uxth	r2, r3
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	60da      	str	r2, [r3, #12]
 800b718:	e002      	b.n	800b720 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b71a:	2301      	movs	r3, #1
 800b71c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	2201      	movs	r2, #1
 800b724:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	2201      	movs	r2, #1
 800b72c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	2200      	movs	r2, #0
 800b734:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b736:	697b      	ldr	r3, [r7, #20]
 800b738:	2200      	movs	r2, #0
 800b73a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b73c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b740:	4618      	mov	r0, r3
 800b742:	3748      	adds	r7, #72	@ 0x48
 800b744:	46bd      	mov	sp, r7
 800b746:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b74a:	bf00      	nop
 800b74c:	58024400 	.word	0x58024400
 800b750:	03d09000 	.word	0x03d09000
 800b754:	003d0900 	.word	0x003d0900
 800b758:	0801e3c4 	.word	0x0801e3c4

0800b75c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b75c:	b480      	push	{r7}
 800b75e:	b083      	sub	sp, #12
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b768:	f003 0308 	and.w	r3, r3, #8
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d00a      	beq.n	800b786 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	685b      	ldr	r3, [r3, #4]
 800b776:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	430a      	orrs	r2, r1
 800b784:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b78a:	f003 0301 	and.w	r3, r3, #1
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d00a      	beq.n	800b7a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	685b      	ldr	r3, [r3, #4]
 800b798:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	430a      	orrs	r2, r1
 800b7a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7ac:	f003 0302 	and.w	r3, r3, #2
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d00a      	beq.n	800b7ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	685b      	ldr	r3, [r3, #4]
 800b7ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	430a      	orrs	r2, r1
 800b7c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7ce:	f003 0304 	and.w	r3, r3, #4
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d00a      	beq.n	800b7ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	685b      	ldr	r3, [r3, #4]
 800b7dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	430a      	orrs	r2, r1
 800b7ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7f0:	f003 0310 	and.w	r3, r3, #16
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d00a      	beq.n	800b80e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	689b      	ldr	r3, [r3, #8]
 800b7fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	430a      	orrs	r2, r1
 800b80c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b812:	f003 0320 	and.w	r3, r3, #32
 800b816:	2b00      	cmp	r3, #0
 800b818:	d00a      	beq.n	800b830 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	689b      	ldr	r3, [r3, #8]
 800b820:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	430a      	orrs	r2, r1
 800b82e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d01a      	beq.n	800b872 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	685b      	ldr	r3, [r3, #4]
 800b842:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	430a      	orrs	r2, r1
 800b850:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b856:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b85a:	d10a      	bne.n	800b872 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	685b      	ldr	r3, [r3, #4]
 800b862:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	430a      	orrs	r2, r1
 800b870:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d00a      	beq.n	800b894 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	685b      	ldr	r3, [r3, #4]
 800b884:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	430a      	orrs	r2, r1
 800b892:	605a      	str	r2, [r3, #4]
  }
}
 800b894:	bf00      	nop
 800b896:	370c      	adds	r7, #12
 800b898:	46bd      	mov	sp, r7
 800b89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89e:	4770      	bx	lr

0800b8a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b098      	sub	sp, #96	@ 0x60
 800b8a4:	af02      	add	r7, sp, #8
 800b8a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b8b0:	f7fa fa8a 	bl	8005dc8 <HAL_GetTick>
 800b8b4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f003 0308 	and.w	r3, r3, #8
 800b8c0:	2b08      	cmp	r3, #8
 800b8c2:	d12f      	bne.n	800b924 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b8c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b8c8:	9300      	str	r3, [sp, #0]
 800b8ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f000 f88e 	bl	800b9f4 <UART_WaitOnFlagUntilTimeout>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d022      	beq.n	800b924 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8e6:	e853 3f00 	ldrex	r3, [r3]
 800b8ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b8ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b8f2:	653b      	str	r3, [r7, #80]	@ 0x50
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b8fc:	647b      	str	r3, [r7, #68]	@ 0x44
 800b8fe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b900:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b902:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b904:	e841 2300 	strex	r3, r2, [r1]
 800b908:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b90a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d1e6      	bne.n	800b8de <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2220      	movs	r2, #32
 800b914:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2200      	movs	r2, #0
 800b91c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b920:	2303      	movs	r3, #3
 800b922:	e063      	b.n	800b9ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f003 0304 	and.w	r3, r3, #4
 800b92e:	2b04      	cmp	r3, #4
 800b930:	d149      	bne.n	800b9c6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b932:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b936:	9300      	str	r3, [sp, #0]
 800b938:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b93a:	2200      	movs	r2, #0
 800b93c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f000 f857 	bl	800b9f4 <UART_WaitOnFlagUntilTimeout>
 800b946:	4603      	mov	r3, r0
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d03c      	beq.n	800b9c6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b954:	e853 3f00 	ldrex	r3, [r3]
 800b958:	623b      	str	r3, [r7, #32]
   return(result);
 800b95a:	6a3b      	ldr	r3, [r7, #32]
 800b95c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b960:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	461a      	mov	r2, r3
 800b968:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b96a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b96c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b96e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b970:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b972:	e841 2300 	strex	r3, r2, [r1]
 800b976:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d1e6      	bne.n	800b94c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	3308      	adds	r3, #8
 800b984:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	e853 3f00 	ldrex	r3, [r3]
 800b98c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	f023 0301 	bic.w	r3, r3, #1
 800b994:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	3308      	adds	r3, #8
 800b99c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b99e:	61fa      	str	r2, [r7, #28]
 800b9a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9a2:	69b9      	ldr	r1, [r7, #24]
 800b9a4:	69fa      	ldr	r2, [r7, #28]
 800b9a6:	e841 2300 	strex	r3, r2, [r1]
 800b9aa:	617b      	str	r3, [r7, #20]
   return(result);
 800b9ac:	697b      	ldr	r3, [r7, #20]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d1e5      	bne.n	800b97e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2220      	movs	r2, #32
 800b9b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b9c2:	2303      	movs	r3, #3
 800b9c4:	e012      	b.n	800b9ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2220      	movs	r2, #32
 800b9ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2220      	movs	r2, #32
 800b9d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2200      	movs	r2, #0
 800b9da:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b9ea:	2300      	movs	r3, #0
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3758      	adds	r7, #88	@ 0x58
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}

0800b9f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b084      	sub	sp, #16
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	60f8      	str	r0, [r7, #12]
 800b9fc:	60b9      	str	r1, [r7, #8]
 800b9fe:	603b      	str	r3, [r7, #0]
 800ba00:	4613      	mov	r3, r2
 800ba02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba04:	e04f      	b.n	800baa6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba06:	69bb      	ldr	r3, [r7, #24]
 800ba08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba0c:	d04b      	beq.n	800baa6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba0e:	f7fa f9db 	bl	8005dc8 <HAL_GetTick>
 800ba12:	4602      	mov	r2, r0
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	1ad3      	subs	r3, r2, r3
 800ba18:	69ba      	ldr	r2, [r7, #24]
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	d302      	bcc.n	800ba24 <UART_WaitOnFlagUntilTimeout+0x30>
 800ba1e:	69bb      	ldr	r3, [r7, #24]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d101      	bne.n	800ba28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ba24:	2303      	movs	r3, #3
 800ba26:	e04e      	b.n	800bac6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f003 0304 	and.w	r3, r3, #4
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d037      	beq.n	800baa6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ba36:	68bb      	ldr	r3, [r7, #8]
 800ba38:	2b80      	cmp	r3, #128	@ 0x80
 800ba3a:	d034      	beq.n	800baa6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	2b40      	cmp	r3, #64	@ 0x40
 800ba40:	d031      	beq.n	800baa6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	69db      	ldr	r3, [r3, #28]
 800ba48:	f003 0308 	and.w	r3, r3, #8
 800ba4c:	2b08      	cmp	r3, #8
 800ba4e:	d110      	bne.n	800ba72 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	2208      	movs	r2, #8
 800ba56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ba58:	68f8      	ldr	r0, [r7, #12]
 800ba5a:	f000 f839 	bl	800bad0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	2208      	movs	r2, #8
 800ba62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	2200      	movs	r2, #0
 800ba6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ba6e:	2301      	movs	r3, #1
 800ba70:	e029      	b.n	800bac6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	69db      	ldr	r3, [r3, #28]
 800ba78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ba7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ba80:	d111      	bne.n	800baa6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ba8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ba8c:	68f8      	ldr	r0, [r7, #12]
 800ba8e:	f000 f81f 	bl	800bad0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	2220      	movs	r2, #32
 800ba96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800baa2:	2303      	movs	r3, #3
 800baa4:	e00f      	b.n	800bac6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	69da      	ldr	r2, [r3, #28]
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	4013      	ands	r3, r2
 800bab0:	68ba      	ldr	r2, [r7, #8]
 800bab2:	429a      	cmp	r2, r3
 800bab4:	bf0c      	ite	eq
 800bab6:	2301      	moveq	r3, #1
 800bab8:	2300      	movne	r3, #0
 800baba:	b2db      	uxtb	r3, r3
 800babc:	461a      	mov	r2, r3
 800babe:	79fb      	ldrb	r3, [r7, #7]
 800bac0:	429a      	cmp	r2, r3
 800bac2:	d0a0      	beq.n	800ba06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bac4:	2300      	movs	r3, #0
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	3710      	adds	r7, #16
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}
	...

0800bad0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bad0:	b480      	push	{r7}
 800bad2:	b095      	sub	sp, #84	@ 0x54
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bae0:	e853 3f00 	ldrex	r3, [r3]
 800bae4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bae8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800baec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	461a      	mov	r2, r3
 800baf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800baf6:	643b      	str	r3, [r7, #64]	@ 0x40
 800baf8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bafa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bafc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bafe:	e841 2300 	strex	r3, r2, [r1]
 800bb02:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bb04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d1e6      	bne.n	800bad8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	3308      	adds	r3, #8
 800bb10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb12:	6a3b      	ldr	r3, [r7, #32]
 800bb14:	e853 3f00 	ldrex	r3, [r3]
 800bb18:	61fb      	str	r3, [r7, #28]
   return(result);
 800bb1a:	69fa      	ldr	r2, [r7, #28]
 800bb1c:	4b1e      	ldr	r3, [pc, #120]	@ (800bb98 <UART_EndRxTransfer+0xc8>)
 800bb1e:	4013      	ands	r3, r2
 800bb20:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	3308      	adds	r3, #8
 800bb28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bb2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bb2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bb30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb32:	e841 2300 	strex	r3, r2, [r1]
 800bb36:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bb38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d1e5      	bne.n	800bb0a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb42:	2b01      	cmp	r3, #1
 800bb44:	d118      	bne.n	800bb78 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	e853 3f00 	ldrex	r3, [r3]
 800bb52:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	f023 0310 	bic.w	r3, r3, #16
 800bb5a:	647b      	str	r3, [r7, #68]	@ 0x44
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	461a      	mov	r2, r3
 800bb62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb64:	61bb      	str	r3, [r7, #24]
 800bb66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb68:	6979      	ldr	r1, [r7, #20]
 800bb6a:	69ba      	ldr	r2, [r7, #24]
 800bb6c:	e841 2300 	strex	r3, r2, [r1]
 800bb70:	613b      	str	r3, [r7, #16]
   return(result);
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d1e6      	bne.n	800bb46 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2220      	movs	r2, #32
 800bb7c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2200      	movs	r2, #0
 800bb84:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2200      	movs	r2, #0
 800bb8a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bb8c:	bf00      	nop
 800bb8e:	3754      	adds	r7, #84	@ 0x54
 800bb90:	46bd      	mov	sp, r7
 800bb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb96:	4770      	bx	lr
 800bb98:	effffffe 	.word	0xeffffffe

0800bb9c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b085      	sub	sp, #20
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bbaa:	2b01      	cmp	r3, #1
 800bbac:	d101      	bne.n	800bbb2 <HAL_UARTEx_DisableFifoMode+0x16>
 800bbae:	2302      	movs	r3, #2
 800bbb0:	e027      	b.n	800bc02 <HAL_UARTEx_DisableFifoMode+0x66>
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2201      	movs	r2, #1
 800bbb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2224      	movs	r2, #36	@ 0x24
 800bbbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	681a      	ldr	r2, [r3, #0]
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f022 0201 	bic.w	r2, r2, #1
 800bbd8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bbe0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	68fa      	ldr	r2, [r7, #12]
 800bbee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2220      	movs	r2, #32
 800bbf4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bc00:	2300      	movs	r3, #0
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	3714      	adds	r7, #20
 800bc06:	46bd      	mov	sp, r7
 800bc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0c:	4770      	bx	lr

0800bc0e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bc0e:	b580      	push	{r7, lr}
 800bc10:	b084      	sub	sp, #16
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	6078      	str	r0, [r7, #4]
 800bc16:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bc1e:	2b01      	cmp	r3, #1
 800bc20:	d101      	bne.n	800bc26 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bc22:	2302      	movs	r3, #2
 800bc24:	e02d      	b.n	800bc82 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2201      	movs	r2, #1
 800bc2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2224      	movs	r2, #36	@ 0x24
 800bc32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	681a      	ldr	r2, [r3, #0]
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f022 0201 	bic.w	r2, r2, #1
 800bc4c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	689b      	ldr	r3, [r3, #8]
 800bc54:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	683a      	ldr	r2, [r7, #0]
 800bc5e:	430a      	orrs	r2, r1
 800bc60:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f000 f850 	bl	800bd08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	68fa      	ldr	r2, [r7, #12]
 800bc6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2220      	movs	r2, #32
 800bc74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bc80:	2300      	movs	r3, #0
}
 800bc82:	4618      	mov	r0, r3
 800bc84:	3710      	adds	r7, #16
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}

0800bc8a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bc8a:	b580      	push	{r7, lr}
 800bc8c:	b084      	sub	sp, #16
 800bc8e:	af00      	add	r7, sp, #0
 800bc90:	6078      	str	r0, [r7, #4]
 800bc92:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bc9a:	2b01      	cmp	r3, #1
 800bc9c:	d101      	bne.n	800bca2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bc9e:	2302      	movs	r3, #2
 800bca0:	e02d      	b.n	800bcfe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2201      	movs	r2, #1
 800bca6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2224      	movs	r2, #36	@ 0x24
 800bcae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	681a      	ldr	r2, [r3, #0]
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f022 0201 	bic.w	r2, r2, #1
 800bcc8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	689b      	ldr	r3, [r3, #8]
 800bcd0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	683a      	ldr	r2, [r7, #0]
 800bcda:	430a      	orrs	r2, r1
 800bcdc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f000 f812 	bl	800bd08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	68fa      	ldr	r2, [r7, #12]
 800bcea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2220      	movs	r2, #32
 800bcf0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bcfc:	2300      	movs	r3, #0
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	3710      	adds	r7, #16
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}
	...

0800bd08 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bd08:	b480      	push	{r7}
 800bd0a:	b085      	sub	sp, #20
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d108      	bne.n	800bd2a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2201      	movs	r2, #1
 800bd1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2201      	movs	r2, #1
 800bd24:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bd28:	e031      	b.n	800bd8e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bd2a:	2310      	movs	r3, #16
 800bd2c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bd2e:	2310      	movs	r3, #16
 800bd30:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	689b      	ldr	r3, [r3, #8]
 800bd38:	0e5b      	lsrs	r3, r3, #25
 800bd3a:	b2db      	uxtb	r3, r3
 800bd3c:	f003 0307 	and.w	r3, r3, #7
 800bd40:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	689b      	ldr	r3, [r3, #8]
 800bd48:	0f5b      	lsrs	r3, r3, #29
 800bd4a:	b2db      	uxtb	r3, r3
 800bd4c:	f003 0307 	and.w	r3, r3, #7
 800bd50:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bd52:	7bbb      	ldrb	r3, [r7, #14]
 800bd54:	7b3a      	ldrb	r2, [r7, #12]
 800bd56:	4911      	ldr	r1, [pc, #68]	@ (800bd9c <UARTEx_SetNbDataToProcess+0x94>)
 800bd58:	5c8a      	ldrb	r2, [r1, r2]
 800bd5a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bd5e:	7b3a      	ldrb	r2, [r7, #12]
 800bd60:	490f      	ldr	r1, [pc, #60]	@ (800bda0 <UARTEx_SetNbDataToProcess+0x98>)
 800bd62:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bd64:	fb93 f3f2 	sdiv	r3, r3, r2
 800bd68:	b29a      	uxth	r2, r3
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bd70:	7bfb      	ldrb	r3, [r7, #15]
 800bd72:	7b7a      	ldrb	r2, [r7, #13]
 800bd74:	4909      	ldr	r1, [pc, #36]	@ (800bd9c <UARTEx_SetNbDataToProcess+0x94>)
 800bd76:	5c8a      	ldrb	r2, [r1, r2]
 800bd78:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bd7c:	7b7a      	ldrb	r2, [r7, #13]
 800bd7e:	4908      	ldr	r1, [pc, #32]	@ (800bda0 <UARTEx_SetNbDataToProcess+0x98>)
 800bd80:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bd82:	fb93 f3f2 	sdiv	r3, r3, r2
 800bd86:	b29a      	uxth	r2, r3
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bd8e:	bf00      	nop
 800bd90:	3714      	adds	r7, #20
 800bd92:	46bd      	mov	sp, r7
 800bd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd98:	4770      	bx	lr
 800bd9a:	bf00      	nop
 800bd9c:	0801e3dc 	.word	0x0801e3dc
 800bda0:	0801e3e4 	.word	0x0801e3e4

0800bda4 <LL_GPIO_SetPinMode>:
{
 800bda4:	b480      	push	{r7}
 800bda6:	b085      	sub	sp, #20
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	60f8      	str	r0, [r7, #12]
 800bdac:	60b9      	str	r1, [r7, #8]
 800bdae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	6819      	ldr	r1, [r3, #0]
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	fb03 f203 	mul.w	r2, r3, r3
 800bdba:	4613      	mov	r3, r2
 800bdbc:	005b      	lsls	r3, r3, #1
 800bdbe:	4413      	add	r3, r2
 800bdc0:	43db      	mvns	r3, r3
 800bdc2:	ea01 0203 	and.w	r2, r1, r3
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	fb03 f303 	mul.w	r3, r3, r3
 800bdcc:	6879      	ldr	r1, [r7, #4]
 800bdce:	fb01 f303 	mul.w	r3, r1, r3
 800bdd2:	431a      	orrs	r2, r3
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	601a      	str	r2, [r3, #0]
}
 800bdd8:	bf00      	nop
 800bdda:	3714      	adds	r7, #20
 800bddc:	46bd      	mov	sp, r7
 800bdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde2:	4770      	bx	lr

0800bde4 <LL_GPIO_SetPinOutputType>:
{
 800bde4:	b480      	push	{r7}
 800bde6:	b085      	sub	sp, #20
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	60f8      	str	r0, [r7, #12]
 800bdec:	60b9      	str	r1, [r7, #8]
 800bdee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	685a      	ldr	r2, [r3, #4]
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	43db      	mvns	r3, r3
 800bdf8:	401a      	ands	r2, r3
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	6879      	ldr	r1, [r7, #4]
 800bdfe:	fb01 f303 	mul.w	r3, r1, r3
 800be02:	431a      	orrs	r2, r3
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	605a      	str	r2, [r3, #4]
}
 800be08:	bf00      	nop
 800be0a:	3714      	adds	r7, #20
 800be0c:	46bd      	mov	sp, r7
 800be0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be12:	4770      	bx	lr

0800be14 <LL_GPIO_SetPinSpeed>:
{
 800be14:	b480      	push	{r7}
 800be16:	b085      	sub	sp, #20
 800be18:	af00      	add	r7, sp, #0
 800be1a:	60f8      	str	r0, [r7, #12]
 800be1c:	60b9      	str	r1, [r7, #8]
 800be1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	6899      	ldr	r1, [r3, #8]
 800be24:	68bb      	ldr	r3, [r7, #8]
 800be26:	fb03 f203 	mul.w	r2, r3, r3
 800be2a:	4613      	mov	r3, r2
 800be2c:	005b      	lsls	r3, r3, #1
 800be2e:	4413      	add	r3, r2
 800be30:	43db      	mvns	r3, r3
 800be32:	ea01 0203 	and.w	r2, r1, r3
 800be36:	68bb      	ldr	r3, [r7, #8]
 800be38:	fb03 f303 	mul.w	r3, r3, r3
 800be3c:	6879      	ldr	r1, [r7, #4]
 800be3e:	fb01 f303 	mul.w	r3, r1, r3
 800be42:	431a      	orrs	r2, r3
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	609a      	str	r2, [r3, #8]
}
 800be48:	bf00      	nop
 800be4a:	3714      	adds	r7, #20
 800be4c:	46bd      	mov	sp, r7
 800be4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be52:	4770      	bx	lr

0800be54 <LL_GPIO_SetPinPull>:
{
 800be54:	b480      	push	{r7}
 800be56:	b085      	sub	sp, #20
 800be58:	af00      	add	r7, sp, #0
 800be5a:	60f8      	str	r0, [r7, #12]
 800be5c:	60b9      	str	r1, [r7, #8]
 800be5e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	68d9      	ldr	r1, [r3, #12]
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	fb03 f203 	mul.w	r2, r3, r3
 800be6a:	4613      	mov	r3, r2
 800be6c:	005b      	lsls	r3, r3, #1
 800be6e:	4413      	add	r3, r2
 800be70:	43db      	mvns	r3, r3
 800be72:	ea01 0203 	and.w	r2, r1, r3
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	fb03 f303 	mul.w	r3, r3, r3
 800be7c:	6879      	ldr	r1, [r7, #4]
 800be7e:	fb01 f303 	mul.w	r3, r1, r3
 800be82:	431a      	orrs	r2, r3
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	60da      	str	r2, [r3, #12]
}
 800be88:	bf00      	nop
 800be8a:	3714      	adds	r7, #20
 800be8c:	46bd      	mov	sp, r7
 800be8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be92:	4770      	bx	lr

0800be94 <LL_GPIO_SetAFPin_0_7>:
{
 800be94:	b480      	push	{r7}
 800be96:	b085      	sub	sp, #20
 800be98:	af00      	add	r7, sp, #0
 800be9a:	60f8      	str	r0, [r7, #12]
 800be9c:	60b9      	str	r1, [r7, #8]
 800be9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	6a19      	ldr	r1, [r3, #32]
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	fb03 f303 	mul.w	r3, r3, r3
 800beaa:	68ba      	ldr	r2, [r7, #8]
 800beac:	fb02 f303 	mul.w	r3, r2, r3
 800beb0:	68ba      	ldr	r2, [r7, #8]
 800beb2:	fb03 f202 	mul.w	r2, r3, r2
 800beb6:	4613      	mov	r3, r2
 800beb8:	011b      	lsls	r3, r3, #4
 800beba:	1a9b      	subs	r3, r3, r2
 800bebc:	43db      	mvns	r3, r3
 800bebe:	ea01 0203 	and.w	r2, r1, r3
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	fb03 f303 	mul.w	r3, r3, r3
 800bec8:	68b9      	ldr	r1, [r7, #8]
 800beca:	fb01 f303 	mul.w	r3, r1, r3
 800bece:	68b9      	ldr	r1, [r7, #8]
 800bed0:	fb01 f303 	mul.w	r3, r1, r3
 800bed4:	6879      	ldr	r1, [r7, #4]
 800bed6:	fb01 f303 	mul.w	r3, r1, r3
 800beda:	431a      	orrs	r2, r3
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	621a      	str	r2, [r3, #32]
}
 800bee0:	bf00      	nop
 800bee2:	3714      	adds	r7, #20
 800bee4:	46bd      	mov	sp, r7
 800bee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beea:	4770      	bx	lr

0800beec <LL_GPIO_SetAFPin_8_15>:
{
 800beec:	b480      	push	{r7}
 800beee:	b085      	sub	sp, #20
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	60f8      	str	r0, [r7, #12]
 800bef4:	60b9      	str	r1, [r7, #8]
 800bef6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	0a1b      	lsrs	r3, r3, #8
 800bf00:	68ba      	ldr	r2, [r7, #8]
 800bf02:	0a12      	lsrs	r2, r2, #8
 800bf04:	fb02 f303 	mul.w	r3, r2, r3
 800bf08:	68ba      	ldr	r2, [r7, #8]
 800bf0a:	0a12      	lsrs	r2, r2, #8
 800bf0c:	fb02 f303 	mul.w	r3, r2, r3
 800bf10:	68ba      	ldr	r2, [r7, #8]
 800bf12:	0a12      	lsrs	r2, r2, #8
 800bf14:	fb03 f202 	mul.w	r2, r3, r2
 800bf18:	4613      	mov	r3, r2
 800bf1a:	011b      	lsls	r3, r3, #4
 800bf1c:	1a9b      	subs	r3, r3, r2
 800bf1e:	43db      	mvns	r3, r3
 800bf20:	ea01 0203 	and.w	r2, r1, r3
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	0a1b      	lsrs	r3, r3, #8
 800bf28:	68b9      	ldr	r1, [r7, #8]
 800bf2a:	0a09      	lsrs	r1, r1, #8
 800bf2c:	fb01 f303 	mul.w	r3, r1, r3
 800bf30:	68b9      	ldr	r1, [r7, #8]
 800bf32:	0a09      	lsrs	r1, r1, #8
 800bf34:	fb01 f303 	mul.w	r3, r1, r3
 800bf38:	68b9      	ldr	r1, [r7, #8]
 800bf3a:	0a09      	lsrs	r1, r1, #8
 800bf3c:	fb01 f303 	mul.w	r3, r1, r3
 800bf40:	6879      	ldr	r1, [r7, #4]
 800bf42:	fb01 f303 	mul.w	r3, r1, r3
 800bf46:	431a      	orrs	r2, r3
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800bf4c:	bf00      	nop
 800bf4e:	3714      	adds	r7, #20
 800bf50:	46bd      	mov	sp, r7
 800bf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf56:	4770      	bx	lr

0800bf58 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b088      	sub	sp, #32
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
 800bf60:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bf68:	693b      	ldr	r3, [r7, #16]
 800bf6a:	fa93 f3a3 	rbit	r3, r3
 800bf6e:	60fb      	str	r3, [r7, #12]
  return result;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800bf74:	697b      	ldr	r3, [r7, #20]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d101      	bne.n	800bf7e <LL_GPIO_Init+0x26>
    return 32U;
 800bf7a:	2320      	movs	r3, #32
 800bf7c:	e003      	b.n	800bf86 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	fab3 f383 	clz	r3, r3
 800bf84:	b2db      	uxtb	r3, r3
 800bf86:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800bf88:	e048      	b.n	800c01c <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	681a      	ldr	r2, [r3, #0]
 800bf8e:	2101      	movs	r1, #1
 800bf90:	69fb      	ldr	r3, [r7, #28]
 800bf92:	fa01 f303 	lsl.w	r3, r1, r3
 800bf96:	4013      	ands	r3, r2
 800bf98:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00000000U)
 800bf9a:	69bb      	ldr	r3, [r7, #24]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d03a      	beq.n	800c016 <LL_GPIO_Init+0xbe>
    {

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	685b      	ldr	r3, [r3, #4]
 800bfa4:	2b01      	cmp	r3, #1
 800bfa6:	d003      	beq.n	800bfb0 <LL_GPIO_Init+0x58>
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	685b      	ldr	r3, [r3, #4]
 800bfac:	2b02      	cmp	r3, #2
 800bfae:	d10e      	bne.n	800bfce <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	689b      	ldr	r3, [r3, #8]
 800bfb4:	461a      	mov	r2, r3
 800bfb6:	69b9      	ldr	r1, [r7, #24]
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f7ff ff2b 	bl	800be14 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	6819      	ldr	r1, [r3, #0]
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	68db      	ldr	r3, [r3, #12]
 800bfc6:	461a      	mov	r2, r3
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	f7ff ff0b 	bl	800bde4 <LL_GPIO_SetPinOutputType>

      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	691b      	ldr	r3, [r3, #16]
 800bfd2:	461a      	mov	r2, r3
 800bfd4:	69b9      	ldr	r1, [r7, #24]
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f7ff ff3c 	bl	800be54 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	685b      	ldr	r3, [r3, #4]
 800bfe0:	2b02      	cmp	r3, #2
 800bfe2:	d111      	bne.n	800c008 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800bfe4:	69bb      	ldr	r3, [r7, #24]
 800bfe6:	2bff      	cmp	r3, #255	@ 0xff
 800bfe8:	d807      	bhi.n	800bffa <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	695b      	ldr	r3, [r3, #20]
 800bfee:	461a      	mov	r2, r3
 800bff0:	69b9      	ldr	r1, [r7, #24]
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f7ff ff4e 	bl	800be94 <LL_GPIO_SetAFPin_0_7>
 800bff8:	e006      	b.n	800c008 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	695b      	ldr	r3, [r3, #20]
 800bffe:	461a      	mov	r2, r3
 800c000:	69b9      	ldr	r1, [r7, #24]
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f7ff ff72 	bl	800beec <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	685b      	ldr	r3, [r3, #4]
 800c00c:	461a      	mov	r2, r3
 800c00e:	69b9      	ldr	r1, [r7, #24]
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f7ff fec7 	bl	800bda4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800c016:	69fb      	ldr	r3, [r7, #28]
 800c018:	3301      	adds	r3, #1
 800c01a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	681a      	ldr	r2, [r3, #0]
 800c020:	69fb      	ldr	r3, [r7, #28]
 800c022:	fa22 f303 	lsr.w	r3, r2, r3
 800c026:	2b00      	cmp	r3, #0
 800c028:	d1af      	bne.n	800bf8a <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800c02a:	2300      	movs	r3, #0
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	3720      	adds	r7, #32
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}

0800c034 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c034:	b084      	sub	sp, #16
 800c036:	b480      	push	{r7}
 800c038:	b085      	sub	sp, #20
 800c03a:	af00      	add	r7, sp, #0
 800c03c:	6078      	str	r0, [r7, #4]
 800c03e:	f107 001c 	add.w	r0, r7, #28
 800c042:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c046:	2300      	movs	r3, #0
 800c048:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800c04a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800c04c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800c04e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800c050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800c052:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800c054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800c056:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800c05a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800c05c:	68fa      	ldr	r2, [r7, #12]
 800c05e:	4313      	orrs	r3, r2
 800c060:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	685a      	ldr	r2, [r3, #4]
 800c066:	4b07      	ldr	r3, [pc, #28]	@ (800c084 <SDMMC_Init+0x50>)
 800c068:	4013      	ands	r3, r2
 800c06a:	68fa      	ldr	r2, [r7, #12]
 800c06c:	431a      	orrs	r2, r3
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c072:	2300      	movs	r3, #0
}
 800c074:	4618      	mov	r0, r3
 800c076:	3714      	adds	r7, #20
 800c078:	46bd      	mov	sp, r7
 800c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07e:	b004      	add	sp, #16
 800c080:	4770      	bx	lr
 800c082:	bf00      	nop
 800c084:	ffc02c00 	.word	0xffc02c00

0800c088 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800c088:	b480      	push	{r7}
 800c08a:	b083      	sub	sp, #12
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800c096:	4618      	mov	r0, r3
 800c098:	370c      	adds	r7, #12
 800c09a:	46bd      	mov	sp, r7
 800c09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a0:	4770      	bx	lr

0800c0a2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800c0a2:	b480      	push	{r7}
 800c0a4:	b083      	sub	sp, #12
 800c0a6:	af00      	add	r7, sp, #0
 800c0a8:	6078      	str	r0, [r7, #4]
 800c0aa:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	681a      	ldr	r2, [r3, #0]
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800c0b6:	2300      	movs	r3, #0
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	370c      	adds	r7, #12
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c2:	4770      	bx	lr

0800c0c4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b083      	sub	sp, #12
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f043 0203 	orr.w	r2, r3, #3
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c0d8:	2300      	movs	r3, #0
}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	370c      	adds	r7, #12
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e4:	4770      	bx	lr

0800c0e6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800c0e6:	b480      	push	{r7}
 800c0e8:	b083      	sub	sp, #12
 800c0ea:	af00      	add	r7, sp, #0
 800c0ec:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f003 0303 	and.w	r3, r3, #3
}
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	370c      	adds	r7, #12
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c100:	4770      	bx	lr
	...

0800c104 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800c104:	b480      	push	{r7}
 800c106:	b085      	sub	sp, #20
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
 800c10c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c10e:	2300      	movs	r3, #0
 800c110:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	681a      	ldr	r2, [r3, #0]
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800c122:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800c128:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800c12e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800c130:	68fa      	ldr	r2, [r7, #12]
 800c132:	4313      	orrs	r3, r2
 800c134:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	68da      	ldr	r2, [r3, #12]
 800c13a:	4b06      	ldr	r3, [pc, #24]	@ (800c154 <SDMMC_SendCommand+0x50>)
 800c13c:	4013      	ands	r3, r2
 800c13e:	68fa      	ldr	r2, [r7, #12]
 800c140:	431a      	orrs	r2, r3
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c146:	2300      	movs	r3, #0
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3714      	adds	r7, #20
 800c14c:	46bd      	mov	sp, r7
 800c14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c152:	4770      	bx	lr
 800c154:	fffee0c0 	.word	0xfffee0c0

0800c158 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c158:	b480      	push	{r7}
 800c15a:	b083      	sub	sp, #12
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	691b      	ldr	r3, [r3, #16]
 800c164:	b2db      	uxtb	r3, r3
}
 800c166:	4618      	mov	r0, r3
 800c168:	370c      	adds	r7, #12
 800c16a:	46bd      	mov	sp, r7
 800c16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c170:	4770      	bx	lr

0800c172 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c172:	b480      	push	{r7}
 800c174:	b085      	sub	sp, #20
 800c176:	af00      	add	r7, sp, #0
 800c178:	6078      	str	r0, [r7, #4]
 800c17a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	3314      	adds	r3, #20
 800c180:	461a      	mov	r2, r3
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	4413      	add	r3, r2
 800c186:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	681b      	ldr	r3, [r3, #0]
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	3714      	adds	r7, #20
 800c190:	46bd      	mov	sp, r7
 800c192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c196:	4770      	bx	lr

0800c198 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800c198:	b480      	push	{r7}
 800c19a:	b085      	sub	sp, #20
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
 800c1a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	681a      	ldr	r2, [r3, #0]
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	685a      	ldr	r2, [r3, #4]
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800c1be:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800c1c4:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800c1ca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800c1cc:	68fa      	ldr	r2, [r7, #12]
 800c1ce:	4313      	orrs	r3, r2
 800c1d0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1d6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	431a      	orrs	r2, r3
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800c1e2:	2300      	movs	r3, #0

}
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	3714      	adds	r7, #20
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ee:	4770      	bx	lr

0800c1f0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b088      	sub	sp, #32
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
 800c1f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c1fe:	2310      	movs	r3, #16
 800c200:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c202:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c206:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c208:	2300      	movs	r3, #0
 800c20a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c20c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c210:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c212:	f107 0308 	add.w	r3, r7, #8
 800c216:	4619      	mov	r1, r3
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f7ff ff73 	bl	800c104 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c21e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c222:	2110      	movs	r1, #16
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f000 f9fd 	bl	800c624 <SDMMC_GetCmdResp1>
 800c22a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c22c:	69fb      	ldr	r3, [r7, #28]
}
 800c22e:	4618      	mov	r0, r3
 800c230:	3720      	adds	r7, #32
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}

0800c236 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c236:	b580      	push	{r7, lr}
 800c238:	b088      	sub	sp, #32
 800c23a:	af00      	add	r7, sp, #0
 800c23c:	6078      	str	r0, [r7, #4]
 800c23e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c244:	2311      	movs	r3, #17
 800c246:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c248:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c24c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c24e:	2300      	movs	r3, #0
 800c250:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c252:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c256:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c258:	f107 0308 	add.w	r3, r7, #8
 800c25c:	4619      	mov	r1, r3
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f7ff ff50 	bl	800c104 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c264:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c268:	2111      	movs	r1, #17
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f000 f9da 	bl	800c624 <SDMMC_GetCmdResp1>
 800c270:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c272:	69fb      	ldr	r3, [r7, #28]
}
 800c274:	4618      	mov	r0, r3
 800c276:	3720      	adds	r7, #32
 800c278:	46bd      	mov	sp, r7
 800c27a:	bd80      	pop	{r7, pc}

0800c27c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b088      	sub	sp, #32
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
 800c284:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c28a:	2312      	movs	r3, #18
 800c28c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c28e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c292:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c294:	2300      	movs	r3, #0
 800c296:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c298:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c29c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c29e:	f107 0308 	add.w	r3, r7, #8
 800c2a2:	4619      	mov	r1, r3
 800c2a4:	6878      	ldr	r0, [r7, #4]
 800c2a6:	f7ff ff2d 	bl	800c104 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c2aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c2ae:	2112      	movs	r1, #18
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f000 f9b7 	bl	800c624 <SDMMC_GetCmdResp1>
 800c2b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c2b8:	69fb      	ldr	r3, [r7, #28]
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3720      	adds	r7, #32
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}

0800c2c2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c2c2:	b580      	push	{r7, lr}
 800c2c4:	b088      	sub	sp, #32
 800c2c6:	af00      	add	r7, sp, #0
 800c2c8:	6078      	str	r0, [r7, #4]
 800c2ca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c2d0:	2318      	movs	r3, #24
 800c2d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c2d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c2d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c2de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c2e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c2e4:	f107 0308 	add.w	r3, r7, #8
 800c2e8:	4619      	mov	r1, r3
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f7ff ff0a 	bl	800c104 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c2f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c2f4:	2118      	movs	r1, #24
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f000 f994 	bl	800c624 <SDMMC_GetCmdResp1>
 800c2fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c2fe:	69fb      	ldr	r3, [r7, #28]
}
 800c300:	4618      	mov	r0, r3
 800c302:	3720      	adds	r7, #32
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}

0800c308 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b088      	sub	sp, #32
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
 800c310:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c316:	2319      	movs	r3, #25
 800c318:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c31a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c31e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c320:	2300      	movs	r3, #0
 800c322:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c324:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c328:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c32a:	f107 0308 	add.w	r3, r7, #8
 800c32e:	4619      	mov	r1, r3
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f7ff fee7 	bl	800c104 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c336:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c33a:	2119      	movs	r1, #25
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	f000 f971 	bl	800c624 <SDMMC_GetCmdResp1>
 800c342:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c344:	69fb      	ldr	r3, [r7, #28]
}
 800c346:	4618      	mov	r0, r3
 800c348:	3720      	adds	r7, #32
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}
	...

0800c350 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b088      	sub	sp, #32
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c358:	2300      	movs	r3, #0
 800c35a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c35c:	230c      	movs	r3, #12
 800c35e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c360:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c364:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c366:	2300      	movs	r3, #0
 800c368:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c36a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c36e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	68db      	ldr	r3, [r3, #12]
 800c374:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	68db      	ldr	r3, [r3, #12]
 800c380:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c388:	f107 0308 	add.w	r3, r7, #8
 800c38c:	4619      	mov	r1, r3
 800c38e:	6878      	ldr	r0, [r7, #4]
 800c390:	f7ff feb8 	bl	800c104 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800c394:	4a0b      	ldr	r2, [pc, #44]	@ (800c3c4 <SDMMC_CmdStopTransfer+0x74>)
 800c396:	210c      	movs	r1, #12
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f000 f943 	bl	800c624 <SDMMC_GetCmdResp1>
 800c39e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	68db      	ldr	r3, [r3, #12]
 800c3a4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800c3ac:	69fb      	ldr	r3, [r7, #28]
 800c3ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c3b2:	d101      	bne.n	800c3b8 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800c3b8:	69fb      	ldr	r3, [r7, #28]
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3720      	adds	r7, #32
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}
 800c3c2:	bf00      	nop
 800c3c4:	05f5e100 	.word	0x05f5e100

0800c3c8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b088      	sub	sp, #32
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
 800c3d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c3d6:	2307      	movs	r3, #7
 800c3d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c3da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c3de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c3e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c3e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c3ea:	f107 0308 	add.w	r3, r7, #8
 800c3ee:	4619      	mov	r1, r3
 800c3f0:	6878      	ldr	r0, [r7, #4]
 800c3f2:	f7ff fe87 	bl	800c104 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c3f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c3fa:	2107      	movs	r1, #7
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	f000 f911 	bl	800c624 <SDMMC_GetCmdResp1>
 800c402:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c404:	69fb      	ldr	r3, [r7, #28]
}
 800c406:	4618      	mov	r0, r3
 800c408:	3720      	adds	r7, #32
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}

0800c40e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c40e:	b580      	push	{r7, lr}
 800c410:	b088      	sub	sp, #32
 800c412:	af00      	add	r7, sp, #0
 800c414:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800c416:	2300      	movs	r3, #0
 800c418:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c41a:	2300      	movs	r3, #0
 800c41c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c41e:	2300      	movs	r3, #0
 800c420:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c422:	2300      	movs	r3, #0
 800c424:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c426:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c42a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c42c:	f107 0308 	add.w	r3, r7, #8
 800c430:	4619      	mov	r1, r3
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	f7ff fe66 	bl	800c104 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c438:	6878      	ldr	r0, [r7, #4]
 800c43a:	f000 fa6f 	bl	800c91c <SDMMC_GetCmdError>
 800c43e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c440:	69fb      	ldr	r3, [r7, #28]
}
 800c442:	4618      	mov	r0, r3
 800c444:	3720      	adds	r7, #32
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}

0800c44a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c44a:	b580      	push	{r7, lr}
 800c44c:	b088      	sub	sp, #32
 800c44e:	af00      	add	r7, sp, #0
 800c450:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c452:	2300      	movs	r3, #0
 800c454:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c456:	2302      	movs	r3, #2
 800c458:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c45a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800c45e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c460:	2300      	movs	r3, #0
 800c462:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c464:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c468:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c46a:	f107 0308 	add.w	r3, r7, #8
 800c46e:	4619      	mov	r1, r3
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	f7ff fe47 	bl	800c104 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	f000 f9c6 	bl	800c808 <SDMMC_GetCmdResp2>
 800c47c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c47e:	69fb      	ldr	r3, [r7, #28]
}
 800c480:	4618      	mov	r0, r3
 800c482:	3720      	adds	r7, #32
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}

0800c488 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b088      	sub	sp, #32
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
 800c490:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c496:	2309      	movs	r3, #9
 800c498:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c49a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800c49e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c4a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c4a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c4aa:	f107 0308 	add.w	r3, r7, #8
 800c4ae:	4619      	mov	r1, r3
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	f7ff fe27 	bl	800c104 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	f000 f9a6 	bl	800c808 <SDMMC_GetCmdResp2>
 800c4bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c4be:	69fb      	ldr	r3, [r7, #28]
}
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	3720      	adds	r7, #32
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}

0800c4c8 <SDMMC_CmdSetRelAddMmc>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  RCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAddMmc(SDMMC_TypeDef *SDMMCx, uint16_t RCA)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b088      	sub	sp, #32
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
 800c4d0:	460b      	mov	r3, r1
 800c4d2:	807b      	strh	r3, [r7, #2]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = ((uint32_t)RCA << 16U);
 800c4d4:	887b      	ldrh	r3, [r7, #2]
 800c4d6:	041b      	lsls	r3, r3, #16
 800c4d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c4da:	2303      	movs	r3, #3
 800c4dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c4de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c4e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c4e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c4ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c4ee:	f107 0308 	add.w	r3, r7, #8
 800c4f2:	4619      	mov	r1, r3
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f7ff fe05 	bl	800c104 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_REL_ADDR, SDMMC_CMDTIMEOUT);
 800c4fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c4fe:	2103      	movs	r1, #3
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	f000 f88f 	bl	800c624 <SDMMC_GetCmdResp1>
 800c506:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c508:	69fb      	ldr	r3, [r7, #28]
}
 800c50a:	4618      	mov	r0, r3
 800c50c:	3720      	adds	r7, #32
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}

0800c512 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c512:	b580      	push	{r7, lr}
 800c514:	b088      	sub	sp, #32
 800c516:	af00      	add	r7, sp, #0
 800c518:	6078      	str	r0, [r7, #4]
 800c51a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c520:	230d      	movs	r3, #13
 800c522:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c524:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c528:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c52a:	2300      	movs	r3, #0
 800c52c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c52e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c532:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c534:	f107 0308 	add.w	r3, r7, #8
 800c538:	4619      	mov	r1, r3
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f7ff fde2 	bl	800c104 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c540:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c544:	210d      	movs	r1, #13
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f000 f86c 	bl	800c624 <SDMMC_GetCmdResp1>
 800c54c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c54e:	69fb      	ldr	r3, [r7, #28]
}
 800c550:	4618      	mov	r0, r3
 800c552:	3720      	adds	r7, #32
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}

0800c558 <SDMMC_CmdOpCondition>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdOpCondition(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b088      	sub	sp, #32
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
 800c560:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_OP_COND;
 800c566:	2301      	movs	r3, #1
 800c568:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c56a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c56e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c570:	2300      	movs	r3, #0
 800c572:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c574:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c578:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c57a:	f107 0308 	add.w	r3, r7, #8
 800c57e:	4619      	mov	r1, r3
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f7ff fdbf 	bl	800c104 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	f000 f988 	bl	800c89c <SDMMC_GetCmdResp3>
 800c58c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c58e:	69fb      	ldr	r3, [r7, #28]
}
 800c590:	4618      	mov	r0, r3
 800c592:	3720      	adds	r7, #32
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}

0800c598 <SDMMC_CmdSwitch>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdSwitch(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b088      	sub	sp, #32
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
 800c5a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD6 to activate SDR50 Mode and Power Limit 1.44W */
  /* CMD Response: R1 */
  sdmmc_cmdinit.Argument         = Argument; /* SDMMC_SDR25_SWITCH_PATTERN*/
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 800c5a6:	2306      	movs	r3, #6
 800c5a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c5aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c5ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c5b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c5b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c5ba:	f107 0308 	add.w	r3, r7, #8
 800c5be:	4619      	mov	r1, r3
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f7ff fd9f 	bl	800c104 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 800c5c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c5ca:	2106      	movs	r1, #6
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	f000 f829 	bl	800c624 <SDMMC_GetCmdResp1>
 800c5d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c5d4:	69fb      	ldr	r3, [r7, #28]
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	3720      	adds	r7, #32
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}

0800c5de <SDMMC_CmdSendEXTCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendEXTCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c5de:	b580      	push	{r7, lr}
 800c5e0:	b088      	sub	sp, #32
 800c5e2:	af00      	add	r7, sp, #0
 800c5e4:	6078      	str	r0, [r7, #4]
 800c5e6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c5ec:	2308      	movs	r3, #8
 800c5ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c5f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c5f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c5fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c5fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c600:	f107 0308 	add.w	r3, r7, #8
 800c604:	4619      	mov	r1, r3
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f7ff fd7c 	bl	800c104 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SEND_EXT_CSD, SDMMC_CMDTIMEOUT);
 800c60c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c610:	2108      	movs	r1, #8
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f000 f806 	bl	800c624 <SDMMC_GetCmdResp1>
 800c618:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c61a:	69fb      	ldr	r3, [r7, #28]
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3720      	adds	r7, #32
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}

0800c624 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b088      	sub	sp, #32
 800c628:	af00      	add	r7, sp, #0
 800c62a:	60f8      	str	r0, [r7, #12]
 800c62c:	460b      	mov	r3, r1
 800c62e:	607a      	str	r2, [r7, #4]
 800c630:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c632:	4b70      	ldr	r3, [pc, #448]	@ (800c7f4 <SDMMC_GetCmdResp1+0x1d0>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	4a70      	ldr	r2, [pc, #448]	@ (800c7f8 <SDMMC_GetCmdResp1+0x1d4>)
 800c638:	fba2 2303 	umull	r2, r3, r2, r3
 800c63c:	0a5a      	lsrs	r2, r3, #9
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	fb02 f303 	mul.w	r3, r2, r3
 800c644:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c646:	69fb      	ldr	r3, [r7, #28]
 800c648:	1e5a      	subs	r2, r3, #1
 800c64a:	61fa      	str	r2, [r7, #28]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d102      	bne.n	800c656 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c650:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c654:	e0c9      	b.n	800c7ea <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c65a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800c65c:	69ba      	ldr	r2, [r7, #24]
 800c65e:	4b67      	ldr	r3, [pc, #412]	@ (800c7fc <SDMMC_GetCmdResp1+0x1d8>)
 800c660:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c662:	2b00      	cmp	r3, #0
 800c664:	d0ef      	beq.n	800c646 <SDMMC_GetCmdResp1+0x22>
 800c666:	69bb      	ldr	r3, [r7, #24]
 800c668:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d1ea      	bne.n	800c646 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c674:	f003 0304 	and.w	r3, r3, #4
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d004      	beq.n	800c686 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	2204      	movs	r2, #4
 800c680:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c682:	2304      	movs	r3, #4
 800c684:	e0b1      	b.n	800c7ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c68a:	f003 0301 	and.w	r3, r3, #1
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d004      	beq.n	800c69c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	2201      	movs	r2, #1
 800c696:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c698:	2301      	movs	r3, #1
 800c69a:	e0a6      	b.n	800c7ea <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	4a58      	ldr	r2, [pc, #352]	@ (800c800 <SDMMC_GetCmdResp1+0x1dc>)
 800c6a0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c6a2:	68f8      	ldr	r0, [r7, #12]
 800c6a4:	f7ff fd58 	bl	800c158 <SDMMC_GetCommandResponse>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	461a      	mov	r2, r3
 800c6ac:	7afb      	ldrb	r3, [r7, #11]
 800c6ae:	4293      	cmp	r3, r2
 800c6b0:	d001      	beq.n	800c6b6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c6b2:	2301      	movs	r3, #1
 800c6b4:	e099      	b.n	800c7ea <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c6b6:	2100      	movs	r1, #0
 800c6b8:	68f8      	ldr	r0, [r7, #12]
 800c6ba:	f7ff fd5a 	bl	800c172 <SDMMC_GetResponse>
 800c6be:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c6c0:	697a      	ldr	r2, [r7, #20]
 800c6c2:	4b50      	ldr	r3, [pc, #320]	@ (800c804 <SDMMC_GetCmdResp1+0x1e0>)
 800c6c4:	4013      	ands	r3, r2
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d101      	bne.n	800c6ce <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	e08d      	b.n	800c7ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c6ce:	697b      	ldr	r3, [r7, #20]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	da02      	bge.n	800c6da <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c6d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800c6d8:	e087      	b.n	800c7ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c6da:	697b      	ldr	r3, [r7, #20]
 800c6dc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d001      	beq.n	800c6e8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c6e4:	2340      	movs	r3, #64	@ 0x40
 800c6e6:	e080      	b.n	800c7ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c6e8:	697b      	ldr	r3, [r7, #20]
 800c6ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d001      	beq.n	800c6f6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c6f2:	2380      	movs	r3, #128	@ 0x80
 800c6f4:	e079      	b.n	800c7ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c6f6:	697b      	ldr	r3, [r7, #20]
 800c6f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d002      	beq.n	800c706 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c700:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c704:	e071      	b.n	800c7ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c706:	697b      	ldr	r3, [r7, #20]
 800c708:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d002      	beq.n	800c716 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c710:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c714:	e069      	b.n	800c7ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c716:	697b      	ldr	r3, [r7, #20]
 800c718:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d002      	beq.n	800c726 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c720:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c724:	e061      	b.n	800c7ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d002      	beq.n	800c736 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c730:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c734:	e059      	b.n	800c7ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c736:	697b      	ldr	r3, [r7, #20]
 800c738:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d002      	beq.n	800c746 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c740:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c744:	e051      	b.n	800c7ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c746:	697b      	ldr	r3, [r7, #20]
 800c748:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d002      	beq.n	800c756 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c750:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c754:	e049      	b.n	800c7ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c756:	697b      	ldr	r3, [r7, #20]
 800c758:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d002      	beq.n	800c766 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c760:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c764:	e041      	b.n	800c7ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d002      	beq.n	800c776 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c770:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c774:	e039      	b.n	800c7ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c776:	697b      	ldr	r3, [r7, #20]
 800c778:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d002      	beq.n	800c786 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c780:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800c784:	e031      	b.n	800c7ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c786:	697b      	ldr	r3, [r7, #20]
 800c788:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d002      	beq.n	800c796 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c790:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800c794:	e029      	b.n	800c7ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c796:	697b      	ldr	r3, [r7, #20]
 800c798:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d002      	beq.n	800c7a6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c7a0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c7a4:	e021      	b.n	800c7ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c7a6:	697b      	ldr	r3, [r7, #20]
 800c7a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d002      	beq.n	800c7b6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c7b0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800c7b4:	e019      	b.n	800c7ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d002      	beq.n	800c7c6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c7c0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800c7c4:	e011      	b.n	800c7ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d002      	beq.n	800c7d6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c7d0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800c7d4:	e009      	b.n	800c7ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c7d6:	697b      	ldr	r3, [r7, #20]
 800c7d8:	f003 0308 	and.w	r3, r3, #8
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d002      	beq.n	800c7e6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c7e0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800c7e4:	e001      	b.n	800c7ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c7e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	3720      	adds	r7, #32
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bd80      	pop	{r7, pc}
 800c7f2:	bf00      	nop
 800c7f4:	24000140 	.word	0x24000140
 800c7f8:	10624dd3 	.word	0x10624dd3
 800c7fc:	00200045 	.word	0x00200045
 800c800:	002000c5 	.word	0x002000c5
 800c804:	fdffe008 	.word	0xfdffe008

0800c808 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c808:	b480      	push	{r7}
 800c80a:	b085      	sub	sp, #20
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c810:	4b1f      	ldr	r3, [pc, #124]	@ (800c890 <SDMMC_GetCmdResp2+0x88>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	4a1f      	ldr	r2, [pc, #124]	@ (800c894 <SDMMC_GetCmdResp2+0x8c>)
 800c816:	fba2 2303 	umull	r2, r3, r2, r3
 800c81a:	0a5b      	lsrs	r3, r3, #9
 800c81c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c820:	fb02 f303 	mul.w	r3, r2, r3
 800c824:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	1e5a      	subs	r2, r3, #1
 800c82a:	60fa      	str	r2, [r7, #12]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d102      	bne.n	800c836 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c830:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c834:	e026      	b.n	800c884 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c83a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c842:	2b00      	cmp	r3, #0
 800c844:	d0ef      	beq.n	800c826 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d1ea      	bne.n	800c826 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c854:	f003 0304 	and.w	r3, r3, #4
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d004      	beq.n	800c866 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2204      	movs	r2, #4
 800c860:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c862:	2304      	movs	r3, #4
 800c864:	e00e      	b.n	800c884 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c86a:	f003 0301 	and.w	r3, r3, #1
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d004      	beq.n	800c87c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2201      	movs	r2, #1
 800c876:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c878:	2301      	movs	r3, #1
 800c87a:	e003      	b.n	800c884 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	4a06      	ldr	r2, [pc, #24]	@ (800c898 <SDMMC_GetCmdResp2+0x90>)
 800c880:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800c882:	2300      	movs	r3, #0
}
 800c884:	4618      	mov	r0, r3
 800c886:	3714      	adds	r7, #20
 800c888:	46bd      	mov	sp, r7
 800c88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88e:	4770      	bx	lr
 800c890:	24000140 	.word	0x24000140
 800c894:	10624dd3 	.word	0x10624dd3
 800c898:	002000c5 	.word	0x002000c5

0800c89c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c89c:	b480      	push	{r7}
 800c89e:	b085      	sub	sp, #20
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c8a4:	4b1a      	ldr	r3, [pc, #104]	@ (800c910 <SDMMC_GetCmdResp3+0x74>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	4a1a      	ldr	r2, [pc, #104]	@ (800c914 <SDMMC_GetCmdResp3+0x78>)
 800c8aa:	fba2 2303 	umull	r2, r3, r2, r3
 800c8ae:	0a5b      	lsrs	r3, r3, #9
 800c8b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c8b4:	fb02 f303 	mul.w	r3, r2, r3
 800c8b8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	1e5a      	subs	r2, r3, #1
 800c8be:	60fa      	str	r2, [r7, #12]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d102      	bne.n	800c8ca <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c8c4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c8c8:	e01b      	b.n	800c902 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8ce:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c8d0:	68bb      	ldr	r3, [r7, #8]
 800c8d2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d0ef      	beq.n	800c8ba <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d1ea      	bne.n	800c8ba <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8e8:	f003 0304 	and.w	r3, r3, #4
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d004      	beq.n	800c8fa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2204      	movs	r2, #4
 800c8f4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c8f6:	2304      	movs	r3, #4
 800c8f8:	e003      	b.n	800c902 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	4a06      	ldr	r2, [pc, #24]	@ (800c918 <SDMMC_GetCmdResp3+0x7c>)
 800c8fe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800c900:	2300      	movs	r3, #0
}
 800c902:	4618      	mov	r0, r3
 800c904:	3714      	adds	r7, #20
 800c906:	46bd      	mov	sp, r7
 800c908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90c:	4770      	bx	lr
 800c90e:	bf00      	nop
 800c910:	24000140 	.word	0x24000140
 800c914:	10624dd3 	.word	0x10624dd3
 800c918:	002000c5 	.word	0x002000c5

0800c91c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c91c:	b480      	push	{r7}
 800c91e:	b085      	sub	sp, #20
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c924:	4b11      	ldr	r3, [pc, #68]	@ (800c96c <SDMMC_GetCmdError+0x50>)
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	4a11      	ldr	r2, [pc, #68]	@ (800c970 <SDMMC_GetCmdError+0x54>)
 800c92a:	fba2 2303 	umull	r2, r3, r2, r3
 800c92e:	0a5b      	lsrs	r3, r3, #9
 800c930:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c934:	fb02 f303 	mul.w	r3, r2, r3
 800c938:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	1e5a      	subs	r2, r3, #1
 800c93e:	60fa      	str	r2, [r7, #12]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d102      	bne.n	800c94a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c944:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c948:	e009      	b.n	800c95e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c94e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c952:	2b00      	cmp	r3, #0
 800c954:	d0f1      	beq.n	800c93a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	4a06      	ldr	r2, [pc, #24]	@ (800c974 <SDMMC_GetCmdError+0x58>)
 800c95a:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800c95c:	2300      	movs	r3, #0
}
 800c95e:	4618      	mov	r0, r3
 800c960:	3714      	adds	r7, #20
 800c962:	46bd      	mov	sp, r7
 800c964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c968:	4770      	bx	lr
 800c96a:	bf00      	nop
 800c96c:	24000140 	.word	0x24000140
 800c970:	10624dd3 	.word	0x10624dd3
 800c974:	002000c5 	.word	0x002000c5

0800c978 <LL_SPI_IsEnabled>:
{
 800c978:	b480      	push	{r7}
 800c97a:	b083      	sub	sp, #12
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	f003 0301 	and.w	r3, r3, #1
 800c988:	2b01      	cmp	r3, #1
 800c98a:	d101      	bne.n	800c990 <LL_SPI_IsEnabled+0x18>
 800c98c:	2301      	movs	r3, #1
 800c98e:	e000      	b.n	800c992 <LL_SPI_IsEnabled+0x1a>
 800c990:	2300      	movs	r3, #0
}
 800c992:	4618      	mov	r0, r3
 800c994:	370c      	adds	r7, #12
 800c996:	46bd      	mov	sp, r7
 800c998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99c:	4770      	bx	lr

0800c99e <LL_SPI_SetInternalSSLevel>:
{
 800c99e:	b480      	push	{r7}
 800c9a0:	b083      	sub	sp, #12
 800c9a2:	af00      	add	r7, sp, #0
 800c9a4:	6078      	str	r0, [r7, #4]
 800c9a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSI, SSLevel);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	431a      	orrs	r2, r3
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	601a      	str	r2, [r3, #0]
}
 800c9b8:	bf00      	nop
 800c9ba:	370c      	adds	r7, #12
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c2:	4770      	bx	lr

0800c9c4 <LL_SPI_GetNSSPolarity>:
{
 800c9c4:	b480      	push	{r7}
 800c9c6:	b083      	sub	sp, #12
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SPIx->CFG2, SPI_CFG2_SSIOP));
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	68db      	ldr	r3, [r3, #12]
 800c9d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	370c      	adds	r7, #12
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9de:	4770      	bx	lr

0800c9e0 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly 0..0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 800c9e0:	b480      	push	{r7}
 800c9e2:	b083      	sub	sp, #12
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
 800c9e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPOLY, CRCPoly);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	683a      	ldr	r2, [r7, #0]
 800c9ee:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800c9f0:	bf00      	nop
 800c9f2:	370c      	adds	r7, #12
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fa:	4770      	bx	lr

0800c9fc <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b086      	sub	sp, #24
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
 800ca04:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800ca06:	2301      	movs	r3, #1
 800ca08:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_LL_SPI_BAUDRATEPRESCALER(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  /* Check the SPI instance is not enabled */
  if (LL_SPI_IsEnabled(SPIx) == 0x00000000UL)
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f7ff ffb4 	bl	800c978 <LL_SPI_IsEnabled>
 800ca10:	4603      	mov	r3, r0
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d167      	bne.n	800cae6 <LL_SPI_Init+0xea>
       * Configure SPIx CFG1 with parameters:
       * - Master Baud Rate       : SPI_CFG1_MBR[2:0] bits
       * - CRC Computation Enable : SPI_CFG1_CRCEN bit
       * - Length of data frame   : SPI_CFG1_DSIZE[4:0] bits
       */
    MODIFY_REG(SPIx->CFG1, SPI_CFG1_MBR | SPI_CFG1_CRCEN | SPI_CFG1_DSIZE,
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	689a      	ldr	r2, [r3, #8]
 800ca1a:	4b35      	ldr	r3, [pc, #212]	@ (800caf0 <LL_SPI_Init+0xf4>)
 800ca1c:	4013      	ands	r3, r2
 800ca1e:	683a      	ldr	r2, [r7, #0]
 800ca20:	6991      	ldr	r1, [r2, #24]
 800ca22:	683a      	ldr	r2, [r7, #0]
 800ca24:	6a12      	ldr	r2, [r2, #32]
 800ca26:	4311      	orrs	r1, r2
 800ca28:	683a      	ldr	r2, [r7, #0]
 800ca2a:	6892      	ldr	r2, [r2, #8]
 800ca2c:	430a      	orrs	r2, r1
 800ca2e:	431a      	orrs	r2, r3
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	609a      	str	r2, [r3, #8]
               SPI_InitStruct->BaudRate  | SPI_InitStruct->CRCCalculation | SPI_InitStruct->DataWidth);

    tmp_nss  = SPI_InitStruct->NSS;
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	695b      	ldr	r3, [r3, #20]
 800ca38:	613b      	str	r3, [r7, #16]
    tmp_mode = SPI_InitStruct->Mode;
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	685b      	ldr	r3, [r3, #4]
 800ca3e:	60fb      	str	r3, [r7, #12]
    tmp_nss_polarity = LL_SPI_GetNSSPolarity(SPIx);
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	f7ff ffbf 	bl	800c9c4 <LL_SPI_GetNSSPolarity>
 800ca46:	60b8      	str	r0, [r7, #8]

    /* Checks to setup Internal SS signal level and avoid a MODF Error */
    if ((tmp_nss == LL_SPI_NSS_SOFT) && (((tmp_nss_polarity == LL_SPI_NSS_POLARITY_LOW)  && \
 800ca48:	693b      	ldr	r3, [r7, #16]
 800ca4a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ca4e:	d112      	bne.n	800ca76 <LL_SPI_Init+0x7a>
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d103      	bne.n	800ca5e <LL_SPI_Init+0x62>
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ca5c:	d006      	beq.n	800ca6c <LL_SPI_Init+0x70>
                                          (tmp_mode == LL_SPI_MODE_MASTER))              || \
 800ca5e:	68bb      	ldr	r3, [r7, #8]
 800ca60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ca64:	d107      	bne.n	800ca76 <LL_SPI_Init+0x7a>
                                         ((tmp_nss_polarity == LL_SPI_NSS_POLARITY_HIGH) && \
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d104      	bne.n	800ca76 <LL_SPI_Init+0x7a>
                                          (tmp_mode == LL_SPI_MODE_SLAVE))))
    {
      LL_SPI_SetInternalSSLevel(SPIx, LL_SPI_SS_LEVEL_HIGH);
 800ca6c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f7ff ff94 	bl	800c99e <LL_SPI_SetInternalSSLevel>
       * - ClockPhase             : SPI_CFG2_CPHA bit
       * - BitOrder               : SPI_CFG2_LSBFRST bit
       * - Master/Slave Mode      : SPI_CFG2_MASTER bit
       * - SPI Mode               : SPI_CFG2_COMM[1:0] bits
       */
    MODIFY_REG(SPIx->CFG2, SPI_CFG2_SSM   | SPI_CFG2_SSOE    |
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	68da      	ldr	r2, [r3, #12]
 800ca7a:	4b1e      	ldr	r3, [pc, #120]	@ (800caf4 <LL_SPI_Init+0xf8>)
 800ca7c:	4013      	ands	r3, r2
 800ca7e:	683a      	ldr	r2, [r7, #0]
 800ca80:	6951      	ldr	r1, [r2, #20]
 800ca82:	683a      	ldr	r2, [r7, #0]
 800ca84:	68d2      	ldr	r2, [r2, #12]
 800ca86:	4311      	orrs	r1, r2
 800ca88:	683a      	ldr	r2, [r7, #0]
 800ca8a:	6912      	ldr	r2, [r2, #16]
 800ca8c:	4311      	orrs	r1, r2
 800ca8e:	683a      	ldr	r2, [r7, #0]
 800ca90:	69d2      	ldr	r2, [r2, #28]
 800ca92:	4311      	orrs	r1, r2
 800ca94:	683a      	ldr	r2, [r7, #0]
 800ca96:	6852      	ldr	r2, [r2, #4]
 800ca98:	4311      	orrs	r1, r2
 800ca9a:	683a      	ldr	r2, [r7, #0]
 800ca9c:	6812      	ldr	r2, [r2, #0]
 800ca9e:	f402 22c0 	and.w	r2, r2, #393216	@ 0x60000
 800caa2:	430a      	orrs	r2, r1
 800caa4:	431a      	orrs	r2, r3
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	60da      	str	r2, [r3, #12]

    /*---------------------------- SPIx CR1 Configuration ------------------------
       * Configure SPIx CR1 with parameter:
       * - Half Duplex Direction  : SPI_CR1_HDDIR bit
       */
    MODIFY_REG(SPIx->CR1, SPI_CR1_HDDIR, SPI_InitStruct->TransferDirection & SPI_CR1_HDDIR);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800caba:	431a      	orrs	r2, r3
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CRCPOLY Configuration ----------------------
       * Configure SPIx CRCPOLY with parameter:
       * - CRCPoly                : CRCPOLY[31:0] bits
       */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	6a1b      	ldr	r3, [r3, #32]
 800cac4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cac8:	d105      	bne.n	800cad6 <LL_SPI_Init+0xda>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cace:	4619      	mov	r1, r3
 800cad0:	6878      	ldr	r0, [r7, #4]
 800cad2:	f7ff ff85 	bl	800c9e0 <LL_SPI_SetCRCPolynomial>
    }

    /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
    CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cada:	f023 0201 	bic.w	r2, r3, #1
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	651a      	str	r2, [r3, #80]	@ 0x50

    status = SUCCESS;
 800cae2:	2300      	movs	r3, #0
 800cae4:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800cae6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cae8:	4618      	mov	r0, r3
 800caea:	3718      	adds	r7, #24
 800caec:	46bd      	mov	sp, r7
 800caee:	bd80      	pop	{r7, pc}
 800caf0:	8fbfffe0 	.word	0x8fbfffe0
 800caf4:	d839ffff 	.word	0xd839ffff

0800caf8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800caf8:	b084      	sub	sp, #16
 800cafa:	b580      	push	{r7, lr}
 800cafc:	b084      	sub	sp, #16
 800cafe:	af00      	add	r7, sp, #0
 800cb00:	6078      	str	r0, [r7, #4]
 800cb02:	f107 001c 	add.w	r0, r7, #28
 800cb06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cb0a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800cb0e:	2b01      	cmp	r3, #1
 800cb10:	d121      	bne.n	800cb56 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb16:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	68da      	ldr	r2, [r3, #12]
 800cb22:	4b2c      	ldr	r3, [pc, #176]	@ (800cbd4 <USB_CoreInit+0xdc>)
 800cb24:	4013      	ands	r3, r2
 800cb26:	687a      	ldr	r2, [r7, #4]
 800cb28:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	68db      	ldr	r3, [r3, #12]
 800cb2e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800cb36:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800cb3a:	2b01      	cmp	r3, #1
 800cb3c:	d105      	bne.n	800cb4a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	68db      	ldr	r3, [r3, #12]
 800cb42:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f001 faf6 	bl	800e13c <USB_CoreReset>
 800cb50:	4603      	mov	r3, r0
 800cb52:	73fb      	strb	r3, [r7, #15]
 800cb54:	e01b      	b.n	800cb8e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	68db      	ldr	r3, [r3, #12]
 800cb5a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f001 faea 	bl	800e13c <USB_CoreReset>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800cb6c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d106      	bne.n	800cb82 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb78:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	639a      	str	r2, [r3, #56]	@ 0x38
 800cb80:	e005      	b.n	800cb8e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb86:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800cb8e:	7fbb      	ldrb	r3, [r7, #30]
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	d116      	bne.n	800cbc2 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cb98:	b29a      	uxth	r2, r3
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800cba2:	4b0d      	ldr	r3, [pc, #52]	@ (800cbd8 <USB_CoreInit+0xe0>)
 800cba4:	4313      	orrs	r3, r2
 800cba6:	687a      	ldr	r2, [r7, #4]
 800cba8:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	689b      	ldr	r3, [r3, #8]
 800cbae:	f043 0206 	orr.w	r2, r3, #6
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	689b      	ldr	r3, [r3, #8]
 800cbba:	f043 0220 	orr.w	r2, r3, #32
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800cbc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	3710      	adds	r7, #16
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cbce:	b004      	add	sp, #16
 800cbd0:	4770      	bx	lr
 800cbd2:	bf00      	nop
 800cbd4:	ffbdffbf 	.word	0xffbdffbf
 800cbd8:	03ee0000 	.word	0x03ee0000

0800cbdc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800cbdc:	b480      	push	{r7}
 800cbde:	b087      	sub	sp, #28
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	60f8      	str	r0, [r7, #12]
 800cbe4:	60b9      	str	r1, [r7, #8]
 800cbe6:	4613      	mov	r3, r2
 800cbe8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800cbea:	79fb      	ldrb	r3, [r7, #7]
 800cbec:	2b02      	cmp	r3, #2
 800cbee:	d165      	bne.n	800ccbc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800cbf0:	68bb      	ldr	r3, [r7, #8]
 800cbf2:	4a41      	ldr	r2, [pc, #260]	@ (800ccf8 <USB_SetTurnaroundTime+0x11c>)
 800cbf4:	4293      	cmp	r3, r2
 800cbf6:	d906      	bls.n	800cc06 <USB_SetTurnaroundTime+0x2a>
 800cbf8:	68bb      	ldr	r3, [r7, #8]
 800cbfa:	4a40      	ldr	r2, [pc, #256]	@ (800ccfc <USB_SetTurnaroundTime+0x120>)
 800cbfc:	4293      	cmp	r3, r2
 800cbfe:	d202      	bcs.n	800cc06 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800cc00:	230f      	movs	r3, #15
 800cc02:	617b      	str	r3, [r7, #20]
 800cc04:	e062      	b.n	800cccc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	4a3c      	ldr	r2, [pc, #240]	@ (800ccfc <USB_SetTurnaroundTime+0x120>)
 800cc0a:	4293      	cmp	r3, r2
 800cc0c:	d306      	bcc.n	800cc1c <USB_SetTurnaroundTime+0x40>
 800cc0e:	68bb      	ldr	r3, [r7, #8]
 800cc10:	4a3b      	ldr	r2, [pc, #236]	@ (800cd00 <USB_SetTurnaroundTime+0x124>)
 800cc12:	4293      	cmp	r3, r2
 800cc14:	d202      	bcs.n	800cc1c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800cc16:	230e      	movs	r3, #14
 800cc18:	617b      	str	r3, [r7, #20]
 800cc1a:	e057      	b.n	800cccc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800cc1c:	68bb      	ldr	r3, [r7, #8]
 800cc1e:	4a38      	ldr	r2, [pc, #224]	@ (800cd00 <USB_SetTurnaroundTime+0x124>)
 800cc20:	4293      	cmp	r3, r2
 800cc22:	d306      	bcc.n	800cc32 <USB_SetTurnaroundTime+0x56>
 800cc24:	68bb      	ldr	r3, [r7, #8]
 800cc26:	4a37      	ldr	r2, [pc, #220]	@ (800cd04 <USB_SetTurnaroundTime+0x128>)
 800cc28:	4293      	cmp	r3, r2
 800cc2a:	d202      	bcs.n	800cc32 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800cc2c:	230d      	movs	r3, #13
 800cc2e:	617b      	str	r3, [r7, #20]
 800cc30:	e04c      	b.n	800cccc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800cc32:	68bb      	ldr	r3, [r7, #8]
 800cc34:	4a33      	ldr	r2, [pc, #204]	@ (800cd04 <USB_SetTurnaroundTime+0x128>)
 800cc36:	4293      	cmp	r3, r2
 800cc38:	d306      	bcc.n	800cc48 <USB_SetTurnaroundTime+0x6c>
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	4a32      	ldr	r2, [pc, #200]	@ (800cd08 <USB_SetTurnaroundTime+0x12c>)
 800cc3e:	4293      	cmp	r3, r2
 800cc40:	d802      	bhi.n	800cc48 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800cc42:	230c      	movs	r3, #12
 800cc44:	617b      	str	r3, [r7, #20]
 800cc46:	e041      	b.n	800cccc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800cc48:	68bb      	ldr	r3, [r7, #8]
 800cc4a:	4a2f      	ldr	r2, [pc, #188]	@ (800cd08 <USB_SetTurnaroundTime+0x12c>)
 800cc4c:	4293      	cmp	r3, r2
 800cc4e:	d906      	bls.n	800cc5e <USB_SetTurnaroundTime+0x82>
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	4a2e      	ldr	r2, [pc, #184]	@ (800cd0c <USB_SetTurnaroundTime+0x130>)
 800cc54:	4293      	cmp	r3, r2
 800cc56:	d802      	bhi.n	800cc5e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800cc58:	230b      	movs	r3, #11
 800cc5a:	617b      	str	r3, [r7, #20]
 800cc5c:	e036      	b.n	800cccc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	4a2a      	ldr	r2, [pc, #168]	@ (800cd0c <USB_SetTurnaroundTime+0x130>)
 800cc62:	4293      	cmp	r3, r2
 800cc64:	d906      	bls.n	800cc74 <USB_SetTurnaroundTime+0x98>
 800cc66:	68bb      	ldr	r3, [r7, #8]
 800cc68:	4a29      	ldr	r2, [pc, #164]	@ (800cd10 <USB_SetTurnaroundTime+0x134>)
 800cc6a:	4293      	cmp	r3, r2
 800cc6c:	d802      	bhi.n	800cc74 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800cc6e:	230a      	movs	r3, #10
 800cc70:	617b      	str	r3, [r7, #20]
 800cc72:	e02b      	b.n	800cccc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800cc74:	68bb      	ldr	r3, [r7, #8]
 800cc76:	4a26      	ldr	r2, [pc, #152]	@ (800cd10 <USB_SetTurnaroundTime+0x134>)
 800cc78:	4293      	cmp	r3, r2
 800cc7a:	d906      	bls.n	800cc8a <USB_SetTurnaroundTime+0xae>
 800cc7c:	68bb      	ldr	r3, [r7, #8]
 800cc7e:	4a25      	ldr	r2, [pc, #148]	@ (800cd14 <USB_SetTurnaroundTime+0x138>)
 800cc80:	4293      	cmp	r3, r2
 800cc82:	d202      	bcs.n	800cc8a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800cc84:	2309      	movs	r3, #9
 800cc86:	617b      	str	r3, [r7, #20]
 800cc88:	e020      	b.n	800cccc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800cc8a:	68bb      	ldr	r3, [r7, #8]
 800cc8c:	4a21      	ldr	r2, [pc, #132]	@ (800cd14 <USB_SetTurnaroundTime+0x138>)
 800cc8e:	4293      	cmp	r3, r2
 800cc90:	d306      	bcc.n	800cca0 <USB_SetTurnaroundTime+0xc4>
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	4a20      	ldr	r2, [pc, #128]	@ (800cd18 <USB_SetTurnaroundTime+0x13c>)
 800cc96:	4293      	cmp	r3, r2
 800cc98:	d802      	bhi.n	800cca0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800cc9a:	2308      	movs	r3, #8
 800cc9c:	617b      	str	r3, [r7, #20]
 800cc9e:	e015      	b.n	800cccc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800cca0:	68bb      	ldr	r3, [r7, #8]
 800cca2:	4a1d      	ldr	r2, [pc, #116]	@ (800cd18 <USB_SetTurnaroundTime+0x13c>)
 800cca4:	4293      	cmp	r3, r2
 800cca6:	d906      	bls.n	800ccb6 <USB_SetTurnaroundTime+0xda>
 800cca8:	68bb      	ldr	r3, [r7, #8]
 800ccaa:	4a1c      	ldr	r2, [pc, #112]	@ (800cd1c <USB_SetTurnaroundTime+0x140>)
 800ccac:	4293      	cmp	r3, r2
 800ccae:	d202      	bcs.n	800ccb6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ccb0:	2307      	movs	r3, #7
 800ccb2:	617b      	str	r3, [r7, #20]
 800ccb4:	e00a      	b.n	800cccc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ccb6:	2306      	movs	r3, #6
 800ccb8:	617b      	str	r3, [r7, #20]
 800ccba:	e007      	b.n	800cccc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ccbc:	79fb      	ldrb	r3, [r7, #7]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d102      	bne.n	800ccc8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ccc2:	2309      	movs	r3, #9
 800ccc4:	617b      	str	r3, [r7, #20]
 800ccc6:	e001      	b.n	800cccc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ccc8:	2309      	movs	r3, #9
 800ccca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	68db      	ldr	r3, [r3, #12]
 800ccd0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	68da      	ldr	r2, [r3, #12]
 800ccdc:	697b      	ldr	r3, [r7, #20]
 800ccde:	029b      	lsls	r3, r3, #10
 800cce0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800cce4:	431a      	orrs	r2, r3
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ccea:	2300      	movs	r3, #0
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	371c      	adds	r7, #28
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf6:	4770      	bx	lr
 800ccf8:	00d8acbf 	.word	0x00d8acbf
 800ccfc:	00e4e1c0 	.word	0x00e4e1c0
 800cd00:	00f42400 	.word	0x00f42400
 800cd04:	01067380 	.word	0x01067380
 800cd08:	011a499f 	.word	0x011a499f
 800cd0c:	01312cff 	.word	0x01312cff
 800cd10:	014ca43f 	.word	0x014ca43f
 800cd14:	016e3600 	.word	0x016e3600
 800cd18:	01a6ab1f 	.word	0x01a6ab1f
 800cd1c:	01e84800 	.word	0x01e84800

0800cd20 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cd20:	b480      	push	{r7}
 800cd22:	b083      	sub	sp, #12
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	689b      	ldr	r3, [r3, #8]
 800cd2c:	f043 0201 	orr.w	r2, r3, #1
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cd34:	2300      	movs	r3, #0
}
 800cd36:	4618      	mov	r0, r3
 800cd38:	370c      	adds	r7, #12
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd40:	4770      	bx	lr

0800cd42 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cd42:	b480      	push	{r7}
 800cd44:	b083      	sub	sp, #12
 800cd46:	af00      	add	r7, sp, #0
 800cd48:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	689b      	ldr	r3, [r3, #8]
 800cd4e:	f023 0201 	bic.w	r2, r3, #1
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cd56:	2300      	movs	r3, #0
}
 800cd58:	4618      	mov	r0, r3
 800cd5a:	370c      	adds	r7, #12
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd62:	4770      	bx	lr

0800cd64 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b084      	sub	sp, #16
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
 800cd6c:	460b      	mov	r3, r1
 800cd6e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800cd70:	2300      	movs	r3, #0
 800cd72:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	68db      	ldr	r3, [r3, #12]
 800cd78:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800cd80:	78fb      	ldrb	r3, [r7, #3]
 800cd82:	2b01      	cmp	r3, #1
 800cd84:	d115      	bne.n	800cdb2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	68db      	ldr	r3, [r3, #12]
 800cd8a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800cd92:	200a      	movs	r0, #10
 800cd94:	f7f9 f824 	bl	8005de0 <HAL_Delay>
      ms += 10U;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	330a      	adds	r3, #10
 800cd9c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800cd9e:	6878      	ldr	r0, [r7, #4]
 800cda0:	f001 f93b 	bl	800e01a <USB_GetMode>
 800cda4:	4603      	mov	r3, r0
 800cda6:	2b01      	cmp	r3, #1
 800cda8:	d01e      	beq.n	800cde8 <USB_SetCurrentMode+0x84>
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	2bc7      	cmp	r3, #199	@ 0xc7
 800cdae:	d9f0      	bls.n	800cd92 <USB_SetCurrentMode+0x2e>
 800cdb0:	e01a      	b.n	800cde8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800cdb2:	78fb      	ldrb	r3, [r7, #3]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d115      	bne.n	800cde4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	68db      	ldr	r3, [r3, #12]
 800cdbc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800cdc4:	200a      	movs	r0, #10
 800cdc6:	f7f9 f80b 	bl	8005de0 <HAL_Delay>
      ms += 10U;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	330a      	adds	r3, #10
 800cdce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800cdd0:	6878      	ldr	r0, [r7, #4]
 800cdd2:	f001 f922 	bl	800e01a <USB_GetMode>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d005      	beq.n	800cde8 <USB_SetCurrentMode+0x84>
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	2bc7      	cmp	r3, #199	@ 0xc7
 800cde0:	d9f0      	bls.n	800cdc4 <USB_SetCurrentMode+0x60>
 800cde2:	e001      	b.n	800cde8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800cde4:	2301      	movs	r3, #1
 800cde6:	e005      	b.n	800cdf4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	2bc8      	cmp	r3, #200	@ 0xc8
 800cdec:	d101      	bne.n	800cdf2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800cdee:	2301      	movs	r3, #1
 800cdf0:	e000      	b.n	800cdf4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800cdf2:	2300      	movs	r3, #0
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	3710      	adds	r7, #16
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bd80      	pop	{r7, pc}

0800cdfc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cdfc:	b084      	sub	sp, #16
 800cdfe:	b580      	push	{r7, lr}
 800ce00:	b086      	sub	sp, #24
 800ce02:	af00      	add	r7, sp, #0
 800ce04:	6078      	str	r0, [r7, #4]
 800ce06:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800ce0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ce16:	2300      	movs	r3, #0
 800ce18:	613b      	str	r3, [r7, #16]
 800ce1a:	e009      	b.n	800ce30 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ce1c:	687a      	ldr	r2, [r7, #4]
 800ce1e:	693b      	ldr	r3, [r7, #16]
 800ce20:	3340      	adds	r3, #64	@ 0x40
 800ce22:	009b      	lsls	r3, r3, #2
 800ce24:	4413      	add	r3, r2
 800ce26:	2200      	movs	r2, #0
 800ce28:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ce2a:	693b      	ldr	r3, [r7, #16]
 800ce2c:	3301      	adds	r3, #1
 800ce2e:	613b      	str	r3, [r7, #16]
 800ce30:	693b      	ldr	r3, [r7, #16]
 800ce32:	2b0e      	cmp	r3, #14
 800ce34:	d9f2      	bls.n	800ce1c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ce36:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d11c      	bne.n	800ce78 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ce44:	685b      	ldr	r3, [r3, #4]
 800ce46:	68fa      	ldr	r2, [r7, #12]
 800ce48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ce4c:	f043 0302 	orr.w	r3, r3, #2
 800ce50:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce56:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	601a      	str	r2, [r3, #0]
 800ce76:	e005      	b.n	800ce84 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce7c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ce8a:	461a      	mov	r2, r3
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ce90:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800ce94:	2b01      	cmp	r3, #1
 800ce96:	d10d      	bne.n	800ceb4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ce98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d104      	bne.n	800ceaa <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800cea0:	2100      	movs	r1, #0
 800cea2:	6878      	ldr	r0, [r7, #4]
 800cea4:	f000 f968 	bl	800d178 <USB_SetDevSpeed>
 800cea8:	e008      	b.n	800cebc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ceaa:	2101      	movs	r1, #1
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f000 f963 	bl	800d178 <USB_SetDevSpeed>
 800ceb2:	e003      	b.n	800cebc <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ceb4:	2103      	movs	r1, #3
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f000 f95e 	bl	800d178 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cebc:	2110      	movs	r1, #16
 800cebe:	6878      	ldr	r0, [r7, #4]
 800cec0:	f000 f8fa 	bl	800d0b8 <USB_FlushTxFifo>
 800cec4:	4603      	mov	r3, r0
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d001      	beq.n	800cece <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800ceca:	2301      	movs	r3, #1
 800cecc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	f000 f924 	bl	800d11c <USB_FlushRxFifo>
 800ced4:	4603      	mov	r3, r0
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d001      	beq.n	800cede <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800ceda:	2301      	movs	r3, #1
 800cedc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cee4:	461a      	mov	r2, r3
 800cee6:	2300      	movs	r3, #0
 800cee8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cef0:	461a      	mov	r2, r3
 800cef2:	2300      	movs	r3, #0
 800cef4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cefc:	461a      	mov	r2, r3
 800cefe:	2300      	movs	r3, #0
 800cf00:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cf02:	2300      	movs	r3, #0
 800cf04:	613b      	str	r3, [r7, #16]
 800cf06:	e043      	b.n	800cf90 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cf08:	693b      	ldr	r3, [r7, #16]
 800cf0a:	015a      	lsls	r2, r3, #5
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	4413      	add	r3, r2
 800cf10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cf1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cf1e:	d118      	bne.n	800cf52 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800cf20:	693b      	ldr	r3, [r7, #16]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d10a      	bne.n	800cf3c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800cf26:	693b      	ldr	r3, [r7, #16]
 800cf28:	015a      	lsls	r2, r3, #5
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	4413      	add	r3, r2
 800cf2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cf32:	461a      	mov	r2, r3
 800cf34:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800cf38:	6013      	str	r3, [r2, #0]
 800cf3a:	e013      	b.n	800cf64 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800cf3c:	693b      	ldr	r3, [r7, #16]
 800cf3e:	015a      	lsls	r2, r3, #5
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	4413      	add	r3, r2
 800cf44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cf48:	461a      	mov	r2, r3
 800cf4a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800cf4e:	6013      	str	r3, [r2, #0]
 800cf50:	e008      	b.n	800cf64 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800cf52:	693b      	ldr	r3, [r7, #16]
 800cf54:	015a      	lsls	r2, r3, #5
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	4413      	add	r3, r2
 800cf5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cf5e:	461a      	mov	r2, r3
 800cf60:	2300      	movs	r3, #0
 800cf62:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800cf64:	693b      	ldr	r3, [r7, #16]
 800cf66:	015a      	lsls	r2, r3, #5
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	4413      	add	r3, r2
 800cf6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cf70:	461a      	mov	r2, r3
 800cf72:	2300      	movs	r3, #0
 800cf74:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800cf76:	693b      	ldr	r3, [r7, #16]
 800cf78:	015a      	lsls	r2, r3, #5
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	4413      	add	r3, r2
 800cf7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cf82:	461a      	mov	r2, r3
 800cf84:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800cf88:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cf8a:	693b      	ldr	r3, [r7, #16]
 800cf8c:	3301      	adds	r3, #1
 800cf8e:	613b      	str	r3, [r7, #16]
 800cf90:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800cf94:	461a      	mov	r2, r3
 800cf96:	693b      	ldr	r3, [r7, #16]
 800cf98:	4293      	cmp	r3, r2
 800cf9a:	d3b5      	bcc.n	800cf08 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	613b      	str	r3, [r7, #16]
 800cfa0:	e043      	b.n	800d02a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cfa2:	693b      	ldr	r3, [r7, #16]
 800cfa4:	015a      	lsls	r2, r3, #5
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	4413      	add	r3, r2
 800cfaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cfb4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cfb8:	d118      	bne.n	800cfec <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800cfba:	693b      	ldr	r3, [r7, #16]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d10a      	bne.n	800cfd6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800cfc0:	693b      	ldr	r3, [r7, #16]
 800cfc2:	015a      	lsls	r2, r3, #5
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	4413      	add	r3, r2
 800cfc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cfcc:	461a      	mov	r2, r3
 800cfce:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800cfd2:	6013      	str	r3, [r2, #0]
 800cfd4:	e013      	b.n	800cffe <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800cfd6:	693b      	ldr	r3, [r7, #16]
 800cfd8:	015a      	lsls	r2, r3, #5
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	4413      	add	r3, r2
 800cfde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cfe2:	461a      	mov	r2, r3
 800cfe4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800cfe8:	6013      	str	r3, [r2, #0]
 800cfea:	e008      	b.n	800cffe <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800cfec:	693b      	ldr	r3, [r7, #16]
 800cfee:	015a      	lsls	r2, r3, #5
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	4413      	add	r3, r2
 800cff4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cff8:	461a      	mov	r2, r3
 800cffa:	2300      	movs	r3, #0
 800cffc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800cffe:	693b      	ldr	r3, [r7, #16]
 800d000:	015a      	lsls	r2, r3, #5
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	4413      	add	r3, r2
 800d006:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d00a:	461a      	mov	r2, r3
 800d00c:	2300      	movs	r3, #0
 800d00e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d010:	693b      	ldr	r3, [r7, #16]
 800d012:	015a      	lsls	r2, r3, #5
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	4413      	add	r3, r2
 800d018:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d01c:	461a      	mov	r2, r3
 800d01e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d022:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d024:	693b      	ldr	r3, [r7, #16]
 800d026:	3301      	adds	r3, #1
 800d028:	613b      	str	r3, [r7, #16]
 800d02a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d02e:	461a      	mov	r2, r3
 800d030:	693b      	ldr	r3, [r7, #16]
 800d032:	4293      	cmp	r3, r2
 800d034:	d3b5      	bcc.n	800cfa2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d03c:	691b      	ldr	r3, [r3, #16]
 800d03e:	68fa      	ldr	r2, [r7, #12]
 800d040:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d044:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d048:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2200      	movs	r2, #0
 800d04e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800d056:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d058:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d105      	bne.n	800d06c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	699b      	ldr	r3, [r3, #24]
 800d064:	f043 0210 	orr.w	r2, r3, #16
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	699a      	ldr	r2, [r3, #24]
 800d070:	4b0f      	ldr	r3, [pc, #60]	@ (800d0b0 <USB_DevInit+0x2b4>)
 800d072:	4313      	orrs	r3, r2
 800d074:	687a      	ldr	r2, [r7, #4]
 800d076:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d078:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d005      	beq.n	800d08c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	699b      	ldr	r3, [r3, #24]
 800d084:	f043 0208 	orr.w	r2, r3, #8
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d08c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d090:	2b01      	cmp	r3, #1
 800d092:	d105      	bne.n	800d0a0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	699a      	ldr	r2, [r3, #24]
 800d098:	4b06      	ldr	r3, [pc, #24]	@ (800d0b4 <USB_DevInit+0x2b8>)
 800d09a:	4313      	orrs	r3, r2
 800d09c:	687a      	ldr	r2, [r7, #4]
 800d09e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d0a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	3718      	adds	r7, #24
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d0ac:	b004      	add	sp, #16
 800d0ae:	4770      	bx	lr
 800d0b0:	803c3800 	.word	0x803c3800
 800d0b4:	40000004 	.word	0x40000004

0800d0b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d0b8:	b480      	push	{r7}
 800d0ba:	b085      	sub	sp, #20
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
 800d0c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	3301      	adds	r3, #1
 800d0ca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d0d2:	d901      	bls.n	800d0d8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d0d4:	2303      	movs	r3, #3
 800d0d6:	e01b      	b.n	800d110 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	691b      	ldr	r3, [r3, #16]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	daf2      	bge.n	800d0c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	019b      	lsls	r3, r3, #6
 800d0e8:	f043 0220 	orr.w	r2, r3, #32
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	3301      	adds	r3, #1
 800d0f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d0fc:	d901      	bls.n	800d102 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d0fe:	2303      	movs	r3, #3
 800d100:	e006      	b.n	800d110 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	691b      	ldr	r3, [r3, #16]
 800d106:	f003 0320 	and.w	r3, r3, #32
 800d10a:	2b20      	cmp	r3, #32
 800d10c:	d0f0      	beq.n	800d0f0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d10e:	2300      	movs	r3, #0
}
 800d110:	4618      	mov	r0, r3
 800d112:	3714      	adds	r7, #20
 800d114:	46bd      	mov	sp, r7
 800d116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11a:	4770      	bx	lr

0800d11c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d11c:	b480      	push	{r7}
 800d11e:	b085      	sub	sp, #20
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d124:	2300      	movs	r3, #0
 800d126:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	3301      	adds	r3, #1
 800d12c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d134:	d901      	bls.n	800d13a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d136:	2303      	movs	r3, #3
 800d138:	e018      	b.n	800d16c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	691b      	ldr	r3, [r3, #16]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	daf2      	bge.n	800d128 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d142:	2300      	movs	r3, #0
 800d144:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	2210      	movs	r2, #16
 800d14a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	3301      	adds	r3, #1
 800d150:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d158:	d901      	bls.n	800d15e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d15a:	2303      	movs	r3, #3
 800d15c:	e006      	b.n	800d16c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	691b      	ldr	r3, [r3, #16]
 800d162:	f003 0310 	and.w	r3, r3, #16
 800d166:	2b10      	cmp	r3, #16
 800d168:	d0f0      	beq.n	800d14c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d16a:	2300      	movs	r3, #0
}
 800d16c:	4618      	mov	r0, r3
 800d16e:	3714      	adds	r7, #20
 800d170:	46bd      	mov	sp, r7
 800d172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d176:	4770      	bx	lr

0800d178 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d178:	b480      	push	{r7}
 800d17a:	b085      	sub	sp, #20
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
 800d180:	460b      	mov	r3, r1
 800d182:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d18e:	681a      	ldr	r2, [r3, #0]
 800d190:	78fb      	ldrb	r3, [r7, #3]
 800d192:	68f9      	ldr	r1, [r7, #12]
 800d194:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d198:	4313      	orrs	r3, r2
 800d19a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d19c:	2300      	movs	r3, #0
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	3714      	adds	r7, #20
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a8:	4770      	bx	lr

0800d1aa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800d1aa:	b480      	push	{r7}
 800d1ac:	b087      	sub	sp, #28
 800d1ae:	af00      	add	r7, sp, #0
 800d1b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d1b6:	693b      	ldr	r3, [r7, #16]
 800d1b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d1bc:	689b      	ldr	r3, [r3, #8]
 800d1be:	f003 0306 	and.w	r3, r3, #6
 800d1c2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d102      	bne.n	800d1d0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	75fb      	strb	r3, [r7, #23]
 800d1ce:	e00a      	b.n	800d1e6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	2b02      	cmp	r3, #2
 800d1d4:	d002      	beq.n	800d1dc <USB_GetDevSpeed+0x32>
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	2b06      	cmp	r3, #6
 800d1da:	d102      	bne.n	800d1e2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d1dc:	2302      	movs	r3, #2
 800d1de:	75fb      	strb	r3, [r7, #23]
 800d1e0:	e001      	b.n	800d1e6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800d1e2:	230f      	movs	r3, #15
 800d1e4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d1e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	371c      	adds	r7, #28
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f2:	4770      	bx	lr

0800d1f4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800d1f4:	b480      	push	{r7}
 800d1f6:	b085      	sub	sp, #20
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
 800d1fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	781b      	ldrb	r3, [r3, #0]
 800d206:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	785b      	ldrb	r3, [r3, #1]
 800d20c:	2b01      	cmp	r3, #1
 800d20e:	d139      	bne.n	800d284 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d216:	69da      	ldr	r2, [r3, #28]
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	781b      	ldrb	r3, [r3, #0]
 800d21c:	f003 030f 	and.w	r3, r3, #15
 800d220:	2101      	movs	r1, #1
 800d222:	fa01 f303 	lsl.w	r3, r1, r3
 800d226:	b29b      	uxth	r3, r3
 800d228:	68f9      	ldr	r1, [r7, #12]
 800d22a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d22e:	4313      	orrs	r3, r2
 800d230:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d232:	68bb      	ldr	r3, [r7, #8]
 800d234:	015a      	lsls	r2, r3, #5
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	4413      	add	r3, r2
 800d23a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d244:	2b00      	cmp	r3, #0
 800d246:	d153      	bne.n	800d2f0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	015a      	lsls	r2, r3, #5
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	4413      	add	r3, r2
 800d250:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d254:	681a      	ldr	r2, [r3, #0]
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	689b      	ldr	r3, [r3, #8]
 800d25a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d25e:	683b      	ldr	r3, [r7, #0]
 800d260:	791b      	ldrb	r3, [r3, #4]
 800d262:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d264:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	059b      	lsls	r3, r3, #22
 800d26a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d26c:	431a      	orrs	r2, r3
 800d26e:	68bb      	ldr	r3, [r7, #8]
 800d270:	0159      	lsls	r1, r3, #5
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	440b      	add	r3, r1
 800d276:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d27a:	4619      	mov	r1, r3
 800d27c:	4b20      	ldr	r3, [pc, #128]	@ (800d300 <USB_ActivateEndpoint+0x10c>)
 800d27e:	4313      	orrs	r3, r2
 800d280:	600b      	str	r3, [r1, #0]
 800d282:	e035      	b.n	800d2f0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d28a:	69da      	ldr	r2, [r3, #28]
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	781b      	ldrb	r3, [r3, #0]
 800d290:	f003 030f 	and.w	r3, r3, #15
 800d294:	2101      	movs	r1, #1
 800d296:	fa01 f303 	lsl.w	r3, r1, r3
 800d29a:	041b      	lsls	r3, r3, #16
 800d29c:	68f9      	ldr	r1, [r7, #12]
 800d29e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d2a2:	4313      	orrs	r3, r2
 800d2a4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d2a6:	68bb      	ldr	r3, [r7, #8]
 800d2a8:	015a      	lsls	r2, r3, #5
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	4413      	add	r3, r2
 800d2ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d119      	bne.n	800d2f0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	015a      	lsls	r2, r3, #5
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	4413      	add	r3, r2
 800d2c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d2c8:	681a      	ldr	r2, [r3, #0]
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	689b      	ldr	r3, [r3, #8]
 800d2ce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	791b      	ldrb	r3, [r3, #4]
 800d2d6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d2d8:	430b      	orrs	r3, r1
 800d2da:	431a      	orrs	r2, r3
 800d2dc:	68bb      	ldr	r3, [r7, #8]
 800d2de:	0159      	lsls	r1, r3, #5
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	440b      	add	r3, r1
 800d2e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d2e8:	4619      	mov	r1, r3
 800d2ea:	4b05      	ldr	r3, [pc, #20]	@ (800d300 <USB_ActivateEndpoint+0x10c>)
 800d2ec:	4313      	orrs	r3, r2
 800d2ee:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800d2f0:	2300      	movs	r3, #0
}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	3714      	adds	r7, #20
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fc:	4770      	bx	lr
 800d2fe:	bf00      	nop
 800d300:	10008000 	.word	0x10008000

0800d304 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800d304:	b480      	push	{r7}
 800d306:	b085      	sub	sp, #20
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
 800d30c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	781b      	ldrb	r3, [r3, #0]
 800d316:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	785b      	ldrb	r3, [r3, #1]
 800d31c:	2b01      	cmp	r3, #1
 800d31e:	d161      	bne.n	800d3e4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d320:	68bb      	ldr	r3, [r7, #8]
 800d322:	015a      	lsls	r2, r3, #5
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	4413      	add	r3, r2
 800d328:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d332:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d336:	d11f      	bne.n	800d378 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d338:	68bb      	ldr	r3, [r7, #8]
 800d33a:	015a      	lsls	r2, r3, #5
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	4413      	add	r3, r2
 800d340:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	68ba      	ldr	r2, [r7, #8]
 800d348:	0151      	lsls	r1, r2, #5
 800d34a:	68fa      	ldr	r2, [r7, #12]
 800d34c:	440a      	add	r2, r1
 800d34e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d352:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d356:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800d358:	68bb      	ldr	r3, [r7, #8]
 800d35a:	015a      	lsls	r2, r3, #5
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	4413      	add	r3, r2
 800d360:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	68ba      	ldr	r2, [r7, #8]
 800d368:	0151      	lsls	r1, r2, #5
 800d36a:	68fa      	ldr	r2, [r7, #12]
 800d36c:	440a      	add	r2, r1
 800d36e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d372:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d376:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d37e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	781b      	ldrb	r3, [r3, #0]
 800d384:	f003 030f 	and.w	r3, r3, #15
 800d388:	2101      	movs	r1, #1
 800d38a:	fa01 f303 	lsl.w	r3, r1, r3
 800d38e:	b29b      	uxth	r3, r3
 800d390:	43db      	mvns	r3, r3
 800d392:	68f9      	ldr	r1, [r7, #12]
 800d394:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d398:	4013      	ands	r3, r2
 800d39a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d3a2:	69da      	ldr	r2, [r3, #28]
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	781b      	ldrb	r3, [r3, #0]
 800d3a8:	f003 030f 	and.w	r3, r3, #15
 800d3ac:	2101      	movs	r1, #1
 800d3ae:	fa01 f303 	lsl.w	r3, r1, r3
 800d3b2:	b29b      	uxth	r3, r3
 800d3b4:	43db      	mvns	r3, r3
 800d3b6:	68f9      	ldr	r1, [r7, #12]
 800d3b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d3bc:	4013      	ands	r3, r2
 800d3be:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d3c0:	68bb      	ldr	r3, [r7, #8]
 800d3c2:	015a      	lsls	r2, r3, #5
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	4413      	add	r3, r2
 800d3c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d3cc:	681a      	ldr	r2, [r3, #0]
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	0159      	lsls	r1, r3, #5
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	440b      	add	r3, r1
 800d3d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d3da:	4619      	mov	r1, r3
 800d3dc:	4b35      	ldr	r3, [pc, #212]	@ (800d4b4 <USB_DeactivateEndpoint+0x1b0>)
 800d3de:	4013      	ands	r3, r2
 800d3e0:	600b      	str	r3, [r1, #0]
 800d3e2:	e060      	b.n	800d4a6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	015a      	lsls	r2, r3, #5
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	4413      	add	r3, r2
 800d3ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d3f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d3fa:	d11f      	bne.n	800d43c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d3fc:	68bb      	ldr	r3, [r7, #8]
 800d3fe:	015a      	lsls	r2, r3, #5
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	4413      	add	r3, r2
 800d404:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	68ba      	ldr	r2, [r7, #8]
 800d40c:	0151      	lsls	r1, r2, #5
 800d40e:	68fa      	ldr	r2, [r7, #12]
 800d410:	440a      	add	r2, r1
 800d412:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d416:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d41a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	015a      	lsls	r2, r3, #5
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	4413      	add	r3, r2
 800d424:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	68ba      	ldr	r2, [r7, #8]
 800d42c:	0151      	lsls	r1, r2, #5
 800d42e:	68fa      	ldr	r2, [r7, #12]
 800d430:	440a      	add	r2, r1
 800d432:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d436:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d43a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d442:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	781b      	ldrb	r3, [r3, #0]
 800d448:	f003 030f 	and.w	r3, r3, #15
 800d44c:	2101      	movs	r1, #1
 800d44e:	fa01 f303 	lsl.w	r3, r1, r3
 800d452:	041b      	lsls	r3, r3, #16
 800d454:	43db      	mvns	r3, r3
 800d456:	68f9      	ldr	r1, [r7, #12]
 800d458:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d45c:	4013      	ands	r3, r2
 800d45e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d466:	69da      	ldr	r2, [r3, #28]
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	781b      	ldrb	r3, [r3, #0]
 800d46c:	f003 030f 	and.w	r3, r3, #15
 800d470:	2101      	movs	r1, #1
 800d472:	fa01 f303 	lsl.w	r3, r1, r3
 800d476:	041b      	lsls	r3, r3, #16
 800d478:	43db      	mvns	r3, r3
 800d47a:	68f9      	ldr	r1, [r7, #12]
 800d47c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d480:	4013      	ands	r3, r2
 800d482:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d484:	68bb      	ldr	r3, [r7, #8]
 800d486:	015a      	lsls	r2, r3, #5
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	4413      	add	r3, r2
 800d48c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d490:	681a      	ldr	r2, [r3, #0]
 800d492:	68bb      	ldr	r3, [r7, #8]
 800d494:	0159      	lsls	r1, r3, #5
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	440b      	add	r3, r1
 800d49a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d49e:	4619      	mov	r1, r3
 800d4a0:	4b05      	ldr	r3, [pc, #20]	@ (800d4b8 <USB_DeactivateEndpoint+0x1b4>)
 800d4a2:	4013      	ands	r3, r2
 800d4a4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d4a6:	2300      	movs	r3, #0
}
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	3714      	adds	r7, #20
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b2:	4770      	bx	lr
 800d4b4:	ec337800 	.word	0xec337800
 800d4b8:	eff37800 	.word	0xeff37800

0800d4bc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b08a      	sub	sp, #40	@ 0x28
 800d4c0:	af02      	add	r7, sp, #8
 800d4c2:	60f8      	str	r0, [r7, #12]
 800d4c4:	60b9      	str	r1, [r7, #8]
 800d4c6:	4613      	mov	r3, r2
 800d4c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800d4ce:	68bb      	ldr	r3, [r7, #8]
 800d4d0:	781b      	ldrb	r3, [r3, #0]
 800d4d2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	785b      	ldrb	r3, [r3, #1]
 800d4d8:	2b01      	cmp	r3, #1
 800d4da:	f040 8181 	bne.w	800d7e0 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d4de:	68bb      	ldr	r3, [r7, #8]
 800d4e0:	691b      	ldr	r3, [r3, #16]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d132      	bne.n	800d54c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d4e6:	69bb      	ldr	r3, [r7, #24]
 800d4e8:	015a      	lsls	r2, r3, #5
 800d4ea:	69fb      	ldr	r3, [r7, #28]
 800d4ec:	4413      	add	r3, r2
 800d4ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d4f2:	691a      	ldr	r2, [r3, #16]
 800d4f4:	69bb      	ldr	r3, [r7, #24]
 800d4f6:	0159      	lsls	r1, r3, #5
 800d4f8:	69fb      	ldr	r3, [r7, #28]
 800d4fa:	440b      	add	r3, r1
 800d4fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d500:	4619      	mov	r1, r3
 800d502:	4ba5      	ldr	r3, [pc, #660]	@ (800d798 <USB_EPStartXfer+0x2dc>)
 800d504:	4013      	ands	r3, r2
 800d506:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d508:	69bb      	ldr	r3, [r7, #24]
 800d50a:	015a      	lsls	r2, r3, #5
 800d50c:	69fb      	ldr	r3, [r7, #28]
 800d50e:	4413      	add	r3, r2
 800d510:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d514:	691b      	ldr	r3, [r3, #16]
 800d516:	69ba      	ldr	r2, [r7, #24]
 800d518:	0151      	lsls	r1, r2, #5
 800d51a:	69fa      	ldr	r2, [r7, #28]
 800d51c:	440a      	add	r2, r1
 800d51e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d522:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d526:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d528:	69bb      	ldr	r3, [r7, #24]
 800d52a:	015a      	lsls	r2, r3, #5
 800d52c:	69fb      	ldr	r3, [r7, #28]
 800d52e:	4413      	add	r3, r2
 800d530:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d534:	691a      	ldr	r2, [r3, #16]
 800d536:	69bb      	ldr	r3, [r7, #24]
 800d538:	0159      	lsls	r1, r3, #5
 800d53a:	69fb      	ldr	r3, [r7, #28]
 800d53c:	440b      	add	r3, r1
 800d53e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d542:	4619      	mov	r1, r3
 800d544:	4b95      	ldr	r3, [pc, #596]	@ (800d79c <USB_EPStartXfer+0x2e0>)
 800d546:	4013      	ands	r3, r2
 800d548:	610b      	str	r3, [r1, #16]
 800d54a:	e092      	b.n	800d672 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d54c:	69bb      	ldr	r3, [r7, #24]
 800d54e:	015a      	lsls	r2, r3, #5
 800d550:	69fb      	ldr	r3, [r7, #28]
 800d552:	4413      	add	r3, r2
 800d554:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d558:	691a      	ldr	r2, [r3, #16]
 800d55a:	69bb      	ldr	r3, [r7, #24]
 800d55c:	0159      	lsls	r1, r3, #5
 800d55e:	69fb      	ldr	r3, [r7, #28]
 800d560:	440b      	add	r3, r1
 800d562:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d566:	4619      	mov	r1, r3
 800d568:	4b8c      	ldr	r3, [pc, #560]	@ (800d79c <USB_EPStartXfer+0x2e0>)
 800d56a:	4013      	ands	r3, r2
 800d56c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d56e:	69bb      	ldr	r3, [r7, #24]
 800d570:	015a      	lsls	r2, r3, #5
 800d572:	69fb      	ldr	r3, [r7, #28]
 800d574:	4413      	add	r3, r2
 800d576:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d57a:	691a      	ldr	r2, [r3, #16]
 800d57c:	69bb      	ldr	r3, [r7, #24]
 800d57e:	0159      	lsls	r1, r3, #5
 800d580:	69fb      	ldr	r3, [r7, #28]
 800d582:	440b      	add	r3, r1
 800d584:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d588:	4619      	mov	r1, r3
 800d58a:	4b83      	ldr	r3, [pc, #524]	@ (800d798 <USB_EPStartXfer+0x2dc>)
 800d58c:	4013      	ands	r3, r2
 800d58e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800d590:	69bb      	ldr	r3, [r7, #24]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d11a      	bne.n	800d5cc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800d596:	68bb      	ldr	r3, [r7, #8]
 800d598:	691a      	ldr	r2, [r3, #16]
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	689b      	ldr	r3, [r3, #8]
 800d59e:	429a      	cmp	r2, r3
 800d5a0:	d903      	bls.n	800d5aa <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800d5a2:	68bb      	ldr	r3, [r7, #8]
 800d5a4:	689a      	ldr	r2, [r3, #8]
 800d5a6:	68bb      	ldr	r3, [r7, #8]
 800d5a8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d5aa:	69bb      	ldr	r3, [r7, #24]
 800d5ac:	015a      	lsls	r2, r3, #5
 800d5ae:	69fb      	ldr	r3, [r7, #28]
 800d5b0:	4413      	add	r3, r2
 800d5b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d5b6:	691b      	ldr	r3, [r3, #16]
 800d5b8:	69ba      	ldr	r2, [r7, #24]
 800d5ba:	0151      	lsls	r1, r2, #5
 800d5bc:	69fa      	ldr	r2, [r7, #28]
 800d5be:	440a      	add	r2, r1
 800d5c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d5c4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d5c8:	6113      	str	r3, [r2, #16]
 800d5ca:	e01b      	b.n	800d604 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d5cc:	69bb      	ldr	r3, [r7, #24]
 800d5ce:	015a      	lsls	r2, r3, #5
 800d5d0:	69fb      	ldr	r3, [r7, #28]
 800d5d2:	4413      	add	r3, r2
 800d5d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d5d8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d5da:	68bb      	ldr	r3, [r7, #8]
 800d5dc:	6919      	ldr	r1, [r3, #16]
 800d5de:	68bb      	ldr	r3, [r7, #8]
 800d5e0:	689b      	ldr	r3, [r3, #8]
 800d5e2:	440b      	add	r3, r1
 800d5e4:	1e59      	subs	r1, r3, #1
 800d5e6:	68bb      	ldr	r3, [r7, #8]
 800d5e8:	689b      	ldr	r3, [r3, #8]
 800d5ea:	fbb1 f3f3 	udiv	r3, r1, r3
 800d5ee:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d5f0:	4b6b      	ldr	r3, [pc, #428]	@ (800d7a0 <USB_EPStartXfer+0x2e4>)
 800d5f2:	400b      	ands	r3, r1
 800d5f4:	69b9      	ldr	r1, [r7, #24]
 800d5f6:	0148      	lsls	r0, r1, #5
 800d5f8:	69f9      	ldr	r1, [r7, #28]
 800d5fa:	4401      	add	r1, r0
 800d5fc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800d600:	4313      	orrs	r3, r2
 800d602:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d604:	69bb      	ldr	r3, [r7, #24]
 800d606:	015a      	lsls	r2, r3, #5
 800d608:	69fb      	ldr	r3, [r7, #28]
 800d60a:	4413      	add	r3, r2
 800d60c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d610:	691a      	ldr	r2, [r3, #16]
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	691b      	ldr	r3, [r3, #16]
 800d616:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d61a:	69b9      	ldr	r1, [r7, #24]
 800d61c:	0148      	lsls	r0, r1, #5
 800d61e:	69f9      	ldr	r1, [r7, #28]
 800d620:	4401      	add	r1, r0
 800d622:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800d626:	4313      	orrs	r3, r2
 800d628:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800d62a:	68bb      	ldr	r3, [r7, #8]
 800d62c:	791b      	ldrb	r3, [r3, #4]
 800d62e:	2b01      	cmp	r3, #1
 800d630:	d11f      	bne.n	800d672 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d632:	69bb      	ldr	r3, [r7, #24]
 800d634:	015a      	lsls	r2, r3, #5
 800d636:	69fb      	ldr	r3, [r7, #28]
 800d638:	4413      	add	r3, r2
 800d63a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d63e:	691b      	ldr	r3, [r3, #16]
 800d640:	69ba      	ldr	r2, [r7, #24]
 800d642:	0151      	lsls	r1, r2, #5
 800d644:	69fa      	ldr	r2, [r7, #28]
 800d646:	440a      	add	r2, r1
 800d648:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d64c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800d650:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d652:	69bb      	ldr	r3, [r7, #24]
 800d654:	015a      	lsls	r2, r3, #5
 800d656:	69fb      	ldr	r3, [r7, #28]
 800d658:	4413      	add	r3, r2
 800d65a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d65e:	691b      	ldr	r3, [r3, #16]
 800d660:	69ba      	ldr	r2, [r7, #24]
 800d662:	0151      	lsls	r1, r2, #5
 800d664:	69fa      	ldr	r2, [r7, #28]
 800d666:	440a      	add	r2, r1
 800d668:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d66c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d670:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800d672:	79fb      	ldrb	r3, [r7, #7]
 800d674:	2b01      	cmp	r3, #1
 800d676:	d14b      	bne.n	800d710 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d678:	68bb      	ldr	r3, [r7, #8]
 800d67a:	69db      	ldr	r3, [r3, #28]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d009      	beq.n	800d694 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d680:	69bb      	ldr	r3, [r7, #24]
 800d682:	015a      	lsls	r2, r3, #5
 800d684:	69fb      	ldr	r3, [r7, #28]
 800d686:	4413      	add	r3, r2
 800d688:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d68c:	461a      	mov	r2, r3
 800d68e:	68bb      	ldr	r3, [r7, #8]
 800d690:	69db      	ldr	r3, [r3, #28]
 800d692:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800d694:	68bb      	ldr	r3, [r7, #8]
 800d696:	791b      	ldrb	r3, [r3, #4]
 800d698:	2b01      	cmp	r3, #1
 800d69a:	d128      	bne.n	800d6ee <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d69c:	69fb      	ldr	r3, [r7, #28]
 800d69e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d6a2:	689b      	ldr	r3, [r3, #8]
 800d6a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d110      	bne.n	800d6ce <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d6ac:	69bb      	ldr	r3, [r7, #24]
 800d6ae:	015a      	lsls	r2, r3, #5
 800d6b0:	69fb      	ldr	r3, [r7, #28]
 800d6b2:	4413      	add	r3, r2
 800d6b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	69ba      	ldr	r2, [r7, #24]
 800d6bc:	0151      	lsls	r1, r2, #5
 800d6be:	69fa      	ldr	r2, [r7, #28]
 800d6c0:	440a      	add	r2, r1
 800d6c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d6c6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d6ca:	6013      	str	r3, [r2, #0]
 800d6cc:	e00f      	b.n	800d6ee <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d6ce:	69bb      	ldr	r3, [r7, #24]
 800d6d0:	015a      	lsls	r2, r3, #5
 800d6d2:	69fb      	ldr	r3, [r7, #28]
 800d6d4:	4413      	add	r3, r2
 800d6d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	69ba      	ldr	r2, [r7, #24]
 800d6de:	0151      	lsls	r1, r2, #5
 800d6e0:	69fa      	ldr	r2, [r7, #28]
 800d6e2:	440a      	add	r2, r1
 800d6e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d6e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d6ec:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d6ee:	69bb      	ldr	r3, [r7, #24]
 800d6f0:	015a      	lsls	r2, r3, #5
 800d6f2:	69fb      	ldr	r3, [r7, #28]
 800d6f4:	4413      	add	r3, r2
 800d6f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	69ba      	ldr	r2, [r7, #24]
 800d6fe:	0151      	lsls	r1, r2, #5
 800d700:	69fa      	ldr	r2, [r7, #28]
 800d702:	440a      	add	r2, r1
 800d704:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d708:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800d70c:	6013      	str	r3, [r2, #0]
 800d70e:	e16a      	b.n	800d9e6 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d710:	69bb      	ldr	r3, [r7, #24]
 800d712:	015a      	lsls	r2, r3, #5
 800d714:	69fb      	ldr	r3, [r7, #28]
 800d716:	4413      	add	r3, r2
 800d718:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	69ba      	ldr	r2, [r7, #24]
 800d720:	0151      	lsls	r1, r2, #5
 800d722:	69fa      	ldr	r2, [r7, #28]
 800d724:	440a      	add	r2, r1
 800d726:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d72a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800d72e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	791b      	ldrb	r3, [r3, #4]
 800d734:	2b01      	cmp	r3, #1
 800d736:	d015      	beq.n	800d764 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d738:	68bb      	ldr	r3, [r7, #8]
 800d73a:	691b      	ldr	r3, [r3, #16]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	f000 8152 	beq.w	800d9e6 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d742:	69fb      	ldr	r3, [r7, #28]
 800d744:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d748:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d74a:	68bb      	ldr	r3, [r7, #8]
 800d74c:	781b      	ldrb	r3, [r3, #0]
 800d74e:	f003 030f 	and.w	r3, r3, #15
 800d752:	2101      	movs	r1, #1
 800d754:	fa01 f303 	lsl.w	r3, r1, r3
 800d758:	69f9      	ldr	r1, [r7, #28]
 800d75a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d75e:	4313      	orrs	r3, r2
 800d760:	634b      	str	r3, [r1, #52]	@ 0x34
 800d762:	e140      	b.n	800d9e6 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d764:	69fb      	ldr	r3, [r7, #28]
 800d766:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d76a:	689b      	ldr	r3, [r3, #8]
 800d76c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d770:	2b00      	cmp	r3, #0
 800d772:	d117      	bne.n	800d7a4 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d774:	69bb      	ldr	r3, [r7, #24]
 800d776:	015a      	lsls	r2, r3, #5
 800d778:	69fb      	ldr	r3, [r7, #28]
 800d77a:	4413      	add	r3, r2
 800d77c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	69ba      	ldr	r2, [r7, #24]
 800d784:	0151      	lsls	r1, r2, #5
 800d786:	69fa      	ldr	r2, [r7, #28]
 800d788:	440a      	add	r2, r1
 800d78a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d78e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d792:	6013      	str	r3, [r2, #0]
 800d794:	e016      	b.n	800d7c4 <USB_EPStartXfer+0x308>
 800d796:	bf00      	nop
 800d798:	e007ffff 	.word	0xe007ffff
 800d79c:	fff80000 	.word	0xfff80000
 800d7a0:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d7a4:	69bb      	ldr	r3, [r7, #24]
 800d7a6:	015a      	lsls	r2, r3, #5
 800d7a8:	69fb      	ldr	r3, [r7, #28]
 800d7aa:	4413      	add	r3, r2
 800d7ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	69ba      	ldr	r2, [r7, #24]
 800d7b4:	0151      	lsls	r1, r2, #5
 800d7b6:	69fa      	ldr	r2, [r7, #28]
 800d7b8:	440a      	add	r2, r1
 800d7ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d7be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d7c2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d7c4:	68bb      	ldr	r3, [r7, #8]
 800d7c6:	68d9      	ldr	r1, [r3, #12]
 800d7c8:	68bb      	ldr	r3, [r7, #8]
 800d7ca:	781a      	ldrb	r2, [r3, #0]
 800d7cc:	68bb      	ldr	r3, [r7, #8]
 800d7ce:	691b      	ldr	r3, [r3, #16]
 800d7d0:	b298      	uxth	r0, r3
 800d7d2:	79fb      	ldrb	r3, [r7, #7]
 800d7d4:	9300      	str	r3, [sp, #0]
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	68f8      	ldr	r0, [r7, #12]
 800d7da:	f000 f9b9 	bl	800db50 <USB_WritePacket>
 800d7de:	e102      	b.n	800d9e6 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d7e0:	69bb      	ldr	r3, [r7, #24]
 800d7e2:	015a      	lsls	r2, r3, #5
 800d7e4:	69fb      	ldr	r3, [r7, #28]
 800d7e6:	4413      	add	r3, r2
 800d7e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d7ec:	691a      	ldr	r2, [r3, #16]
 800d7ee:	69bb      	ldr	r3, [r7, #24]
 800d7f0:	0159      	lsls	r1, r3, #5
 800d7f2:	69fb      	ldr	r3, [r7, #28]
 800d7f4:	440b      	add	r3, r1
 800d7f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d7fa:	4619      	mov	r1, r3
 800d7fc:	4b7c      	ldr	r3, [pc, #496]	@ (800d9f0 <USB_EPStartXfer+0x534>)
 800d7fe:	4013      	ands	r3, r2
 800d800:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d802:	69bb      	ldr	r3, [r7, #24]
 800d804:	015a      	lsls	r2, r3, #5
 800d806:	69fb      	ldr	r3, [r7, #28]
 800d808:	4413      	add	r3, r2
 800d80a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d80e:	691a      	ldr	r2, [r3, #16]
 800d810:	69bb      	ldr	r3, [r7, #24]
 800d812:	0159      	lsls	r1, r3, #5
 800d814:	69fb      	ldr	r3, [r7, #28]
 800d816:	440b      	add	r3, r1
 800d818:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d81c:	4619      	mov	r1, r3
 800d81e:	4b75      	ldr	r3, [pc, #468]	@ (800d9f4 <USB_EPStartXfer+0x538>)
 800d820:	4013      	ands	r3, r2
 800d822:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800d824:	69bb      	ldr	r3, [r7, #24]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d12f      	bne.n	800d88a <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800d82a:	68bb      	ldr	r3, [r7, #8]
 800d82c:	691b      	ldr	r3, [r3, #16]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d003      	beq.n	800d83a <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800d832:	68bb      	ldr	r3, [r7, #8]
 800d834:	689a      	ldr	r2, [r3, #8]
 800d836:	68bb      	ldr	r3, [r7, #8]
 800d838:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800d83a:	68bb      	ldr	r3, [r7, #8]
 800d83c:	689a      	ldr	r2, [r3, #8]
 800d83e:	68bb      	ldr	r3, [r7, #8]
 800d840:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800d842:	69bb      	ldr	r3, [r7, #24]
 800d844:	015a      	lsls	r2, r3, #5
 800d846:	69fb      	ldr	r3, [r7, #28]
 800d848:	4413      	add	r3, r2
 800d84a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d84e:	691a      	ldr	r2, [r3, #16]
 800d850:	68bb      	ldr	r3, [r7, #8]
 800d852:	6a1b      	ldr	r3, [r3, #32]
 800d854:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d858:	69b9      	ldr	r1, [r7, #24]
 800d85a:	0148      	lsls	r0, r1, #5
 800d85c:	69f9      	ldr	r1, [r7, #28]
 800d85e:	4401      	add	r1, r0
 800d860:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d864:	4313      	orrs	r3, r2
 800d866:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d868:	69bb      	ldr	r3, [r7, #24]
 800d86a:	015a      	lsls	r2, r3, #5
 800d86c:	69fb      	ldr	r3, [r7, #28]
 800d86e:	4413      	add	r3, r2
 800d870:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d874:	691b      	ldr	r3, [r3, #16]
 800d876:	69ba      	ldr	r2, [r7, #24]
 800d878:	0151      	lsls	r1, r2, #5
 800d87a:	69fa      	ldr	r2, [r7, #28]
 800d87c:	440a      	add	r2, r1
 800d87e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d882:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d886:	6113      	str	r3, [r2, #16]
 800d888:	e05f      	b.n	800d94a <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	691b      	ldr	r3, [r3, #16]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d123      	bne.n	800d8da <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d892:	69bb      	ldr	r3, [r7, #24]
 800d894:	015a      	lsls	r2, r3, #5
 800d896:	69fb      	ldr	r3, [r7, #28]
 800d898:	4413      	add	r3, r2
 800d89a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d89e:	691a      	ldr	r2, [r3, #16]
 800d8a0:	68bb      	ldr	r3, [r7, #8]
 800d8a2:	689b      	ldr	r3, [r3, #8]
 800d8a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d8a8:	69b9      	ldr	r1, [r7, #24]
 800d8aa:	0148      	lsls	r0, r1, #5
 800d8ac:	69f9      	ldr	r1, [r7, #28]
 800d8ae:	4401      	add	r1, r0
 800d8b0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d8b4:	4313      	orrs	r3, r2
 800d8b6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d8b8:	69bb      	ldr	r3, [r7, #24]
 800d8ba:	015a      	lsls	r2, r3, #5
 800d8bc:	69fb      	ldr	r3, [r7, #28]
 800d8be:	4413      	add	r3, r2
 800d8c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d8c4:	691b      	ldr	r3, [r3, #16]
 800d8c6:	69ba      	ldr	r2, [r7, #24]
 800d8c8:	0151      	lsls	r1, r2, #5
 800d8ca:	69fa      	ldr	r2, [r7, #28]
 800d8cc:	440a      	add	r2, r1
 800d8ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d8d2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d8d6:	6113      	str	r3, [r2, #16]
 800d8d8:	e037      	b.n	800d94a <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d8da:	68bb      	ldr	r3, [r7, #8]
 800d8dc:	691a      	ldr	r2, [r3, #16]
 800d8de:	68bb      	ldr	r3, [r7, #8]
 800d8e0:	689b      	ldr	r3, [r3, #8]
 800d8e2:	4413      	add	r3, r2
 800d8e4:	1e5a      	subs	r2, r3, #1
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	689b      	ldr	r3, [r3, #8]
 800d8ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8ee:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	689b      	ldr	r3, [r3, #8]
 800d8f4:	8afa      	ldrh	r2, [r7, #22]
 800d8f6:	fb03 f202 	mul.w	r2, r3, r2
 800d8fa:	68bb      	ldr	r3, [r7, #8]
 800d8fc:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d8fe:	69bb      	ldr	r3, [r7, #24]
 800d900:	015a      	lsls	r2, r3, #5
 800d902:	69fb      	ldr	r3, [r7, #28]
 800d904:	4413      	add	r3, r2
 800d906:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d90a:	691a      	ldr	r2, [r3, #16]
 800d90c:	8afb      	ldrh	r3, [r7, #22]
 800d90e:	04d9      	lsls	r1, r3, #19
 800d910:	4b39      	ldr	r3, [pc, #228]	@ (800d9f8 <USB_EPStartXfer+0x53c>)
 800d912:	400b      	ands	r3, r1
 800d914:	69b9      	ldr	r1, [r7, #24]
 800d916:	0148      	lsls	r0, r1, #5
 800d918:	69f9      	ldr	r1, [r7, #28]
 800d91a:	4401      	add	r1, r0
 800d91c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d920:	4313      	orrs	r3, r2
 800d922:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800d924:	69bb      	ldr	r3, [r7, #24]
 800d926:	015a      	lsls	r2, r3, #5
 800d928:	69fb      	ldr	r3, [r7, #28]
 800d92a:	4413      	add	r3, r2
 800d92c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d930:	691a      	ldr	r2, [r3, #16]
 800d932:	68bb      	ldr	r3, [r7, #8]
 800d934:	6a1b      	ldr	r3, [r3, #32]
 800d936:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d93a:	69b9      	ldr	r1, [r7, #24]
 800d93c:	0148      	lsls	r0, r1, #5
 800d93e:	69f9      	ldr	r1, [r7, #28]
 800d940:	4401      	add	r1, r0
 800d942:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d946:	4313      	orrs	r3, r2
 800d948:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800d94a:	79fb      	ldrb	r3, [r7, #7]
 800d94c:	2b01      	cmp	r3, #1
 800d94e:	d10d      	bne.n	800d96c <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d950:	68bb      	ldr	r3, [r7, #8]
 800d952:	68db      	ldr	r3, [r3, #12]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d009      	beq.n	800d96c <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d958:	68bb      	ldr	r3, [r7, #8]
 800d95a:	68d9      	ldr	r1, [r3, #12]
 800d95c:	69bb      	ldr	r3, [r7, #24]
 800d95e:	015a      	lsls	r2, r3, #5
 800d960:	69fb      	ldr	r3, [r7, #28]
 800d962:	4413      	add	r3, r2
 800d964:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d968:	460a      	mov	r2, r1
 800d96a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	791b      	ldrb	r3, [r3, #4]
 800d970:	2b01      	cmp	r3, #1
 800d972:	d128      	bne.n	800d9c6 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d974:	69fb      	ldr	r3, [r7, #28]
 800d976:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d97a:	689b      	ldr	r3, [r3, #8]
 800d97c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d980:	2b00      	cmp	r3, #0
 800d982:	d110      	bne.n	800d9a6 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d984:	69bb      	ldr	r3, [r7, #24]
 800d986:	015a      	lsls	r2, r3, #5
 800d988:	69fb      	ldr	r3, [r7, #28]
 800d98a:	4413      	add	r3, r2
 800d98c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	69ba      	ldr	r2, [r7, #24]
 800d994:	0151      	lsls	r1, r2, #5
 800d996:	69fa      	ldr	r2, [r7, #28]
 800d998:	440a      	add	r2, r1
 800d99a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d99e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d9a2:	6013      	str	r3, [r2, #0]
 800d9a4:	e00f      	b.n	800d9c6 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d9a6:	69bb      	ldr	r3, [r7, #24]
 800d9a8:	015a      	lsls	r2, r3, #5
 800d9aa:	69fb      	ldr	r3, [r7, #28]
 800d9ac:	4413      	add	r3, r2
 800d9ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	69ba      	ldr	r2, [r7, #24]
 800d9b6:	0151      	lsls	r1, r2, #5
 800d9b8:	69fa      	ldr	r2, [r7, #28]
 800d9ba:	440a      	add	r2, r1
 800d9bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d9c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d9c4:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d9c6:	69bb      	ldr	r3, [r7, #24]
 800d9c8:	015a      	lsls	r2, r3, #5
 800d9ca:	69fb      	ldr	r3, [r7, #28]
 800d9cc:	4413      	add	r3, r2
 800d9ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	69ba      	ldr	r2, [r7, #24]
 800d9d6:	0151      	lsls	r1, r2, #5
 800d9d8:	69fa      	ldr	r2, [r7, #28]
 800d9da:	440a      	add	r2, r1
 800d9dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d9e0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800d9e4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d9e6:	2300      	movs	r3, #0
}
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	3720      	adds	r7, #32
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}
 800d9f0:	fff80000 	.word	0xfff80000
 800d9f4:	e007ffff 	.word	0xe007ffff
 800d9f8:	1ff80000 	.word	0x1ff80000

0800d9fc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d9fc:	b480      	push	{r7}
 800d9fe:	b087      	sub	sp, #28
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800da06:	2300      	movs	r3, #0
 800da08:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800da0a:	2300      	movs	r3, #0
 800da0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	785b      	ldrb	r3, [r3, #1]
 800da16:	2b01      	cmp	r3, #1
 800da18:	d14a      	bne.n	800dab0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	781b      	ldrb	r3, [r3, #0]
 800da1e:	015a      	lsls	r2, r3, #5
 800da20:	693b      	ldr	r3, [r7, #16]
 800da22:	4413      	add	r3, r2
 800da24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800da2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800da32:	f040 8086 	bne.w	800db42 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	781b      	ldrb	r3, [r3, #0]
 800da3a:	015a      	lsls	r2, r3, #5
 800da3c:	693b      	ldr	r3, [r7, #16]
 800da3e:	4413      	add	r3, r2
 800da40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	683a      	ldr	r2, [r7, #0]
 800da48:	7812      	ldrb	r2, [r2, #0]
 800da4a:	0151      	lsls	r1, r2, #5
 800da4c:	693a      	ldr	r2, [r7, #16]
 800da4e:	440a      	add	r2, r1
 800da50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800da54:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800da58:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800da5a:	683b      	ldr	r3, [r7, #0]
 800da5c:	781b      	ldrb	r3, [r3, #0]
 800da5e:	015a      	lsls	r2, r3, #5
 800da60:	693b      	ldr	r3, [r7, #16]
 800da62:	4413      	add	r3, r2
 800da64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	683a      	ldr	r2, [r7, #0]
 800da6c:	7812      	ldrb	r2, [r2, #0]
 800da6e:	0151      	lsls	r1, r2, #5
 800da70:	693a      	ldr	r2, [r7, #16]
 800da72:	440a      	add	r2, r1
 800da74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800da78:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800da7c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	3301      	adds	r3, #1
 800da82:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	f242 7210 	movw	r2, #10000	@ 0x2710
 800da8a:	4293      	cmp	r3, r2
 800da8c:	d902      	bls.n	800da94 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800da8e:	2301      	movs	r3, #1
 800da90:	75fb      	strb	r3, [r7, #23]
          break;
 800da92:	e056      	b.n	800db42 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	781b      	ldrb	r3, [r3, #0]
 800da98:	015a      	lsls	r2, r3, #5
 800da9a:	693b      	ldr	r3, [r7, #16]
 800da9c:	4413      	add	r3, r2
 800da9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800daa8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800daac:	d0e7      	beq.n	800da7e <USB_EPStopXfer+0x82>
 800daae:	e048      	b.n	800db42 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	781b      	ldrb	r3, [r3, #0]
 800dab4:	015a      	lsls	r2, r3, #5
 800dab6:	693b      	ldr	r3, [r7, #16]
 800dab8:	4413      	add	r3, r2
 800daba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800dac4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dac8:	d13b      	bne.n	800db42 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800daca:	683b      	ldr	r3, [r7, #0]
 800dacc:	781b      	ldrb	r3, [r3, #0]
 800dace:	015a      	lsls	r2, r3, #5
 800dad0:	693b      	ldr	r3, [r7, #16]
 800dad2:	4413      	add	r3, r2
 800dad4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	683a      	ldr	r2, [r7, #0]
 800dadc:	7812      	ldrb	r2, [r2, #0]
 800dade:	0151      	lsls	r1, r2, #5
 800dae0:	693a      	ldr	r2, [r7, #16]
 800dae2:	440a      	add	r2, r1
 800dae4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dae8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800daec:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800daee:	683b      	ldr	r3, [r7, #0]
 800daf0:	781b      	ldrb	r3, [r3, #0]
 800daf2:	015a      	lsls	r2, r3, #5
 800daf4:	693b      	ldr	r3, [r7, #16]
 800daf6:	4413      	add	r3, r2
 800daf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	683a      	ldr	r2, [r7, #0]
 800db00:	7812      	ldrb	r2, [r2, #0]
 800db02:	0151      	lsls	r1, r2, #5
 800db04:	693a      	ldr	r2, [r7, #16]
 800db06:	440a      	add	r2, r1
 800db08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800db0c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800db10:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	3301      	adds	r3, #1
 800db16:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800db1e:	4293      	cmp	r3, r2
 800db20:	d902      	bls.n	800db28 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800db22:	2301      	movs	r3, #1
 800db24:	75fb      	strb	r3, [r7, #23]
          break;
 800db26:	e00c      	b.n	800db42 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	781b      	ldrb	r3, [r3, #0]
 800db2c:	015a      	lsls	r2, r3, #5
 800db2e:	693b      	ldr	r3, [r7, #16]
 800db30:	4413      	add	r3, r2
 800db32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800db3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800db40:	d0e7      	beq.n	800db12 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800db42:	7dfb      	ldrb	r3, [r7, #23]
}
 800db44:	4618      	mov	r0, r3
 800db46:	371c      	adds	r7, #28
 800db48:	46bd      	mov	sp, r7
 800db4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4e:	4770      	bx	lr

0800db50 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800db50:	b480      	push	{r7}
 800db52:	b089      	sub	sp, #36	@ 0x24
 800db54:	af00      	add	r7, sp, #0
 800db56:	60f8      	str	r0, [r7, #12]
 800db58:	60b9      	str	r1, [r7, #8]
 800db5a:	4611      	mov	r1, r2
 800db5c:	461a      	mov	r2, r3
 800db5e:	460b      	mov	r3, r1
 800db60:	71fb      	strb	r3, [r7, #7]
 800db62:	4613      	mov	r3, r2
 800db64:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800db6a:	68bb      	ldr	r3, [r7, #8]
 800db6c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800db6e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800db72:	2b00      	cmp	r3, #0
 800db74:	d123      	bne.n	800dbbe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800db76:	88bb      	ldrh	r3, [r7, #4]
 800db78:	3303      	adds	r3, #3
 800db7a:	089b      	lsrs	r3, r3, #2
 800db7c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800db7e:	2300      	movs	r3, #0
 800db80:	61bb      	str	r3, [r7, #24]
 800db82:	e018      	b.n	800dbb6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800db84:	79fb      	ldrb	r3, [r7, #7]
 800db86:	031a      	lsls	r2, r3, #12
 800db88:	697b      	ldr	r3, [r7, #20]
 800db8a:	4413      	add	r3, r2
 800db8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800db90:	461a      	mov	r2, r3
 800db92:	69fb      	ldr	r3, [r7, #28]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	6013      	str	r3, [r2, #0]
      pSrc++;
 800db98:	69fb      	ldr	r3, [r7, #28]
 800db9a:	3301      	adds	r3, #1
 800db9c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800db9e:	69fb      	ldr	r3, [r7, #28]
 800dba0:	3301      	adds	r3, #1
 800dba2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800dba4:	69fb      	ldr	r3, [r7, #28]
 800dba6:	3301      	adds	r3, #1
 800dba8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800dbaa:	69fb      	ldr	r3, [r7, #28]
 800dbac:	3301      	adds	r3, #1
 800dbae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800dbb0:	69bb      	ldr	r3, [r7, #24]
 800dbb2:	3301      	adds	r3, #1
 800dbb4:	61bb      	str	r3, [r7, #24]
 800dbb6:	69ba      	ldr	r2, [r7, #24]
 800dbb8:	693b      	ldr	r3, [r7, #16]
 800dbba:	429a      	cmp	r2, r3
 800dbbc:	d3e2      	bcc.n	800db84 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800dbbe:	2300      	movs	r3, #0
}
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	3724      	adds	r7, #36	@ 0x24
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbca:	4770      	bx	lr

0800dbcc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800dbcc:	b480      	push	{r7}
 800dbce:	b08b      	sub	sp, #44	@ 0x2c
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	60f8      	str	r0, [r7, #12]
 800dbd4:	60b9      	str	r1, [r7, #8]
 800dbd6:	4613      	mov	r3, r2
 800dbd8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800dbe2:	88fb      	ldrh	r3, [r7, #6]
 800dbe4:	089b      	lsrs	r3, r3, #2
 800dbe6:	b29b      	uxth	r3, r3
 800dbe8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800dbea:	88fb      	ldrh	r3, [r7, #6]
 800dbec:	f003 0303 	and.w	r3, r3, #3
 800dbf0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	623b      	str	r3, [r7, #32]
 800dbf6:	e014      	b.n	800dc22 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800dbf8:	69bb      	ldr	r3, [r7, #24]
 800dbfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800dbfe:	681a      	ldr	r2, [r3, #0]
 800dc00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc02:	601a      	str	r2, [r3, #0]
    pDest++;
 800dc04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc06:	3301      	adds	r3, #1
 800dc08:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800dc0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc0c:	3301      	adds	r3, #1
 800dc0e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800dc10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc12:	3301      	adds	r3, #1
 800dc14:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800dc16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc18:	3301      	adds	r3, #1
 800dc1a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800dc1c:	6a3b      	ldr	r3, [r7, #32]
 800dc1e:	3301      	adds	r3, #1
 800dc20:	623b      	str	r3, [r7, #32]
 800dc22:	6a3a      	ldr	r2, [r7, #32]
 800dc24:	697b      	ldr	r3, [r7, #20]
 800dc26:	429a      	cmp	r2, r3
 800dc28:	d3e6      	bcc.n	800dbf8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800dc2a:	8bfb      	ldrh	r3, [r7, #30]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d01e      	beq.n	800dc6e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800dc30:	2300      	movs	r3, #0
 800dc32:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800dc34:	69bb      	ldr	r3, [r7, #24]
 800dc36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800dc3a:	461a      	mov	r2, r3
 800dc3c:	f107 0310 	add.w	r3, r7, #16
 800dc40:	6812      	ldr	r2, [r2, #0]
 800dc42:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800dc44:	693a      	ldr	r2, [r7, #16]
 800dc46:	6a3b      	ldr	r3, [r7, #32]
 800dc48:	b2db      	uxtb	r3, r3
 800dc4a:	00db      	lsls	r3, r3, #3
 800dc4c:	fa22 f303 	lsr.w	r3, r2, r3
 800dc50:	b2da      	uxtb	r2, r3
 800dc52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc54:	701a      	strb	r2, [r3, #0]
      i++;
 800dc56:	6a3b      	ldr	r3, [r7, #32]
 800dc58:	3301      	adds	r3, #1
 800dc5a:	623b      	str	r3, [r7, #32]
      pDest++;
 800dc5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc5e:	3301      	adds	r3, #1
 800dc60:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800dc62:	8bfb      	ldrh	r3, [r7, #30]
 800dc64:	3b01      	subs	r3, #1
 800dc66:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800dc68:	8bfb      	ldrh	r3, [r7, #30]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d1ea      	bne.n	800dc44 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800dc6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800dc70:	4618      	mov	r0, r3
 800dc72:	372c      	adds	r7, #44	@ 0x2c
 800dc74:	46bd      	mov	sp, r7
 800dc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7a:	4770      	bx	lr

0800dc7c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800dc7c:	b480      	push	{r7}
 800dc7e:	b085      	sub	sp, #20
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
 800dc84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dc8a:	683b      	ldr	r3, [r7, #0]
 800dc8c:	781b      	ldrb	r3, [r3, #0]
 800dc8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	785b      	ldrb	r3, [r3, #1]
 800dc94:	2b01      	cmp	r3, #1
 800dc96:	d12c      	bne.n	800dcf2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800dc98:	68bb      	ldr	r3, [r7, #8]
 800dc9a:	015a      	lsls	r2, r3, #5
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	4413      	add	r3, r2
 800dca0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	db12      	blt.n	800dcd0 <USB_EPSetStall+0x54>
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d00f      	beq.n	800dcd0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800dcb0:	68bb      	ldr	r3, [r7, #8]
 800dcb2:	015a      	lsls	r2, r3, #5
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	4413      	add	r3, r2
 800dcb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	68ba      	ldr	r2, [r7, #8]
 800dcc0:	0151      	lsls	r1, r2, #5
 800dcc2:	68fa      	ldr	r2, [r7, #12]
 800dcc4:	440a      	add	r2, r1
 800dcc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dcca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800dcce:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800dcd0:	68bb      	ldr	r3, [r7, #8]
 800dcd2:	015a      	lsls	r2, r3, #5
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	4413      	add	r3, r2
 800dcd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	68ba      	ldr	r2, [r7, #8]
 800dce0:	0151      	lsls	r1, r2, #5
 800dce2:	68fa      	ldr	r2, [r7, #12]
 800dce4:	440a      	add	r2, r1
 800dce6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dcea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800dcee:	6013      	str	r3, [r2, #0]
 800dcf0:	e02b      	b.n	800dd4a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	015a      	lsls	r2, r3, #5
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	4413      	add	r3, r2
 800dcfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	db12      	blt.n	800dd2a <USB_EPSetStall+0xae>
 800dd04:	68bb      	ldr	r3, [r7, #8]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d00f      	beq.n	800dd2a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800dd0a:	68bb      	ldr	r3, [r7, #8]
 800dd0c:	015a      	lsls	r2, r3, #5
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	4413      	add	r3, r2
 800dd12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	68ba      	ldr	r2, [r7, #8]
 800dd1a:	0151      	lsls	r1, r2, #5
 800dd1c:	68fa      	ldr	r2, [r7, #12]
 800dd1e:	440a      	add	r2, r1
 800dd20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dd24:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800dd28:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800dd2a:	68bb      	ldr	r3, [r7, #8]
 800dd2c:	015a      	lsls	r2, r3, #5
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	4413      	add	r3, r2
 800dd32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	68ba      	ldr	r2, [r7, #8]
 800dd3a:	0151      	lsls	r1, r2, #5
 800dd3c:	68fa      	ldr	r2, [r7, #12]
 800dd3e:	440a      	add	r2, r1
 800dd40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dd44:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800dd48:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dd4a:	2300      	movs	r3, #0
}
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	3714      	adds	r7, #20
 800dd50:	46bd      	mov	sp, r7
 800dd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd56:	4770      	bx	lr

0800dd58 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800dd58:	b480      	push	{r7}
 800dd5a:	b085      	sub	sp, #20
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
 800dd60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	781b      	ldrb	r3, [r3, #0]
 800dd6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800dd6c:	683b      	ldr	r3, [r7, #0]
 800dd6e:	785b      	ldrb	r3, [r3, #1]
 800dd70:	2b01      	cmp	r3, #1
 800dd72:	d128      	bne.n	800ddc6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	015a      	lsls	r2, r3, #5
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	4413      	add	r3, r2
 800dd7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	68ba      	ldr	r2, [r7, #8]
 800dd84:	0151      	lsls	r1, r2, #5
 800dd86:	68fa      	ldr	r2, [r7, #12]
 800dd88:	440a      	add	r2, r1
 800dd8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dd8e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800dd92:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800dd94:	683b      	ldr	r3, [r7, #0]
 800dd96:	791b      	ldrb	r3, [r3, #4]
 800dd98:	2b03      	cmp	r3, #3
 800dd9a:	d003      	beq.n	800dda4 <USB_EPClearStall+0x4c>
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	791b      	ldrb	r3, [r3, #4]
 800dda0:	2b02      	cmp	r3, #2
 800dda2:	d138      	bne.n	800de16 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800dda4:	68bb      	ldr	r3, [r7, #8]
 800dda6:	015a      	lsls	r2, r3, #5
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	4413      	add	r3, r2
 800ddac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	68ba      	ldr	r2, [r7, #8]
 800ddb4:	0151      	lsls	r1, r2, #5
 800ddb6:	68fa      	ldr	r2, [r7, #12]
 800ddb8:	440a      	add	r2, r1
 800ddba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ddbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ddc2:	6013      	str	r3, [r2, #0]
 800ddc4:	e027      	b.n	800de16 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	015a      	lsls	r2, r3, #5
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	4413      	add	r3, r2
 800ddce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	68ba      	ldr	r2, [r7, #8]
 800ddd6:	0151      	lsls	r1, r2, #5
 800ddd8:	68fa      	ldr	r2, [r7, #12]
 800ddda:	440a      	add	r2, r1
 800dddc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dde0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800dde4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	791b      	ldrb	r3, [r3, #4]
 800ddea:	2b03      	cmp	r3, #3
 800ddec:	d003      	beq.n	800ddf6 <USB_EPClearStall+0x9e>
 800ddee:	683b      	ldr	r3, [r7, #0]
 800ddf0:	791b      	ldrb	r3, [r3, #4]
 800ddf2:	2b02      	cmp	r3, #2
 800ddf4:	d10f      	bne.n	800de16 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ddf6:	68bb      	ldr	r3, [r7, #8]
 800ddf8:	015a      	lsls	r2, r3, #5
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	4413      	add	r3, r2
 800ddfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	68ba      	ldr	r2, [r7, #8]
 800de06:	0151      	lsls	r1, r2, #5
 800de08:	68fa      	ldr	r2, [r7, #12]
 800de0a:	440a      	add	r2, r1
 800de0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800de10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800de14:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800de16:	2300      	movs	r3, #0
}
 800de18:	4618      	mov	r0, r3
 800de1a:	3714      	adds	r7, #20
 800de1c:	46bd      	mov	sp, r7
 800de1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de22:	4770      	bx	lr

0800de24 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800de24:	b480      	push	{r7}
 800de26:	b085      	sub	sp, #20
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
 800de2c:	460b      	mov	r3, r1
 800de2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	68fa      	ldr	r2, [r7, #12]
 800de3e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800de42:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800de46:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800de4e:	681a      	ldr	r2, [r3, #0]
 800de50:	78fb      	ldrb	r3, [r7, #3]
 800de52:	011b      	lsls	r3, r3, #4
 800de54:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800de58:	68f9      	ldr	r1, [r7, #12]
 800de5a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800de5e:	4313      	orrs	r3, r2
 800de60:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800de62:	2300      	movs	r3, #0
}
 800de64:	4618      	mov	r0, r3
 800de66:	3714      	adds	r7, #20
 800de68:	46bd      	mov	sp, r7
 800de6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6e:	4770      	bx	lr

0800de70 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800de70:	b480      	push	{r7}
 800de72:	b085      	sub	sp, #20
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	68fa      	ldr	r2, [r7, #12]
 800de86:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800de8a:	f023 0303 	bic.w	r3, r3, #3
 800de8e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800de96:	685b      	ldr	r3, [r3, #4]
 800de98:	68fa      	ldr	r2, [r7, #12]
 800de9a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800de9e:	f023 0302 	bic.w	r3, r3, #2
 800dea2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800dea4:	2300      	movs	r3, #0
}
 800dea6:	4618      	mov	r0, r3
 800dea8:	3714      	adds	r7, #20
 800deaa:	46bd      	mov	sp, r7
 800deac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb0:	4770      	bx	lr

0800deb2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800deb2:	b480      	push	{r7}
 800deb4:	b085      	sub	sp, #20
 800deb6:	af00      	add	r7, sp, #0
 800deb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	68fa      	ldr	r2, [r7, #12]
 800dec8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800decc:	f023 0303 	bic.w	r3, r3, #3
 800ded0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ded8:	685b      	ldr	r3, [r3, #4]
 800deda:	68fa      	ldr	r2, [r7, #12]
 800dedc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dee0:	f043 0302 	orr.w	r3, r3, #2
 800dee4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800dee6:	2300      	movs	r3, #0
}
 800dee8:	4618      	mov	r0, r3
 800deea:	3714      	adds	r7, #20
 800deec:	46bd      	mov	sp, r7
 800deee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def2:	4770      	bx	lr

0800def4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800def4:	b480      	push	{r7}
 800def6:	b085      	sub	sp, #20
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	695b      	ldr	r3, [r3, #20]
 800df00:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	699b      	ldr	r3, [r3, #24]
 800df06:	68fa      	ldr	r2, [r7, #12]
 800df08:	4013      	ands	r3, r2
 800df0a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800df0c:	68fb      	ldr	r3, [r7, #12]
}
 800df0e:	4618      	mov	r0, r3
 800df10:	3714      	adds	r7, #20
 800df12:	46bd      	mov	sp, r7
 800df14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df18:	4770      	bx	lr

0800df1a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800df1a:	b480      	push	{r7}
 800df1c:	b085      	sub	sp, #20
 800df1e:	af00      	add	r7, sp, #0
 800df20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800df2c:	699b      	ldr	r3, [r3, #24]
 800df2e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800df36:	69db      	ldr	r3, [r3, #28]
 800df38:	68ba      	ldr	r2, [r7, #8]
 800df3a:	4013      	ands	r3, r2
 800df3c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800df3e:	68bb      	ldr	r3, [r7, #8]
 800df40:	0c1b      	lsrs	r3, r3, #16
}
 800df42:	4618      	mov	r0, r3
 800df44:	3714      	adds	r7, #20
 800df46:	46bd      	mov	sp, r7
 800df48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4c:	4770      	bx	lr

0800df4e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800df4e:	b480      	push	{r7}
 800df50:	b085      	sub	sp, #20
 800df52:	af00      	add	r7, sp, #0
 800df54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800df60:	699b      	ldr	r3, [r3, #24]
 800df62:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800df6a:	69db      	ldr	r3, [r3, #28]
 800df6c:	68ba      	ldr	r2, [r7, #8]
 800df6e:	4013      	ands	r3, r2
 800df70:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800df72:	68bb      	ldr	r3, [r7, #8]
 800df74:	b29b      	uxth	r3, r3
}
 800df76:	4618      	mov	r0, r3
 800df78:	3714      	adds	r7, #20
 800df7a:	46bd      	mov	sp, r7
 800df7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df80:	4770      	bx	lr

0800df82 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800df82:	b480      	push	{r7}
 800df84:	b085      	sub	sp, #20
 800df86:	af00      	add	r7, sp, #0
 800df88:	6078      	str	r0, [r7, #4]
 800df8a:	460b      	mov	r3, r1
 800df8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800df92:	78fb      	ldrb	r3, [r7, #3]
 800df94:	015a      	lsls	r2, r3, #5
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	4413      	add	r3, r2
 800df9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800df9e:	689b      	ldr	r3, [r3, #8]
 800dfa0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dfa8:	695b      	ldr	r3, [r3, #20]
 800dfaa:	68ba      	ldr	r2, [r7, #8]
 800dfac:	4013      	ands	r3, r2
 800dfae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800dfb0:	68bb      	ldr	r3, [r7, #8]
}
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	3714      	adds	r7, #20
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbc:	4770      	bx	lr

0800dfbe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800dfbe:	b480      	push	{r7}
 800dfc0:	b087      	sub	sp, #28
 800dfc2:	af00      	add	r7, sp, #0
 800dfc4:	6078      	str	r0, [r7, #4]
 800dfc6:	460b      	mov	r3, r1
 800dfc8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800dfce:	697b      	ldr	r3, [r7, #20]
 800dfd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dfd4:	691b      	ldr	r3, [r3, #16]
 800dfd6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800dfd8:	697b      	ldr	r3, [r7, #20]
 800dfda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dfde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dfe0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800dfe2:	78fb      	ldrb	r3, [r7, #3]
 800dfe4:	f003 030f 	and.w	r3, r3, #15
 800dfe8:	68fa      	ldr	r2, [r7, #12]
 800dfea:	fa22 f303 	lsr.w	r3, r2, r3
 800dfee:	01db      	lsls	r3, r3, #7
 800dff0:	b2db      	uxtb	r3, r3
 800dff2:	693a      	ldr	r2, [r7, #16]
 800dff4:	4313      	orrs	r3, r2
 800dff6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800dff8:	78fb      	ldrb	r3, [r7, #3]
 800dffa:	015a      	lsls	r2, r3, #5
 800dffc:	697b      	ldr	r3, [r7, #20]
 800dffe:	4413      	add	r3, r2
 800e000:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e004:	689b      	ldr	r3, [r3, #8]
 800e006:	693a      	ldr	r2, [r7, #16]
 800e008:	4013      	ands	r3, r2
 800e00a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e00c:	68bb      	ldr	r3, [r7, #8]
}
 800e00e:	4618      	mov	r0, r3
 800e010:	371c      	adds	r7, #28
 800e012:	46bd      	mov	sp, r7
 800e014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e018:	4770      	bx	lr

0800e01a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800e01a:	b480      	push	{r7}
 800e01c:	b083      	sub	sp, #12
 800e01e:	af00      	add	r7, sp, #0
 800e020:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	695b      	ldr	r3, [r3, #20]
 800e026:	f003 0301 	and.w	r3, r3, #1
}
 800e02a:	4618      	mov	r0, r3
 800e02c:	370c      	adds	r7, #12
 800e02e:	46bd      	mov	sp, r7
 800e030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e034:	4770      	bx	lr
	...

0800e038 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800e038:	b480      	push	{r7}
 800e03a:	b085      	sub	sp, #20
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e04a:	681a      	ldr	r2, [r3, #0]
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e052:	4619      	mov	r1, r3
 800e054:	4b09      	ldr	r3, [pc, #36]	@ (800e07c <USB_ActivateSetup+0x44>)
 800e056:	4013      	ands	r3, r2
 800e058:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e060:	685b      	ldr	r3, [r3, #4]
 800e062:	68fa      	ldr	r2, [r7, #12]
 800e064:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e068:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e06c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e06e:	2300      	movs	r3, #0
}
 800e070:	4618      	mov	r0, r3
 800e072:	3714      	adds	r7, #20
 800e074:	46bd      	mov	sp, r7
 800e076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07a:	4770      	bx	lr
 800e07c:	fffff800 	.word	0xfffff800

0800e080 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800e080:	b480      	push	{r7}
 800e082:	b087      	sub	sp, #28
 800e084:	af00      	add	r7, sp, #0
 800e086:	60f8      	str	r0, [r7, #12]
 800e088:	460b      	mov	r3, r1
 800e08a:	607a      	str	r2, [r7, #4]
 800e08c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	333c      	adds	r3, #60	@ 0x3c
 800e096:	3304      	adds	r3, #4
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e09c:	693b      	ldr	r3, [r7, #16]
 800e09e:	4a26      	ldr	r2, [pc, #152]	@ (800e138 <USB_EP0_OutStart+0xb8>)
 800e0a0:	4293      	cmp	r3, r2
 800e0a2:	d90a      	bls.n	800e0ba <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e0a4:	697b      	ldr	r3, [r7, #20]
 800e0a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e0b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e0b4:	d101      	bne.n	800e0ba <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	e037      	b.n	800e12a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e0ba:	697b      	ldr	r3, [r7, #20]
 800e0bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e0c0:	461a      	mov	r2, r3
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e0c6:	697b      	ldr	r3, [r7, #20]
 800e0c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e0cc:	691b      	ldr	r3, [r3, #16]
 800e0ce:	697a      	ldr	r2, [r7, #20]
 800e0d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e0d4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e0d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e0da:	697b      	ldr	r3, [r7, #20]
 800e0dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e0e0:	691b      	ldr	r3, [r3, #16]
 800e0e2:	697a      	ldr	r2, [r7, #20]
 800e0e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e0e8:	f043 0318 	orr.w	r3, r3, #24
 800e0ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e0ee:	697b      	ldr	r3, [r7, #20]
 800e0f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e0f4:	691b      	ldr	r3, [r3, #16]
 800e0f6:	697a      	ldr	r2, [r7, #20]
 800e0f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e0fc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800e100:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800e102:	7afb      	ldrb	r3, [r7, #11]
 800e104:	2b01      	cmp	r3, #1
 800e106:	d10f      	bne.n	800e128 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800e108:	697b      	ldr	r3, [r7, #20]
 800e10a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e10e:	461a      	mov	r2, r3
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800e114:	697b      	ldr	r3, [r7, #20]
 800e116:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	697a      	ldr	r2, [r7, #20]
 800e11e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e122:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800e126:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e128:	2300      	movs	r3, #0
}
 800e12a:	4618      	mov	r0, r3
 800e12c:	371c      	adds	r7, #28
 800e12e:	46bd      	mov	sp, r7
 800e130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e134:	4770      	bx	lr
 800e136:	bf00      	nop
 800e138:	4f54300a 	.word	0x4f54300a

0800e13c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e13c:	b480      	push	{r7}
 800e13e:	b085      	sub	sp, #20
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e144:	2300      	movs	r3, #0
 800e146:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	3301      	adds	r3, #1
 800e14c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e154:	d901      	bls.n	800e15a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e156:	2303      	movs	r3, #3
 800e158:	e01b      	b.n	800e192 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	691b      	ldr	r3, [r3, #16]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	daf2      	bge.n	800e148 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e162:	2300      	movs	r3, #0
 800e164:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	691b      	ldr	r3, [r3, #16]
 800e16a:	f043 0201 	orr.w	r2, r3, #1
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	3301      	adds	r3, #1
 800e176:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e17e:	d901      	bls.n	800e184 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e180:	2303      	movs	r3, #3
 800e182:	e006      	b.n	800e192 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	691b      	ldr	r3, [r3, #16]
 800e188:	f003 0301 	and.w	r3, r3, #1
 800e18c:	2b01      	cmp	r3, #1
 800e18e:	d0f0      	beq.n	800e172 <USB_CoreReset+0x36>

  return HAL_OK;
 800e190:	2300      	movs	r3, #0
}
 800e192:	4618      	mov	r0, r3
 800e194:	3714      	adds	r7, #20
 800e196:	46bd      	mov	sp, r7
 800e198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19c:	4770      	bx	lr
	...

0800e1a0 <LL_SetSystemCoreClock>:
  *         @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
#endif /* DUAL_CORE */
void LL_SetSystemCoreClock(uint32_t CPU_Frequency)
{
 800e1a0:	b480      	push	{r7}
 800e1a2:	b083      	sub	sp, #12
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = CPU_Frequency;
 800e1a8:	4a04      	ldr	r2, [pc, #16]	@ (800e1bc <LL_SetSystemCoreClock+0x1c>)
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	6013      	str	r3, [r2, #0]
}
 800e1ae:	bf00      	nop
 800e1b0:	370c      	adds	r7, #12
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b8:	4770      	bx	lr
 800e1ba:	bf00      	nop
 800e1bc:	24000140 	.word	0x24000140

0800e1c0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b084      	sub	sp, #16
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
 800e1c8:	460b      	mov	r3, r1
 800e1ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e1cc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800e1d0:	f008 faaa 	bl	8016728 <USBD_static_malloc>
 800e1d4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d109      	bne.n	800e1f0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	32b0      	adds	r2, #176	@ 0xb0
 800e1e6:	2100      	movs	r1, #0
 800e1e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800e1ec:	2302      	movs	r3, #2
 800e1ee:	e0d4      	b.n	800e39a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800e1f0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800e1f4:	2100      	movs	r1, #0
 800e1f6:	68f8      	ldr	r0, [r7, #12]
 800e1f8:	f00a fa62 	bl	80186c0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	32b0      	adds	r2, #176	@ 0xb0
 800e206:	68f9      	ldr	r1, [r7, #12]
 800e208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	32b0      	adds	r2, #176	@ 0xb0
 800e216:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	7c1b      	ldrb	r3, [r3, #16]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d138      	bne.n	800e29a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e228:	4b5e      	ldr	r3, [pc, #376]	@ (800e3a4 <USBD_CDC_Init+0x1e4>)
 800e22a:	7819      	ldrb	r1, [r3, #0]
 800e22c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e230:	2202      	movs	r2, #2
 800e232:	6878      	ldr	r0, [r7, #4]
 800e234:	f008 f955 	bl	80164e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e238:	4b5a      	ldr	r3, [pc, #360]	@ (800e3a4 <USBD_CDC_Init+0x1e4>)
 800e23a:	781b      	ldrb	r3, [r3, #0]
 800e23c:	f003 020f 	and.w	r2, r3, #15
 800e240:	6879      	ldr	r1, [r7, #4]
 800e242:	4613      	mov	r3, r2
 800e244:	009b      	lsls	r3, r3, #2
 800e246:	4413      	add	r3, r2
 800e248:	009b      	lsls	r3, r3, #2
 800e24a:	440b      	add	r3, r1
 800e24c:	3324      	adds	r3, #36	@ 0x24
 800e24e:	2201      	movs	r2, #1
 800e250:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e252:	4b55      	ldr	r3, [pc, #340]	@ (800e3a8 <USBD_CDC_Init+0x1e8>)
 800e254:	7819      	ldrb	r1, [r3, #0]
 800e256:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e25a:	2202      	movs	r2, #2
 800e25c:	6878      	ldr	r0, [r7, #4]
 800e25e:	f008 f940 	bl	80164e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e262:	4b51      	ldr	r3, [pc, #324]	@ (800e3a8 <USBD_CDC_Init+0x1e8>)
 800e264:	781b      	ldrb	r3, [r3, #0]
 800e266:	f003 020f 	and.w	r2, r3, #15
 800e26a:	6879      	ldr	r1, [r7, #4]
 800e26c:	4613      	mov	r3, r2
 800e26e:	009b      	lsls	r3, r3, #2
 800e270:	4413      	add	r3, r2
 800e272:	009b      	lsls	r3, r3, #2
 800e274:	440b      	add	r3, r1
 800e276:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e27a:	2201      	movs	r2, #1
 800e27c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e27e:	4b4b      	ldr	r3, [pc, #300]	@ (800e3ac <USBD_CDC_Init+0x1ec>)
 800e280:	781b      	ldrb	r3, [r3, #0]
 800e282:	f003 020f 	and.w	r2, r3, #15
 800e286:	6879      	ldr	r1, [r7, #4]
 800e288:	4613      	mov	r3, r2
 800e28a:	009b      	lsls	r3, r3, #2
 800e28c:	4413      	add	r3, r2
 800e28e:	009b      	lsls	r3, r3, #2
 800e290:	440b      	add	r3, r1
 800e292:	3326      	adds	r3, #38	@ 0x26
 800e294:	2210      	movs	r2, #16
 800e296:	801a      	strh	r2, [r3, #0]
 800e298:	e035      	b.n	800e306 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e29a:	4b42      	ldr	r3, [pc, #264]	@ (800e3a4 <USBD_CDC_Init+0x1e4>)
 800e29c:	7819      	ldrb	r1, [r3, #0]
 800e29e:	2340      	movs	r3, #64	@ 0x40
 800e2a0:	2202      	movs	r2, #2
 800e2a2:	6878      	ldr	r0, [r7, #4]
 800e2a4:	f008 f91d 	bl	80164e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e2a8:	4b3e      	ldr	r3, [pc, #248]	@ (800e3a4 <USBD_CDC_Init+0x1e4>)
 800e2aa:	781b      	ldrb	r3, [r3, #0]
 800e2ac:	f003 020f 	and.w	r2, r3, #15
 800e2b0:	6879      	ldr	r1, [r7, #4]
 800e2b2:	4613      	mov	r3, r2
 800e2b4:	009b      	lsls	r3, r3, #2
 800e2b6:	4413      	add	r3, r2
 800e2b8:	009b      	lsls	r3, r3, #2
 800e2ba:	440b      	add	r3, r1
 800e2bc:	3324      	adds	r3, #36	@ 0x24
 800e2be:	2201      	movs	r2, #1
 800e2c0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e2c2:	4b39      	ldr	r3, [pc, #228]	@ (800e3a8 <USBD_CDC_Init+0x1e8>)
 800e2c4:	7819      	ldrb	r1, [r3, #0]
 800e2c6:	2340      	movs	r3, #64	@ 0x40
 800e2c8:	2202      	movs	r2, #2
 800e2ca:	6878      	ldr	r0, [r7, #4]
 800e2cc:	f008 f909 	bl	80164e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e2d0:	4b35      	ldr	r3, [pc, #212]	@ (800e3a8 <USBD_CDC_Init+0x1e8>)
 800e2d2:	781b      	ldrb	r3, [r3, #0]
 800e2d4:	f003 020f 	and.w	r2, r3, #15
 800e2d8:	6879      	ldr	r1, [r7, #4]
 800e2da:	4613      	mov	r3, r2
 800e2dc:	009b      	lsls	r3, r3, #2
 800e2de:	4413      	add	r3, r2
 800e2e0:	009b      	lsls	r3, r3, #2
 800e2e2:	440b      	add	r3, r1
 800e2e4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e2e8:	2201      	movs	r2, #1
 800e2ea:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e2ec:	4b2f      	ldr	r3, [pc, #188]	@ (800e3ac <USBD_CDC_Init+0x1ec>)
 800e2ee:	781b      	ldrb	r3, [r3, #0]
 800e2f0:	f003 020f 	and.w	r2, r3, #15
 800e2f4:	6879      	ldr	r1, [r7, #4]
 800e2f6:	4613      	mov	r3, r2
 800e2f8:	009b      	lsls	r3, r3, #2
 800e2fa:	4413      	add	r3, r2
 800e2fc:	009b      	lsls	r3, r3, #2
 800e2fe:	440b      	add	r3, r1
 800e300:	3326      	adds	r3, #38	@ 0x26
 800e302:	2210      	movs	r2, #16
 800e304:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e306:	4b29      	ldr	r3, [pc, #164]	@ (800e3ac <USBD_CDC_Init+0x1ec>)
 800e308:	7819      	ldrb	r1, [r3, #0]
 800e30a:	2308      	movs	r3, #8
 800e30c:	2203      	movs	r2, #3
 800e30e:	6878      	ldr	r0, [r7, #4]
 800e310:	f008 f8e7 	bl	80164e2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800e314:	4b25      	ldr	r3, [pc, #148]	@ (800e3ac <USBD_CDC_Init+0x1ec>)
 800e316:	781b      	ldrb	r3, [r3, #0]
 800e318:	f003 020f 	and.w	r2, r3, #15
 800e31c:	6879      	ldr	r1, [r7, #4]
 800e31e:	4613      	mov	r3, r2
 800e320:	009b      	lsls	r3, r3, #2
 800e322:	4413      	add	r3, r2
 800e324:	009b      	lsls	r3, r3, #2
 800e326:	440b      	add	r3, r1
 800e328:	3324      	adds	r3, #36	@ 0x24
 800e32a:	2201      	movs	r2, #1
 800e32c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	2200      	movs	r2, #0
 800e332:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e33c:	687a      	ldr	r2, [r7, #4]
 800e33e:	33b0      	adds	r3, #176	@ 0xb0
 800e340:	009b      	lsls	r3, r3, #2
 800e342:	4413      	add	r3, r2
 800e344:	685b      	ldr	r3, [r3, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	2200      	movs	r2, #0
 800e34e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	2200      	movs	r2, #0
 800e356:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800e360:	2b00      	cmp	r3, #0
 800e362:	d101      	bne.n	800e368 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800e364:	2302      	movs	r3, #2
 800e366:	e018      	b.n	800e39a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	7c1b      	ldrb	r3, [r3, #16]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d10a      	bne.n	800e386 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e370:	4b0d      	ldr	r3, [pc, #52]	@ (800e3a8 <USBD_CDC_Init+0x1e8>)
 800e372:	7819      	ldrb	r1, [r3, #0]
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e37a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e37e:	6878      	ldr	r0, [r7, #4]
 800e380:	f008 f99e 	bl	80166c0 <USBD_LL_PrepareReceive>
 800e384:	e008      	b.n	800e398 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e386:	4b08      	ldr	r3, [pc, #32]	@ (800e3a8 <USBD_CDC_Init+0x1e8>)
 800e388:	7819      	ldrb	r1, [r3, #0]
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e390:	2340      	movs	r3, #64	@ 0x40
 800e392:	6878      	ldr	r0, [r7, #4]
 800e394:	f008 f994 	bl	80166c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e398:	2300      	movs	r3, #0
}
 800e39a:	4618      	mov	r0, r3
 800e39c:	3710      	adds	r7, #16
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	bd80      	pop	{r7, pc}
 800e3a2:	bf00      	nop
 800e3a4:	24000243 	.word	0x24000243
 800e3a8:	24000244 	.word	0x24000244
 800e3ac:	24000245 	.word	0x24000245

0800e3b0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b082      	sub	sp, #8
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
 800e3b8:	460b      	mov	r3, r1
 800e3ba:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800e3bc:	4b3a      	ldr	r3, [pc, #232]	@ (800e4a8 <USBD_CDC_DeInit+0xf8>)
 800e3be:	781b      	ldrb	r3, [r3, #0]
 800e3c0:	4619      	mov	r1, r3
 800e3c2:	6878      	ldr	r0, [r7, #4]
 800e3c4:	f008 f8b3 	bl	801652e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800e3c8:	4b37      	ldr	r3, [pc, #220]	@ (800e4a8 <USBD_CDC_DeInit+0xf8>)
 800e3ca:	781b      	ldrb	r3, [r3, #0]
 800e3cc:	f003 020f 	and.w	r2, r3, #15
 800e3d0:	6879      	ldr	r1, [r7, #4]
 800e3d2:	4613      	mov	r3, r2
 800e3d4:	009b      	lsls	r3, r3, #2
 800e3d6:	4413      	add	r3, r2
 800e3d8:	009b      	lsls	r3, r3, #2
 800e3da:	440b      	add	r3, r1
 800e3dc:	3324      	adds	r3, #36	@ 0x24
 800e3de:	2200      	movs	r2, #0
 800e3e0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800e3e2:	4b32      	ldr	r3, [pc, #200]	@ (800e4ac <USBD_CDC_DeInit+0xfc>)
 800e3e4:	781b      	ldrb	r3, [r3, #0]
 800e3e6:	4619      	mov	r1, r3
 800e3e8:	6878      	ldr	r0, [r7, #4]
 800e3ea:	f008 f8a0 	bl	801652e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800e3ee:	4b2f      	ldr	r3, [pc, #188]	@ (800e4ac <USBD_CDC_DeInit+0xfc>)
 800e3f0:	781b      	ldrb	r3, [r3, #0]
 800e3f2:	f003 020f 	and.w	r2, r3, #15
 800e3f6:	6879      	ldr	r1, [r7, #4]
 800e3f8:	4613      	mov	r3, r2
 800e3fa:	009b      	lsls	r3, r3, #2
 800e3fc:	4413      	add	r3, r2
 800e3fe:	009b      	lsls	r3, r3, #2
 800e400:	440b      	add	r3, r1
 800e402:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e406:	2200      	movs	r2, #0
 800e408:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800e40a:	4b29      	ldr	r3, [pc, #164]	@ (800e4b0 <USBD_CDC_DeInit+0x100>)
 800e40c:	781b      	ldrb	r3, [r3, #0]
 800e40e:	4619      	mov	r1, r3
 800e410:	6878      	ldr	r0, [r7, #4]
 800e412:	f008 f88c 	bl	801652e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800e416:	4b26      	ldr	r3, [pc, #152]	@ (800e4b0 <USBD_CDC_DeInit+0x100>)
 800e418:	781b      	ldrb	r3, [r3, #0]
 800e41a:	f003 020f 	and.w	r2, r3, #15
 800e41e:	6879      	ldr	r1, [r7, #4]
 800e420:	4613      	mov	r3, r2
 800e422:	009b      	lsls	r3, r3, #2
 800e424:	4413      	add	r3, r2
 800e426:	009b      	lsls	r3, r3, #2
 800e428:	440b      	add	r3, r1
 800e42a:	3324      	adds	r3, #36	@ 0x24
 800e42c:	2200      	movs	r2, #0
 800e42e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800e430:	4b1f      	ldr	r3, [pc, #124]	@ (800e4b0 <USBD_CDC_DeInit+0x100>)
 800e432:	781b      	ldrb	r3, [r3, #0]
 800e434:	f003 020f 	and.w	r2, r3, #15
 800e438:	6879      	ldr	r1, [r7, #4]
 800e43a:	4613      	mov	r3, r2
 800e43c:	009b      	lsls	r3, r3, #2
 800e43e:	4413      	add	r3, r2
 800e440:	009b      	lsls	r3, r3, #2
 800e442:	440b      	add	r3, r1
 800e444:	3326      	adds	r3, #38	@ 0x26
 800e446:	2200      	movs	r2, #0
 800e448:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	32b0      	adds	r2, #176	@ 0xb0
 800e454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d01f      	beq.n	800e49c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e462:	687a      	ldr	r2, [r7, #4]
 800e464:	33b0      	adds	r3, #176	@ 0xb0
 800e466:	009b      	lsls	r3, r3, #2
 800e468:	4413      	add	r3, r2
 800e46a:	685b      	ldr	r3, [r3, #4]
 800e46c:	685b      	ldr	r3, [r3, #4]
 800e46e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	32b0      	adds	r2, #176	@ 0xb0
 800e47a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e47e:	4618      	mov	r0, r3
 800e480:	f008 f960 	bl	8016744 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	32b0      	adds	r2, #176	@ 0xb0
 800e48e:	2100      	movs	r1, #0
 800e490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	2200      	movs	r2, #0
 800e498:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e49c:	2300      	movs	r3, #0
}
 800e49e:	4618      	mov	r0, r3
 800e4a0:	3708      	adds	r7, #8
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	bd80      	pop	{r7, pc}
 800e4a6:	bf00      	nop
 800e4a8:	24000243 	.word	0x24000243
 800e4ac:	24000244 	.word	0x24000244
 800e4b0:	24000245 	.word	0x24000245

0800e4b4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b086      	sub	sp, #24
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	6078      	str	r0, [r7, #4]
 800e4bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	32b0      	adds	r2, #176	@ 0xb0
 800e4c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4cc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e4da:	693b      	ldr	r3, [r7, #16]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d101      	bne.n	800e4e4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800e4e0:	2303      	movs	r3, #3
 800e4e2:	e0bf      	b.n	800e664 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	781b      	ldrb	r3, [r3, #0]
 800e4e8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d050      	beq.n	800e592 <USBD_CDC_Setup+0xde>
 800e4f0:	2b20      	cmp	r3, #32
 800e4f2:	f040 80af 	bne.w	800e654 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e4f6:	683b      	ldr	r3, [r7, #0]
 800e4f8:	88db      	ldrh	r3, [r3, #6]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d03a      	beq.n	800e574 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	781b      	ldrb	r3, [r3, #0]
 800e502:	b25b      	sxtb	r3, r3
 800e504:	2b00      	cmp	r3, #0
 800e506:	da1b      	bge.n	800e540 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e50e:	687a      	ldr	r2, [r7, #4]
 800e510:	33b0      	adds	r3, #176	@ 0xb0
 800e512:	009b      	lsls	r3, r3, #2
 800e514:	4413      	add	r3, r2
 800e516:	685b      	ldr	r3, [r3, #4]
 800e518:	689b      	ldr	r3, [r3, #8]
 800e51a:	683a      	ldr	r2, [r7, #0]
 800e51c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800e51e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e520:	683a      	ldr	r2, [r7, #0]
 800e522:	88d2      	ldrh	r2, [r2, #6]
 800e524:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e526:	683b      	ldr	r3, [r7, #0]
 800e528:	88db      	ldrh	r3, [r3, #6]
 800e52a:	2b07      	cmp	r3, #7
 800e52c:	bf28      	it	cs
 800e52e:	2307      	movcs	r3, #7
 800e530:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e532:	693b      	ldr	r3, [r7, #16]
 800e534:	89fa      	ldrh	r2, [r7, #14]
 800e536:	4619      	mov	r1, r3
 800e538:	6878      	ldr	r0, [r7, #4]
 800e53a:	f001 fdbd 	bl	80100b8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800e53e:	e090      	b.n	800e662 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	785a      	ldrb	r2, [r3, #1]
 800e544:	693b      	ldr	r3, [r7, #16]
 800e546:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800e54a:	683b      	ldr	r3, [r7, #0]
 800e54c:	88db      	ldrh	r3, [r3, #6]
 800e54e:	2b3f      	cmp	r3, #63	@ 0x3f
 800e550:	d803      	bhi.n	800e55a <USBD_CDC_Setup+0xa6>
 800e552:	683b      	ldr	r3, [r7, #0]
 800e554:	88db      	ldrh	r3, [r3, #6]
 800e556:	b2da      	uxtb	r2, r3
 800e558:	e000      	b.n	800e55c <USBD_CDC_Setup+0xa8>
 800e55a:	2240      	movs	r2, #64	@ 0x40
 800e55c:	693b      	ldr	r3, [r7, #16]
 800e55e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800e562:	6939      	ldr	r1, [r7, #16]
 800e564:	693b      	ldr	r3, [r7, #16]
 800e566:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800e56a:	461a      	mov	r2, r3
 800e56c:	6878      	ldr	r0, [r7, #4]
 800e56e:	f001 fdcf 	bl	8010110 <USBD_CtlPrepareRx>
      break;
 800e572:	e076      	b.n	800e662 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e57a:	687a      	ldr	r2, [r7, #4]
 800e57c:	33b0      	adds	r3, #176	@ 0xb0
 800e57e:	009b      	lsls	r3, r3, #2
 800e580:	4413      	add	r3, r2
 800e582:	685b      	ldr	r3, [r3, #4]
 800e584:	689b      	ldr	r3, [r3, #8]
 800e586:	683a      	ldr	r2, [r7, #0]
 800e588:	7850      	ldrb	r0, [r2, #1]
 800e58a:	2200      	movs	r2, #0
 800e58c:	6839      	ldr	r1, [r7, #0]
 800e58e:	4798      	blx	r3
      break;
 800e590:	e067      	b.n	800e662 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	785b      	ldrb	r3, [r3, #1]
 800e596:	2b0b      	cmp	r3, #11
 800e598:	d851      	bhi.n	800e63e <USBD_CDC_Setup+0x18a>
 800e59a:	a201      	add	r2, pc, #4	@ (adr r2, 800e5a0 <USBD_CDC_Setup+0xec>)
 800e59c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5a0:	0800e5d1 	.word	0x0800e5d1
 800e5a4:	0800e64d 	.word	0x0800e64d
 800e5a8:	0800e63f 	.word	0x0800e63f
 800e5ac:	0800e63f 	.word	0x0800e63f
 800e5b0:	0800e63f 	.word	0x0800e63f
 800e5b4:	0800e63f 	.word	0x0800e63f
 800e5b8:	0800e63f 	.word	0x0800e63f
 800e5bc:	0800e63f 	.word	0x0800e63f
 800e5c0:	0800e63f 	.word	0x0800e63f
 800e5c4:	0800e63f 	.word	0x0800e63f
 800e5c8:	0800e5fb 	.word	0x0800e5fb
 800e5cc:	0800e625 	.word	0x0800e625
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e5d6:	b2db      	uxtb	r3, r3
 800e5d8:	2b03      	cmp	r3, #3
 800e5da:	d107      	bne.n	800e5ec <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e5dc:	f107 030a 	add.w	r3, r7, #10
 800e5e0:	2202      	movs	r2, #2
 800e5e2:	4619      	mov	r1, r3
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	f001 fd67 	bl	80100b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e5ea:	e032      	b.n	800e652 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e5ec:	6839      	ldr	r1, [r7, #0]
 800e5ee:	6878      	ldr	r0, [r7, #4]
 800e5f0:	f001 fce5 	bl	800ffbe <USBD_CtlError>
            ret = USBD_FAIL;
 800e5f4:	2303      	movs	r3, #3
 800e5f6:	75fb      	strb	r3, [r7, #23]
          break;
 800e5f8:	e02b      	b.n	800e652 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e600:	b2db      	uxtb	r3, r3
 800e602:	2b03      	cmp	r3, #3
 800e604:	d107      	bne.n	800e616 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e606:	f107 030d 	add.w	r3, r7, #13
 800e60a:	2201      	movs	r2, #1
 800e60c:	4619      	mov	r1, r3
 800e60e:	6878      	ldr	r0, [r7, #4]
 800e610:	f001 fd52 	bl	80100b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e614:	e01d      	b.n	800e652 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e616:	6839      	ldr	r1, [r7, #0]
 800e618:	6878      	ldr	r0, [r7, #4]
 800e61a:	f001 fcd0 	bl	800ffbe <USBD_CtlError>
            ret = USBD_FAIL;
 800e61e:	2303      	movs	r3, #3
 800e620:	75fb      	strb	r3, [r7, #23]
          break;
 800e622:	e016      	b.n	800e652 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e62a:	b2db      	uxtb	r3, r3
 800e62c:	2b03      	cmp	r3, #3
 800e62e:	d00f      	beq.n	800e650 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800e630:	6839      	ldr	r1, [r7, #0]
 800e632:	6878      	ldr	r0, [r7, #4]
 800e634:	f001 fcc3 	bl	800ffbe <USBD_CtlError>
            ret = USBD_FAIL;
 800e638:	2303      	movs	r3, #3
 800e63a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e63c:	e008      	b.n	800e650 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e63e:	6839      	ldr	r1, [r7, #0]
 800e640:	6878      	ldr	r0, [r7, #4]
 800e642:	f001 fcbc 	bl	800ffbe <USBD_CtlError>
          ret = USBD_FAIL;
 800e646:	2303      	movs	r3, #3
 800e648:	75fb      	strb	r3, [r7, #23]
          break;
 800e64a:	e002      	b.n	800e652 <USBD_CDC_Setup+0x19e>
          break;
 800e64c:	bf00      	nop
 800e64e:	e008      	b.n	800e662 <USBD_CDC_Setup+0x1ae>
          break;
 800e650:	bf00      	nop
      }
      break;
 800e652:	e006      	b.n	800e662 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800e654:	6839      	ldr	r1, [r7, #0]
 800e656:	6878      	ldr	r0, [r7, #4]
 800e658:	f001 fcb1 	bl	800ffbe <USBD_CtlError>
      ret = USBD_FAIL;
 800e65c:	2303      	movs	r3, #3
 800e65e:	75fb      	strb	r3, [r7, #23]
      break;
 800e660:	bf00      	nop
  }

  return (uint8_t)ret;
 800e662:	7dfb      	ldrb	r3, [r7, #23]
}
 800e664:	4618      	mov	r0, r3
 800e666:	3718      	adds	r7, #24
 800e668:	46bd      	mov	sp, r7
 800e66a:	bd80      	pop	{r7, pc}

0800e66c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b084      	sub	sp, #16
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
 800e674:	460b      	mov	r3, r1
 800e676:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e67e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	32b0      	adds	r2, #176	@ 0xb0
 800e68a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d101      	bne.n	800e696 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800e692:	2303      	movs	r3, #3
 800e694:	e065      	b.n	800e762 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	32b0      	adds	r2, #176	@ 0xb0
 800e6a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6a4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e6a6:	78fb      	ldrb	r3, [r7, #3]
 800e6a8:	f003 020f 	and.w	r2, r3, #15
 800e6ac:	6879      	ldr	r1, [r7, #4]
 800e6ae:	4613      	mov	r3, r2
 800e6b0:	009b      	lsls	r3, r3, #2
 800e6b2:	4413      	add	r3, r2
 800e6b4:	009b      	lsls	r3, r3, #2
 800e6b6:	440b      	add	r3, r1
 800e6b8:	3318      	adds	r3, #24
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d02f      	beq.n	800e720 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800e6c0:	78fb      	ldrb	r3, [r7, #3]
 800e6c2:	f003 020f 	and.w	r2, r3, #15
 800e6c6:	6879      	ldr	r1, [r7, #4]
 800e6c8:	4613      	mov	r3, r2
 800e6ca:	009b      	lsls	r3, r3, #2
 800e6cc:	4413      	add	r3, r2
 800e6ce:	009b      	lsls	r3, r3, #2
 800e6d0:	440b      	add	r3, r1
 800e6d2:	3318      	adds	r3, #24
 800e6d4:	681a      	ldr	r2, [r3, #0]
 800e6d6:	78fb      	ldrb	r3, [r7, #3]
 800e6d8:	f003 010f 	and.w	r1, r3, #15
 800e6dc:	68f8      	ldr	r0, [r7, #12]
 800e6de:	460b      	mov	r3, r1
 800e6e0:	00db      	lsls	r3, r3, #3
 800e6e2:	440b      	add	r3, r1
 800e6e4:	009b      	lsls	r3, r3, #2
 800e6e6:	4403      	add	r3, r0
 800e6e8:	331c      	adds	r3, #28
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	fbb2 f1f3 	udiv	r1, r2, r3
 800e6f0:	fb01 f303 	mul.w	r3, r1, r3
 800e6f4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d112      	bne.n	800e720 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800e6fa:	78fb      	ldrb	r3, [r7, #3]
 800e6fc:	f003 020f 	and.w	r2, r3, #15
 800e700:	6879      	ldr	r1, [r7, #4]
 800e702:	4613      	mov	r3, r2
 800e704:	009b      	lsls	r3, r3, #2
 800e706:	4413      	add	r3, r2
 800e708:	009b      	lsls	r3, r3, #2
 800e70a:	440b      	add	r3, r1
 800e70c:	3318      	adds	r3, #24
 800e70e:	2200      	movs	r2, #0
 800e710:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e712:	78f9      	ldrb	r1, [r7, #3]
 800e714:	2300      	movs	r3, #0
 800e716:	2200      	movs	r2, #0
 800e718:	6878      	ldr	r0, [r7, #4]
 800e71a:	f007 ffb0 	bl	801667e <USBD_LL_Transmit>
 800e71e:	e01f      	b.n	800e760 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e720:	68bb      	ldr	r3, [r7, #8]
 800e722:	2200      	movs	r2, #0
 800e724:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e72e:	687a      	ldr	r2, [r7, #4]
 800e730:	33b0      	adds	r3, #176	@ 0xb0
 800e732:	009b      	lsls	r3, r3, #2
 800e734:	4413      	add	r3, r2
 800e736:	685b      	ldr	r3, [r3, #4]
 800e738:	691b      	ldr	r3, [r3, #16]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d010      	beq.n	800e760 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e744:	687a      	ldr	r2, [r7, #4]
 800e746:	33b0      	adds	r3, #176	@ 0xb0
 800e748:	009b      	lsls	r3, r3, #2
 800e74a:	4413      	add	r3, r2
 800e74c:	685b      	ldr	r3, [r3, #4]
 800e74e:	691b      	ldr	r3, [r3, #16]
 800e750:	68ba      	ldr	r2, [r7, #8]
 800e752:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800e756:	68ba      	ldr	r2, [r7, #8]
 800e758:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800e75c:	78fa      	ldrb	r2, [r7, #3]
 800e75e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e760:	2300      	movs	r3, #0
}
 800e762:	4618      	mov	r0, r3
 800e764:	3710      	adds	r7, #16
 800e766:	46bd      	mov	sp, r7
 800e768:	bd80      	pop	{r7, pc}

0800e76a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e76a:	b580      	push	{r7, lr}
 800e76c:	b084      	sub	sp, #16
 800e76e:	af00      	add	r7, sp, #0
 800e770:	6078      	str	r0, [r7, #4]
 800e772:	460b      	mov	r3, r1
 800e774:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	32b0      	adds	r2, #176	@ 0xb0
 800e780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e784:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	32b0      	adds	r2, #176	@ 0xb0
 800e790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d101      	bne.n	800e79c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800e798:	2303      	movs	r3, #3
 800e79a:	e01a      	b.n	800e7d2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e79c:	78fb      	ldrb	r3, [r7, #3]
 800e79e:	4619      	mov	r1, r3
 800e7a0:	6878      	ldr	r0, [r7, #4]
 800e7a2:	f007 ffae 	bl	8016702 <USBD_LL_GetRxDataSize>
 800e7a6:	4602      	mov	r2, r0
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e7b4:	687a      	ldr	r2, [r7, #4]
 800e7b6:	33b0      	adds	r3, #176	@ 0xb0
 800e7b8:	009b      	lsls	r3, r3, #2
 800e7ba:	4413      	add	r3, r2
 800e7bc:	685b      	ldr	r3, [r3, #4]
 800e7be:	68db      	ldr	r3, [r3, #12]
 800e7c0:	68fa      	ldr	r2, [r7, #12]
 800e7c2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800e7c6:	68fa      	ldr	r2, [r7, #12]
 800e7c8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800e7cc:	4611      	mov	r1, r2
 800e7ce:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e7d0:	2300      	movs	r3, #0
}
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	3710      	adds	r7, #16
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	bd80      	pop	{r7, pc}

0800e7da <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e7da:	b580      	push	{r7, lr}
 800e7dc:	b084      	sub	sp, #16
 800e7de:	af00      	add	r7, sp, #0
 800e7e0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	32b0      	adds	r2, #176	@ 0xb0
 800e7ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7f0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d101      	bne.n	800e7fc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e7f8:	2303      	movs	r3, #3
 800e7fa:	e024      	b.n	800e846 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e802:	687a      	ldr	r2, [r7, #4]
 800e804:	33b0      	adds	r3, #176	@ 0xb0
 800e806:	009b      	lsls	r3, r3, #2
 800e808:	4413      	add	r3, r2
 800e80a:	685b      	ldr	r3, [r3, #4]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d019      	beq.n	800e844 <USBD_CDC_EP0_RxReady+0x6a>
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800e816:	2bff      	cmp	r3, #255	@ 0xff
 800e818:	d014      	beq.n	800e844 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e820:	687a      	ldr	r2, [r7, #4]
 800e822:	33b0      	adds	r3, #176	@ 0xb0
 800e824:	009b      	lsls	r3, r3, #2
 800e826:	4413      	add	r3, r2
 800e828:	685b      	ldr	r3, [r3, #4]
 800e82a:	689b      	ldr	r3, [r3, #8]
 800e82c:	68fa      	ldr	r2, [r7, #12]
 800e82e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800e832:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800e834:	68fa      	ldr	r2, [r7, #12]
 800e836:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e83a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	22ff      	movs	r2, #255	@ 0xff
 800e840:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800e844:	2300      	movs	r3, #0
}
 800e846:	4618      	mov	r0, r3
 800e848:	3710      	adds	r7, #16
 800e84a:	46bd      	mov	sp, r7
 800e84c:	bd80      	pop	{r7, pc}
	...

0800e850 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b086      	sub	sp, #24
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e858:	2182      	movs	r1, #130	@ 0x82
 800e85a:	4818      	ldr	r0, [pc, #96]	@ (800e8bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e85c:	f000 fd4f 	bl	800f2fe <USBD_GetEpDesc>
 800e860:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e862:	2101      	movs	r1, #1
 800e864:	4815      	ldr	r0, [pc, #84]	@ (800e8bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e866:	f000 fd4a 	bl	800f2fe <USBD_GetEpDesc>
 800e86a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e86c:	2181      	movs	r1, #129	@ 0x81
 800e86e:	4813      	ldr	r0, [pc, #76]	@ (800e8bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e870:	f000 fd45 	bl	800f2fe <USBD_GetEpDesc>
 800e874:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e876:	697b      	ldr	r3, [r7, #20]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d002      	beq.n	800e882 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e87c:	697b      	ldr	r3, [r7, #20]
 800e87e:	2210      	movs	r2, #16
 800e880:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e882:	693b      	ldr	r3, [r7, #16]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d006      	beq.n	800e896 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e888:	693b      	ldr	r3, [r7, #16]
 800e88a:	2200      	movs	r2, #0
 800e88c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e890:	711a      	strb	r2, [r3, #4]
 800e892:	2200      	movs	r2, #0
 800e894:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d006      	beq.n	800e8aa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	2200      	movs	r2, #0
 800e8a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e8a4:	711a      	strb	r2, [r3, #4]
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	2243      	movs	r2, #67	@ 0x43
 800e8ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e8b0:	4b02      	ldr	r3, [pc, #8]	@ (800e8bc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	3718      	adds	r7, #24
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bd80      	pop	{r7, pc}
 800e8ba:	bf00      	nop
 800e8bc:	24000200 	.word	0x24000200

0800e8c0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b086      	sub	sp, #24
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e8c8:	2182      	movs	r1, #130	@ 0x82
 800e8ca:	4818      	ldr	r0, [pc, #96]	@ (800e92c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e8cc:	f000 fd17 	bl	800f2fe <USBD_GetEpDesc>
 800e8d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e8d2:	2101      	movs	r1, #1
 800e8d4:	4815      	ldr	r0, [pc, #84]	@ (800e92c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e8d6:	f000 fd12 	bl	800f2fe <USBD_GetEpDesc>
 800e8da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e8dc:	2181      	movs	r1, #129	@ 0x81
 800e8de:	4813      	ldr	r0, [pc, #76]	@ (800e92c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e8e0:	f000 fd0d 	bl	800f2fe <USBD_GetEpDesc>
 800e8e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e8e6:	697b      	ldr	r3, [r7, #20]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d002      	beq.n	800e8f2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800e8ec:	697b      	ldr	r3, [r7, #20]
 800e8ee:	2210      	movs	r2, #16
 800e8f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e8f2:	693b      	ldr	r3, [r7, #16]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d006      	beq.n	800e906 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e8f8:	693b      	ldr	r3, [r7, #16]
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	711a      	strb	r2, [r3, #4]
 800e8fe:	2200      	movs	r2, #0
 800e900:	f042 0202 	orr.w	r2, r2, #2
 800e904:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d006      	beq.n	800e91a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	2200      	movs	r2, #0
 800e910:	711a      	strb	r2, [r3, #4]
 800e912:	2200      	movs	r2, #0
 800e914:	f042 0202 	orr.w	r2, r2, #2
 800e918:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	2243      	movs	r2, #67	@ 0x43
 800e91e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e920:	4b02      	ldr	r3, [pc, #8]	@ (800e92c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800e922:	4618      	mov	r0, r3
 800e924:	3718      	adds	r7, #24
 800e926:	46bd      	mov	sp, r7
 800e928:	bd80      	pop	{r7, pc}
 800e92a:	bf00      	nop
 800e92c:	24000200 	.word	0x24000200

0800e930 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b086      	sub	sp, #24
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e938:	2182      	movs	r1, #130	@ 0x82
 800e93a:	4818      	ldr	r0, [pc, #96]	@ (800e99c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e93c:	f000 fcdf 	bl	800f2fe <USBD_GetEpDesc>
 800e940:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e942:	2101      	movs	r1, #1
 800e944:	4815      	ldr	r0, [pc, #84]	@ (800e99c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e946:	f000 fcda 	bl	800f2fe <USBD_GetEpDesc>
 800e94a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e94c:	2181      	movs	r1, #129	@ 0x81
 800e94e:	4813      	ldr	r0, [pc, #76]	@ (800e99c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e950:	f000 fcd5 	bl	800f2fe <USBD_GetEpDesc>
 800e954:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e956:	697b      	ldr	r3, [r7, #20]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d002      	beq.n	800e962 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e95c:	697b      	ldr	r3, [r7, #20]
 800e95e:	2210      	movs	r2, #16
 800e960:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e962:	693b      	ldr	r3, [r7, #16]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d006      	beq.n	800e976 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e968:	693b      	ldr	r3, [r7, #16]
 800e96a:	2200      	movs	r2, #0
 800e96c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e970:	711a      	strb	r2, [r3, #4]
 800e972:	2200      	movs	r2, #0
 800e974:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d006      	beq.n	800e98a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	2200      	movs	r2, #0
 800e980:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e984:	711a      	strb	r2, [r3, #4]
 800e986:	2200      	movs	r2, #0
 800e988:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	2243      	movs	r2, #67	@ 0x43
 800e98e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e990:	4b02      	ldr	r3, [pc, #8]	@ (800e99c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800e992:	4618      	mov	r0, r3
 800e994:	3718      	adds	r7, #24
 800e996:	46bd      	mov	sp, r7
 800e998:	bd80      	pop	{r7, pc}
 800e99a:	bf00      	nop
 800e99c:	24000200 	.word	0x24000200

0800e9a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e9a0:	b480      	push	{r7}
 800e9a2:	b083      	sub	sp, #12
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	220a      	movs	r2, #10
 800e9ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e9ae:	4b03      	ldr	r3, [pc, #12]	@ (800e9bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	370c      	adds	r7, #12
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ba:	4770      	bx	lr
 800e9bc:	240001bc 	.word	0x240001bc

0800e9c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e9c0:	b480      	push	{r7}
 800e9c2:	b083      	sub	sp, #12
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
 800e9c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e9ca:	683b      	ldr	r3, [r7, #0]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d101      	bne.n	800e9d4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e9d0:	2303      	movs	r3, #3
 800e9d2:	e009      	b.n	800e9e8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e9da:	687a      	ldr	r2, [r7, #4]
 800e9dc:	33b0      	adds	r3, #176	@ 0xb0
 800e9de:	009b      	lsls	r3, r3, #2
 800e9e0:	4413      	add	r3, r2
 800e9e2:	683a      	ldr	r2, [r7, #0]
 800e9e4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800e9e6:	2300      	movs	r3, #0
}
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	370c      	adds	r7, #12
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f2:	4770      	bx	lr

0800e9f4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e9f4:	b480      	push	{r7}
 800e9f6:	b087      	sub	sp, #28
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	60f8      	str	r0, [r7, #12]
 800e9fc:	60b9      	str	r1, [r7, #8]
 800e9fe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	32b0      	adds	r2, #176	@ 0xb0
 800ea0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea0e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ea10:	697b      	ldr	r3, [r7, #20]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d101      	bne.n	800ea1a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ea16:	2303      	movs	r3, #3
 800ea18:	e008      	b.n	800ea2c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ea1a:	697b      	ldr	r3, [r7, #20]
 800ea1c:	68ba      	ldr	r2, [r7, #8]
 800ea1e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800ea22:	697b      	ldr	r3, [r7, #20]
 800ea24:	687a      	ldr	r2, [r7, #4]
 800ea26:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800ea2a:	2300      	movs	r3, #0
}
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	371c      	adds	r7, #28
 800ea30:	46bd      	mov	sp, r7
 800ea32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea36:	4770      	bx	lr

0800ea38 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ea38:	b480      	push	{r7}
 800ea3a:	b085      	sub	sp, #20
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
 800ea40:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	32b0      	adds	r2, #176	@ 0xb0
 800ea4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea50:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d101      	bne.n	800ea5c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ea58:	2303      	movs	r3, #3
 800ea5a:	e004      	b.n	800ea66 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	683a      	ldr	r2, [r7, #0]
 800ea60:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800ea64:	2300      	movs	r3, #0
}
 800ea66:	4618      	mov	r0, r3
 800ea68:	3714      	adds	r7, #20
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea70:	4770      	bx	lr
	...

0800ea74 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b084      	sub	sp, #16
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	32b0      	adds	r2, #176	@ 0xb0
 800ea86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea8a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800ea8c:	2301      	movs	r3, #1
 800ea8e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ea90:	68bb      	ldr	r3, [r7, #8]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d101      	bne.n	800ea9a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ea96:	2303      	movs	r3, #3
 800ea98:	e025      	b.n	800eae6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800ea9a:	68bb      	ldr	r3, [r7, #8]
 800ea9c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d11f      	bne.n	800eae4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800eaa4:	68bb      	ldr	r3, [r7, #8]
 800eaa6:	2201      	movs	r2, #1
 800eaa8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800eaac:	4b10      	ldr	r3, [pc, #64]	@ (800eaf0 <USBD_CDC_TransmitPacket+0x7c>)
 800eaae:	781b      	ldrb	r3, [r3, #0]
 800eab0:	f003 020f 	and.w	r2, r3, #15
 800eab4:	68bb      	ldr	r3, [r7, #8]
 800eab6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800eaba:	6878      	ldr	r0, [r7, #4]
 800eabc:	4613      	mov	r3, r2
 800eabe:	009b      	lsls	r3, r3, #2
 800eac0:	4413      	add	r3, r2
 800eac2:	009b      	lsls	r3, r3, #2
 800eac4:	4403      	add	r3, r0
 800eac6:	3318      	adds	r3, #24
 800eac8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800eaca:	4b09      	ldr	r3, [pc, #36]	@ (800eaf0 <USBD_CDC_TransmitPacket+0x7c>)
 800eacc:	7819      	ldrb	r1, [r3, #0]
 800eace:	68bb      	ldr	r3, [r7, #8]
 800ead0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800ead4:	68bb      	ldr	r3, [r7, #8]
 800ead6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800eada:	6878      	ldr	r0, [r7, #4]
 800eadc:	f007 fdcf 	bl	801667e <USBD_LL_Transmit>

    ret = USBD_OK;
 800eae0:	2300      	movs	r3, #0
 800eae2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800eae4:	7bfb      	ldrb	r3, [r7, #15]
}
 800eae6:	4618      	mov	r0, r3
 800eae8:	3710      	adds	r7, #16
 800eaea:	46bd      	mov	sp, r7
 800eaec:	bd80      	pop	{r7, pc}
 800eaee:	bf00      	nop
 800eaf0:	24000243 	.word	0x24000243

0800eaf4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	b084      	sub	sp, #16
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	32b0      	adds	r2, #176	@ 0xb0
 800eb06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb0a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	32b0      	adds	r2, #176	@ 0xb0
 800eb16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d101      	bne.n	800eb22 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800eb1e:	2303      	movs	r3, #3
 800eb20:	e018      	b.n	800eb54 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	7c1b      	ldrb	r3, [r3, #16]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d10a      	bne.n	800eb40 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800eb2a:	4b0c      	ldr	r3, [pc, #48]	@ (800eb5c <USBD_CDC_ReceivePacket+0x68>)
 800eb2c:	7819      	ldrb	r1, [r3, #0]
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800eb34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800eb38:	6878      	ldr	r0, [r7, #4]
 800eb3a:	f007 fdc1 	bl	80166c0 <USBD_LL_PrepareReceive>
 800eb3e:	e008      	b.n	800eb52 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800eb40:	4b06      	ldr	r3, [pc, #24]	@ (800eb5c <USBD_CDC_ReceivePacket+0x68>)
 800eb42:	7819      	ldrb	r1, [r3, #0]
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800eb4a:	2340      	movs	r3, #64	@ 0x40
 800eb4c:	6878      	ldr	r0, [r7, #4]
 800eb4e:	f007 fdb7 	bl	80166c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800eb52:	2300      	movs	r3, #0
}
 800eb54:	4618      	mov	r0, r3
 800eb56:	3710      	adds	r7, #16
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	bd80      	pop	{r7, pc}
 800eb5c:	24000244 	.word	0x24000244

0800eb60 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b086      	sub	sp, #24
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	60f8      	str	r0, [r7, #12]
 800eb68:	60b9      	str	r1, [r7, #8]
 800eb6a:	4613      	mov	r3, r2
 800eb6c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d101      	bne.n	800eb78 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800eb74:	2303      	movs	r3, #3
 800eb76:	e01f      	b.n	800ebb8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	2200      	movs	r2, #0
 800eb84:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800eb90:	68bb      	ldr	r3, [r7, #8]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d003      	beq.n	800eb9e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	68ba      	ldr	r2, [r7, #8]
 800eb9a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	2201      	movs	r2, #1
 800eba2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	79fa      	ldrb	r2, [r7, #7]
 800ebaa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ebac:	68f8      	ldr	r0, [r7, #12]
 800ebae:	f007 fc2d 	bl	801640c <USBD_LL_Init>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ebb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebb8:	4618      	mov	r0, r3
 800ebba:	3718      	adds	r7, #24
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	bd80      	pop	{r7, pc}

0800ebc0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b084      	sub	sp, #16
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
 800ebc8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ebca:	2300      	movs	r3, #0
 800ebcc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ebce:	683b      	ldr	r3, [r7, #0]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d101      	bne.n	800ebd8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ebd4:	2303      	movs	r3, #3
 800ebd6:	e025      	b.n	800ec24 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	683a      	ldr	r2, [r7, #0]
 800ebdc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	32ae      	adds	r2, #174	@ 0xae
 800ebea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d00f      	beq.n	800ec14 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	32ae      	adds	r2, #174	@ 0xae
 800ebfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec04:	f107 020e 	add.w	r2, r7, #14
 800ec08:	4610      	mov	r0, r2
 800ec0a:	4798      	blx	r3
 800ec0c:	4602      	mov	r2, r0
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ec1a:	1c5a      	adds	r2, r3, #1
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800ec22:	2300      	movs	r3, #0
}
 800ec24:	4618      	mov	r0, r3
 800ec26:	3710      	adds	r7, #16
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	bd80      	pop	{r7, pc}

0800ec2c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b082      	sub	sp, #8
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ec34:	6878      	ldr	r0, [r7, #4]
 800ec36:	f007 fc39 	bl	80164ac <USBD_LL_Start>
 800ec3a:	4603      	mov	r3, r0
}
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	3708      	adds	r7, #8
 800ec40:	46bd      	mov	sp, r7
 800ec42:	bd80      	pop	{r7, pc}

0800ec44 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ec44:	b480      	push	{r7}
 800ec46:	b083      	sub	sp, #12
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ec4c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ec4e:	4618      	mov	r0, r3
 800ec50:	370c      	adds	r7, #12
 800ec52:	46bd      	mov	sp, r7
 800ec54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec58:	4770      	bx	lr

0800ec5a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ec5a:	b580      	push	{r7, lr}
 800ec5c:	b084      	sub	sp, #16
 800ec5e:	af00      	add	r7, sp, #0
 800ec60:	6078      	str	r0, [r7, #4]
 800ec62:	460b      	mov	r3, r1
 800ec64:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ec66:	2300      	movs	r3, #0
 800ec68:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d009      	beq.n	800ec88 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	78fa      	ldrb	r2, [r7, #3]
 800ec7e:	4611      	mov	r1, r2
 800ec80:	6878      	ldr	r0, [r7, #4]
 800ec82:	4798      	blx	r3
 800ec84:	4603      	mov	r3, r0
 800ec86:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ec88:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	3710      	adds	r7, #16
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	bd80      	pop	{r7, pc}

0800ec92 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ec92:	b580      	push	{r7, lr}
 800ec94:	b084      	sub	sp, #16
 800ec96:	af00      	add	r7, sp, #0
 800ec98:	6078      	str	r0, [r7, #4]
 800ec9a:	460b      	mov	r3, r1
 800ec9c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ec9e:	2300      	movs	r3, #0
 800eca0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eca8:	685b      	ldr	r3, [r3, #4]
 800ecaa:	78fa      	ldrb	r2, [r7, #3]
 800ecac:	4611      	mov	r1, r2
 800ecae:	6878      	ldr	r0, [r7, #4]
 800ecb0:	4798      	blx	r3
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d001      	beq.n	800ecbc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ecb8:	2303      	movs	r3, #3
 800ecba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ecbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	3710      	adds	r7, #16
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	bd80      	pop	{r7, pc}

0800ecc6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ecc6:	b580      	push	{r7, lr}
 800ecc8:	b084      	sub	sp, #16
 800ecca:	af00      	add	r7, sp, #0
 800eccc:	6078      	str	r0, [r7, #4]
 800ecce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ecd6:	6839      	ldr	r1, [r7, #0]
 800ecd8:	4618      	mov	r0, r3
 800ecda:	f001 f936 	bl	800ff4a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	2201      	movs	r2, #1
 800ece2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800ecec:	461a      	mov	r2, r3
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ecfa:	f003 031f 	and.w	r3, r3, #31
 800ecfe:	2b02      	cmp	r3, #2
 800ed00:	d01a      	beq.n	800ed38 <USBD_LL_SetupStage+0x72>
 800ed02:	2b02      	cmp	r3, #2
 800ed04:	d822      	bhi.n	800ed4c <USBD_LL_SetupStage+0x86>
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d002      	beq.n	800ed10 <USBD_LL_SetupStage+0x4a>
 800ed0a:	2b01      	cmp	r3, #1
 800ed0c:	d00a      	beq.n	800ed24 <USBD_LL_SetupStage+0x5e>
 800ed0e:	e01d      	b.n	800ed4c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ed16:	4619      	mov	r1, r3
 800ed18:	6878      	ldr	r0, [r7, #4]
 800ed1a:	f000 fb63 	bl	800f3e4 <USBD_StdDevReq>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	73fb      	strb	r3, [r7, #15]
      break;
 800ed22:	e020      	b.n	800ed66 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ed2a:	4619      	mov	r1, r3
 800ed2c:	6878      	ldr	r0, [r7, #4]
 800ed2e:	f000 fbcb 	bl	800f4c8 <USBD_StdItfReq>
 800ed32:	4603      	mov	r3, r0
 800ed34:	73fb      	strb	r3, [r7, #15]
      break;
 800ed36:	e016      	b.n	800ed66 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ed3e:	4619      	mov	r1, r3
 800ed40:	6878      	ldr	r0, [r7, #4]
 800ed42:	f000 fc2d 	bl	800f5a0 <USBD_StdEPReq>
 800ed46:	4603      	mov	r3, r0
 800ed48:	73fb      	strb	r3, [r7, #15]
      break;
 800ed4a:	e00c      	b.n	800ed66 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ed52:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ed56:	b2db      	uxtb	r3, r3
 800ed58:	4619      	mov	r1, r3
 800ed5a:	6878      	ldr	r0, [r7, #4]
 800ed5c:	f007 fc06 	bl	801656c <USBD_LL_StallEP>
 800ed60:	4603      	mov	r3, r0
 800ed62:	73fb      	strb	r3, [r7, #15]
      break;
 800ed64:	bf00      	nop
  }

  return ret;
 800ed66:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed68:	4618      	mov	r0, r3
 800ed6a:	3710      	adds	r7, #16
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	bd80      	pop	{r7, pc}

0800ed70 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b086      	sub	sp, #24
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	60f8      	str	r0, [r7, #12]
 800ed78:	460b      	mov	r3, r1
 800ed7a:	607a      	str	r2, [r7, #4]
 800ed7c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ed7e:	2300      	movs	r3, #0
 800ed80:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ed82:	7afb      	ldrb	r3, [r7, #11]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d16e      	bne.n	800ee66 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ed8e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ed96:	2b03      	cmp	r3, #3
 800ed98:	f040 8098 	bne.w	800eecc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ed9c:	693b      	ldr	r3, [r7, #16]
 800ed9e:	689a      	ldr	r2, [r3, #8]
 800eda0:	693b      	ldr	r3, [r7, #16]
 800eda2:	68db      	ldr	r3, [r3, #12]
 800eda4:	429a      	cmp	r2, r3
 800eda6:	d913      	bls.n	800edd0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800eda8:	693b      	ldr	r3, [r7, #16]
 800edaa:	689a      	ldr	r2, [r3, #8]
 800edac:	693b      	ldr	r3, [r7, #16]
 800edae:	68db      	ldr	r3, [r3, #12]
 800edb0:	1ad2      	subs	r2, r2, r3
 800edb2:	693b      	ldr	r3, [r7, #16]
 800edb4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800edb6:	693b      	ldr	r3, [r7, #16]
 800edb8:	68da      	ldr	r2, [r3, #12]
 800edba:	693b      	ldr	r3, [r7, #16]
 800edbc:	689b      	ldr	r3, [r3, #8]
 800edbe:	4293      	cmp	r3, r2
 800edc0:	bf28      	it	cs
 800edc2:	4613      	movcs	r3, r2
 800edc4:	461a      	mov	r2, r3
 800edc6:	6879      	ldr	r1, [r7, #4]
 800edc8:	68f8      	ldr	r0, [r7, #12]
 800edca:	f001 f9be 	bl	801014a <USBD_CtlContinueRx>
 800edce:	e07d      	b.n	800eecc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800edd6:	f003 031f 	and.w	r3, r3, #31
 800edda:	2b02      	cmp	r3, #2
 800eddc:	d014      	beq.n	800ee08 <USBD_LL_DataOutStage+0x98>
 800edde:	2b02      	cmp	r3, #2
 800ede0:	d81d      	bhi.n	800ee1e <USBD_LL_DataOutStage+0xae>
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d002      	beq.n	800edec <USBD_LL_DataOutStage+0x7c>
 800ede6:	2b01      	cmp	r3, #1
 800ede8:	d003      	beq.n	800edf2 <USBD_LL_DataOutStage+0x82>
 800edea:	e018      	b.n	800ee1e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800edec:	2300      	movs	r3, #0
 800edee:	75bb      	strb	r3, [r7, #22]
            break;
 800edf0:	e018      	b.n	800ee24 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800edf8:	b2db      	uxtb	r3, r3
 800edfa:	4619      	mov	r1, r3
 800edfc:	68f8      	ldr	r0, [r7, #12]
 800edfe:	f000 fa64 	bl	800f2ca <USBD_CoreFindIF>
 800ee02:	4603      	mov	r3, r0
 800ee04:	75bb      	strb	r3, [r7, #22]
            break;
 800ee06:	e00d      	b.n	800ee24 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ee0e:	b2db      	uxtb	r3, r3
 800ee10:	4619      	mov	r1, r3
 800ee12:	68f8      	ldr	r0, [r7, #12]
 800ee14:	f000 fa66 	bl	800f2e4 <USBD_CoreFindEP>
 800ee18:	4603      	mov	r3, r0
 800ee1a:	75bb      	strb	r3, [r7, #22]
            break;
 800ee1c:	e002      	b.n	800ee24 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ee1e:	2300      	movs	r3, #0
 800ee20:	75bb      	strb	r3, [r7, #22]
            break;
 800ee22:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ee24:	7dbb      	ldrb	r3, [r7, #22]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d119      	bne.n	800ee5e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ee30:	b2db      	uxtb	r3, r3
 800ee32:	2b03      	cmp	r3, #3
 800ee34:	d113      	bne.n	800ee5e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ee36:	7dba      	ldrb	r2, [r7, #22]
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	32ae      	adds	r2, #174	@ 0xae
 800ee3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee40:	691b      	ldr	r3, [r3, #16]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d00b      	beq.n	800ee5e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ee46:	7dba      	ldrb	r2, [r7, #22]
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ee4e:	7dba      	ldrb	r2, [r7, #22]
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	32ae      	adds	r2, #174	@ 0xae
 800ee54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee58:	691b      	ldr	r3, [r3, #16]
 800ee5a:	68f8      	ldr	r0, [r7, #12]
 800ee5c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ee5e:	68f8      	ldr	r0, [r7, #12]
 800ee60:	f001 f984 	bl	801016c <USBD_CtlSendStatus>
 800ee64:	e032      	b.n	800eecc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ee66:	7afb      	ldrb	r3, [r7, #11]
 800ee68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ee6c:	b2db      	uxtb	r3, r3
 800ee6e:	4619      	mov	r1, r3
 800ee70:	68f8      	ldr	r0, [r7, #12]
 800ee72:	f000 fa37 	bl	800f2e4 <USBD_CoreFindEP>
 800ee76:	4603      	mov	r3, r0
 800ee78:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ee7a:	7dbb      	ldrb	r3, [r7, #22]
 800ee7c:	2bff      	cmp	r3, #255	@ 0xff
 800ee7e:	d025      	beq.n	800eecc <USBD_LL_DataOutStage+0x15c>
 800ee80:	7dbb      	ldrb	r3, [r7, #22]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d122      	bne.n	800eecc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ee8c:	b2db      	uxtb	r3, r3
 800ee8e:	2b03      	cmp	r3, #3
 800ee90:	d117      	bne.n	800eec2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ee92:	7dba      	ldrb	r2, [r7, #22]
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	32ae      	adds	r2, #174	@ 0xae
 800ee98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee9c:	699b      	ldr	r3, [r3, #24]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d00f      	beq.n	800eec2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800eea2:	7dba      	ldrb	r2, [r7, #22]
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800eeaa:	7dba      	ldrb	r2, [r7, #22]
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	32ae      	adds	r2, #174	@ 0xae
 800eeb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eeb4:	699b      	ldr	r3, [r3, #24]
 800eeb6:	7afa      	ldrb	r2, [r7, #11]
 800eeb8:	4611      	mov	r1, r2
 800eeba:	68f8      	ldr	r0, [r7, #12]
 800eebc:	4798      	blx	r3
 800eebe:	4603      	mov	r3, r0
 800eec0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800eec2:	7dfb      	ldrb	r3, [r7, #23]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d001      	beq.n	800eecc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800eec8:	7dfb      	ldrb	r3, [r7, #23]
 800eeca:	e000      	b.n	800eece <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800eecc:	2300      	movs	r3, #0
}
 800eece:	4618      	mov	r0, r3
 800eed0:	3718      	adds	r7, #24
 800eed2:	46bd      	mov	sp, r7
 800eed4:	bd80      	pop	{r7, pc}

0800eed6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800eed6:	b580      	push	{r7, lr}
 800eed8:	b086      	sub	sp, #24
 800eeda:	af00      	add	r7, sp, #0
 800eedc:	60f8      	str	r0, [r7, #12]
 800eede:	460b      	mov	r3, r1
 800eee0:	607a      	str	r2, [r7, #4]
 800eee2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800eee4:	7afb      	ldrb	r3, [r7, #11]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d16f      	bne.n	800efca <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	3314      	adds	r3, #20
 800eeee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800eef6:	2b02      	cmp	r3, #2
 800eef8:	d15a      	bne.n	800efb0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800eefa:	693b      	ldr	r3, [r7, #16]
 800eefc:	689a      	ldr	r2, [r3, #8]
 800eefe:	693b      	ldr	r3, [r7, #16]
 800ef00:	68db      	ldr	r3, [r3, #12]
 800ef02:	429a      	cmp	r2, r3
 800ef04:	d914      	bls.n	800ef30 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ef06:	693b      	ldr	r3, [r7, #16]
 800ef08:	689a      	ldr	r2, [r3, #8]
 800ef0a:	693b      	ldr	r3, [r7, #16]
 800ef0c:	68db      	ldr	r3, [r3, #12]
 800ef0e:	1ad2      	subs	r2, r2, r3
 800ef10:	693b      	ldr	r3, [r7, #16]
 800ef12:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ef14:	693b      	ldr	r3, [r7, #16]
 800ef16:	689b      	ldr	r3, [r3, #8]
 800ef18:	461a      	mov	r2, r3
 800ef1a:	6879      	ldr	r1, [r7, #4]
 800ef1c:	68f8      	ldr	r0, [r7, #12]
 800ef1e:	f001 f8e6 	bl	80100ee <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ef22:	2300      	movs	r3, #0
 800ef24:	2200      	movs	r2, #0
 800ef26:	2100      	movs	r1, #0
 800ef28:	68f8      	ldr	r0, [r7, #12]
 800ef2a:	f007 fbc9 	bl	80166c0 <USBD_LL_PrepareReceive>
 800ef2e:	e03f      	b.n	800efb0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ef30:	693b      	ldr	r3, [r7, #16]
 800ef32:	68da      	ldr	r2, [r3, #12]
 800ef34:	693b      	ldr	r3, [r7, #16]
 800ef36:	689b      	ldr	r3, [r3, #8]
 800ef38:	429a      	cmp	r2, r3
 800ef3a:	d11c      	bne.n	800ef76 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ef3c:	693b      	ldr	r3, [r7, #16]
 800ef3e:	685a      	ldr	r2, [r3, #4]
 800ef40:	693b      	ldr	r3, [r7, #16]
 800ef42:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ef44:	429a      	cmp	r2, r3
 800ef46:	d316      	bcc.n	800ef76 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ef48:	693b      	ldr	r3, [r7, #16]
 800ef4a:	685a      	ldr	r2, [r3, #4]
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ef52:	429a      	cmp	r2, r3
 800ef54:	d20f      	bcs.n	800ef76 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ef56:	2200      	movs	r2, #0
 800ef58:	2100      	movs	r1, #0
 800ef5a:	68f8      	ldr	r0, [r7, #12]
 800ef5c:	f001 f8c7 	bl	80100ee <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	2200      	movs	r2, #0
 800ef64:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ef68:	2300      	movs	r3, #0
 800ef6a:	2200      	movs	r2, #0
 800ef6c:	2100      	movs	r1, #0
 800ef6e:	68f8      	ldr	r0, [r7, #12]
 800ef70:	f007 fba6 	bl	80166c0 <USBD_LL_PrepareReceive>
 800ef74:	e01c      	b.n	800efb0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ef7c:	b2db      	uxtb	r3, r3
 800ef7e:	2b03      	cmp	r3, #3
 800ef80:	d10f      	bne.n	800efa2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef88:	68db      	ldr	r3, [r3, #12]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d009      	beq.n	800efa2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	2200      	movs	r2, #0
 800ef92:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef9c:	68db      	ldr	r3, [r3, #12]
 800ef9e:	68f8      	ldr	r0, [r7, #12]
 800efa0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800efa2:	2180      	movs	r1, #128	@ 0x80
 800efa4:	68f8      	ldr	r0, [r7, #12]
 800efa6:	f007 fae1 	bl	801656c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800efaa:	68f8      	ldr	r0, [r7, #12]
 800efac:	f001 f8f1 	bl	8010192 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d03a      	beq.n	800f030 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800efba:	68f8      	ldr	r0, [r7, #12]
 800efbc:	f7ff fe42 	bl	800ec44 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	2200      	movs	r2, #0
 800efc4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800efc8:	e032      	b.n	800f030 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800efca:	7afb      	ldrb	r3, [r7, #11]
 800efcc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800efd0:	b2db      	uxtb	r3, r3
 800efd2:	4619      	mov	r1, r3
 800efd4:	68f8      	ldr	r0, [r7, #12]
 800efd6:	f000 f985 	bl	800f2e4 <USBD_CoreFindEP>
 800efda:	4603      	mov	r3, r0
 800efdc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800efde:	7dfb      	ldrb	r3, [r7, #23]
 800efe0:	2bff      	cmp	r3, #255	@ 0xff
 800efe2:	d025      	beq.n	800f030 <USBD_LL_DataInStage+0x15a>
 800efe4:	7dfb      	ldrb	r3, [r7, #23]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d122      	bne.n	800f030 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eff0:	b2db      	uxtb	r3, r3
 800eff2:	2b03      	cmp	r3, #3
 800eff4:	d11c      	bne.n	800f030 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800eff6:	7dfa      	ldrb	r2, [r7, #23]
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	32ae      	adds	r2, #174	@ 0xae
 800effc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f000:	695b      	ldr	r3, [r3, #20]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d014      	beq.n	800f030 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800f006:	7dfa      	ldrb	r2, [r7, #23]
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800f00e:	7dfa      	ldrb	r2, [r7, #23]
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	32ae      	adds	r2, #174	@ 0xae
 800f014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f018:	695b      	ldr	r3, [r3, #20]
 800f01a:	7afa      	ldrb	r2, [r7, #11]
 800f01c:	4611      	mov	r1, r2
 800f01e:	68f8      	ldr	r0, [r7, #12]
 800f020:	4798      	blx	r3
 800f022:	4603      	mov	r3, r0
 800f024:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800f026:	7dbb      	ldrb	r3, [r7, #22]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d001      	beq.n	800f030 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800f02c:	7dbb      	ldrb	r3, [r7, #22]
 800f02e:	e000      	b.n	800f032 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800f030:	2300      	movs	r3, #0
}
 800f032:	4618      	mov	r0, r3
 800f034:	3718      	adds	r7, #24
 800f036:	46bd      	mov	sp, r7
 800f038:	bd80      	pop	{r7, pc}

0800f03a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f03a:	b580      	push	{r7, lr}
 800f03c:	b084      	sub	sp, #16
 800f03e:	af00      	add	r7, sp, #0
 800f040:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800f042:	2300      	movs	r3, #0
 800f044:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	2201      	movs	r2, #1
 800f04a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	2200      	movs	r2, #0
 800f052:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	2200      	movs	r2, #0
 800f05a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	2200      	movs	r2, #0
 800f060:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	2200      	movs	r2, #0
 800f068:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f072:	2b00      	cmp	r3, #0
 800f074:	d014      	beq.n	800f0a0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f07c:	685b      	ldr	r3, [r3, #4]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d00e      	beq.n	800f0a0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f088:	685b      	ldr	r3, [r3, #4]
 800f08a:	687a      	ldr	r2, [r7, #4]
 800f08c:	6852      	ldr	r2, [r2, #4]
 800f08e:	b2d2      	uxtb	r2, r2
 800f090:	4611      	mov	r1, r2
 800f092:	6878      	ldr	r0, [r7, #4]
 800f094:	4798      	blx	r3
 800f096:	4603      	mov	r3, r0
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d001      	beq.n	800f0a0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800f09c:	2303      	movs	r3, #3
 800f09e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f0a0:	2340      	movs	r3, #64	@ 0x40
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	2100      	movs	r1, #0
 800f0a6:	6878      	ldr	r0, [r7, #4]
 800f0a8:	f007 fa1b 	bl	80164e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	2201      	movs	r2, #1
 800f0b0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	2240      	movs	r2, #64	@ 0x40
 800f0b8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f0bc:	2340      	movs	r3, #64	@ 0x40
 800f0be:	2200      	movs	r2, #0
 800f0c0:	2180      	movs	r1, #128	@ 0x80
 800f0c2:	6878      	ldr	r0, [r7, #4]
 800f0c4:	f007 fa0d 	bl	80164e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2201      	movs	r2, #1
 800f0cc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	2240      	movs	r2, #64	@ 0x40
 800f0d2:	621a      	str	r2, [r3, #32]

  return ret;
 800f0d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	3710      	adds	r7, #16
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	bd80      	pop	{r7, pc}

0800f0de <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f0de:	b480      	push	{r7}
 800f0e0:	b083      	sub	sp, #12
 800f0e2:	af00      	add	r7, sp, #0
 800f0e4:	6078      	str	r0, [r7, #4]
 800f0e6:	460b      	mov	r3, r1
 800f0e8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	78fa      	ldrb	r2, [r7, #3]
 800f0ee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f0f0:	2300      	movs	r3, #0
}
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	370c      	adds	r7, #12
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fc:	4770      	bx	lr

0800f0fe <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f0fe:	b480      	push	{r7}
 800f100:	b083      	sub	sp, #12
 800f102:	af00      	add	r7, sp, #0
 800f104:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f10c:	b2db      	uxtb	r3, r3
 800f10e:	2b04      	cmp	r3, #4
 800f110:	d006      	beq.n	800f120 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f118:	b2da      	uxtb	r2, r3
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	2204      	movs	r2, #4
 800f124:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800f128:	2300      	movs	r3, #0
}
 800f12a:	4618      	mov	r0, r3
 800f12c:	370c      	adds	r7, #12
 800f12e:	46bd      	mov	sp, r7
 800f130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f134:	4770      	bx	lr

0800f136 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f136:	b480      	push	{r7}
 800f138:	b083      	sub	sp, #12
 800f13a:	af00      	add	r7, sp, #0
 800f13c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f144:	b2db      	uxtb	r3, r3
 800f146:	2b04      	cmp	r3, #4
 800f148:	d106      	bne.n	800f158 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800f150:	b2da      	uxtb	r2, r3
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800f158:	2300      	movs	r3, #0
}
 800f15a:	4618      	mov	r0, r3
 800f15c:	370c      	adds	r7, #12
 800f15e:	46bd      	mov	sp, r7
 800f160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f164:	4770      	bx	lr

0800f166 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f166:	b580      	push	{r7, lr}
 800f168:	b082      	sub	sp, #8
 800f16a:	af00      	add	r7, sp, #0
 800f16c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f174:	b2db      	uxtb	r3, r3
 800f176:	2b03      	cmp	r3, #3
 800f178:	d110      	bne.n	800f19c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f180:	2b00      	cmp	r3, #0
 800f182:	d00b      	beq.n	800f19c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f18a:	69db      	ldr	r3, [r3, #28]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d005      	beq.n	800f19c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f196:	69db      	ldr	r3, [r3, #28]
 800f198:	6878      	ldr	r0, [r7, #4]
 800f19a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800f19c:	2300      	movs	r3, #0
}
 800f19e:	4618      	mov	r0, r3
 800f1a0:	3708      	adds	r7, #8
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	bd80      	pop	{r7, pc}

0800f1a6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f1a6:	b580      	push	{r7, lr}
 800f1a8:	b082      	sub	sp, #8
 800f1aa:	af00      	add	r7, sp, #0
 800f1ac:	6078      	str	r0, [r7, #4]
 800f1ae:	460b      	mov	r3, r1
 800f1b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	32ae      	adds	r2, #174	@ 0xae
 800f1bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d101      	bne.n	800f1c8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800f1c4:	2303      	movs	r3, #3
 800f1c6:	e01c      	b.n	800f202 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f1ce:	b2db      	uxtb	r3, r3
 800f1d0:	2b03      	cmp	r3, #3
 800f1d2:	d115      	bne.n	800f200 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	32ae      	adds	r2, #174	@ 0xae
 800f1de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1e2:	6a1b      	ldr	r3, [r3, #32]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d00b      	beq.n	800f200 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	32ae      	adds	r2, #174	@ 0xae
 800f1f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1f6:	6a1b      	ldr	r3, [r3, #32]
 800f1f8:	78fa      	ldrb	r2, [r7, #3]
 800f1fa:	4611      	mov	r1, r2
 800f1fc:	6878      	ldr	r0, [r7, #4]
 800f1fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f200:	2300      	movs	r3, #0
}
 800f202:	4618      	mov	r0, r3
 800f204:	3708      	adds	r7, #8
 800f206:	46bd      	mov	sp, r7
 800f208:	bd80      	pop	{r7, pc}

0800f20a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f20a:	b580      	push	{r7, lr}
 800f20c:	b082      	sub	sp, #8
 800f20e:	af00      	add	r7, sp, #0
 800f210:	6078      	str	r0, [r7, #4]
 800f212:	460b      	mov	r3, r1
 800f214:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	32ae      	adds	r2, #174	@ 0xae
 800f220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d101      	bne.n	800f22c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800f228:	2303      	movs	r3, #3
 800f22a:	e01c      	b.n	800f266 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f232:	b2db      	uxtb	r3, r3
 800f234:	2b03      	cmp	r3, #3
 800f236:	d115      	bne.n	800f264 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	32ae      	adds	r2, #174	@ 0xae
 800f242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d00b      	beq.n	800f264 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	32ae      	adds	r2, #174	@ 0xae
 800f256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f25a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f25c:	78fa      	ldrb	r2, [r7, #3]
 800f25e:	4611      	mov	r1, r2
 800f260:	6878      	ldr	r0, [r7, #4]
 800f262:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f264:	2300      	movs	r3, #0
}
 800f266:	4618      	mov	r0, r3
 800f268:	3708      	adds	r7, #8
 800f26a:	46bd      	mov	sp, r7
 800f26c:	bd80      	pop	{r7, pc}

0800f26e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f26e:	b480      	push	{r7}
 800f270:	b083      	sub	sp, #12
 800f272:	af00      	add	r7, sp, #0
 800f274:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f276:	2300      	movs	r3, #0
}
 800f278:	4618      	mov	r0, r3
 800f27a:	370c      	adds	r7, #12
 800f27c:	46bd      	mov	sp, r7
 800f27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f282:	4770      	bx	lr

0800f284 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b084      	sub	sp, #16
 800f288:	af00      	add	r7, sp, #0
 800f28a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800f28c:	2300      	movs	r3, #0
 800f28e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	2201      	movs	r2, #1
 800f294:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d00e      	beq.n	800f2c0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f2a8:	685b      	ldr	r3, [r3, #4]
 800f2aa:	687a      	ldr	r2, [r7, #4]
 800f2ac:	6852      	ldr	r2, [r2, #4]
 800f2ae:	b2d2      	uxtb	r2, r2
 800f2b0:	4611      	mov	r1, r2
 800f2b2:	6878      	ldr	r0, [r7, #4]
 800f2b4:	4798      	blx	r3
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d001      	beq.n	800f2c0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800f2bc:	2303      	movs	r3, #3
 800f2be:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f2c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	3710      	adds	r7, #16
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	bd80      	pop	{r7, pc}

0800f2ca <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f2ca:	b480      	push	{r7}
 800f2cc:	b083      	sub	sp, #12
 800f2ce:	af00      	add	r7, sp, #0
 800f2d0:	6078      	str	r0, [r7, #4]
 800f2d2:	460b      	mov	r3, r1
 800f2d4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f2d6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f2d8:	4618      	mov	r0, r3
 800f2da:	370c      	adds	r7, #12
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e2:	4770      	bx	lr

0800f2e4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f2e4:	b480      	push	{r7}
 800f2e6:	b083      	sub	sp, #12
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
 800f2ec:	460b      	mov	r3, r1
 800f2ee:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f2f0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	370c      	adds	r7, #12
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fc:	4770      	bx	lr

0800f2fe <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800f2fe:	b580      	push	{r7, lr}
 800f300:	b086      	sub	sp, #24
 800f302:	af00      	add	r7, sp, #0
 800f304:	6078      	str	r0, [r7, #4]
 800f306:	460b      	mov	r3, r1
 800f308:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800f312:	2300      	movs	r3, #0
 800f314:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	885b      	ldrh	r3, [r3, #2]
 800f31a:	b29b      	uxth	r3, r3
 800f31c:	68fa      	ldr	r2, [r7, #12]
 800f31e:	7812      	ldrb	r2, [r2, #0]
 800f320:	4293      	cmp	r3, r2
 800f322:	d91f      	bls.n	800f364 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	781b      	ldrb	r3, [r3, #0]
 800f328:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800f32a:	e013      	b.n	800f354 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800f32c:	f107 030a 	add.w	r3, r7, #10
 800f330:	4619      	mov	r1, r3
 800f332:	6978      	ldr	r0, [r7, #20]
 800f334:	f000 f81b 	bl	800f36e <USBD_GetNextDesc>
 800f338:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800f33a:	697b      	ldr	r3, [r7, #20]
 800f33c:	785b      	ldrb	r3, [r3, #1]
 800f33e:	2b05      	cmp	r3, #5
 800f340:	d108      	bne.n	800f354 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800f342:	697b      	ldr	r3, [r7, #20]
 800f344:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800f346:	693b      	ldr	r3, [r7, #16]
 800f348:	789b      	ldrb	r3, [r3, #2]
 800f34a:	78fa      	ldrb	r2, [r7, #3]
 800f34c:	429a      	cmp	r2, r3
 800f34e:	d008      	beq.n	800f362 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800f350:	2300      	movs	r3, #0
 800f352:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	885b      	ldrh	r3, [r3, #2]
 800f358:	b29a      	uxth	r2, r3
 800f35a:	897b      	ldrh	r3, [r7, #10]
 800f35c:	429a      	cmp	r2, r3
 800f35e:	d8e5      	bhi.n	800f32c <USBD_GetEpDesc+0x2e>
 800f360:	e000      	b.n	800f364 <USBD_GetEpDesc+0x66>
          break;
 800f362:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800f364:	693b      	ldr	r3, [r7, #16]
}
 800f366:	4618      	mov	r0, r3
 800f368:	3718      	adds	r7, #24
 800f36a:	46bd      	mov	sp, r7
 800f36c:	bd80      	pop	{r7, pc}

0800f36e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800f36e:	b480      	push	{r7}
 800f370:	b085      	sub	sp, #20
 800f372:	af00      	add	r7, sp, #0
 800f374:	6078      	str	r0, [r7, #4]
 800f376:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800f37c:	683b      	ldr	r3, [r7, #0]
 800f37e:	881b      	ldrh	r3, [r3, #0]
 800f380:	68fa      	ldr	r2, [r7, #12]
 800f382:	7812      	ldrb	r2, [r2, #0]
 800f384:	4413      	add	r3, r2
 800f386:	b29a      	uxth	r2, r3
 800f388:	683b      	ldr	r3, [r7, #0]
 800f38a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	781b      	ldrb	r3, [r3, #0]
 800f390:	461a      	mov	r2, r3
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	4413      	add	r3, r2
 800f396:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f398:	68fb      	ldr	r3, [r7, #12]
}
 800f39a:	4618      	mov	r0, r3
 800f39c:	3714      	adds	r7, #20
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a4:	4770      	bx	lr

0800f3a6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f3a6:	b480      	push	{r7}
 800f3a8:	b087      	sub	sp, #28
 800f3aa:	af00      	add	r7, sp, #0
 800f3ac:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f3b2:	697b      	ldr	r3, [r7, #20]
 800f3b4:	781b      	ldrb	r3, [r3, #0]
 800f3b6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f3b8:	697b      	ldr	r3, [r7, #20]
 800f3ba:	3301      	adds	r3, #1
 800f3bc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f3be:	697b      	ldr	r3, [r7, #20]
 800f3c0:	781b      	ldrb	r3, [r3, #0]
 800f3c2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f3c4:	8a3b      	ldrh	r3, [r7, #16]
 800f3c6:	021b      	lsls	r3, r3, #8
 800f3c8:	b21a      	sxth	r2, r3
 800f3ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f3ce:	4313      	orrs	r3, r2
 800f3d0:	b21b      	sxth	r3, r3
 800f3d2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f3d4:	89fb      	ldrh	r3, [r7, #14]
}
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	371c      	adds	r7, #28
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e0:	4770      	bx	lr
	...

0800f3e4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b084      	sub	sp, #16
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	6078      	str	r0, [r7, #4]
 800f3ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f3f2:	683b      	ldr	r3, [r7, #0]
 800f3f4:	781b      	ldrb	r3, [r3, #0]
 800f3f6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f3fa:	2b40      	cmp	r3, #64	@ 0x40
 800f3fc:	d005      	beq.n	800f40a <USBD_StdDevReq+0x26>
 800f3fe:	2b40      	cmp	r3, #64	@ 0x40
 800f400:	d857      	bhi.n	800f4b2 <USBD_StdDevReq+0xce>
 800f402:	2b00      	cmp	r3, #0
 800f404:	d00f      	beq.n	800f426 <USBD_StdDevReq+0x42>
 800f406:	2b20      	cmp	r3, #32
 800f408:	d153      	bne.n	800f4b2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	32ae      	adds	r2, #174	@ 0xae
 800f414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f418:	689b      	ldr	r3, [r3, #8]
 800f41a:	6839      	ldr	r1, [r7, #0]
 800f41c:	6878      	ldr	r0, [r7, #4]
 800f41e:	4798      	blx	r3
 800f420:	4603      	mov	r3, r0
 800f422:	73fb      	strb	r3, [r7, #15]
      break;
 800f424:	e04a      	b.n	800f4bc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f426:	683b      	ldr	r3, [r7, #0]
 800f428:	785b      	ldrb	r3, [r3, #1]
 800f42a:	2b09      	cmp	r3, #9
 800f42c:	d83b      	bhi.n	800f4a6 <USBD_StdDevReq+0xc2>
 800f42e:	a201      	add	r2, pc, #4	@ (adr r2, 800f434 <USBD_StdDevReq+0x50>)
 800f430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f434:	0800f489 	.word	0x0800f489
 800f438:	0800f49d 	.word	0x0800f49d
 800f43c:	0800f4a7 	.word	0x0800f4a7
 800f440:	0800f493 	.word	0x0800f493
 800f444:	0800f4a7 	.word	0x0800f4a7
 800f448:	0800f467 	.word	0x0800f467
 800f44c:	0800f45d 	.word	0x0800f45d
 800f450:	0800f4a7 	.word	0x0800f4a7
 800f454:	0800f47f 	.word	0x0800f47f
 800f458:	0800f471 	.word	0x0800f471
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f45c:	6839      	ldr	r1, [r7, #0]
 800f45e:	6878      	ldr	r0, [r7, #4]
 800f460:	f000 fa3c 	bl	800f8dc <USBD_GetDescriptor>
          break;
 800f464:	e024      	b.n	800f4b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f466:	6839      	ldr	r1, [r7, #0]
 800f468:	6878      	ldr	r0, [r7, #4]
 800f46a:	f000 fbcb 	bl	800fc04 <USBD_SetAddress>
          break;
 800f46e:	e01f      	b.n	800f4b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f470:	6839      	ldr	r1, [r7, #0]
 800f472:	6878      	ldr	r0, [r7, #4]
 800f474:	f000 fc0a 	bl	800fc8c <USBD_SetConfig>
 800f478:	4603      	mov	r3, r0
 800f47a:	73fb      	strb	r3, [r7, #15]
          break;
 800f47c:	e018      	b.n	800f4b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f47e:	6839      	ldr	r1, [r7, #0]
 800f480:	6878      	ldr	r0, [r7, #4]
 800f482:	f000 fcad 	bl	800fde0 <USBD_GetConfig>
          break;
 800f486:	e013      	b.n	800f4b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f488:	6839      	ldr	r1, [r7, #0]
 800f48a:	6878      	ldr	r0, [r7, #4]
 800f48c:	f000 fcde 	bl	800fe4c <USBD_GetStatus>
          break;
 800f490:	e00e      	b.n	800f4b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f492:	6839      	ldr	r1, [r7, #0]
 800f494:	6878      	ldr	r0, [r7, #4]
 800f496:	f000 fd0d 	bl	800feb4 <USBD_SetFeature>
          break;
 800f49a:	e009      	b.n	800f4b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f49c:	6839      	ldr	r1, [r7, #0]
 800f49e:	6878      	ldr	r0, [r7, #4]
 800f4a0:	f000 fd31 	bl	800ff06 <USBD_ClrFeature>
          break;
 800f4a4:	e004      	b.n	800f4b0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800f4a6:	6839      	ldr	r1, [r7, #0]
 800f4a8:	6878      	ldr	r0, [r7, #4]
 800f4aa:	f000 fd88 	bl	800ffbe <USBD_CtlError>
          break;
 800f4ae:	bf00      	nop
      }
      break;
 800f4b0:	e004      	b.n	800f4bc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800f4b2:	6839      	ldr	r1, [r7, #0]
 800f4b4:	6878      	ldr	r0, [r7, #4]
 800f4b6:	f000 fd82 	bl	800ffbe <USBD_CtlError>
      break;
 800f4ba:	bf00      	nop
  }

  return ret;
 800f4bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4be:	4618      	mov	r0, r3
 800f4c0:	3710      	adds	r7, #16
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	bd80      	pop	{r7, pc}
 800f4c6:	bf00      	nop

0800f4c8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b084      	sub	sp, #16
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
 800f4d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f4d6:	683b      	ldr	r3, [r7, #0]
 800f4d8:	781b      	ldrb	r3, [r3, #0]
 800f4da:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f4de:	2b40      	cmp	r3, #64	@ 0x40
 800f4e0:	d005      	beq.n	800f4ee <USBD_StdItfReq+0x26>
 800f4e2:	2b40      	cmp	r3, #64	@ 0x40
 800f4e4:	d852      	bhi.n	800f58c <USBD_StdItfReq+0xc4>
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d001      	beq.n	800f4ee <USBD_StdItfReq+0x26>
 800f4ea:	2b20      	cmp	r3, #32
 800f4ec:	d14e      	bne.n	800f58c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f4f4:	b2db      	uxtb	r3, r3
 800f4f6:	3b01      	subs	r3, #1
 800f4f8:	2b02      	cmp	r3, #2
 800f4fa:	d840      	bhi.n	800f57e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f4fc:	683b      	ldr	r3, [r7, #0]
 800f4fe:	889b      	ldrh	r3, [r3, #4]
 800f500:	b2db      	uxtb	r3, r3
 800f502:	2b01      	cmp	r3, #1
 800f504:	d836      	bhi.n	800f574 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800f506:	683b      	ldr	r3, [r7, #0]
 800f508:	889b      	ldrh	r3, [r3, #4]
 800f50a:	b2db      	uxtb	r3, r3
 800f50c:	4619      	mov	r1, r3
 800f50e:	6878      	ldr	r0, [r7, #4]
 800f510:	f7ff fedb 	bl	800f2ca <USBD_CoreFindIF>
 800f514:	4603      	mov	r3, r0
 800f516:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f518:	7bbb      	ldrb	r3, [r7, #14]
 800f51a:	2bff      	cmp	r3, #255	@ 0xff
 800f51c:	d01d      	beq.n	800f55a <USBD_StdItfReq+0x92>
 800f51e:	7bbb      	ldrb	r3, [r7, #14]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d11a      	bne.n	800f55a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800f524:	7bba      	ldrb	r2, [r7, #14]
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	32ae      	adds	r2, #174	@ 0xae
 800f52a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f52e:	689b      	ldr	r3, [r3, #8]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d00f      	beq.n	800f554 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800f534:	7bba      	ldrb	r2, [r7, #14]
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f53c:	7bba      	ldrb	r2, [r7, #14]
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	32ae      	adds	r2, #174	@ 0xae
 800f542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f546:	689b      	ldr	r3, [r3, #8]
 800f548:	6839      	ldr	r1, [r7, #0]
 800f54a:	6878      	ldr	r0, [r7, #4]
 800f54c:	4798      	blx	r3
 800f54e:	4603      	mov	r3, r0
 800f550:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f552:	e004      	b.n	800f55e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800f554:	2303      	movs	r3, #3
 800f556:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f558:	e001      	b.n	800f55e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800f55a:	2303      	movs	r3, #3
 800f55c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f55e:	683b      	ldr	r3, [r7, #0]
 800f560:	88db      	ldrh	r3, [r3, #6]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d110      	bne.n	800f588 <USBD_StdItfReq+0xc0>
 800f566:	7bfb      	ldrb	r3, [r7, #15]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d10d      	bne.n	800f588 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f56c:	6878      	ldr	r0, [r7, #4]
 800f56e:	f000 fdfd 	bl	801016c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f572:	e009      	b.n	800f588 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800f574:	6839      	ldr	r1, [r7, #0]
 800f576:	6878      	ldr	r0, [r7, #4]
 800f578:	f000 fd21 	bl	800ffbe <USBD_CtlError>
          break;
 800f57c:	e004      	b.n	800f588 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800f57e:	6839      	ldr	r1, [r7, #0]
 800f580:	6878      	ldr	r0, [r7, #4]
 800f582:	f000 fd1c 	bl	800ffbe <USBD_CtlError>
          break;
 800f586:	e000      	b.n	800f58a <USBD_StdItfReq+0xc2>
          break;
 800f588:	bf00      	nop
      }
      break;
 800f58a:	e004      	b.n	800f596 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800f58c:	6839      	ldr	r1, [r7, #0]
 800f58e:	6878      	ldr	r0, [r7, #4]
 800f590:	f000 fd15 	bl	800ffbe <USBD_CtlError>
      break;
 800f594:	bf00      	nop
  }

  return ret;
 800f596:	7bfb      	ldrb	r3, [r7, #15]
}
 800f598:	4618      	mov	r0, r3
 800f59a:	3710      	adds	r7, #16
 800f59c:	46bd      	mov	sp, r7
 800f59e:	bd80      	pop	{r7, pc}

0800f5a0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b084      	sub	sp, #16
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	6078      	str	r0, [r7, #4]
 800f5a8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	889b      	ldrh	r3, [r3, #4]
 800f5b2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f5b4:	683b      	ldr	r3, [r7, #0]
 800f5b6:	781b      	ldrb	r3, [r3, #0]
 800f5b8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f5bc:	2b40      	cmp	r3, #64	@ 0x40
 800f5be:	d007      	beq.n	800f5d0 <USBD_StdEPReq+0x30>
 800f5c0:	2b40      	cmp	r3, #64	@ 0x40
 800f5c2:	f200 817f 	bhi.w	800f8c4 <USBD_StdEPReq+0x324>
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d02a      	beq.n	800f620 <USBD_StdEPReq+0x80>
 800f5ca:	2b20      	cmp	r3, #32
 800f5cc:	f040 817a 	bne.w	800f8c4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f5d0:	7bbb      	ldrb	r3, [r7, #14]
 800f5d2:	4619      	mov	r1, r3
 800f5d4:	6878      	ldr	r0, [r7, #4]
 800f5d6:	f7ff fe85 	bl	800f2e4 <USBD_CoreFindEP>
 800f5da:	4603      	mov	r3, r0
 800f5dc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f5de:	7b7b      	ldrb	r3, [r7, #13]
 800f5e0:	2bff      	cmp	r3, #255	@ 0xff
 800f5e2:	f000 8174 	beq.w	800f8ce <USBD_StdEPReq+0x32e>
 800f5e6:	7b7b      	ldrb	r3, [r7, #13]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	f040 8170 	bne.w	800f8ce <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800f5ee:	7b7a      	ldrb	r2, [r7, #13]
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800f5f6:	7b7a      	ldrb	r2, [r7, #13]
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	32ae      	adds	r2, #174	@ 0xae
 800f5fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f600:	689b      	ldr	r3, [r3, #8]
 800f602:	2b00      	cmp	r3, #0
 800f604:	f000 8163 	beq.w	800f8ce <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800f608:	7b7a      	ldrb	r2, [r7, #13]
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	32ae      	adds	r2, #174	@ 0xae
 800f60e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f612:	689b      	ldr	r3, [r3, #8]
 800f614:	6839      	ldr	r1, [r7, #0]
 800f616:	6878      	ldr	r0, [r7, #4]
 800f618:	4798      	blx	r3
 800f61a:	4603      	mov	r3, r0
 800f61c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f61e:	e156      	b.n	800f8ce <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f620:	683b      	ldr	r3, [r7, #0]
 800f622:	785b      	ldrb	r3, [r3, #1]
 800f624:	2b03      	cmp	r3, #3
 800f626:	d008      	beq.n	800f63a <USBD_StdEPReq+0x9a>
 800f628:	2b03      	cmp	r3, #3
 800f62a:	f300 8145 	bgt.w	800f8b8 <USBD_StdEPReq+0x318>
 800f62e:	2b00      	cmp	r3, #0
 800f630:	f000 809b 	beq.w	800f76a <USBD_StdEPReq+0x1ca>
 800f634:	2b01      	cmp	r3, #1
 800f636:	d03c      	beq.n	800f6b2 <USBD_StdEPReq+0x112>
 800f638:	e13e      	b.n	800f8b8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f640:	b2db      	uxtb	r3, r3
 800f642:	2b02      	cmp	r3, #2
 800f644:	d002      	beq.n	800f64c <USBD_StdEPReq+0xac>
 800f646:	2b03      	cmp	r3, #3
 800f648:	d016      	beq.n	800f678 <USBD_StdEPReq+0xd8>
 800f64a:	e02c      	b.n	800f6a6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f64c:	7bbb      	ldrb	r3, [r7, #14]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d00d      	beq.n	800f66e <USBD_StdEPReq+0xce>
 800f652:	7bbb      	ldrb	r3, [r7, #14]
 800f654:	2b80      	cmp	r3, #128	@ 0x80
 800f656:	d00a      	beq.n	800f66e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f658:	7bbb      	ldrb	r3, [r7, #14]
 800f65a:	4619      	mov	r1, r3
 800f65c:	6878      	ldr	r0, [r7, #4]
 800f65e:	f006 ff85 	bl	801656c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f662:	2180      	movs	r1, #128	@ 0x80
 800f664:	6878      	ldr	r0, [r7, #4]
 800f666:	f006 ff81 	bl	801656c <USBD_LL_StallEP>
 800f66a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f66c:	e020      	b.n	800f6b0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f66e:	6839      	ldr	r1, [r7, #0]
 800f670:	6878      	ldr	r0, [r7, #4]
 800f672:	f000 fca4 	bl	800ffbe <USBD_CtlError>
              break;
 800f676:	e01b      	b.n	800f6b0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f678:	683b      	ldr	r3, [r7, #0]
 800f67a:	885b      	ldrh	r3, [r3, #2]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d10e      	bne.n	800f69e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f680:	7bbb      	ldrb	r3, [r7, #14]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d00b      	beq.n	800f69e <USBD_StdEPReq+0xfe>
 800f686:	7bbb      	ldrb	r3, [r7, #14]
 800f688:	2b80      	cmp	r3, #128	@ 0x80
 800f68a:	d008      	beq.n	800f69e <USBD_StdEPReq+0xfe>
 800f68c:	683b      	ldr	r3, [r7, #0]
 800f68e:	88db      	ldrh	r3, [r3, #6]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d104      	bne.n	800f69e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f694:	7bbb      	ldrb	r3, [r7, #14]
 800f696:	4619      	mov	r1, r3
 800f698:	6878      	ldr	r0, [r7, #4]
 800f69a:	f006 ff67 	bl	801656c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f69e:	6878      	ldr	r0, [r7, #4]
 800f6a0:	f000 fd64 	bl	801016c <USBD_CtlSendStatus>

              break;
 800f6a4:	e004      	b.n	800f6b0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f6a6:	6839      	ldr	r1, [r7, #0]
 800f6a8:	6878      	ldr	r0, [r7, #4]
 800f6aa:	f000 fc88 	bl	800ffbe <USBD_CtlError>
              break;
 800f6ae:	bf00      	nop
          }
          break;
 800f6b0:	e107      	b.n	800f8c2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f6b8:	b2db      	uxtb	r3, r3
 800f6ba:	2b02      	cmp	r3, #2
 800f6bc:	d002      	beq.n	800f6c4 <USBD_StdEPReq+0x124>
 800f6be:	2b03      	cmp	r3, #3
 800f6c0:	d016      	beq.n	800f6f0 <USBD_StdEPReq+0x150>
 800f6c2:	e04b      	b.n	800f75c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f6c4:	7bbb      	ldrb	r3, [r7, #14]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d00d      	beq.n	800f6e6 <USBD_StdEPReq+0x146>
 800f6ca:	7bbb      	ldrb	r3, [r7, #14]
 800f6cc:	2b80      	cmp	r3, #128	@ 0x80
 800f6ce:	d00a      	beq.n	800f6e6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f6d0:	7bbb      	ldrb	r3, [r7, #14]
 800f6d2:	4619      	mov	r1, r3
 800f6d4:	6878      	ldr	r0, [r7, #4]
 800f6d6:	f006 ff49 	bl	801656c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f6da:	2180      	movs	r1, #128	@ 0x80
 800f6dc:	6878      	ldr	r0, [r7, #4]
 800f6de:	f006 ff45 	bl	801656c <USBD_LL_StallEP>
 800f6e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f6e4:	e040      	b.n	800f768 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f6e6:	6839      	ldr	r1, [r7, #0]
 800f6e8:	6878      	ldr	r0, [r7, #4]
 800f6ea:	f000 fc68 	bl	800ffbe <USBD_CtlError>
              break;
 800f6ee:	e03b      	b.n	800f768 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f6f0:	683b      	ldr	r3, [r7, #0]
 800f6f2:	885b      	ldrh	r3, [r3, #2]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d136      	bne.n	800f766 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f6f8:	7bbb      	ldrb	r3, [r7, #14]
 800f6fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d004      	beq.n	800f70c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f702:	7bbb      	ldrb	r3, [r7, #14]
 800f704:	4619      	mov	r1, r3
 800f706:	6878      	ldr	r0, [r7, #4]
 800f708:	f006 ff4f 	bl	80165aa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f70c:	6878      	ldr	r0, [r7, #4]
 800f70e:	f000 fd2d 	bl	801016c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f712:	7bbb      	ldrb	r3, [r7, #14]
 800f714:	4619      	mov	r1, r3
 800f716:	6878      	ldr	r0, [r7, #4]
 800f718:	f7ff fde4 	bl	800f2e4 <USBD_CoreFindEP>
 800f71c:	4603      	mov	r3, r0
 800f71e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f720:	7b7b      	ldrb	r3, [r7, #13]
 800f722:	2bff      	cmp	r3, #255	@ 0xff
 800f724:	d01f      	beq.n	800f766 <USBD_StdEPReq+0x1c6>
 800f726:	7b7b      	ldrb	r3, [r7, #13]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d11c      	bne.n	800f766 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f72c:	7b7a      	ldrb	r2, [r7, #13]
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f734:	7b7a      	ldrb	r2, [r7, #13]
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	32ae      	adds	r2, #174	@ 0xae
 800f73a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f73e:	689b      	ldr	r3, [r3, #8]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d010      	beq.n	800f766 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f744:	7b7a      	ldrb	r2, [r7, #13]
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	32ae      	adds	r2, #174	@ 0xae
 800f74a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f74e:	689b      	ldr	r3, [r3, #8]
 800f750:	6839      	ldr	r1, [r7, #0]
 800f752:	6878      	ldr	r0, [r7, #4]
 800f754:	4798      	blx	r3
 800f756:	4603      	mov	r3, r0
 800f758:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f75a:	e004      	b.n	800f766 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f75c:	6839      	ldr	r1, [r7, #0]
 800f75e:	6878      	ldr	r0, [r7, #4]
 800f760:	f000 fc2d 	bl	800ffbe <USBD_CtlError>
              break;
 800f764:	e000      	b.n	800f768 <USBD_StdEPReq+0x1c8>
              break;
 800f766:	bf00      	nop
          }
          break;
 800f768:	e0ab      	b.n	800f8c2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f770:	b2db      	uxtb	r3, r3
 800f772:	2b02      	cmp	r3, #2
 800f774:	d002      	beq.n	800f77c <USBD_StdEPReq+0x1dc>
 800f776:	2b03      	cmp	r3, #3
 800f778:	d032      	beq.n	800f7e0 <USBD_StdEPReq+0x240>
 800f77a:	e097      	b.n	800f8ac <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f77c:	7bbb      	ldrb	r3, [r7, #14]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d007      	beq.n	800f792 <USBD_StdEPReq+0x1f2>
 800f782:	7bbb      	ldrb	r3, [r7, #14]
 800f784:	2b80      	cmp	r3, #128	@ 0x80
 800f786:	d004      	beq.n	800f792 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f788:	6839      	ldr	r1, [r7, #0]
 800f78a:	6878      	ldr	r0, [r7, #4]
 800f78c:	f000 fc17 	bl	800ffbe <USBD_CtlError>
                break;
 800f790:	e091      	b.n	800f8b6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f792:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f796:	2b00      	cmp	r3, #0
 800f798:	da0b      	bge.n	800f7b2 <USBD_StdEPReq+0x212>
 800f79a:	7bbb      	ldrb	r3, [r7, #14]
 800f79c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f7a0:	4613      	mov	r3, r2
 800f7a2:	009b      	lsls	r3, r3, #2
 800f7a4:	4413      	add	r3, r2
 800f7a6:	009b      	lsls	r3, r3, #2
 800f7a8:	3310      	adds	r3, #16
 800f7aa:	687a      	ldr	r2, [r7, #4]
 800f7ac:	4413      	add	r3, r2
 800f7ae:	3304      	adds	r3, #4
 800f7b0:	e00b      	b.n	800f7ca <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f7b2:	7bbb      	ldrb	r3, [r7, #14]
 800f7b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f7b8:	4613      	mov	r3, r2
 800f7ba:	009b      	lsls	r3, r3, #2
 800f7bc:	4413      	add	r3, r2
 800f7be:	009b      	lsls	r3, r3, #2
 800f7c0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f7c4:	687a      	ldr	r2, [r7, #4]
 800f7c6:	4413      	add	r3, r2
 800f7c8:	3304      	adds	r3, #4
 800f7ca:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f7cc:	68bb      	ldr	r3, [r7, #8]
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f7d2:	68bb      	ldr	r3, [r7, #8]
 800f7d4:	2202      	movs	r2, #2
 800f7d6:	4619      	mov	r1, r3
 800f7d8:	6878      	ldr	r0, [r7, #4]
 800f7da:	f000 fc6d 	bl	80100b8 <USBD_CtlSendData>
              break;
 800f7de:	e06a      	b.n	800f8b6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f7e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	da11      	bge.n	800f80c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f7e8:	7bbb      	ldrb	r3, [r7, #14]
 800f7ea:	f003 020f 	and.w	r2, r3, #15
 800f7ee:	6879      	ldr	r1, [r7, #4]
 800f7f0:	4613      	mov	r3, r2
 800f7f2:	009b      	lsls	r3, r3, #2
 800f7f4:	4413      	add	r3, r2
 800f7f6:	009b      	lsls	r3, r3, #2
 800f7f8:	440b      	add	r3, r1
 800f7fa:	3324      	adds	r3, #36	@ 0x24
 800f7fc:	881b      	ldrh	r3, [r3, #0]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d117      	bne.n	800f832 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f802:	6839      	ldr	r1, [r7, #0]
 800f804:	6878      	ldr	r0, [r7, #4]
 800f806:	f000 fbda 	bl	800ffbe <USBD_CtlError>
                  break;
 800f80a:	e054      	b.n	800f8b6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f80c:	7bbb      	ldrb	r3, [r7, #14]
 800f80e:	f003 020f 	and.w	r2, r3, #15
 800f812:	6879      	ldr	r1, [r7, #4]
 800f814:	4613      	mov	r3, r2
 800f816:	009b      	lsls	r3, r3, #2
 800f818:	4413      	add	r3, r2
 800f81a:	009b      	lsls	r3, r3, #2
 800f81c:	440b      	add	r3, r1
 800f81e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f822:	881b      	ldrh	r3, [r3, #0]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d104      	bne.n	800f832 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f828:	6839      	ldr	r1, [r7, #0]
 800f82a:	6878      	ldr	r0, [r7, #4]
 800f82c:	f000 fbc7 	bl	800ffbe <USBD_CtlError>
                  break;
 800f830:	e041      	b.n	800f8b6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f832:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f836:	2b00      	cmp	r3, #0
 800f838:	da0b      	bge.n	800f852 <USBD_StdEPReq+0x2b2>
 800f83a:	7bbb      	ldrb	r3, [r7, #14]
 800f83c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f840:	4613      	mov	r3, r2
 800f842:	009b      	lsls	r3, r3, #2
 800f844:	4413      	add	r3, r2
 800f846:	009b      	lsls	r3, r3, #2
 800f848:	3310      	adds	r3, #16
 800f84a:	687a      	ldr	r2, [r7, #4]
 800f84c:	4413      	add	r3, r2
 800f84e:	3304      	adds	r3, #4
 800f850:	e00b      	b.n	800f86a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f852:	7bbb      	ldrb	r3, [r7, #14]
 800f854:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f858:	4613      	mov	r3, r2
 800f85a:	009b      	lsls	r3, r3, #2
 800f85c:	4413      	add	r3, r2
 800f85e:	009b      	lsls	r3, r3, #2
 800f860:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f864:	687a      	ldr	r2, [r7, #4]
 800f866:	4413      	add	r3, r2
 800f868:	3304      	adds	r3, #4
 800f86a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f86c:	7bbb      	ldrb	r3, [r7, #14]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d002      	beq.n	800f878 <USBD_StdEPReq+0x2d8>
 800f872:	7bbb      	ldrb	r3, [r7, #14]
 800f874:	2b80      	cmp	r3, #128	@ 0x80
 800f876:	d103      	bne.n	800f880 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f878:	68bb      	ldr	r3, [r7, #8]
 800f87a:	2200      	movs	r2, #0
 800f87c:	601a      	str	r2, [r3, #0]
 800f87e:	e00e      	b.n	800f89e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f880:	7bbb      	ldrb	r3, [r7, #14]
 800f882:	4619      	mov	r1, r3
 800f884:	6878      	ldr	r0, [r7, #4]
 800f886:	f006 feaf 	bl	80165e8 <USBD_LL_IsStallEP>
 800f88a:	4603      	mov	r3, r0
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d003      	beq.n	800f898 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f890:	68bb      	ldr	r3, [r7, #8]
 800f892:	2201      	movs	r2, #1
 800f894:	601a      	str	r2, [r3, #0]
 800f896:	e002      	b.n	800f89e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800f898:	68bb      	ldr	r3, [r7, #8]
 800f89a:	2200      	movs	r2, #0
 800f89c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f89e:	68bb      	ldr	r3, [r7, #8]
 800f8a0:	2202      	movs	r2, #2
 800f8a2:	4619      	mov	r1, r3
 800f8a4:	6878      	ldr	r0, [r7, #4]
 800f8a6:	f000 fc07 	bl	80100b8 <USBD_CtlSendData>
              break;
 800f8aa:	e004      	b.n	800f8b6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800f8ac:	6839      	ldr	r1, [r7, #0]
 800f8ae:	6878      	ldr	r0, [r7, #4]
 800f8b0:	f000 fb85 	bl	800ffbe <USBD_CtlError>
              break;
 800f8b4:	bf00      	nop
          }
          break;
 800f8b6:	e004      	b.n	800f8c2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800f8b8:	6839      	ldr	r1, [r7, #0]
 800f8ba:	6878      	ldr	r0, [r7, #4]
 800f8bc:	f000 fb7f 	bl	800ffbe <USBD_CtlError>
          break;
 800f8c0:	bf00      	nop
      }
      break;
 800f8c2:	e005      	b.n	800f8d0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800f8c4:	6839      	ldr	r1, [r7, #0]
 800f8c6:	6878      	ldr	r0, [r7, #4]
 800f8c8:	f000 fb79 	bl	800ffbe <USBD_CtlError>
      break;
 800f8cc:	e000      	b.n	800f8d0 <USBD_StdEPReq+0x330>
      break;
 800f8ce:	bf00      	nop
  }

  return ret;
 800f8d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	3710      	adds	r7, #16
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bd80      	pop	{r7, pc}
	...

0800f8dc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b084      	sub	sp, #16
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
 800f8e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f8ee:	2300      	movs	r3, #0
 800f8f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f8f2:	683b      	ldr	r3, [r7, #0]
 800f8f4:	885b      	ldrh	r3, [r3, #2]
 800f8f6:	0a1b      	lsrs	r3, r3, #8
 800f8f8:	b29b      	uxth	r3, r3
 800f8fa:	3b01      	subs	r3, #1
 800f8fc:	2b0e      	cmp	r3, #14
 800f8fe:	f200 8152 	bhi.w	800fba6 <USBD_GetDescriptor+0x2ca>
 800f902:	a201      	add	r2, pc, #4	@ (adr r2, 800f908 <USBD_GetDescriptor+0x2c>)
 800f904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f908:	0800f979 	.word	0x0800f979
 800f90c:	0800f991 	.word	0x0800f991
 800f910:	0800f9d1 	.word	0x0800f9d1
 800f914:	0800fba7 	.word	0x0800fba7
 800f918:	0800fba7 	.word	0x0800fba7
 800f91c:	0800fb47 	.word	0x0800fb47
 800f920:	0800fb73 	.word	0x0800fb73
 800f924:	0800fba7 	.word	0x0800fba7
 800f928:	0800fba7 	.word	0x0800fba7
 800f92c:	0800fba7 	.word	0x0800fba7
 800f930:	0800fba7 	.word	0x0800fba7
 800f934:	0800fba7 	.word	0x0800fba7
 800f938:	0800fba7 	.word	0x0800fba7
 800f93c:	0800fba7 	.word	0x0800fba7
 800f940:	0800f945 	.word	0x0800f945
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f94a:	69db      	ldr	r3, [r3, #28]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d00b      	beq.n	800f968 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f956:	69db      	ldr	r3, [r3, #28]
 800f958:	687a      	ldr	r2, [r7, #4]
 800f95a:	7c12      	ldrb	r2, [r2, #16]
 800f95c:	f107 0108 	add.w	r1, r7, #8
 800f960:	4610      	mov	r0, r2
 800f962:	4798      	blx	r3
 800f964:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f966:	e126      	b.n	800fbb6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f968:	6839      	ldr	r1, [r7, #0]
 800f96a:	6878      	ldr	r0, [r7, #4]
 800f96c:	f000 fb27 	bl	800ffbe <USBD_CtlError>
        err++;
 800f970:	7afb      	ldrb	r3, [r7, #11]
 800f972:	3301      	adds	r3, #1
 800f974:	72fb      	strb	r3, [r7, #11]
      break;
 800f976:	e11e      	b.n	800fbb6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	687a      	ldr	r2, [r7, #4]
 800f982:	7c12      	ldrb	r2, [r2, #16]
 800f984:	f107 0108 	add.w	r1, r7, #8
 800f988:	4610      	mov	r0, r2
 800f98a:	4798      	blx	r3
 800f98c:	60f8      	str	r0, [r7, #12]
      break;
 800f98e:	e112      	b.n	800fbb6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	7c1b      	ldrb	r3, [r3, #16]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d10d      	bne.n	800f9b4 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f99e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9a0:	f107 0208 	add.w	r2, r7, #8
 800f9a4:	4610      	mov	r0, r2
 800f9a6:	4798      	blx	r3
 800f9a8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	3301      	adds	r3, #1
 800f9ae:	2202      	movs	r2, #2
 800f9b0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f9b2:	e100      	b.n	800fbb6 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f9ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f9bc:	f107 0208 	add.w	r2, r7, #8
 800f9c0:	4610      	mov	r0, r2
 800f9c2:	4798      	blx	r3
 800f9c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	3301      	adds	r3, #1
 800f9ca:	2202      	movs	r2, #2
 800f9cc:	701a      	strb	r2, [r3, #0]
      break;
 800f9ce:	e0f2      	b.n	800fbb6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f9d0:	683b      	ldr	r3, [r7, #0]
 800f9d2:	885b      	ldrh	r3, [r3, #2]
 800f9d4:	b2db      	uxtb	r3, r3
 800f9d6:	2b05      	cmp	r3, #5
 800f9d8:	f200 80ac 	bhi.w	800fb34 <USBD_GetDescriptor+0x258>
 800f9dc:	a201      	add	r2, pc, #4	@ (adr r2, 800f9e4 <USBD_GetDescriptor+0x108>)
 800f9de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9e2:	bf00      	nop
 800f9e4:	0800f9fd 	.word	0x0800f9fd
 800f9e8:	0800fa31 	.word	0x0800fa31
 800f9ec:	0800fa65 	.word	0x0800fa65
 800f9f0:	0800fa99 	.word	0x0800fa99
 800f9f4:	0800facd 	.word	0x0800facd
 800f9f8:	0800fb01 	.word	0x0800fb01
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fa02:	685b      	ldr	r3, [r3, #4]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d00b      	beq.n	800fa20 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fa0e:	685b      	ldr	r3, [r3, #4]
 800fa10:	687a      	ldr	r2, [r7, #4]
 800fa12:	7c12      	ldrb	r2, [r2, #16]
 800fa14:	f107 0108 	add.w	r1, r7, #8
 800fa18:	4610      	mov	r0, r2
 800fa1a:	4798      	blx	r3
 800fa1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fa1e:	e091      	b.n	800fb44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fa20:	6839      	ldr	r1, [r7, #0]
 800fa22:	6878      	ldr	r0, [r7, #4]
 800fa24:	f000 facb 	bl	800ffbe <USBD_CtlError>
            err++;
 800fa28:	7afb      	ldrb	r3, [r7, #11]
 800fa2a:	3301      	adds	r3, #1
 800fa2c:	72fb      	strb	r3, [r7, #11]
          break;
 800fa2e:	e089      	b.n	800fb44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fa36:	689b      	ldr	r3, [r3, #8]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d00b      	beq.n	800fa54 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fa42:	689b      	ldr	r3, [r3, #8]
 800fa44:	687a      	ldr	r2, [r7, #4]
 800fa46:	7c12      	ldrb	r2, [r2, #16]
 800fa48:	f107 0108 	add.w	r1, r7, #8
 800fa4c:	4610      	mov	r0, r2
 800fa4e:	4798      	blx	r3
 800fa50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fa52:	e077      	b.n	800fb44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fa54:	6839      	ldr	r1, [r7, #0]
 800fa56:	6878      	ldr	r0, [r7, #4]
 800fa58:	f000 fab1 	bl	800ffbe <USBD_CtlError>
            err++;
 800fa5c:	7afb      	ldrb	r3, [r7, #11]
 800fa5e:	3301      	adds	r3, #1
 800fa60:	72fb      	strb	r3, [r7, #11]
          break;
 800fa62:	e06f      	b.n	800fb44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fa6a:	68db      	ldr	r3, [r3, #12]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d00b      	beq.n	800fa88 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fa76:	68db      	ldr	r3, [r3, #12]
 800fa78:	687a      	ldr	r2, [r7, #4]
 800fa7a:	7c12      	ldrb	r2, [r2, #16]
 800fa7c:	f107 0108 	add.w	r1, r7, #8
 800fa80:	4610      	mov	r0, r2
 800fa82:	4798      	blx	r3
 800fa84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fa86:	e05d      	b.n	800fb44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fa88:	6839      	ldr	r1, [r7, #0]
 800fa8a:	6878      	ldr	r0, [r7, #4]
 800fa8c:	f000 fa97 	bl	800ffbe <USBD_CtlError>
            err++;
 800fa90:	7afb      	ldrb	r3, [r7, #11]
 800fa92:	3301      	adds	r3, #1
 800fa94:	72fb      	strb	r3, [r7, #11]
          break;
 800fa96:	e055      	b.n	800fb44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fa9e:	691b      	ldr	r3, [r3, #16]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d00b      	beq.n	800fabc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800faaa:	691b      	ldr	r3, [r3, #16]
 800faac:	687a      	ldr	r2, [r7, #4]
 800faae:	7c12      	ldrb	r2, [r2, #16]
 800fab0:	f107 0108 	add.w	r1, r7, #8
 800fab4:	4610      	mov	r0, r2
 800fab6:	4798      	blx	r3
 800fab8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800faba:	e043      	b.n	800fb44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fabc:	6839      	ldr	r1, [r7, #0]
 800fabe:	6878      	ldr	r0, [r7, #4]
 800fac0:	f000 fa7d 	bl	800ffbe <USBD_CtlError>
            err++;
 800fac4:	7afb      	ldrb	r3, [r7, #11]
 800fac6:	3301      	adds	r3, #1
 800fac8:	72fb      	strb	r3, [r7, #11]
          break;
 800faca:	e03b      	b.n	800fb44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fad2:	695b      	ldr	r3, [r3, #20]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d00b      	beq.n	800faf0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fade:	695b      	ldr	r3, [r3, #20]
 800fae0:	687a      	ldr	r2, [r7, #4]
 800fae2:	7c12      	ldrb	r2, [r2, #16]
 800fae4:	f107 0108 	add.w	r1, r7, #8
 800fae8:	4610      	mov	r0, r2
 800faea:	4798      	blx	r3
 800faec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800faee:	e029      	b.n	800fb44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800faf0:	6839      	ldr	r1, [r7, #0]
 800faf2:	6878      	ldr	r0, [r7, #4]
 800faf4:	f000 fa63 	bl	800ffbe <USBD_CtlError>
            err++;
 800faf8:	7afb      	ldrb	r3, [r7, #11]
 800fafa:	3301      	adds	r3, #1
 800fafc:	72fb      	strb	r3, [r7, #11]
          break;
 800fafe:	e021      	b.n	800fb44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb06:	699b      	ldr	r3, [r3, #24]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d00b      	beq.n	800fb24 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb12:	699b      	ldr	r3, [r3, #24]
 800fb14:	687a      	ldr	r2, [r7, #4]
 800fb16:	7c12      	ldrb	r2, [r2, #16]
 800fb18:	f107 0108 	add.w	r1, r7, #8
 800fb1c:	4610      	mov	r0, r2
 800fb1e:	4798      	blx	r3
 800fb20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fb22:	e00f      	b.n	800fb44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fb24:	6839      	ldr	r1, [r7, #0]
 800fb26:	6878      	ldr	r0, [r7, #4]
 800fb28:	f000 fa49 	bl	800ffbe <USBD_CtlError>
            err++;
 800fb2c:	7afb      	ldrb	r3, [r7, #11]
 800fb2e:	3301      	adds	r3, #1
 800fb30:	72fb      	strb	r3, [r7, #11]
          break;
 800fb32:	e007      	b.n	800fb44 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800fb34:	6839      	ldr	r1, [r7, #0]
 800fb36:	6878      	ldr	r0, [r7, #4]
 800fb38:	f000 fa41 	bl	800ffbe <USBD_CtlError>
          err++;
 800fb3c:	7afb      	ldrb	r3, [r7, #11]
 800fb3e:	3301      	adds	r3, #1
 800fb40:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800fb42:	bf00      	nop
      }
      break;
 800fb44:	e037      	b.n	800fbb6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	7c1b      	ldrb	r3, [r3, #16]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d109      	bne.n	800fb62 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fb54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fb56:	f107 0208 	add.w	r2, r7, #8
 800fb5a:	4610      	mov	r0, r2
 800fb5c:	4798      	blx	r3
 800fb5e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fb60:	e029      	b.n	800fbb6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fb62:	6839      	ldr	r1, [r7, #0]
 800fb64:	6878      	ldr	r0, [r7, #4]
 800fb66:	f000 fa2a 	bl	800ffbe <USBD_CtlError>
        err++;
 800fb6a:	7afb      	ldrb	r3, [r7, #11]
 800fb6c:	3301      	adds	r3, #1
 800fb6e:	72fb      	strb	r3, [r7, #11]
      break;
 800fb70:	e021      	b.n	800fbb6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	7c1b      	ldrb	r3, [r3, #16]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d10d      	bne.n	800fb96 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fb80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fb82:	f107 0208 	add.w	r2, r7, #8
 800fb86:	4610      	mov	r0, r2
 800fb88:	4798      	blx	r3
 800fb8a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	3301      	adds	r3, #1
 800fb90:	2207      	movs	r2, #7
 800fb92:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fb94:	e00f      	b.n	800fbb6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fb96:	6839      	ldr	r1, [r7, #0]
 800fb98:	6878      	ldr	r0, [r7, #4]
 800fb9a:	f000 fa10 	bl	800ffbe <USBD_CtlError>
        err++;
 800fb9e:	7afb      	ldrb	r3, [r7, #11]
 800fba0:	3301      	adds	r3, #1
 800fba2:	72fb      	strb	r3, [r7, #11]
      break;
 800fba4:	e007      	b.n	800fbb6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800fba6:	6839      	ldr	r1, [r7, #0]
 800fba8:	6878      	ldr	r0, [r7, #4]
 800fbaa:	f000 fa08 	bl	800ffbe <USBD_CtlError>
      err++;
 800fbae:	7afb      	ldrb	r3, [r7, #11]
 800fbb0:	3301      	adds	r3, #1
 800fbb2:	72fb      	strb	r3, [r7, #11]
      break;
 800fbb4:	bf00      	nop
  }

  if (err != 0U)
 800fbb6:	7afb      	ldrb	r3, [r7, #11]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d11e      	bne.n	800fbfa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800fbbc:	683b      	ldr	r3, [r7, #0]
 800fbbe:	88db      	ldrh	r3, [r3, #6]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d016      	beq.n	800fbf2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800fbc4:	893b      	ldrh	r3, [r7, #8]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d00e      	beq.n	800fbe8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800fbca:	683b      	ldr	r3, [r7, #0]
 800fbcc:	88da      	ldrh	r2, [r3, #6]
 800fbce:	893b      	ldrh	r3, [r7, #8]
 800fbd0:	4293      	cmp	r3, r2
 800fbd2:	bf28      	it	cs
 800fbd4:	4613      	movcs	r3, r2
 800fbd6:	b29b      	uxth	r3, r3
 800fbd8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800fbda:	893b      	ldrh	r3, [r7, #8]
 800fbdc:	461a      	mov	r2, r3
 800fbde:	68f9      	ldr	r1, [r7, #12]
 800fbe0:	6878      	ldr	r0, [r7, #4]
 800fbe2:	f000 fa69 	bl	80100b8 <USBD_CtlSendData>
 800fbe6:	e009      	b.n	800fbfc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800fbe8:	6839      	ldr	r1, [r7, #0]
 800fbea:	6878      	ldr	r0, [r7, #4]
 800fbec:	f000 f9e7 	bl	800ffbe <USBD_CtlError>
 800fbf0:	e004      	b.n	800fbfc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800fbf2:	6878      	ldr	r0, [r7, #4]
 800fbf4:	f000 faba 	bl	801016c <USBD_CtlSendStatus>
 800fbf8:	e000      	b.n	800fbfc <USBD_GetDescriptor+0x320>
    return;
 800fbfa:	bf00      	nop
  }
}
 800fbfc:	3710      	adds	r7, #16
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	bd80      	pop	{r7, pc}
 800fc02:	bf00      	nop

0800fc04 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc04:	b580      	push	{r7, lr}
 800fc06:	b084      	sub	sp, #16
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]
 800fc0c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800fc0e:	683b      	ldr	r3, [r7, #0]
 800fc10:	889b      	ldrh	r3, [r3, #4]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d131      	bne.n	800fc7a <USBD_SetAddress+0x76>
 800fc16:	683b      	ldr	r3, [r7, #0]
 800fc18:	88db      	ldrh	r3, [r3, #6]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d12d      	bne.n	800fc7a <USBD_SetAddress+0x76>
 800fc1e:	683b      	ldr	r3, [r7, #0]
 800fc20:	885b      	ldrh	r3, [r3, #2]
 800fc22:	2b7f      	cmp	r3, #127	@ 0x7f
 800fc24:	d829      	bhi.n	800fc7a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800fc26:	683b      	ldr	r3, [r7, #0]
 800fc28:	885b      	ldrh	r3, [r3, #2]
 800fc2a:	b2db      	uxtb	r3, r3
 800fc2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fc30:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fc38:	b2db      	uxtb	r3, r3
 800fc3a:	2b03      	cmp	r3, #3
 800fc3c:	d104      	bne.n	800fc48 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800fc3e:	6839      	ldr	r1, [r7, #0]
 800fc40:	6878      	ldr	r0, [r7, #4]
 800fc42:	f000 f9bc 	bl	800ffbe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fc46:	e01d      	b.n	800fc84 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	7bfa      	ldrb	r2, [r7, #15]
 800fc4c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800fc50:	7bfb      	ldrb	r3, [r7, #15]
 800fc52:	4619      	mov	r1, r3
 800fc54:	6878      	ldr	r0, [r7, #4]
 800fc56:	f006 fcf3 	bl	8016640 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800fc5a:	6878      	ldr	r0, [r7, #4]
 800fc5c:	f000 fa86 	bl	801016c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800fc60:	7bfb      	ldrb	r3, [r7, #15]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d004      	beq.n	800fc70 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	2202      	movs	r2, #2
 800fc6a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fc6e:	e009      	b.n	800fc84 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	2201      	movs	r2, #1
 800fc74:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fc78:	e004      	b.n	800fc84 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800fc7a:	6839      	ldr	r1, [r7, #0]
 800fc7c:	6878      	ldr	r0, [r7, #4]
 800fc7e:	f000 f99e 	bl	800ffbe <USBD_CtlError>
  }
}
 800fc82:	bf00      	nop
 800fc84:	bf00      	nop
 800fc86:	3710      	adds	r7, #16
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	bd80      	pop	{r7, pc}

0800fc8c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc8c:	b580      	push	{r7, lr}
 800fc8e:	b084      	sub	sp, #16
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	6078      	str	r0, [r7, #4]
 800fc94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fc96:	2300      	movs	r3, #0
 800fc98:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800fc9a:	683b      	ldr	r3, [r7, #0]
 800fc9c:	885b      	ldrh	r3, [r3, #2]
 800fc9e:	b2da      	uxtb	r2, r3
 800fca0:	4b4e      	ldr	r3, [pc, #312]	@ (800fddc <USBD_SetConfig+0x150>)
 800fca2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fca4:	4b4d      	ldr	r3, [pc, #308]	@ (800fddc <USBD_SetConfig+0x150>)
 800fca6:	781b      	ldrb	r3, [r3, #0]
 800fca8:	2b01      	cmp	r3, #1
 800fcaa:	d905      	bls.n	800fcb8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800fcac:	6839      	ldr	r1, [r7, #0]
 800fcae:	6878      	ldr	r0, [r7, #4]
 800fcb0:	f000 f985 	bl	800ffbe <USBD_CtlError>
    return USBD_FAIL;
 800fcb4:	2303      	movs	r3, #3
 800fcb6:	e08c      	b.n	800fdd2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fcbe:	b2db      	uxtb	r3, r3
 800fcc0:	2b02      	cmp	r3, #2
 800fcc2:	d002      	beq.n	800fcca <USBD_SetConfig+0x3e>
 800fcc4:	2b03      	cmp	r3, #3
 800fcc6:	d029      	beq.n	800fd1c <USBD_SetConfig+0x90>
 800fcc8:	e075      	b.n	800fdb6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800fcca:	4b44      	ldr	r3, [pc, #272]	@ (800fddc <USBD_SetConfig+0x150>)
 800fccc:	781b      	ldrb	r3, [r3, #0]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d020      	beq.n	800fd14 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800fcd2:	4b42      	ldr	r3, [pc, #264]	@ (800fddc <USBD_SetConfig+0x150>)
 800fcd4:	781b      	ldrb	r3, [r3, #0]
 800fcd6:	461a      	mov	r2, r3
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fcdc:	4b3f      	ldr	r3, [pc, #252]	@ (800fddc <USBD_SetConfig+0x150>)
 800fcde:	781b      	ldrb	r3, [r3, #0]
 800fce0:	4619      	mov	r1, r3
 800fce2:	6878      	ldr	r0, [r7, #4]
 800fce4:	f7fe ffb9 	bl	800ec5a <USBD_SetClassConfig>
 800fce8:	4603      	mov	r3, r0
 800fcea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800fcec:	7bfb      	ldrb	r3, [r7, #15]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d008      	beq.n	800fd04 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800fcf2:	6839      	ldr	r1, [r7, #0]
 800fcf4:	6878      	ldr	r0, [r7, #4]
 800fcf6:	f000 f962 	bl	800ffbe <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	2202      	movs	r2, #2
 800fcfe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fd02:	e065      	b.n	800fdd0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fd04:	6878      	ldr	r0, [r7, #4]
 800fd06:	f000 fa31 	bl	801016c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	2203      	movs	r2, #3
 800fd0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800fd12:	e05d      	b.n	800fdd0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fd14:	6878      	ldr	r0, [r7, #4]
 800fd16:	f000 fa29 	bl	801016c <USBD_CtlSendStatus>
      break;
 800fd1a:	e059      	b.n	800fdd0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800fd1c:	4b2f      	ldr	r3, [pc, #188]	@ (800fddc <USBD_SetConfig+0x150>)
 800fd1e:	781b      	ldrb	r3, [r3, #0]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d112      	bne.n	800fd4a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	2202      	movs	r2, #2
 800fd28:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800fd2c:	4b2b      	ldr	r3, [pc, #172]	@ (800fddc <USBD_SetConfig+0x150>)
 800fd2e:	781b      	ldrb	r3, [r3, #0]
 800fd30:	461a      	mov	r2, r3
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fd36:	4b29      	ldr	r3, [pc, #164]	@ (800fddc <USBD_SetConfig+0x150>)
 800fd38:	781b      	ldrb	r3, [r3, #0]
 800fd3a:	4619      	mov	r1, r3
 800fd3c:	6878      	ldr	r0, [r7, #4]
 800fd3e:	f7fe ffa8 	bl	800ec92 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800fd42:	6878      	ldr	r0, [r7, #4]
 800fd44:	f000 fa12 	bl	801016c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fd48:	e042      	b.n	800fdd0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800fd4a:	4b24      	ldr	r3, [pc, #144]	@ (800fddc <USBD_SetConfig+0x150>)
 800fd4c:	781b      	ldrb	r3, [r3, #0]
 800fd4e:	461a      	mov	r2, r3
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	685b      	ldr	r3, [r3, #4]
 800fd54:	429a      	cmp	r2, r3
 800fd56:	d02a      	beq.n	800fdae <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	685b      	ldr	r3, [r3, #4]
 800fd5c:	b2db      	uxtb	r3, r3
 800fd5e:	4619      	mov	r1, r3
 800fd60:	6878      	ldr	r0, [r7, #4]
 800fd62:	f7fe ff96 	bl	800ec92 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800fd66:	4b1d      	ldr	r3, [pc, #116]	@ (800fddc <USBD_SetConfig+0x150>)
 800fd68:	781b      	ldrb	r3, [r3, #0]
 800fd6a:	461a      	mov	r2, r3
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fd70:	4b1a      	ldr	r3, [pc, #104]	@ (800fddc <USBD_SetConfig+0x150>)
 800fd72:	781b      	ldrb	r3, [r3, #0]
 800fd74:	4619      	mov	r1, r3
 800fd76:	6878      	ldr	r0, [r7, #4]
 800fd78:	f7fe ff6f 	bl	800ec5a <USBD_SetClassConfig>
 800fd7c:	4603      	mov	r3, r0
 800fd7e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800fd80:	7bfb      	ldrb	r3, [r7, #15]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d00f      	beq.n	800fda6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800fd86:	6839      	ldr	r1, [r7, #0]
 800fd88:	6878      	ldr	r0, [r7, #4]
 800fd8a:	f000 f918 	bl	800ffbe <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	685b      	ldr	r3, [r3, #4]
 800fd92:	b2db      	uxtb	r3, r3
 800fd94:	4619      	mov	r1, r3
 800fd96:	6878      	ldr	r0, [r7, #4]
 800fd98:	f7fe ff7b 	bl	800ec92 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	2202      	movs	r2, #2
 800fda0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800fda4:	e014      	b.n	800fdd0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fda6:	6878      	ldr	r0, [r7, #4]
 800fda8:	f000 f9e0 	bl	801016c <USBD_CtlSendStatus>
      break;
 800fdac:	e010      	b.n	800fdd0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fdae:	6878      	ldr	r0, [r7, #4]
 800fdb0:	f000 f9dc 	bl	801016c <USBD_CtlSendStatus>
      break;
 800fdb4:	e00c      	b.n	800fdd0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800fdb6:	6839      	ldr	r1, [r7, #0]
 800fdb8:	6878      	ldr	r0, [r7, #4]
 800fdba:	f000 f900 	bl	800ffbe <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fdbe:	4b07      	ldr	r3, [pc, #28]	@ (800fddc <USBD_SetConfig+0x150>)
 800fdc0:	781b      	ldrb	r3, [r3, #0]
 800fdc2:	4619      	mov	r1, r3
 800fdc4:	6878      	ldr	r0, [r7, #4]
 800fdc6:	f7fe ff64 	bl	800ec92 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800fdca:	2303      	movs	r3, #3
 800fdcc:	73fb      	strb	r3, [r7, #15]
      break;
 800fdce:	bf00      	nop
  }

  return ret;
 800fdd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	3710      	adds	r7, #16
 800fdd6:	46bd      	mov	sp, r7
 800fdd8:	bd80      	pop	{r7, pc}
 800fdda:	bf00      	nop
 800fddc:	240020dc 	.word	0x240020dc

0800fde0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fde0:	b580      	push	{r7, lr}
 800fde2:	b082      	sub	sp, #8
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	6078      	str	r0, [r7, #4]
 800fde8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800fdea:	683b      	ldr	r3, [r7, #0]
 800fdec:	88db      	ldrh	r3, [r3, #6]
 800fdee:	2b01      	cmp	r3, #1
 800fdf0:	d004      	beq.n	800fdfc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fdf2:	6839      	ldr	r1, [r7, #0]
 800fdf4:	6878      	ldr	r0, [r7, #4]
 800fdf6:	f000 f8e2 	bl	800ffbe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800fdfa:	e023      	b.n	800fe44 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fe02:	b2db      	uxtb	r3, r3
 800fe04:	2b02      	cmp	r3, #2
 800fe06:	dc02      	bgt.n	800fe0e <USBD_GetConfig+0x2e>
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	dc03      	bgt.n	800fe14 <USBD_GetConfig+0x34>
 800fe0c:	e015      	b.n	800fe3a <USBD_GetConfig+0x5a>
 800fe0e:	2b03      	cmp	r3, #3
 800fe10:	d00b      	beq.n	800fe2a <USBD_GetConfig+0x4a>
 800fe12:	e012      	b.n	800fe3a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	2200      	movs	r2, #0
 800fe18:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	3308      	adds	r3, #8
 800fe1e:	2201      	movs	r2, #1
 800fe20:	4619      	mov	r1, r3
 800fe22:	6878      	ldr	r0, [r7, #4]
 800fe24:	f000 f948 	bl	80100b8 <USBD_CtlSendData>
        break;
 800fe28:	e00c      	b.n	800fe44 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	3304      	adds	r3, #4
 800fe2e:	2201      	movs	r2, #1
 800fe30:	4619      	mov	r1, r3
 800fe32:	6878      	ldr	r0, [r7, #4]
 800fe34:	f000 f940 	bl	80100b8 <USBD_CtlSendData>
        break;
 800fe38:	e004      	b.n	800fe44 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800fe3a:	6839      	ldr	r1, [r7, #0]
 800fe3c:	6878      	ldr	r0, [r7, #4]
 800fe3e:	f000 f8be 	bl	800ffbe <USBD_CtlError>
        break;
 800fe42:	bf00      	nop
}
 800fe44:	bf00      	nop
 800fe46:	3708      	adds	r7, #8
 800fe48:	46bd      	mov	sp, r7
 800fe4a:	bd80      	pop	{r7, pc}

0800fe4c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe4c:	b580      	push	{r7, lr}
 800fe4e:	b082      	sub	sp, #8
 800fe50:	af00      	add	r7, sp, #0
 800fe52:	6078      	str	r0, [r7, #4]
 800fe54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fe5c:	b2db      	uxtb	r3, r3
 800fe5e:	3b01      	subs	r3, #1
 800fe60:	2b02      	cmp	r3, #2
 800fe62:	d81e      	bhi.n	800fea2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800fe64:	683b      	ldr	r3, [r7, #0]
 800fe66:	88db      	ldrh	r3, [r3, #6]
 800fe68:	2b02      	cmp	r3, #2
 800fe6a:	d004      	beq.n	800fe76 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800fe6c:	6839      	ldr	r1, [r7, #0]
 800fe6e:	6878      	ldr	r0, [r7, #4]
 800fe70:	f000 f8a5 	bl	800ffbe <USBD_CtlError>
        break;
 800fe74:	e01a      	b.n	800feac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	2201      	movs	r2, #1
 800fe7a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d005      	beq.n	800fe92 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	68db      	ldr	r3, [r3, #12]
 800fe8a:	f043 0202 	orr.w	r2, r3, #2
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	330c      	adds	r3, #12
 800fe96:	2202      	movs	r2, #2
 800fe98:	4619      	mov	r1, r3
 800fe9a:	6878      	ldr	r0, [r7, #4]
 800fe9c:	f000 f90c 	bl	80100b8 <USBD_CtlSendData>
      break;
 800fea0:	e004      	b.n	800feac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800fea2:	6839      	ldr	r1, [r7, #0]
 800fea4:	6878      	ldr	r0, [r7, #4]
 800fea6:	f000 f88a 	bl	800ffbe <USBD_CtlError>
      break;
 800feaa:	bf00      	nop
  }
}
 800feac:	bf00      	nop
 800feae:	3708      	adds	r7, #8
 800feb0:	46bd      	mov	sp, r7
 800feb2:	bd80      	pop	{r7, pc}

0800feb4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b082      	sub	sp, #8
 800feb8:	af00      	add	r7, sp, #0
 800feba:	6078      	str	r0, [r7, #4]
 800febc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800febe:	683b      	ldr	r3, [r7, #0]
 800fec0:	885b      	ldrh	r3, [r3, #2]
 800fec2:	2b01      	cmp	r3, #1
 800fec4:	d107      	bne.n	800fed6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	2201      	movs	r2, #1
 800feca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800fece:	6878      	ldr	r0, [r7, #4]
 800fed0:	f000 f94c 	bl	801016c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800fed4:	e013      	b.n	800fefe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800fed6:	683b      	ldr	r3, [r7, #0]
 800fed8:	885b      	ldrh	r3, [r3, #2]
 800feda:	2b02      	cmp	r3, #2
 800fedc:	d10b      	bne.n	800fef6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800fede:	683b      	ldr	r3, [r7, #0]
 800fee0:	889b      	ldrh	r3, [r3, #4]
 800fee2:	0a1b      	lsrs	r3, r3, #8
 800fee4:	b29b      	uxth	r3, r3
 800fee6:	b2da      	uxtb	r2, r3
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800feee:	6878      	ldr	r0, [r7, #4]
 800fef0:	f000 f93c 	bl	801016c <USBD_CtlSendStatus>
}
 800fef4:	e003      	b.n	800fefe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800fef6:	6839      	ldr	r1, [r7, #0]
 800fef8:	6878      	ldr	r0, [r7, #4]
 800fefa:	f000 f860 	bl	800ffbe <USBD_CtlError>
}
 800fefe:	bf00      	nop
 800ff00:	3708      	adds	r7, #8
 800ff02:	46bd      	mov	sp, r7
 800ff04:	bd80      	pop	{r7, pc}

0800ff06 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff06:	b580      	push	{r7, lr}
 800ff08:	b082      	sub	sp, #8
 800ff0a:	af00      	add	r7, sp, #0
 800ff0c:	6078      	str	r0, [r7, #4]
 800ff0e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ff16:	b2db      	uxtb	r3, r3
 800ff18:	3b01      	subs	r3, #1
 800ff1a:	2b02      	cmp	r3, #2
 800ff1c:	d80b      	bhi.n	800ff36 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ff1e:	683b      	ldr	r3, [r7, #0]
 800ff20:	885b      	ldrh	r3, [r3, #2]
 800ff22:	2b01      	cmp	r3, #1
 800ff24:	d10c      	bne.n	800ff40 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	2200      	movs	r2, #0
 800ff2a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ff2e:	6878      	ldr	r0, [r7, #4]
 800ff30:	f000 f91c 	bl	801016c <USBD_CtlSendStatus>
      }
      break;
 800ff34:	e004      	b.n	800ff40 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ff36:	6839      	ldr	r1, [r7, #0]
 800ff38:	6878      	ldr	r0, [r7, #4]
 800ff3a:	f000 f840 	bl	800ffbe <USBD_CtlError>
      break;
 800ff3e:	e000      	b.n	800ff42 <USBD_ClrFeature+0x3c>
      break;
 800ff40:	bf00      	nop
  }
}
 800ff42:	bf00      	nop
 800ff44:	3708      	adds	r7, #8
 800ff46:	46bd      	mov	sp, r7
 800ff48:	bd80      	pop	{r7, pc}

0800ff4a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ff4a:	b580      	push	{r7, lr}
 800ff4c:	b084      	sub	sp, #16
 800ff4e:	af00      	add	r7, sp, #0
 800ff50:	6078      	str	r0, [r7, #4]
 800ff52:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ff54:	683b      	ldr	r3, [r7, #0]
 800ff56:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	781a      	ldrb	r2, [r3, #0]
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	3301      	adds	r3, #1
 800ff64:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	781a      	ldrb	r2, [r3, #0]
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	3301      	adds	r3, #1
 800ff72:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ff74:	68f8      	ldr	r0, [r7, #12]
 800ff76:	f7ff fa16 	bl	800f3a6 <SWAPBYTE>
 800ff7a:	4603      	mov	r3, r0
 800ff7c:	461a      	mov	r2, r3
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	3301      	adds	r3, #1
 800ff86:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	3301      	adds	r3, #1
 800ff8c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ff8e:	68f8      	ldr	r0, [r7, #12]
 800ff90:	f7ff fa09 	bl	800f3a6 <SWAPBYTE>
 800ff94:	4603      	mov	r3, r0
 800ff96:	461a      	mov	r2, r3
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	3301      	adds	r3, #1
 800ffa0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	3301      	adds	r3, #1
 800ffa6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ffa8:	68f8      	ldr	r0, [r7, #12]
 800ffaa:	f7ff f9fc 	bl	800f3a6 <SWAPBYTE>
 800ffae:	4603      	mov	r3, r0
 800ffb0:	461a      	mov	r2, r3
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	80da      	strh	r2, [r3, #6]
}
 800ffb6:	bf00      	nop
 800ffb8:	3710      	adds	r7, #16
 800ffba:	46bd      	mov	sp, r7
 800ffbc:	bd80      	pop	{r7, pc}

0800ffbe <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ffbe:	b580      	push	{r7, lr}
 800ffc0:	b082      	sub	sp, #8
 800ffc2:	af00      	add	r7, sp, #0
 800ffc4:	6078      	str	r0, [r7, #4]
 800ffc6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ffc8:	2180      	movs	r1, #128	@ 0x80
 800ffca:	6878      	ldr	r0, [r7, #4]
 800ffcc:	f006 face 	bl	801656c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ffd0:	2100      	movs	r1, #0
 800ffd2:	6878      	ldr	r0, [r7, #4]
 800ffd4:	f006 faca 	bl	801656c <USBD_LL_StallEP>
}
 800ffd8:	bf00      	nop
 800ffda:	3708      	adds	r7, #8
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	bd80      	pop	{r7, pc}

0800ffe0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b086      	sub	sp, #24
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	60f8      	str	r0, [r7, #12]
 800ffe8:	60b9      	str	r1, [r7, #8]
 800ffea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ffec:	2300      	movs	r3, #0
 800ffee:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d042      	beq.n	801007c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800fffa:	6938      	ldr	r0, [r7, #16]
 800fffc:	f000 f842 	bl	8010084 <USBD_GetLen>
 8010000:	4603      	mov	r3, r0
 8010002:	3301      	adds	r3, #1
 8010004:	005b      	lsls	r3, r3, #1
 8010006:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801000a:	d808      	bhi.n	801001e <USBD_GetString+0x3e>
 801000c:	6938      	ldr	r0, [r7, #16]
 801000e:	f000 f839 	bl	8010084 <USBD_GetLen>
 8010012:	4603      	mov	r3, r0
 8010014:	3301      	adds	r3, #1
 8010016:	b29b      	uxth	r3, r3
 8010018:	005b      	lsls	r3, r3, #1
 801001a:	b29a      	uxth	r2, r3
 801001c:	e001      	b.n	8010022 <USBD_GetString+0x42>
 801001e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010026:	7dfb      	ldrb	r3, [r7, #23]
 8010028:	68ba      	ldr	r2, [r7, #8]
 801002a:	4413      	add	r3, r2
 801002c:	687a      	ldr	r2, [r7, #4]
 801002e:	7812      	ldrb	r2, [r2, #0]
 8010030:	701a      	strb	r2, [r3, #0]
  idx++;
 8010032:	7dfb      	ldrb	r3, [r7, #23]
 8010034:	3301      	adds	r3, #1
 8010036:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010038:	7dfb      	ldrb	r3, [r7, #23]
 801003a:	68ba      	ldr	r2, [r7, #8]
 801003c:	4413      	add	r3, r2
 801003e:	2203      	movs	r2, #3
 8010040:	701a      	strb	r2, [r3, #0]
  idx++;
 8010042:	7dfb      	ldrb	r3, [r7, #23]
 8010044:	3301      	adds	r3, #1
 8010046:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010048:	e013      	b.n	8010072 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 801004a:	7dfb      	ldrb	r3, [r7, #23]
 801004c:	68ba      	ldr	r2, [r7, #8]
 801004e:	4413      	add	r3, r2
 8010050:	693a      	ldr	r2, [r7, #16]
 8010052:	7812      	ldrb	r2, [r2, #0]
 8010054:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010056:	693b      	ldr	r3, [r7, #16]
 8010058:	3301      	adds	r3, #1
 801005a:	613b      	str	r3, [r7, #16]
    idx++;
 801005c:	7dfb      	ldrb	r3, [r7, #23]
 801005e:	3301      	adds	r3, #1
 8010060:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010062:	7dfb      	ldrb	r3, [r7, #23]
 8010064:	68ba      	ldr	r2, [r7, #8]
 8010066:	4413      	add	r3, r2
 8010068:	2200      	movs	r2, #0
 801006a:	701a      	strb	r2, [r3, #0]
    idx++;
 801006c:	7dfb      	ldrb	r3, [r7, #23]
 801006e:	3301      	adds	r3, #1
 8010070:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010072:	693b      	ldr	r3, [r7, #16]
 8010074:	781b      	ldrb	r3, [r3, #0]
 8010076:	2b00      	cmp	r3, #0
 8010078:	d1e7      	bne.n	801004a <USBD_GetString+0x6a>
 801007a:	e000      	b.n	801007e <USBD_GetString+0x9e>
    return;
 801007c:	bf00      	nop
  }
}
 801007e:	3718      	adds	r7, #24
 8010080:	46bd      	mov	sp, r7
 8010082:	bd80      	pop	{r7, pc}

08010084 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010084:	b480      	push	{r7}
 8010086:	b085      	sub	sp, #20
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801008c:	2300      	movs	r3, #0
 801008e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010094:	e005      	b.n	80100a2 <USBD_GetLen+0x1e>
  {
    len++;
 8010096:	7bfb      	ldrb	r3, [r7, #15]
 8010098:	3301      	adds	r3, #1
 801009a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801009c:	68bb      	ldr	r3, [r7, #8]
 801009e:	3301      	adds	r3, #1
 80100a0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80100a2:	68bb      	ldr	r3, [r7, #8]
 80100a4:	781b      	ldrb	r3, [r3, #0]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d1f5      	bne.n	8010096 <USBD_GetLen+0x12>
  }

  return len;
 80100aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80100ac:	4618      	mov	r0, r3
 80100ae:	3714      	adds	r7, #20
 80100b0:	46bd      	mov	sp, r7
 80100b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b6:	4770      	bx	lr

080100b8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80100b8:	b580      	push	{r7, lr}
 80100ba:	b084      	sub	sp, #16
 80100bc:	af00      	add	r7, sp, #0
 80100be:	60f8      	str	r0, [r7, #12]
 80100c0:	60b9      	str	r1, [r7, #8]
 80100c2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	2202      	movs	r2, #2
 80100c8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	687a      	ldr	r2, [r7, #4]
 80100d0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	687a      	ldr	r2, [r7, #4]
 80100d6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	68ba      	ldr	r2, [r7, #8]
 80100dc:	2100      	movs	r1, #0
 80100de:	68f8      	ldr	r0, [r7, #12]
 80100e0:	f006 facd 	bl	801667e <USBD_LL_Transmit>

  return USBD_OK;
 80100e4:	2300      	movs	r3, #0
}
 80100e6:	4618      	mov	r0, r3
 80100e8:	3710      	adds	r7, #16
 80100ea:	46bd      	mov	sp, r7
 80100ec:	bd80      	pop	{r7, pc}

080100ee <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80100ee:	b580      	push	{r7, lr}
 80100f0:	b084      	sub	sp, #16
 80100f2:	af00      	add	r7, sp, #0
 80100f4:	60f8      	str	r0, [r7, #12]
 80100f6:	60b9      	str	r1, [r7, #8]
 80100f8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	68ba      	ldr	r2, [r7, #8]
 80100fe:	2100      	movs	r1, #0
 8010100:	68f8      	ldr	r0, [r7, #12]
 8010102:	f006 fabc 	bl	801667e <USBD_LL_Transmit>

  return USBD_OK;
 8010106:	2300      	movs	r3, #0
}
 8010108:	4618      	mov	r0, r3
 801010a:	3710      	adds	r7, #16
 801010c:	46bd      	mov	sp, r7
 801010e:	bd80      	pop	{r7, pc}

08010110 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8010110:	b580      	push	{r7, lr}
 8010112:	b084      	sub	sp, #16
 8010114:	af00      	add	r7, sp, #0
 8010116:	60f8      	str	r0, [r7, #12]
 8010118:	60b9      	str	r1, [r7, #8]
 801011a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	2203      	movs	r2, #3
 8010120:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	687a      	ldr	r2, [r7, #4]
 8010128:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	687a      	ldr	r2, [r7, #4]
 8010130:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	68ba      	ldr	r2, [r7, #8]
 8010138:	2100      	movs	r1, #0
 801013a:	68f8      	ldr	r0, [r7, #12]
 801013c:	f006 fac0 	bl	80166c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010140:	2300      	movs	r3, #0
}
 8010142:	4618      	mov	r0, r3
 8010144:	3710      	adds	r7, #16
 8010146:	46bd      	mov	sp, r7
 8010148:	bd80      	pop	{r7, pc}

0801014a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801014a:	b580      	push	{r7, lr}
 801014c:	b084      	sub	sp, #16
 801014e:	af00      	add	r7, sp, #0
 8010150:	60f8      	str	r0, [r7, #12]
 8010152:	60b9      	str	r1, [r7, #8]
 8010154:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	68ba      	ldr	r2, [r7, #8]
 801015a:	2100      	movs	r1, #0
 801015c:	68f8      	ldr	r0, [r7, #12]
 801015e:	f006 faaf 	bl	80166c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010162:	2300      	movs	r3, #0
}
 8010164:	4618      	mov	r0, r3
 8010166:	3710      	adds	r7, #16
 8010168:	46bd      	mov	sp, r7
 801016a:	bd80      	pop	{r7, pc}

0801016c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801016c:	b580      	push	{r7, lr}
 801016e:	b082      	sub	sp, #8
 8010170:	af00      	add	r7, sp, #0
 8010172:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	2204      	movs	r2, #4
 8010178:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801017c:	2300      	movs	r3, #0
 801017e:	2200      	movs	r2, #0
 8010180:	2100      	movs	r1, #0
 8010182:	6878      	ldr	r0, [r7, #4]
 8010184:	f006 fa7b 	bl	801667e <USBD_LL_Transmit>

  return USBD_OK;
 8010188:	2300      	movs	r3, #0
}
 801018a:	4618      	mov	r0, r3
 801018c:	3708      	adds	r7, #8
 801018e:	46bd      	mov	sp, r7
 8010190:	bd80      	pop	{r7, pc}

08010192 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010192:	b580      	push	{r7, lr}
 8010194:	b082      	sub	sp, #8
 8010196:	af00      	add	r7, sp, #0
 8010198:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	2205      	movs	r2, #5
 801019e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80101a2:	2300      	movs	r3, #0
 80101a4:	2200      	movs	r2, #0
 80101a6:	2100      	movs	r1, #0
 80101a8:	6878      	ldr	r0, [r7, #4]
 80101aa:	f006 fa89 	bl	80166c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80101ae:	2300      	movs	r3, #0
}
 80101b0:	4618      	mov	r0, r3
 80101b2:	3708      	adds	r7, #8
 80101b4:	46bd      	mov	sp, r7
 80101b6:	bd80      	pop	{r7, pc}

080101b8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80101b8:	b580      	push	{r7, lr}
 80101ba:	b084      	sub	sp, #16
 80101bc:	af00      	add	r7, sp, #0
 80101be:	4603      	mov	r3, r0
 80101c0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80101c2:	79fb      	ldrb	r3, [r7, #7]
 80101c4:	4a08      	ldr	r2, [pc, #32]	@ (80101e8 <disk_status+0x30>)
 80101c6:	009b      	lsls	r3, r3, #2
 80101c8:	4413      	add	r3, r2
 80101ca:	685b      	ldr	r3, [r3, #4]
 80101cc:	685b      	ldr	r3, [r3, #4]
 80101ce:	79fa      	ldrb	r2, [r7, #7]
 80101d0:	4905      	ldr	r1, [pc, #20]	@ (80101e8 <disk_status+0x30>)
 80101d2:	440a      	add	r2, r1
 80101d4:	7b12      	ldrb	r2, [r2, #12]
 80101d6:	4610      	mov	r0, r2
 80101d8:	4798      	blx	r3
 80101da:	4603      	mov	r3, r0
 80101dc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80101de:	7bfb      	ldrb	r3, [r7, #15]
}
 80101e0:	4618      	mov	r0, r3
 80101e2:	3710      	adds	r7, #16
 80101e4:	46bd      	mov	sp, r7
 80101e6:	bd80      	pop	{r7, pc}
 80101e8:	2400212c 	.word	0x2400212c

080101ec <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b084      	sub	sp, #16
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	4603      	mov	r3, r0
 80101f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80101f6:	2300      	movs	r3, #0
 80101f8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80101fa:	79fb      	ldrb	r3, [r7, #7]
 80101fc:	4a0e      	ldr	r2, [pc, #56]	@ (8010238 <disk_initialize+0x4c>)
 80101fe:	5cd3      	ldrb	r3, [r2, r3]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d114      	bne.n	801022e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010204:	79fb      	ldrb	r3, [r7, #7]
 8010206:	4a0c      	ldr	r2, [pc, #48]	@ (8010238 <disk_initialize+0x4c>)
 8010208:	009b      	lsls	r3, r3, #2
 801020a:	4413      	add	r3, r2
 801020c:	685b      	ldr	r3, [r3, #4]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	79fa      	ldrb	r2, [r7, #7]
 8010212:	4909      	ldr	r1, [pc, #36]	@ (8010238 <disk_initialize+0x4c>)
 8010214:	440a      	add	r2, r1
 8010216:	7b12      	ldrb	r2, [r2, #12]
 8010218:	4610      	mov	r0, r2
 801021a:	4798      	blx	r3
 801021c:	4603      	mov	r3, r0
 801021e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8010220:	7bfb      	ldrb	r3, [r7, #15]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d103      	bne.n	801022e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8010226:	79fb      	ldrb	r3, [r7, #7]
 8010228:	4a03      	ldr	r2, [pc, #12]	@ (8010238 <disk_initialize+0x4c>)
 801022a:	2101      	movs	r1, #1
 801022c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 801022e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010230:	4618      	mov	r0, r3
 8010232:	3710      	adds	r7, #16
 8010234:	46bd      	mov	sp, r7
 8010236:	bd80      	pop	{r7, pc}
 8010238:	2400212c 	.word	0x2400212c

0801023c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801023c:	b590      	push	{r4, r7, lr}
 801023e:	b087      	sub	sp, #28
 8010240:	af00      	add	r7, sp, #0
 8010242:	60b9      	str	r1, [r7, #8]
 8010244:	607a      	str	r2, [r7, #4]
 8010246:	603b      	str	r3, [r7, #0]
 8010248:	4603      	mov	r3, r0
 801024a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801024c:	7bfb      	ldrb	r3, [r7, #15]
 801024e:	4a0a      	ldr	r2, [pc, #40]	@ (8010278 <disk_read+0x3c>)
 8010250:	009b      	lsls	r3, r3, #2
 8010252:	4413      	add	r3, r2
 8010254:	685b      	ldr	r3, [r3, #4]
 8010256:	689c      	ldr	r4, [r3, #8]
 8010258:	7bfb      	ldrb	r3, [r7, #15]
 801025a:	4a07      	ldr	r2, [pc, #28]	@ (8010278 <disk_read+0x3c>)
 801025c:	4413      	add	r3, r2
 801025e:	7b18      	ldrb	r0, [r3, #12]
 8010260:	683b      	ldr	r3, [r7, #0]
 8010262:	687a      	ldr	r2, [r7, #4]
 8010264:	68b9      	ldr	r1, [r7, #8]
 8010266:	47a0      	blx	r4
 8010268:	4603      	mov	r3, r0
 801026a:	75fb      	strb	r3, [r7, #23]
  return res;
 801026c:	7dfb      	ldrb	r3, [r7, #23]
}
 801026e:	4618      	mov	r0, r3
 8010270:	371c      	adds	r7, #28
 8010272:	46bd      	mov	sp, r7
 8010274:	bd90      	pop	{r4, r7, pc}
 8010276:	bf00      	nop
 8010278:	2400212c 	.word	0x2400212c

0801027c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801027c:	b590      	push	{r4, r7, lr}
 801027e:	b087      	sub	sp, #28
 8010280:	af00      	add	r7, sp, #0
 8010282:	60b9      	str	r1, [r7, #8]
 8010284:	607a      	str	r2, [r7, #4]
 8010286:	603b      	str	r3, [r7, #0]
 8010288:	4603      	mov	r3, r0
 801028a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801028c:	7bfb      	ldrb	r3, [r7, #15]
 801028e:	4a0a      	ldr	r2, [pc, #40]	@ (80102b8 <disk_write+0x3c>)
 8010290:	009b      	lsls	r3, r3, #2
 8010292:	4413      	add	r3, r2
 8010294:	685b      	ldr	r3, [r3, #4]
 8010296:	68dc      	ldr	r4, [r3, #12]
 8010298:	7bfb      	ldrb	r3, [r7, #15]
 801029a:	4a07      	ldr	r2, [pc, #28]	@ (80102b8 <disk_write+0x3c>)
 801029c:	4413      	add	r3, r2
 801029e:	7b18      	ldrb	r0, [r3, #12]
 80102a0:	683b      	ldr	r3, [r7, #0]
 80102a2:	687a      	ldr	r2, [r7, #4]
 80102a4:	68b9      	ldr	r1, [r7, #8]
 80102a6:	47a0      	blx	r4
 80102a8:	4603      	mov	r3, r0
 80102aa:	75fb      	strb	r3, [r7, #23]
  return res;
 80102ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80102ae:	4618      	mov	r0, r3
 80102b0:	371c      	adds	r7, #28
 80102b2:	46bd      	mov	sp, r7
 80102b4:	bd90      	pop	{r4, r7, pc}
 80102b6:	bf00      	nop
 80102b8:	2400212c 	.word	0x2400212c

080102bc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80102bc:	b580      	push	{r7, lr}
 80102be:	b084      	sub	sp, #16
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	4603      	mov	r3, r0
 80102c4:	603a      	str	r2, [r7, #0]
 80102c6:	71fb      	strb	r3, [r7, #7]
 80102c8:	460b      	mov	r3, r1
 80102ca:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80102cc:	79fb      	ldrb	r3, [r7, #7]
 80102ce:	4a09      	ldr	r2, [pc, #36]	@ (80102f4 <disk_ioctl+0x38>)
 80102d0:	009b      	lsls	r3, r3, #2
 80102d2:	4413      	add	r3, r2
 80102d4:	685b      	ldr	r3, [r3, #4]
 80102d6:	691b      	ldr	r3, [r3, #16]
 80102d8:	79fa      	ldrb	r2, [r7, #7]
 80102da:	4906      	ldr	r1, [pc, #24]	@ (80102f4 <disk_ioctl+0x38>)
 80102dc:	440a      	add	r2, r1
 80102de:	7b10      	ldrb	r0, [r2, #12]
 80102e0:	79b9      	ldrb	r1, [r7, #6]
 80102e2:	683a      	ldr	r2, [r7, #0]
 80102e4:	4798      	blx	r3
 80102e6:	4603      	mov	r3, r0
 80102e8:	73fb      	strb	r3, [r7, #15]
  return res;
 80102ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80102ec:	4618      	mov	r0, r3
 80102ee:	3710      	adds	r7, #16
 80102f0:	46bd      	mov	sp, r7
 80102f2:	bd80      	pop	{r7, pc}
 80102f4:	2400212c 	.word	0x2400212c

080102f8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
 80102f8:	b480      	push	{r7}
 80102fa:	af00      	add	r7, sp, #0
  return 0;
 80102fc:	2300      	movs	r3, #0
}
 80102fe:	4618      	mov	r0, r3
 8010300:	46bd      	mov	sp, r7
 8010302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010306:	4770      	bx	lr

08010308 <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010308:	b480      	push	{r7}
 801030a:	b085      	sub	sp, #20
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	3301      	adds	r3, #1
 8010314:	781b      	ldrb	r3, [r3, #0]
 8010316:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010318:	89fb      	ldrh	r3, [r7, #14]
 801031a:	021b      	lsls	r3, r3, #8
 801031c:	b21a      	sxth	r2, r3
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	781b      	ldrb	r3, [r3, #0]
 8010322:	b21b      	sxth	r3, r3
 8010324:	4313      	orrs	r3, r2
 8010326:	b21b      	sxth	r3, r3
 8010328:	81fb      	strh	r3, [r7, #14]
	return rv;
 801032a:	89fb      	ldrh	r3, [r7, #14]
}
 801032c:	4618      	mov	r0, r3
 801032e:	3714      	adds	r7, #20
 8010330:	46bd      	mov	sp, r7
 8010332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010336:	4770      	bx	lr

08010338 <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010338:	b480      	push	{r7}
 801033a:	b085      	sub	sp, #20
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	3303      	adds	r3, #3
 8010344:	781b      	ldrb	r3, [r3, #0]
 8010346:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	021b      	lsls	r3, r3, #8
 801034c:	687a      	ldr	r2, [r7, #4]
 801034e:	3202      	adds	r2, #2
 8010350:	7812      	ldrb	r2, [r2, #0]
 8010352:	4313      	orrs	r3, r2
 8010354:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	021b      	lsls	r3, r3, #8
 801035a:	687a      	ldr	r2, [r7, #4]
 801035c:	3201      	adds	r2, #1
 801035e:	7812      	ldrb	r2, [r2, #0]
 8010360:	4313      	orrs	r3, r2
 8010362:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	021b      	lsls	r3, r3, #8
 8010368:	687a      	ldr	r2, [r7, #4]
 801036a:	7812      	ldrb	r2, [r2, #0]
 801036c:	4313      	orrs	r3, r2
 801036e:	60fb      	str	r3, [r7, #12]
	return rv;
 8010370:	68fb      	ldr	r3, [r7, #12]
}
 8010372:	4618      	mov	r0, r3
 8010374:	3714      	adds	r7, #20
 8010376:	46bd      	mov	sp, r7
 8010378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801037c:	4770      	bx	lr

0801037e <ld_qword>:

#if FF_FS_EXFAT
static QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 801037e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8010382:	b09d      	sub	sp, #116	@ 0x74
 8010384:	af00      	add	r7, sp, #0
 8010386:	6678      	str	r0, [r7, #100]	@ 0x64
	QWORD rv;

	rv = ptr[7];
 8010388:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801038a:	3307      	adds	r3, #7
 801038c:	781b      	ldrb	r3, [r3, #0]
 801038e:	b2db      	uxtb	r3, r3
 8010390:	2200      	movs	r2, #0
 8010392:	469a      	mov	sl, r3
 8010394:	4693      	mov	fp, r2
 8010396:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[6];
 801039a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 801039e:	f04f 0000 	mov.w	r0, #0
 80103a2:	f04f 0100 	mov.w	r1, #0
 80103a6:	0219      	lsls	r1, r3, #8
 80103a8:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80103ac:	0210      	lsls	r0, r2, #8
 80103ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80103b0:	3306      	adds	r3, #6
 80103b2:	781b      	ldrb	r3, [r3, #0]
 80103b4:	b2db      	uxtb	r3, r3
 80103b6:	2200      	movs	r2, #0
 80103b8:	461c      	mov	r4, r3
 80103ba:	4615      	mov	r5, r2
 80103bc:	ea40 0804 	orr.w	r8, r0, r4
 80103c0:	ea41 0905 	orr.w	r9, r1, r5
 80103c4:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[5];
 80103c8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80103cc:	f04f 0000 	mov.w	r0, #0
 80103d0:	f04f 0100 	mov.w	r1, #0
 80103d4:	0219      	lsls	r1, r3, #8
 80103d6:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80103da:	0210      	lsls	r0, r2, #8
 80103dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80103de:	3305      	adds	r3, #5
 80103e0:	781b      	ldrb	r3, [r3, #0]
 80103e2:	b2db      	uxtb	r3, r3
 80103e4:	2200      	movs	r2, #0
 80103e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80103e8:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80103ea:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 80103ee:	4623      	mov	r3, r4
 80103f0:	4303      	orrs	r3, r0
 80103f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80103f4:	462b      	mov	r3, r5
 80103f6:	430b      	orrs	r3, r1
 80103f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80103fa:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80103fe:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[4];
 8010402:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8010406:	f04f 0000 	mov.w	r0, #0
 801040a:	f04f 0100 	mov.w	r1, #0
 801040e:	0219      	lsls	r1, r3, #8
 8010410:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8010414:	0210      	lsls	r0, r2, #8
 8010416:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010418:	3304      	adds	r3, #4
 801041a:	781b      	ldrb	r3, [r3, #0]
 801041c:	b2db      	uxtb	r3, r3
 801041e:	2200      	movs	r2, #0
 8010420:	653b      	str	r3, [r7, #80]	@ 0x50
 8010422:	657a      	str	r2, [r7, #84]	@ 0x54
 8010424:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8010428:	4623      	mov	r3, r4
 801042a:	4303      	orrs	r3, r0
 801042c:	623b      	str	r3, [r7, #32]
 801042e:	462b      	mov	r3, r5
 8010430:	430b      	orrs	r3, r1
 8010432:	627b      	str	r3, [r7, #36]	@ 0x24
 8010434:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8010438:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[3];
 801043c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8010440:	f04f 0000 	mov.w	r0, #0
 8010444:	f04f 0100 	mov.w	r1, #0
 8010448:	0219      	lsls	r1, r3, #8
 801044a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 801044e:	0210      	lsls	r0, r2, #8
 8010450:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010452:	3303      	adds	r3, #3
 8010454:	781b      	ldrb	r3, [r3, #0]
 8010456:	b2db      	uxtb	r3, r3
 8010458:	2200      	movs	r2, #0
 801045a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801045c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 801045e:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8010462:	4623      	mov	r3, r4
 8010464:	4303      	orrs	r3, r0
 8010466:	61bb      	str	r3, [r7, #24]
 8010468:	462b      	mov	r3, r5
 801046a:	430b      	orrs	r3, r1
 801046c:	61fb      	str	r3, [r7, #28]
 801046e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8010472:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[2];
 8010476:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 801047a:	f04f 0000 	mov.w	r0, #0
 801047e:	f04f 0100 	mov.w	r1, #0
 8010482:	0219      	lsls	r1, r3, #8
 8010484:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8010488:	0210      	lsls	r0, r2, #8
 801048a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801048c:	3302      	adds	r3, #2
 801048e:	781b      	ldrb	r3, [r3, #0]
 8010490:	b2db      	uxtb	r3, r3
 8010492:	2200      	movs	r2, #0
 8010494:	643b      	str	r3, [r7, #64]	@ 0x40
 8010496:	647a      	str	r2, [r7, #68]	@ 0x44
 8010498:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 801049c:	4623      	mov	r3, r4
 801049e:	4303      	orrs	r3, r0
 80104a0:	613b      	str	r3, [r7, #16]
 80104a2:	462b      	mov	r3, r5
 80104a4:	430b      	orrs	r3, r1
 80104a6:	617b      	str	r3, [r7, #20]
 80104a8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80104ac:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[1];
 80104b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80104b4:	f04f 0200 	mov.w	r2, #0
 80104b8:	f04f 0300 	mov.w	r3, #0
 80104bc:	020b      	lsls	r3, r1, #8
 80104be:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80104c2:	0202      	lsls	r2, r0, #8
 80104c4:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80104c6:	3101      	adds	r1, #1
 80104c8:	7809      	ldrb	r1, [r1, #0]
 80104ca:	b2c9      	uxtb	r1, r1
 80104cc:	2000      	movs	r0, #0
 80104ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80104d0:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80104d2:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 80104d6:	4621      	mov	r1, r4
 80104d8:	4311      	orrs	r1, r2
 80104da:	60b9      	str	r1, [r7, #8]
 80104dc:	4629      	mov	r1, r5
 80104de:	4319      	orrs	r1, r3
 80104e0:	60f9      	str	r1, [r7, #12]
 80104e2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80104e6:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[0];
 80104ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80104ee:	f04f 0200 	mov.w	r2, #0
 80104f2:	f04f 0300 	mov.w	r3, #0
 80104f6:	020b      	lsls	r3, r1, #8
 80104f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80104fc:	0202      	lsls	r2, r0, #8
 80104fe:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8010500:	7809      	ldrb	r1, [r1, #0]
 8010502:	b2c9      	uxtb	r1, r1
 8010504:	2000      	movs	r0, #0
 8010506:	6339      	str	r1, [r7, #48]	@ 0x30
 8010508:	6378      	str	r0, [r7, #52]	@ 0x34
 801050a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 801050e:	4621      	mov	r1, r4
 8010510:	4311      	orrs	r1, r2
 8010512:	6039      	str	r1, [r7, #0]
 8010514:	4629      	mov	r1, r5
 8010516:	4319      	orrs	r1, r3
 8010518:	6079      	str	r1, [r7, #4]
 801051a:	e9d7 3400 	ldrd	r3, r4, [r7]
 801051e:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	return rv;
 8010522:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
}
 8010526:	4610      	mov	r0, r2
 8010528:	4619      	mov	r1, r3
 801052a:	3774      	adds	r7, #116	@ 0x74
 801052c:	46bd      	mov	sp, r7
 801052e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8010532:	4770      	bx	lr

08010534 <st_word>:
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8010534:	b480      	push	{r7}
 8010536:	b083      	sub	sp, #12
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]
 801053c:	460b      	mov	r3, r1
 801053e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	1c5a      	adds	r2, r3, #1
 8010544:	607a      	str	r2, [r7, #4]
 8010546:	887a      	ldrh	r2, [r7, #2]
 8010548:	b2d2      	uxtb	r2, r2
 801054a:	701a      	strb	r2, [r3, #0]
 801054c:	887b      	ldrh	r3, [r7, #2]
 801054e:	0a1b      	lsrs	r3, r3, #8
 8010550:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	1c5a      	adds	r2, r3, #1
 8010556:	607a      	str	r2, [r7, #4]
 8010558:	887a      	ldrh	r2, [r7, #2]
 801055a:	b2d2      	uxtb	r2, r2
 801055c:	701a      	strb	r2, [r3, #0]
}
 801055e:	bf00      	nop
 8010560:	370c      	adds	r7, #12
 8010562:	46bd      	mov	sp, r7
 8010564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010568:	4770      	bx	lr

0801056a <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801056a:	b480      	push	{r7}
 801056c:	b083      	sub	sp, #12
 801056e:	af00      	add	r7, sp, #0
 8010570:	6078      	str	r0, [r7, #4]
 8010572:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	1c5a      	adds	r2, r3, #1
 8010578:	607a      	str	r2, [r7, #4]
 801057a:	683a      	ldr	r2, [r7, #0]
 801057c:	b2d2      	uxtb	r2, r2
 801057e:	701a      	strb	r2, [r3, #0]
 8010580:	683b      	ldr	r3, [r7, #0]
 8010582:	0a1b      	lsrs	r3, r3, #8
 8010584:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	1c5a      	adds	r2, r3, #1
 801058a:	607a      	str	r2, [r7, #4]
 801058c:	683a      	ldr	r2, [r7, #0]
 801058e:	b2d2      	uxtb	r2, r2
 8010590:	701a      	strb	r2, [r3, #0]
 8010592:	683b      	ldr	r3, [r7, #0]
 8010594:	0a1b      	lsrs	r3, r3, #8
 8010596:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	1c5a      	adds	r2, r3, #1
 801059c:	607a      	str	r2, [r7, #4]
 801059e:	683a      	ldr	r2, [r7, #0]
 80105a0:	b2d2      	uxtb	r2, r2
 80105a2:	701a      	strb	r2, [r3, #0]
 80105a4:	683b      	ldr	r3, [r7, #0]
 80105a6:	0a1b      	lsrs	r3, r3, #8
 80105a8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	1c5a      	adds	r2, r3, #1
 80105ae:	607a      	str	r2, [r7, #4]
 80105b0:	683a      	ldr	r2, [r7, #0]
 80105b2:	b2d2      	uxtb	r2, r2
 80105b4:	701a      	strb	r2, [r3, #0]
}
 80105b6:	bf00      	nop
 80105b8:	370c      	adds	r7, #12
 80105ba:	46bd      	mov	sp, r7
 80105bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c0:	4770      	bx	lr

080105c2 <st_qword>:

#if FF_FS_EXFAT
static void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 80105c2:	b480      	push	{r7}
 80105c4:	b085      	sub	sp, #20
 80105c6:	af00      	add	r7, sp, #0
 80105c8:	60f8      	str	r0, [r7, #12]
 80105ca:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	1c5a      	adds	r2, r3, #1
 80105d2:	60fa      	str	r2, [r7, #12]
 80105d4:	783a      	ldrb	r2, [r7, #0]
 80105d6:	701a      	strb	r2, [r3, #0]
 80105d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80105dc:	f04f 0200 	mov.w	r2, #0
 80105e0:	f04f 0300 	mov.w	r3, #0
 80105e4:	0a02      	lsrs	r2, r0, #8
 80105e6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80105ea:	0a0b      	lsrs	r3, r1, #8
 80105ec:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	1c5a      	adds	r2, r3, #1
 80105f4:	60fa      	str	r2, [r7, #12]
 80105f6:	783a      	ldrb	r2, [r7, #0]
 80105f8:	701a      	strb	r2, [r3, #0]
 80105fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80105fe:	f04f 0200 	mov.w	r2, #0
 8010602:	f04f 0300 	mov.w	r3, #0
 8010606:	0a02      	lsrs	r2, r0, #8
 8010608:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 801060c:	0a0b      	lsrs	r3, r1, #8
 801060e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	1c5a      	adds	r2, r3, #1
 8010616:	60fa      	str	r2, [r7, #12]
 8010618:	783a      	ldrb	r2, [r7, #0]
 801061a:	701a      	strb	r2, [r3, #0]
 801061c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010620:	f04f 0200 	mov.w	r2, #0
 8010624:	f04f 0300 	mov.w	r3, #0
 8010628:	0a02      	lsrs	r2, r0, #8
 801062a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 801062e:	0a0b      	lsrs	r3, r1, #8
 8010630:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	1c5a      	adds	r2, r3, #1
 8010638:	60fa      	str	r2, [r7, #12]
 801063a:	783a      	ldrb	r2, [r7, #0]
 801063c:	701a      	strb	r2, [r3, #0]
 801063e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010642:	f04f 0200 	mov.w	r2, #0
 8010646:	f04f 0300 	mov.w	r3, #0
 801064a:	0a02      	lsrs	r2, r0, #8
 801064c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8010650:	0a0b      	lsrs	r3, r1, #8
 8010652:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	1c5a      	adds	r2, r3, #1
 801065a:	60fa      	str	r2, [r7, #12]
 801065c:	783a      	ldrb	r2, [r7, #0]
 801065e:	701a      	strb	r2, [r3, #0]
 8010660:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010664:	f04f 0200 	mov.w	r2, #0
 8010668:	f04f 0300 	mov.w	r3, #0
 801066c:	0a02      	lsrs	r2, r0, #8
 801066e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8010672:	0a0b      	lsrs	r3, r1, #8
 8010674:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	1c5a      	adds	r2, r3, #1
 801067c:	60fa      	str	r2, [r7, #12]
 801067e:	783a      	ldrb	r2, [r7, #0]
 8010680:	701a      	strb	r2, [r3, #0]
 8010682:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010686:	f04f 0200 	mov.w	r2, #0
 801068a:	f04f 0300 	mov.w	r3, #0
 801068e:	0a02      	lsrs	r2, r0, #8
 8010690:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8010694:	0a0b      	lsrs	r3, r1, #8
 8010696:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	1c5a      	adds	r2, r3, #1
 801069e:	60fa      	str	r2, [r7, #12]
 80106a0:	783a      	ldrb	r2, [r7, #0]
 80106a2:	701a      	strb	r2, [r3, #0]
 80106a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80106a8:	f04f 0200 	mov.w	r2, #0
 80106ac:	f04f 0300 	mov.w	r3, #0
 80106b0:	0a02      	lsrs	r2, r0, #8
 80106b2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80106b6:	0a0b      	lsrs	r3, r1, #8
 80106b8:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	1c5a      	adds	r2, r3, #1
 80106c0:	60fa      	str	r2, [r7, #12]
 80106c2:	783a      	ldrb	r2, [r7, #0]
 80106c4:	701a      	strb	r2, [r3, #0]
}
 80106c6:	bf00      	nop
 80106c8:	3714      	adds	r7, #20
 80106ca:	46bd      	mov	sp, r7
 80106cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d0:	4770      	bx	lr

080106d2 <dbc_1st>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Test if the byte is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 80106d2:	b480      	push	{r7}
 80106d4:	b083      	sub	sp, #12
 80106d6:	af00      	add	r7, sp, #0
 80106d8:	4603      	mov	r3, r0
 80106da:	71fb      	strb	r3, [r7, #7]
	if (c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 80106dc:	79fb      	ldrb	r3, [r7, #7]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d001      	beq.n	80106e6 <dbc_1st+0x14>
 80106e2:	2300      	movs	r3, #0
 80106e4:	e000      	b.n	80106e8 <dbc_1st+0x16>
#endif
	return 0;
 80106e6:	2300      	movs	r3, #0
}
 80106e8:	4618      	mov	r0, r3
 80106ea:	370c      	adds	r7, #12
 80106ec:	46bd      	mov	sp, r7
 80106ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f2:	4770      	bx	lr

080106f4 <dbc_2nd>:


/* Test if the byte is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 80106f4:	b480      	push	{r7}
 80106f6:	b083      	sub	sp, #12
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	4603      	mov	r3, r0
 80106fc:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 80106fe:	79fb      	ldrb	r3, [r7, #7]
 8010700:	2b00      	cmp	r3, #0
 8010702:	d001      	beq.n	8010708 <dbc_2nd+0x14>
 8010704:	2300      	movs	r3, #0
 8010706:	e000      	b.n	801070a <dbc_2nd+0x16>
#endif
	return 0;
 8010708:	2300      	movs	r3, #0
}
 801070a:	4618      	mov	r0, r3
 801070c:	370c      	adds	r7, #12
 801070e:	46bd      	mov	sp, r7
 8010710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010714:	4770      	bx	lr

08010716 <tchar2uni>:

/* Get a Unicode code point from the TCHAR string in defined API encodeing */
static DWORD tchar2uni (	/* Returns a character in UTF-16 encoding (>=0x10000 on surrogate pair, 0xFFFFFFFF on decode error) */
	const TCHAR** str		/* Pointer to pointer to TCHAR string in configured encoding */
)
{
 8010716:	b580      	push	{r7, lr}
 8010718:	b086      	sub	sp, #24
 801071a:	af00      	add	r7, sp, #0
 801071c:	6078      	str	r0, [r7, #4]
	DWORD uc;
	const TCHAR *p = *str;
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	617b      	str	r3, [r7, #20]

#else		/* ANSI/OEM input */
	BYTE b;
	WCHAR wc;

	wc = (BYTE)*p++;			/* Get a byte */
 8010724:	697b      	ldr	r3, [r7, #20]
 8010726:	1c5a      	adds	r2, r3, #1
 8010728:	617a      	str	r2, [r7, #20]
 801072a:	781b      	ldrb	r3, [r3, #0]
 801072c:	827b      	strh	r3, [r7, #18]
	if (dbc_1st((BYTE)wc)) {	/* Is it a DBC 1st byte? */
 801072e:	8a7b      	ldrh	r3, [r7, #18]
 8010730:	b2db      	uxtb	r3, r3
 8010732:	4618      	mov	r0, r3
 8010734:	f7ff ffcd 	bl	80106d2 <dbc_1st>
 8010738:	4603      	mov	r3, r0
 801073a:	2b00      	cmp	r3, #0
 801073c:	d015      	beq.n	801076a <tchar2uni+0x54>
		b = (BYTE)*p++;			/* Get 2nd byte */
 801073e:	697b      	ldr	r3, [r7, #20]
 8010740:	1c5a      	adds	r2, r3, #1
 8010742:	617a      	str	r2, [r7, #20]
 8010744:	781b      	ldrb	r3, [r3, #0]
 8010746:	747b      	strb	r3, [r7, #17]
		if (!dbc_2nd(b)) return 0xFFFFFFFF;	/* Invalid code? */
 8010748:	7c7b      	ldrb	r3, [r7, #17]
 801074a:	4618      	mov	r0, r3
 801074c:	f7ff ffd2 	bl	80106f4 <dbc_2nd>
 8010750:	4603      	mov	r3, r0
 8010752:	2b00      	cmp	r3, #0
 8010754:	d102      	bne.n	801075c <tchar2uni+0x46>
 8010756:	f04f 33ff 	mov.w	r3, #4294967295
 801075a:	e01d      	b.n	8010798 <tchar2uni+0x82>
		wc = (wc << 8) + b;		/* Make a DBC */
 801075c:	8a7b      	ldrh	r3, [r7, #18]
 801075e:	021b      	lsls	r3, r3, #8
 8010760:	b29a      	uxth	r2, r3
 8010762:	7c7b      	ldrb	r3, [r7, #17]
 8010764:	b29b      	uxth	r3, r3
 8010766:	4413      	add	r3, r2
 8010768:	827b      	strh	r3, [r7, #18]
	}
	if (wc != 0) {
 801076a:	8a7b      	ldrh	r3, [r7, #18]
 801076c:	2b00      	cmp	r3, #0
 801076e:	d00d      	beq.n	801078c <tchar2uni+0x76>
		wc = ff_oem2uni(wc, CODEPAGE);	/* ANSI/OEM ==> Unicode */
 8010770:	8a7b      	ldrh	r3, [r7, #18]
 8010772:	f240 3152 	movw	r1, #850	@ 0x352
 8010776:	4618      	mov	r0, r3
 8010778:	f005 f9c8 	bl	8015b0c <ff_oem2uni>
 801077c:	4603      	mov	r3, r0
 801077e:	827b      	strh	r3, [r7, #18]
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
 8010780:	8a7b      	ldrh	r3, [r7, #18]
 8010782:	2b00      	cmp	r3, #0
 8010784:	d102      	bne.n	801078c <tchar2uni+0x76>
 8010786:	f04f 33ff 	mov.w	r3, #4294967295
 801078a:	e005      	b.n	8010798 <tchar2uni+0x82>
	}
	uc = wc;
 801078c:	8a7b      	ldrh	r3, [r7, #18]
 801078e:	60fb      	str	r3, [r7, #12]

#endif
	*str = p;	/* Next read pointer */
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	697a      	ldr	r2, [r7, #20]
 8010794:	601a      	str	r2, [r3, #0]
	return uc;
 8010796:	68fb      	ldr	r3, [r7, #12]
}
 8010798:	4618      	mov	r0, r3
 801079a:	3718      	adds	r7, #24
 801079c:	46bd      	mov	sp, r7
 801079e:	bd80      	pop	{r7, pc}

080107a0 <put_utf>:
static UINT put_utf (	/* Returns number of encoding units written (0:buffer overflow or wrong encoding) */
	DWORD chr,	/* UTF-16 encoded character (Surrogate pair if >=0x10000) */
	TCHAR* buf,	/* Output buffer */
	UINT szb	/* Size of the buffer */
)
{
 80107a0:	b580      	push	{r7, lr}
 80107a2:	b086      	sub	sp, #24
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	60f8      	str	r0, [r7, #12]
 80107a8:	60b9      	str	r1, [r7, #8]
 80107aa:	607a      	str	r2, [r7, #4]
	return 1;

#else						/* ANSI/OEM output */
	WCHAR wc;

	wc = ff_uni2oem(chr, CODEPAGE);
 80107ac:	f240 3152 	movw	r1, #850	@ 0x352
 80107b0:	68f8      	ldr	r0, [r7, #12]
 80107b2:	f005 f971 	bl	8015a98 <ff_uni2oem>
 80107b6:	4603      	mov	r3, r0
 80107b8:	82fb      	strh	r3, [r7, #22]
	if (wc >= 0x100) {	/* Is this a DBC? */
 80107ba:	8afb      	ldrh	r3, [r7, #22]
 80107bc:	2bff      	cmp	r3, #255	@ 0xff
 80107be:	d914      	bls.n	80107ea <put_utf+0x4a>
		if (szb < 2) return 0;
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	2b01      	cmp	r3, #1
 80107c4:	d801      	bhi.n	80107ca <put_utf+0x2a>
 80107c6:	2300      	movs	r3, #0
 80107c8:	e01e      	b.n	8010808 <put_utf+0x68>
		*buf++ = (char)(wc >> 8);	/* Store DBC 1st byte */
 80107ca:	8afb      	ldrh	r3, [r7, #22]
 80107cc:	0a1b      	lsrs	r3, r3, #8
 80107ce:	b299      	uxth	r1, r3
 80107d0:	68bb      	ldr	r3, [r7, #8]
 80107d2:	1c5a      	adds	r2, r3, #1
 80107d4:	60ba      	str	r2, [r7, #8]
 80107d6:	b2ca      	uxtb	r2, r1
 80107d8:	701a      	strb	r2, [r3, #0]
		*buf++ = (TCHAR)wc;			/* Store DBC 2nd byte */
 80107da:	68bb      	ldr	r3, [r7, #8]
 80107dc:	1c5a      	adds	r2, r3, #1
 80107de:	60ba      	str	r2, [r7, #8]
 80107e0:	8afa      	ldrh	r2, [r7, #22]
 80107e2:	b2d2      	uxtb	r2, r2
 80107e4:	701a      	strb	r2, [r3, #0]
		return 2;
 80107e6:	2302      	movs	r3, #2
 80107e8:	e00e      	b.n	8010808 <put_utf+0x68>
	}
	if (wc == 0 || szb < 1) return 0;	/* Invalid char or buffer overflow? */
 80107ea:	8afb      	ldrh	r3, [r7, #22]
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d002      	beq.n	80107f6 <put_utf+0x56>
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d101      	bne.n	80107fa <put_utf+0x5a>
 80107f6:	2300      	movs	r3, #0
 80107f8:	e006      	b.n	8010808 <put_utf+0x68>
	*buf++ = (TCHAR)wc;					/* Store the character */
 80107fa:	68bb      	ldr	r3, [r7, #8]
 80107fc:	1c5a      	adds	r2, r3, #1
 80107fe:	60ba      	str	r2, [r7, #8]
 8010800:	8afa      	ldrh	r2, [r7, #22]
 8010802:	b2d2      	uxtb	r2, r2
 8010804:	701a      	strb	r2, [r3, #0]
	return 1;
 8010806:	2301      	movs	r3, #1
#endif
}
 8010808:	4618      	mov	r0, r3
 801080a:	3718      	adds	r7, #24
 801080c:	46bd      	mov	sp, r7
 801080e:	bd80      	pop	{r7, pc}

08010810 <chk_share>:

static FRESULT chk_share (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read mode open, 1:Write mode open, 2:Delete or rename) */
)
{
 8010810:	b480      	push	{r7}
 8010812:	b085      	sub	sp, #20
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]
 8010818:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search open object table for the object */
	be = 0;
 801081a:	2300      	movs	r3, #0
 801081c:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < FF_FS_LOCK; i++) {
 801081e:	2300      	movs	r3, #0
 8010820:	60fb      	str	r3, [r7, #12]
 8010822:	e029      	b.n	8010878 <chk_share+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8010824:	4a27      	ldr	r2, [pc, #156]	@ (80108c4 <chk_share+0xb4>)
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	011b      	lsls	r3, r3, #4
 801082a:	4413      	add	r3, r2
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d01d      	beq.n	801086e <chk_share+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matches with an open object */
 8010832:	4a24      	ldr	r2, [pc, #144]	@ (80108c4 <chk_share+0xb4>)
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	011b      	lsls	r3, r3, #4
 8010838:	4413      	add	r3, r2
 801083a:	681a      	ldr	r2, [r3, #0]
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	429a      	cmp	r2, r3
 8010842:	d116      	bne.n	8010872 <chk_share+0x62>
				Files[i].clu == dp->obj.sclust &&
 8010844:	4a1f      	ldr	r2, [pc, #124]	@ (80108c4 <chk_share+0xb4>)
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	011b      	lsls	r3, r3, #4
 801084a:	4413      	add	r3, r2
 801084c:	3304      	adds	r3, #4
 801084e:	681a      	ldr	r2, [r3, #0]
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matches with an open object */
 8010854:	429a      	cmp	r2, r3
 8010856:	d10c      	bne.n	8010872 <chk_share+0x62>
				Files[i].ofs == dp->dptr) break;
 8010858:	4a1a      	ldr	r2, [pc, #104]	@ (80108c4 <chk_share+0xb4>)
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	011b      	lsls	r3, r3, #4
 801085e:	4413      	add	r3, r2
 8010860:	3308      	adds	r3, #8
 8010862:	681a      	ldr	r2, [r3, #0]
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
				Files[i].clu == dp->obj.sclust &&
 8010868:	429a      	cmp	r2, r3
 801086a:	d102      	bne.n	8010872 <chk_share+0x62>
				Files[i].ofs == dp->dptr) break;
 801086c:	e007      	b.n	801087e <chk_share+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801086e:	2301      	movs	r3, #1
 8010870:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < FF_FS_LOCK; i++) {
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	3301      	adds	r3, #1
 8010876:	60fb      	str	r3, [r7, #12]
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	2b03      	cmp	r3, #3
 801087c:	d9d2      	bls.n	8010824 <chk_share+0x14>
		}
	}
	if (i == FF_FS_LOCK) {	/* The object has not been opened */
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	2b04      	cmp	r3, #4
 8010882:	d109      	bne.n	8010898 <chk_share+0x88>
		return (!be && acc != 2) ? FR_TOO_MANY_OPEN_FILES : FR_OK;	/* Is there a blank entry for new object? */
 8010884:	68bb      	ldr	r3, [r7, #8]
 8010886:	2b00      	cmp	r3, #0
 8010888:	d104      	bne.n	8010894 <chk_share+0x84>
 801088a:	683b      	ldr	r3, [r7, #0]
 801088c:	2b02      	cmp	r3, #2
 801088e:	d001      	beq.n	8010894 <chk_share+0x84>
 8010890:	2312      	movs	r3, #18
 8010892:	e010      	b.n	80108b6 <chk_share+0xa6>
 8010894:	2300      	movs	r3, #0
 8010896:	e00e      	b.n	80108b6 <chk_share+0xa6>
	}

	/* The object was opened. Reject any open against writing file and all write mode open */
	return (acc != 0 || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8010898:	683b      	ldr	r3, [r7, #0]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d108      	bne.n	80108b0 <chk_share+0xa0>
 801089e:	4a09      	ldr	r2, [pc, #36]	@ (80108c4 <chk_share+0xb4>)
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	011b      	lsls	r3, r3, #4
 80108a4:	4413      	add	r3, r2
 80108a6:	330c      	adds	r3, #12
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80108ae:	d101      	bne.n	80108b4 <chk_share+0xa4>
 80108b0:	2310      	movs	r3, #16
 80108b2:	e000      	b.n	80108b6 <chk_share+0xa6>
 80108b4:	2300      	movs	r3, #0
}
 80108b6:	4618      	mov	r0, r3
 80108b8:	3714      	adds	r7, #20
 80108ba:	46bd      	mov	sp, r7
 80108bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c0:	4770      	bx	lr
 80108c2:	bf00      	nop
 80108c4:	240020ec 	.word	0x240020ec

080108c8 <enq_share>:


static int enq_share (void)	/* Check if an entry is available for a new object */
{
 80108c8:	b480      	push	{r7}
 80108ca:	b083      	sub	sp, #12
 80108cc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < FF_FS_LOCK && Files[i].fs; i++) ;	/* Find a free entry */
 80108ce:	2300      	movs	r3, #0
 80108d0:	607b      	str	r3, [r7, #4]
 80108d2:	e002      	b.n	80108da <enq_share+0x12>
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	3301      	adds	r3, #1
 80108d8:	607b      	str	r3, [r7, #4]
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	2b03      	cmp	r3, #3
 80108de:	d806      	bhi.n	80108ee <enq_share+0x26>
 80108e0:	4a09      	ldr	r2, [pc, #36]	@ (8010908 <enq_share+0x40>)
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	011b      	lsls	r3, r3, #4
 80108e6:	4413      	add	r3, r2
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d1f2      	bne.n	80108d4 <enq_share+0xc>
	return (i == FF_FS_LOCK) ? 0 : 1;
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	2b04      	cmp	r3, #4
 80108f2:	bf14      	ite	ne
 80108f4:	2301      	movne	r3, #1
 80108f6:	2300      	moveq	r3, #0
 80108f8:	b2db      	uxtb	r3, r3
}
 80108fa:	4618      	mov	r0, r3
 80108fc:	370c      	adds	r7, #12
 80108fe:	46bd      	mov	sp, r7
 8010900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010904:	4770      	bx	lr
 8010906:	bf00      	nop
 8010908:	240020ec 	.word	0x240020ec

0801090c <inc_share>:

static UINT inc_share (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801090c:	b480      	push	{r7}
 801090e:	b085      	sub	sp, #20
 8010910:	af00      	add	r7, sp, #0
 8010912:	6078      	str	r0, [r7, #4]
 8010914:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < FF_FS_LOCK; i++) {	/* Find the object */
 8010916:	2300      	movs	r3, #0
 8010918:	60fb      	str	r3, [r7, #12]
 801091a:	e01f      	b.n	801095c <inc_share+0x50>
		if (Files[i].fs == dp->obj.fs
 801091c:	4a41      	ldr	r2, [pc, #260]	@ (8010a24 <inc_share+0x118>)
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	011b      	lsls	r3, r3, #4
 8010922:	4413      	add	r3, r2
 8010924:	681a      	ldr	r2, [r3, #0]
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	429a      	cmp	r2, r3
 801092c:	d113      	bne.n	8010956 <inc_share+0x4a>
		 && Files[i].clu == dp->obj.sclust
 801092e:	4a3d      	ldr	r2, [pc, #244]	@ (8010a24 <inc_share+0x118>)
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	011b      	lsls	r3, r3, #4
 8010934:	4413      	add	r3, r2
 8010936:	3304      	adds	r3, #4
 8010938:	681a      	ldr	r2, [r3, #0]
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	689b      	ldr	r3, [r3, #8]
 801093e:	429a      	cmp	r2, r3
 8010940:	d109      	bne.n	8010956 <inc_share+0x4a>
		 && Files[i].ofs == dp->dptr) break;
 8010942:	4a38      	ldr	r2, [pc, #224]	@ (8010a24 <inc_share+0x118>)
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	011b      	lsls	r3, r3, #4
 8010948:	4413      	add	r3, r2
 801094a:	3308      	adds	r3, #8
 801094c:	681a      	ldr	r2, [r3, #0]
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010952:	429a      	cmp	r2, r3
 8010954:	d006      	beq.n	8010964 <inc_share+0x58>
	for (i = 0; i < FF_FS_LOCK; i++) {	/* Find the object */
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	3301      	adds	r3, #1
 801095a:	60fb      	str	r3, [r7, #12]
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	2b03      	cmp	r3, #3
 8010960:	d9dc      	bls.n	801091c <inc_share+0x10>
 8010962:	e000      	b.n	8010966 <inc_share+0x5a>
		 && Files[i].ofs == dp->dptr) break;
 8010964:	bf00      	nop
	}

	if (i == FF_FS_LOCK) {			/* Not opened. Register it as new. */
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	2b04      	cmp	r3, #4
 801096a:	d132      	bne.n	80109d2 <inc_share+0xc6>
		for (i = 0; i < FF_FS_LOCK && Files[i].fs; i++) ;	/* Find a free entry */
 801096c:	2300      	movs	r3, #0
 801096e:	60fb      	str	r3, [r7, #12]
 8010970:	e002      	b.n	8010978 <inc_share+0x6c>
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	3301      	adds	r3, #1
 8010976:	60fb      	str	r3, [r7, #12]
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	2b03      	cmp	r3, #3
 801097c:	d806      	bhi.n	801098c <inc_share+0x80>
 801097e:	4a29      	ldr	r2, [pc, #164]	@ (8010a24 <inc_share+0x118>)
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	011b      	lsls	r3, r3, #4
 8010984:	4413      	add	r3, r2
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	2b00      	cmp	r3, #0
 801098a:	d1f2      	bne.n	8010972 <inc_share+0x66>
		if (i == FF_FS_LOCK) return 0;	/* No free entry to register (int err) */
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	2b04      	cmp	r3, #4
 8010990:	d101      	bne.n	8010996 <inc_share+0x8a>
 8010992:	2300      	movs	r3, #0
 8010994:	e03f      	b.n	8010a16 <inc_share+0x10a>
		Files[i].fs = dp->obj.fs;
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	681a      	ldr	r2, [r3, #0]
 801099a:	4922      	ldr	r1, [pc, #136]	@ (8010a24 <inc_share+0x118>)
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	011b      	lsls	r3, r3, #4
 80109a0:	440b      	add	r3, r1
 80109a2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	689a      	ldr	r2, [r3, #8]
 80109a8:	491e      	ldr	r1, [pc, #120]	@ (8010a24 <inc_share+0x118>)
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	011b      	lsls	r3, r3, #4
 80109ae:	440b      	add	r3, r1
 80109b0:	3304      	adds	r3, #4
 80109b2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80109b8:	491a      	ldr	r1, [pc, #104]	@ (8010a24 <inc_share+0x118>)
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	011b      	lsls	r3, r3, #4
 80109be:	440b      	add	r3, r1
 80109c0:	3308      	adds	r3, #8
 80109c2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80109c4:	4a17      	ldr	r2, [pc, #92]	@ (8010a24 <inc_share+0x118>)
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	011b      	lsls	r3, r3, #4
 80109ca:	4413      	add	r3, r2
 80109cc:	330c      	adds	r3, #12
 80109ce:	2200      	movs	r2, #0
 80109d0:	601a      	str	r2, [r3, #0]
	}

	if (acc >= 1 && Files[i].ctr) return 0;	/* Access violation (int err) */
 80109d2:	683b      	ldr	r3, [r7, #0]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	dd09      	ble.n	80109ec <inc_share+0xe0>
 80109d8:	4a12      	ldr	r2, [pc, #72]	@ (8010a24 <inc_share+0x118>)
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	011b      	lsls	r3, r3, #4
 80109de:	4413      	add	r3, r2
 80109e0:	330c      	adds	r3, #12
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d001      	beq.n	80109ec <inc_share+0xe0>
 80109e8:	2300      	movs	r3, #0
 80109ea:	e014      	b.n	8010a16 <inc_share+0x10a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80109ec:	683b      	ldr	r3, [r7, #0]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d107      	bne.n	8010a02 <inc_share+0xf6>
 80109f2:	4a0c      	ldr	r2, [pc, #48]	@ (8010a24 <inc_share+0x118>)
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	011b      	lsls	r3, r3, #4
 80109f8:	4413      	add	r3, r2
 80109fa:	330c      	adds	r3, #12
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	3301      	adds	r3, #1
 8010a00:	e001      	b.n	8010a06 <inc_share+0xfa>
 8010a02:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010a06:	4907      	ldr	r1, [pc, #28]	@ (8010a24 <inc_share+0x118>)
 8010a08:	68fa      	ldr	r2, [r7, #12]
 8010a0a:	0112      	lsls	r2, r2, #4
 8010a0c:	440a      	add	r2, r1
 8010a0e:	320c      	adds	r2, #12
 8010a10:	6013      	str	r3, [r2, #0]

	return i + 1;	/* Index number origin from 1 */
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	3301      	adds	r3, #1
}
 8010a16:	4618      	mov	r0, r3
 8010a18:	3714      	adds	r7, #20
 8010a1a:	46bd      	mov	sp, r7
 8010a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a20:	4770      	bx	lr
 8010a22:	bf00      	nop
 8010a24:	240020ec 	.word	0x240020ec

08010a28 <dec_share>:


static FRESULT dec_share (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8010a28:	b480      	push	{r7}
 8010a2a:	b085      	sub	sp, #20
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	6078      	str	r0, [r7, #4]
	UINT n;
	FRESULT res;


	if (--i < FF_FS_LOCK) {	/* Index number origin from 0 */
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	3b01      	subs	r3, #1
 8010a34:	607b      	str	r3, [r7, #4]
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	2b03      	cmp	r3, #3
 8010a3a:	d825      	bhi.n	8010a88 <dec_share+0x60>
		n = Files[i].ctr;
 8010a3c:	4a17      	ldr	r2, [pc, #92]	@ (8010a9c <dec_share+0x74>)
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	011b      	lsls	r3, r3, #4
 8010a42:	4413      	add	r3, r2
 8010a44:	330c      	adds	r3, #12
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	60fb      	str	r3, [r7, #12]
		if (n == 0x100) n = 0;	/* If write mode open, delete the object semaphore */
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010a50:	d101      	bne.n	8010a56 <dec_share+0x2e>
 8010a52:	2300      	movs	r3, #0
 8010a54:	60fb      	str	r3, [r7, #12]
		if (n > 0) n--;			/* Decrement read mode open count */
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d002      	beq.n	8010a62 <dec_share+0x3a>
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	3b01      	subs	r3, #1
 8010a60:	60fb      	str	r3, [r7, #12]
		Files[i].ctr = n;
 8010a62:	4a0e      	ldr	r2, [pc, #56]	@ (8010a9c <dec_share+0x74>)
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	011b      	lsls	r3, r3, #4
 8010a68:	4413      	add	r3, r2
 8010a6a:	330c      	adds	r3, #12
 8010a6c:	68fa      	ldr	r2, [r7, #12]
 8010a6e:	601a      	str	r2, [r3, #0]
		if (n == 0) {			/* Delete the object semaphore if open count becomes zero */
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d105      	bne.n	8010a82 <dec_share+0x5a>
			Files[i].fs = 0;	/* Free the entry <<<If this memory write operation is not in atomic, FF_FS_REENTRANT == 1 and FF_VOLUMES > 1, there is a potential error in this process >>> */
 8010a76:	4a09      	ldr	r2, [pc, #36]	@ (8010a9c <dec_share+0x74>)
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	011b      	lsls	r3, r3, #4
 8010a7c:	4413      	add	r3, r2
 8010a7e:	2200      	movs	r2, #0
 8010a80:	601a      	str	r2, [r3, #0]
		}
		res = FR_OK;
 8010a82:	2300      	movs	r3, #0
 8010a84:	72fb      	strb	r3, [r7, #11]
 8010a86:	e001      	b.n	8010a8c <dec_share+0x64>
	} else {
		res = FR_INT_ERR;		/* Invalid index number */
 8010a88:	2302      	movs	r3, #2
 8010a8a:	72fb      	strb	r3, [r7, #11]
	}
	return res;
 8010a8c:	7afb      	ldrb	r3, [r7, #11]
}
 8010a8e:	4618      	mov	r0, r3
 8010a90:	3714      	adds	r7, #20
 8010a92:	46bd      	mov	sp, r7
 8010a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a98:	4770      	bx	lr
 8010a9a:	bf00      	nop
 8010a9c:	240020ec 	.word	0x240020ec

08010aa0 <clear_share>:


static void clear_share (	/* Clear all lock entries of the volume */
	FATFS* fs
)
{
 8010aa0:	b480      	push	{r7}
 8010aa2:	b085      	sub	sp, #20
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < FF_FS_LOCK; i++) {
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	60fb      	str	r3, [r7, #12]
 8010aac:	e010      	b.n	8010ad0 <clear_share+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010aae:	4a0d      	ldr	r2, [pc, #52]	@ (8010ae4 <clear_share+0x44>)
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	011b      	lsls	r3, r3, #4
 8010ab4:	4413      	add	r3, r2
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	687a      	ldr	r2, [r7, #4]
 8010aba:	429a      	cmp	r2, r3
 8010abc:	d105      	bne.n	8010aca <clear_share+0x2a>
 8010abe:	4a09      	ldr	r2, [pc, #36]	@ (8010ae4 <clear_share+0x44>)
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	011b      	lsls	r3, r3, #4
 8010ac4:	4413      	add	r3, r2
 8010ac6:	2200      	movs	r2, #0
 8010ac8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < FF_FS_LOCK; i++) {
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	3301      	adds	r3, #1
 8010ace:	60fb      	str	r3, [r7, #12]
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	2b03      	cmp	r3, #3
 8010ad4:	d9eb      	bls.n	8010aae <clear_share+0xe>
	}
}
 8010ad6:	bf00      	nop
 8010ad8:	bf00      	nop
 8010ada:	3714      	adds	r7, #20
 8010adc:	46bd      	mov	sp, r7
 8010ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae2:	4770      	bx	lr
 8010ae4:	240020ec 	.word	0x240020ec

08010ae8 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 8010ae8:	b580      	push	{r7, lr}
 8010aea:	b084      	sub	sp, #16
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 8010af0:	2300      	movs	r3, #0
 8010af2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty? */
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	791b      	ldrb	r3, [r3, #4]
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d02c      	beq.n	8010b56 <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	7858      	ldrb	r0, [r3, #1]
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010b0a:	2301      	movs	r3, #1
 8010b0c:	f7ff fbb6 	bl	801027c <disk_write>
 8010b10:	4603      	mov	r3, r0
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d11d      	bne.n	8010b52 <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	2200      	movs	r2, #0
 8010b1a:	711a      	strb	r2, [r3, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010b24:	1ad2      	subs	r2, r2, r3
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010b2a:	429a      	cmp	r2, r3
 8010b2c:	d213      	bcs.n	8010b56 <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	78db      	ldrb	r3, [r3, #3]
 8010b32:	2b02      	cmp	r3, #2
 8010b34:	d10f      	bne.n	8010b56 <sync_window+0x6e>
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	7858      	ldrb	r0, [r3, #1]
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010b48:	441a      	add	r2, r3
 8010b4a:	2301      	movs	r3, #1
 8010b4c:	f7ff fb96 	bl	801027c <disk_write>
 8010b50:	e001      	b.n	8010b56 <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 8010b52:	2301      	movs	r3, #1
 8010b54:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 8010b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b58:	4618      	mov	r0, r3
 8010b5a:	3710      	adds	r7, #16
 8010b5c:	46bd      	mov	sp, r7
 8010b5e:	bd80      	pop	{r7, pc}

08010b60 <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,		/* Filesystem object */
	LBA_t sect		/* Sector LBA to make appearance in the fs->win[] */
)
{
 8010b60:	b580      	push	{r7, lr}
 8010b62:	b084      	sub	sp, #16
 8010b64:	af00      	add	r7, sp, #0
 8010b66:	6078      	str	r0, [r7, #4]
 8010b68:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	73fb      	strb	r3, [r7, #15]


	if (sect != fs->winsect) {	/* Window offset changed? */
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010b72:	683a      	ldr	r2, [r7, #0]
 8010b74:	429a      	cmp	r2, r3
 8010b76:	d01b      	beq.n	8010bb0 <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Flush the window */
 8010b78:	6878      	ldr	r0, [r7, #4]
 8010b7a:	f7ff ffb5 	bl	8010ae8 <sync_window>
 8010b7e:	4603      	mov	r3, r0
 8010b80:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8010b82:	7bfb      	ldrb	r3, [r7, #15]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d113      	bne.n	8010bb0 <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	7858      	ldrb	r0, [r3, #1]
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 8010b92:	2301      	movs	r3, #1
 8010b94:	683a      	ldr	r2, [r7, #0]
 8010b96:	f7ff fb51 	bl	801023c <disk_read>
 8010b9a:	4603      	mov	r3, r0
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d004      	beq.n	8010baa <move_window+0x4a>
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 8010ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8010ba4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8010ba6:	2301      	movs	r3, #1
 8010ba8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sect;
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	683a      	ldr	r2, [r7, #0]
 8010bae:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
	}
	return res;
 8010bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bb2:	4618      	mov	r0, r3
 8010bb4:	3710      	adds	r7, #16
 8010bb6:	46bd      	mov	sp, r7
 8010bb8:	bd80      	pop	{r7, pc}
	...

08010bbc <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 8010bbc:	b580      	push	{r7, lr}
 8010bbe:	b084      	sub	sp, #16
 8010bc0:	af00      	add	r7, sp, #0
 8010bc2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8010bc4:	6878      	ldr	r0, [r7, #4]
 8010bc6:	f7ff ff8f 	bl	8010ae8 <sync_window>
 8010bca:	4603      	mov	r3, r0
 8010bcc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010bce:	7bfb      	ldrb	r3, [r7, #15]
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d158      	bne.n	8010c86 <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	781b      	ldrb	r3, [r3, #0]
 8010bd8:	2b03      	cmp	r3, #3
 8010bda:	d148      	bne.n	8010c6e <sync_fs+0xb2>
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	795b      	ldrb	r3, [r3, #5]
 8010be0:	2b01      	cmp	r3, #1
 8010be2:	d144      	bne.n	8010c6e <sync_fs+0xb2>
			/* Create FSInfo structure */
			memset(fs->win, 0, sizeof fs->win);
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	3350      	adds	r3, #80	@ 0x50
 8010be8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8010bec:	2100      	movs	r1, #0
 8010bee:	4618      	mov	r0, r3
 8010bf0:	f007 fd66 	bl	80186c0 <memset>
			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	3350      	adds	r3, #80	@ 0x50
 8010bf8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010bfc:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8010c00:	4618      	mov	r0, r3
 8010c02:	f7ff fc97 	bl	8010534 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	3350      	adds	r3, #80	@ 0x50
 8010c0a:	4921      	ldr	r1, [pc, #132]	@ (8010c90 <sync_fs+0xd4>)
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	f7ff fcac 	bl	801056a <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	3350      	adds	r3, #80	@ 0x50
 8010c16:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8010c1a:	491e      	ldr	r1, [pc, #120]	@ (8010c94 <sync_fs+0xd8>)
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	f7ff fca4 	bl	801056a <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	3350      	adds	r3, #80	@ 0x50
 8010c26:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	69db      	ldr	r3, [r3, #28]
 8010c2e:	4619      	mov	r1, r3
 8010c30:	4610      	mov	r0, r2
 8010c32:	f7ff fc9a 	bl	801056a <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	3350      	adds	r3, #80	@ 0x50
 8010c3a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	699b      	ldr	r3, [r3, #24]
 8010c42:	4619      	mov	r1, r3
 8010c44:	4610      	mov	r0, r2
 8010c46:	f7ff fc90 	bl	801056a <st_dword>
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010c4e:	1c5a      	adds	r2, r3, #1
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	64da      	str	r2, [r3, #76]	@ 0x4c
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	7858      	ldrb	r0, [r3, #1]
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010c62:	2301      	movs	r3, #1
 8010c64:	f7ff fb0a 	bl	801027c <disk_write>
			fs->fsi_flag = 0;
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	2200      	movs	r2, #0
 8010c6c:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	785b      	ldrb	r3, [r3, #1]
 8010c72:	2200      	movs	r2, #0
 8010c74:	2100      	movs	r1, #0
 8010c76:	4618      	mov	r0, r3
 8010c78:	f7ff fb20 	bl	80102bc <disk_ioctl>
 8010c7c:	4603      	mov	r3, r0
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d001      	beq.n	8010c86 <sync_fs+0xca>
 8010c82:	2301      	movs	r3, #1
 8010c84:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8010c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c88:	4618      	mov	r0, r3
 8010c8a:	3710      	adds	r7, #16
 8010c8c:	46bd      	mov	sp, r7
 8010c8e:	bd80      	pop	{r7, pc}
 8010c90:	41615252 	.word	0x41615252
 8010c94:	61417272 	.word	0x61417272

08010c98 <clst2sect>:

static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8010c98:	b480      	push	{r7}
 8010c9a:	b083      	sub	sp, #12
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
 8010ca0:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 8010ca2:	683b      	ldr	r3, [r7, #0]
 8010ca4:	3b02      	subs	r3, #2
 8010ca6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010cac:	3b02      	subs	r3, #2
 8010cae:	683a      	ldr	r2, [r7, #0]
 8010cb0:	429a      	cmp	r2, r3
 8010cb2:	d301      	bcc.n	8010cb8 <clst2sect+0x20>
 8010cb4:	2300      	movs	r3, #0
 8010cb6:	e008      	b.n	8010cca <clst2sect+0x32>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	895b      	ldrh	r3, [r3, #10]
 8010cc0:	4619      	mov	r1, r3
 8010cc2:	683b      	ldr	r3, [r7, #0]
 8010cc4:	fb01 f303 	mul.w	r3, r1, r3
 8010cc8:	4413      	add	r3, r2
}
 8010cca:	4618      	mov	r0, r3
 8010ccc:	370c      	adds	r7, #12
 8010cce:	46bd      	mov	sp, r7
 8010cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cd4:	4770      	bx	lr
	...

08010cd8 <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 8010cd8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8010cdc:	b088      	sub	sp, #32
 8010cde:	af00      	add	r7, sp, #0
 8010ce0:	6078      	str	r0, [r7, #4]
 8010ce2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010cea:	683b      	ldr	r3, [r7, #0]
 8010cec:	2b01      	cmp	r3, #1
 8010cee:	d904      	bls.n	8010cfa <get_fat+0x22>
 8010cf0:	69bb      	ldr	r3, [r7, #24]
 8010cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010cf4:	683a      	ldr	r2, [r7, #0]
 8010cf6:	429a      	cmp	r2, r3
 8010cf8:	d302      	bcc.n	8010d00 <get_fat+0x28>
		val = 1;	/* Internal error */
 8010cfa:	2301      	movs	r3, #1
 8010cfc:	61fb      	str	r3, [r7, #28]
 8010cfe:	e144      	b.n	8010f8a <get_fat+0x2b2>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8010d00:	f04f 33ff 	mov.w	r3, #4294967295
 8010d04:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 8010d06:	69bb      	ldr	r3, [r7, #24]
 8010d08:	781b      	ldrb	r3, [r3, #0]
 8010d0a:	3b01      	subs	r3, #1
 8010d0c:	2b03      	cmp	r3, #3
 8010d0e:	f200 8130 	bhi.w	8010f72 <get_fat+0x29a>
 8010d12:	a201      	add	r2, pc, #4	@ (adr r2, 8010d18 <get_fat+0x40>)
 8010d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d18:	08010d29 	.word	0x08010d29
 8010d1c:	08010dd5 	.word	0x08010dd5
 8010d20:	08010e21 	.word	0x08010e21
 8010d24:	08010e71 	.word	0x08010e71
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010d28:	683b      	ldr	r3, [r7, #0]
 8010d2a:	60fb      	str	r3, [r7, #12]
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	085b      	lsrs	r3, r3, #1
 8010d30:	68fa      	ldr	r2, [r7, #12]
 8010d32:	4413      	add	r3, r2
 8010d34:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010d36:	69bb      	ldr	r3, [r7, #24]
 8010d38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010d3a:	69bb      	ldr	r3, [r7, #24]
 8010d3c:	899b      	ldrh	r3, [r3, #12]
 8010d3e:	4619      	mov	r1, r3
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	fbb3 f3f1 	udiv	r3, r3, r1
 8010d46:	4413      	add	r3, r2
 8010d48:	4619      	mov	r1, r3
 8010d4a:	69b8      	ldr	r0, [r7, #24]
 8010d4c:	f7ff ff08 	bl	8010b60 <move_window>
 8010d50:	4603      	mov	r3, r0
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	f040 8110 	bne.w	8010f78 <get_fat+0x2a0>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	1c5a      	adds	r2, r3, #1
 8010d5c:	60fa      	str	r2, [r7, #12]
 8010d5e:	69ba      	ldr	r2, [r7, #24]
 8010d60:	8992      	ldrh	r2, [r2, #12]
 8010d62:	fbb3 f1f2 	udiv	r1, r3, r2
 8010d66:	fb01 f202 	mul.w	r2, r1, r2
 8010d6a:	1a9b      	subs	r3, r3, r2
 8010d6c:	69ba      	ldr	r2, [r7, #24]
 8010d6e:	4413      	add	r3, r2
 8010d70:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8010d74:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010d76:	69bb      	ldr	r3, [r7, #24]
 8010d78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010d7a:	69bb      	ldr	r3, [r7, #24]
 8010d7c:	899b      	ldrh	r3, [r3, #12]
 8010d7e:	4619      	mov	r1, r3
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	fbb3 f3f1 	udiv	r3, r3, r1
 8010d86:	4413      	add	r3, r2
 8010d88:	4619      	mov	r1, r3
 8010d8a:	69b8      	ldr	r0, [r7, #24]
 8010d8c:	f7ff fee8 	bl	8010b60 <move_window>
 8010d90:	4603      	mov	r3, r0
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	f040 80f2 	bne.w	8010f7c <get_fat+0x2a4>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8010d98:	69bb      	ldr	r3, [r7, #24]
 8010d9a:	899b      	ldrh	r3, [r3, #12]
 8010d9c:	461a      	mov	r2, r3
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	fbb3 f1f2 	udiv	r1, r3, r2
 8010da4:	fb01 f202 	mul.w	r2, r1, r2
 8010da8:	1a9b      	subs	r3, r3, r2
 8010daa:	69ba      	ldr	r2, [r7, #24]
 8010dac:	4413      	add	r3, r2
 8010dae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8010db2:	021b      	lsls	r3, r3, #8
 8010db4:	68ba      	ldr	r2, [r7, #8]
 8010db6:	4313      	orrs	r3, r2
 8010db8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8010dba:	683b      	ldr	r3, [r7, #0]
 8010dbc:	f003 0301 	and.w	r3, r3, #1
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d002      	beq.n	8010dca <get_fat+0xf2>
 8010dc4:	68bb      	ldr	r3, [r7, #8]
 8010dc6:	091b      	lsrs	r3, r3, #4
 8010dc8:	e002      	b.n	8010dd0 <get_fat+0xf8>
 8010dca:	68bb      	ldr	r3, [r7, #8]
 8010dcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010dd0:	61fb      	str	r3, [r7, #28]
			break;
 8010dd2:	e0da      	b.n	8010f8a <get_fat+0x2b2>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010dd4:	69bb      	ldr	r3, [r7, #24]
 8010dd6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010dd8:	69bb      	ldr	r3, [r7, #24]
 8010dda:	899b      	ldrh	r3, [r3, #12]
 8010ddc:	085b      	lsrs	r3, r3, #1
 8010dde:	b29b      	uxth	r3, r3
 8010de0:	4619      	mov	r1, r3
 8010de2:	683b      	ldr	r3, [r7, #0]
 8010de4:	fbb3 f3f1 	udiv	r3, r3, r1
 8010de8:	4413      	add	r3, r2
 8010dea:	4619      	mov	r1, r3
 8010dec:	69b8      	ldr	r0, [r7, #24]
 8010dee:	f7ff feb7 	bl	8010b60 <move_window>
 8010df2:	4603      	mov	r3, r0
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	f040 80c3 	bne.w	8010f80 <get_fat+0x2a8>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 8010dfa:	69bb      	ldr	r3, [r7, #24]
 8010dfc:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 8010e00:	683b      	ldr	r3, [r7, #0]
 8010e02:	005b      	lsls	r3, r3, #1
 8010e04:	69ba      	ldr	r2, [r7, #24]
 8010e06:	8992      	ldrh	r2, [r2, #12]
 8010e08:	fbb3 f0f2 	udiv	r0, r3, r2
 8010e0c:	fb00 f202 	mul.w	r2, r0, r2
 8010e10:	1a9b      	subs	r3, r3, r2
 8010e12:	440b      	add	r3, r1
 8010e14:	4618      	mov	r0, r3
 8010e16:	f7ff fa77 	bl	8010308 <ld_word>
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	61fb      	str	r3, [r7, #28]
			break;
 8010e1e:	e0b4      	b.n	8010f8a <get_fat+0x2b2>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010e20:	69bb      	ldr	r3, [r7, #24]
 8010e22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010e24:	69bb      	ldr	r3, [r7, #24]
 8010e26:	899b      	ldrh	r3, [r3, #12]
 8010e28:	089b      	lsrs	r3, r3, #2
 8010e2a:	b29b      	uxth	r3, r3
 8010e2c:	4619      	mov	r1, r3
 8010e2e:	683b      	ldr	r3, [r7, #0]
 8010e30:	fbb3 f3f1 	udiv	r3, r3, r1
 8010e34:	4413      	add	r3, r2
 8010e36:	4619      	mov	r1, r3
 8010e38:	69b8      	ldr	r0, [r7, #24]
 8010e3a:	f7ff fe91 	bl	8010b60 <move_window>
 8010e3e:	4603      	mov	r3, r0
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	f040 809f 	bne.w	8010f84 <get_fat+0x2ac>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 8010e46:	69bb      	ldr	r3, [r7, #24]
 8010e48:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 8010e4c:	683b      	ldr	r3, [r7, #0]
 8010e4e:	009b      	lsls	r3, r3, #2
 8010e50:	69ba      	ldr	r2, [r7, #24]
 8010e52:	8992      	ldrh	r2, [r2, #12]
 8010e54:	fbb3 f0f2 	udiv	r0, r3, r2
 8010e58:	fb00 f202 	mul.w	r2, r0, r2
 8010e5c:	1a9b      	subs	r3, r3, r2
 8010e5e:	440b      	add	r3, r1
 8010e60:	4618      	mov	r0, r3
 8010e62:	f7ff fa69 	bl	8010338 <ld_dword>
 8010e66:	4603      	mov	r3, r0
 8010e68:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8010e6c:	61fb      	str	r3, [r7, #28]
			break;
 8010e6e:	e08c      	b.n	8010f8a <get_fat+0x2b2>
#if FF_FS_EXFAT
		case FS_EXFAT :
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010e76:	4313      	orrs	r3, r2
 8010e78:	d003      	beq.n	8010e82 <get_fat+0x1aa>
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	689b      	ldr	r3, [r3, #8]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d103      	bne.n	8010e8a <get_fat+0x1b2>
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	79db      	ldrb	r3, [r3, #7]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d170      	bne.n	8010f6c <get_fat+0x294>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	689b      	ldr	r3, [r3, #8]
 8010e8e:	683a      	ldr	r2, [r7, #0]
 8010e90:	1ad3      	subs	r3, r2, r3
 8010e92:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010e9a:	1e54      	subs	r4, r2, #1
 8010e9c:	f143 35ff 	adc.w	r5, r3, #4294967295
 8010ea0:	69bb      	ldr	r3, [r7, #24]
 8010ea2:	899b      	ldrh	r3, [r3, #12]
 8010ea4:	b29b      	uxth	r3, r3
 8010ea6:	2200      	movs	r2, #0
 8010ea8:	4698      	mov	r8, r3
 8010eaa:	4691      	mov	r9, r2
 8010eac:	4642      	mov	r2, r8
 8010eae:	464b      	mov	r3, r9
 8010eb0:	4620      	mov	r0, r4
 8010eb2:	4629      	mov	r1, r5
 8010eb4:	f7ef fc38 	bl	8000728 <__aeabi_uldivmod>
 8010eb8:	4602      	mov	r2, r0
 8010eba:	460b      	mov	r3, r1
 8010ebc:	69bb      	ldr	r3, [r7, #24]
 8010ebe:	895b      	ldrh	r3, [r3, #10]
 8010ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8010ec4:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	79db      	ldrb	r3, [r3, #7]
 8010eca:	2b02      	cmp	r3, #2
 8010ecc:	d10e      	bne.n	8010eec <get_fat+0x214>
 8010ece:	697a      	ldr	r2, [r7, #20]
 8010ed0:	693b      	ldr	r3, [r7, #16]
 8010ed2:	429a      	cmp	r2, r3
 8010ed4:	d80a      	bhi.n	8010eec <get_fat+0x214>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
 8010ed6:	697a      	ldr	r2, [r7, #20]
 8010ed8:	693b      	ldr	r3, [r7, #16]
 8010eda:	429a      	cmp	r2, r3
 8010edc:	d002      	beq.n	8010ee4 <get_fat+0x20c>
 8010ede:	683b      	ldr	r3, [r7, #0]
 8010ee0:	3301      	adds	r3, #1
 8010ee2:	e001      	b.n	8010ee8 <get_fat+0x210>
 8010ee4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010ee8:	61fb      	str	r3, [r7, #28]
					break;
 8010eea:	e04e      	b.n	8010f8a <get_fat+0x2b2>
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	79db      	ldrb	r3, [r3, #7]
 8010ef0:	2b03      	cmp	r3, #3
 8010ef2:	d108      	bne.n	8010f06 <get_fat+0x22e>
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	699b      	ldr	r3, [r3, #24]
 8010ef8:	697a      	ldr	r2, [r7, #20]
 8010efa:	429a      	cmp	r2, r3
 8010efc:	d203      	bcs.n	8010f06 <get_fat+0x22e>
					val = clst + 1; 	/* Generate the value */
 8010efe:	683b      	ldr	r3, [r7, #0]
 8010f00:	3301      	adds	r3, #1
 8010f02:	61fb      	str	r3, [r7, #28]
					break;
 8010f04:	e041      	b.n	8010f8a <get_fat+0x2b2>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	79db      	ldrb	r3, [r3, #7]
 8010f0a:	2b02      	cmp	r3, #2
 8010f0c:	d02e      	beq.n	8010f6c <get_fat+0x294>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	69db      	ldr	r3, [r3, #28]
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d003      	beq.n	8010f1e <get_fat+0x246>
						val = 0x7FFFFFFF;	/* Generate EOC */
 8010f16:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010f1a:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 8010f1c:	e035      	b.n	8010f8a <get_fat+0x2b2>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010f1e:	69bb      	ldr	r3, [r7, #24]
 8010f20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010f22:	69bb      	ldr	r3, [r7, #24]
 8010f24:	899b      	ldrh	r3, [r3, #12]
 8010f26:	089b      	lsrs	r3, r3, #2
 8010f28:	b29b      	uxth	r3, r3
 8010f2a:	4619      	mov	r1, r3
 8010f2c:	683b      	ldr	r3, [r7, #0]
 8010f2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8010f32:	4413      	add	r3, r2
 8010f34:	4619      	mov	r1, r3
 8010f36:	69b8      	ldr	r0, [r7, #24]
 8010f38:	f7ff fe12 	bl	8010b60 <move_window>
 8010f3c:	4603      	mov	r3, r0
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d122      	bne.n	8010f88 <get_fat+0x2b0>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8010f42:	69bb      	ldr	r3, [r7, #24]
 8010f44:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 8010f48:	683b      	ldr	r3, [r7, #0]
 8010f4a:	009b      	lsls	r3, r3, #2
 8010f4c:	69ba      	ldr	r2, [r7, #24]
 8010f4e:	8992      	ldrh	r2, [r2, #12]
 8010f50:	fbb3 f0f2 	udiv	r0, r3, r2
 8010f54:	fb00 f202 	mul.w	r2, r0, r2
 8010f58:	1a9b      	subs	r3, r3, r2
 8010f5a:	440b      	add	r3, r1
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	f7ff f9eb 	bl	8010338 <ld_dword>
 8010f62:	4603      	mov	r3, r0
 8010f64:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010f68:	61fb      	str	r3, [r7, #28]
					break;
 8010f6a:	e00e      	b.n	8010f8a <get_fat+0x2b2>
				}
			}
			val = 1;	/* Internal error */
 8010f6c:	2301      	movs	r3, #1
 8010f6e:	61fb      	str	r3, [r7, #28]
			break;
 8010f70:	e00b      	b.n	8010f8a <get_fat+0x2b2>
#endif
		default:
			val = 1;	/* Internal error */
 8010f72:	2301      	movs	r3, #1
 8010f74:	61fb      	str	r3, [r7, #28]
 8010f76:	e008      	b.n	8010f8a <get_fat+0x2b2>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010f78:	bf00      	nop
 8010f7a:	e006      	b.n	8010f8a <get_fat+0x2b2>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010f7c:	bf00      	nop
 8010f7e:	e004      	b.n	8010f8a <get_fat+0x2b2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010f80:	bf00      	nop
 8010f82:	e002      	b.n	8010f8a <get_fat+0x2b2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010f84:	bf00      	nop
 8010f86:	e000      	b.n	8010f8a <get_fat+0x2b2>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010f88:	bf00      	nop
		}
	}

	return val;
 8010f8a:	69fb      	ldr	r3, [r7, #28]
}
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	3720      	adds	r7, #32
 8010f90:	46bd      	mov	sp, r7
 8010f92:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8010f96:	bf00      	nop

08010f98 <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8010f98:	b590      	push	{r4, r7, lr}
 8010f9a:	b089      	sub	sp, #36	@ 0x24
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	60f8      	str	r0, [r7, #12]
 8010fa0:	60b9      	str	r1, [r7, #8]
 8010fa2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8010fa4:	2302      	movs	r3, #2
 8010fa6:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010fa8:	68bb      	ldr	r3, [r7, #8]
 8010faa:	2b01      	cmp	r3, #1
 8010fac:	f240 810d 	bls.w	80111ca <put_fat+0x232>
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010fb4:	68ba      	ldr	r2, [r7, #8]
 8010fb6:	429a      	cmp	r2, r3
 8010fb8:	f080 8107 	bcs.w	80111ca <put_fat+0x232>
		switch (fs->fs_type) {
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	781b      	ldrb	r3, [r3, #0]
 8010fc0:	2b04      	cmp	r3, #4
 8010fc2:	f300 8102 	bgt.w	80111ca <put_fat+0x232>
 8010fc6:	2b03      	cmp	r3, #3
 8010fc8:	f280 80b3 	bge.w	8011132 <put_fat+0x19a>
 8010fcc:	2b01      	cmp	r3, #1
 8010fce:	d003      	beq.n	8010fd8 <put_fat+0x40>
 8010fd0:	2b02      	cmp	r3, #2
 8010fd2:	f000 8083 	beq.w	80110dc <put_fat+0x144>
 8010fd6:	e0f8      	b.n	80111ca <put_fat+0x232>
		case FS_FAT12:
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 8010fd8:	68bb      	ldr	r3, [r7, #8]
 8010fda:	61bb      	str	r3, [r7, #24]
 8010fdc:	69bb      	ldr	r3, [r7, #24]
 8010fde:	085b      	lsrs	r3, r3, #1
 8010fe0:	69ba      	ldr	r2, [r7, #24]
 8010fe2:	4413      	add	r3, r2
 8010fe4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	899b      	ldrh	r3, [r3, #12]
 8010fee:	4619      	mov	r1, r3
 8010ff0:	69bb      	ldr	r3, [r7, #24]
 8010ff2:	fbb3 f3f1 	udiv	r3, r3, r1
 8010ff6:	4413      	add	r3, r2
 8010ff8:	4619      	mov	r1, r3
 8010ffa:	68f8      	ldr	r0, [r7, #12]
 8010ffc:	f7ff fdb0 	bl	8010b60 <move_window>
 8011000:	4603      	mov	r3, r0
 8011002:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011004:	7ffb      	ldrb	r3, [r7, #31]
 8011006:	2b00      	cmp	r3, #0
 8011008:	f040 80d8 	bne.w	80111bc <put_fat+0x224>
			p = fs->win + bc++ % SS(fs);
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 8011012:	69bb      	ldr	r3, [r7, #24]
 8011014:	1c5a      	adds	r2, r3, #1
 8011016:	61ba      	str	r2, [r7, #24]
 8011018:	68fa      	ldr	r2, [r7, #12]
 801101a:	8992      	ldrh	r2, [r2, #12]
 801101c:	fbb3 f0f2 	udiv	r0, r3, r2
 8011020:	fb00 f202 	mul.w	r2, r0, r2
 8011024:	1a9b      	subs	r3, r3, r2
 8011026:	440b      	add	r3, r1
 8011028:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 801102a:	68bb      	ldr	r3, [r7, #8]
 801102c:	f003 0301 	and.w	r3, r3, #1
 8011030:	2b00      	cmp	r3, #0
 8011032:	d00d      	beq.n	8011050 <put_fat+0xb8>
 8011034:	697b      	ldr	r3, [r7, #20]
 8011036:	781b      	ldrb	r3, [r3, #0]
 8011038:	b25b      	sxtb	r3, r3
 801103a:	f003 030f 	and.w	r3, r3, #15
 801103e:	b25a      	sxtb	r2, r3
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	b2db      	uxtb	r3, r3
 8011044:	011b      	lsls	r3, r3, #4
 8011046:	b25b      	sxtb	r3, r3
 8011048:	4313      	orrs	r3, r2
 801104a:	b25b      	sxtb	r3, r3
 801104c:	b2db      	uxtb	r3, r3
 801104e:	e001      	b.n	8011054 <put_fat+0xbc>
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	b2db      	uxtb	r3, r3
 8011054:	697a      	ldr	r2, [r7, #20]
 8011056:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	2201      	movs	r2, #1
 801105c:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	899b      	ldrh	r3, [r3, #12]
 8011066:	4619      	mov	r1, r3
 8011068:	69bb      	ldr	r3, [r7, #24]
 801106a:	fbb3 f3f1 	udiv	r3, r3, r1
 801106e:	4413      	add	r3, r2
 8011070:	4619      	mov	r1, r3
 8011072:	68f8      	ldr	r0, [r7, #12]
 8011074:	f7ff fd74 	bl	8010b60 <move_window>
 8011078:	4603      	mov	r3, r0
 801107a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801107c:	7ffb      	ldrb	r3, [r7, #31]
 801107e:	2b00      	cmp	r3, #0
 8011080:	f040 809e 	bne.w	80111c0 <put_fat+0x228>
			p = fs->win + bc % SS(fs);
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	899b      	ldrh	r3, [r3, #12]
 801108e:	461a      	mov	r2, r3
 8011090:	69bb      	ldr	r3, [r7, #24]
 8011092:	fbb3 f0f2 	udiv	r0, r3, r2
 8011096:	fb00 f202 	mul.w	r2, r0, r2
 801109a:	1a9b      	subs	r3, r3, r2
 801109c:	440b      	add	r3, r1
 801109e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 80110a0:	68bb      	ldr	r3, [r7, #8]
 80110a2:	f003 0301 	and.w	r3, r3, #1
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d003      	beq.n	80110b2 <put_fat+0x11a>
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	091b      	lsrs	r3, r3, #4
 80110ae:	b2db      	uxtb	r3, r3
 80110b0:	e00e      	b.n	80110d0 <put_fat+0x138>
 80110b2:	697b      	ldr	r3, [r7, #20]
 80110b4:	781b      	ldrb	r3, [r3, #0]
 80110b6:	b25b      	sxtb	r3, r3
 80110b8:	f023 030f 	bic.w	r3, r3, #15
 80110bc:	b25a      	sxtb	r2, r3
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	0a1b      	lsrs	r3, r3, #8
 80110c2:	b25b      	sxtb	r3, r3
 80110c4:	f003 030f 	and.w	r3, r3, #15
 80110c8:	b25b      	sxtb	r3, r3
 80110ca:	4313      	orrs	r3, r2
 80110cc:	b25b      	sxtb	r3, r3
 80110ce:	b2db      	uxtb	r3, r3
 80110d0:	697a      	ldr	r2, [r7, #20]
 80110d2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	2201      	movs	r2, #1
 80110d8:	711a      	strb	r2, [r3, #4]
			break;
 80110da:	e076      	b.n	80111ca <put_fat+0x232>

		case FS_FAT16:
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	899b      	ldrh	r3, [r3, #12]
 80110e4:	085b      	lsrs	r3, r3, #1
 80110e6:	b29b      	uxth	r3, r3
 80110e8:	4619      	mov	r1, r3
 80110ea:	68bb      	ldr	r3, [r7, #8]
 80110ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80110f0:	4413      	add	r3, r2
 80110f2:	4619      	mov	r1, r3
 80110f4:	68f8      	ldr	r0, [r7, #12]
 80110f6:	f7ff fd33 	bl	8010b60 <move_window>
 80110fa:	4603      	mov	r3, r0
 80110fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80110fe:	7ffb      	ldrb	r3, [r7, #31]
 8011100:	2b00      	cmp	r3, #0
 8011102:	d15f      	bne.n	80111c4 <put_fat+0x22c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 801110a:	68bb      	ldr	r3, [r7, #8]
 801110c:	005b      	lsls	r3, r3, #1
 801110e:	68fa      	ldr	r2, [r7, #12]
 8011110:	8992      	ldrh	r2, [r2, #12]
 8011112:	fbb3 f0f2 	udiv	r0, r3, r2
 8011116:	fb00 f202 	mul.w	r2, r0, r2
 801111a:	1a9b      	subs	r3, r3, r2
 801111c:	440b      	add	r3, r1
 801111e:	687a      	ldr	r2, [r7, #4]
 8011120:	b292      	uxth	r2, r2
 8011122:	4611      	mov	r1, r2
 8011124:	4618      	mov	r0, r3
 8011126:	f7ff fa05 	bl	8010534 <st_word>
			fs->wflag = 1;
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	2201      	movs	r2, #1
 801112e:	711a      	strb	r2, [r3, #4]
			break;
 8011130:	e04b      	b.n	80111ca <put_fat+0x232>

		case FS_FAT32:
#if FF_FS_EXFAT
		case FS_EXFAT:
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	899b      	ldrh	r3, [r3, #12]
 801113a:	089b      	lsrs	r3, r3, #2
 801113c:	b29b      	uxth	r3, r3
 801113e:	4619      	mov	r1, r3
 8011140:	68bb      	ldr	r3, [r7, #8]
 8011142:	fbb3 f3f1 	udiv	r3, r3, r1
 8011146:	4413      	add	r3, r2
 8011148:	4619      	mov	r1, r3
 801114a:	68f8      	ldr	r0, [r7, #12]
 801114c:	f7ff fd08 	bl	8010b60 <move_window>
 8011150:	4603      	mov	r3, r0
 8011152:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011154:	7ffb      	ldrb	r3, [r7, #31]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d136      	bne.n	80111c8 <put_fat+0x230>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	781b      	ldrb	r3, [r3, #0]
 801115e:	2b04      	cmp	r3, #4
 8011160:	d017      	beq.n	8011192 <put_fat+0x1fa>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 801116e:	68bb      	ldr	r3, [r7, #8]
 8011170:	009b      	lsls	r3, r3, #2
 8011172:	68fa      	ldr	r2, [r7, #12]
 8011174:	8992      	ldrh	r2, [r2, #12]
 8011176:	fbb3 f0f2 	udiv	r0, r3, r2
 801117a:	fb00 f202 	mul.w	r2, r0, r2
 801117e:	1a9b      	subs	r3, r3, r2
 8011180:	440b      	add	r3, r1
 8011182:	4618      	mov	r0, r3
 8011184:	f7ff f8d8 	bl	8010338 <ld_dword>
 8011188:	4603      	mov	r3, r0
 801118a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 801118e:	4323      	orrs	r3, r4
 8011190:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 8011198:	68bb      	ldr	r3, [r7, #8]
 801119a:	009b      	lsls	r3, r3, #2
 801119c:	68fa      	ldr	r2, [r7, #12]
 801119e:	8992      	ldrh	r2, [r2, #12]
 80111a0:	fbb3 f0f2 	udiv	r0, r3, r2
 80111a4:	fb00 f202 	mul.w	r2, r0, r2
 80111a8:	1a9b      	subs	r3, r3, r2
 80111aa:	440b      	add	r3, r1
 80111ac:	6879      	ldr	r1, [r7, #4]
 80111ae:	4618      	mov	r0, r3
 80111b0:	f7ff f9db 	bl	801056a <st_dword>
			fs->wflag = 1;
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	2201      	movs	r2, #1
 80111b8:	711a      	strb	r2, [r3, #4]
			break;
 80111ba:	e006      	b.n	80111ca <put_fat+0x232>
			if (res != FR_OK) break;
 80111bc:	bf00      	nop
 80111be:	e004      	b.n	80111ca <put_fat+0x232>
			if (res != FR_OK) break;
 80111c0:	bf00      	nop
 80111c2:	e002      	b.n	80111ca <put_fat+0x232>
			if (res != FR_OK) break;
 80111c4:	bf00      	nop
 80111c6:	e000      	b.n	80111ca <put_fat+0x232>
			if (res != FR_OK) break;
 80111c8:	bf00      	nop
		}
	}
	return res;
 80111ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80111cc:	4618      	mov	r0, r3
 80111ce:	3724      	adds	r7, #36	@ 0x24
 80111d0:	46bd      	mov	sp, r7
 80111d2:	bd90      	pop	{r4, r7, pc}

080111d4 <find_bitmap>:
static DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* Filesystem object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b08a      	sub	sp, #40	@ 0x28
 80111d8:	af00      	add	r7, sp, #0
 80111da:	60f8      	str	r0, [r7, #12]
 80111dc:	60b9      	str	r1, [r7, #8]
 80111de:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 80111e0:	68bb      	ldr	r3, [r7, #8]
 80111e2:	3b02      	subs	r3, #2
 80111e4:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80111ea:	3b02      	subs	r3, #2
 80111ec:	68ba      	ldr	r2, [r7, #8]
 80111ee:	429a      	cmp	r2, r3
 80111f0:	d301      	bcc.n	80111f6 <find_bitmap+0x22>
 80111f2:	2300      	movs	r3, #0
 80111f4:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 80111f6:	68bb      	ldr	r3, [r7, #8]
 80111f8:	61fb      	str	r3, [r7, #28]
 80111fa:	69fb      	ldr	r3, [r7, #28]
 80111fc:	61bb      	str	r3, [r7, #24]
 80111fe:	2300      	movs	r3, #0
 8011200:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8011206:	69fb      	ldr	r3, [r7, #28]
 8011208:	08db      	lsrs	r3, r3, #3
 801120a:	68f9      	ldr	r1, [r7, #12]
 801120c:	8989      	ldrh	r1, [r1, #12]
 801120e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011212:	4413      	add	r3, r2
 8011214:	4619      	mov	r1, r3
 8011216:	68f8      	ldr	r0, [r7, #12]
 8011218:	f7ff fca2 	bl	8010b60 <move_window>
 801121c:	4603      	mov	r3, r0
 801121e:	2b00      	cmp	r3, #0
 8011220:	d002      	beq.n	8011228 <find_bitmap+0x54>
 8011222:	f04f 33ff 	mov.w	r3, #4294967295
 8011226:	e058      	b.n	80112da <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8011228:	69fb      	ldr	r3, [r7, #28]
 801122a:	08db      	lsrs	r3, r3, #3
 801122c:	68fa      	ldr	r2, [r7, #12]
 801122e:	8992      	ldrh	r2, [r2, #12]
 8011230:	fbb3 f1f2 	udiv	r1, r3, r2
 8011234:	fb01 f202 	mul.w	r2, r1, r2
 8011238:	1a9b      	subs	r3, r3, r2
 801123a:	623b      	str	r3, [r7, #32]
 801123c:	69fb      	ldr	r3, [r7, #28]
 801123e:	f003 0307 	and.w	r3, r3, #7
 8011242:	2201      	movs	r2, #1
 8011244:	fa02 f303 	lsl.w	r3, r2, r3
 8011248:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 801124c:	68fa      	ldr	r2, [r7, #12]
 801124e:	6a3b      	ldr	r3, [r7, #32]
 8011250:	4413      	add	r3, r2
 8011252:	3350      	adds	r3, #80	@ 0x50
 8011254:	781a      	ldrb	r2, [r3, #0]
 8011256:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801125a:	4013      	ands	r3, r2
 801125c:	74fb      	strb	r3, [r7, #19]
 801125e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011262:	005b      	lsls	r3, r3, #1
 8011264:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8011268:	69fb      	ldr	r3, [r7, #28]
 801126a:	3301      	adds	r3, #1
 801126c:	61fb      	str	r3, [r7, #28]
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011272:	3b02      	subs	r3, #2
 8011274:	69fa      	ldr	r2, [r7, #28]
 8011276:	429a      	cmp	r2, r3
 8011278:	d307      	bcc.n	801128a <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 801127a:	2300      	movs	r3, #0
 801127c:	61fb      	str	r3, [r7, #28]
 801127e:	2300      	movs	r3, #0
 8011280:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	899b      	ldrh	r3, [r3, #12]
 8011288:	623b      	str	r3, [r7, #32]
				}
				if (bv == 0) {	/* Is it a free cluster? */
 801128a:	7cfb      	ldrb	r3, [r7, #19]
 801128c:	2b00      	cmp	r3, #0
 801128e:	d109      	bne.n	80112a4 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 8011290:	697b      	ldr	r3, [r7, #20]
 8011292:	3301      	adds	r3, #1
 8011294:	617b      	str	r3, [r7, #20]
 8011296:	697a      	ldr	r2, [r7, #20]
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	429a      	cmp	r2, r3
 801129c:	d106      	bne.n	80112ac <find_bitmap+0xd8>
 801129e:	69bb      	ldr	r3, [r7, #24]
 80112a0:	3302      	adds	r3, #2
 80112a2:	e01a      	b.n	80112da <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 80112a4:	69fb      	ldr	r3, [r7, #28]
 80112a6:	61bb      	str	r3, [r7, #24]
 80112a8:	2300      	movs	r3, #0
 80112aa:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 80112ac:	69fa      	ldr	r2, [r7, #28]
 80112ae:	68bb      	ldr	r3, [r7, #8]
 80112b0:	429a      	cmp	r2, r3
 80112b2:	d101      	bne.n	80112b8 <find_bitmap+0xe4>
 80112b4:	2300      	movs	r3, #0
 80112b6:	e010      	b.n	80112da <find_bitmap+0x106>
			} while (bm != 0);
 80112b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d1c5      	bne.n	801124c <find_bitmap+0x78>
			bm = 1;
 80112c0:	2301      	movs	r3, #1
 80112c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		} while (++i < SS(fs));
 80112c6:	6a3b      	ldr	r3, [r7, #32]
 80112c8:	3301      	adds	r3, #1
 80112ca:	623b      	str	r3, [r7, #32]
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	899b      	ldrh	r3, [r3, #12]
 80112d0:	461a      	mov	r2, r3
 80112d2:	6a3b      	ldr	r3, [r7, #32]
 80112d4:	4293      	cmp	r3, r2
 80112d6:	d3b9      	bcc.n	801124c <find_bitmap+0x78>
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 80112d8:	e793      	b.n	8011202 <find_bitmap+0x2e>
	}
}
 80112da:	4618      	mov	r0, r3
 80112dc:	3728      	adds	r7, #40	@ 0x28
 80112de:	46bd      	mov	sp, r7
 80112e0:	bd80      	pop	{r7, pc}

080112e2 <change_bitmap>:
	FATFS* fs,	/* Filesystem object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 80112e2:	b580      	push	{r7, lr}
 80112e4:	b088      	sub	sp, #32
 80112e6:	af00      	add	r7, sp, #0
 80112e8:	60f8      	str	r0, [r7, #12]
 80112ea:	60b9      	str	r1, [r7, #8]
 80112ec:	607a      	str	r2, [r7, #4]
 80112ee:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	LBA_t sect;


	clst -= 2;	/* The first bit corresponds to cluster #2 */
 80112f0:	68bb      	ldr	r3, [r7, #8]
 80112f2:	3b02      	subs	r3, #2
 80112f4:	60bb      	str	r3, [r7, #8]
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80112fa:	68bb      	ldr	r3, [r7, #8]
 80112fc:	08db      	lsrs	r3, r3, #3
 80112fe:	68f9      	ldr	r1, [r7, #12]
 8011300:	8989      	ldrh	r1, [r1, #12]
 8011302:	fbb3 f3f1 	udiv	r3, r3, r1
 8011306:	4413      	add	r3, r2
 8011308:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);					/* Byte offset in the sector */
 801130a:	68bb      	ldr	r3, [r7, #8]
 801130c:	08db      	lsrs	r3, r3, #3
 801130e:	68fa      	ldr	r2, [r7, #12]
 8011310:	8992      	ldrh	r2, [r2, #12]
 8011312:	fbb3 f1f2 	udiv	r1, r3, r2
 8011316:	fb01 f202 	mul.w	r2, r1, r2
 801131a:	1a9b      	subs	r3, r3, r2
 801131c:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
 801131e:	68bb      	ldr	r3, [r7, #8]
 8011320:	f003 0307 	and.w	r3, r3, #7
 8011324:	2201      	movs	r2, #1
 8011326:	fa02 f303 	lsl.w	r3, r2, r3
 801132a:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 801132c:	697b      	ldr	r3, [r7, #20]
 801132e:	1c5a      	adds	r2, r3, #1
 8011330:	617a      	str	r2, [r7, #20]
 8011332:	4619      	mov	r1, r3
 8011334:	68f8      	ldr	r0, [r7, #12]
 8011336:	f7ff fc13 	bl	8010b60 <move_window>
 801133a:	4603      	mov	r3, r0
 801133c:	2b00      	cmp	r3, #0
 801133e:	d001      	beq.n	8011344 <change_bitmap+0x62>
 8011340:	2301      	movs	r3, #1
 8011342:	e03f      	b.n	80113c4 <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8011344:	68fa      	ldr	r2, [r7, #12]
 8011346:	69bb      	ldr	r3, [r7, #24]
 8011348:	4413      	add	r3, r2
 801134a:	3350      	adds	r3, #80	@ 0x50
 801134c:	781a      	ldrb	r2, [r3, #0]
 801134e:	7ffb      	ldrb	r3, [r7, #31]
 8011350:	4013      	ands	r3, r2
 8011352:	b2db      	uxtb	r3, r3
 8011354:	2b00      	cmp	r3, #0
 8011356:	bf14      	ite	ne
 8011358:	2301      	movne	r3, #1
 801135a:	2300      	moveq	r3, #0
 801135c:	b2db      	uxtb	r3, r3
 801135e:	461a      	mov	r2, r3
 8011360:	683b      	ldr	r3, [r7, #0]
 8011362:	4293      	cmp	r3, r2
 8011364:	d101      	bne.n	801136a <change_bitmap+0x88>
 8011366:	2302      	movs	r3, #2
 8011368:	e02c      	b.n	80113c4 <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 801136a:	68fa      	ldr	r2, [r7, #12]
 801136c:	69bb      	ldr	r3, [r7, #24]
 801136e:	4413      	add	r3, r2
 8011370:	3350      	adds	r3, #80	@ 0x50
 8011372:	781a      	ldrb	r2, [r3, #0]
 8011374:	7ffb      	ldrb	r3, [r7, #31]
 8011376:	4053      	eors	r3, r2
 8011378:	b2d9      	uxtb	r1, r3
 801137a:	68fa      	ldr	r2, [r7, #12]
 801137c:	69bb      	ldr	r3, [r7, #24]
 801137e:	4413      	add	r3, r2
 8011380:	3350      	adds	r3, #80	@ 0x50
 8011382:	460a      	mov	r2, r1
 8011384:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	2201      	movs	r2, #1
 801138a:	711a      	strb	r2, [r3, #4]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	3b01      	subs	r3, #1
 8011390:	607b      	str	r3, [r7, #4]
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	2b00      	cmp	r3, #0
 8011396:	d101      	bne.n	801139c <change_bitmap+0xba>
 8011398:	2300      	movs	r3, #0
 801139a:	e013      	b.n	80113c4 <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 801139c:	7ffb      	ldrb	r3, [r7, #31]
 801139e:	005b      	lsls	r3, r3, #1
 80113a0:	77fb      	strb	r3, [r7, #31]
 80113a2:	7ffb      	ldrb	r3, [r7, #31]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d1cd      	bne.n	8011344 <change_bitmap+0x62>
			bm = 1;
 80113a8:	2301      	movs	r3, #1
 80113aa:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 80113ac:	69bb      	ldr	r3, [r7, #24]
 80113ae:	3301      	adds	r3, #1
 80113b0:	61bb      	str	r3, [r7, #24]
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	899b      	ldrh	r3, [r3, #12]
 80113b6:	461a      	mov	r2, r3
 80113b8:	69bb      	ldr	r3, [r7, #24]
 80113ba:	4293      	cmp	r3, r2
 80113bc:	d3c2      	bcc.n	8011344 <change_bitmap+0x62>
		i = 0;
 80113be:	2300      	movs	r3, #0
 80113c0:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 80113c2:	e7b3      	b.n	801132c <change_bitmap+0x4a>
	}
}
 80113c4:	4618      	mov	r0, r3
 80113c6:	3720      	adds	r7, #32
 80113c8:	46bd      	mov	sp, r7
 80113ca:	bd80      	pop	{r7, pc}

080113cc <fill_first_frag>:
/*---------------------------------------------*/

static FRESULT fill_first_frag (
	FFOBJID* obj	/* Pointer to the corresponding object */
)
{
 80113cc:	b580      	push	{r7, lr}
 80113ce:	b086      	sub	sp, #24
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;


	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	79db      	ldrb	r3, [r3, #7]
 80113d8:	2b03      	cmp	r3, #3
 80113da:	d121      	bne.n	8011420 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	689b      	ldr	r3, [r3, #8]
 80113e0:	617b      	str	r3, [r7, #20]
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	699b      	ldr	r3, [r3, #24]
 80113e6:	613b      	str	r3, [r7, #16]
 80113e8:	e014      	b.n	8011414 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	6818      	ldr	r0, [r3, #0]
 80113ee:	697b      	ldr	r3, [r7, #20]
 80113f0:	3301      	adds	r3, #1
 80113f2:	461a      	mov	r2, r3
 80113f4:	6979      	ldr	r1, [r7, #20]
 80113f6:	f7ff fdcf 	bl	8010f98 <put_fat>
 80113fa:	4603      	mov	r3, r0
 80113fc:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 80113fe:	7bfb      	ldrb	r3, [r7, #15]
 8011400:	2b00      	cmp	r3, #0
 8011402:	d001      	beq.n	8011408 <fill_first_frag+0x3c>
 8011404:	7bfb      	ldrb	r3, [r7, #15]
 8011406:	e00c      	b.n	8011422 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8011408:	697b      	ldr	r3, [r7, #20]
 801140a:	3301      	adds	r3, #1
 801140c:	617b      	str	r3, [r7, #20]
 801140e:	693b      	ldr	r3, [r7, #16]
 8011410:	3b01      	subs	r3, #1
 8011412:	613b      	str	r3, [r7, #16]
 8011414:	693b      	ldr	r3, [r7, #16]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d1e7      	bne.n	80113ea <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	2200      	movs	r2, #0
 801141e:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 8011420:	2300      	movs	r3, #0
}
 8011422:	4618      	mov	r0, r3
 8011424:	3718      	adds	r7, #24
 8011426:	46bd      	mov	sp, r7
 8011428:	bd80      	pop	{r7, pc}

0801142a <fill_last_frag>:
static FRESULT fill_last_frag (
	FFOBJID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,		/* Last cluster of the fragment */
	DWORD term		/* Value to set the last FAT entry */
)
{
 801142a:	b580      	push	{r7, lr}
 801142c:	b086      	sub	sp, #24
 801142e:	af00      	add	r7, sp, #0
 8011430:	60f8      	str	r0, [r7, #12]
 8011432:	60b9      	str	r1, [r7, #8]
 8011434:	607a      	str	r2, [r7, #4]
	FRESULT res;


	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 8011436:	e020      	b.n	801147a <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	6818      	ldr	r0, [r3, #0]
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	69db      	ldr	r3, [r3, #28]
 8011440:	68ba      	ldr	r2, [r7, #8]
 8011442:	1ad3      	subs	r3, r2, r3
 8011444:	1c59      	adds	r1, r3, #1
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	69db      	ldr	r3, [r3, #28]
 801144a:	2b01      	cmp	r3, #1
 801144c:	d905      	bls.n	801145a <fill_last_frag+0x30>
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	69db      	ldr	r3, [r3, #28]
 8011452:	68ba      	ldr	r2, [r7, #8]
 8011454:	1ad3      	subs	r3, r2, r3
 8011456:	3302      	adds	r3, #2
 8011458:	e000      	b.n	801145c <fill_last_frag+0x32>
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	461a      	mov	r2, r3
 801145e:	f7ff fd9b 	bl	8010f98 <put_fat>
 8011462:	4603      	mov	r3, r0
 8011464:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 8011466:	7dfb      	ldrb	r3, [r7, #23]
 8011468:	2b00      	cmp	r3, #0
 801146a:	d001      	beq.n	8011470 <fill_last_frag+0x46>
 801146c:	7dfb      	ldrb	r3, [r7, #23]
 801146e:	e009      	b.n	8011484 <fill_last_frag+0x5a>
		obj->n_frag--;
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	69db      	ldr	r3, [r3, #28]
 8011474:	1e5a      	subs	r2, r3, #1
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	69db      	ldr	r3, [r3, #28]
 801147e:	2b00      	cmp	r3, #0
 8011480:	d1da      	bne.n	8011438 <fill_last_frag+0xe>
	}
	return FR_OK;
 8011482:	2300      	movs	r3, #0
}
 8011484:	4618      	mov	r0, r3
 8011486:	3718      	adds	r7, #24
 8011488:	46bd      	mov	sp, r7
 801148a:	bd80      	pop	{r7, pc}

0801148c <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 801148c:	b580      	push	{r7, lr}
 801148e:	b08a      	sub	sp, #40	@ 0x28
 8011490:	af00      	add	r7, sp, #0
 8011492:	60f8      	str	r0, [r7, #12]
 8011494:	60b9      	str	r1, [r7, #8]
 8011496:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8011498:	2300      	movs	r3, #0
 801149a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	61bb      	str	r3, [r7, #24]
#if FF_FS_EXFAT || FF_USE_TRIM
	DWORD scl = clst, ecl = clst;
 80114a2:	68bb      	ldr	r3, [r7, #8]
 80114a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80114a6:	68bb      	ldr	r3, [r7, #8]
 80114a8:	623b      	str	r3, [r7, #32]
#endif
#if FF_USE_TRIM
	LBA_t rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80114aa:	68bb      	ldr	r3, [r7, #8]
 80114ac:	2b01      	cmp	r3, #1
 80114ae:	d904      	bls.n	80114ba <remove_chain+0x2e>
 80114b0:	69bb      	ldr	r3, [r7, #24]
 80114b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80114b4:	68ba      	ldr	r2, [r7, #8]
 80114b6:	429a      	cmp	r2, r3
 80114b8:	d301      	bcc.n	80114be <remove_chain+0x32>
 80114ba:	2302      	movs	r3, #2
 80114bc:	e0c4      	b.n	8011648 <remove_chain+0x1bc>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d014      	beq.n	80114ee <remove_chain+0x62>
 80114c4:	69bb      	ldr	r3, [r7, #24]
 80114c6:	781b      	ldrb	r3, [r3, #0]
 80114c8:	2b04      	cmp	r3, #4
 80114ca:	d103      	bne.n	80114d4 <remove_chain+0x48>
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	79db      	ldrb	r3, [r3, #7]
 80114d0:	2b02      	cmp	r3, #2
 80114d2:	d00c      	beq.n	80114ee <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80114d4:	f04f 32ff 	mov.w	r2, #4294967295
 80114d8:	6879      	ldr	r1, [r7, #4]
 80114da:	69b8      	ldr	r0, [r7, #24]
 80114dc:	f7ff fd5c 	bl	8010f98 <put_fat>
 80114e0:	4603      	mov	r3, r0
 80114e2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80114e4:	7ffb      	ldrb	r3, [r7, #31]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d001      	beq.n	80114ee <remove_chain+0x62>
 80114ea:	7ffb      	ldrb	r3, [r7, #31]
 80114ec:	e0ac      	b.n	8011648 <remove_chain+0x1bc>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80114ee:	68b9      	ldr	r1, [r7, #8]
 80114f0:	68f8      	ldr	r0, [r7, #12]
 80114f2:	f7ff fbf1 	bl	8010cd8 <get_fat>
 80114f6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80114f8:	697b      	ldr	r3, [r7, #20]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d055      	beq.n	80115aa <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80114fe:	697b      	ldr	r3, [r7, #20]
 8011500:	2b01      	cmp	r3, #1
 8011502:	d101      	bne.n	8011508 <remove_chain+0x7c>
 8011504:	2302      	movs	r3, #2
 8011506:	e09f      	b.n	8011648 <remove_chain+0x1bc>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8011508:	697b      	ldr	r3, [r7, #20]
 801150a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801150e:	d101      	bne.n	8011514 <remove_chain+0x88>
 8011510:	2301      	movs	r3, #1
 8011512:	e099      	b.n	8011648 <remove_chain+0x1bc>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8011514:	69bb      	ldr	r3, [r7, #24]
 8011516:	781b      	ldrb	r3, [r3, #0]
 8011518:	2b04      	cmp	r3, #4
 801151a:	d00b      	beq.n	8011534 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801151c:	2200      	movs	r2, #0
 801151e:	68b9      	ldr	r1, [r7, #8]
 8011520:	69b8      	ldr	r0, [r7, #24]
 8011522:	f7ff fd39 	bl	8010f98 <put_fat>
 8011526:	4603      	mov	r3, r0
 8011528:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801152a:	7ffb      	ldrb	r3, [r7, #31]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d001      	beq.n	8011534 <remove_chain+0xa8>
 8011530:	7ffb      	ldrb	r3, [r7, #31]
 8011532:	e089      	b.n	8011648 <remove_chain+0x1bc>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011534:	69bb      	ldr	r3, [r7, #24]
 8011536:	69da      	ldr	r2, [r3, #28]
 8011538:	69bb      	ldr	r3, [r7, #24]
 801153a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801153c:	3b02      	subs	r3, #2
 801153e:	429a      	cmp	r2, r3
 8011540:	d20b      	bcs.n	801155a <remove_chain+0xce>
			fs->free_clst++;
 8011542:	69bb      	ldr	r3, [r7, #24]
 8011544:	69db      	ldr	r3, [r3, #28]
 8011546:	1c5a      	adds	r2, r3, #1
 8011548:	69bb      	ldr	r3, [r7, #24]
 801154a:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 801154c:	69bb      	ldr	r3, [r7, #24]
 801154e:	795b      	ldrb	r3, [r3, #5]
 8011550:	f043 0301 	orr.w	r3, r3, #1
 8011554:	b2da      	uxtb	r2, r3
 8011556:	69bb      	ldr	r3, [r7, #24]
 8011558:	715a      	strb	r2, [r3, #5]
		}
#if FF_FS_EXFAT || FF_USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 801155a:	6a3b      	ldr	r3, [r7, #32]
 801155c:	3301      	adds	r3, #1
 801155e:	697a      	ldr	r2, [r7, #20]
 8011560:	429a      	cmp	r2, r3
 8011562:	d102      	bne.n	801156a <remove_chain+0xde>
			ecl = nxt;
 8011564:	697b      	ldr	r3, [r7, #20]
 8011566:	623b      	str	r3, [r7, #32]
 8011568:	e017      	b.n	801159a <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 801156a:	69bb      	ldr	r3, [r7, #24]
 801156c:	781b      	ldrb	r3, [r3, #0]
 801156e:	2b04      	cmp	r3, #4
 8011570:	d10f      	bne.n	8011592 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 8011572:	6a3a      	ldr	r2, [r7, #32]
 8011574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011576:	1ad3      	subs	r3, r2, r3
 8011578:	1c5a      	adds	r2, r3, #1
 801157a:	2300      	movs	r3, #0
 801157c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801157e:	69b8      	ldr	r0, [r7, #24]
 8011580:	f7ff feaf 	bl	80112e2 <change_bitmap>
 8011584:	4603      	mov	r3, r0
 8011586:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 8011588:	7ffb      	ldrb	r3, [r7, #31]
 801158a:	2b00      	cmp	r3, #0
 801158c:	d001      	beq.n	8011592 <remove_chain+0x106>
 801158e:	7ffb      	ldrb	r3, [r7, #31]
 8011590:	e05a      	b.n	8011648 <remove_chain+0x1bc>
#if FF_USE_TRIM
			rt[0] = clst2sect(fs, scl);					/* Start of data area to be freed */
			rt[1] = clst2sect(fs, ecl) + fs->csize - 1;	/* End of data area to be freed */
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform storage device that the data in the block may be erased */
#endif
			scl = ecl = nxt;
 8011592:	697b      	ldr	r3, [r7, #20]
 8011594:	623b      	str	r3, [r7, #32]
 8011596:	6a3b      	ldr	r3, [r7, #32]
 8011598:	627b      	str	r3, [r7, #36]	@ 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 801159a:	697b      	ldr	r3, [r7, #20]
 801159c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801159e:	69bb      	ldr	r3, [r7, #24]
 80115a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80115a2:	68ba      	ldr	r2, [r7, #8]
 80115a4:	429a      	cmp	r2, r3
 80115a6:	d3a2      	bcc.n	80114ee <remove_chain+0x62>
 80115a8:	e000      	b.n	80115ac <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 80115aa:	bf00      	nop

#if FF_FS_EXFAT
	/* Some post processes for chain status */
	if (fs->fs_type == FS_EXFAT) {
 80115ac:	69bb      	ldr	r3, [r7, #24]
 80115ae:	781b      	ldrb	r3, [r3, #0]
 80115b0:	2b04      	cmp	r3, #4
 80115b2:	d148      	bne.n	8011646 <remove_chain+0x1ba>
		if (pclst == 0) {	/* Has the entire chain been removed? */
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d103      	bne.n	80115c2 <remove_chain+0x136>
			obj->stat = 0;		/* Change the chain status 'initial' */
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	2200      	movs	r2, #0
 80115be:	71da      	strb	r2, [r3, #7]
 80115c0:	e041      	b.n	8011646 <remove_chain+0x1ba>
		} else {
			if (obj->stat == 0) {	/* Is it a fragmented chain from the beginning of this session? */
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	79db      	ldrb	r3, [r3, #7]
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d129      	bne.n	801161e <remove_chain+0x192>
				clst = obj->sclust;		/* Follow the chain to check if it gets contiguous */
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	689b      	ldr	r3, [r3, #8]
 80115ce:	60bb      	str	r3, [r7, #8]
				while (clst != pclst) {
 80115d0:	e017      	b.n	8011602 <remove_chain+0x176>
					nxt = get_fat(obj, clst);
 80115d2:	68b9      	ldr	r1, [r7, #8]
 80115d4:	68f8      	ldr	r0, [r7, #12]
 80115d6:	f7ff fb7f 	bl	8010cd8 <get_fat>
 80115da:	6178      	str	r0, [r7, #20]
					if (nxt < 2) return FR_INT_ERR;
 80115dc:	697b      	ldr	r3, [r7, #20]
 80115de:	2b01      	cmp	r3, #1
 80115e0:	d801      	bhi.n	80115e6 <remove_chain+0x15a>
 80115e2:	2302      	movs	r3, #2
 80115e4:	e030      	b.n	8011648 <remove_chain+0x1bc>
					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
 80115e6:	697b      	ldr	r3, [r7, #20]
 80115e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115ec:	d101      	bne.n	80115f2 <remove_chain+0x166>
 80115ee:	2301      	movs	r3, #1
 80115f0:	e02a      	b.n	8011648 <remove_chain+0x1bc>
					if (nxt != clst + 1) break;	/* Not contiguous? */
 80115f2:	68bb      	ldr	r3, [r7, #8]
 80115f4:	3301      	adds	r3, #1
 80115f6:	697a      	ldr	r2, [r7, #20]
 80115f8:	429a      	cmp	r2, r3
 80115fa:	d107      	bne.n	801160c <remove_chain+0x180>
					clst++;
 80115fc:	68bb      	ldr	r3, [r7, #8]
 80115fe:	3301      	adds	r3, #1
 8011600:	60bb      	str	r3, [r7, #8]
				while (clst != pclst) {
 8011602:	68ba      	ldr	r2, [r7, #8]
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	429a      	cmp	r2, r3
 8011608:	d1e3      	bne.n	80115d2 <remove_chain+0x146>
 801160a:	e000      	b.n	801160e <remove_chain+0x182>
					if (nxt != clst + 1) break;	/* Not contiguous? */
 801160c:	bf00      	nop
				}
				if (clst == pclst) {	/* Has the chain got contiguous again? */
 801160e:	68ba      	ldr	r2, [r7, #8]
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	429a      	cmp	r2, r3
 8011614:	d117      	bne.n	8011646 <remove_chain+0x1ba>
					obj->stat = 2;		/* Change the chain status 'contiguous' */
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	2202      	movs	r2, #2
 801161a:	71da      	strb	r2, [r3, #7]
 801161c:	e013      	b.n	8011646 <remove_chain+0x1ba>
				}
			} else {
				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the chain fragmented in this session and got contiguous again? */
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	79db      	ldrb	r3, [r3, #7]
 8011622:	2b03      	cmp	r3, #3
 8011624:	d10f      	bne.n	8011646 <remove_chain+0x1ba>
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	689b      	ldr	r3, [r3, #8]
 801162a:	687a      	ldr	r2, [r7, #4]
 801162c:	429a      	cmp	r2, r3
 801162e:	d30a      	bcc.n	8011646 <remove_chain+0x1ba>
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	689a      	ldr	r2, [r3, #8]
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	699b      	ldr	r3, [r3, #24]
 8011638:	4413      	add	r3, r2
 801163a:	687a      	ldr	r2, [r7, #4]
 801163c:	429a      	cmp	r2, r3
 801163e:	d802      	bhi.n	8011646 <remove_chain+0x1ba>
					obj->stat = 2;	/* Change the chain status 'contiguous' */
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	2202      	movs	r2, #2
 8011644:	71da      	strb	r2, [r3, #7]
				}
			}
		}
	}
#endif
	return FR_OK;
 8011646:	2300      	movs	r3, #0
}
 8011648:	4618      	mov	r0, r3
 801164a:	3728      	adds	r7, #40	@ 0x28
 801164c:	46bd      	mov	sp, r7
 801164e:	bd80      	pop	{r7, pc}

08011650 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b088      	sub	sp, #32
 8011654:	af00      	add	r7, sp, #0
 8011656:	6078      	str	r0, [r7, #4]
 8011658:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8011660:	683b      	ldr	r3, [r7, #0]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d10d      	bne.n	8011682 <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 8011666:	693b      	ldr	r3, [r7, #16]
 8011668:	699b      	ldr	r3, [r3, #24]
 801166a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801166c:	69bb      	ldr	r3, [r7, #24]
 801166e:	2b00      	cmp	r3, #0
 8011670:	d004      	beq.n	801167c <create_chain+0x2c>
 8011672:	693b      	ldr	r3, [r7, #16]
 8011674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011676:	69ba      	ldr	r2, [r7, #24]
 8011678:	429a      	cmp	r2, r3
 801167a:	d31b      	bcc.n	80116b4 <create_chain+0x64>
 801167c:	2301      	movs	r3, #1
 801167e:	61bb      	str	r3, [r7, #24]
 8011680:	e018      	b.n	80116b4 <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8011682:	6839      	ldr	r1, [r7, #0]
 8011684:	6878      	ldr	r0, [r7, #4]
 8011686:	f7ff fb27 	bl	8010cd8 <get_fat>
 801168a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	2b01      	cmp	r3, #1
 8011690:	d801      	bhi.n	8011696 <create_chain+0x46>
 8011692:	2301      	movs	r3, #1
 8011694:	e113      	b.n	80118be <create_chain+0x26e>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	f1b3 3fff 	cmp.w	r3, #4294967295
 801169c:	d101      	bne.n	80116a2 <create_chain+0x52>
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	e10d      	b.n	80118be <create_chain+0x26e>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80116a2:	693b      	ldr	r3, [r7, #16]
 80116a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80116a6:	68fa      	ldr	r2, [r7, #12]
 80116a8:	429a      	cmp	r2, r3
 80116aa:	d201      	bcs.n	80116b0 <create_chain+0x60>
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	e106      	b.n	80118be <create_chain+0x26e>
		scl = clst;							/* Cluster to start to find */
 80116b0:	683b      	ldr	r3, [r7, #0]
 80116b2:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 80116b4:	693b      	ldr	r3, [r7, #16]
 80116b6:	69db      	ldr	r3, [r3, #28]
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d101      	bne.n	80116c0 <create_chain+0x70>
 80116bc:	2300      	movs	r3, #0
 80116be:	e0fe      	b.n	80118be <create_chain+0x26e>

#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80116c0:	693b      	ldr	r3, [r7, #16]
 80116c2:	781b      	ldrb	r3, [r3, #0]
 80116c4:	2b04      	cmp	r3, #4
 80116c6:	d165      	bne.n	8011794 <create_chain+0x144>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 80116c8:	2201      	movs	r2, #1
 80116ca:	69b9      	ldr	r1, [r7, #24]
 80116cc:	6938      	ldr	r0, [r7, #16]
 80116ce:	f7ff fd81 	bl	80111d4 <find_bitmap>
 80116d2:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 80116d4:	69fb      	ldr	r3, [r7, #28]
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d003      	beq.n	80116e2 <create_chain+0x92>
 80116da:	69fb      	ldr	r3, [r7, #28]
 80116dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116e0:	d101      	bne.n	80116e6 <create_chain+0x96>
 80116e2:	69fb      	ldr	r3, [r7, #28]
 80116e4:	e0eb      	b.n	80118be <create_chain+0x26e>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 80116e6:	2301      	movs	r3, #1
 80116e8:	2201      	movs	r2, #1
 80116ea:	69f9      	ldr	r1, [r7, #28]
 80116ec:	6938      	ldr	r0, [r7, #16]
 80116ee:	f7ff fdf8 	bl	80112e2 <change_bitmap>
 80116f2:	4603      	mov	r3, r0
 80116f4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 80116f6:	7dfb      	ldrb	r3, [r7, #23]
 80116f8:	2b02      	cmp	r3, #2
 80116fa:	d101      	bne.n	8011700 <create_chain+0xb0>
 80116fc:	2301      	movs	r3, #1
 80116fe:	e0de      	b.n	80118be <create_chain+0x26e>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8011700:	7dfb      	ldrb	r3, [r7, #23]
 8011702:	2b01      	cmp	r3, #1
 8011704:	d102      	bne.n	801170c <create_chain+0xbc>
 8011706:	f04f 33ff 	mov.w	r3, #4294967295
 801170a:	e0d8      	b.n	80118be <create_chain+0x26e>
		if (clst == 0) {							/* Is it a new chain? */
 801170c:	683b      	ldr	r3, [r7, #0]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d103      	bne.n	801171a <create_chain+0xca>
			obj->stat = 2;							/* Set status 'contiguous' */
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	2202      	movs	r2, #2
 8011716:	71da      	strb	r2, [r3, #7]
 8011718:	e011      	b.n	801173e <create_chain+0xee>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	79db      	ldrb	r3, [r3, #7]
 801171e:	2b02      	cmp	r3, #2
 8011720:	d10d      	bne.n	801173e <create_chain+0xee>
 8011722:	69bb      	ldr	r3, [r7, #24]
 8011724:	3301      	adds	r3, #1
 8011726:	69fa      	ldr	r2, [r7, #28]
 8011728:	429a      	cmp	r2, r3
 801172a:	d008      	beq.n	801173e <create_chain+0xee>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	689b      	ldr	r3, [r3, #8]
 8011730:	69ba      	ldr	r2, [r7, #24]
 8011732:	1ad2      	subs	r2, r2, r3
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	2203      	movs	r2, #3
 801173c:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	79db      	ldrb	r3, [r3, #7]
 8011742:	2b02      	cmp	r3, #2
 8011744:	f000 8098 	beq.w	8011878 <create_chain+0x228>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8011748:	683b      	ldr	r3, [r7, #0]
 801174a:	3301      	adds	r3, #1
 801174c:	69fa      	ldr	r2, [r7, #28]
 801174e:	429a      	cmp	r2, r3
 8011750:	d10b      	bne.n	801176a <create_chain+0x11a>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	69db      	ldr	r3, [r3, #28]
 8011756:	2b00      	cmp	r3, #0
 8011758:	d003      	beq.n	8011762 <create_chain+0x112>
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	69db      	ldr	r3, [r3, #28]
 801175e:	3301      	adds	r3, #1
 8011760:	e000      	b.n	8011764 <create_chain+0x114>
 8011762:	2302      	movs	r3, #2
 8011764:	687a      	ldr	r2, [r7, #4]
 8011766:	61d3      	str	r3, [r2, #28]
 8011768:	e086      	b.n	8011878 <create_chain+0x228>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	69db      	ldr	r3, [r3, #28]
 801176e:	2b00      	cmp	r3, #0
 8011770:	d102      	bne.n	8011778 <create_chain+0x128>
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	2201      	movs	r2, #1
 8011776:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 8011778:	69fa      	ldr	r2, [r7, #28]
 801177a:	6839      	ldr	r1, [r7, #0]
 801177c:	6878      	ldr	r0, [r7, #4]
 801177e:	f7ff fe54 	bl	801142a <fill_last_frag>
 8011782:	4603      	mov	r3, r0
 8011784:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 8011786:	7dfb      	ldrb	r3, [r7, #23]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d175      	bne.n	8011878 <create_chain+0x228>
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	2201      	movs	r2, #1
 8011790:	61da      	str	r2, [r3, #28]
 8011792:	e071      	b.n	8011878 <create_chain+0x228>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 8011794:	2300      	movs	r3, #0
 8011796:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 8011798:	69ba      	ldr	r2, [r7, #24]
 801179a:	683b      	ldr	r3, [r7, #0]
 801179c:	429a      	cmp	r2, r3
 801179e:	d129      	bne.n	80117f4 <create_chain+0x1a4>
			ncl = scl + 1;						/* Test if next cluster is free */
 80117a0:	69bb      	ldr	r3, [r7, #24]
 80117a2:	3301      	adds	r3, #1
 80117a4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 80117a6:	693b      	ldr	r3, [r7, #16]
 80117a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80117aa:	69fa      	ldr	r2, [r7, #28]
 80117ac:	429a      	cmp	r2, r3
 80117ae:	d301      	bcc.n	80117b4 <create_chain+0x164>
 80117b0:	2302      	movs	r3, #2
 80117b2:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 80117b4:	69f9      	ldr	r1, [r7, #28]
 80117b6:	6878      	ldr	r0, [r7, #4]
 80117b8:	f7ff fa8e 	bl	8010cd8 <get_fat>
 80117bc:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	2b01      	cmp	r3, #1
 80117c2:	d003      	beq.n	80117cc <create_chain+0x17c>
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117ca:	d101      	bne.n	80117d0 <create_chain+0x180>
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	e076      	b.n	80118be <create_chain+0x26e>
			if (cs != 0) {						/* Not free? */
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d00e      	beq.n	80117f4 <create_chain+0x1a4>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 80117d6:	693b      	ldr	r3, [r7, #16]
 80117d8:	699b      	ldr	r3, [r3, #24]
 80117da:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	2b01      	cmp	r3, #1
 80117e0:	d906      	bls.n	80117f0 <create_chain+0x1a0>
 80117e2:	693b      	ldr	r3, [r7, #16]
 80117e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80117e6:	68fa      	ldr	r2, [r7, #12]
 80117e8:	429a      	cmp	r2, r3
 80117ea:	d201      	bcs.n	80117f0 <create_chain+0x1a0>
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 80117f0:	2300      	movs	r3, #0
 80117f2:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 80117f4:	69fb      	ldr	r3, [r7, #28]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d129      	bne.n	801184e <create_chain+0x1fe>
			ncl = scl;	/* Start cluster */
 80117fa:	69bb      	ldr	r3, [r7, #24]
 80117fc:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 80117fe:	69fb      	ldr	r3, [r7, #28]
 8011800:	3301      	adds	r3, #1
 8011802:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011804:	693b      	ldr	r3, [r7, #16]
 8011806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011808:	69fa      	ldr	r2, [r7, #28]
 801180a:	429a      	cmp	r2, r3
 801180c:	d307      	bcc.n	801181e <create_chain+0x1ce>
					ncl = 2;
 801180e:	2302      	movs	r3, #2
 8011810:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 8011812:	69fa      	ldr	r2, [r7, #28]
 8011814:	69bb      	ldr	r3, [r7, #24]
 8011816:	429a      	cmp	r2, r3
 8011818:	d901      	bls.n	801181e <create_chain+0x1ce>
 801181a:	2300      	movs	r3, #0
 801181c:	e04f      	b.n	80118be <create_chain+0x26e>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 801181e:	69f9      	ldr	r1, [r7, #28]
 8011820:	6878      	ldr	r0, [r7, #4]
 8011822:	f7ff fa59 	bl	8010cd8 <get_fat>
 8011826:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	2b00      	cmp	r3, #0
 801182c:	d00e      	beq.n	801184c <create_chain+0x1fc>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	2b01      	cmp	r3, #1
 8011832:	d003      	beq.n	801183c <create_chain+0x1ec>
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	f1b3 3fff 	cmp.w	r3, #4294967295
 801183a:	d101      	bne.n	8011840 <create_chain+0x1f0>
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	e03e      	b.n	80118be <create_chain+0x26e>
				if (ncl == scl) return 0;		/* No free cluster found? */
 8011840:	69fa      	ldr	r2, [r7, #28]
 8011842:	69bb      	ldr	r3, [r7, #24]
 8011844:	429a      	cmp	r2, r3
 8011846:	d1da      	bne.n	80117fe <create_chain+0x1ae>
 8011848:	2300      	movs	r3, #0
 801184a:	e038      	b.n	80118be <create_chain+0x26e>
				if (cs == 0) break;				/* Found a free cluster? */
 801184c:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 801184e:	f04f 32ff 	mov.w	r2, #4294967295
 8011852:	69f9      	ldr	r1, [r7, #28]
 8011854:	6938      	ldr	r0, [r7, #16]
 8011856:	f7ff fb9f 	bl	8010f98 <put_fat>
 801185a:	4603      	mov	r3, r0
 801185c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801185e:	7dfb      	ldrb	r3, [r7, #23]
 8011860:	2b00      	cmp	r3, #0
 8011862:	d109      	bne.n	8011878 <create_chain+0x228>
 8011864:	683b      	ldr	r3, [r7, #0]
 8011866:	2b00      	cmp	r3, #0
 8011868:	d006      	beq.n	8011878 <create_chain+0x228>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 801186a:	69fa      	ldr	r2, [r7, #28]
 801186c:	6839      	ldr	r1, [r7, #0]
 801186e:	6938      	ldr	r0, [r7, #16]
 8011870:	f7ff fb92 	bl	8010f98 <put_fat>
 8011874:	4603      	mov	r3, r0
 8011876:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8011878:	7dfb      	ldrb	r3, [r7, #23]
 801187a:	2b00      	cmp	r3, #0
 801187c:	d116      	bne.n	80118ac <create_chain+0x25c>
		fs->last_clst = ncl;
 801187e:	693b      	ldr	r3, [r7, #16]
 8011880:	69fa      	ldr	r2, [r7, #28]
 8011882:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011884:	693b      	ldr	r3, [r7, #16]
 8011886:	69da      	ldr	r2, [r3, #28]
 8011888:	693b      	ldr	r3, [r7, #16]
 801188a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801188c:	3b02      	subs	r3, #2
 801188e:	429a      	cmp	r2, r3
 8011890:	d804      	bhi.n	801189c <create_chain+0x24c>
 8011892:	693b      	ldr	r3, [r7, #16]
 8011894:	69db      	ldr	r3, [r3, #28]
 8011896:	1e5a      	subs	r2, r3, #1
 8011898:	693b      	ldr	r3, [r7, #16]
 801189a:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 801189c:	693b      	ldr	r3, [r7, #16]
 801189e:	795b      	ldrb	r3, [r3, #5]
 80118a0:	f043 0301 	orr.w	r3, r3, #1
 80118a4:	b2da      	uxtb	r2, r3
 80118a6:	693b      	ldr	r3, [r7, #16]
 80118a8:	715a      	strb	r2, [r3, #5]
 80118aa:	e007      	b.n	80118bc <create_chain+0x26c>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80118ac:	7dfb      	ldrb	r3, [r7, #23]
 80118ae:	2b01      	cmp	r3, #1
 80118b0:	d102      	bne.n	80118b8 <create_chain+0x268>
 80118b2:	f04f 33ff 	mov.w	r3, #4294967295
 80118b6:	e000      	b.n	80118ba <create_chain+0x26a>
 80118b8:	2301      	movs	r3, #1
 80118ba:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80118bc:	69fb      	ldr	r3, [r7, #28]
}
 80118be:	4618      	mov	r0, r3
 80118c0:	3720      	adds	r7, #32
 80118c2:	46bd      	mov	sp, r7
 80118c4:	bd80      	pop	{r7, pc}

080118c6 <clmt_clust>:

static DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80118c6:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80118ca:	b088      	sub	sp, #32
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	60f8      	str	r0, [r7, #12]
 80118d0:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl;
	DWORD *tbl;
	FATFS *fs = fp->obj.fs;
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80118de:	3304      	adds	r3, #4
 80118e0:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80118e2:	697b      	ldr	r3, [r7, #20]
 80118e4:	899b      	ldrh	r3, [r3, #12]
 80118e6:	b29b      	uxth	r3, r3
 80118e8:	2200      	movs	r2, #0
 80118ea:	4698      	mov	r8, r3
 80118ec:	4691      	mov	r9, r2
 80118ee:	4642      	mov	r2, r8
 80118f0:	464b      	mov	r3, r9
 80118f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80118f6:	f7ee ff17 	bl	8000728 <__aeabi_uldivmod>
 80118fa:	4602      	mov	r2, r0
 80118fc:	460b      	mov	r3, r1
 80118fe:	4610      	mov	r0, r2
 8011900:	4619      	mov	r1, r3
 8011902:	697b      	ldr	r3, [r7, #20]
 8011904:	895b      	ldrh	r3, [r3, #10]
 8011906:	b29b      	uxth	r3, r3
 8011908:	2200      	movs	r2, #0
 801190a:	461c      	mov	r4, r3
 801190c:	4615      	mov	r5, r2
 801190e:	4622      	mov	r2, r4
 8011910:	462b      	mov	r3, r5
 8011912:	f7ee ff09 	bl	8000728 <__aeabi_uldivmod>
 8011916:	4602      	mov	r2, r0
 8011918:	460b      	mov	r3, r1
 801191a:	4613      	mov	r3, r2
 801191c:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801191e:	69bb      	ldr	r3, [r7, #24]
 8011920:	1d1a      	adds	r2, r3, #4
 8011922:	61ba      	str	r2, [r7, #24]
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011928:	693b      	ldr	r3, [r7, #16]
 801192a:	2b00      	cmp	r3, #0
 801192c:	d101      	bne.n	8011932 <clmt_clust+0x6c>
 801192e:	2300      	movs	r3, #0
 8011930:	e010      	b.n	8011954 <clmt_clust+0x8e>
		if (cl < ncl) break;	/* In this fragment? */
 8011932:	69fa      	ldr	r2, [r7, #28]
 8011934:	693b      	ldr	r3, [r7, #16]
 8011936:	429a      	cmp	r2, r3
 8011938:	d307      	bcc.n	801194a <clmt_clust+0x84>
		cl -= ncl; tbl++;		/* Next fragment */
 801193a:	69fa      	ldr	r2, [r7, #28]
 801193c:	693b      	ldr	r3, [r7, #16]
 801193e:	1ad3      	subs	r3, r2, r3
 8011940:	61fb      	str	r3, [r7, #28]
 8011942:	69bb      	ldr	r3, [r7, #24]
 8011944:	3304      	adds	r3, #4
 8011946:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011948:	e7e9      	b.n	801191e <clmt_clust+0x58>
		if (cl < ncl) break;	/* In this fragment? */
 801194a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801194c:	69bb      	ldr	r3, [r7, #24]
 801194e:	681a      	ldr	r2, [r3, #0]
 8011950:	69fb      	ldr	r3, [r7, #28]
 8011952:	4413      	add	r3, r2
}
 8011954:	4618      	mov	r0, r3
 8011956:	3720      	adds	r7, #32
 8011958:	46bd      	mov	sp, r7
 801195a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0801195e <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 801195e:	b580      	push	{r7, lr}
 8011960:	b086      	sub	sp, #24
 8011962:	af00      	add	r7, sp, #0
 8011964:	6078      	str	r0, [r7, #4]
 8011966:	6039      	str	r1, [r7, #0]
	LBA_t sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8011968:	6878      	ldr	r0, [r7, #4]
 801196a:	f7ff f8bd 	bl	8010ae8 <sync_window>
 801196e:	4603      	mov	r3, r0
 8011970:	2b00      	cmp	r3, #0
 8011972:	d001      	beq.n	8011978 <dir_clear+0x1a>
 8011974:	2301      	movs	r3, #1
 8011976:	e036      	b.n	80119e6 <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8011978:	6839      	ldr	r1, [r7, #0]
 801197a:	6878      	ldr	r0, [r7, #4]
 801197c:	f7ff f98c 	bl	8010c98 <clst2sect>
 8011980:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	693a      	ldr	r2, [r7, #16]
 8011986:	64da      	str	r2, [r3, #76]	@ 0x4c
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	3350      	adds	r3, #80	@ 0x50
 801198c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8011990:	2100      	movs	r1, #0
 8011992:	4618      	mov	r0, r3
 8011994:	f006 fe94 	bl	80186c0 <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	3350      	adds	r3, #80	@ 0x50
 801199c:	60fb      	str	r3, [r7, #12]
 801199e:	2301      	movs	r3, #1
 80119a0:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 80119a2:	2300      	movs	r3, #0
 80119a4:	617b      	str	r3, [r7, #20]
 80119a6:	e003      	b.n	80119b0 <dir_clear+0x52>
 80119a8:	697a      	ldr	r2, [r7, #20]
 80119aa:	68bb      	ldr	r3, [r7, #8]
 80119ac:	4413      	add	r3, r2
 80119ae:	617b      	str	r3, [r7, #20]
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	895b      	ldrh	r3, [r3, #10]
 80119b4:	461a      	mov	r2, r3
 80119b6:	697b      	ldr	r3, [r7, #20]
 80119b8:	4293      	cmp	r3, r2
 80119ba:	d20b      	bcs.n	80119d4 <dir_clear+0x76>
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	7858      	ldrb	r0, [r3, #1]
 80119c0:	693a      	ldr	r2, [r7, #16]
 80119c2:	697b      	ldr	r3, [r7, #20]
 80119c4:	441a      	add	r2, r3
 80119c6:	68bb      	ldr	r3, [r7, #8]
 80119c8:	68f9      	ldr	r1, [r7, #12]
 80119ca:	f7fe fc57 	bl	801027c <disk_write>
 80119ce:	4603      	mov	r3, r0
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d0e9      	beq.n	80119a8 <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	895b      	ldrh	r3, [r3, #10]
 80119d8:	461a      	mov	r2, r3
 80119da:	697b      	ldr	r3, [r7, #20]
 80119dc:	4293      	cmp	r3, r2
 80119de:	bf14      	ite	ne
 80119e0:	2301      	movne	r3, #1
 80119e2:	2300      	moveq	r3, #0
 80119e4:	b2db      	uxtb	r3, r3
}
 80119e6:	4618      	mov	r0, r3
 80119e8:	3718      	adds	r7, #24
 80119ea:	46bd      	mov	sp, r7
 80119ec:	bd80      	pop	{r7, pc}

080119ee <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80119ee:	b580      	push	{r7, lr}
 80119f0:	b086      	sub	sp, #24
 80119f2:	af00      	add	r7, sp, #0
 80119f4:	6078      	str	r0, [r7, #4]
 80119f6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80119fe:	693b      	ldr	r3, [r7, #16]
 8011a00:	781b      	ldrb	r3, [r3, #0]
 8011a02:	2b04      	cmp	r3, #4
 8011a04:	d102      	bne.n	8011a0c <dir_sdi+0x1e>
 8011a06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011a0a:	e001      	b.n	8011a10 <dir_sdi+0x22>
 8011a0c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8011a10:	683b      	ldr	r3, [r7, #0]
 8011a12:	429a      	cmp	r2, r3
 8011a14:	d904      	bls.n	8011a20 <dir_sdi+0x32>
 8011a16:	683b      	ldr	r3, [r7, #0]
 8011a18:	f003 031f 	and.w	r3, r3, #31
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d001      	beq.n	8011a24 <dir_sdi+0x36>
		return FR_INT_ERR;
 8011a20:	2302      	movs	r3, #2
 8011a22:	e074      	b.n	8011b0e <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	683a      	ldr	r2, [r7, #0]
 8011a28:	631a      	str	r2, [r3, #48]	@ 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	689b      	ldr	r3, [r3, #8]
 8011a2e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011a30:	697b      	ldr	r3, [r7, #20]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d109      	bne.n	8011a4a <dir_sdi+0x5c>
 8011a36:	693b      	ldr	r3, [r7, #16]
 8011a38:	781b      	ldrb	r3, [r3, #0]
 8011a3a:	2b02      	cmp	r3, #2
 8011a3c:	d905      	bls.n	8011a4a <dir_sdi+0x5c>
		clst = (DWORD)fs->dirbase;
 8011a3e:	693b      	ldr	r3, [r7, #16]
 8011a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011a42:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	2200      	movs	r2, #0
 8011a48:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 8011a4a:	697b      	ldr	r3, [r7, #20]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d10c      	bne.n	8011a6a <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8011a50:	683b      	ldr	r3, [r7, #0]
 8011a52:	095b      	lsrs	r3, r3, #5
 8011a54:	693a      	ldr	r2, [r7, #16]
 8011a56:	8912      	ldrh	r2, [r2, #8]
 8011a58:	4293      	cmp	r3, r2
 8011a5a:	d301      	bcc.n	8011a60 <dir_sdi+0x72>
 8011a5c:	2302      	movs	r3, #2
 8011a5e:	e056      	b.n	8011b0e <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 8011a60:	693b      	ldr	r3, [r7, #16]
 8011a62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	639a      	str	r2, [r3, #56]	@ 0x38
 8011a68:	e02d      	b.n	8011ac6 <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011a6a:	693b      	ldr	r3, [r7, #16]
 8011a6c:	895b      	ldrh	r3, [r3, #10]
 8011a6e:	461a      	mov	r2, r3
 8011a70:	693b      	ldr	r3, [r7, #16]
 8011a72:	899b      	ldrh	r3, [r3, #12]
 8011a74:	fb02 f303 	mul.w	r3, r2, r3
 8011a78:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011a7a:	e019      	b.n	8011ab0 <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	6979      	ldr	r1, [r7, #20]
 8011a80:	4618      	mov	r0, r3
 8011a82:	f7ff f929 	bl	8010cd8 <get_fat>
 8011a86:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011a88:	697b      	ldr	r3, [r7, #20]
 8011a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a8e:	d101      	bne.n	8011a94 <dir_sdi+0xa6>
 8011a90:	2301      	movs	r3, #1
 8011a92:	e03c      	b.n	8011b0e <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8011a94:	697b      	ldr	r3, [r7, #20]
 8011a96:	2b01      	cmp	r3, #1
 8011a98:	d904      	bls.n	8011aa4 <dir_sdi+0xb6>
 8011a9a:	693b      	ldr	r3, [r7, #16]
 8011a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011a9e:	697a      	ldr	r2, [r7, #20]
 8011aa0:	429a      	cmp	r2, r3
 8011aa2:	d301      	bcc.n	8011aa8 <dir_sdi+0xba>
 8011aa4:	2302      	movs	r3, #2
 8011aa6:	e032      	b.n	8011b0e <dir_sdi+0x120>
			ofs -= csz;
 8011aa8:	683a      	ldr	r2, [r7, #0]
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	1ad3      	subs	r3, r2, r3
 8011aae:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011ab0:	683a      	ldr	r2, [r7, #0]
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	429a      	cmp	r2, r3
 8011ab6:	d2e1      	bcs.n	8011a7c <dir_sdi+0x8e>
		}
		dp->sect = clst2sect(fs, clst);
 8011ab8:	6979      	ldr	r1, [r7, #20]
 8011aba:	6938      	ldr	r0, [r7, #16]
 8011abc:	f7ff f8ec 	bl	8010c98 <clst2sect>
 8011ac0:	4602      	mov	r2, r0
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	697a      	ldr	r2, [r7, #20]
 8011aca:	635a      	str	r2, [r3, #52]	@ 0x34
	if (dp->sect == 0) return FR_INT_ERR;
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d101      	bne.n	8011ad8 <dir_sdi+0xea>
 8011ad4:	2302      	movs	r3, #2
 8011ad6:	e01a      	b.n	8011b0e <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011adc:	693b      	ldr	r3, [r7, #16]
 8011ade:	899b      	ldrh	r3, [r3, #12]
 8011ae0:	4619      	mov	r1, r3
 8011ae2:	683b      	ldr	r3, [r7, #0]
 8011ae4:	fbb3 f3f1 	udiv	r3, r3, r1
 8011ae8:	441a      	add	r2, r3
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	639a      	str	r2, [r3, #56]	@ 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8011aee:	693b      	ldr	r3, [r7, #16]
 8011af0:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 8011af4:	693b      	ldr	r3, [r7, #16]
 8011af6:	899b      	ldrh	r3, [r3, #12]
 8011af8:	461a      	mov	r2, r3
 8011afa:	683b      	ldr	r3, [r7, #0]
 8011afc:	fbb3 f0f2 	udiv	r0, r3, r2
 8011b00:	fb00 f202 	mul.w	r2, r0, r2
 8011b04:	1a9b      	subs	r3, r3, r2
 8011b06:	18ca      	adds	r2, r1, r3
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 8011b0c:	2300      	movs	r3, #0
}
 8011b0e:	4618      	mov	r0, r3
 8011b10:	3718      	adds	r7, #24
 8011b12:	46bd      	mov	sp, r7
 8011b14:	bd80      	pop	{r7, pc}

08011b16 <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011b16:	b580      	push	{r7, lr}
 8011b18:	b086      	sub	sp, #24
 8011b1a:	af00      	add	r7, sp, #0
 8011b1c:	6078      	str	r0, [r7, #4]
 8011b1e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b2a:	3320      	adds	r3, #32
 8011b2c:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 8011b2e:	693b      	ldr	r3, [r7, #16]
 8011b30:	781b      	ldrb	r3, [r3, #0]
 8011b32:	2b04      	cmp	r3, #4
 8011b34:	d102      	bne.n	8011b3c <dir_next+0x26>
 8011b36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011b3a:	e001      	b.n	8011b40 <dir_next+0x2a>
 8011b3c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	429a      	cmp	r2, r3
 8011b44:	d802      	bhi.n	8011b4c <dir_next+0x36>
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	2200      	movs	r2, #0
 8011b4a:	639a      	str	r2, [r3, #56]	@ 0x38
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d101      	bne.n	8011b58 <dir_next+0x42>
 8011b54:	2304      	movs	r3, #4
 8011b56:	e08f      	b.n	8011c78 <dir_next+0x162>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011b58:	693b      	ldr	r3, [r7, #16]
 8011b5a:	899b      	ldrh	r3, [r3, #12]
 8011b5c:	461a      	mov	r2, r3
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	fbb3 f1f2 	udiv	r1, r3, r2
 8011b64:	fb01 f202 	mul.w	r2, r1, r2
 8011b68:	1a9b      	subs	r3, r3, r2
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d171      	bne.n	8011c52 <dir_next+0x13c>
		dp->sect++;				/* Next sector */
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b72:	1c5a      	adds	r2, r3, #1
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	639a      	str	r2, [r3, #56]	@ 0x38

		if (dp->clust == 0) {	/* Static table */
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d10a      	bne.n	8011b96 <dir_next+0x80>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	095b      	lsrs	r3, r3, #5
 8011b84:	693a      	ldr	r2, [r7, #16]
 8011b86:	8912      	ldrh	r2, [r2, #8]
 8011b88:	4293      	cmp	r3, r2
 8011b8a:	d362      	bcc.n	8011c52 <dir_next+0x13c>
				dp->sect = 0; return FR_NO_FILE;
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	2200      	movs	r2, #0
 8011b90:	639a      	str	r2, [r3, #56]	@ 0x38
 8011b92:	2304      	movs	r3, #4
 8011b94:	e070      	b.n	8011c78 <dir_next+0x162>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 8011b96:	693b      	ldr	r3, [r7, #16]
 8011b98:	899b      	ldrh	r3, [r3, #12]
 8011b9a:	461a      	mov	r2, r3
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8011ba2:	693a      	ldr	r2, [r7, #16]
 8011ba4:	8952      	ldrh	r2, [r2, #10]
 8011ba6:	3a01      	subs	r2, #1
 8011ba8:	4013      	ands	r3, r2
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d151      	bne.n	8011c52 <dir_next+0x13c>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8011bae:	687a      	ldr	r2, [r7, #4]
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011bb4:	4619      	mov	r1, r3
 8011bb6:	4610      	mov	r0, r2
 8011bb8:	f7ff f88e 	bl	8010cd8 <get_fat>
 8011bbc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8011bbe:	697b      	ldr	r3, [r7, #20]
 8011bc0:	2b01      	cmp	r3, #1
 8011bc2:	d801      	bhi.n	8011bc8 <dir_next+0xb2>
 8011bc4:	2302      	movs	r3, #2
 8011bc6:	e057      	b.n	8011c78 <dir_next+0x162>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011bc8:	697b      	ldr	r3, [r7, #20]
 8011bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bce:	d101      	bne.n	8011bd4 <dir_next+0xbe>
 8011bd0:	2301      	movs	r3, #1
 8011bd2:	e051      	b.n	8011c78 <dir_next+0x162>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8011bd4:	693b      	ldr	r3, [r7, #16]
 8011bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011bd8:	697a      	ldr	r2, [r7, #20]
 8011bda:	429a      	cmp	r2, r3
 8011bdc:	d32f      	bcc.n	8011c3e <dir_next+0x128>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8011bde:	683b      	ldr	r3, [r7, #0]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d104      	bne.n	8011bee <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	2200      	movs	r2, #0
 8011be8:	639a      	str	r2, [r3, #56]	@ 0x38
 8011bea:	2304      	movs	r3, #4
 8011bec:	e044      	b.n	8011c78 <dir_next+0x162>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8011bee:	687a      	ldr	r2, [r7, #4]
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011bf4:	4619      	mov	r1, r3
 8011bf6:	4610      	mov	r0, r2
 8011bf8:	f7ff fd2a 	bl	8011650 <create_chain>
 8011bfc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8011bfe:	697b      	ldr	r3, [r7, #20]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d101      	bne.n	8011c08 <dir_next+0xf2>
 8011c04:	2307      	movs	r3, #7
 8011c06:	e037      	b.n	8011c78 <dir_next+0x162>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8011c08:	697b      	ldr	r3, [r7, #20]
 8011c0a:	2b01      	cmp	r3, #1
 8011c0c:	d101      	bne.n	8011c12 <dir_next+0xfc>
 8011c0e:	2302      	movs	r3, #2
 8011c10:	e032      	b.n	8011c78 <dir_next+0x162>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011c12:	697b      	ldr	r3, [r7, #20]
 8011c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c18:	d101      	bne.n	8011c1e <dir_next+0x108>
 8011c1a:	2301      	movs	r3, #1
 8011c1c:	e02c      	b.n	8011c78 <dir_next+0x162>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 8011c1e:	6979      	ldr	r1, [r7, #20]
 8011c20:	6938      	ldr	r0, [r7, #16]
 8011c22:	f7ff fe9c 	bl	801195e <dir_clear>
 8011c26:	4603      	mov	r3, r0
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d001      	beq.n	8011c30 <dir_next+0x11a>
 8011c2c:	2301      	movs	r3, #1
 8011c2e:	e023      	b.n	8011c78 <dir_next+0x162>
					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	79db      	ldrb	r3, [r3, #7]
 8011c34:	f043 0304 	orr.w	r3, r3, #4
 8011c38:	b2da      	uxtb	r2, r3
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	71da      	strb	r2, [r3, #7]
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	697a      	ldr	r2, [r7, #20]
 8011c42:	635a      	str	r2, [r3, #52]	@ 0x34
				dp->sect = clst2sect(fs, clst);
 8011c44:	6979      	ldr	r1, [r7, #20]
 8011c46:	6938      	ldr	r0, [r7, #16]
 8011c48:	f7ff f826 	bl	8010c98 <clst2sect>
 8011c4c:	4602      	mov	r2, r0
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	639a      	str	r2, [r3, #56]	@ 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	68fa      	ldr	r2, [r7, #12]
 8011c56:	631a      	str	r2, [r3, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011c58:	693b      	ldr	r3, [r7, #16]
 8011c5a:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 8011c5e:	693b      	ldr	r3, [r7, #16]
 8011c60:	899b      	ldrh	r3, [r3, #12]
 8011c62:	461a      	mov	r2, r3
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	fbb3 f0f2 	udiv	r0, r3, r2
 8011c6a:	fb00 f202 	mul.w	r2, r0, r2
 8011c6e:	1a9b      	subs	r3, r3, r2
 8011c70:	18ca      	adds	r2, r1, r3
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 8011c76:	2300      	movs	r3, #0
}
 8011c78:	4618      	mov	r0, r3
 8011c7a:	3718      	adds	r7, #24
 8011c7c:	46bd      	mov	sp, r7
 8011c7e:	bd80      	pop	{r7, pc}

08011c80 <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT n_ent				/* Number of contiguous entries to allocate */
)
{
 8011c80:	b580      	push	{r7, lr}
 8011c82:	b086      	sub	sp, #24
 8011c84:	af00      	add	r7, sp, #0
 8011c86:	6078      	str	r0, [r7, #4]
 8011c88:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011c90:	2100      	movs	r1, #0
 8011c92:	6878      	ldr	r0, [r7, #4]
 8011c94:	f7ff feab 	bl	80119ee <dir_sdi>
 8011c98:	4603      	mov	r3, r0
 8011c9a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011c9c:	7dfb      	ldrb	r3, [r7, #23]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d140      	bne.n	8011d24 <dir_alloc+0xa4>
		n = 0;
 8011ca2:	2300      	movs	r3, #0
 8011ca4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011caa:	4619      	mov	r1, r3
 8011cac:	68f8      	ldr	r0, [r7, #12]
 8011cae:	f7fe ff57 	bl	8010b60 <move_window>
 8011cb2:	4603      	mov	r3, r0
 8011cb4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011cb6:	7dfb      	ldrb	r3, [r7, #23]
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d132      	bne.n	8011d22 <dir_alloc+0xa2>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	781b      	ldrb	r3, [r3, #0]
 8011cc0:	2b04      	cmp	r3, #4
 8011cc2:	d108      	bne.n	8011cd6 <dir_alloc+0x56>
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011cc8:	781b      	ldrb	r3, [r3, #0]
 8011cca:	b25b      	sxtb	r3, r3
 8011ccc:	43db      	mvns	r3, r3
 8011cce:	b2db      	uxtb	r3, r3
 8011cd0:	09db      	lsrs	r3, r3, #7
 8011cd2:	b2db      	uxtb	r3, r3
 8011cd4:	e00f      	b.n	8011cf6 <dir_alloc+0x76>
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011cda:	781b      	ldrb	r3, [r3, #0]
 8011cdc:	2be5      	cmp	r3, #229	@ 0xe5
 8011cde:	d004      	beq.n	8011cea <dir_alloc+0x6a>
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011ce4:	781b      	ldrb	r3, [r3, #0]
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d101      	bne.n	8011cee <dir_alloc+0x6e>
 8011cea:	2301      	movs	r3, #1
 8011cec:	e000      	b.n	8011cf0 <dir_alloc+0x70>
 8011cee:	2300      	movs	r3, #0
 8011cf0:	f003 0301 	and.w	r3, r3, #1
 8011cf4:	b2db      	uxtb	r3, r3
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d007      	beq.n	8011d0a <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
#endif
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
 8011cfa:	693b      	ldr	r3, [r7, #16]
 8011cfc:	3301      	adds	r3, #1
 8011cfe:	613b      	str	r3, [r7, #16]
 8011d00:	693a      	ldr	r2, [r7, #16]
 8011d02:	683b      	ldr	r3, [r7, #0]
 8011d04:	429a      	cmp	r2, r3
 8011d06:	d102      	bne.n	8011d0e <dir_alloc+0x8e>
 8011d08:	e00c      	b.n	8011d24 <dir_alloc+0xa4>
			} else {
				n = 0;				/* Not a free entry, restart to search */
 8011d0a:	2300      	movs	r3, #0
 8011d0c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
 8011d0e:	2101      	movs	r1, #1
 8011d10:	6878      	ldr	r0, [r7, #4]
 8011d12:	f7ff ff00 	bl	8011b16 <dir_next>
 8011d16:	4603      	mov	r3, r0
 8011d18:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8011d1a:	7dfb      	ldrb	r3, [r7, #23]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d0c2      	beq.n	8011ca6 <dir_alloc+0x26>
 8011d20:	e000      	b.n	8011d24 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 8011d22:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8011d24:	7dfb      	ldrb	r3, [r7, #23]
 8011d26:	2b04      	cmp	r3, #4
 8011d28:	d101      	bne.n	8011d2e <dir_alloc+0xae>
 8011d2a:	2307      	movs	r3, #7
 8011d2c:	75fb      	strb	r3, [r7, #23]
	return res;
 8011d2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d30:	4618      	mov	r0, r3
 8011d32:	3718      	adds	r7, #24
 8011d34:	46bd      	mov	sp, r7
 8011d36:	bd80      	pop	{r7, pc}

08011d38 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 8011d38:	b580      	push	{r7, lr}
 8011d3a:	b084      	sub	sp, #16
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	6078      	str	r0, [r7, #4]
 8011d40:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8011d42:	683b      	ldr	r3, [r7, #0]
 8011d44:	331a      	adds	r3, #26
 8011d46:	4618      	mov	r0, r3
 8011d48:	f7fe fade 	bl	8010308 <ld_word>
 8011d4c:	4603      	mov	r3, r0
 8011d4e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	781b      	ldrb	r3, [r3, #0]
 8011d54:	2b03      	cmp	r3, #3
 8011d56:	d109      	bne.n	8011d6c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8011d58:	683b      	ldr	r3, [r7, #0]
 8011d5a:	3314      	adds	r3, #20
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	f7fe fad3 	bl	8010308 <ld_word>
 8011d62:	4603      	mov	r3, r0
 8011d64:	041b      	lsls	r3, r3, #16
 8011d66:	68fa      	ldr	r2, [r7, #12]
 8011d68:	4313      	orrs	r3, r2
 8011d6a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8011d6c:	68fb      	ldr	r3, [r7, #12]
}
 8011d6e:	4618      	mov	r0, r3
 8011d70:	3710      	adds	r7, #16
 8011d72:	46bd      	mov	sp, r7
 8011d74:	bd80      	pop	{r7, pc}

08011d76 <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8011d76:	b580      	push	{r7, lr}
 8011d78:	b084      	sub	sp, #16
 8011d7a:	af00      	add	r7, sp, #0
 8011d7c:	60f8      	str	r0, [r7, #12]
 8011d7e:	60b9      	str	r1, [r7, #8]
 8011d80:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8011d82:	68bb      	ldr	r3, [r7, #8]
 8011d84:	331a      	adds	r3, #26
 8011d86:	687a      	ldr	r2, [r7, #4]
 8011d88:	b292      	uxth	r2, r2
 8011d8a:	4611      	mov	r1, r2
 8011d8c:	4618      	mov	r0, r3
 8011d8e:	f7fe fbd1 	bl	8010534 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	781b      	ldrb	r3, [r3, #0]
 8011d96:	2b03      	cmp	r3, #3
 8011d98:	d109      	bne.n	8011dae <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011d9a:	68bb      	ldr	r3, [r7, #8]
 8011d9c:	f103 0214 	add.w	r2, r3, #20
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	0c1b      	lsrs	r3, r3, #16
 8011da4:	b29b      	uxth	r3, r3
 8011da6:	4619      	mov	r1, r3
 8011da8:	4610      	mov	r0, r2
 8011daa:	f7fe fbc3 	bl	8010534 <st_word>
	}
}
 8011dae:	bf00      	nop
 8011db0:	3710      	adds	r7, #16
 8011db2:	46bd      	mov	sp, r7
 8011db4:	bd80      	pop	{r7, pc}
	...

08011db8 <cmp_lfn>:

static int cmp_lfn (		/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8011db8:	b590      	push	{r4, r7, lr}
 8011dba:	b087      	sub	sp, #28
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	6078      	str	r0, [r7, #4]
 8011dc0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8011dc2:	683b      	ldr	r3, [r7, #0]
 8011dc4:	331a      	adds	r3, #26
 8011dc6:	4618      	mov	r0, r3
 8011dc8:	f7fe fa9e 	bl	8010308 <ld_word>
 8011dcc:	4603      	mov	r3, r0
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d001      	beq.n	8011dd6 <cmp_lfn+0x1e>
 8011dd2:	2300      	movs	r3, #0
 8011dd4:	e058      	b.n	8011e88 <cmp_lfn+0xd0>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8011dd6:	683b      	ldr	r3, [r7, #0]
 8011dd8:	781b      	ldrb	r3, [r3, #0]
 8011dda:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011dde:	1e5a      	subs	r2, r3, #1
 8011de0:	4613      	mov	r3, r2
 8011de2:	005b      	lsls	r3, r3, #1
 8011de4:	4413      	add	r3, r2
 8011de6:	009b      	lsls	r3, r3, #2
 8011de8:	4413      	add	r3, r2
 8011dea:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011dec:	2301      	movs	r3, #1
 8011dee:	81fb      	strh	r3, [r7, #14]
 8011df0:	2300      	movs	r3, #0
 8011df2:	613b      	str	r3, [r7, #16]
 8011df4:	e032      	b.n	8011e5c <cmp_lfn+0xa4>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8011df6:	4a26      	ldr	r2, [pc, #152]	@ (8011e90 <cmp_lfn+0xd8>)
 8011df8:	693b      	ldr	r3, [r7, #16]
 8011dfa:	4413      	add	r3, r2
 8011dfc:	781b      	ldrb	r3, [r3, #0]
 8011dfe:	461a      	mov	r2, r3
 8011e00:	683b      	ldr	r3, [r7, #0]
 8011e02:	4413      	add	r3, r2
 8011e04:	4618      	mov	r0, r3
 8011e06:	f7fe fa7f 	bl	8010308 <ld_word>
 8011e0a:	4603      	mov	r3, r0
 8011e0c:	81bb      	strh	r3, [r7, #12]
		if (wc != 0) {
 8011e0e:	89fb      	ldrh	r3, [r7, #14]
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d019      	beq.n	8011e48 <cmp_lfn+0x90>
			if (i >= FF_MAX_LFN + 1 || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8011e14:	697b      	ldr	r3, [r7, #20]
 8011e16:	2bff      	cmp	r3, #255	@ 0xff
 8011e18:	d811      	bhi.n	8011e3e <cmp_lfn+0x86>
 8011e1a:	89bb      	ldrh	r3, [r7, #12]
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	f003 fea3 	bl	8015b68 <ff_wtoupper>
 8011e22:	4604      	mov	r4, r0
 8011e24:	697b      	ldr	r3, [r7, #20]
 8011e26:	1c5a      	adds	r2, r3, #1
 8011e28:	617a      	str	r2, [r7, #20]
 8011e2a:	005b      	lsls	r3, r3, #1
 8011e2c:	687a      	ldr	r2, [r7, #4]
 8011e2e:	4413      	add	r3, r2
 8011e30:	881b      	ldrh	r3, [r3, #0]
 8011e32:	4618      	mov	r0, r3
 8011e34:	f003 fe98 	bl	8015b68 <ff_wtoupper>
 8011e38:	4603      	mov	r3, r0
 8011e3a:	429c      	cmp	r4, r3
 8011e3c:	d001      	beq.n	8011e42 <cmp_lfn+0x8a>
				return 0;					/* Not matched */
 8011e3e:	2300      	movs	r3, #0
 8011e40:	e022      	b.n	8011e88 <cmp_lfn+0xd0>
			}
			wc = uc;
 8011e42:	89bb      	ldrh	r3, [r7, #12]
 8011e44:	81fb      	strh	r3, [r7, #14]
 8011e46:	e006      	b.n	8011e56 <cmp_lfn+0x9e>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8011e48:	89bb      	ldrh	r3, [r7, #12]
 8011e4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011e4e:	4293      	cmp	r3, r2
 8011e50:	d001      	beq.n	8011e56 <cmp_lfn+0x9e>
 8011e52:	2300      	movs	r3, #0
 8011e54:	e018      	b.n	8011e88 <cmp_lfn+0xd0>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011e56:	693b      	ldr	r3, [r7, #16]
 8011e58:	3301      	adds	r3, #1
 8011e5a:	613b      	str	r3, [r7, #16]
 8011e5c:	693b      	ldr	r3, [r7, #16]
 8011e5e:	2b0c      	cmp	r3, #12
 8011e60:	d9c9      	bls.n	8011df6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8011e62:	683b      	ldr	r3, [r7, #0]
 8011e64:	781b      	ldrb	r3, [r3, #0]
 8011e66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d00b      	beq.n	8011e86 <cmp_lfn+0xce>
 8011e6e:	89fb      	ldrh	r3, [r7, #14]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d008      	beq.n	8011e86 <cmp_lfn+0xce>
 8011e74:	697b      	ldr	r3, [r7, #20]
 8011e76:	005b      	lsls	r3, r3, #1
 8011e78:	687a      	ldr	r2, [r7, #4]
 8011e7a:	4413      	add	r3, r2
 8011e7c:	881b      	ldrh	r3, [r3, #0]
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d001      	beq.n	8011e86 <cmp_lfn+0xce>
 8011e82:	2300      	movs	r3, #0
 8011e84:	e000      	b.n	8011e88 <cmp_lfn+0xd0>

	return 1;		/* The part of LFN matched */
 8011e86:	2301      	movs	r3, #1
}
 8011e88:	4618      	mov	r0, r3
 8011e8a:	371c      	adds	r7, #28
 8011e8c:	46bd      	mov	sp, r7
 8011e8e:	bd90      	pop	{r4, r7, pc}
 8011e90:	0801e3ec 	.word	0x0801e3ec

08011e94 <pick_lfn>:

static int pick_lfn (	/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8011e94:	b580      	push	{r7, lr}
 8011e96:	b086      	sub	sp, #24
 8011e98:	af00      	add	r7, sp, #0
 8011e9a:	6078      	str	r0, [r7, #4]
 8011e9c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8011e9e:	683b      	ldr	r3, [r7, #0]
 8011ea0:	331a      	adds	r3, #26
 8011ea2:	4618      	mov	r0, r3
 8011ea4:	f7fe fa30 	bl	8010308 <ld_word>
 8011ea8:	4603      	mov	r3, r0
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d001      	beq.n	8011eb2 <pick_lfn+0x1e>
 8011eae:	2300      	movs	r3, #0
 8011eb0:	e050      	b.n	8011f54 <pick_lfn+0xc0>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8011eb2:	683b      	ldr	r3, [r7, #0]
 8011eb4:	781b      	ldrb	r3, [r3, #0]
 8011eb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011eba:	1e5a      	subs	r2, r3, #1
 8011ebc:	4613      	mov	r3, r2
 8011ebe:	005b      	lsls	r3, r3, #1
 8011ec0:	4413      	add	r3, r2
 8011ec2:	009b      	lsls	r3, r3, #2
 8011ec4:	4413      	add	r3, r2
 8011ec6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011ec8:	2301      	movs	r3, #1
 8011eca:	81fb      	strh	r3, [r7, #14]
 8011ecc:	2300      	movs	r3, #0
 8011ece:	613b      	str	r3, [r7, #16]
 8011ed0:	e028      	b.n	8011f24 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8011ed2:	4a22      	ldr	r2, [pc, #136]	@ (8011f5c <pick_lfn+0xc8>)
 8011ed4:	693b      	ldr	r3, [r7, #16]
 8011ed6:	4413      	add	r3, r2
 8011ed8:	781b      	ldrb	r3, [r3, #0]
 8011eda:	461a      	mov	r2, r3
 8011edc:	683b      	ldr	r3, [r7, #0]
 8011ede:	4413      	add	r3, r2
 8011ee0:	4618      	mov	r0, r3
 8011ee2:	f7fe fa11 	bl	8010308 <ld_word>
 8011ee6:	4603      	mov	r3, r0
 8011ee8:	81bb      	strh	r3, [r7, #12]
		if (wc != 0) {
 8011eea:	89fb      	ldrh	r3, [r7, #14]
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d00f      	beq.n	8011f10 <pick_lfn+0x7c>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 8011ef0:	697b      	ldr	r3, [r7, #20]
 8011ef2:	2bff      	cmp	r3, #255	@ 0xff
 8011ef4:	d901      	bls.n	8011efa <pick_lfn+0x66>
 8011ef6:	2300      	movs	r3, #0
 8011ef8:	e02c      	b.n	8011f54 <pick_lfn+0xc0>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8011efa:	89bb      	ldrh	r3, [r7, #12]
 8011efc:	81fb      	strh	r3, [r7, #14]
 8011efe:	697b      	ldr	r3, [r7, #20]
 8011f00:	1c5a      	adds	r2, r3, #1
 8011f02:	617a      	str	r2, [r7, #20]
 8011f04:	005b      	lsls	r3, r3, #1
 8011f06:	687a      	ldr	r2, [r7, #4]
 8011f08:	4413      	add	r3, r2
 8011f0a:	89fa      	ldrh	r2, [r7, #14]
 8011f0c:	801a      	strh	r2, [r3, #0]
 8011f0e:	e006      	b.n	8011f1e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8011f10:	89bb      	ldrh	r3, [r7, #12]
 8011f12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011f16:	4293      	cmp	r3, r2
 8011f18:	d001      	beq.n	8011f1e <pick_lfn+0x8a>
 8011f1a:	2300      	movs	r3, #0
 8011f1c:	e01a      	b.n	8011f54 <pick_lfn+0xc0>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011f1e:	693b      	ldr	r3, [r7, #16]
 8011f20:	3301      	adds	r3, #1
 8011f22:	613b      	str	r3, [r7, #16]
 8011f24:	693b      	ldr	r3, [r7, #16]
 8011f26:	2b0c      	cmp	r3, #12
 8011f28:	d9d3      	bls.n	8011ed2 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF && wc != 0) {	/* Put terminator if it is the last LFN part and not terminated */
 8011f2a:	683b      	ldr	r3, [r7, #0]
 8011f2c:	781b      	ldrb	r3, [r3, #0]
 8011f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d00d      	beq.n	8011f52 <pick_lfn+0xbe>
 8011f36:	89fb      	ldrh	r3, [r7, #14]
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d00a      	beq.n	8011f52 <pick_lfn+0xbe>
		if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 8011f3c:	697b      	ldr	r3, [r7, #20]
 8011f3e:	2bff      	cmp	r3, #255	@ 0xff
 8011f40:	d901      	bls.n	8011f46 <pick_lfn+0xb2>
 8011f42:	2300      	movs	r3, #0
 8011f44:	e006      	b.n	8011f54 <pick_lfn+0xc0>
		lfnbuf[i] = 0;
 8011f46:	697b      	ldr	r3, [r7, #20]
 8011f48:	005b      	lsls	r3, r3, #1
 8011f4a:	687a      	ldr	r2, [r7, #4]
 8011f4c:	4413      	add	r3, r2
 8011f4e:	2200      	movs	r2, #0
 8011f50:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8011f52:	2301      	movs	r3, #1
}
 8011f54:	4618      	mov	r0, r3
 8011f56:	3718      	adds	r7, #24
 8011f58:	46bd      	mov	sp, r7
 8011f5a:	bd80      	pop	{r7, pc}
 8011f5c:	0801e3ec 	.word	0x0801e3ec

08011f60 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8011f60:	b580      	push	{r7, lr}
 8011f62:	b088      	sub	sp, #32
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	60f8      	str	r0, [r7, #12]
 8011f68:	60b9      	str	r1, [r7, #8]
 8011f6a:	4611      	mov	r1, r2
 8011f6c:	461a      	mov	r2, r3
 8011f6e:	460b      	mov	r3, r1
 8011f70:	71fb      	strb	r3, [r7, #7]
 8011f72:	4613      	mov	r3, r2
 8011f74:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8011f76:	68bb      	ldr	r3, [r7, #8]
 8011f78:	330d      	adds	r3, #13
 8011f7a:	79ba      	ldrb	r2, [r7, #6]
 8011f7c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8011f7e:	68bb      	ldr	r3, [r7, #8]
 8011f80:	330b      	adds	r3, #11
 8011f82:	220f      	movs	r2, #15
 8011f84:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8011f86:	68bb      	ldr	r3, [r7, #8]
 8011f88:	330c      	adds	r3, #12
 8011f8a:	2200      	movs	r2, #0
 8011f8c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8011f8e:	68bb      	ldr	r3, [r7, #8]
 8011f90:	331a      	adds	r3, #26
 8011f92:	2100      	movs	r1, #0
 8011f94:	4618      	mov	r0, r3
 8011f96:	f7fe facd 	bl	8010534 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8011f9a:	79fb      	ldrb	r3, [r7, #7]
 8011f9c:	1e5a      	subs	r2, r3, #1
 8011f9e:	4613      	mov	r3, r2
 8011fa0:	005b      	lsls	r3, r3, #1
 8011fa2:	4413      	add	r3, r2
 8011fa4:	009b      	lsls	r3, r3, #2
 8011fa6:	4413      	add	r3, r2
 8011fa8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8011faa:	2300      	movs	r3, #0
 8011fac:	82fb      	strh	r3, [r7, #22]
 8011fae:	2300      	movs	r3, #0
 8011fb0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011fb2:	8afb      	ldrh	r3, [r7, #22]
 8011fb4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011fb8:	4293      	cmp	r3, r2
 8011fba:	d007      	beq.n	8011fcc <put_lfn+0x6c>
 8011fbc:	69fb      	ldr	r3, [r7, #28]
 8011fbe:	1c5a      	adds	r2, r3, #1
 8011fc0:	61fa      	str	r2, [r7, #28]
 8011fc2:	005b      	lsls	r3, r3, #1
 8011fc4:	68fa      	ldr	r2, [r7, #12]
 8011fc6:	4413      	add	r3, r2
 8011fc8:	881b      	ldrh	r3, [r3, #0]
 8011fca:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8011fcc:	4a17      	ldr	r2, [pc, #92]	@ (801202c <put_lfn+0xcc>)
 8011fce:	69bb      	ldr	r3, [r7, #24]
 8011fd0:	4413      	add	r3, r2
 8011fd2:	781b      	ldrb	r3, [r3, #0]
 8011fd4:	461a      	mov	r2, r3
 8011fd6:	68bb      	ldr	r3, [r7, #8]
 8011fd8:	4413      	add	r3, r2
 8011fda:	8afa      	ldrh	r2, [r7, #22]
 8011fdc:	4611      	mov	r1, r2
 8011fde:	4618      	mov	r0, r3
 8011fe0:	f7fe faa8 	bl	8010534 <st_word>
		if (wc == 0) wc = 0xFFFF;			/* Padding characters for following items */
 8011fe4:	8afb      	ldrh	r3, [r7, #22]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d102      	bne.n	8011ff0 <put_lfn+0x90>
 8011fea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011fee:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8011ff0:	69bb      	ldr	r3, [r7, #24]
 8011ff2:	3301      	adds	r3, #1
 8011ff4:	61bb      	str	r3, [r7, #24]
 8011ff6:	69bb      	ldr	r3, [r7, #24]
 8011ff8:	2b0c      	cmp	r3, #12
 8011ffa:	d9da      	bls.n	8011fb2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8011ffc:	8afb      	ldrh	r3, [r7, #22]
 8011ffe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012002:	4293      	cmp	r3, r2
 8012004:	d006      	beq.n	8012014 <put_lfn+0xb4>
 8012006:	69fb      	ldr	r3, [r7, #28]
 8012008:	005b      	lsls	r3, r3, #1
 801200a:	68fa      	ldr	r2, [r7, #12]
 801200c:	4413      	add	r3, r2
 801200e:	881b      	ldrh	r3, [r3, #0]
 8012010:	2b00      	cmp	r3, #0
 8012012:	d103      	bne.n	801201c <put_lfn+0xbc>
 8012014:	79fb      	ldrb	r3, [r7, #7]
 8012016:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801201a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801201c:	68bb      	ldr	r3, [r7, #8]
 801201e:	79fa      	ldrb	r2, [r7, #7]
 8012020:	701a      	strb	r2, [r3, #0]
}
 8012022:	bf00      	nop
 8012024:	3720      	adds	r7, #32
 8012026:	46bd      	mov	sp, r7
 8012028:	bd80      	pop	{r7, pc}
 801202a:	bf00      	nop
 801202c:	0801e3ec 	.word	0x0801e3ec

08012030 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN in directory form */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8012030:	b580      	push	{r7, lr}
 8012032:	b08c      	sub	sp, #48	@ 0x30
 8012034:	af00      	add	r7, sp, #0
 8012036:	60f8      	str	r0, [r7, #12]
 8012038:	60b9      	str	r1, [r7, #8]
 801203a:	607a      	str	r2, [r7, #4]
 801203c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sreg;


	memcpy(dst, src, 11);	/* Prepare the SFN to be modified */
 801203e:	220b      	movs	r2, #11
 8012040:	68b9      	ldr	r1, [r7, #8]
 8012042:	68f8      	ldr	r0, [r7, #12]
 8012044:	f007 f96f 	bl	8019326 <memcpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8012048:	683b      	ldr	r3, [r7, #0]
 801204a:	2b05      	cmp	r3, #5
 801204c:	d929      	bls.n	80120a2 <gen_numname+0x72>
		sreg = seq;
 801204e:	683b      	ldr	r3, [r7, #0]
 8012050:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC as hash value */
 8012052:	e020      	b.n	8012096 <gen_numname+0x66>
			wc = *lfn++;
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	1c9a      	adds	r2, r3, #2
 8012058:	607a      	str	r2, [r7, #4]
 801205a:	881b      	ldrh	r3, [r3, #0]
 801205c:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 801205e:	2300      	movs	r3, #0
 8012060:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012062:	e015      	b.n	8012090 <gen_numname+0x60>
				sreg = (sreg << 1) + (wc & 1);
 8012064:	69fb      	ldr	r3, [r7, #28]
 8012066:	005a      	lsls	r2, r3, #1
 8012068:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801206a:	f003 0301 	and.w	r3, r3, #1
 801206e:	4413      	add	r3, r2
 8012070:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8012072:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012074:	085b      	lsrs	r3, r3, #1
 8012076:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sreg & 0x10000) sreg ^= 0x11021;
 8012078:	69fb      	ldr	r3, [r7, #28]
 801207a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801207e:	2b00      	cmp	r3, #0
 8012080:	d003      	beq.n	801208a <gen_numname+0x5a>
 8012082:	69fa      	ldr	r2, [r7, #28]
 8012084:	4b3c      	ldr	r3, [pc, #240]	@ (8012178 <gen_numname+0x148>)
 8012086:	4053      	eors	r3, r2
 8012088:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801208a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801208c:	3301      	adds	r3, #1
 801208e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012092:	2b0f      	cmp	r3, #15
 8012094:	d9e6      	bls.n	8012064 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC as hash value */
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	881b      	ldrh	r3, [r3, #0]
 801209a:	2b00      	cmp	r3, #0
 801209c:	d1da      	bne.n	8012054 <gen_numname+0x24>
			}
		}
		seq = (UINT)sreg;
 801209e:	69fb      	ldr	r3, [r7, #28]
 80120a0:	603b      	str	r3, [r7, #0]
	}

	/* Make suffix (~ + hexadecimal) */
	i = 7;
 80120a2:	2307      	movs	r3, #7
 80120a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0'); seq /= 16;
 80120a6:	683b      	ldr	r3, [r7, #0]
 80120a8:	b2db      	uxtb	r3, r3
 80120aa:	f003 030f 	and.w	r3, r3, #15
 80120ae:	b2db      	uxtb	r3, r3
 80120b0:	3330      	adds	r3, #48	@ 0x30
 80120b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80120b6:	683b      	ldr	r3, [r7, #0]
 80120b8:	091b      	lsrs	r3, r3, #4
 80120ba:	603b      	str	r3, [r7, #0]
		if (c > '9') c += 7;
 80120bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80120c0:	2b39      	cmp	r3, #57	@ 0x39
 80120c2:	d904      	bls.n	80120ce <gen_numname+0x9e>
 80120c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80120c8:	3307      	adds	r3, #7
 80120ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80120ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120d0:	1e5a      	subs	r2, r3, #1
 80120d2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80120d4:	3330      	adds	r3, #48	@ 0x30
 80120d6:	443b      	add	r3, r7
 80120d8:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80120dc:	f803 2c1c 	strb.w	r2, [r3, #-28]
	} while (i && seq);
 80120e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d002      	beq.n	80120ec <gen_numname+0xbc>
 80120e6:	683b      	ldr	r3, [r7, #0]
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d1dc      	bne.n	80120a6 <gen_numname+0x76>
	ns[i] = '~';
 80120ec:	f107 0214 	add.w	r2, r7, #20
 80120f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120f2:	4413      	add	r3, r2
 80120f4:	227e      	movs	r2, #126	@ 0x7e
 80120f6:	701a      	strb	r2, [r3, #0]

	/* Append the suffix to the SFN body */
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 80120f8:	2300      	movs	r3, #0
 80120fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80120fc:	e014      	b.n	8012128 <gen_numname+0xf8>
		if (dbc_1st(dst[j])) {	/* To avoid DBC break up */
 80120fe:	68fa      	ldr	r2, [r7, #12]
 8012100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012102:	4413      	add	r3, r2
 8012104:	781b      	ldrb	r3, [r3, #0]
 8012106:	4618      	mov	r0, r3
 8012108:	f7fe fae3 	bl	80106d2 <dbc_1st>
 801210c:	4603      	mov	r3, r0
 801210e:	2b00      	cmp	r3, #0
 8012110:	d007      	beq.n	8012122 <gen_numname+0xf2>
			if (j == i - 1) break;
 8012112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012114:	3b01      	subs	r3, #1
 8012116:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012118:	429a      	cmp	r2, r3
 801211a:	d010      	beq.n	801213e <gen_numname+0x10e>
			j++;
 801211c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801211e:	3301      	adds	r3, #1
 8012120:	627b      	str	r3, [r7, #36]	@ 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 8012122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012124:	3301      	adds	r3, #1
 8012126:	627b      	str	r3, [r7, #36]	@ 0x24
 8012128:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801212a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801212c:	429a      	cmp	r2, r3
 801212e:	d207      	bcs.n	8012140 <gen_numname+0x110>
 8012130:	68fa      	ldr	r2, [r7, #12]
 8012132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012134:	4413      	add	r3, r2
 8012136:	781b      	ldrb	r3, [r3, #0]
 8012138:	2b20      	cmp	r3, #32
 801213a:	d1e0      	bne.n	80120fe <gen_numname+0xce>
 801213c:	e000      	b.n	8012140 <gen_numname+0x110>
			if (j == i - 1) break;
 801213e:	bf00      	nop
		}
	}
	do {	/* Append the suffix */
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012142:	2b07      	cmp	r3, #7
 8012144:	d807      	bhi.n	8012156 <gen_numname+0x126>
 8012146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012148:	1c5a      	adds	r2, r3, #1
 801214a:	62ba      	str	r2, [r7, #40]	@ 0x28
 801214c:	3330      	adds	r3, #48	@ 0x30
 801214e:	443b      	add	r3, r7
 8012150:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8012154:	e000      	b.n	8012158 <gen_numname+0x128>
 8012156:	2120      	movs	r1, #32
 8012158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801215a:	1c5a      	adds	r2, r3, #1
 801215c:	627a      	str	r2, [r7, #36]	@ 0x24
 801215e:	68fa      	ldr	r2, [r7, #12]
 8012160:	4413      	add	r3, r2
 8012162:	460a      	mov	r2, r1
 8012164:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8012166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012168:	2b07      	cmp	r3, #7
 801216a:	d9e9      	bls.n	8012140 <gen_numname+0x110>
}
 801216c:	bf00      	nop
 801216e:	bf00      	nop
 8012170:	3730      	adds	r7, #48	@ 0x30
 8012172:	46bd      	mov	sp, r7
 8012174:	bd80      	pop	{r7, pc}
 8012176:	bf00      	nop
 8012178:	00011021 	.word	0x00011021

0801217c <sum_sfn>:
/*-----------------------------------------------------------------------*/

static BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 801217c:	b480      	push	{r7}
 801217e:	b085      	sub	sp, #20
 8012180:	af00      	add	r7, sp, #0
 8012182:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8012184:	2300      	movs	r3, #0
 8012186:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8012188:	230b      	movs	r3, #11
 801218a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801218c:	7bfb      	ldrb	r3, [r7, #15]
 801218e:	b2da      	uxtb	r2, r3
 8012190:	0852      	lsrs	r2, r2, #1
 8012192:	01db      	lsls	r3, r3, #7
 8012194:	4313      	orrs	r3, r2
 8012196:	b2da      	uxtb	r2, r3
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	1c59      	adds	r1, r3, #1
 801219c:	6079      	str	r1, [r7, #4]
 801219e:	781b      	ldrb	r3, [r3, #0]
 80121a0:	4413      	add	r3, r2
 80121a2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80121a4:	68bb      	ldr	r3, [r7, #8]
 80121a6:	3b01      	subs	r3, #1
 80121a8:	60bb      	str	r3, [r7, #8]
 80121aa:	68bb      	ldr	r3, [r7, #8]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d1ed      	bne.n	801218c <sum_sfn+0x10>
	return sum;
 80121b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80121b2:	4618      	mov	r0, r3
 80121b4:	3714      	adds	r7, #20
 80121b6:	46bd      	mov	sp, r7
 80121b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121bc:	4770      	bx	lr

080121be <xdir_sum>:
/*-----------------------------------------------------------------------*/

static WORD xdir_sum (	/* Get checksum of the directoly entry block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 80121be:	b480      	push	{r7}
 80121c0:	b087      	sub	sp, #28
 80121c2:	af00      	add	r7, sp, #0
 80121c4:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	3301      	adds	r3, #1
 80121ca:	781b      	ldrb	r3, [r3, #0]
 80121cc:	3301      	adds	r3, #1
 80121ce:	015b      	lsls	r3, r3, #5
 80121d0:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 80121d2:	2300      	movs	r3, #0
 80121d4:	827b      	strh	r3, [r7, #18]
 80121d6:	2300      	movs	r3, #0
 80121d8:	617b      	str	r3, [r7, #20]
 80121da:	e017      	b.n	801220c <xdir_sum+0x4e>
		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
 80121dc:	697b      	ldr	r3, [r7, #20]
 80121de:	2b02      	cmp	r3, #2
 80121e0:	d103      	bne.n	80121ea <xdir_sum+0x2c>
			i++;
 80121e2:	697b      	ldr	r3, [r7, #20]
 80121e4:	3301      	adds	r3, #1
 80121e6:	617b      	str	r3, [r7, #20]
 80121e8:	e00d      	b.n	8012206 <xdir_sum+0x48>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 80121ea:	8a7b      	ldrh	r3, [r7, #18]
 80121ec:	03db      	lsls	r3, r3, #15
 80121ee:	b29a      	uxth	r2, r3
 80121f0:	8a7b      	ldrh	r3, [r7, #18]
 80121f2:	085b      	lsrs	r3, r3, #1
 80121f4:	b29b      	uxth	r3, r3
 80121f6:	4413      	add	r3, r2
 80121f8:	b29b      	uxth	r3, r3
 80121fa:	6879      	ldr	r1, [r7, #4]
 80121fc:	697a      	ldr	r2, [r7, #20]
 80121fe:	440a      	add	r2, r1
 8012200:	7812      	ldrb	r2, [r2, #0]
 8012202:	4413      	add	r3, r2
 8012204:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 8012206:	697b      	ldr	r3, [r7, #20]
 8012208:	3301      	adds	r3, #1
 801220a:	617b      	str	r3, [r7, #20]
 801220c:	697a      	ldr	r2, [r7, #20]
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	429a      	cmp	r2, r3
 8012212:	d3e3      	bcc.n	80121dc <xdir_sum+0x1e>
		}
	}
	return sum;
 8012214:	8a7b      	ldrh	r3, [r7, #18]
}
 8012216:	4618      	mov	r0, r3
 8012218:	371c      	adds	r7, #28
 801221a:	46bd      	mov	sp, r7
 801221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012220:	4770      	bx	lr

08012222 <xname_sum>:


static WORD xname_sum (	/* Get check sum (to be used as hash) of the file name */
	const WCHAR* name	/* File name to be calculated */
)
{
 8012222:	b580      	push	{r7, lr}
 8012224:	b084      	sub	sp, #16
 8012226:	af00      	add	r7, sp, #0
 8012228:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 801222a:	2300      	movs	r3, #0
 801222c:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 801222e:	e01f      	b.n	8012270 <xname_sum+0x4e>
		chr = (WCHAR)ff_wtoupper(chr);		/* File name needs to be up-case converted */
 8012230:	89bb      	ldrh	r3, [r7, #12]
 8012232:	4618      	mov	r0, r3
 8012234:	f003 fc98 	bl	8015b68 <ff_wtoupper>
 8012238:	4603      	mov	r3, r0
 801223a:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 801223c:	89fb      	ldrh	r3, [r7, #14]
 801223e:	03db      	lsls	r3, r3, #15
 8012240:	b29a      	uxth	r2, r3
 8012242:	89fb      	ldrh	r3, [r7, #14]
 8012244:	085b      	lsrs	r3, r3, #1
 8012246:	b29b      	uxth	r3, r3
 8012248:	4413      	add	r3, r2
 801224a:	b29a      	uxth	r2, r3
 801224c:	89bb      	ldrh	r3, [r7, #12]
 801224e:	b2db      	uxtb	r3, r3
 8012250:	b29b      	uxth	r3, r3
 8012252:	4413      	add	r3, r2
 8012254:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8012256:	89fb      	ldrh	r3, [r7, #14]
 8012258:	03db      	lsls	r3, r3, #15
 801225a:	b29a      	uxth	r2, r3
 801225c:	89fb      	ldrh	r3, [r7, #14]
 801225e:	085b      	lsrs	r3, r3, #1
 8012260:	b29b      	uxth	r3, r3
 8012262:	4413      	add	r3, r2
 8012264:	b29a      	uxth	r2, r3
 8012266:	89bb      	ldrh	r3, [r7, #12]
 8012268:	0a1b      	lsrs	r3, r3, #8
 801226a:	b29b      	uxth	r3, r3
 801226c:	4413      	add	r3, r2
 801226e:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	1c9a      	adds	r2, r3, #2
 8012274:	607a      	str	r2, [r7, #4]
 8012276:	881b      	ldrh	r3, [r3, #0]
 8012278:	81bb      	strh	r3, [r7, #12]
 801227a:	89bb      	ldrh	r3, [r7, #12]
 801227c:	2b00      	cmp	r3, #0
 801227e:	d1d7      	bne.n	8012230 <xname_sum+0xe>
	}
	return sum;
 8012280:	89fb      	ldrh	r3, [r7, #14]
}
 8012282:	4618      	mov	r0, r3
 8012284:	3710      	adds	r7, #16
 8012286:	46bd      	mov	sp, r7
 8012288:	bd80      	pop	{r7, pc}
	...

0801228c <load_xdir>:
/*------------------------------------*/

static FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp					/* Reading directory object pointing top of the entry block to load */
)
{
 801228c:	b590      	push	{r4, r7, lr}
 801228e:	b087      	sub	sp, #28
 8012290:	af00      	add	r7, sp, #0
 8012292:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory directory entry block 85+C0+C1s */
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	695b      	ldr	r3, [r3, #20]
 801229a:	60fb      	str	r3, [r7, #12]


	/* Load file directory entry */
	res = move_window(dp->obj.fs, dp->sect);
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	681a      	ldr	r2, [r3, #0]
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80122a4:	4619      	mov	r1, r3
 80122a6:	4610      	mov	r0, r2
 80122a8:	f7fe fc5a 	bl	8010b60 <move_window>
 80122ac:	4603      	mov	r3, r0
 80122ae:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80122b0:	7dfb      	ldrb	r3, [r7, #23]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d001      	beq.n	80122ba <load_xdir+0x2e>
 80122b6:	7dfb      	ldrb	r3, [r7, #23]
 80122b8:	e0a9      	b.n	801240e <load_xdir+0x182>
	if (dp->dir[XDIR_Type] != ET_FILEDIR) return FR_INT_ERR;	/* Invalid order */
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80122be:	781b      	ldrb	r3, [r3, #0]
 80122c0:	2b85      	cmp	r3, #133	@ 0x85
 80122c2:	d001      	beq.n	80122c8 <load_xdir+0x3c>
 80122c4:	2302      	movs	r3, #2
 80122c6:	e0a2      	b.n	801240e <load_xdir+0x182>
	memcpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80122cc:	2220      	movs	r2, #32
 80122ce:	4619      	mov	r1, r3
 80122d0:	68f8      	ldr	r0, [r7, #12]
 80122d2:	f007 f828 	bl	8019326 <memcpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	3301      	adds	r3, #1
 80122da:	781b      	ldrb	r3, [r3, #0]
 80122dc:	3301      	adds	r3, #1
 80122de:	015b      	lsls	r3, r3, #5
 80122e0:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 80122e2:	68bb      	ldr	r3, [r7, #8]
 80122e4:	2b5f      	cmp	r3, #95	@ 0x5f
 80122e6:	d903      	bls.n	80122f0 <load_xdir+0x64>
 80122e8:	68bb      	ldr	r3, [r7, #8]
 80122ea:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 80122ee:	d901      	bls.n	80122f4 <load_xdir+0x68>
 80122f0:	2302      	movs	r3, #2
 80122f2:	e08c      	b.n	801240e <load_xdir+0x182>

	/* Load stream extension entry */
	res = dir_next(dp, 0);
 80122f4:	2100      	movs	r1, #0
 80122f6:	6878      	ldr	r0, [r7, #4]
 80122f8:	f7ff fc0d 	bl	8011b16 <dir_next>
 80122fc:	4603      	mov	r3, r0
 80122fe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 8012300:	7dfb      	ldrb	r3, [r7, #23]
 8012302:	2b04      	cmp	r3, #4
 8012304:	d101      	bne.n	801230a <load_xdir+0x7e>
 8012306:	2302      	movs	r3, #2
 8012308:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801230a:	7dfb      	ldrb	r3, [r7, #23]
 801230c:	2b00      	cmp	r3, #0
 801230e:	d001      	beq.n	8012314 <load_xdir+0x88>
 8012310:	7dfb      	ldrb	r3, [r7, #23]
 8012312:	e07c      	b.n	801240e <load_xdir+0x182>
	res = move_window(dp->obj.fs, dp->sect);
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	681a      	ldr	r2, [r3, #0]
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801231c:	4619      	mov	r1, r3
 801231e:	4610      	mov	r0, r2
 8012320:	f7fe fc1e 	bl	8010b60 <move_window>
 8012324:	4603      	mov	r3, r0
 8012326:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012328:	7dfb      	ldrb	r3, [r7, #23]
 801232a:	2b00      	cmp	r3, #0
 801232c:	d001      	beq.n	8012332 <load_xdir+0xa6>
 801232e:	7dfb      	ldrb	r3, [r7, #23]
 8012330:	e06d      	b.n	801240e <load_xdir+0x182>
	if (dp->dir[XDIR_Type] != ET_STREAM) return FR_INT_ERR;	/* Invalid order */
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012336:	781b      	ldrb	r3, [r3, #0]
 8012338:	2bc0      	cmp	r3, #192	@ 0xc0
 801233a:	d001      	beq.n	8012340 <load_xdir+0xb4>
 801233c:	2302      	movs	r3, #2
 801233e:	e066      	b.n	801240e <load_xdir+0x182>
	memcpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	f103 0020 	add.w	r0, r3, #32
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801234a:	2220      	movs	r2, #32
 801234c:	4619      	mov	r1, r3
 801234e:	f006 ffea 	bl	8019326 <memcpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	3323      	adds	r3, #35	@ 0x23
 8012356:	781b      	ldrb	r3, [r3, #0]
 8012358:	332c      	adds	r3, #44	@ 0x2c
 801235a:	4a2f      	ldr	r2, [pc, #188]	@ (8012418 <load_xdir+0x18c>)
 801235c:	fba2 2303 	umull	r2, r3, r2, r3
 8012360:	08db      	lsrs	r3, r3, #3
 8012362:	015b      	lsls	r3, r3, #5
 8012364:	68ba      	ldr	r2, [r7, #8]
 8012366:	429a      	cmp	r2, r3
 8012368:	d201      	bcs.n	801236e <load_xdir+0xe2>
 801236a:	2302      	movs	r3, #2
 801236c:	e04f      	b.n	801240e <load_xdir+0x182>

	/* Load file name entries */
	i = 2 * SZDIRE;	/* Name offset to load */
 801236e:	2340      	movs	r3, #64	@ 0x40
 8012370:	613b      	str	r3, [r7, #16]
	do {
		res = dir_next(dp, 0);
 8012372:	2100      	movs	r1, #0
 8012374:	6878      	ldr	r0, [r7, #4]
 8012376:	f7ff fbce 	bl	8011b16 <dir_next>
 801237a:	4603      	mov	r3, r0
 801237c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 801237e:	7dfb      	ldrb	r3, [r7, #23]
 8012380:	2b04      	cmp	r3, #4
 8012382:	d101      	bne.n	8012388 <load_xdir+0xfc>
 8012384:	2302      	movs	r3, #2
 8012386:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 8012388:	7dfb      	ldrb	r3, [r7, #23]
 801238a:	2b00      	cmp	r3, #0
 801238c:	d001      	beq.n	8012392 <load_xdir+0x106>
 801238e:	7dfb      	ldrb	r3, [r7, #23]
 8012390:	e03d      	b.n	801240e <load_xdir+0x182>
		res = move_window(dp->obj.fs, dp->sect);
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	681a      	ldr	r2, [r3, #0]
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801239a:	4619      	mov	r1, r3
 801239c:	4610      	mov	r0, r2
 801239e:	f7fe fbdf 	bl	8010b60 <move_window>
 80123a2:	4603      	mov	r3, r0
 80123a4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 80123a6:	7dfb      	ldrb	r3, [r7, #23]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d001      	beq.n	80123b0 <load_xdir+0x124>
 80123ac:	7dfb      	ldrb	r3, [r7, #23]
 80123ae:	e02e      	b.n	801240e <load_xdir+0x182>
		if (dp->dir[XDIR_Type] != ET_FILENAME) return FR_INT_ERR;	/* Invalid order */
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80123b4:	781b      	ldrb	r3, [r3, #0]
 80123b6:	2bc1      	cmp	r3, #193	@ 0xc1
 80123b8:	d001      	beq.n	80123be <load_xdir+0x132>
 80123ba:	2302      	movs	r3, #2
 80123bc:	e027      	b.n	801240e <load_xdir+0x182>
		if (i < MAXDIRB(FF_MAX_LFN)) memcpy(dirb + i, dp->dir, SZDIRE);
 80123be:	693b      	ldr	r3, [r7, #16]
 80123c0:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 80123c4:	d208      	bcs.n	80123d8 <load_xdir+0x14c>
 80123c6:	68fa      	ldr	r2, [r7, #12]
 80123c8:	693b      	ldr	r3, [r7, #16]
 80123ca:	18d0      	adds	r0, r2, r3
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80123d0:	2220      	movs	r2, #32
 80123d2:	4619      	mov	r1, r3
 80123d4:	f006 ffa7 	bl	8019326 <memcpy>
	} while ((i += SZDIRE) < sz_ent);
 80123d8:	693b      	ldr	r3, [r7, #16]
 80123da:	3320      	adds	r3, #32
 80123dc:	613b      	str	r3, [r7, #16]
 80123de:	693a      	ldr	r2, [r7, #16]
 80123e0:	68bb      	ldr	r3, [r7, #8]
 80123e2:	429a      	cmp	r2, r3
 80123e4:	d3c5      	bcc.n	8012372 <load_xdir+0xe6>

	/* Sanity check (do it for only accessible object) */
	if (i <= MAXDIRB(FF_MAX_LFN)) {
 80123e6:	693b      	ldr	r3, [r7, #16]
 80123e8:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 80123ec:	d80e      	bhi.n	801240c <load_xdir+0x180>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 80123ee:	68f8      	ldr	r0, [r7, #12]
 80123f0:	f7ff fee5 	bl	80121be <xdir_sum>
 80123f4:	4603      	mov	r3, r0
 80123f6:	461c      	mov	r4, r3
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	3302      	adds	r3, #2
 80123fc:	4618      	mov	r0, r3
 80123fe:	f7fd ff83 	bl	8010308 <ld_word>
 8012402:	4603      	mov	r3, r0
 8012404:	429c      	cmp	r4, r3
 8012406:	d001      	beq.n	801240c <load_xdir+0x180>
 8012408:	2302      	movs	r3, #2
 801240a:	e000      	b.n	801240e <load_xdir+0x182>
	}
	return FR_OK;
 801240c:	2300      	movs	r3, #0
}
 801240e:	4618      	mov	r0, r3
 8012410:	371c      	adds	r7, #28
 8012412:	46bd      	mov	sp, r7
 8012414:	bd90      	pop	{r4, r7, pc}
 8012416:	bf00      	nop
 8012418:	88888889 	.word	0x88888889

0801241c <init_alloc_info>:

static void init_alloc_info (
	FATFS* fs,		/* Filesystem object */
	FFOBJID* obj	/* Object allocation information to be initialized */
)
{
 801241c:	b580      	push	{r7, lr}
 801241e:	b082      	sub	sp, #8
 8012420:	af00      	add	r7, sp, #0
 8012422:	6078      	str	r0, [r7, #4]
 8012424:	6039      	str	r1, [r7, #0]
	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	695b      	ldr	r3, [r3, #20]
 801242a:	3334      	adds	r3, #52	@ 0x34
 801242c:	4618      	mov	r0, r3
 801242e:	f7fd ff83 	bl	8010338 <ld_dword>
 8012432:	4602      	mov	r2, r0
 8012434:	683b      	ldr	r3, [r7, #0]
 8012436:	609a      	str	r2, [r3, #8]
	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	695b      	ldr	r3, [r3, #20]
 801243c:	3338      	adds	r3, #56	@ 0x38
 801243e:	4618      	mov	r0, r3
 8012440:	f7fd ff9d 	bl	801037e <ld_qword>
 8012444:	4602      	mov	r2, r0
 8012446:	460b      	mov	r3, r1
 8012448:	6839      	ldr	r1, [r7, #0]
 801244a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	695b      	ldr	r3, [r3, #20]
 8012452:	3321      	adds	r3, #33	@ 0x21
 8012454:	781b      	ldrb	r3, [r3, #0]
 8012456:	f003 0302 	and.w	r3, r3, #2
 801245a:	b2da      	uxtb	r2, r3
 801245c:	683b      	ldr	r3, [r7, #0]
 801245e:	71da      	strb	r2, [r3, #7]
	obj->n_frag = 0;										/* No last fragment info */
 8012460:	683b      	ldr	r3, [r7, #0]
 8012462:	2200      	movs	r2, #0
 8012464:	61da      	str	r2, [r3, #28]
}
 8012466:	bf00      	nop
 8012468:	3708      	adds	r7, #8
 801246a:	46bd      	mov	sp, r7
 801246c:	bd80      	pop	{r7, pc}

0801246e <load_obj_xdir>:

static FRESULT load_obj_xdir (
	DIR* dp,			/* Blank directory object to be used to access containing directory */
	const FFOBJID* obj	/* Object with its containing directory information */
)
{
 801246e:	b5b0      	push	{r4, r5, r7, lr}
 8012470:	b084      	sub	sp, #16
 8012472:	af00      	add	r7, sp, #0
 8012474:	6078      	str	r0, [r7, #4]
 8012476:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 8012478:	6839      	ldr	r1, [r7, #0]
 801247a:	6808      	ldr	r0, [r1, #0]
 801247c:	6879      	ldr	r1, [r7, #4]
 801247e:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 8012480:	6839      	ldr	r1, [r7, #0]
 8012482:	6a08      	ldr	r0, [r1, #32]
 8012484:	6879      	ldr	r1, [r7, #4]
 8012486:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 8012488:	6839      	ldr	r1, [r7, #0]
 801248a:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 801248c:	b2c8      	uxtb	r0, r1
 801248e:	6879      	ldr	r1, [r7, #4]
 8012490:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8012492:	6839      	ldr	r1, [r7, #0]
 8012494:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8012496:	2000      	movs	r0, #0
 8012498:	460c      	mov	r4, r1
 801249a:	4605      	mov	r5, r0
 801249c:	f024 02ff 	bic.w	r2, r4, #255	@ 0xff
 80124a0:	2300      	movs	r3, #0
 80124a2:	6879      	ldr	r1, [r7, #4]
 80124a4:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->obj.n_frag = 0;
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	2200      	movs	r2, #0
 80124ac:	61da      	str	r2, [r3, #28]
	dp->blk_ofs = obj->c_ofs;
 80124ae:	683b      	ldr	r3, [r7, #0]
 80124b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	64da      	str	r2, [r3, #76]	@ 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80124ba:	4619      	mov	r1, r3
 80124bc:	6878      	ldr	r0, [r7, #4]
 80124be:	f7ff fa96 	bl	80119ee <dir_sdi>
 80124c2:	4603      	mov	r3, r0
 80124c4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80124c6:	7bfb      	ldrb	r3, [r7, #15]
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d104      	bne.n	80124d6 <load_obj_xdir+0x68>
		res = load_xdir(dp);		/* Load the object's entry block */
 80124cc:	6878      	ldr	r0, [r7, #4]
 80124ce:	f7ff fedd 	bl	801228c <load_xdir>
 80124d2:	4603      	mov	r3, r0
 80124d4:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 80124d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80124d8:	4618      	mov	r0, r3
 80124da:	3710      	adds	r7, #16
 80124dc:	46bd      	mov	sp, r7
 80124de:	bdb0      	pop	{r4, r5, r7, pc}

080124e0 <store_xdir>:
/*----------------------------------------*/

static FRESULT store_xdir (
	DIR* dp				/* Pointer to the directory object */
)
{
 80124e0:	b590      	push	{r4, r7, lr}
 80124e2:	b087      	sub	sp, #28
 80124e4:	af00      	add	r7, sp, #0
 80124e6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the directory entry block 85+C0+C1s */
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	695b      	ldr	r3, [r3, #20]
 80124ee:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	1c9c      	adds	r4, r3, #2
 80124f4:	68f8      	ldr	r0, [r7, #12]
 80124f6:	f7ff fe62 	bl	80121be <xdir_sum>
 80124fa:	4603      	mov	r3, r0
 80124fc:	4619      	mov	r1, r3
 80124fe:	4620      	mov	r0, r4
 8012500:	f7fe f818 	bl	8010534 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	3301      	adds	r3, #1
 8012508:	781b      	ldrb	r3, [r3, #0]
 801250a:	3301      	adds	r3, #1
 801250c:	613b      	str	r3, [r7, #16]

	/* Store the directory entry block to the directory */
	res = dir_sdi(dp, dp->blk_ofs);
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012512:	4619      	mov	r1, r3
 8012514:	6878      	ldr	r0, [r7, #4]
 8012516:	f7ff fa6a 	bl	80119ee <dir_sdi>
 801251a:	4603      	mov	r3, r0
 801251c:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 801251e:	e026      	b.n	801256e <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	681a      	ldr	r2, [r3, #0]
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012528:	4619      	mov	r1, r3
 801252a:	4610      	mov	r0, r2
 801252c:	f7fe fb18 	bl	8010b60 <move_window>
 8012530:	4603      	mov	r3, r0
 8012532:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012534:	7dfb      	ldrb	r3, [r7, #23]
 8012536:	2b00      	cmp	r3, #0
 8012538:	d11d      	bne.n	8012576 <store_xdir+0x96>
		memcpy(dp->dir, dirb, SZDIRE);
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801253e:	2220      	movs	r2, #32
 8012540:	68f9      	ldr	r1, [r7, #12]
 8012542:	4618      	mov	r0, r3
 8012544:	f006 feef 	bl	8019326 <memcpy>
		dp->obj.fs->wflag = 1;
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	2201      	movs	r2, #1
 801254e:	711a      	strb	r2, [r3, #4]
		if (--nent == 0) break;
 8012550:	693b      	ldr	r3, [r7, #16]
 8012552:	3b01      	subs	r3, #1
 8012554:	613b      	str	r3, [r7, #16]
 8012556:	693b      	ldr	r3, [r7, #16]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d00e      	beq.n	801257a <store_xdir+0x9a>
		dirb += SZDIRE;
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	3320      	adds	r3, #32
 8012560:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 8012562:	2100      	movs	r1, #0
 8012564:	6878      	ldr	r0, [r7, #4]
 8012566:	f7ff fad6 	bl	8011b16 <dir_next>
 801256a:	4603      	mov	r3, r0
 801256c:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 801256e:	7dfb      	ldrb	r3, [r7, #23]
 8012570:	2b00      	cmp	r3, #0
 8012572:	d0d5      	beq.n	8012520 <store_xdir+0x40>
 8012574:	e002      	b.n	801257c <store_xdir+0x9c>
		if (res != FR_OK) break;
 8012576:	bf00      	nop
 8012578:	e000      	b.n	801257c <store_xdir+0x9c>
		if (--nent == 0) break;
 801257a:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 801257c:	7dfb      	ldrb	r3, [r7, #23]
 801257e:	2b00      	cmp	r3, #0
 8012580:	d002      	beq.n	8012588 <store_xdir+0xa8>
 8012582:	7dfb      	ldrb	r3, [r7, #23]
 8012584:	2b01      	cmp	r3, #1
 8012586:	d101      	bne.n	801258c <store_xdir+0xac>
 8012588:	7dfb      	ldrb	r3, [r7, #23]
 801258a:	e000      	b.n	801258e <store_xdir+0xae>
 801258c:	2302      	movs	r3, #2
}
 801258e:	4618      	mov	r0, r3
 8012590:	371c      	adds	r7, #28
 8012592:	46bd      	mov	sp, r7
 8012594:	bd90      	pop	{r4, r7, pc}

08012596 <create_xdir>:

static void create_xdir (
	BYTE* dirb,			/* Pointer to the directory entry block buffer */
	const WCHAR* lfn	/* Pointer to the object name */
)
{
 8012596:	b590      	push	{r4, r7, lr}
 8012598:	b085      	sub	sp, #20
 801259a:	af00      	add	r7, sp, #0
 801259c:	6078      	str	r0, [r7, #4]
 801259e:	6039      	str	r1, [r7, #0]
	BYTE nc1, nlen;
	WCHAR wc;


	/* Create file-directory and stream-extension entry */
	memset(dirb, 0, 2 * SZDIRE);
 80125a0:	2240      	movs	r2, #64	@ 0x40
 80125a2:	2100      	movs	r1, #0
 80125a4:	6878      	ldr	r0, [r7, #4]
 80125a6:	f006 f88b 	bl	80186c0 <memset>
	dirb[0 * SZDIRE + XDIR_Type] = ET_FILEDIR;
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	2285      	movs	r2, #133	@ 0x85
 80125ae:	701a      	strb	r2, [r3, #0]
	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	3320      	adds	r3, #32
 80125b4:	22c0      	movs	r2, #192	@ 0xc0
 80125b6:	701a      	strb	r2, [r3, #0]

	/* Create file-name entries */
	i = SZDIRE * 2;	/* Top of file_name entries */
 80125b8:	2340      	movs	r3, #64	@ 0x40
 80125ba:	60fb      	str	r3, [r7, #12]
	nlen = nc1 = 0; wc = 1;
 80125bc:	2300      	movs	r3, #0
 80125be:	72fb      	strb	r3, [r7, #11]
 80125c0:	7afb      	ldrb	r3, [r7, #11]
 80125c2:	72bb      	strb	r3, [r7, #10]
 80125c4:	2301      	movs	r3, #1
 80125c6:	813b      	strh	r3, [r7, #8]
	do {
		dirb[i++] = ET_FILENAME; dirb[i++] = 0;
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	1c5a      	adds	r2, r3, #1
 80125cc:	60fa      	str	r2, [r7, #12]
 80125ce:	687a      	ldr	r2, [r7, #4]
 80125d0:	4413      	add	r3, r2
 80125d2:	22c1      	movs	r2, #193	@ 0xc1
 80125d4:	701a      	strb	r2, [r3, #0]
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	1c5a      	adds	r2, r3, #1
 80125da:	60fa      	str	r2, [r7, #12]
 80125dc:	687a      	ldr	r2, [r7, #4]
 80125de:	4413      	add	r3, r2
 80125e0:	2200      	movs	r2, #0
 80125e2:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (wc != 0 && (wc = lfn[nlen]) != 0) nlen++;	/* Get a character if exist */
 80125e4:	893b      	ldrh	r3, [r7, #8]
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d00b      	beq.n	8012602 <create_xdir+0x6c>
 80125ea:	7abb      	ldrb	r3, [r7, #10]
 80125ec:	005b      	lsls	r3, r3, #1
 80125ee:	683a      	ldr	r2, [r7, #0]
 80125f0:	4413      	add	r3, r2
 80125f2:	881b      	ldrh	r3, [r3, #0]
 80125f4:	813b      	strh	r3, [r7, #8]
 80125f6:	893b      	ldrh	r3, [r7, #8]
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d002      	beq.n	8012602 <create_xdir+0x6c>
 80125fc:	7abb      	ldrb	r3, [r7, #10]
 80125fe:	3301      	adds	r3, #1
 8012600:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, wc); 	/* Store it */
 8012602:	687a      	ldr	r2, [r7, #4]
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	4413      	add	r3, r2
 8012608:	893a      	ldrh	r2, [r7, #8]
 801260a:	4611      	mov	r1, r2
 801260c:	4618      	mov	r0, r3
 801260e:	f7fd ff91 	bl	8010534 <st_word>
			i += 2;
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	3302      	adds	r3, #2
 8012616:	60fb      	str	r3, [r7, #12]
		} while (i % SZDIRE != 0);
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	f003 031f 	and.w	r3, r3, #31
 801261e:	2b00      	cmp	r3, #0
 8012620:	d1e0      	bne.n	80125e4 <create_xdir+0x4e>
		nc1++;
 8012622:	7afb      	ldrb	r3, [r7, #11]
 8012624:	3301      	adds	r3, #1
 8012626:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nlen]);	/* Fill next entry if any char follows */
 8012628:	7abb      	ldrb	r3, [r7, #10]
 801262a:	005b      	lsls	r3, r3, #1
 801262c:	683a      	ldr	r2, [r7, #0]
 801262e:	4413      	add	r3, r2
 8012630:	881b      	ldrh	r3, [r3, #0]
 8012632:	2b00      	cmp	r3, #0
 8012634:	d1c8      	bne.n	80125c8 <create_xdir+0x32>

	dirb[XDIR_NumName] = nlen;		/* Set name length */
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	3323      	adds	r3, #35	@ 0x23
 801263a:	7aba      	ldrb	r2, [r7, #10]
 801263c:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = 1 + nc1;	/* Set secondary count (C0 + C1s) */
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	3301      	adds	r3, #1
 8012642:	7afa      	ldrb	r2, [r7, #11]
 8012644:	3201      	adds	r2, #1
 8012646:	b2d2      	uxtb	r2, r2
 8012648:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8012650:	6838      	ldr	r0, [r7, #0]
 8012652:	f7ff fde6 	bl	8012222 <xname_sum>
 8012656:	4603      	mov	r3, r0
 8012658:	4619      	mov	r1, r3
 801265a:	4620      	mov	r0, r4
 801265c:	f7fd ff6a 	bl	8010534 <st_word>
}
 8012660:	bf00      	nop
 8012662:	3714      	adds	r7, #20
 8012664:	46bd      	mov	sp, r7
 8012666:	bd90      	pop	{r4, r7, pc}

08012668 <dir_read>:

static FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8012668:	b580      	push	{r7, lr}
 801266a:	b086      	sub	sp, #24
 801266c:	af00      	add	r7, sp, #0
 801266e:	6078      	str	r0, [r7, #4]
 8012670:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8012672:	2304      	movs	r3, #4
 8012674:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	613b      	str	r3, [r7, #16]
	BYTE attr, b;
#if FF_USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
 801267c:	23ff      	movs	r3, #255	@ 0xff
 801267e:	757b      	strb	r3, [r7, #21]
 8012680:	23ff      	movs	r3, #255	@ 0xff
 8012682:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8012684:	e0a6      	b.n	80127d4 <dir_read+0x16c>
		res = move_window(fs, dp->sect);
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801268a:	4619      	mov	r1, r3
 801268c:	6938      	ldr	r0, [r7, #16]
 801268e:	f7fe fa67 	bl	8010b60 <move_window>
 8012692:	4603      	mov	r3, r0
 8012694:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012696:	7dfb      	ldrb	r3, [r7, #23]
 8012698:	2b00      	cmp	r3, #0
 801269a:	f040 80a1 	bne.w	80127e0 <dir_read+0x178>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80126a2:	781b      	ldrb	r3, [r3, #0]
 80126a4:	75bb      	strb	r3, [r7, #22]
		if (b == 0) {
 80126a6:	7dbb      	ldrb	r3, [r7, #22]
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d102      	bne.n	80126b2 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80126ac:	2304      	movs	r3, #4
 80126ae:	75fb      	strb	r3, [r7, #23]
 80126b0:	e09d      	b.n	80127ee <dir_read+0x186>
		}
#if FF_FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80126b2:	693b      	ldr	r3, [r7, #16]
 80126b4:	781b      	ldrb	r3, [r3, #0]
 80126b6:	2b04      	cmp	r3, #4
 80126b8:	d11f      	bne.n	80126fa <dir_read+0x92>
			if (FF_USE_LABEL && vol) {
 80126ba:	683b      	ldr	r3, [r7, #0]
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d003      	beq.n	80126c8 <dir_read+0x60>
				if (b == ET_VLABEL) break;	/* Volume label entry? */
 80126c0:	7dbb      	ldrb	r3, [r7, #22]
 80126c2:	2b83      	cmp	r3, #131	@ 0x83
 80126c4:	d17d      	bne.n	80127c2 <dir_read+0x15a>
 80126c6:	e092      	b.n	80127ee <dir_read+0x186>
			} else {
				if (b == ET_FILEDIR) {		/* Start of the file entry block? */
 80126c8:	7dbb      	ldrb	r3, [r7, #22]
 80126ca:	2b85      	cmp	r3, #133	@ 0x85
 80126cc:	d179      	bne.n	80127c2 <dir_read+0x15a>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	64da      	str	r2, [r3, #76]	@ 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 80126d6:	6878      	ldr	r0, [r7, #4]
 80126d8:	f7ff fdd8 	bl	801228c <load_xdir>
 80126dc:	4603      	mov	r3, r0
 80126de:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 80126e0:	7dfb      	ldrb	r3, [r7, #23]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d17e      	bne.n	80127e4 <dir_read+0x17c>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 80126e6:	693b      	ldr	r3, [r7, #16]
 80126e8:	695b      	ldr	r3, [r3, #20]
 80126ea:	3304      	adds	r3, #4
 80126ec:	781b      	ldrb	r3, [r3, #0]
 80126ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80126f2:	b2da      	uxtb	r2, r3
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	719a      	strb	r2, [r3, #6]
					}
					break;
 80126f8:	e074      	b.n	80127e4 <dir_read+0x17c>
				}
			}
		} else
#endif
		{	/* On the FAT/FAT32 volume */
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80126fe:	330b      	adds	r3, #11
 8012700:	781b      	ldrb	r3, [r3, #0]
 8012702:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012706:	73fb      	strb	r3, [r7, #15]
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	7bfa      	ldrb	r2, [r7, #15]
 801270c:	719a      	strb	r2, [r3, #6]
#if FF_USE_LFN		/* LFN configuration */
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 801270e:	7dbb      	ldrb	r3, [r7, #22]
 8012710:	2be5      	cmp	r3, #229	@ 0xe5
 8012712:	d00e      	beq.n	8012732 <dir_read+0xca>
 8012714:	7dbb      	ldrb	r3, [r7, #22]
 8012716:	2b2e      	cmp	r3, #46	@ 0x2e
 8012718:	d00b      	beq.n	8012732 <dir_read+0xca>
 801271a:	7bfb      	ldrb	r3, [r7, #15]
 801271c:	f023 0320 	bic.w	r3, r3, #32
 8012720:	2b08      	cmp	r3, #8
 8012722:	bf0c      	ite	eq
 8012724:	2301      	moveq	r3, #1
 8012726:	2300      	movne	r3, #0
 8012728:	b2db      	uxtb	r3, r3
 801272a:	461a      	mov	r2, r3
 801272c:	683b      	ldr	r3, [r7, #0]
 801272e:	4293      	cmp	r3, r2
 8012730:	d002      	beq.n	8012738 <dir_read+0xd0>
				ord = 0xFF;
 8012732:	23ff      	movs	r3, #255	@ 0xff
 8012734:	757b      	strb	r3, [r7, #21]
 8012736:	e044      	b.n	80127c2 <dir_read+0x15a>
			} else {
				if (attr == AM_LFN) {	/* An LFN entry is found */
 8012738:	7bfb      	ldrb	r3, [r7, #15]
 801273a:	2b0f      	cmp	r3, #15
 801273c:	d12f      	bne.n	801279e <dir_read+0x136>
					if (b & LLEF) {		/* Is it start of an LFN sequence? */
 801273e:	7dbb      	ldrb	r3, [r7, #22]
 8012740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012744:	2b00      	cmp	r3, #0
 8012746:	d00d      	beq.n	8012764 <dir_read+0xfc>
						sum = dp->dir[LDIR_Chksum];
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801274c:	7b5b      	ldrb	r3, [r3, #13]
 801274e:	753b      	strb	r3, [r7, #20]
						b &= (BYTE)~LLEF; ord = b;
 8012750:	7dbb      	ldrb	r3, [r7, #22]
 8012752:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012756:	75bb      	strb	r3, [r7, #22]
 8012758:	7dbb      	ldrb	r3, [r7, #22]
 801275a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8012764:	7dba      	ldrb	r2, [r7, #22]
 8012766:	7d7b      	ldrb	r3, [r7, #21]
 8012768:	429a      	cmp	r2, r3
 801276a:	d115      	bne.n	8012798 <dir_read+0x130>
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012770:	330d      	adds	r3, #13
 8012772:	781b      	ldrb	r3, [r3, #0]
 8012774:	7d3a      	ldrb	r2, [r7, #20]
 8012776:	429a      	cmp	r2, r3
 8012778:	d10e      	bne.n	8012798 <dir_read+0x130>
 801277a:	693b      	ldr	r3, [r7, #16]
 801277c:	691a      	ldr	r2, [r3, #16]
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012782:	4619      	mov	r1, r3
 8012784:	4610      	mov	r0, r2
 8012786:	f7ff fb85 	bl	8011e94 <pick_lfn>
 801278a:	4603      	mov	r3, r0
 801278c:	2b00      	cmp	r3, #0
 801278e:	d003      	beq.n	8012798 <dir_read+0x130>
 8012790:	7d7b      	ldrb	r3, [r7, #21]
 8012792:	3b01      	subs	r3, #1
 8012794:	b2db      	uxtb	r3, r3
 8012796:	e000      	b.n	801279a <dir_read+0x132>
 8012798:	23ff      	movs	r3, #255	@ 0xff
 801279a:	757b      	strb	r3, [r7, #21]
 801279c:	e011      	b.n	80127c2 <dir_read+0x15a>
				} else {				/* An SFN entry is found */
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 801279e:	7d7b      	ldrb	r3, [r7, #21]
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d109      	bne.n	80127b8 <dir_read+0x150>
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80127a8:	4618      	mov	r0, r3
 80127aa:	f7ff fce7 	bl	801217c <sum_sfn>
 80127ae:	4603      	mov	r3, r0
 80127b0:	461a      	mov	r2, r3
 80127b2:	7d3b      	ldrb	r3, [r7, #20]
 80127b4:	4293      	cmp	r3, r2
 80127b6:	d017      	beq.n	80127e8 <dir_read+0x180>
						dp->blk_ofs = 0xFFFFFFFF;	/* It has no LFN. */
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	f04f 32ff 	mov.w	r2, #4294967295
 80127be:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					break;
 80127c0:	e012      	b.n	80127e8 <dir_read+0x180>
			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80127c2:	2100      	movs	r1, #0
 80127c4:	6878      	ldr	r0, [r7, #4]
 80127c6:	f7ff f9a6 	bl	8011b16 <dir_next>
 80127ca:	4603      	mov	r3, r0
 80127cc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80127ce:	7dfb      	ldrb	r3, [r7, #23]
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d10b      	bne.n	80127ec <dir_read+0x184>
	while (dp->sect) {
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80127d8:	2b00      	cmp	r3, #0
 80127da:	f47f af54 	bne.w	8012686 <dir_read+0x1e>
 80127de:	e006      	b.n	80127ee <dir_read+0x186>
		if (res != FR_OK) break;
 80127e0:	bf00      	nop
 80127e2:	e004      	b.n	80127ee <dir_read+0x186>
					break;
 80127e4:	bf00      	nop
 80127e6:	e002      	b.n	80127ee <dir_read+0x186>
					break;
 80127e8:	bf00      	nop
 80127ea:	e000      	b.n	80127ee <dir_read+0x186>
		if (res != FR_OK) break;
 80127ec:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80127ee:	7dfb      	ldrb	r3, [r7, #23]
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d002      	beq.n	80127fa <dir_read+0x192>
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	2200      	movs	r2, #0
 80127f8:	639a      	str	r2, [r3, #56]	@ 0x38
	return res;
 80127fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80127fc:	4618      	mov	r0, r3
 80127fe:	3718      	adds	r7, #24
 8012800:	46bd      	mov	sp, r7
 8012802:	bd80      	pop	{r7, pc}

08012804 <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 8012804:	b590      	push	{r4, r7, lr}
 8012806:	b089      	sub	sp, #36	@ 0x24
 8012808:	af00      	add	r7, sp, #0
 801280a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012812:	2100      	movs	r1, #0
 8012814:	6878      	ldr	r0, [r7, #4]
 8012816:	f7ff f8ea 	bl	80119ee <dir_sdi>
 801281a:	4603      	mov	r3, r0
 801281c:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 801281e:	7ffb      	ldrb	r3, [r7, #31]
 8012820:	2b00      	cmp	r3, #0
 8012822:	d001      	beq.n	8012828 <dir_find+0x24>
 8012824:	7ffb      	ldrb	r3, [r7, #31]
 8012826:	e112      	b.n	8012a4e <dir_find+0x24a>
#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	781b      	ldrb	r3, [r3, #0]
 801282c:	2b04      	cmp	r3, #4
 801282e:	d164      	bne.n	80128fa <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	691b      	ldr	r3, [r3, #16]
 8012834:	4618      	mov	r0, r3
 8012836:	f7ff fcf4 	bl	8012222 <xname_sum>
 801283a:	4603      	mov	r3, r0
 801283c:	813b      	strh	r3, [r7, #8]

		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
 801283e:	e04f      	b.n	80128e0 <dir_find+0xdc>
#if FF_MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > FF_MAX_LFN) continue;		/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	695b      	ldr	r3, [r3, #20]
 8012844:	3324      	adds	r3, #36	@ 0x24
 8012846:	4618      	mov	r0, r3
 8012848:	f7fd fd5e 	bl	8010308 <ld_word>
 801284c:	4603      	mov	r3, r0
 801284e:	461a      	mov	r2, r3
 8012850:	893b      	ldrh	r3, [r7, #8]
 8012852:	4293      	cmp	r3, r2
 8012854:	d143      	bne.n	80128de <dir_find+0xda>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8012856:	68fb      	ldr	r3, [r7, #12]
 8012858:	695b      	ldr	r3, [r3, #20]
 801285a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 801285e:	76fb      	strb	r3, [r7, #27]
 8012860:	2340      	movs	r3, #64	@ 0x40
 8012862:	617b      	str	r3, [r7, #20]
 8012864:	2300      	movs	r3, #0
 8012866:	613b      	str	r3, [r7, #16]
 8012868:	e028      	b.n	80128bc <dir_find+0xb8>
				if ((di % SZDIRE) == 0) di += 2;
 801286a:	697b      	ldr	r3, [r7, #20]
 801286c:	f003 031f 	and.w	r3, r3, #31
 8012870:	2b00      	cmp	r3, #0
 8012872:	d102      	bne.n	801287a <dir_find+0x76>
 8012874:	697b      	ldr	r3, [r7, #20]
 8012876:	3302      	adds	r3, #2
 8012878:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	695a      	ldr	r2, [r3, #20]
 801287e:	697b      	ldr	r3, [r7, #20]
 8012880:	4413      	add	r3, r2
 8012882:	4618      	mov	r0, r3
 8012884:	f7fd fd40 	bl	8010308 <ld_word>
 8012888:	4603      	mov	r3, r0
 801288a:	4618      	mov	r0, r3
 801288c:	f003 f96c 	bl	8015b68 <ff_wtoupper>
 8012890:	4604      	mov	r4, r0
 8012892:	68fb      	ldr	r3, [r7, #12]
 8012894:	691a      	ldr	r2, [r3, #16]
 8012896:	693b      	ldr	r3, [r7, #16]
 8012898:	005b      	lsls	r3, r3, #1
 801289a:	4413      	add	r3, r2
 801289c:	881b      	ldrh	r3, [r3, #0]
 801289e:	4618      	mov	r0, r3
 80128a0:	f003 f962 	bl	8015b68 <ff_wtoupper>
 80128a4:	4603      	mov	r3, r0
 80128a6:	429c      	cmp	r4, r3
 80128a8:	d10c      	bne.n	80128c4 <dir_find+0xc0>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 80128aa:	7efb      	ldrb	r3, [r7, #27]
 80128ac:	3b01      	subs	r3, #1
 80128ae:	76fb      	strb	r3, [r7, #27]
 80128b0:	697b      	ldr	r3, [r7, #20]
 80128b2:	3302      	adds	r3, #2
 80128b4:	617b      	str	r3, [r7, #20]
 80128b6:	693b      	ldr	r3, [r7, #16]
 80128b8:	3301      	adds	r3, #1
 80128ba:	613b      	str	r3, [r7, #16]
 80128bc:	7efb      	ldrb	r3, [r7, #27]
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d1d3      	bne.n	801286a <dir_find+0x66>
 80128c2:	e000      	b.n	80128c6 <dir_find+0xc2>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 80128c4:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 80128c6:	7efb      	ldrb	r3, [r7, #27]
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d109      	bne.n	80128e0 <dir_find+0xdc>
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	691a      	ldr	r2, [r3, #16]
 80128d0:	693b      	ldr	r3, [r7, #16]
 80128d2:	005b      	lsls	r3, r3, #1
 80128d4:	4413      	add	r3, r2
 80128d6:	881b      	ldrh	r3, [r3, #0]
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d00b      	beq.n	80128f4 <dir_find+0xf0>
 80128dc:	e000      	b.n	80128e0 <dir_find+0xdc>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 80128de:	bf00      	nop
		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
 80128e0:	2100      	movs	r1, #0
 80128e2:	6878      	ldr	r0, [r7, #4]
 80128e4:	f7ff fec0 	bl	8012668 <dir_read>
 80128e8:	4603      	mov	r3, r0
 80128ea:	77fb      	strb	r3, [r7, #31]
 80128ec:	7ffb      	ldrb	r3, [r7, #31]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d0a6      	beq.n	8012840 <dir_find+0x3c>
 80128f2:	e000      	b.n	80128f6 <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 80128f4:	bf00      	nop
		}
		return res;
 80128f6:	7ffb      	ldrb	r3, [r7, #31]
 80128f8:	e0a9      	b.n	8012a4e <dir_find+0x24a>
	}
#endif
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80128fa:	23ff      	movs	r3, #255	@ 0xff
 80128fc:	773b      	strb	r3, [r7, #28]
 80128fe:	7f3b      	ldrb	r3, [r7, #28]
 8012900:	777b      	strb	r3, [r7, #29]
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	f04f 32ff 	mov.w	r2, #4294967295
 8012908:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801290e:	4619      	mov	r1, r3
 8012910:	68f8      	ldr	r0, [r7, #12]
 8012912:	f7fe f925 	bl	8010b60 <move_window>
 8012916:	4603      	mov	r3, r0
 8012918:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 801291a:	7ffb      	ldrb	r3, [r7, #31]
 801291c:	2b00      	cmp	r3, #0
 801291e:	f040 8090 	bne.w	8012a42 <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012926:	781b      	ldrb	r3, [r3, #0]
 8012928:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801292a:	7fbb      	ldrb	r3, [r7, #30]
 801292c:	2b00      	cmp	r3, #0
 801292e:	d102      	bne.n	8012936 <dir_find+0x132>
 8012930:	2304      	movs	r3, #4
 8012932:	77fb      	strb	r3, [r7, #31]
 8012934:	e08a      	b.n	8012a4c <dir_find+0x248>
#if FF_USE_LFN		/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801293a:	330b      	adds	r3, #11
 801293c:	781b      	ldrb	r3, [r3, #0]
 801293e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012942:	72fb      	strb	r3, [r7, #11]
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	7afa      	ldrb	r2, [r7, #11]
 8012948:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801294a:	7fbb      	ldrb	r3, [r7, #30]
 801294c:	2be5      	cmp	r3, #229	@ 0xe5
 801294e:	d007      	beq.n	8012960 <dir_find+0x15c>
 8012950:	7afb      	ldrb	r3, [r7, #11]
 8012952:	f003 0308 	and.w	r3, r3, #8
 8012956:	2b00      	cmp	r3, #0
 8012958:	d009      	beq.n	801296e <dir_find+0x16a>
 801295a:	7afb      	ldrb	r3, [r7, #11]
 801295c:	2b0f      	cmp	r3, #15
 801295e:	d006      	beq.n	801296e <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012960:	23ff      	movs	r3, #255	@ 0xff
 8012962:	777b      	strb	r3, [r7, #29]
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	f04f 32ff 	mov.w	r2, #4294967295
 801296a:	64da      	str	r2, [r3, #76]	@ 0x4c
 801296c:	e05e      	b.n	8012a2c <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801296e:	7afb      	ldrb	r3, [r7, #11]
 8012970:	2b0f      	cmp	r3, #15
 8012972:	d136      	bne.n	80129e2 <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 801297a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801297e:	2b00      	cmp	r3, #0
 8012980:	d154      	bne.n	8012a2c <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8012982:	7fbb      	ldrb	r3, [r7, #30]
 8012984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012988:	2b00      	cmp	r3, #0
 801298a:	d00d      	beq.n	80129a8 <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012990:	7b5b      	ldrb	r3, [r3, #13]
 8012992:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8012994:	7fbb      	ldrb	r3, [r7, #30]
 8012996:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801299a:	77bb      	strb	r3, [r7, #30]
 801299c:	7fbb      	ldrb	r3, [r7, #30]
 801299e:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80129a8:	7fba      	ldrb	r2, [r7, #30]
 80129aa:	7f7b      	ldrb	r3, [r7, #29]
 80129ac:	429a      	cmp	r2, r3
 80129ae:	d115      	bne.n	80129dc <dir_find+0x1d8>
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80129b4:	330d      	adds	r3, #13
 80129b6:	781b      	ldrb	r3, [r3, #0]
 80129b8:	7f3a      	ldrb	r2, [r7, #28]
 80129ba:	429a      	cmp	r2, r3
 80129bc:	d10e      	bne.n	80129dc <dir_find+0x1d8>
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	691a      	ldr	r2, [r3, #16]
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80129c6:	4619      	mov	r1, r3
 80129c8:	4610      	mov	r0, r2
 80129ca:	f7ff f9f5 	bl	8011db8 <cmp_lfn>
 80129ce:	4603      	mov	r3, r0
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d003      	beq.n	80129dc <dir_find+0x1d8>
 80129d4:	7f7b      	ldrb	r3, [r7, #29]
 80129d6:	3b01      	subs	r3, #1
 80129d8:	b2db      	uxtb	r3, r3
 80129da:	e000      	b.n	80129de <dir_find+0x1da>
 80129dc:	23ff      	movs	r3, #255	@ 0xff
 80129de:	777b      	strb	r3, [r7, #29]
 80129e0:	e024      	b.n	8012a2c <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80129e2:	7f7b      	ldrb	r3, [r7, #29]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d109      	bne.n	80129fc <dir_find+0x1f8>
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80129ec:	4618      	mov	r0, r3
 80129ee:	f7ff fbc5 	bl	801217c <sum_sfn>
 80129f2:	4603      	mov	r3, r0
 80129f4:	461a      	mov	r2, r3
 80129f6:	7f3b      	ldrb	r3, [r7, #28]
 80129f8:	4293      	cmp	r3, r2
 80129fa:	d024      	beq.n	8012a46 <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8012a02:	f003 0301 	and.w	r3, r3, #1
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d10a      	bne.n	8012a20 <dir_find+0x21c>
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	3340      	adds	r3, #64	@ 0x40
 8012a12:	220b      	movs	r2, #11
 8012a14:	4619      	mov	r1, r3
 8012a16:	f005 fe43 	bl	80186a0 <memcmp>
 8012a1a:	4603      	mov	r3, r0
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d014      	beq.n	8012a4a <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012a20:	23ff      	movs	r3, #255	@ 0xff
 8012a22:	777b      	strb	r3, [r7, #29]
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	f04f 32ff 	mov.w	r2, #4294967295
 8012a2a:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8012a2c:	2100      	movs	r1, #0
 8012a2e:	6878      	ldr	r0, [r7, #4]
 8012a30:	f7ff f871 	bl	8011b16 <dir_next>
 8012a34:	4603      	mov	r3, r0
 8012a36:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 8012a38:	7ffb      	ldrb	r3, [r7, #31]
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	f43f af65 	beq.w	801290a <dir_find+0x106>
 8012a40:	e004      	b.n	8012a4c <dir_find+0x248>
		if (res != FR_OK) break;
 8012a42:	bf00      	nop
 8012a44:	e002      	b.n	8012a4c <dir_find+0x248>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8012a46:	bf00      	nop
 8012a48:	e000      	b.n	8012a4c <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8012a4a:	bf00      	nop

	return res;
 8012a4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8012a4e:	4618      	mov	r0, r3
 8012a50:	3724      	adds	r7, #36	@ 0x24
 8012a52:	46bd      	mov	sp, r7
 8012a54:	bd90      	pop	{r4, r7, pc}
	...

08012a58 <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 8012a58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8012a5c:	b0a0      	sub	sp, #128	@ 0x80
 8012a5e:	af00      	add	r7, sp, #0
 8012a60:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	66fb      	str	r3, [r7, #108]	@ 0x6c
#if FF_USE_LFN		/* LFN configuration */
	UINT n, len, n_ent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8012a6e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d001      	beq.n	8012a7a <dir_register+0x22>
 8012a76:	2306      	movs	r3, #6
 8012a78:	e198      	b.n	8012dac <dir_register+0x354>
	for (len = 0; fs->lfnbuf[len]; len++) ;	/* Get lfn length */
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	677b      	str	r3, [r7, #116]	@ 0x74
 8012a7e:	e002      	b.n	8012a86 <dir_register+0x2e>
 8012a80:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012a82:	3301      	adds	r3, #1
 8012a84:	677b      	str	r3, [r7, #116]	@ 0x74
 8012a86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012a88:	691a      	ldr	r2, [r3, #16]
 8012a8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012a8c:	005b      	lsls	r3, r3, #1
 8012a8e:	4413      	add	r3, r2
 8012a90:	881b      	ldrh	r3, [r3, #0]
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d1f4      	bne.n	8012a80 <dir_register+0x28>

#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8012a96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012a98:	781b      	ldrb	r3, [r3, #0]
 8012a9a:	2b04      	cmp	r3, #4
 8012a9c:	f040 80aa 	bne.w	8012bf4 <dir_register+0x19c>
		n_ent = (len + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 8012aa0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012aa2:	330e      	adds	r3, #14
 8012aa4:	4aa7      	ldr	r2, [pc, #668]	@ (8012d44 <dir_register+0x2ec>)
 8012aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8012aaa:	08db      	lsrs	r3, r3, #3
 8012aac:	3302      	adds	r3, #2
 8012aae:	673b      	str	r3, [r7, #112]	@ 0x70
		res = dir_alloc(dp, n_ent);		/* Allocate directory entries */
 8012ab0:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8012ab2:	6878      	ldr	r0, [r7, #4]
 8012ab4:	f7ff f8e4 	bl	8011c80 <dir_alloc>
 8012ab8:	4603      	mov	r3, r0
 8012aba:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res != FR_OK) return res;
 8012abe:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d002      	beq.n	8012acc <dir_register+0x74>
 8012ac6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8012aca:	e16f      	b.n	8012dac <dir_register+0x354>
		dp->blk_ofs = dp->dptr - SZDIRE * (n_ent - 1);	/* Set the allocated entry block offset */
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012ad0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012ad2:	3b01      	subs	r3, #1
 8012ad4:	015b      	lsls	r3, r3, #5
 8012ad6:	1ad2      	subs	r2, r2, r3
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	64da      	str	r2, [r3, #76]	@ 0x4c

		if (dp->obj.stat & 4) {			/* Has the directory been stretched by new allocation? */
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	79db      	ldrb	r3, [r3, #7]
 8012ae0:	f003 0304 	and.w	r3, r3, #4
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d07b      	beq.n	8012be0 <dir_register+0x188>
			dp->obj.stat &= ~4;
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	79db      	ldrb	r3, [r3, #7]
 8012aec:	f023 0304 	bic.w	r3, r3, #4
 8012af0:	b2da      	uxtb	r2, r3
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	71da      	strb	r2, [r3, #7]
			res = fill_first_frag(&dp->obj);	/* Fill the first fragment on the FAT if needed */
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	4618      	mov	r0, r3
 8012afa:	f7fe fc67 	bl	80113cc <fill_first_frag>
 8012afe:	4603      	mov	r3, r0
 8012b00:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 8012b04:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d002      	beq.n	8012b12 <dir_register+0xba>
 8012b0c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8012b10:	e14c      	b.n	8012dac <dir_register+0x354>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill the last fragment on the FAT if needed */
 8012b12:	6878      	ldr	r0, [r7, #4]
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012b18:	f04f 32ff 	mov.w	r2, #4294967295
 8012b1c:	4619      	mov	r1, r3
 8012b1e:	f7fe fc84 	bl	801142a <fill_last_frag>
 8012b22:	4603      	mov	r3, r0
 8012b24:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 8012b28:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d002      	beq.n	8012b36 <dir_register+0xde>
 8012b30:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8012b34:	e13a      	b.n	8012dac <dir_register+0x354>
			if (dp->obj.sclust != 0) {		/* Is it a sub-directory? */
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	689b      	ldr	r3, [r3, #8]
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d050      	beq.n	8012be0 <dir_register+0x188>
				DIR dj;

				res = load_obj_xdir(&dj, &dp->obj);	/* Load the object status */
 8012b3e:	687a      	ldr	r2, [r7, #4]
 8012b40:	f107 0308 	add.w	r3, r7, #8
 8012b44:	4611      	mov	r1, r2
 8012b46:	4618      	mov	r0, r3
 8012b48:	f7ff fc91 	bl	801246e <load_obj_xdir>
 8012b4c:	4603      	mov	r3, r0
 8012b4e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) return res;
 8012b52:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d002      	beq.n	8012b60 <dir_register+0x108>
 8012b5a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8012b5e:	e125      	b.n	8012dac <dir_register+0x354>
				dp->obj.objsize += (DWORD)fs->csize * SS(fs);		/* Increase the directory size by cluster size */
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8012b66:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8012b68:	8949      	ldrh	r1, [r1, #10]
 8012b6a:	4608      	mov	r0, r1
 8012b6c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8012b6e:	8989      	ldrh	r1, [r1, #12]
 8012b70:	fb00 f101 	mul.w	r1, r0, r1
 8012b74:	2000      	movs	r0, #0
 8012b76:	460c      	mov	r4, r1
 8012b78:	4605      	mov	r5, r0
 8012b7a:	eb12 0804 	adds.w	r8, r2, r4
 8012b7e:	eb43 0905 	adc.w	r9, r3, r5
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	e9c3 8904 	strd	r8, r9, [r3, #16]
				st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);
 8012b88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012b8a:	695b      	ldr	r3, [r3, #20]
 8012b8c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8012b96:	4608      	mov	r0, r1
 8012b98:	f7fd fd13 	bl	80105c2 <st_qword>
				st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 8012b9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012b9e:	695b      	ldr	r3, [r3, #20]
 8012ba0:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8012baa:	4608      	mov	r0, r1
 8012bac:	f7fd fd09 	bl	80105c2 <st_qword>
				fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;		/* Update the allocation status */
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	79da      	ldrb	r2, [r3, #7]
 8012bb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012bb6:	695b      	ldr	r3, [r3, #20]
 8012bb8:	3321      	adds	r3, #33	@ 0x21
 8012bba:	f042 0201 	orr.w	r2, r2, #1
 8012bbe:	b2d2      	uxtb	r2, r2
 8012bc0:	701a      	strb	r2, [r3, #0]
				res = store_xdir(&dj);				/* Store the object status */
 8012bc2:	f107 0308 	add.w	r3, r7, #8
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	f7ff fc8a 	bl	80124e0 <store_xdir>
 8012bcc:	4603      	mov	r3, r0
 8012bce:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) return res;
 8012bd2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d002      	beq.n	8012be0 <dir_register+0x188>
 8012bda:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8012bde:	e0e5      	b.n	8012dac <dir_register+0x354>
			}
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 8012be0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012be2:	695a      	ldr	r2, [r3, #20]
 8012be4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012be6:	691b      	ldr	r3, [r3, #16]
 8012be8:	4619      	mov	r1, r3
 8012bea:	4610      	mov	r0, r2
 8012bec:	f7ff fcd3 	bl	8012596 <create_xdir>
		return FR_OK;
 8012bf0:	2300      	movs	r3, #0
 8012bf2:	e0db      	b.n	8012dac <dir_register+0x354>
	}
#endif
	/* On the FAT/FAT32 volume */
	memcpy(sn, dp->fn, 12);
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8012bfa:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8012bfe:	6810      	ldr	r0, [r2, #0]
 8012c00:	6851      	ldr	r1, [r2, #4]
 8012c02:	6892      	ldr	r2, [r2, #8]
 8012c04:	c307      	stmia	r3!, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8012c06:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012c0a:	f003 0301 	and.w	r3, r3, #1
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d033      	beq.n	8012c7a <dir_register+0x222>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	2240      	movs	r2, #64	@ 0x40
 8012c16:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		for (n = 1; n < 100; n++) {
 8012c1a:	2301      	movs	r3, #1
 8012c1c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8012c1e:	e016      	b.n	8012c4e <dir_register+0x1f6>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8012c26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012c28:	691a      	ldr	r2, [r3, #16]
 8012c2a:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8012c2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012c30:	f7ff f9fe 	bl	8012030 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8012c34:	6878      	ldr	r0, [r7, #4]
 8012c36:	f7ff fde5 	bl	8012804 <dir_find>
 8012c3a:	4603      	mov	r3, r0
 8012c3c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) break;
 8012c40:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d106      	bne.n	8012c56 <dir_register+0x1fe>
		for (n = 1; n < 100; n++) {
 8012c48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012c4a:	3301      	adds	r3, #1
 8012c4c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8012c4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012c50:	2b63      	cmp	r3, #99	@ 0x63
 8012c52:	d9e5      	bls.n	8012c20 <dir_register+0x1c8>
 8012c54:	e000      	b.n	8012c58 <dir_register+0x200>
			if (res != FR_OK) break;
 8012c56:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8012c58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012c5a:	2b64      	cmp	r3, #100	@ 0x64
 8012c5c:	d101      	bne.n	8012c62 <dir_register+0x20a>
 8012c5e:	2307      	movs	r3, #7
 8012c60:	e0a4      	b.n	8012dac <dir_register+0x354>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8012c62:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8012c66:	2b04      	cmp	r3, #4
 8012c68:	d002      	beq.n	8012c70 <dir_register+0x218>
 8012c6a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8012c6e:	e09d      	b.n	8012dac <dir_register+0x354>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8012c70:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
	}

	/* Create an SFN with/without LFNs. */
	n_ent = (sn[NSFLAG] & NS_LFN) ? (len + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8012c7a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012c7e:	f003 0302 	and.w	r3, r3, #2
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d007      	beq.n	8012c96 <dir_register+0x23e>
 8012c86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012c88:	330c      	adds	r3, #12
 8012c8a:	4a2f      	ldr	r2, [pc, #188]	@ (8012d48 <dir_register+0x2f0>)
 8012c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8012c90:	089b      	lsrs	r3, r3, #2
 8012c92:	3301      	adds	r3, #1
 8012c94:	e000      	b.n	8012c98 <dir_register+0x240>
 8012c96:	2301      	movs	r3, #1
 8012c98:	673b      	str	r3, [r7, #112]	@ 0x70
	res = dir_alloc(dp, n_ent);		/* Allocate entries */
 8012c9a:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8012c9c:	6878      	ldr	r0, [r7, #4]
 8012c9e:	f7fe ffef 	bl	8011c80 <dir_alloc>
 8012ca2:	4603      	mov	r3, r0
 8012ca4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (res == FR_OK && --n_ent) {	/* Set LFN entry if needed */
 8012ca8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d14e      	bne.n	8012d4e <dir_register+0x2f6>
 8012cb0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012cb2:	3b01      	subs	r3, #1
 8012cb4:	673b      	str	r3, [r7, #112]	@ 0x70
 8012cb6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d048      	beq.n	8012d4e <dir_register+0x2f6>
		res = dir_sdi(dp, dp->dptr - n_ent * SZDIRE);
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012cc0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012cc2:	015b      	lsls	r3, r3, #5
 8012cc4:	1ad3      	subs	r3, r2, r3
 8012cc6:	4619      	mov	r1, r3
 8012cc8:	6878      	ldr	r0, [r7, #4]
 8012cca:	f7fe fe90 	bl	80119ee <dir_sdi>
 8012cce:	4603      	mov	r3, r0
 8012cd0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 8012cd4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d138      	bne.n	8012d4e <dir_register+0x2f6>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	3340      	adds	r3, #64	@ 0x40
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	f7ff fa4b 	bl	801217c <sum_sfn>
 8012ce6:	4603      	mov	r3, r0
 8012ce8:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012cf0:	4619      	mov	r1, r3
 8012cf2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8012cf4:	f7fd ff34 	bl	8010b60 <move_window>
 8012cf8:	4603      	mov	r3, r0
 8012cfa:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) break;
 8012cfe:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d122      	bne.n	8012d4c <dir_register+0x2f4>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)n_ent, sum);
 8012d06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012d08:	6918      	ldr	r0, [r3, #16]
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8012d0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012d10:	b2da      	uxtb	r2, r3
 8012d12:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8012d16:	f7ff f923 	bl	8011f60 <put_lfn>
				fs->wflag = 1;
 8012d1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012d1c:	2201      	movs	r2, #1
 8012d1e:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 8012d20:	2100      	movs	r1, #0
 8012d22:	6878      	ldr	r0, [r7, #4]
 8012d24:	f7fe fef7 	bl	8011b16 <dir_next>
 8012d28:	4603      	mov	r3, r0
 8012d2a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			} while (res == FR_OK && --n_ent);
 8012d2e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d10b      	bne.n	8012d4e <dir_register+0x2f6>
 8012d36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012d38:	3b01      	subs	r3, #1
 8012d3a:	673b      	str	r3, [r7, #112]	@ 0x70
 8012d3c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d1d4      	bne.n	8012cec <dir_register+0x294>
 8012d42:	e004      	b.n	8012d4e <dir_register+0x2f6>
 8012d44:	88888889 	.word	0x88888889
 8012d48:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 8012d4c:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8012d4e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d128      	bne.n	8012da8 <dir_register+0x350>
		res = move_window(fs, dp->sect);
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012d5a:	4619      	mov	r1, r3
 8012d5c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8012d5e:	f7fd feff 	bl	8010b60 <move_window>
 8012d62:	4603      	mov	r3, r0
 8012d64:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 8012d68:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d11b      	bne.n	8012da8 <dir_register+0x350>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012d74:	2220      	movs	r2, #32
 8012d76:	2100      	movs	r1, #0
 8012d78:	4618      	mov	r0, r3
 8012d7a:	f005 fca1 	bl	80186c0 <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	3340      	adds	r3, #64	@ 0x40
 8012d86:	220b      	movs	r2, #11
 8012d88:	4619      	mov	r1, r3
 8012d8a:	f006 facc 	bl	8019326 <memcpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012d98:	330c      	adds	r3, #12
 8012d9a:	f002 0218 	and.w	r2, r2, #24
 8012d9e:	b2d2      	uxtb	r2, r2
 8012da0:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8012da2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012da4:	2201      	movs	r2, #1
 8012da6:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8012da8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8012dac:	4618      	mov	r0, r3
 8012dae:	3780      	adds	r7, #128	@ 0x80
 8012db0:	46bd      	mov	sp, r7
 8012db2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8012db6:	bf00      	nop

08012db8 <get_fileinfo>:

static void get_fileinfo (
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno		/* Pointer to the file information to be filled */
)
{
 8012db8:	b5b0      	push	{r4, r5, r7, lr}
 8012dba:	b08a      	sub	sp, #40	@ 0x28
 8012dbc:	af00      	add	r7, sp, #0
 8012dbe:	6078      	str	r0, [r7, #4]
 8012dc0:	6039      	str	r1, [r7, #0]
	UINT si, di;
#if FF_USE_LFN
	BYTE lcf;
	WCHAR wc, hs;
	FATFS *fs = dp->obj.fs;
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	613b      	str	r3, [r7, #16]
#else
	TCHAR c;
#endif


	fno->fname[0] = 0;			/* Invaidate file info */
 8012dc8:	683b      	ldr	r3, [r7, #0]
 8012dca:	2200      	movs	r2, #0
 8012dcc:	769a      	strb	r2, [r3, #26]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	f000 81b6 	beq.w	8013144 <get_fileinfo+0x38c>

#if FF_USE_LFN		/* LFN configuration */
#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* exFAT volume */
 8012dd8:	693b      	ldr	r3, [r7, #16]
 8012dda:	781b      	ldrb	r3, [r3, #0]
 8012ddc:	2b04      	cmp	r3, #4
 8012dde:	f040 80a6 	bne.w	8012f2e <get_fileinfo+0x176>
		UINT nc = 0;
 8012de2:	2300      	movs	r3, #0
 8012de4:	617b      	str	r3, [r7, #20]

		si = SZDIRE * 2; di = 0;	/* 1st C1 entry in the entry block */
 8012de6:	2340      	movs	r3, #64	@ 0x40
 8012de8:	627b      	str	r3, [r7, #36]	@ 0x24
 8012dea:	2300      	movs	r3, #0
 8012dec:	623b      	str	r3, [r7, #32]
		hs = 0;
 8012dee:	2300      	movs	r3, #0
 8012df0:	837b      	strh	r3, [r7, #26]
		while (nc < fs->dirbuf[XDIR_NumName]) {
 8012df2:	e048      	b.n	8012e86 <get_fileinfo+0xce>
			if (si >= MAXDIRB(FF_MAX_LFN)) {	/* Truncated directory block? */
 8012df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012df6:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 8012dfa:	d302      	bcc.n	8012e02 <get_fileinfo+0x4a>
				di = 0; break;
 8012dfc:	2300      	movs	r3, #0
 8012dfe:	623b      	str	r3, [r7, #32]
 8012e00:	e049      	b.n	8012e96 <get_fileinfo+0xde>
			}
			if ((si % SZDIRE) == 0) si += 2;	/* Skip entry type field */
 8012e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e04:	f003 031f 	and.w	r3, r3, #31
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d102      	bne.n	8012e12 <get_fileinfo+0x5a>
 8012e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e0e:	3302      	adds	r3, #2
 8012e10:	627b      	str	r3, [r7, #36]	@ 0x24
			wc = ld_word(fs->dirbuf + si); si += 2; nc++;	/* Get a character */
 8012e12:	693b      	ldr	r3, [r7, #16]
 8012e14:	695a      	ldr	r2, [r3, #20]
 8012e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e18:	4413      	add	r3, r2
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	f7fd fa74 	bl	8010308 <ld_word>
 8012e20:	4603      	mov	r3, r0
 8012e22:	83bb      	strh	r3, [r7, #28]
 8012e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e26:	3302      	adds	r3, #2
 8012e28:	627b      	str	r3, [r7, #36]	@ 0x24
 8012e2a:	697b      	ldr	r3, [r7, #20]
 8012e2c:	3301      	adds	r3, #1
 8012e2e:	617b      	str	r3, [r7, #20]
			if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
 8012e30:	8b7b      	ldrh	r3, [r7, #26]
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d10a      	bne.n	8012e4c <get_fileinfo+0x94>
 8012e36:	8bbb      	ldrh	r3, [r7, #28]
 8012e38:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 8012e3c:	d306      	bcc.n	8012e4c <get_fileinfo+0x94>
 8012e3e:	8bbb      	ldrh	r3, [r7, #28]
 8012e40:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8012e44:	d202      	bcs.n	8012e4c <get_fileinfo+0x94>
				hs = wc; continue;				/* Get low surrogate */
 8012e46:	8bbb      	ldrh	r3, [r7, #28]
 8012e48:	837b      	strh	r3, [r7, #26]
 8012e4a:	e01c      	b.n	8012e86 <get_fileinfo+0xce>
			}
			nw = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encoding */
 8012e4c:	8b7b      	ldrh	r3, [r7, #26]
 8012e4e:	041a      	lsls	r2, r3, #16
 8012e50:	8bbb      	ldrh	r3, [r7, #28]
 8012e52:	ea42 0003 	orr.w	r0, r2, r3
 8012e56:	6a3b      	ldr	r3, [r7, #32]
 8012e58:	3318      	adds	r3, #24
 8012e5a:	683a      	ldr	r2, [r7, #0]
 8012e5c:	4413      	add	r3, r2
 8012e5e:	1c99      	adds	r1, r3, #2
 8012e60:	6a3b      	ldr	r3, [r7, #32]
 8012e62:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8012e66:	461a      	mov	r2, r3
 8012e68:	f7fd fc9a 	bl	80107a0 <put_utf>
 8012e6c:	60f8      	str	r0, [r7, #12]
			if (nw == 0) {						/* Buffer overflow or wrong char? */
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d102      	bne.n	8012e7a <get_fileinfo+0xc2>
				di = 0; break;
 8012e74:	2300      	movs	r3, #0
 8012e76:	623b      	str	r3, [r7, #32]
 8012e78:	e00d      	b.n	8012e96 <get_fileinfo+0xde>
			}
			di += nw;
 8012e7a:	6a3a      	ldr	r2, [r7, #32]
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	4413      	add	r3, r2
 8012e80:	623b      	str	r3, [r7, #32]
			hs = 0;
 8012e82:	2300      	movs	r3, #0
 8012e84:	837b      	strh	r3, [r7, #26]
		while (nc < fs->dirbuf[XDIR_NumName]) {
 8012e86:	693b      	ldr	r3, [r7, #16]
 8012e88:	695b      	ldr	r3, [r3, #20]
 8012e8a:	3323      	adds	r3, #35	@ 0x23
 8012e8c:	781b      	ldrb	r3, [r3, #0]
 8012e8e:	461a      	mov	r2, r3
 8012e90:	697b      	ldr	r3, [r7, #20]
 8012e92:	4293      	cmp	r3, r2
 8012e94:	d3ae      	bcc.n	8012df4 <get_fileinfo+0x3c>
		}
		if (hs != 0) di = 0;					/* Broken surrogate pair? */
 8012e96:	8b7b      	ldrh	r3, [r7, #26]
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d001      	beq.n	8012ea0 <get_fileinfo+0xe8>
 8012e9c:	2300      	movs	r3, #0
 8012e9e:	623b      	str	r3, [r7, #32]
		if (di == 0) fno->fname[di++] = '\?';	/* Inaccessible object name? */
 8012ea0:	6a3b      	ldr	r3, [r7, #32]
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d106      	bne.n	8012eb4 <get_fileinfo+0xfc>
 8012ea6:	6a3b      	ldr	r3, [r7, #32]
 8012ea8:	1c5a      	adds	r2, r3, #1
 8012eaa:	623a      	str	r2, [r7, #32]
 8012eac:	683a      	ldr	r2, [r7, #0]
 8012eae:	4413      	add	r3, r2
 8012eb0:	223f      	movs	r2, #63	@ 0x3f
 8012eb2:	769a      	strb	r2, [r3, #26]
		fno->fname[di] = 0;						/* Terminate the name */
 8012eb4:	683a      	ldr	r2, [r7, #0]
 8012eb6:	6a3b      	ldr	r3, [r7, #32]
 8012eb8:	4413      	add	r3, r2
 8012eba:	331a      	adds	r3, #26
 8012ebc:	2200      	movs	r2, #0
 8012ebe:	701a      	strb	r2, [r3, #0]
		fno->altname[0] = 0;					/* exFAT does not support SFN */
 8012ec0:	683b      	ldr	r3, [r7, #0]
 8012ec2:	2200      	movs	r2, #0
 8012ec4:	735a      	strb	r2, [r3, #13]

		fno->fattrib = fs->dirbuf[XDIR_Attr] & AM_MASKX;		/* Attribute */
 8012ec6:	693b      	ldr	r3, [r7, #16]
 8012ec8:	695b      	ldr	r3, [r3, #20]
 8012eca:	3304      	adds	r3, #4
 8012ecc:	781b      	ldrb	r3, [r3, #0]
 8012ece:	f003 0337 	and.w	r3, r3, #55	@ 0x37
 8012ed2:	b2da      	uxtb	r2, r3
 8012ed4:	683b      	ldr	r3, [r7, #0]
 8012ed6:	731a      	strb	r2, [r3, #12]
		fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
 8012ed8:	683b      	ldr	r3, [r7, #0]
 8012eda:	7b1b      	ldrb	r3, [r3, #12]
 8012edc:	f003 0310 	and.w	r3, r3, #16
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d108      	bne.n	8012ef6 <get_fileinfo+0x13e>
 8012ee4:	693b      	ldr	r3, [r7, #16]
 8012ee6:	695b      	ldr	r3, [r3, #20]
 8012ee8:	3338      	adds	r3, #56	@ 0x38
 8012eea:	4618      	mov	r0, r3
 8012eec:	f7fd fa47 	bl	801037e <ld_qword>
 8012ef0:	4602      	mov	r2, r0
 8012ef2:	460b      	mov	r3, r1
 8012ef4:	e003      	b.n	8012efe <get_fileinfo+0x146>
 8012ef6:	f04f 0200 	mov.w	r2, #0
 8012efa:	f04f 0300 	mov.w	r3, #0
 8012efe:	6839      	ldr	r1, [r7, #0]
 8012f00:	e9c1 2300 	strd	r2, r3, [r1]
		fno->ftime = ld_word(fs->dirbuf + XDIR_ModTime + 0);	/* Time */
 8012f04:	693b      	ldr	r3, [r7, #16]
 8012f06:	695b      	ldr	r3, [r3, #20]
 8012f08:	330c      	adds	r3, #12
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	f7fd f9fc 	bl	8010308 <ld_word>
 8012f10:	4603      	mov	r3, r0
 8012f12:	461a      	mov	r2, r3
 8012f14:	683b      	ldr	r3, [r7, #0]
 8012f16:	815a      	strh	r2, [r3, #10]
		fno->fdate = ld_word(fs->dirbuf + XDIR_ModTime + 2);	/* Date */
 8012f18:	693b      	ldr	r3, [r7, #16]
 8012f1a:	695b      	ldr	r3, [r3, #20]
 8012f1c:	330e      	adds	r3, #14
 8012f1e:	4618      	mov	r0, r3
 8012f20:	f7fd f9f2 	bl	8010308 <ld_word>
 8012f24:	4603      	mov	r3, r0
 8012f26:	461a      	mov	r2, r3
 8012f28:	683b      	ldr	r3, [r7, #0]
 8012f2a:	811a      	strh	r2, [r3, #8]
		return;
 8012f2c:	e10b      	b.n	8013146 <get_fileinfo+0x38e>
	} else
#endif
	{	/* FAT/FAT32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f36:	d04d      	beq.n	8012fd4 <get_fileinfo+0x21c>
			si = di = 0;
 8012f38:	2300      	movs	r3, #0
 8012f3a:	623b      	str	r3, [r7, #32]
 8012f3c:	6a3b      	ldr	r3, [r7, #32]
 8012f3e:	627b      	str	r3, [r7, #36]	@ 0x24
			hs = 0;
 8012f40:	2300      	movs	r3, #0
 8012f42:	837b      	strh	r3, [r7, #26]
			while (fs->lfnbuf[si] != 0) {
 8012f44:	e033      	b.n	8012fae <get_fileinfo+0x1f6>
				wc = fs->lfnbuf[si++];		/* Get an LFN character (UTF-16) */
 8012f46:	693b      	ldr	r3, [r7, #16]
 8012f48:	691a      	ldr	r2, [r3, #16]
 8012f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f4c:	1c59      	adds	r1, r3, #1
 8012f4e:	6279      	str	r1, [r7, #36]	@ 0x24
 8012f50:	005b      	lsls	r3, r3, #1
 8012f52:	4413      	add	r3, r2
 8012f54:	881b      	ldrh	r3, [r3, #0]
 8012f56:	83bb      	strh	r3, [r7, #28]
				if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
 8012f58:	8b7b      	ldrh	r3, [r7, #26]
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d10a      	bne.n	8012f74 <get_fileinfo+0x1bc>
 8012f5e:	8bbb      	ldrh	r3, [r7, #28]
 8012f60:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 8012f64:	d306      	bcc.n	8012f74 <get_fileinfo+0x1bc>
 8012f66:	8bbb      	ldrh	r3, [r7, #28]
 8012f68:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8012f6c:	d202      	bcs.n	8012f74 <get_fileinfo+0x1bc>
					hs = wc; continue;		/* Get low surrogate */
 8012f6e:	8bbb      	ldrh	r3, [r7, #28]
 8012f70:	837b      	strh	r3, [r7, #26]
 8012f72:	e01c      	b.n	8012fae <get_fileinfo+0x1f6>
				}
				nw = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encoding */
 8012f74:	8b7b      	ldrh	r3, [r7, #26]
 8012f76:	041a      	lsls	r2, r3, #16
 8012f78:	8bbb      	ldrh	r3, [r7, #28]
 8012f7a:	ea42 0003 	orr.w	r0, r2, r3
 8012f7e:	6a3b      	ldr	r3, [r7, #32]
 8012f80:	3318      	adds	r3, #24
 8012f82:	683a      	ldr	r2, [r7, #0]
 8012f84:	4413      	add	r3, r2
 8012f86:	1c99      	adds	r1, r3, #2
 8012f88:	6a3b      	ldr	r3, [r7, #32]
 8012f8a:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8012f8e:	461a      	mov	r2, r3
 8012f90:	f7fd fc06 	bl	80107a0 <put_utf>
 8012f94:	60f8      	str	r0, [r7, #12]
				if (nw == 0) {				/* Buffer overflow or wrong char? */
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d102      	bne.n	8012fa2 <get_fileinfo+0x1ea>
					di = 0; break;
 8012f9c:	2300      	movs	r3, #0
 8012f9e:	623b      	str	r3, [r7, #32]
 8012fa0:	e00d      	b.n	8012fbe <get_fileinfo+0x206>
				}
				di += nw;
 8012fa2:	6a3a      	ldr	r2, [r7, #32]
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	4413      	add	r3, r2
 8012fa8:	623b      	str	r3, [r7, #32]
				hs = 0;
 8012faa:	2300      	movs	r3, #0
 8012fac:	837b      	strh	r3, [r7, #26]
			while (fs->lfnbuf[si] != 0) {
 8012fae:	693b      	ldr	r3, [r7, #16]
 8012fb0:	691a      	ldr	r2, [r3, #16]
 8012fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012fb4:	005b      	lsls	r3, r3, #1
 8012fb6:	4413      	add	r3, r2
 8012fb8:	881b      	ldrh	r3, [r3, #0]
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d1c3      	bne.n	8012f46 <get_fileinfo+0x18e>
			}
			if (hs != 0) di = 0;	/* Broken surrogate pair? */
 8012fbe:	8b7b      	ldrh	r3, [r7, #26]
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d001      	beq.n	8012fc8 <get_fileinfo+0x210>
 8012fc4:	2300      	movs	r3, #0
 8012fc6:	623b      	str	r3, [r7, #32]
			fno->fname[di] = 0;		/* Terminate the LFN (null string means LFN is invalid) */
 8012fc8:	683a      	ldr	r2, [r7, #0]
 8012fca:	6a3b      	ldr	r3, [r7, #32]
 8012fcc:	4413      	add	r3, r2
 8012fce:	331a      	adds	r3, #26
 8012fd0:	2200      	movs	r2, #0
 8012fd2:	701a      	strb	r2, [r3, #0]
		}
	}

	si = di = 0;
 8012fd4:	2300      	movs	r3, #0
 8012fd6:	623b      	str	r3, [r7, #32]
 8012fd8:	6a3b      	ldr	r3, [r7, #32]
 8012fda:	627b      	str	r3, [r7, #36]	@ 0x24
	while (si < 11) {		/* Get SFN from SFN entry */
 8012fdc:	e027      	b.n	801302e <get_fileinfo+0x276>
		wc = dp->dir[si++];			/* Get a char */
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8012fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012fe4:	1c59      	adds	r1, r3, #1
 8012fe6:	6279      	str	r1, [r7, #36]	@ 0x24
 8012fe8:	4413      	add	r3, r2
 8012fea:	781b      	ldrb	r3, [r3, #0]
 8012fec:	83bb      	strh	r3, [r7, #28]
		if (wc == ' ') continue;	/* Skip padding spaces */
 8012fee:	8bbb      	ldrh	r3, [r7, #28]
 8012ff0:	2b20      	cmp	r3, #32
 8012ff2:	d01b      	beq.n	801302c <get_fileinfo+0x274>
		if (wc == RDDEM) wc = DDEM;	/* Restore replaced DDEM character */
 8012ff4:	8bbb      	ldrh	r3, [r7, #28]
 8012ff6:	2b05      	cmp	r3, #5
 8012ff8:	d101      	bne.n	8012ffe <get_fileinfo+0x246>
 8012ffa:	23e5      	movs	r3, #229	@ 0xe5
 8012ffc:	83bb      	strh	r3, [r7, #28]
		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
 8012ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013000:	2b09      	cmp	r3, #9
 8013002:	d109      	bne.n	8013018 <get_fileinfo+0x260>
 8013004:	6a3b      	ldr	r3, [r7, #32]
 8013006:	2b0b      	cmp	r3, #11
 8013008:	d806      	bhi.n	8013018 <get_fileinfo+0x260>
 801300a:	6a3b      	ldr	r3, [r7, #32]
 801300c:	1c5a      	adds	r2, r3, #1
 801300e:	623a      	str	r2, [r7, #32]
 8013010:	683a      	ldr	r2, [r7, #0]
 8013012:	4413      	add	r3, r2
 8013014:	222e      	movs	r2, #46	@ 0x2e
 8013016:	735a      	strb	r2, [r3, #13]
		if (nw == 0) {				/* Buffer overflow? */
			di = 0; break;
		}
		di += nw;
#else					/* ANSI/OEM output */
		fno->altname[di++] = (TCHAR)wc;	/* Store it without any conversion */
 8013018:	6a3b      	ldr	r3, [r7, #32]
 801301a:	1c5a      	adds	r2, r3, #1
 801301c:	623a      	str	r2, [r7, #32]
 801301e:	8bba      	ldrh	r2, [r7, #28]
 8013020:	b2d1      	uxtb	r1, r2
 8013022:	683a      	ldr	r2, [r7, #0]
 8013024:	4413      	add	r3, r2
 8013026:	460a      	mov	r2, r1
 8013028:	735a      	strb	r2, [r3, #13]
 801302a:	e000      	b.n	801302e <get_fileinfo+0x276>
		if (wc == ' ') continue;	/* Skip padding spaces */
 801302c:	bf00      	nop
	while (si < 11) {		/* Get SFN from SFN entry */
 801302e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013030:	2b0a      	cmp	r3, #10
 8013032:	d9d4      	bls.n	8012fde <get_fileinfo+0x226>
#endif
	}
	fno->altname[di] = 0;	/* Terminate the SFN  (null string means SFN is invalid) */
 8013034:	683a      	ldr	r2, [r7, #0]
 8013036:	6a3b      	ldr	r3, [r7, #32]
 8013038:	4413      	add	r3, r2
 801303a:	330d      	adds	r3, #13
 801303c:	2200      	movs	r2, #0
 801303e:	701a      	strb	r2, [r3, #0]

	if (fno->fname[0] == 0) {	/* If LFN is invalid, altname[] needs to be copied to fname[] */
 8013040:	683b      	ldr	r3, [r7, #0]
 8013042:	7e9b      	ldrb	r3, [r3, #26]
 8013044:	2b00      	cmp	r3, #0
 8013046:	d152      	bne.n	80130ee <get_fileinfo+0x336>
		if (di == 0) {	/* If LFN and SFN both are invalid, this object is inaccessible */
 8013048:	6a3b      	ldr	r3, [r7, #32]
 801304a:	2b00      	cmp	r3, #0
 801304c:	d107      	bne.n	801305e <get_fileinfo+0x2a6>
			fno->fname[di++] = '\?';
 801304e:	6a3b      	ldr	r3, [r7, #32]
 8013050:	1c5a      	adds	r2, r3, #1
 8013052:	623a      	str	r2, [r7, #32]
 8013054:	683a      	ldr	r2, [r7, #0]
 8013056:	4413      	add	r3, r2
 8013058:	223f      	movs	r2, #63	@ 0x3f
 801305a:	769a      	strb	r2, [r3, #26]
 801305c:	e038      	b.n	80130d0 <get_fileinfo+0x318>
		} else {
			for (si = di = 0, lcf = NS_BODY; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] with case information */
 801305e:	2300      	movs	r3, #0
 8013060:	623b      	str	r3, [r7, #32]
 8013062:	6a3b      	ldr	r3, [r7, #32]
 8013064:	627b      	str	r3, [r7, #36]	@ 0x24
 8013066:	2308      	movs	r3, #8
 8013068:	77fb      	strb	r3, [r7, #31]
 801306a:	e02a      	b.n	80130c2 <get_fileinfo+0x30a>
				wc = (WCHAR)fno->altname[si];
 801306c:	683a      	ldr	r2, [r7, #0]
 801306e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013070:	4413      	add	r3, r2
 8013072:	330d      	adds	r3, #13
 8013074:	781b      	ldrb	r3, [r3, #0]
 8013076:	83bb      	strh	r3, [r7, #28]
				if (wc == '.') lcf = NS_EXT;
 8013078:	8bbb      	ldrh	r3, [r7, #28]
 801307a:	2b2e      	cmp	r3, #46	@ 0x2e
 801307c:	d101      	bne.n	8013082 <get_fileinfo+0x2ca>
 801307e:	2310      	movs	r3, #16
 8013080:	77fb      	strb	r3, [r7, #31]
				if (IsUpper(wc) && (dp->dir[DIR_NTres] & lcf)) wc += 0x20;
 8013082:	8bbb      	ldrh	r3, [r7, #28]
 8013084:	2b40      	cmp	r3, #64	@ 0x40
 8013086:	d90e      	bls.n	80130a6 <get_fileinfo+0x2ee>
 8013088:	8bbb      	ldrh	r3, [r7, #28]
 801308a:	2b5a      	cmp	r3, #90	@ 0x5a
 801308c:	d80b      	bhi.n	80130a6 <get_fileinfo+0x2ee>
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013092:	330c      	adds	r3, #12
 8013094:	781a      	ldrb	r2, [r3, #0]
 8013096:	7ffb      	ldrb	r3, [r7, #31]
 8013098:	4013      	ands	r3, r2
 801309a:	b2db      	uxtb	r3, r3
 801309c:	2b00      	cmp	r3, #0
 801309e:	d002      	beq.n	80130a6 <get_fileinfo+0x2ee>
 80130a0:	8bbb      	ldrh	r3, [r7, #28]
 80130a2:	3320      	adds	r3, #32
 80130a4:	83bb      	strh	r3, [r7, #28]
				fno->fname[di] = (TCHAR)wc;
 80130a6:	8bbb      	ldrh	r3, [r7, #28]
 80130a8:	b2d9      	uxtb	r1, r3
 80130aa:	683a      	ldr	r2, [r7, #0]
 80130ac:	6a3b      	ldr	r3, [r7, #32]
 80130ae:	4413      	add	r3, r2
 80130b0:	331a      	adds	r3, #26
 80130b2:	460a      	mov	r2, r1
 80130b4:	701a      	strb	r2, [r3, #0]
			for (si = di = 0, lcf = NS_BODY; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] with case information */
 80130b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130b8:	3301      	adds	r3, #1
 80130ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80130bc:	6a3b      	ldr	r3, [r7, #32]
 80130be:	3301      	adds	r3, #1
 80130c0:	623b      	str	r3, [r7, #32]
 80130c2:	683a      	ldr	r2, [r7, #0]
 80130c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130c6:	4413      	add	r3, r2
 80130c8:	330d      	adds	r3, #13
 80130ca:	781b      	ldrb	r3, [r3, #0]
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d1cd      	bne.n	801306c <get_fileinfo+0x2b4>
			}
		}
		fno->fname[di] = 0;	/* Terminate the LFN */
 80130d0:	683a      	ldr	r2, [r7, #0]
 80130d2:	6a3b      	ldr	r3, [r7, #32]
 80130d4:	4413      	add	r3, r2
 80130d6:	331a      	adds	r3, #26
 80130d8:	2200      	movs	r2, #0
 80130da:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) fno->altname[0] = 0;	/* Altname is not needed if neither LFN nor case info is exist. */
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80130e0:	330c      	adds	r3, #12
 80130e2:	781b      	ldrb	r3, [r3, #0]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d102      	bne.n	80130ee <get_fileinfo+0x336>
 80130e8:	683b      	ldr	r3, [r7, #0]
 80130ea:	2200      	movs	r2, #0
 80130ec:	735a      	strb	r2, [r3, #13]
		fno->fname[di++] = c;
	}
	fno->fname[di] = 0;		/* Terminate the SFN */
#endif

	fno->fattrib = dp->dir[DIR_Attr] & AM_MASK;			/* Attribute */
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80130f2:	330b      	adds	r3, #11
 80130f4:	781b      	ldrb	r3, [r3, #0]
 80130f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80130fa:	b2da      	uxtb	r2, r3
 80130fc:	683b      	ldr	r3, [r7, #0]
 80130fe:	731a      	strb	r2, [r3, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013104:	331c      	adds	r3, #28
 8013106:	4618      	mov	r0, r3
 8013108:	f7fd f916 	bl	8010338 <ld_dword>
 801310c:	4603      	mov	r3, r0
 801310e:	2200      	movs	r2, #0
 8013110:	461c      	mov	r4, r3
 8013112:	4615      	mov	r5, r2
 8013114:	683b      	ldr	r3, [r7, #0]
 8013116:	e9c3 4500 	strd	r4, r5, [r3]
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801311e:	3316      	adds	r3, #22
 8013120:	4618      	mov	r0, r3
 8013122:	f7fd f8f1 	bl	8010308 <ld_word>
 8013126:	4603      	mov	r3, r0
 8013128:	461a      	mov	r2, r3
 801312a:	683b      	ldr	r3, [r7, #0]
 801312c:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013132:	3318      	adds	r3, #24
 8013134:	4618      	mov	r0, r3
 8013136:	f7fd f8e7 	bl	8010308 <ld_word>
 801313a:	4603      	mov	r3, r0
 801313c:	461a      	mov	r2, r3
 801313e:	683b      	ldr	r3, [r7, #0]
 8013140:	811a      	strh	r2, [r3, #8]
 8013142:	e000      	b.n	8013146 <get_fileinfo+0x38e>
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 8013144:	bf00      	nop
}
 8013146:	3728      	adds	r7, #40	@ 0x28
 8013148:	46bd      	mov	sp, r7
 801314a:	bdb0      	pop	{r4, r5, r7, pc}

0801314c <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 801314c:	b580      	push	{r7, lr}
 801314e:	b08a      	sub	sp, #40	@ 0x28
 8013150:	af00      	add	r7, sp, #0
 8013152:	6078      	str	r0, [r7, #4]
 8013154:	6039      	str	r1, [r7, #0]
	DWORD uc;
	UINT i, ni, si, di;


	/* Create LFN into LFN working buffer */
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
 8013156:	683b      	ldr	r3, [r7, #0]
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	60bb      	str	r3, [r7, #8]
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	681b      	ldr	r3, [r3, #0]
 8013160:	691b      	ldr	r3, [r3, #16]
 8013162:	613b      	str	r3, [r7, #16]
 8013164:	2300      	movs	r3, #0
 8013166:	617b      	str	r3, [r7, #20]
	for (;;) {
		uc = tchar2uni(&p);			/* Get a character */
 8013168:	f107 0308 	add.w	r3, r7, #8
 801316c:	4618      	mov	r0, r3
 801316e:	f7fd fad2 	bl	8010716 <tchar2uni>
 8013172:	60f8      	str	r0, [r7, #12]
		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	f1b3 3fff 	cmp.w	r3, #4294967295
 801317a:	d101      	bne.n	8013180 <create_name+0x34>
 801317c:	2306      	movs	r3, #6
 801317e:	e209      	b.n	8013594 <create_name+0x448>
		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013186:	d309      	bcc.n	801319c <create_name+0x50>
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	0c19      	lsrs	r1, r3, #16
 801318c:	697b      	ldr	r3, [r7, #20]
 801318e:	1c5a      	adds	r2, r3, #1
 8013190:	617a      	str	r2, [r7, #20]
 8013192:	005b      	lsls	r3, r3, #1
 8013194:	693a      	ldr	r2, [r7, #16]
 8013196:	4413      	add	r3, r2
 8013198:	b28a      	uxth	r2, r1
 801319a:	801a      	strh	r2, [r3, #0]
		wc = (WCHAR)uc;
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (wc < ' ' || IsSeparator(wc)) break;	/* Break if end of the path or a separator is found */
 80131a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80131a2:	2b1f      	cmp	r3, #31
 80131a4:	d920      	bls.n	80131e8 <create_name+0x9c>
 80131a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80131a8:	2b2f      	cmp	r3, #47	@ 0x2f
 80131aa:	d01d      	beq.n	80131e8 <create_name+0x9c>
 80131ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80131ae:	2b5c      	cmp	r3, #92	@ 0x5c
 80131b0:	d01a      	beq.n	80131e8 <create_name+0x9c>
		if (wc < 0x80 && strchr("*:<>|\"\?\x7F", (int)wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80131b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80131b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80131b6:	d809      	bhi.n	80131cc <create_name+0x80>
 80131b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80131ba:	4619      	mov	r1, r3
 80131bc:	4894      	ldr	r0, [pc, #592]	@ (8013410 <create_name+0x2c4>)
 80131be:	f005 fa87 	bl	80186d0 <strchr>
 80131c2:	4603      	mov	r3, r0
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d001      	beq.n	80131cc <create_name+0x80>
 80131c8:	2306      	movs	r3, #6
 80131ca:	e1e3      	b.n	8013594 <create_name+0x448>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80131cc:	697b      	ldr	r3, [r7, #20]
 80131ce:	2bfe      	cmp	r3, #254	@ 0xfe
 80131d0:	d901      	bls.n	80131d6 <create_name+0x8a>
 80131d2:	2306      	movs	r3, #6
 80131d4:	e1de      	b.n	8013594 <create_name+0x448>
		lfn[di++] = wc;				/* Store the Unicode character */
 80131d6:	697b      	ldr	r3, [r7, #20]
 80131d8:	1c5a      	adds	r2, r3, #1
 80131da:	617a      	str	r2, [r7, #20]
 80131dc:	005b      	lsls	r3, r3, #1
 80131de:	693a      	ldr	r2, [r7, #16]
 80131e0:	4413      	add	r3, r2
 80131e2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80131e4:	801a      	strh	r2, [r3, #0]
		uc = tchar2uni(&p);			/* Get a character */
 80131e6:	e7bf      	b.n	8013168 <create_name+0x1c>
	}
	if (wc < ' ') {				/* Stopped at end of the path? */
 80131e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80131ea:	2b1f      	cmp	r3, #31
 80131ec:	d806      	bhi.n	80131fc <create_name+0xb0>
		cf = NS_LAST;			/* Last segment */
 80131ee:	2304      	movs	r3, #4
 80131f0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80131f4:	e014      	b.n	8013220 <create_name+0xd4>
	} else {					/* Stopped at a separator */
		while (IsSeparator(*p)) p++;	/* Skip duplicated separators if exist */
 80131f6:	68bb      	ldr	r3, [r7, #8]
 80131f8:	3301      	adds	r3, #1
 80131fa:	60bb      	str	r3, [r7, #8]
 80131fc:	68bb      	ldr	r3, [r7, #8]
 80131fe:	781b      	ldrb	r3, [r3, #0]
 8013200:	2b2f      	cmp	r3, #47	@ 0x2f
 8013202:	d0f8      	beq.n	80131f6 <create_name+0xaa>
 8013204:	68bb      	ldr	r3, [r7, #8]
 8013206:	781b      	ldrb	r3, [r3, #0]
 8013208:	2b5c      	cmp	r3, #92	@ 0x5c
 801320a:	d0f4      	beq.n	80131f6 <create_name+0xaa>
		cf = 0;					/* Next segment may follow */
 801320c:	2300      	movs	r3, #0
 801320e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if (IsTerminator(*p)) cf = NS_LAST;	/* Ignore terminating separator */
 8013212:	68bb      	ldr	r3, [r7, #8]
 8013214:	781b      	ldrb	r3, [r3, #0]
 8013216:	2b1f      	cmp	r3, #31
 8013218:	d802      	bhi.n	8013220 <create_name+0xd4>
 801321a:	2304      	movs	r3, #4
 801321c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	}
	*path = p;					/* Return pointer to the next segment */
 8013220:	68ba      	ldr	r2, [r7, #8]
 8013222:	683b      	ldr	r3, [r7, #0]
 8013224:	601a      	str	r2, [r3, #0]

#if FF_FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 8013226:	697b      	ldr	r3, [r7, #20]
 8013228:	2b01      	cmp	r3, #1
 801322a:	d109      	bne.n	8013240 <create_name+0xf4>
 801322c:	697a      	ldr	r2, [r7, #20]
 801322e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8013232:	4413      	add	r3, r2
 8013234:	005b      	lsls	r3, r3, #1
 8013236:	693a      	ldr	r2, [r7, #16]
 8013238:	4413      	add	r3, r2
 801323a:	881b      	ldrh	r3, [r3, #0]
 801323c:	2b2e      	cmp	r3, #46	@ 0x2e
 801323e:	d015      	beq.n	801326c <create_name+0x120>
 8013240:	697b      	ldr	r3, [r7, #20]
 8013242:	2b02      	cmp	r3, #2
 8013244:	d14d      	bne.n	80132e2 <create_name+0x196>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 8013246:	697a      	ldr	r2, [r7, #20]
 8013248:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801324c:	4413      	add	r3, r2
 801324e:	005b      	lsls	r3, r3, #1
 8013250:	693a      	ldr	r2, [r7, #16]
 8013252:	4413      	add	r3, r2
 8013254:	881b      	ldrh	r3, [r3, #0]
 8013256:	2b2e      	cmp	r3, #46	@ 0x2e
 8013258:	d143      	bne.n	80132e2 <create_name+0x196>
 801325a:	697a      	ldr	r2, [r7, #20]
 801325c:	4b6d      	ldr	r3, [pc, #436]	@ (8013414 <create_name+0x2c8>)
 801325e:	4413      	add	r3, r2
 8013260:	005b      	lsls	r3, r3, #1
 8013262:	693a      	ldr	r2, [r7, #16]
 8013264:	4413      	add	r3, r2
 8013266:	881b      	ldrh	r3, [r3, #0]
 8013268:	2b2e      	cmp	r3, #46	@ 0x2e
 801326a:	d13a      	bne.n	80132e2 <create_name+0x196>
		lfn[di] = 0;
 801326c:	697b      	ldr	r3, [r7, #20]
 801326e:	005b      	lsls	r3, r3, #1
 8013270:	693a      	ldr	r2, [r7, #16]
 8013272:	4413      	add	r3, r2
 8013274:	2200      	movs	r2, #0
 8013276:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++) {	/* Create dot name for SFN entry */
 8013278:	2300      	movs	r3, #0
 801327a:	623b      	str	r3, [r7, #32]
 801327c:	e00f      	b.n	801329e <create_name+0x152>
			dp->fn[i] = (i < di) ? '.' : ' ';
 801327e:	6a3a      	ldr	r2, [r7, #32]
 8013280:	697b      	ldr	r3, [r7, #20]
 8013282:	429a      	cmp	r2, r3
 8013284:	d201      	bcs.n	801328a <create_name+0x13e>
 8013286:	212e      	movs	r1, #46	@ 0x2e
 8013288:	e000      	b.n	801328c <create_name+0x140>
 801328a:	2120      	movs	r1, #32
 801328c:	687a      	ldr	r2, [r7, #4]
 801328e:	6a3b      	ldr	r3, [r7, #32]
 8013290:	4413      	add	r3, r2
 8013292:	3340      	adds	r3, #64	@ 0x40
 8013294:	460a      	mov	r2, r1
 8013296:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++) {	/* Create dot name for SFN entry */
 8013298:	6a3b      	ldr	r3, [r7, #32]
 801329a:	3301      	adds	r3, #1
 801329c:	623b      	str	r3, [r7, #32]
 801329e:	6a3b      	ldr	r3, [r7, #32]
 80132a0:	2b0a      	cmp	r3, #10
 80132a2:	d9ec      	bls.n	801327e <create_name+0x132>
		}
		dp->fn[i] = cf | NS_DOT;	/* This is a dot entry */
 80132a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80132a8:	f043 0320 	orr.w	r3, r3, #32
 80132ac:	b2d9      	uxtb	r1, r3
 80132ae:	687a      	ldr	r2, [r7, #4]
 80132b0:	6a3b      	ldr	r3, [r7, #32]
 80132b2:	4413      	add	r3, r2
 80132b4:	3340      	adds	r3, #64	@ 0x40
 80132b6:	460a      	mov	r2, r1
 80132b8:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 80132ba:	2300      	movs	r3, #0
 80132bc:	e16a      	b.n	8013594 <create_name+0x448>
	}
#endif
	while (di) {					/* Snip off trailing spaces and dots if exist */
		wc = lfn[di - 1];
 80132be:	697a      	ldr	r2, [r7, #20]
 80132c0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80132c4:	4413      	add	r3, r2
 80132c6:	005b      	lsls	r3, r3, #1
 80132c8:	693a      	ldr	r2, [r7, #16]
 80132ca:	4413      	add	r3, r2
 80132cc:	881b      	ldrh	r3, [r3, #0]
 80132ce:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (wc != ' ' && wc != '.') break;
 80132d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80132d2:	2b20      	cmp	r3, #32
 80132d4:	d002      	beq.n	80132dc <create_name+0x190>
 80132d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80132d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80132da:	d106      	bne.n	80132ea <create_name+0x19e>
		di--;
 80132dc:	697b      	ldr	r3, [r7, #20]
 80132de:	3b01      	subs	r3, #1
 80132e0:	617b      	str	r3, [r7, #20]
	while (di) {					/* Snip off trailing spaces and dots if exist */
 80132e2:	697b      	ldr	r3, [r7, #20]
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d1ea      	bne.n	80132be <create_name+0x172>
 80132e8:	e000      	b.n	80132ec <create_name+0x1a0>
		if (wc != ' ' && wc != '.') break;
 80132ea:	bf00      	nop
	}
	lfn[di] = 0;							/* LFN is created into the working buffer */
 80132ec:	697b      	ldr	r3, [r7, #20]
 80132ee:	005b      	lsls	r3, r3, #1
 80132f0:	693a      	ldr	r2, [r7, #16]
 80132f2:	4413      	add	r3, r2
 80132f4:	2200      	movs	r2, #0
 80132f6:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
 80132f8:	697b      	ldr	r3, [r7, #20]
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d101      	bne.n	8013302 <create_name+0x1b6>
 80132fe:	2306      	movs	r3, #6
 8013300:	e148      	b.n	8013594 <create_name+0x448>

	/* Create SFN in directory form */
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
 8013302:	2300      	movs	r3, #0
 8013304:	61bb      	str	r3, [r7, #24]
 8013306:	e002      	b.n	801330e <create_name+0x1c2>
 8013308:	69bb      	ldr	r3, [r7, #24]
 801330a:	3301      	adds	r3, #1
 801330c:	61bb      	str	r3, [r7, #24]
 801330e:	69bb      	ldr	r3, [r7, #24]
 8013310:	005b      	lsls	r3, r3, #1
 8013312:	693a      	ldr	r2, [r7, #16]
 8013314:	4413      	add	r3, r2
 8013316:	881b      	ldrh	r3, [r3, #0]
 8013318:	2b20      	cmp	r3, #32
 801331a:	d0f5      	beq.n	8013308 <create_name+0x1bc>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 801331c:	69bb      	ldr	r3, [r7, #24]
 801331e:	2b00      	cmp	r3, #0
 8013320:	d106      	bne.n	8013330 <create_name+0x1e4>
 8013322:	69bb      	ldr	r3, [r7, #24]
 8013324:	005b      	lsls	r3, r3, #1
 8013326:	693a      	ldr	r2, [r7, #16]
 8013328:	4413      	add	r3, r2
 801332a:	881b      	ldrh	r3, [r3, #0]
 801332c:	2b2e      	cmp	r3, #46	@ 0x2e
 801332e:	d109      	bne.n	8013344 <create_name+0x1f8>
 8013330:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013334:	f043 0303 	orr.w	r3, r3, #3
 8013338:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
 801333c:	e002      	b.n	8013344 <create_name+0x1f8>
 801333e:	697b      	ldr	r3, [r7, #20]
 8013340:	3b01      	subs	r3, #1
 8013342:	617b      	str	r3, [r7, #20]
 8013344:	697b      	ldr	r3, [r7, #20]
 8013346:	2b00      	cmp	r3, #0
 8013348:	d009      	beq.n	801335e <create_name+0x212>
 801334a:	697a      	ldr	r2, [r7, #20]
 801334c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8013350:	4413      	add	r3, r2
 8013352:	005b      	lsls	r3, r3, #1
 8013354:	693a      	ldr	r2, [r7, #16]
 8013356:	4413      	add	r3, r2
 8013358:	881b      	ldrh	r3, [r3, #0]
 801335a:	2b2e      	cmp	r3, #46	@ 0x2e
 801335c:	d1ef      	bne.n	801333e <create_name+0x1f2>

	memset(dp->fn, ' ', 11);
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	3340      	adds	r3, #64	@ 0x40
 8013362:	220b      	movs	r2, #11
 8013364:	2120      	movs	r1, #32
 8013366:	4618      	mov	r0, r3
 8013368:	f005 f9aa 	bl	80186c0 <memset>
	i = b = 0; ni = 8;
 801336c:	2300      	movs	r3, #0
 801336e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013372:	2300      	movs	r3, #0
 8013374:	623b      	str	r3, [r7, #32]
 8013376:	2308      	movs	r3, #8
 8013378:	61fb      	str	r3, [r7, #28]
	for (;;) {
		wc = lfn[si++];					/* Get an LFN character */
 801337a:	69bb      	ldr	r3, [r7, #24]
 801337c:	1c5a      	adds	r2, r3, #1
 801337e:	61ba      	str	r2, [r7, #24]
 8013380:	005b      	lsls	r3, r3, #1
 8013382:	693a      	ldr	r2, [r7, #16]
 8013384:	4413      	add	r3, r2
 8013386:	881b      	ldrh	r3, [r3, #0]
 8013388:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (wc == 0) break;				/* Break on end of the LFN */
 801338a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801338c:	2b00      	cmp	r3, #0
 801338e:	f000 80b7 	beq.w	8013500 <create_name+0x3b4>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
 8013392:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013394:	2b20      	cmp	r3, #32
 8013396:	d006      	beq.n	80133a6 <create_name+0x25a>
 8013398:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801339a:	2b2e      	cmp	r3, #46	@ 0x2e
 801339c:	d10a      	bne.n	80133b4 <create_name+0x268>
 801339e:	69ba      	ldr	r2, [r7, #24]
 80133a0:	697b      	ldr	r3, [r7, #20]
 80133a2:	429a      	cmp	r2, r3
 80133a4:	d006      	beq.n	80133b4 <create_name+0x268>
			cf |= NS_LOSS | NS_LFN;
 80133a6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80133aa:	f043 0303 	orr.w	r3, r3, #3
 80133ae:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			continue;
 80133b2:	e0a4      	b.n	80134fe <create_name+0x3b2>
		}

		if (i >= ni || si == di) {		/* End of field? */
 80133b4:	6a3a      	ldr	r2, [r7, #32]
 80133b6:	69fb      	ldr	r3, [r7, #28]
 80133b8:	429a      	cmp	r2, r3
 80133ba:	d203      	bcs.n	80133c4 <create_name+0x278>
 80133bc:	69ba      	ldr	r2, [r7, #24]
 80133be:	697b      	ldr	r3, [r7, #20]
 80133c0:	429a      	cmp	r2, r3
 80133c2:	d129      	bne.n	8013418 <create_name+0x2cc>
			if (ni == 11) {				/* Name extension overflow? */
 80133c4:	69fb      	ldr	r3, [r7, #28]
 80133c6:	2b0b      	cmp	r3, #11
 80133c8:	d106      	bne.n	80133d8 <create_name+0x28c>
				cf |= NS_LOSS | NS_LFN;
 80133ca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80133ce:	f043 0303 	orr.w	r3, r3, #3
 80133d2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				break;
 80133d6:	e096      	b.n	8013506 <create_name+0x3ba>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
 80133d8:	69ba      	ldr	r2, [r7, #24]
 80133da:	697b      	ldr	r3, [r7, #20]
 80133dc:	429a      	cmp	r2, r3
 80133de:	d005      	beq.n	80133ec <create_name+0x2a0>
 80133e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80133e4:	f043 0303 	orr.w	r3, r3, #3
 80133e8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			if (si > di) break;						/* No name extension? */
 80133ec:	69ba      	ldr	r2, [r7, #24]
 80133ee:	697b      	ldr	r3, [r7, #20]
 80133f0:	429a      	cmp	r2, r3
 80133f2:	f200 8087 	bhi.w	8013504 <create_name+0x3b8>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
 80133f6:	697b      	ldr	r3, [r7, #20]
 80133f8:	61bb      	str	r3, [r7, #24]
 80133fa:	2308      	movs	r3, #8
 80133fc:	623b      	str	r3, [r7, #32]
 80133fe:	230b      	movs	r3, #11
 8013400:	61fb      	str	r3, [r7, #28]
 8013402:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013406:	009b      	lsls	r3, r3, #2
 8013408:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			continue;
 801340c:	e077      	b.n	80134fe <create_name+0x3b2>
 801340e:	bf00      	nop
 8013410:	0801e2fc 	.word	0x0801e2fc
 8013414:	7ffffffe 	.word	0x7ffffffe
		}

		if (wc >= 0x80) {	/* Is this an extended character? */
 8013418:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801341a:	2b7f      	cmp	r3, #127	@ 0x7f
 801341c:	d918      	bls.n	8013450 <create_name+0x304>
			cf |= NS_LFN;	/* LFN entry needs to be created */
 801341e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013422:	f043 0302 	orr.w	r3, r3, #2
 8013426:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
			} else {		/* In DBCS cfg */
				wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Up-convert ==> ANSI/OEM code */
			}
#elif FF_CODE_PAGE < 900	/* In SBCS cfg */
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
 801342a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801342c:	f240 3152 	movw	r1, #850	@ 0x352
 8013430:	4618      	mov	r0, r3
 8013432:	f002 fb31 	bl	8015a98 <ff_uni2oem>
 8013436:	4603      	mov	r3, r0
 8013438:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
 801343a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801343c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013440:	2b00      	cmp	r3, #0
 8013442:	d005      	beq.n	8013450 <create_name+0x304>
 8013444:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013446:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801344a:	4a54      	ldr	r2, [pc, #336]	@ (801359c <create_name+0x450>)
 801344c:	5cd3      	ldrb	r3, [r2, r3]
 801344e:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else						/* In DBCS cfg */
			wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Up-convert ==> ANSI/OEM code */
#endif
		}

		if (wc >= 0x100) {				/* Is this a DBC? */
 8013450:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013452:	2bff      	cmp	r3, #255	@ 0xff
 8013454:	d91a      	bls.n	801348c <create_name+0x340>
			if (i >= ni - 1) {			/* Field overflow? */
 8013456:	69fb      	ldr	r3, [r7, #28]
 8013458:	3b01      	subs	r3, #1
 801345a:	6a3a      	ldr	r2, [r7, #32]
 801345c:	429a      	cmp	r2, r3
 801345e:	d308      	bcc.n	8013472 <create_name+0x326>
				cf |= NS_LOSS | NS_LFN;
 8013460:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013464:	f043 0303 	orr.w	r3, r3, #3
 8013468:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				i = ni; continue;		/* Next field */
 801346c:	69fb      	ldr	r3, [r7, #28]
 801346e:	623b      	str	r3, [r7, #32]
 8013470:	e045      	b.n	80134fe <create_name+0x3b2>
			}
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
 8013472:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013474:	0a1b      	lsrs	r3, r3, #8
 8013476:	b299      	uxth	r1, r3
 8013478:	6a3b      	ldr	r3, [r7, #32]
 801347a:	1c5a      	adds	r2, r3, #1
 801347c:	623a      	str	r2, [r7, #32]
 801347e:	b2c9      	uxtb	r1, r1
 8013480:	687a      	ldr	r2, [r7, #4]
 8013482:	4413      	add	r3, r2
 8013484:	460a      	mov	r2, r1
 8013486:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801348a:	e02e      	b.n	80134ea <create_name+0x39e>
		} else {						/* SBC */
			if (wc == 0 || strchr("+,;=[]", (int)wc)) {	/* Replace illegal characters for SFN */
 801348c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801348e:	2b00      	cmp	r3, #0
 8013490:	d007      	beq.n	80134a2 <create_name+0x356>
 8013492:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013494:	4619      	mov	r1, r3
 8013496:	4842      	ldr	r0, [pc, #264]	@ (80135a0 <create_name+0x454>)
 8013498:	f005 f91a 	bl	80186d0 <strchr>
 801349c:	4603      	mov	r3, r0
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d008      	beq.n	80134b4 <create_name+0x368>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80134a2:	235f      	movs	r3, #95	@ 0x5f
 80134a4:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80134a6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80134aa:	f043 0303 	orr.w	r3, r3, #3
 80134ae:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80134b2:	e01a      	b.n	80134ea <create_name+0x39e>
			} else {
				if (IsUpper(wc)) {		/* ASCII upper case? */
 80134b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80134b6:	2b40      	cmp	r3, #64	@ 0x40
 80134b8:	d908      	bls.n	80134cc <create_name+0x380>
 80134ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80134bc:	2b5a      	cmp	r3, #90	@ 0x5a
 80134be:	d805      	bhi.n	80134cc <create_name+0x380>
					b |= 2;
 80134c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80134c4:	f043 0302 	orr.w	r3, r3, #2
 80134c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				}
				if (IsLower(wc)) {		/* ASCII lower case? */
 80134cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80134ce:	2b60      	cmp	r3, #96	@ 0x60
 80134d0:	d90b      	bls.n	80134ea <create_name+0x39e>
 80134d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80134d4:	2b7a      	cmp	r3, #122	@ 0x7a
 80134d6:	d808      	bhi.n	80134ea <create_name+0x39e>
					b |= 1; wc -= 0x20;
 80134d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80134dc:	f043 0301 	orr.w	r3, r3, #1
 80134e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80134e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80134e6:	3b20      	subs	r3, #32
 80134e8:	84bb      	strh	r3, [r7, #36]	@ 0x24
				}
			}
		}
		dp->fn[i++] = (BYTE)wc;
 80134ea:	6a3b      	ldr	r3, [r7, #32]
 80134ec:	1c5a      	adds	r2, r3, #1
 80134ee:	623a      	str	r2, [r7, #32]
 80134f0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80134f2:	b2d1      	uxtb	r1, r2
 80134f4:	687a      	ldr	r2, [r7, #4]
 80134f6:	4413      	add	r3, r2
 80134f8:	460a      	mov	r2, r1
 80134fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		wc = lfn[si++];					/* Get an LFN character */
 80134fe:	e73c      	b.n	801337a <create_name+0x22e>
		if (wc == 0) break;				/* Break on end of the LFN */
 8013500:	bf00      	nop
 8013502:	e000      	b.n	8013506 <create_name+0x3ba>
			if (si > di) break;						/* No name extension? */
 8013504:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801350c:	2be5      	cmp	r3, #229	@ 0xe5
 801350e:	d103      	bne.n	8013518 <create_name+0x3cc>
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	2205      	movs	r2, #5
 8013514:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 8013518:	69fb      	ldr	r3, [r7, #28]
 801351a:	2b08      	cmp	r3, #8
 801351c:	d104      	bne.n	8013528 <create_name+0x3dc>
 801351e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013522:	009b      	lsls	r3, r3, #2
 8013524:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
 8013528:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801352c:	f003 030c 	and.w	r3, r3, #12
 8013530:	2b0c      	cmp	r3, #12
 8013532:	d005      	beq.n	8013540 <create_name+0x3f4>
 8013534:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013538:	f003 0303 	and.w	r3, r3, #3
 801353c:	2b03      	cmp	r3, #3
 801353e:	d105      	bne.n	801354c <create_name+0x400>
 8013540:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013544:	f043 0302 	orr.w	r3, r3, #2
 8013548:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
 801354c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013550:	f003 0302 	and.w	r3, r3, #2
 8013554:	2b00      	cmp	r3, #0
 8013556:	d117      	bne.n	8013588 <create_name+0x43c>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
 8013558:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801355c:	f003 0301 	and.w	r3, r3, #1
 8013560:	2b00      	cmp	r3, #0
 8013562:	d005      	beq.n	8013570 <create_name+0x424>
 8013564:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013568:	f043 0310 	orr.w	r3, r3, #16
 801356c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
 8013570:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013574:	f003 0304 	and.w	r3, r3, #4
 8013578:	2b00      	cmp	r3, #0
 801357a:	d005      	beq.n	8013588 <create_name+0x43c>
 801357c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013580:	f043 0308 	orr.w	r3, r3, #8
 8013584:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801358e:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b

	return FR_OK;
 8013592:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* FF_USE_LFN */
}
 8013594:	4618      	mov	r0, r3
 8013596:	3728      	adds	r7, #40	@ 0x28
 8013598:	46bd      	mov	sp, r7
 801359a:	bd80      	pop	{r7, pc}
 801359c:	0801e3fc 	.word	0x0801e3fc
 80135a0:	0801e308 	.word	0x0801e308

080135a4 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 80135a4:	b5b0      	push	{r4, r5, r7, lr}
 80135a6:	b09a      	sub	sp, #104	@ 0x68
 80135a8:	af00      	add	r7, sp, #0
 80135aa:	6078      	str	r0, [r7, #4]
 80135ac:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	663b      	str	r3, [r7, #96]	@ 0x60


#if FF_FS_RPATH != 0
	if (!IsSeparator(*path) && (FF_STR_VOLUME_ID != 2 || !IsTerminator(*path))) {	/* Without heading separator */
 80135b4:	683b      	ldr	r3, [r7, #0]
 80135b6:	781b      	ldrb	r3, [r3, #0]
 80135b8:	2b2f      	cmp	r3, #47	@ 0x2f
 80135ba:	d00b      	beq.n	80135d4 <follow_path+0x30>
 80135bc:	683b      	ldr	r3, [r7, #0]
 80135be:	781b      	ldrb	r3, [r3, #0]
 80135c0:	2b5c      	cmp	r3, #92	@ 0x5c
 80135c2:	d007      	beq.n	80135d4 <follow_path+0x30>
		dp->obj.sclust = fs->cdir;			/* Start at the current directory */
 80135c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80135c6:	6a1a      	ldr	r2, [r3, #32]
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	609a      	str	r2, [r3, #8]
 80135cc:	e00d      	b.n	80135ea <follow_path+0x46>
	} else
#endif
	{										/* With heading separator */
		while (IsSeparator(*path)) path++;	/* Strip separators */
 80135ce:	683b      	ldr	r3, [r7, #0]
 80135d0:	3301      	adds	r3, #1
 80135d2:	603b      	str	r3, [r7, #0]
 80135d4:	683b      	ldr	r3, [r7, #0]
 80135d6:	781b      	ldrb	r3, [r3, #0]
 80135d8:	2b2f      	cmp	r3, #47	@ 0x2f
 80135da:	d0f8      	beq.n	80135ce <follow_path+0x2a>
 80135dc:	683b      	ldr	r3, [r7, #0]
 80135de:	781b      	ldrb	r3, [r3, #0]
 80135e0:	2b5c      	cmp	r3, #92	@ 0x5c
 80135e2:	d0f4      	beq.n	80135ce <follow_path+0x2a>
		dp->obj.sclust = 0;					/* Start from the root directory */
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	2200      	movs	r2, #0
 80135e8:	609a      	str	r2, [r3, #8]
	}
#if FF_FS_EXFAT
	dp->obj.n_frag = 0;	/* Invalidate last fragment counter of the object */
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	2200      	movs	r2, #0
 80135ee:	61da      	str	r2, [r3, #28]
#if FF_FS_RPATH != 0
	if (fs->fs_type == FS_EXFAT && dp->obj.sclust) {	/* exFAT: Retrieve the sub-directory's status */
 80135f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80135f2:	781b      	ldrb	r3, [r3, #0]
 80135f4:	2b04      	cmp	r3, #4
 80135f6:	d136      	bne.n	8013666 <follow_path+0xc2>
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	689b      	ldr	r3, [r3, #8]
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d032      	beq.n	8013666 <follow_path+0xc2>
		DIR dj;

		dp->obj.c_scl = fs->cdc_scl;
 8013600:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013602:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	621a      	str	r2, [r3, #32]
		dp->obj.c_size = fs->cdc_size;
 8013608:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801360a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	625a      	str	r2, [r3, #36]	@ 0x24
		dp->obj.c_ofs = fs->cdc_ofs;
 8013610:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013612:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	629a      	str	r2, [r3, #40]	@ 0x28
		res = load_obj_xdir(&dj, &dp->obj);
 8013618:	687a      	ldr	r2, [r7, #4]
 801361a:	f107 0308 	add.w	r3, r7, #8
 801361e:	4611      	mov	r1, r2
 8013620:	4618      	mov	r0, r3
 8013622:	f7fe ff24 	bl	801246e <load_obj_xdir>
 8013626:	4603      	mov	r3, r0
 8013628:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		if (res != FR_OK) return res;
 801362c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013630:	2b00      	cmp	r3, #0
 8013632:	d002      	beq.n	801363a <follow_path+0x96>
 8013634:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013638:	e0ad      	b.n	8013796 <follow_path+0x1f2>
		dp->obj.objsize = ld_dword(fs->dirbuf + XDIR_FileSize);
 801363a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801363c:	695b      	ldr	r3, [r3, #20]
 801363e:	3338      	adds	r3, #56	@ 0x38
 8013640:	4618      	mov	r0, r3
 8013642:	f7fc fe79 	bl	8010338 <ld_dword>
 8013646:	4603      	mov	r3, r0
 8013648:	2200      	movs	r2, #0
 801364a:	461c      	mov	r4, r3
 801364c:	4615      	mov	r5, r2
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	e9c3 4504 	strd	r4, r5, [r3, #16]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8013654:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013656:	695b      	ldr	r3, [r3, #20]
 8013658:	3321      	adds	r3, #33	@ 0x21
 801365a:	781b      	ldrb	r3, [r3, #0]
 801365c:	f003 0302 	and.w	r3, r3, #2
 8013660:	b2da      	uxtb	r2, r3
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	71da      	strb	r2, [r3, #7]
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8013666:	683b      	ldr	r3, [r7, #0]
 8013668:	781b      	ldrb	r3, [r3, #0]
 801366a:	2b1f      	cmp	r3, #31
 801366c:	d80b      	bhi.n	8013686 <follow_path+0xe2>
		dp->fn[NSFLAG] = NS_NONAME;
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	2280      	movs	r2, #128	@ 0x80
 8013672:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		res = dir_sdi(dp, 0);
 8013676:	2100      	movs	r1, #0
 8013678:	6878      	ldr	r0, [r7, #4]
 801367a:	f7fe f9b8 	bl	80119ee <dir_sdi>
 801367e:	4603      	mov	r3, r0
 8013680:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8013684:	e085      	b.n	8013792 <follow_path+0x1ee>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013686:	463b      	mov	r3, r7
 8013688:	4619      	mov	r1, r3
 801368a:	6878      	ldr	r0, [r7, #4]
 801368c:	f7ff fd5e 	bl	801314c <create_name>
 8013690:	4603      	mov	r3, r0
 8013692:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			if (res != FR_OK) break;
 8013696:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801369a:	2b00      	cmp	r3, #0
 801369c:	d174      	bne.n	8013788 <follow_path+0x1e4>
			res = dir_find(dp);				/* Find an object with the segment name */
 801369e:	6878      	ldr	r0, [r7, #4]
 80136a0:	f7ff f8b0 	bl	8012804 <dir_find>
 80136a4:	4603      	mov	r3, r0
 80136a6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			ns = dp->fn[NSFLAG];
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 80136b0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (res != FR_OK) {				/* Failed to find the object */
 80136b4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d021      	beq.n	8013700 <follow_path+0x15c>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80136bc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80136c0:	2b04      	cmp	r3, #4
 80136c2:	d163      	bne.n	801378c <follow_path+0x1e8>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 80136c4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80136c8:	f003 0320 	and.w	r3, r3, #32
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d00d      	beq.n	80136ec <follow_path+0x148>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80136d0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80136d4:	f003 0304 	and.w	r3, r3, #4
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d053      	beq.n	8013784 <follow_path+0x1e0>
						dp->fn[NSFLAG] = NS_NONAME;
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	2280      	movs	r2, #128	@ 0x80
 80136e0:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
						res = FR_OK;
 80136e4:	2300      	movs	r3, #0
 80136e6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 80136ea:	e04f      	b.n	801378c <follow_path+0x1e8>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80136ec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80136f0:	f003 0304 	and.w	r3, r3, #4
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d149      	bne.n	801378c <follow_path+0x1e8>
 80136f8:	2305      	movs	r3, #5
 80136fa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				break;
 80136fe:	e045      	b.n	801378c <follow_path+0x1e8>
			}
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 8013700:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013704:	f003 0304 	and.w	r3, r3, #4
 8013708:	2b00      	cmp	r3, #0
 801370a:	d141      	bne.n	8013790 <follow_path+0x1ec>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	799b      	ldrb	r3, [r3, #6]
 8013710:	f003 0310 	and.w	r3, r3, #16
 8013714:	2b00      	cmp	r3, #0
 8013716:	d103      	bne.n	8013720 <follow_path+0x17c>
				res = FR_NO_PATH; break;
 8013718:	2305      	movs	r3, #5
 801371a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801371e:	e038      	b.n	8013792 <follow_path+0x1ee>
			}
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {	/* Save containing directory information for next dir */
 8013720:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013722:	781b      	ldrb	r3, [r3, #0]
 8013724:	2b04      	cmp	r3, #4
 8013726:	d118      	bne.n	801375a <follow_path+0x1b6>
				dp->obj.c_scl = dp->obj.sclust;
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	689a      	ldr	r2, [r3, #8]
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	621a      	str	r2, [r3, #32]
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8013736:	4613      	mov	r3, r2
 8013738:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801373c:	687a      	ldr	r2, [r7, #4]
 801373e:	79d2      	ldrb	r2, [r2, #7]
 8013740:	431a      	orrs	r2, r3
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	625a      	str	r2, [r3, #36]	@ 0x24
				dp->obj.c_ofs = dp->blk_ofs;
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	629a      	str	r2, [r3, #40]	@ 0x28
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	4619      	mov	r1, r3
 8013752:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8013754:	f7fe fe62 	bl	801241c <init_alloc_info>
 8013758:	e795      	b.n	8013686 <follow_path+0xe2>
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801375a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801375c:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013764:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8013766:	8992      	ldrh	r2, [r2, #12]
 8013768:	fbb3 f0f2 	udiv	r0, r3, r2
 801376c:	fb00 f202 	mul.w	r2, r0, r2
 8013770:	1a9b      	subs	r3, r3, r2
 8013772:	440b      	add	r3, r1
 8013774:	4619      	mov	r1, r3
 8013776:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8013778:	f7fe fade 	bl	8011d38 <ld_clust>
 801377c:	4602      	mov	r2, r0
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	609a      	str	r2, [r3, #8]
 8013782:	e780      	b.n	8013686 <follow_path+0xe2>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8013784:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013786:	e77e      	b.n	8013686 <follow_path+0xe2>
			if (res != FR_OK) break;
 8013788:	bf00      	nop
 801378a:	e002      	b.n	8013792 <follow_path+0x1ee>
				break;
 801378c:	bf00      	nop
 801378e:	e000      	b.n	8013792 <follow_path+0x1ee>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 8013790:	bf00      	nop
			}
		}
	}

	return res;
 8013792:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8013796:	4618      	mov	r0, r3
 8013798:	3768      	adds	r7, #104	@ 0x68
 801379a:	46bd      	mov	sp, r7
 801379c:	bdb0      	pop	{r4, r5, r7, pc}
	...

080137a0 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 80137a0:	b480      	push	{r7}
 80137a2:	b089      	sub	sp, #36	@ 0x24
 80137a4:	af00      	add	r7, sp, #0
 80137a6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp;
	const TCHAR *tt;
	TCHAR tc;
	int i;
	int vol = -1;
 80137a8:	f04f 33ff 	mov.w	r3, #4294967295
 80137ac:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	613b      	str	r3, [r7, #16]
 80137b4:	693b      	ldr	r3, [r7, #16]
 80137b6:	61fb      	str	r3, [r7, #28]
	if (!tp) return vol;	/* Invalid path name? */
 80137b8:	693b      	ldr	r3, [r7, #16]
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d101      	bne.n	80137c2 <get_ldnumber+0x22>
 80137be:	697b      	ldr	r3, [r7, #20]
 80137c0:	e02e      	b.n	8013820 <get_ldnumber+0x80>
	do {					/* Find a colon in the path */
		tc = *tt++;
 80137c2:	69fb      	ldr	r3, [r7, #28]
 80137c4:	1c5a      	adds	r2, r3, #1
 80137c6:	61fa      	str	r2, [r7, #28]
 80137c8:	781b      	ldrb	r3, [r3, #0]
 80137ca:	73fb      	strb	r3, [r7, #15]
	} while (!IsTerminator(tc) && tc != ':');
 80137cc:	7bfb      	ldrb	r3, [r7, #15]
 80137ce:	2b1f      	cmp	r3, #31
 80137d0:	d902      	bls.n	80137d8 <get_ldnumber+0x38>
 80137d2:	7bfb      	ldrb	r3, [r7, #15]
 80137d4:	2b3a      	cmp	r3, #58	@ 0x3a
 80137d6:	d1f4      	bne.n	80137c2 <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 80137d8:	7bfb      	ldrb	r3, [r7, #15]
 80137da:	2b3a      	cmp	r3, #58	@ 0x3a
 80137dc:	d11c      	bne.n	8013818 <get_ldnumber+0x78>
		i = FF_VOLUMES;
 80137de:	2302      	movs	r3, #2
 80137e0:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 80137e2:	693b      	ldr	r3, [r7, #16]
 80137e4:	781b      	ldrb	r3, [r3, #0]
 80137e6:	2b2f      	cmp	r3, #47	@ 0x2f
 80137e8:	d90c      	bls.n	8013804 <get_ldnumber+0x64>
 80137ea:	693b      	ldr	r3, [r7, #16]
 80137ec:	781b      	ldrb	r3, [r3, #0]
 80137ee:	2b39      	cmp	r3, #57	@ 0x39
 80137f0:	d808      	bhi.n	8013804 <get_ldnumber+0x64>
 80137f2:	693b      	ldr	r3, [r7, #16]
 80137f4:	3302      	adds	r3, #2
 80137f6:	69fa      	ldr	r2, [r7, #28]
 80137f8:	429a      	cmp	r2, r3
 80137fa:	d103      	bne.n	8013804 <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 80137fc:	693b      	ldr	r3, [r7, #16]
 80137fe:	781b      	ldrb	r3, [r3, #0]
 8013800:	3b30      	subs	r3, #48	@ 0x30
 8013802:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8013804:	69bb      	ldr	r3, [r7, #24]
 8013806:	2b01      	cmp	r3, #1
 8013808:	dc04      	bgt.n	8013814 <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 801380a:	69bb      	ldr	r3, [r7, #24]
 801380c:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	69fa      	ldr	r2, [r7, #28]
 8013812:	601a      	str	r2, [r3, #0]
		}
		return vol;
 8013814:	697b      	ldr	r3, [r7, #20]
 8013816:	e003      	b.n	8013820 <get_ldnumber+0x80>
		return vol;
	}
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
 8013818:	4b04      	ldr	r3, [pc, #16]	@ (801382c <get_ldnumber+0x8c>)
 801381a:	781b      	ldrb	r3, [r3, #0]
 801381c:	617b      	str	r3, [r7, #20]
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
 801381e:	697b      	ldr	r3, [r7, #20]
}
 8013820:	4618      	mov	r0, r3
 8013822:	3724      	adds	r7, #36	@ 0x24
 8013824:	46bd      	mov	sp, r7
 8013826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801382a:	4770      	bx	lr
 801382c:	240020ea 	.word	0x240020ea

08013830 <check_fs>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
 8013830:	b580      	push	{r7, lr}
 8013832:	b084      	sub	sp, #16
 8013834:	af00      	add	r7, sp, #0
 8013836:	6078      	str	r0, [r7, #4]
 8013838:	6039      	str	r1, [r7, #0]
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	2200      	movs	r2, #0
 801383e:	711a      	strb	r2, [r3, #4]
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	f04f 32ff 	mov.w	r2, #4294967295
 8013846:	64da      	str	r2, [r3, #76]	@ 0x4c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 8013848:	6839      	ldr	r1, [r7, #0]
 801384a:	6878      	ldr	r0, [r7, #4]
 801384c:	f7fd f988 	bl	8010b60 <move_window>
 8013850:	4603      	mov	r3, r0
 8013852:	2b00      	cmp	r3, #0
 8013854:	d001      	beq.n	801385a <check_fs+0x2a>
 8013856:	2304      	movs	r3, #4
 8013858:	e099      	b.n	801398e <check_fs+0x15e>
	sign = ld_word(fs->win + BS_55AA);
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	3350      	adds	r3, #80	@ 0x50
 801385e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8013862:	4618      	mov	r0, r3
 8013864:	f7fc fd50 	bl	8010308 <ld_word>
 8013868:	4603      	mov	r3, r0
 801386a:	81fb      	strh	r3, [r7, #14]
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
 801386c:	89fb      	ldrh	r3, [r7, #14]
 801386e:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 8013872:	4293      	cmp	r3, r2
 8013874:	d10b      	bne.n	801388e <check_fs+0x5e>
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	3350      	adds	r3, #80	@ 0x50
 801387a:	220b      	movs	r2, #11
 801387c:	4946      	ldr	r1, [pc, #280]	@ (8013998 <check_fs+0x168>)
 801387e:	4618      	mov	r0, r3
 8013880:	f004 ff0e 	bl	80186a0 <memcmp>
 8013884:	4603      	mov	r3, r0
 8013886:	2b00      	cmp	r3, #0
 8013888:	d101      	bne.n	801388e <check_fs+0x5e>
 801388a:	2301      	movs	r3, #1
 801388c:	e07f      	b.n	801398e <check_fs+0x15e>
#endif
	b = fs->win[BS_JmpBoot];
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8013894:	737b      	strb	r3, [r7, #13]
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 8013896:	7b7b      	ldrb	r3, [r7, #13]
 8013898:	2beb      	cmp	r3, #235	@ 0xeb
 801389a:	d005      	beq.n	80138a8 <check_fs+0x78>
 801389c:	7b7b      	ldrb	r3, [r7, #13]
 801389e:	2be9      	cmp	r3, #233	@ 0xe9
 80138a0:	d002      	beq.n	80138a8 <check_fs+0x78>
 80138a2:	7b7b      	ldrb	r3, [r7, #13]
 80138a4:	2be8      	cmp	r3, #232	@ 0xe8
 80138a6:	d16a      	bne.n	801397e <check_fs+0x14e>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 80138a8:	89fb      	ldrh	r3, [r7, #14]
 80138aa:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 80138ae:	4293      	cmp	r3, r2
 80138b0:	d10c      	bne.n	80138cc <check_fs+0x9c>
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	3350      	adds	r3, #80	@ 0x50
 80138b6:	3352      	adds	r3, #82	@ 0x52
 80138b8:	2208      	movs	r2, #8
 80138ba:	4938      	ldr	r1, [pc, #224]	@ (801399c <check_fs+0x16c>)
 80138bc:	4618      	mov	r0, r3
 80138be:	f004 feef 	bl	80186a0 <memcmp>
 80138c2:	4603      	mov	r3, r0
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d101      	bne.n	80138cc <check_fs+0x9c>
			return 0;	/* It is an FAT32 VBR */
 80138c8:	2300      	movs	r3, #0
 80138ca:	e060      	b.n	801398e <check_fs+0x15e>
		}
		/* FAT volumes formatted with early MS-DOS lack BS_55AA and BS_FilSysType, so FAT VBR needs to be identified without them. */
		w = ld_word(fs->win + BPB_BytsPerSec);
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	3350      	adds	r3, #80	@ 0x50
 80138d0:	330b      	adds	r3, #11
 80138d2:	4618      	mov	r0, r3
 80138d4:	f7fc fd18 	bl	8010308 <ld_word>
 80138d8:	4603      	mov	r3, r0
 80138da:	817b      	strh	r3, [r7, #10]
		b = fs->win[BPB_SecPerClus];
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80138e2:	737b      	strb	r3, [r7, #13]
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 80138e4:	897a      	ldrh	r2, [r7, #10]
 80138e6:	897b      	ldrh	r3, [r7, #10]
 80138e8:	3b01      	subs	r3, #1
 80138ea:	4013      	ands	r3, r2
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d146      	bne.n	801397e <check_fs+0x14e>
 80138f0:	897b      	ldrh	r3, [r7, #10]
 80138f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80138f6:	d342      	bcc.n	801397e <check_fs+0x14e>
 80138f8:	897b      	ldrh	r3, [r7, #10]
 80138fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80138fe:	d83e      	bhi.n	801397e <check_fs+0x14e>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 8013900:	7b7b      	ldrb	r3, [r7, #13]
 8013902:	2b00      	cmp	r3, #0
 8013904:	d03b      	beq.n	801397e <check_fs+0x14e>
 8013906:	7b7a      	ldrb	r2, [r7, #13]
 8013908:	7b7b      	ldrb	r3, [r7, #13]
 801390a:	3b01      	subs	r3, #1
 801390c:	4013      	ands	r3, r2
 801390e:	2b00      	cmp	r3, #0
 8013910:	d135      	bne.n	801397e <check_fs+0x14e>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	3350      	adds	r3, #80	@ 0x50
 8013916:	330e      	adds	r3, #14
 8013918:	4618      	mov	r0, r3
 801391a:	f7fc fcf5 	bl	8010308 <ld_word>
 801391e:	4603      	mov	r3, r0
 8013920:	2b00      	cmp	r3, #0
 8013922:	d02c      	beq.n	801397e <check_fs+0x14e>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 801392a:	3b01      	subs	r3, #1
 801392c:	2b01      	cmp	r3, #1
 801392e:	d826      	bhi.n	801397e <check_fs+0x14e>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	3350      	adds	r3, #80	@ 0x50
 8013934:	3311      	adds	r3, #17
 8013936:	4618      	mov	r0, r3
 8013938:	f7fc fce6 	bl	8010308 <ld_word>
 801393c:	4603      	mov	r3, r0
 801393e:	2b00      	cmp	r3, #0
 8013940:	d01d      	beq.n	801397e <check_fs+0x14e>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	3350      	adds	r3, #80	@ 0x50
 8013946:	3313      	adds	r3, #19
 8013948:	4618      	mov	r0, r3
 801394a:	f7fc fcdd 	bl	8010308 <ld_word>
 801394e:	4603      	mov	r3, r0
 8013950:	2b7f      	cmp	r3, #127	@ 0x7f
 8013952:	d809      	bhi.n	8013968 <check_fs+0x138>
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	3350      	adds	r3, #80	@ 0x50
 8013958:	3320      	adds	r3, #32
 801395a:	4618      	mov	r0, r3
 801395c:	f7fc fcec 	bl	8010338 <ld_dword>
 8013960:	4603      	mov	r3, r0
 8013962:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013966:	d30a      	bcc.n	801397e <check_fs+0x14e>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	3350      	adds	r3, #80	@ 0x50
 801396c:	3316      	adds	r3, #22
 801396e:	4618      	mov	r0, r3
 8013970:	f7fc fcca 	bl	8010308 <ld_word>
 8013974:	4603      	mov	r3, r0
 8013976:	2b00      	cmp	r3, #0
 8013978:	d001      	beq.n	801397e <check_fs+0x14e>
				return 0;	/* It can be presumed an FAT VBR */
 801397a:	2300      	movs	r3, #0
 801397c:	e007      	b.n	801398e <check_fs+0x15e>
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
 801397e:	89fb      	ldrh	r3, [r7, #14]
 8013980:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 8013984:	4293      	cmp	r3, r2
 8013986:	d101      	bne.n	801398c <check_fs+0x15c>
 8013988:	2302      	movs	r3, #2
 801398a:	e000      	b.n	801398e <check_fs+0x15e>
 801398c:	2303      	movs	r3, #3
}
 801398e:	4618      	mov	r0, r3
 8013990:	3710      	adds	r7, #16
 8013992:	46bd      	mov	sp, r7
 8013994:	bd80      	pop	{r7, pc}
 8013996:	bf00      	nop
 8013998:	0801e310 	.word	0x0801e310
 801399c:	0801e31c 	.word	0x0801e31c

080139a0 <find_volume>:

static UINT find_volume (	/* Returns BS status found in the hosting drive */
	FATFS* fs,		/* Filesystem object */
	UINT part		/* Partition to fined = 0:find as SFD and partitions, >0:forced partition number */
)
{
 80139a0:	b580      	push	{r7, lr}
 80139a2:	b088      	sub	sp, #32
 80139a4:	af00      	add	r7, sp, #0
 80139a6:	6078      	str	r0, [r7, #4]
 80139a8:	6039      	str	r1, [r7, #0]
	UINT fmt, i;
	DWORD mbr_pt[4];


	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 80139aa:	2100      	movs	r1, #0
 80139ac:	6878      	ldr	r0, [r7, #4]
 80139ae:	f7ff ff3f 	bl	8013830 <check_fs>
 80139b2:	61b8      	str	r0, [r7, #24]
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 80139b4:	69bb      	ldr	r3, [r7, #24]
 80139b6:	2b02      	cmp	r3, #2
 80139b8:	d007      	beq.n	80139ca <find_volume+0x2a>
 80139ba:	69bb      	ldr	r3, [r7, #24]
 80139bc:	2b02      	cmp	r3, #2
 80139be:	d802      	bhi.n	80139c6 <find_volume+0x26>
 80139c0:	683b      	ldr	r3, [r7, #0]
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d101      	bne.n	80139ca <find_volume+0x2a>
 80139c6:	69bb      	ldr	r3, [r7, #24]
 80139c8:	e045      	b.n	8013a56 <find_volume+0xb6>
		}
		return 3;	/* Not found */
	}
#endif
	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 80139ca:	2300      	movs	r3, #0
 80139cc:	61fb      	str	r3, [r7, #28]
 80139ce:	e014      	b.n	80139fa <find_volume+0x5a>
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 80139d6:	69fb      	ldr	r3, [r7, #28]
 80139d8:	011b      	lsls	r3, r3, #4
 80139da:	f503 73e3 	add.w	r3, r3, #454	@ 0x1c6
 80139de:	4413      	add	r3, r2
 80139e0:	4618      	mov	r0, r3
 80139e2:	f7fc fca9 	bl	8010338 <ld_dword>
 80139e6:	4602      	mov	r2, r0
 80139e8:	69fb      	ldr	r3, [r7, #28]
 80139ea:	009b      	lsls	r3, r3, #2
 80139ec:	3320      	adds	r3, #32
 80139ee:	443b      	add	r3, r7
 80139f0:	f843 2c18 	str.w	r2, [r3, #-24]
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 80139f4:	69fb      	ldr	r3, [r7, #28]
 80139f6:	3301      	adds	r3, #1
 80139f8:	61fb      	str	r3, [r7, #28]
 80139fa:	69fb      	ldr	r3, [r7, #28]
 80139fc:	2b03      	cmp	r3, #3
 80139fe:	d9e7      	bls.n	80139d0 <find_volume+0x30>
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
 8013a00:	683b      	ldr	r3, [r7, #0]
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d002      	beq.n	8013a0c <find_volume+0x6c>
 8013a06:	683b      	ldr	r3, [r7, #0]
 8013a08:	3b01      	subs	r3, #1
 8013a0a:	e000      	b.n	8013a0e <find_volume+0x6e>
 8013a0c:	2300      	movs	r3, #0
 8013a0e:	61fb      	str	r3, [r7, #28]
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 8013a10:	69fb      	ldr	r3, [r7, #28]
 8013a12:	009b      	lsls	r3, r3, #2
 8013a14:	3320      	adds	r3, #32
 8013a16:	443b      	add	r3, r7
 8013a18:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d00b      	beq.n	8013a38 <find_volume+0x98>
 8013a20:	69fb      	ldr	r3, [r7, #28]
 8013a22:	009b      	lsls	r3, r3, #2
 8013a24:	3320      	adds	r3, #32
 8013a26:	443b      	add	r3, r7
 8013a28:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8013a2c:	4619      	mov	r1, r3
 8013a2e:	6878      	ldr	r0, [r7, #4]
 8013a30:	f7ff fefe 	bl	8013830 <check_fs>
 8013a34:	4603      	mov	r3, r0
 8013a36:	e000      	b.n	8013a3a <find_volume+0x9a>
 8013a38:	2303      	movs	r3, #3
 8013a3a:	61bb      	str	r3, [r7, #24]
	} while (part == 0 && fmt >= 2 && ++i < 4);
 8013a3c:	683b      	ldr	r3, [r7, #0]
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d108      	bne.n	8013a54 <find_volume+0xb4>
 8013a42:	69bb      	ldr	r3, [r7, #24]
 8013a44:	2b01      	cmp	r3, #1
 8013a46:	d905      	bls.n	8013a54 <find_volume+0xb4>
 8013a48:	69fb      	ldr	r3, [r7, #28]
 8013a4a:	3301      	adds	r3, #1
 8013a4c:	61fb      	str	r3, [r7, #28]
 8013a4e:	69fb      	ldr	r3, [r7, #28]
 8013a50:	2b03      	cmp	r3, #3
 8013a52:	d9dd      	bls.n	8013a10 <find_volume+0x70>
	return fmt;
 8013a54:	69bb      	ldr	r3, [r7, #24]
}
 8013a56:	4618      	mov	r0, r3
 8013a58:	3720      	adds	r7, #32
 8013a5a:	46bd      	mov	sp, r7
 8013a5c:	bd80      	pop	{r7, pc}
	...

08013a60 <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* Desiered access mode to check write protection */
)
{
 8013a60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013a64:	b09a      	sub	sp, #104	@ 0x68
 8013a66:	af00      	add	r7, sp, #0
 8013a68:	61f8      	str	r0, [r7, #28]
 8013a6a:	61b9      	str	r1, [r7, #24]
 8013a6c:	4613      	mov	r3, r2
 8013a6e:	75fb      	strb	r3, [r7, #23]
	WORD nrsv;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
 8013a70:	69bb      	ldr	r3, [r7, #24]
 8013a72:	2200      	movs	r2, #0
 8013a74:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8013a76:	69f8      	ldr	r0, [r7, #28]
 8013a78:	f7ff fe92 	bl	80137a0 <get_ldnumber>
 8013a7c:	64b8      	str	r0, [r7, #72]	@ 0x48
	if (vol < 0) return FR_INVALID_DRIVE;
 8013a7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	da01      	bge.n	8013a88 <mount_volume+0x28>
 8013a84:	230b      	movs	r3, #11
 8013a86:	e36c      	b.n	8014162 <mount_volume+0x702>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 8013a88:	4aa6      	ldr	r2, [pc, #664]	@ (8013d24 <mount_volume+0x2c4>)
 8013a8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013a90:	647b      	str	r3, [r7, #68]	@ 0x44
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8013a92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d101      	bne.n	8013a9c <mount_volume+0x3c>
 8013a98:	230c      	movs	r3, #12
 8013a9a:	e362      	b.n	8014162 <mount_volume+0x702>
#if FF_FS_REENTRANT
	if (!lock_volume(fs, 1)) return FR_TIMEOUT;	/* Lock the volume, and system if needed */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 8013a9c:	69bb      	ldr	r3, [r7, #24]
 8013a9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013aa0:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8013aa2:	7dfb      	ldrb	r3, [r7, #23]
 8013aa4:	f023 0301 	bic.w	r3, r3, #1
 8013aa8:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8013aaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013aac:	781b      	ldrb	r3, [r3, #0]
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d01a      	beq.n	8013ae8 <mount_volume+0x88>
		stat = disk_status(fs->pdrv);
 8013ab2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013ab4:	785b      	ldrb	r3, [r3, #1]
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	f7fc fb7e 	bl	80101b8 <disk_status>
 8013abc:	4603      	mov	r3, r0
 8013abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013ac2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8013ac6:	f003 0301 	and.w	r3, r3, #1
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d10c      	bne.n	8013ae8 <mount_volume+0x88>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8013ace:	7dfb      	ldrb	r3, [r7, #23]
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d007      	beq.n	8013ae4 <mount_volume+0x84>
 8013ad4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8013ad8:	f003 0304 	and.w	r3, r3, #4
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d001      	beq.n	8013ae4 <mount_volume+0x84>
				return FR_WRITE_PROTECTED;
 8013ae0:	230a      	movs	r3, #10
 8013ae2:	e33e      	b.n	8014162 <mount_volume+0x702>
			}
			return FR_OK;				/* The filesystem object is already valid */
 8013ae4:	2300      	movs	r3, #0
 8013ae6:	e33c      	b.n	8014162 <mount_volume+0x702>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find an FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Invalidate the filesystem object */
 8013ae8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013aea:	2200      	movs	r2, #0
 8013aec:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 8013aee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013af0:	785b      	ldrb	r3, [r3, #1]
 8013af2:	4618      	mov	r0, r3
 8013af4:	f7fc fb7a 	bl	80101ec <disk_initialize>
 8013af8:	4603      	mov	r3, r0
 8013afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8013afe:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8013b02:	f003 0301 	and.w	r3, r3, #1
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d001      	beq.n	8013b0e <mount_volume+0xae>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8013b0a:	2303      	movs	r3, #3
 8013b0c:	e329      	b.n	8014162 <mount_volume+0x702>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8013b0e:	7dfb      	ldrb	r3, [r7, #23]
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d007      	beq.n	8013b24 <mount_volume+0xc4>
 8013b14:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8013b18:	f003 0304 	and.w	r3, r3, #4
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d001      	beq.n	8013b24 <mount_volume+0xc4>
		return FR_WRITE_PROTECTED;
 8013b20:	230a      	movs	r3, #10
 8013b22:	e31e      	b.n	8014162 <mount_volume+0x702>
	}
#if FF_MAX_SS != FF_MIN_SS				/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8013b24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013b26:	7858      	ldrb	r0, [r3, #1]
 8013b28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013b2a:	330c      	adds	r3, #12
 8013b2c:	461a      	mov	r2, r3
 8013b2e:	2102      	movs	r1, #2
 8013b30:	f7fc fbc4 	bl	80102bc <disk_ioctl>
 8013b34:	4603      	mov	r3, r0
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d001      	beq.n	8013b3e <mount_volume+0xde>
 8013b3a:	2301      	movs	r3, #1
 8013b3c:	e311      	b.n	8014162 <mount_volume+0x702>
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8013b3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013b40:	899b      	ldrh	r3, [r3, #12]
 8013b42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013b46:	d80d      	bhi.n	8013b64 <mount_volume+0x104>
 8013b48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013b4a:	899b      	ldrh	r3, [r3, #12]
 8013b4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013b50:	d308      	bcc.n	8013b64 <mount_volume+0x104>
 8013b52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013b54:	899b      	ldrh	r3, [r3, #12]
 8013b56:	461a      	mov	r2, r3
 8013b58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013b5a:	899b      	ldrh	r3, [r3, #12]
 8013b5c:	3b01      	subs	r3, #1
 8013b5e:	4013      	ands	r3, r2
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d001      	beq.n	8013b68 <mount_volume+0x108>
 8013b64:	2301      	movs	r3, #1
 8013b66:	e2fc      	b.n	8014162 <mount_volume+0x702>
#endif

	/* Find an FAT volume on the hosting drive */
	fmt = find_volume(fs, LD2PT(vol));
 8013b68:	2100      	movs	r1, #0
 8013b6a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8013b6c:	f7ff ff18 	bl	80139a0 <find_volume>
 8013b70:	65b8      	str	r0, [r7, #88]	@ 0x58
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 8013b72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013b74:	2b04      	cmp	r3, #4
 8013b76:	d101      	bne.n	8013b7c <mount_volume+0x11c>
 8013b78:	2301      	movs	r3, #1
 8013b7a:	e2f2      	b.n	8014162 <mount_volume+0x702>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8013b7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013b7e:	2b01      	cmp	r3, #1
 8013b80:	d901      	bls.n	8013b86 <mount_volume+0x126>
 8013b82:	230d      	movs	r3, #13
 8013b84:	e2ed      	b.n	8014162 <mount_volume+0x702>
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 8013b86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c

	/* An FAT volume is found (bsect). Following code initializes the filesystem object */

#if FF_FS_EXFAT
	if (fmt == 1) {
 8013b8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013b8e:	2b01      	cmp	r3, #1
 8013b90:	f040 8155 	bne.w	8013e3e <mount_volume+0x3de>
		QWORD maxlba;
		DWORD so, cv, bcl, i;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 8013b94:	230b      	movs	r3, #11
 8013b96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013b98:	e002      	b.n	8013ba0 <mount_volume+0x140>
 8013b9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013b9c:	3301      	adds	r3, #1
 8013b9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013ba0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013ba2:	2b3f      	cmp	r3, #63	@ 0x3f
 8013ba4:	d806      	bhi.n	8013bb4 <mount_volume+0x154>
 8013ba6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013ba8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013baa:	4413      	add	r3, r2
 8013bac:	3350      	adds	r3, #80	@ 0x50
 8013bae:	781b      	ldrb	r3, [r3, #0]
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d0f2      	beq.n	8013b9a <mount_volume+0x13a>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 8013bb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013bb6:	2b3f      	cmp	r3, #63	@ 0x3f
 8013bb8:	d801      	bhi.n	8013bbe <mount_volume+0x15e>
 8013bba:	230d      	movs	r3, #13
 8013bbc:	e2d1      	b.n	8014162 <mount_volume+0x702>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
 8013bbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013bc0:	3350      	adds	r3, #80	@ 0x50
 8013bc2:	3368      	adds	r3, #104	@ 0x68
 8013bc4:	4618      	mov	r0, r3
 8013bc6:	f7fc fb9f 	bl	8010308 <ld_word>
 8013bca:	4603      	mov	r3, r0
 8013bcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013bd0:	d001      	beq.n	8013bd6 <mount_volume+0x176>
 8013bd2:	230d      	movs	r3, #13
 8013bd4:	e2c5      	b.n	8014162 <mount_volume+0x702>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 8013bd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013bd8:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 8013bdc:	461a      	mov	r2, r3
 8013bde:	2301      	movs	r3, #1
 8013be0:	4093      	lsls	r3, r2
 8013be2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013be4:	8992      	ldrh	r2, [r2, #12]
 8013be6:	4293      	cmp	r3, r2
 8013be8:	d001      	beq.n	8013bee <mount_volume+0x18e>
			return FR_NO_FILESYSTEM;
 8013bea:	230d      	movs	r3, #13
 8013bec:	e2b9      	b.n	8014162 <mount_volume+0x702>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA of the volume + 1 */
 8013bee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013bf0:	3350      	adds	r3, #80	@ 0x50
 8013bf2:	3348      	adds	r3, #72	@ 0x48
 8013bf4:	4618      	mov	r0, r3
 8013bf6:	f7fc fbc2 	bl	801037e <ld_qword>
 8013bfa:	4602      	mov	r2, r0
 8013bfc:	460b      	mov	r3, r1
 8013bfe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8013c00:	2000      	movs	r0, #0
 8013c02:	60b9      	str	r1, [r7, #8]
 8013c04:	60f8      	str	r0, [r7, #12]
 8013c06:	68b9      	ldr	r1, [r7, #8]
 8013c08:	1851      	adds	r1, r2, r1
 8013c0a:	6039      	str	r1, [r7, #0]
 8013c0c:	68f9      	ldr	r1, [r7, #12]
 8013c0e:	eb43 0101 	adc.w	r1, r3, r1
 8013c12:	6079      	str	r1, [r7, #4]
 8013c14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013c18:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		if (!FF_LBA64 && maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be accessed in 32-bit LBA) */
 8013c1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8013c20:	2b01      	cmp	r3, #1
 8013c22:	d301      	bcc.n	8013c28 <mount_volume+0x1c8>
 8013c24:	230d      	movs	r3, #13
 8013c26:	e29c      	b.n	8014162 <mount_volume+0x702>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 8013c28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013c2a:	3350      	adds	r3, #80	@ 0x50
 8013c2c:	3354      	adds	r3, #84	@ 0x54
 8013c2e:	4618      	mov	r0, r3
 8013c30:	f7fc fb82 	bl	8010338 <ld_dword>
 8013c34:	4602      	mov	r2, r0
 8013c36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013c38:	635a      	str	r2, [r3, #52]	@ 0x34

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 8013c3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013c3c:	f893 20be 	ldrb.w	r2, [r3, #190]	@ 0xbe
 8013c40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013c42:	70da      	strb	r2, [r3, #3]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8013c44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013c46:	78db      	ldrb	r3, [r3, #3]
 8013c48:	2b01      	cmp	r3, #1
 8013c4a:	d001      	beq.n	8013c50 <mount_volume+0x1f0>
 8013c4c:	230d      	movs	r3, #13
 8013c4e:	e288      	b.n	8014162 <mount_volume+0x702>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 8013c50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013c52:	f893 30bd 	ldrb.w	r3, [r3, #189]	@ 0xbd
 8013c56:	461a      	mov	r2, r3
 8013c58:	2301      	movs	r3, #1
 8013c5a:	4093      	lsls	r3, r2
 8013c5c:	b29a      	uxth	r2, r3
 8013c5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013c60:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768 sectors) */
 8013c62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013c64:	895b      	ldrh	r3, [r3, #10]
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d101      	bne.n	8013c6e <mount_volume+0x20e>
 8013c6a:	230d      	movs	r3, #13
 8013c6c:	e279      	b.n	8014162 <mount_volume+0x702>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 8013c6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013c70:	3350      	adds	r3, #80	@ 0x50
 8013c72:	335c      	adds	r3, #92	@ 0x5c
 8013c74:	4618      	mov	r0, r3
 8013c76:	f7fc fb5f 	bl	8010338 <ld_dword>
 8013c7a:	6338      	str	r0, [r7, #48]	@ 0x30
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8013c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c7e:	4a2a      	ldr	r2, [pc, #168]	@ (8013d28 <mount_volume+0x2c8>)
 8013c80:	4293      	cmp	r3, r2
 8013c82:	d901      	bls.n	8013c88 <mount_volume+0x228>
 8013c84:	230d      	movs	r3, #13
 8013c86:	e26c      	b.n	8014162 <mount_volume+0x702>
		fs->n_fatent = nclst + 2;
 8013c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c8a:	1c9a      	adds	r2, r3, #2
 8013c8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013c8e:	631a      	str	r2, [r3, #48]	@ 0x30

		/* Boundaries and Limits */
		fs->volbase = bsect;
 8013c90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013c92:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8013c94:	639a      	str	r2, [r3, #56]	@ 0x38
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 8013c96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013c98:	3350      	adds	r3, #80	@ 0x50
 8013c9a:	3358      	adds	r3, #88	@ 0x58
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	f7fc fb4b 	bl	8010338 <ld_dword>
 8013ca2:	4602      	mov	r2, r0
 8013ca4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013ca6:	441a      	add	r2, r3
 8013ca8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013caa:	645a      	str	r2, [r3, #68]	@ 0x44
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8013cac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013cae:	3350      	adds	r3, #80	@ 0x50
 8013cb0:	3350      	adds	r3, #80	@ 0x50
 8013cb2:	4618      	mov	r0, r3
 8013cb4:	f7fc fb40 	bl	8010338 <ld_dword>
 8013cb8:	4602      	mov	r2, r0
 8013cba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013cbc:	441a      	add	r2, r3
 8013cbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013cc0:	63da      	str	r2, [r3, #60]	@ 0x3c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size required) */
 8013cc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013cc6:	2200      	movs	r2, #0
 8013cc8:	469a      	mov	sl, r3
 8013cca:	4693      	mov	fp, r2
 8013ccc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013cce:	895b      	ldrh	r3, [r3, #10]
 8013cd0:	461a      	mov	r2, r3
 8013cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013cd4:	fb02 f303 	mul.w	r3, r2, r3
 8013cd8:	2200      	movs	r2, #0
 8013cda:	4698      	mov	r8, r3
 8013cdc:	4691      	mov	r9, r2
 8013cde:	eb1a 0408 	adds.w	r4, sl, r8
 8013ce2:	eb4b 0509 	adc.w	r5, fp, r9
 8013ce6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8013cea:	42a2      	cmp	r2, r4
 8013cec:	41ab      	sbcs	r3, r5
 8013cee:	d201      	bcs.n	8013cf4 <mount_volume+0x294>
 8013cf0:	230d      	movs	r3, #13
 8013cf2:	e236      	b.n	8014162 <mount_volume+0x702>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 8013cf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013cf6:	3350      	adds	r3, #80	@ 0x50
 8013cf8:	3360      	adds	r3, #96	@ 0x60
 8013cfa:	4618      	mov	r0, r3
 8013cfc:	f7fc fb1c 	bl	8010338 <ld_dword>
 8013d00:	4602      	mov	r2, r0
 8013d02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013d04:	641a      	str	r2, [r3, #64]	@ 0x40

		/* Get bitmap location and check if it is contiguous (implementation assumption) */
		so = i = 0;
 8013d06:	2300      	movs	r3, #0
 8013d08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013d0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013d0c:	657b      	str	r3, [r7, #84]	@ 0x54
		for (;;) {	/* Find the bitmap entry in the root directory (in only first cluster) */
			if (i == 0) {
 8013d0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d120      	bne.n	8013d56 <mount_volume+0x2f6>
				if (so >= fs->csize) return FR_NO_FILESYSTEM;	/* Not found? */
 8013d14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013d16:	895b      	ldrh	r3, [r3, #10]
 8013d18:	461a      	mov	r2, r3
 8013d1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d1c:	4293      	cmp	r3, r2
 8013d1e:	d305      	bcc.n	8013d2c <mount_volume+0x2cc>
 8013d20:	230d      	movs	r3, #13
 8013d22:	e21e      	b.n	8014162 <mount_volume+0x702>
 8013d24:	240020e0 	.word	0x240020e0
 8013d28:	7ffffffd 	.word	0x7ffffffd
				if (move_window(fs, clst2sect(fs, (DWORD)fs->dirbase) + so) != FR_OK) return FR_DISK_ERR;
 8013d2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013d30:	4619      	mov	r1, r3
 8013d32:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8013d34:	f7fc ffb0 	bl	8010c98 <clst2sect>
 8013d38:	4602      	mov	r2, r0
 8013d3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d3c:	4413      	add	r3, r2
 8013d3e:	4619      	mov	r1, r3
 8013d40:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8013d42:	f7fc ff0d 	bl	8010b60 <move_window>
 8013d46:	4603      	mov	r3, r0
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d001      	beq.n	8013d50 <mount_volume+0x2f0>
 8013d4c:	2301      	movs	r3, #1
 8013d4e:	e208      	b.n	8014162 <mount_volume+0x702>
				so++;
 8013d50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d52:	3301      	adds	r3, #1
 8013d54:	657b      	str	r3, [r7, #84]	@ 0x54
			}
			if (fs->win[i] == ET_BITMAP) break;			/* Is it a bitmap entry? */
 8013d56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013d58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013d5a:	4413      	add	r3, r2
 8013d5c:	3350      	adds	r3, #80	@ 0x50
 8013d5e:	781b      	ldrb	r3, [r3, #0]
 8013d60:	2b81      	cmp	r3, #129	@ 0x81
 8013d62:	d00a      	beq.n	8013d7a <mount_volume+0x31a>
			i = (i + SZDIRE) % SS(fs);	/* Next entry */
 8013d64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013d66:	3320      	adds	r3, #32
 8013d68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013d6a:	8992      	ldrh	r2, [r2, #12]
 8013d6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8013d70:	fb01 f202 	mul.w	r2, r1, r2
 8013d74:	1a9b      	subs	r3, r3, r2
 8013d76:	64fb      	str	r3, [r7, #76]	@ 0x4c
			if (i == 0) {
 8013d78:	e7c9      	b.n	8013d0e <mount_volume+0x2ae>
			if (fs->win[i] == ET_BITMAP) break;			/* Is it a bitmap entry? */
 8013d7a:	bf00      	nop
		}
		bcl = ld_dword(fs->win + i + 20);				/* Bitmap cluster */
 8013d7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013d7e:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 8013d82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013d84:	3314      	adds	r3, #20
 8013d86:	4413      	add	r3, r2
 8013d88:	4618      	mov	r0, r3
 8013d8a:	f7fc fad5 	bl	8010338 <ld_dword>
 8013d8e:	6538      	str	r0, [r7, #80]	@ 0x50
		if (bcl < 2 || bcl >= fs->n_fatent) return FR_NO_FILESYSTEM;	/* (Wrong cluster#) */
 8013d90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013d92:	2b01      	cmp	r3, #1
 8013d94:	d904      	bls.n	8013da0 <mount_volume+0x340>
 8013d96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013d9a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013d9c:	429a      	cmp	r2, r3
 8013d9e:	d301      	bcc.n	8013da4 <mount_volume+0x344>
 8013da0:	230d      	movs	r3, #13
 8013da2:	e1de      	b.n	8014162 <mount_volume+0x702>
		fs->bitbase = fs->database + fs->csize * (bcl - 2);	/* Bitmap sector */
 8013da4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013da6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013da8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013daa:	895b      	ldrh	r3, [r3, #10]
 8013dac:	4619      	mov	r1, r3
 8013dae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013db0:	3b02      	subs	r3, #2
 8013db2:	fb01 f303 	mul.w	r3, r1, r3
 8013db6:	441a      	add	r2, r3
 8013db8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013dba:	649a      	str	r2, [r3, #72]	@ 0x48
		for (;;) {	/* Check if bitmap is contiguous */
			if (move_window(fs, fs->fatbase + bcl / (SS(fs) / 4)) != FR_OK) return FR_DISK_ERR;
 8013dbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013dbe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8013dc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013dc2:	899b      	ldrh	r3, [r3, #12]
 8013dc4:	089b      	lsrs	r3, r3, #2
 8013dc6:	b29b      	uxth	r3, r3
 8013dc8:	4619      	mov	r1, r3
 8013dca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013dcc:	fbb3 f3f1 	udiv	r3, r3, r1
 8013dd0:	4413      	add	r3, r2
 8013dd2:	4619      	mov	r1, r3
 8013dd4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8013dd6:	f7fc fec3 	bl	8010b60 <move_window>
 8013dda:	4603      	mov	r3, r0
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d001      	beq.n	8013de4 <mount_volume+0x384>
 8013de0:	2301      	movs	r3, #1
 8013de2:	e1be      	b.n	8014162 <mount_volume+0x702>
			cv = ld_dword(fs->win + bcl % (SS(fs) / 4) * 4);
 8013de4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013de6:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 8013dea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013dec:	899b      	ldrh	r3, [r3, #12]
 8013dee:	089b      	lsrs	r3, r3, #2
 8013df0:	b29b      	uxth	r3, r3
 8013df2:	461a      	mov	r2, r3
 8013df4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013df6:	fbb3 f0f2 	udiv	r0, r3, r2
 8013dfa:	fb00 f202 	mul.w	r2, r0, r2
 8013dfe:	1a9b      	subs	r3, r3, r2
 8013e00:	009b      	lsls	r3, r3, #2
 8013e02:	440b      	add	r3, r1
 8013e04:	4618      	mov	r0, r3
 8013e06:	f7fc fa97 	bl	8010338 <ld_dword>
 8013e0a:	6278      	str	r0, [r7, #36]	@ 0x24
			if (cv == 0xFFFFFFFF) break;				/* Last link? */
 8013e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e12:	d008      	beq.n	8013e26 <mount_volume+0x3c6>
			if (cv != ++bcl) return FR_NO_FILESYSTEM;	/* Fragmented bitmap? */
 8013e14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013e16:	3301      	adds	r3, #1
 8013e18:	653b      	str	r3, [r7, #80]	@ 0x50
 8013e1a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e1e:	429a      	cmp	r2, r3
 8013e20:	d0cc      	beq.n	8013dbc <mount_volume+0x35c>
 8013e22:	230d      	movs	r3, #13
 8013e24:	e19d      	b.n	8014162 <mount_volume+0x702>
			if (cv == 0xFFFFFFFF) break;				/* Last link? */
 8013e26:	bf00      	nop
		}

#if !FF_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013e28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8013e2e:	61da      	str	r2, [r3, #28]
 8013e30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013e32:	69da      	ldr	r2, [r3, #28]
 8013e34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013e36:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 8013e38:	2304      	movs	r3, #4
 8013e3a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013e3c:	e17c      	b.n	8014138 <mount_volume+0x6d8>
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8013e3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013e40:	3350      	adds	r3, #80	@ 0x50
 8013e42:	330b      	adds	r3, #11
 8013e44:	4618      	mov	r0, r3
 8013e46:	f7fc fa5f 	bl	8010308 <ld_word>
 8013e4a:	4603      	mov	r3, r0
 8013e4c:	461a      	mov	r2, r3
 8013e4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013e50:	899b      	ldrh	r3, [r3, #12]
 8013e52:	429a      	cmp	r2, r3
 8013e54:	d001      	beq.n	8013e5a <mount_volume+0x3fa>
 8013e56:	230d      	movs	r3, #13
 8013e58:	e183      	b.n	8014162 <mount_volume+0x702>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8013e5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013e5c:	3350      	adds	r3, #80	@ 0x50
 8013e5e:	3316      	adds	r3, #22
 8013e60:	4618      	mov	r0, r3
 8013e62:	f7fc fa51 	bl	8010308 <ld_word>
 8013e66:	4603      	mov	r3, r0
 8013e68:	663b      	str	r3, [r7, #96]	@ 0x60
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8013e6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d106      	bne.n	8013e7e <mount_volume+0x41e>
 8013e70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013e72:	3350      	adds	r3, #80	@ 0x50
 8013e74:	3324      	adds	r3, #36	@ 0x24
 8013e76:	4618      	mov	r0, r3
 8013e78:	f7fc fa5e 	bl	8010338 <ld_dword>
 8013e7c:	6638      	str	r0, [r7, #96]	@ 0x60
		fs->fsize = fasize;
 8013e7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013e80:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8013e82:	635a      	str	r2, [r3, #52]	@ 0x34

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8013e84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013e86:	f893 2060 	ldrb.w	r2, [r3, #96]	@ 0x60
 8013e8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013e8c:	70da      	strb	r2, [r3, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8013e8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013e90:	78db      	ldrb	r3, [r3, #3]
 8013e92:	2b01      	cmp	r3, #1
 8013e94:	d005      	beq.n	8013ea2 <mount_volume+0x442>
 8013e96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013e98:	78db      	ldrb	r3, [r3, #3]
 8013e9a:	2b02      	cmp	r3, #2
 8013e9c:	d001      	beq.n	8013ea2 <mount_volume+0x442>
 8013e9e:	230d      	movs	r3, #13
 8013ea0:	e15f      	b.n	8014162 <mount_volume+0x702>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8013ea2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013ea4:	78db      	ldrb	r3, [r3, #3]
 8013ea6:	461a      	mov	r2, r3
 8013ea8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013eaa:	fb02 f303 	mul.w	r3, r2, r3
 8013eae:	663b      	str	r3, [r7, #96]	@ 0x60

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8013eb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013eb2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8013eb6:	461a      	mov	r2, r3
 8013eb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013eba:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8013ebc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013ebe:	895b      	ldrh	r3, [r3, #10]
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d008      	beq.n	8013ed6 <mount_volume+0x476>
 8013ec4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013ec6:	895b      	ldrh	r3, [r3, #10]
 8013ec8:	461a      	mov	r2, r3
 8013eca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013ecc:	895b      	ldrh	r3, [r3, #10]
 8013ece:	3b01      	subs	r3, #1
 8013ed0:	4013      	ands	r3, r2
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d001      	beq.n	8013eda <mount_volume+0x47a>
 8013ed6:	230d      	movs	r3, #13
 8013ed8:	e143      	b.n	8014162 <mount_volume+0x702>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8013eda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013edc:	3350      	adds	r3, #80	@ 0x50
 8013ede:	3311      	adds	r3, #17
 8013ee0:	4618      	mov	r0, r3
 8013ee2:	f7fc fa11 	bl	8010308 <ld_word>
 8013ee6:	4603      	mov	r3, r0
 8013ee8:	461a      	mov	r2, r3
 8013eea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013eec:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8013eee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013ef0:	891b      	ldrh	r3, [r3, #8]
 8013ef2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013ef4:	8992      	ldrh	r2, [r2, #12]
 8013ef6:	0952      	lsrs	r2, r2, #5
 8013ef8:	b292      	uxth	r2, r2
 8013efa:	fbb3 f1f2 	udiv	r1, r3, r2
 8013efe:	fb01 f202 	mul.w	r2, r1, r2
 8013f02:	1a9b      	subs	r3, r3, r2
 8013f04:	b29b      	uxth	r3, r3
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d001      	beq.n	8013f0e <mount_volume+0x4ae>
 8013f0a:	230d      	movs	r3, #13
 8013f0c:	e129      	b.n	8014162 <mount_volume+0x702>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8013f0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013f10:	3350      	adds	r3, #80	@ 0x50
 8013f12:	3313      	adds	r3, #19
 8013f14:	4618      	mov	r0, r3
 8013f16:	f7fc f9f7 	bl	8010308 <ld_word>
 8013f1a:	4603      	mov	r3, r0
 8013f1c:	667b      	str	r3, [r7, #100]	@ 0x64
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8013f1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d106      	bne.n	8013f32 <mount_volume+0x4d2>
 8013f24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013f26:	3350      	adds	r3, #80	@ 0x50
 8013f28:	3320      	adds	r3, #32
 8013f2a:	4618      	mov	r0, r3
 8013f2c:	f7fc fa04 	bl	8010338 <ld_dword>
 8013f30:	6678      	str	r0, [r7, #100]	@ 0x64

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8013f32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013f34:	3350      	adds	r3, #80	@ 0x50
 8013f36:	330e      	adds	r3, #14
 8013f38:	4618      	mov	r0, r3
 8013f3a:	f7fc f9e5 	bl	8010308 <ld_word>
 8013f3e:	4603      	mov	r3, r0
 8013f40:	877b      	strh	r3, [r7, #58]	@ 0x3a
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8013f42:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d101      	bne.n	8013f4c <mount_volume+0x4ec>
 8013f48:	230d      	movs	r3, #13
 8013f4a:	e10a      	b.n	8014162 <mount_volume+0x702>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013f4c:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8013f4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013f50:	4413      	add	r3, r2
 8013f52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013f54:	8911      	ldrh	r1, [r2, #8]
 8013f56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013f58:	8992      	ldrh	r2, [r2, #12]
 8013f5a:	0952      	lsrs	r2, r2, #5
 8013f5c:	b292      	uxth	r2, r2
 8013f5e:	fbb1 f2f2 	udiv	r2, r1, r2
 8013f62:	b292      	uxth	r2, r2
 8013f64:	4413      	add	r3, r2
 8013f66:	637b      	str	r3, [r7, #52]	@ 0x34
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8013f68:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8013f6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013f6c:	429a      	cmp	r2, r3
 8013f6e:	d201      	bcs.n	8013f74 <mount_volume+0x514>
 8013f70:	230d      	movs	r3, #13
 8013f72:	e0f6      	b.n	8014162 <mount_volume+0x702>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8013f74:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8013f76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013f78:	1ad3      	subs	r3, r2, r3
 8013f7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013f7c:	8952      	ldrh	r2, [r2, #10]
 8013f7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8013f82:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8013f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d101      	bne.n	8013f8e <mount_volume+0x52e>
 8013f8a:	230d      	movs	r3, #13
 8013f8c:	e0e9      	b.n	8014162 <mount_volume+0x702>
		fmt = 0;
 8013f8e:	2300      	movs	r3, #0
 8013f90:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8013f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f94:	4a75      	ldr	r2, [pc, #468]	@ (801416c <mount_volume+0x70c>)
 8013f96:	4293      	cmp	r3, r2
 8013f98:	d801      	bhi.n	8013f9e <mount_volume+0x53e>
 8013f9a:	2303      	movs	r3, #3
 8013f9c:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fa0:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8013fa4:	4293      	cmp	r3, r2
 8013fa6:	d801      	bhi.n	8013fac <mount_volume+0x54c>
 8013fa8:	2302      	movs	r3, #2
 8013faa:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8013fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fae:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8013fb2:	4293      	cmp	r3, r2
 8013fb4:	d801      	bhi.n	8013fba <mount_volume+0x55a>
 8013fb6:	2301      	movs	r3, #1
 8013fb8:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (fmt == 0) return FR_NO_FILESYSTEM;
 8013fba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d101      	bne.n	8013fc4 <mount_volume+0x564>
 8013fc0:	230d      	movs	r3, #13
 8013fc2:	e0ce      	b.n	8014162 <mount_volume+0x702>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8013fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fc6:	1c9a      	adds	r2, r3, #2
 8013fc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013fca:	631a      	str	r2, [r3, #48]	@ 0x30
		fs->volbase = bsect;							/* Volume start sector */
 8013fcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013fce:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8013fd0:	639a      	str	r2, [r3, #56]	@ 0x38
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8013fd2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8013fd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013fd6:	441a      	add	r2, r3
 8013fd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013fda:	63da      	str	r2, [r3, #60]	@ 0x3c
		fs->database = bsect + sysect;					/* Data start sector */
 8013fdc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8013fde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013fe0:	441a      	add	r2, r3
 8013fe2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013fe4:	645a      	str	r2, [r3, #68]	@ 0x44
		if (fmt == FS_FAT32) {
 8013fe6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013fe8:	2b03      	cmp	r3, #3
 8013fea:	d11e      	bne.n	801402a <mount_volume+0x5ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8013fec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013fee:	3350      	adds	r3, #80	@ 0x50
 8013ff0:	332a      	adds	r3, #42	@ 0x2a
 8013ff2:	4618      	mov	r0, r3
 8013ff4:	f7fc f988 	bl	8010308 <ld_word>
 8013ff8:	4603      	mov	r3, r0
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d001      	beq.n	8014002 <mount_volume+0x5a2>
 8013ffe:	230d      	movs	r3, #13
 8014000:	e0af      	b.n	8014162 <mount_volume+0x702>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8014002:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014004:	891b      	ldrh	r3, [r3, #8]
 8014006:	2b00      	cmp	r3, #0
 8014008:	d001      	beq.n	801400e <mount_volume+0x5ae>
 801400a:	230d      	movs	r3, #13
 801400c:	e0a9      	b.n	8014162 <mount_volume+0x702>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801400e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014010:	3350      	adds	r3, #80	@ 0x50
 8014012:	332c      	adds	r3, #44	@ 0x2c
 8014014:	4618      	mov	r0, r3
 8014016:	f7fc f98f 	bl	8010338 <ld_dword>
 801401a:	4602      	mov	r2, r0
 801401c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801401e:	641a      	str	r2, [r3, #64]	@ 0x40
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8014020:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014024:	009b      	lsls	r3, r3, #2
 8014026:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014028:	e01e      	b.n	8014068 <mount_volume+0x608>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 801402a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801402c:	891b      	ldrh	r3, [r3, #8]
 801402e:	2b00      	cmp	r3, #0
 8014030:	d101      	bne.n	8014036 <mount_volume+0x5d6>
 8014032:	230d      	movs	r3, #13
 8014034:	e095      	b.n	8014162 <mount_volume+0x702>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8014036:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014038:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801403a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801403c:	441a      	add	r2, r3
 801403e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014040:	641a      	str	r2, [r3, #64]	@ 0x40
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8014042:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014044:	2b02      	cmp	r3, #2
 8014046:	d103      	bne.n	8014050 <mount_volume+0x5f0>
 8014048:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801404a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801404c:	005b      	lsls	r3, r3, #1
 801404e:	e00a      	b.n	8014066 <mount_volume+0x606>
 8014050:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014052:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8014054:	4613      	mov	r3, r2
 8014056:	005b      	lsls	r3, r3, #1
 8014058:	4413      	add	r3, r2
 801405a:	085a      	lsrs	r2, r3, #1
 801405c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801405e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014060:	f003 0301 	and.w	r3, r3, #1
 8014064:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8014066:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8014068:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801406a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801406c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801406e:	899b      	ldrh	r3, [r3, #12]
 8014070:	4619      	mov	r1, r3
 8014072:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014074:	440b      	add	r3, r1
 8014076:	3b01      	subs	r3, #1
 8014078:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801407a:	8989      	ldrh	r1, [r1, #12]
 801407c:	fbb3 f3f1 	udiv	r3, r3, r1
 8014080:	429a      	cmp	r2, r3
 8014082:	d201      	bcs.n	8014088 <mount_volume+0x628>
 8014084:	230d      	movs	r3, #13
 8014086:	e06c      	b.n	8014162 <mount_volume+0x702>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8014088:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801408a:	f04f 32ff 	mov.w	r2, #4294967295
 801408e:	61da      	str	r2, [r3, #28]
 8014090:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014092:	69da      	ldr	r2, [r3, #28]
 8014094:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014096:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 8014098:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801409a:	2280      	movs	r2, #128	@ 0x80
 801409c:	715a      	strb	r2, [r3, #5]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 801409e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80140a0:	2b03      	cmp	r3, #3
 80140a2:	d149      	bne.n	8014138 <mount_volume+0x6d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80140a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80140a6:	3350      	adds	r3, #80	@ 0x50
 80140a8:	3330      	adds	r3, #48	@ 0x30
 80140aa:	4618      	mov	r0, r3
 80140ac:	f7fc f92c 	bl	8010308 <ld_word>
 80140b0:	4603      	mov	r3, r0
 80140b2:	2b01      	cmp	r3, #1
 80140b4:	d140      	bne.n	8014138 <mount_volume+0x6d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80140b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80140b8:	3301      	adds	r3, #1
 80140ba:	4619      	mov	r1, r3
 80140bc:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80140be:	f7fc fd4f 	bl	8010b60 <move_window>
 80140c2:	4603      	mov	r3, r0
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d137      	bne.n	8014138 <mount_volume+0x6d8>
		{
			fs->fsi_flag = 0;
 80140c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80140ca:	2200      	movs	r2, #0
 80140cc:	715a      	strb	r2, [r3, #5]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 80140ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80140d0:	3350      	adds	r3, #80	@ 0x50
 80140d2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80140d6:	4618      	mov	r0, r3
 80140d8:	f7fc f916 	bl	8010308 <ld_word>
 80140dc:	4603      	mov	r3, r0
 80140de:	461a      	mov	r2, r3
 80140e0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80140e4:	429a      	cmp	r2, r3
 80140e6:	d127      	bne.n	8014138 <mount_volume+0x6d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80140e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80140ea:	3350      	adds	r3, #80	@ 0x50
 80140ec:	4618      	mov	r0, r3
 80140ee:	f7fc f923 	bl	8010338 <ld_dword>
 80140f2:	4603      	mov	r3, r0
 80140f4:	4a1e      	ldr	r2, [pc, #120]	@ (8014170 <mount_volume+0x710>)
 80140f6:	4293      	cmp	r3, r2
 80140f8:	d11e      	bne.n	8014138 <mount_volume+0x6d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80140fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80140fc:	3350      	adds	r3, #80	@ 0x50
 80140fe:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8014102:	4618      	mov	r0, r3
 8014104:	f7fc f918 	bl	8010338 <ld_dword>
 8014108:	4603      	mov	r3, r0
 801410a:	4a1a      	ldr	r2, [pc, #104]	@ (8014174 <mount_volume+0x714>)
 801410c:	4293      	cmp	r3, r2
 801410e:	d113      	bne.n	8014138 <mount_volume+0x6d8>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8014110:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014112:	3350      	adds	r3, #80	@ 0x50
 8014114:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8014118:	4618      	mov	r0, r3
 801411a:	f7fc f90d 	bl	8010338 <ld_dword>
 801411e:	4602      	mov	r2, r0
 8014120:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014122:	61da      	str	r2, [r3, #28]
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8014124:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014126:	3350      	adds	r3, #80	@ 0x50
 8014128:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801412c:	4618      	mov	r0, r3
 801412e:	f7fc f903 	bl	8010338 <ld_dword>
 8014132:	4602      	mov	r2, r0
 8014134:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014136:	619a      	str	r2, [r3, #24]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
 8014138:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801413a:	b2da      	uxtb	r2, r3
 801413c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801413e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 8014140:	4b0d      	ldr	r3, [pc, #52]	@ (8014178 <mount_volume+0x718>)
 8014142:	881b      	ldrh	r3, [r3, #0]
 8014144:	3301      	adds	r3, #1
 8014146:	b29a      	uxth	r2, r3
 8014148:	4b0b      	ldr	r3, [pc, #44]	@ (8014178 <mount_volume+0x718>)
 801414a:	801a      	strh	r2, [r3, #0]
 801414c:	4b0a      	ldr	r3, [pc, #40]	@ (8014178 <mount_volume+0x718>)
 801414e:	881a      	ldrh	r2, [r3, #0]
 8014150:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014152:	80da      	strh	r2, [r3, #6]
#if FF_FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if FF_FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8014154:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014156:	2200      	movs	r2, #0
 8014158:	621a      	str	r2, [r3, #32]
#endif
#if FF_FS_LOCK				/* Clear file lock semaphores */
	clear_share(fs);
 801415a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801415c:	f7fc fca0 	bl	8010aa0 <clear_share>
#endif
	return FR_OK;
 8014160:	2300      	movs	r3, #0
}
 8014162:	4618      	mov	r0, r3
 8014164:	3768      	adds	r7, #104	@ 0x68
 8014166:	46bd      	mov	sp, r7
 8014168:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801416c:	0ffffff5 	.word	0x0ffffff5
 8014170:	41615252 	.word	0x41615252
 8014174:	61417272 	.word	0x61417272
 8014178:	240020e8 	.word	0x240020e8

0801417c <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR structure, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 801417c:	b580      	push	{r7, lr}
 801417e:	b084      	sub	sp, #16
 8014180:	af00      	add	r7, sp, #0
 8014182:	6078      	str	r0, [r7, #4]
 8014184:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8014186:	2309      	movs	r3, #9
 8014188:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	2b00      	cmp	r3, #0
 801418e:	d01c      	beq.n	80141ca <validate+0x4e>
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	2b00      	cmp	r3, #0
 8014196:	d018      	beq.n	80141ca <validate+0x4e>
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	781b      	ldrb	r3, [r3, #0]
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d013      	beq.n	80141ca <validate+0x4e>
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	889a      	ldrh	r2, [r3, #4]
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	681b      	ldr	r3, [r3, #0]
 80141aa:	88db      	ldrh	r3, [r3, #6]
 80141ac:	429a      	cmp	r2, r3
 80141ae:	d10c      	bne.n	80141ca <validate+0x4e>
			}
		} else {	/* Could not take */
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	785b      	ldrb	r3, [r3, #1]
 80141b6:	4618      	mov	r0, r3
 80141b8:	f7fb fffe 	bl	80101b8 <disk_status>
 80141bc:	4603      	mov	r3, r0
 80141be:	f003 0301 	and.w	r3, r3, #1
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d101      	bne.n	80141ca <validate+0x4e>
			res = FR_OK;
 80141c6:	2300      	movs	r3, #0
 80141c8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 80141ca:	7bfb      	ldrb	r3, [r7, #15]
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d102      	bne.n	80141d6 <validate+0x5a>
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	e000      	b.n	80141d8 <validate+0x5c>
 80141d6:	2300      	movs	r3, #0
 80141d8:	683a      	ldr	r2, [r7, #0]
 80141da:	6013      	str	r3, [r2, #0]
	return res;
 80141dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80141de:	4618      	mov	r0, r3
 80141e0:	3710      	adds	r7, #16
 80141e2:	46bd      	mov	sp, r7
 80141e4:	bd80      	pop	{r7, pc}
	...

080141e8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 80141e8:	b580      	push	{r7, lr}
 80141ea:	b088      	sub	sp, #32
 80141ec:	af00      	add	r7, sp, #0
 80141ee:	60f8      	str	r0, [r7, #12]
 80141f0:	60b9      	str	r1, [r7, #8]
 80141f2:	4613      	mov	r3, r2
 80141f4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80141f6:	68bb      	ldr	r3, [r7, #8]
 80141f8:	613b      	str	r3, [r7, #16]


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
 80141fa:	f107 0310 	add.w	r3, r7, #16
 80141fe:	4618      	mov	r0, r3
 8014200:	f7ff face 	bl	80137a0 <get_ldnumber>
 8014204:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8014206:	69fb      	ldr	r3, [r7, #28]
 8014208:	2b00      	cmp	r3, #0
 801420a:	da01      	bge.n	8014210 <f_mount+0x28>
 801420c:	230b      	movs	r3, #11
 801420e:	e031      	b.n	8014274 <f_mount+0x8c>
	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
 8014210:	4a1a      	ldr	r2, [pc, #104]	@ (801427c <f_mount+0x94>)
 8014212:	69fb      	ldr	r3, [r7, #28]
 8014214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014218:	61bb      	str	r3, [r7, #24]

	if (cfs) {					/* Unregister current filesystem object if regsitered */
 801421a:	69bb      	ldr	r3, [r7, #24]
 801421c:	2b00      	cmp	r3, #0
 801421e:	d00a      	beq.n	8014236 <f_mount+0x4e>
		FatFs[vol] = 0;
 8014220:	4a16      	ldr	r2, [pc, #88]	@ (801427c <f_mount+0x94>)
 8014222:	69fb      	ldr	r3, [r7, #28]
 8014224:	2100      	movs	r1, #0
 8014226:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
#if FF_FS_LOCK
		clear_share(cfs);
 801422a:	69b8      	ldr	r0, [r7, #24]
 801422c:	f7fc fc38 	bl	8010aa0 <clear_share>
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
 8014230:	69bb      	ldr	r3, [r7, #24]
 8014232:	2200      	movs	r2, #0
 8014234:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {					/* Register new filesystem object */
 8014236:	68fb      	ldr	r3, [r7, #12]
 8014238:	2b00      	cmp	r3, #0
 801423a:	d00b      	beq.n	8014254 <f_mount+0x6c>
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
 801423c:	68fb      	ldr	r3, [r7, #12]
 801423e:	69fa      	ldr	r2, [r7, #28]
 8014240:	b2d2      	uxtb	r2, r2
 8014242:	705a      	strb	r2, [r3, #1]
			}
			SysLock = 1;		/* System mutex is ready */
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 8014244:	68fb      	ldr	r3, [r7, #12]
 8014246:	2200      	movs	r2, #0
 8014248:	701a      	strb	r2, [r3, #0]
		FatFs[vol] = fs;		/* Register new fs object */
 801424a:	68fa      	ldr	r2, [r7, #12]
 801424c:	490b      	ldr	r1, [pc, #44]	@ (801427c <f_mount+0x94>)
 801424e:	69fb      	ldr	r3, [r7, #28]
 8014250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
 8014254:	79fb      	ldrb	r3, [r7, #7]
 8014256:	2b00      	cmp	r3, #0
 8014258:	d101      	bne.n	801425e <f_mount+0x76>
 801425a:	2300      	movs	r3, #0
 801425c:	e00a      	b.n	8014274 <f_mount+0x8c>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 801425e:	f107 010c 	add.w	r1, r7, #12
 8014262:	f107 0308 	add.w	r3, r7, #8
 8014266:	2200      	movs	r2, #0
 8014268:	4618      	mov	r0, r3
 801426a:	f7ff fbf9 	bl	8013a60 <mount_volume>
 801426e:	4603      	mov	r3, r0
 8014270:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8014272:	7dfb      	ldrb	r3, [r7, #23]
}
 8014274:	4618      	mov	r0, r3
 8014276:	3720      	adds	r7, #32
 8014278:	46bd      	mov	sp, r7
 801427a:	bd80      	pop	{r7, pc}
 801427c:	240020e0 	.word	0x240020e0

08014280 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and open mode flags */
)
{
 8014280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014284:	f2ad 5d04 	subw	sp, sp, #1284	@ 0x504
 8014288:	af00      	add	r7, sp, #0
 801428a:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 801428e:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8014292:	6018      	str	r0, [r3, #0]
 8014294:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 8014298:	f5a3 639c 	sub.w	r3, r3, #1248	@ 0x4e0
 801429c:	6019      	str	r1, [r3, #0]
 801429e:	4611      	mov	r1, r2
 80142a0:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 80142a4:	f2a3 42e1 	subw	r2, r3, #1249	@ 0x4e1
 80142a8:	460b      	mov	r3, r1
 80142aa:	7013      	strb	r3, [r2, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80142ac:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 80142b0:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d101      	bne.n	80142be <f_open+0x3e>
 80142ba:	2309      	movs	r3, #9
 80142bc:	e38d      	b.n	80149da <f_open+0x75a>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 80142be:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 80142c2:	f2a3 42e1 	subw	r2, r3, #1249	@ 0x4e1
 80142c6:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 80142ca:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 80142ce:	781b      	ldrb	r3, [r3, #0]
 80142d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80142d4:	7013      	strb	r3, [r2, #0]
	res = mount_volume(&path, &fs, mode);
 80142d6:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 80142da:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 80142de:	781b      	ldrb	r3, [r3, #0]
 80142e0:	f207 418c 	addw	r1, r7, #1164	@ 0x48c
 80142e4:	f107 0020 	add.w	r0, r7, #32
 80142e8:	461a      	mov	r2, r3
 80142ea:	f7ff fbb9 	bl	8013a60 <mount_volume>
 80142ee:	4603      	mov	r3, r0
 80142f0:	f887 34ff 	strb.w	r3, [r7, #1279]	@ 0x4ff
	if (res == FR_OK) {
 80142f4:	f897 34ff 	ldrb.w	r3, [r7, #1279]	@ 0x4ff
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	f040 8361 	bne.w	80149c0 <f_open+0x740>
		dj.obj.fs = fs;
 80142fe:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 8014302:	f8c7 3490 	str.w	r3, [r7, #1168]	@ 0x490
		INIT_NAMBUF(fs);
 8014306:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 801430a:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 801430e:	611a      	str	r2, [r3, #16]
 8014310:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 8014314:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8014318:	615a      	str	r2, [r3, #20]
		res = follow_path(&dj, path);	/* Follow the file path */
 801431a:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 801431e:	f5a3 639c 	sub.w	r3, r3, #1248	@ 0x4e0
 8014322:	681b      	ldr	r3, [r3, #0]
 8014324:	f507 6292 	add.w	r2, r7, #1168	@ 0x490
 8014328:	4619      	mov	r1, r3
 801432a:	4610      	mov	r0, r2
 801432c:	f7ff f93a 	bl	80135a4 <follow_path>
 8014330:	4603      	mov	r3, r0
 8014332:	f887 34ff 	strb.w	r3, [r7, #1279]	@ 0x4ff
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 8014336:	f897 34ff 	ldrb.w	r3, [r7, #1279]	@ 0x4ff
 801433a:	2b00      	cmp	r3, #0
 801433c:	d11c      	bne.n	8014378 <f_open+0xf8>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801433e:	f897 34db 	ldrb.w	r3, [r7, #1243]	@ 0x4db
 8014342:	b25b      	sxtb	r3, r3
 8014344:	2b00      	cmp	r3, #0
 8014346:	da03      	bge.n	8014350 <f_open+0xd0>
				res = FR_INVALID_NAME;
 8014348:	2306      	movs	r3, #6
 801434a:	f887 34ff 	strb.w	r3, [r7, #1279]	@ 0x4ff
 801434e:	e013      	b.n	8014378 <f_open+0xf8>
			}
#if FF_FS_LOCK
			else {
				res = chk_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Check if the file can be used */
 8014350:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 8014354:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 8014358:	781b      	ldrb	r3, [r3, #0]
 801435a:	2b01      	cmp	r3, #1
 801435c:	bf8c      	ite	hi
 801435e:	2301      	movhi	r3, #1
 8014360:	2300      	movls	r3, #0
 8014362:	b2db      	uxtb	r3, r3
 8014364:	461a      	mov	r2, r3
 8014366:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 801436a:	4611      	mov	r1, r2
 801436c:	4618      	mov	r0, r3
 801436e:	f7fc fa4f 	bl	8010810 <chk_share>
 8014372:	4603      	mov	r3, r0
 8014374:	f887 34ff 	strb.w	r3, [r7, #1279]	@ 0x4ff
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8014378:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 801437c:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 8014380:	781b      	ldrb	r3, [r3, #0]
 8014382:	f003 031c 	and.w	r3, r3, #28
 8014386:	2b00      	cmp	r3, #0
 8014388:	f000 811f 	beq.w	80145ca <f_open+0x34a>
			if (res != FR_OK) {					/* No file, create new */
 801438c:	f897 34ff 	ldrb.w	r3, [r7, #1279]	@ 0x4ff
 8014390:	2b00      	cmp	r3, #0
 8014392:	d01f      	beq.n	80143d4 <f_open+0x154>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8014394:	f897 34ff 	ldrb.w	r3, [r7, #1279]	@ 0x4ff
 8014398:	2b04      	cmp	r3, #4
 801439a:	d10e      	bne.n	80143ba <f_open+0x13a>
#if FF_FS_LOCK
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801439c:	f7fc fa94 	bl	80108c8 <enq_share>
 80143a0:	4603      	mov	r3, r0
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d006      	beq.n	80143b4 <f_open+0x134>
 80143a6:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 80143aa:	4618      	mov	r0, r3
 80143ac:	f7fe fb54 	bl	8012a58 <dir_register>
 80143b0:	4603      	mov	r3, r0
 80143b2:	e000      	b.n	80143b6 <f_open+0x136>
 80143b4:	2312      	movs	r3, #18
 80143b6:	f887 34ff 	strb.w	r3, [r7, #1279]	@ 0x4ff
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80143ba:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 80143be:	f2a3 42e1 	subw	r2, r3, #1249	@ 0x4e1
 80143c2:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 80143c6:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 80143ca:	781b      	ldrb	r3, [r3, #0]
 80143cc:	f043 0308 	orr.w	r3, r3, #8
 80143d0:	7013      	strb	r3, [r2, #0]
 80143d2:	e015      	b.n	8014400 <f_open+0x180>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80143d4:	f897 3496 	ldrb.w	r3, [r7, #1174]	@ 0x496
 80143d8:	f003 0311 	and.w	r3, r3, #17
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d003      	beq.n	80143e8 <f_open+0x168>
					res = FR_DENIED;
 80143e0:	2307      	movs	r3, #7
 80143e2:	f887 34ff 	strb.w	r3, [r7, #1279]	@ 0x4ff
 80143e6:	e00b      	b.n	8014400 <f_open+0x180>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80143e8:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 80143ec:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 80143f0:	781b      	ldrb	r3, [r3, #0]
 80143f2:	f003 0304 	and.w	r3, r3, #4
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d002      	beq.n	8014400 <f_open+0x180>
 80143fa:	2308      	movs	r3, #8
 80143fc:	f887 34ff 	strb.w	r3, [r7, #1279]	@ 0x4ff
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8014400:	f897 34ff 	ldrb.w	r3, [r7, #1279]	@ 0x4ff
 8014404:	2b00      	cmp	r3, #0
 8014406:	f040 8100 	bne.w	801460a <f_open+0x38a>
 801440a:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 801440e:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 8014412:	781b      	ldrb	r3, [r3, #0]
 8014414:	f003 0308 	and.w	r3, r3, #8
 8014418:	2b00      	cmp	r3, #0
 801441a:	f000 80f6 	beq.w	801460a <f_open+0x38a>
#if FF_FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 801441e:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 8014422:	781b      	ldrb	r3, [r3, #0]
 8014424:	2b04      	cmp	r3, #4
 8014426:	d170      	bne.n	801450a <f_open+0x28a>
					/* Get current allocation info */
					fp->obj.fs = fs;
 8014428:	f8d7 248c 	ldr.w	r2, [r7, #1164]	@ 0x48c
 801442c:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 8014430:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8014434:	681b      	ldr	r3, [r3, #0]
 8014436:	601a      	str	r2, [r3, #0]
					init_alloc_info(fs, &fp->obj);
 8014438:	f8d7 248c 	ldr.w	r2, [r7, #1164]	@ 0x48c
 801443c:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 8014440:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8014444:	681b      	ldr	r3, [r3, #0]
 8014446:	4619      	mov	r1, r3
 8014448:	4610      	mov	r0, r2
 801444a:	f7fd ffe7 	bl	801241c <init_alloc_info>
					/* Set directory entry block initial state */
					memset(fs->dirbuf + 2, 0, 30);	/* Clear 85 entry except for NumSec */
 801444e:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 8014452:	695b      	ldr	r3, [r3, #20]
 8014454:	3302      	adds	r3, #2
 8014456:	221e      	movs	r2, #30
 8014458:	2100      	movs	r1, #0
 801445a:	4618      	mov	r0, r3
 801445c:	f004 f930 	bl	80186c0 <memset>
					memset(fs->dirbuf + 38, 0, 26);	/* Clear C0 entry except for NumName and NameHash */
 8014460:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 8014464:	695b      	ldr	r3, [r3, #20]
 8014466:	3326      	adds	r3, #38	@ 0x26
 8014468:	221a      	movs	r2, #26
 801446a:	2100      	movs	r1, #0
 801446c:	4618      	mov	r0, r3
 801446e:	f004 f927 	bl	80186c0 <memset>
					fs->dirbuf[XDIR_Attr] = AM_ARC;
 8014472:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 8014476:	695b      	ldr	r3, [r3, #20]
 8014478:	1d1a      	adds	r2, r3, #4
 801447a:	2320      	movs	r3, #32
 801447c:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_CrtTime, GET_FATTIME());
 801447e:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 8014482:	695b      	ldr	r3, [r3, #20]
 8014484:	f103 0408 	add.w	r4, r3, #8
 8014488:	f7fb ff36 	bl	80102f8 <get_fattime>
 801448c:	4603      	mov	r3, r0
 801448e:	4619      	mov	r1, r3
 8014490:	4620      	mov	r0, r4
 8014492:	f7fc f86a 	bl	801056a <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 8014496:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 801449a:	695b      	ldr	r3, [r3, #20]
 801449c:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 80144a0:	2301      	movs	r3, #1
 80144a2:	7013      	strb	r3, [r2, #0]
					res = store_xdir(&dj);
 80144a4:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 80144a8:	4618      	mov	r0, r3
 80144aa:	f7fe f819 	bl	80124e0 <store_xdir>
 80144ae:	4603      	mov	r3, r0
 80144b0:	f887 34ff 	strb.w	r3, [r7, #1279]	@ 0x4ff
					if (res == FR_OK && fp->obj.sclust != 0) {	/* Remove the cluster chain if exist */
 80144b4:	f897 34ff 	ldrb.w	r3, [r7, #1279]	@ 0x4ff
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	f040 80a6 	bne.w	801460a <f_open+0x38a>
 80144be:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 80144c2:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 80144c6:	681b      	ldr	r3, [r3, #0]
 80144c8:	689b      	ldr	r3, [r3, #8]
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	f000 809d 	beq.w	801460a <f_open+0x38a>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 80144d0:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 80144d4:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 80144d8:	6818      	ldr	r0, [r3, #0]
 80144da:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 80144de:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 80144e2:	681b      	ldr	r3, [r3, #0]
 80144e4:	689b      	ldr	r3, [r3, #8]
 80144e6:	2200      	movs	r2, #0
 80144e8:	4619      	mov	r1, r3
 80144ea:	f7fc ffcf 	bl	801148c <remove_chain>
 80144ee:	4603      	mov	r3, r0
 80144f0:	f887 34ff 	strb.w	r3, [r7, #1279]	@ 0x4ff
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 80144f4:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 80144f8:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	689b      	ldr	r3, [r3, #8]
 8014500:	f8d7 248c 	ldr.w	r2, [r7, #1164]	@ 0x48c
 8014504:	3b01      	subs	r3, #1
 8014506:	6193      	str	r3, [r2, #24]
 8014508:	e07f      	b.n	801460a <f_open+0x38a>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					tm = GET_FATTIME();					/* Set created time */
 801450a:	f7fb fef5 	bl	80102f8 <get_fattime>
 801450e:	f8c7 04ec 	str.w	r0, [r7, #1260]	@ 0x4ec
					st_dword(dj.dir + DIR_CrtTime, tm);
 8014512:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 8014516:	330e      	adds	r3, #14
 8014518:	f8d7 14ec 	ldr.w	r1, [r7, #1260]	@ 0x4ec
 801451c:	4618      	mov	r0, r3
 801451e:	f7fc f824 	bl	801056a <st_dword>
					st_dword(dj.dir + DIR_ModTime, tm);
 8014522:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 8014526:	3316      	adds	r3, #22
 8014528:	f8d7 14ec 	ldr.w	r1, [r7, #1260]	@ 0x4ec
 801452c:	4618      	mov	r0, r3
 801452e:	f7fc f81c 	bl	801056a <st_dword>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8014532:	f8d7 248c 	ldr.w	r2, [r7, #1164]	@ 0x48c
 8014536:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 801453a:	4619      	mov	r1, r3
 801453c:	4610      	mov	r0, r2
 801453e:	f7fd fbfb 	bl	8011d38 <ld_clust>
 8014542:	f8c7 04e8 	str.w	r0, [r7, #1256]	@ 0x4e8
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8014546:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 801454a:	f103 020b 	add.w	r2, r3, #11
 801454e:	2320      	movs	r3, #32
 8014550:	7013      	strb	r3, [r2, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8014552:	f8d7 048c 	ldr.w	r0, [r7, #1164]	@ 0x48c
 8014556:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 801455a:	2200      	movs	r2, #0
 801455c:	4619      	mov	r1, r3
 801455e:	f7fd fc0a 	bl	8011d76 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8014562:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 8014566:	331c      	adds	r3, #28
 8014568:	2100      	movs	r1, #0
 801456a:	4618      	mov	r0, r3
 801456c:	f7fb fffd 	bl	801056a <st_dword>
					fs->wflag = 1;
 8014570:	f8d7 248c 	ldr.w	r2, [r7, #1164]	@ 0x48c
 8014574:	2301      	movs	r3, #1
 8014576:	7113      	strb	r3, [r2, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 8014578:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	@ 0x4e8
 801457c:	2b00      	cmp	r3, #0
 801457e:	d044      	beq.n	801460a <f_open+0x38a>
						sc = fs->winsect;
 8014580:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 8014584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014586:	f8c7 34e4 	str.w	r3, [r7, #1252]	@ 0x4e4
						res = remove_chain(&dj.obj, cl, 0);
 801458a:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 801458e:	2200      	movs	r2, #0
 8014590:	f8d7 14e8 	ldr.w	r1, [r7, #1256]	@ 0x4e8
 8014594:	4618      	mov	r0, r3
 8014596:	f7fc ff79 	bl	801148c <remove_chain>
 801459a:	4603      	mov	r3, r0
 801459c:	f887 34ff 	strb.w	r3, [r7, #1279]	@ 0x4ff
						if (res == FR_OK) {
 80145a0:	f897 34ff 	ldrb.w	r3, [r7, #1279]	@ 0x4ff
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d130      	bne.n	801460a <f_open+0x38a>
							res = move_window(fs, sc);
 80145a8:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 80145ac:	f8d7 14e4 	ldr.w	r1, [r7, #1252]	@ 0x4e4
 80145b0:	4618      	mov	r0, r3
 80145b2:	f7fc fad5 	bl	8010b60 <move_window>
 80145b6:	4603      	mov	r3, r0
 80145b8:	f887 34ff 	strb.w	r3, [r7, #1279]	@ 0x4ff
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80145bc:	f8d7 248c 	ldr.w	r2, [r7, #1164]	@ 0x48c
 80145c0:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	@ 0x4e8
 80145c4:	3b01      	subs	r3, #1
 80145c6:	6193      	str	r3, [r2, #24]
 80145c8:	e01f      	b.n	801460a <f_open+0x38a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 80145ca:	f897 34ff 	ldrb.w	r3, [r7, #1279]	@ 0x4ff
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d11b      	bne.n	801460a <f_open+0x38a>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 80145d2:	f897 3496 	ldrb.w	r3, [r7, #1174]	@ 0x496
 80145d6:	f003 0310 	and.w	r3, r3, #16
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d003      	beq.n	80145e6 <f_open+0x366>
					res = FR_NO_FILE;
 80145de:	2304      	movs	r3, #4
 80145e0:	f887 34ff 	strb.w	r3, [r7, #1279]	@ 0x4ff
 80145e4:	e011      	b.n	801460a <f_open+0x38a>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 80145e6:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 80145ea:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 80145ee:	781b      	ldrb	r3, [r3, #0]
 80145f0:	f003 0302 	and.w	r3, r3, #2
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d008      	beq.n	801460a <f_open+0x38a>
 80145f8:	f897 3496 	ldrb.w	r3, [r7, #1174]	@ 0x496
 80145fc:	f003 0301 	and.w	r3, r3, #1
 8014600:	2b00      	cmp	r3, #0
 8014602:	d002      	beq.n	801460a <f_open+0x38a>
						res = FR_DENIED;
 8014604:	2307      	movs	r3, #7
 8014606:	f887 34ff 	strb.w	r3, [r7, #1279]	@ 0x4ff
					}
				}
			}
		}
		if (res == FR_OK) {
 801460a:	f897 34ff 	ldrb.w	r3, [r7, #1279]	@ 0x4ff
 801460e:	2b00      	cmp	r3, #0
 8014610:	d148      	bne.n	80146a4 <f_open+0x424>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 8014612:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 8014616:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 801461a:	781b      	ldrb	r3, [r3, #0]
 801461c:	f003 0308 	and.w	r3, r3, #8
 8014620:	2b00      	cmp	r3, #0
 8014622:	d00b      	beq.n	801463c <f_open+0x3bc>
 8014624:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 8014628:	f2a3 42e1 	subw	r2, r3, #1249	@ 0x4e1
 801462c:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 8014630:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 8014634:	781b      	ldrb	r3, [r3, #0]
 8014636:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801463a:	7013      	strb	r3, [r2, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801463c:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 8014640:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014642:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 8014646:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 801464a:	681b      	ldr	r3, [r3, #0]
 801464c:	649a      	str	r2, [r3, #72]	@ 0x48
			fp->dir_ptr = dj.dir;
 801464e:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	@ 0x4cc
 8014652:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 8014656:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 801465a:	681b      	ldr	r3, [r3, #0]
 801465c:	64da      	str	r2, [r3, #76]	@ 0x4c
#if FF_FS_LOCK
			fp->obj.lockid = inc_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Lock the file for this session */
 801465e:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 8014662:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 8014666:	781b      	ldrb	r3, [r3, #0]
 8014668:	2b01      	cmp	r3, #1
 801466a:	bf8c      	ite	hi
 801466c:	2301      	movhi	r3, #1
 801466e:	2300      	movls	r3, #0
 8014670:	b2db      	uxtb	r3, r3
 8014672:	461a      	mov	r2, r3
 8014674:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 8014678:	4611      	mov	r1, r2
 801467a:	4618      	mov	r0, r3
 801467c:	f7fc f946 	bl	801090c <inc_share>
 8014680:	4602      	mov	r2, r0
 8014682:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 8014686:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 801468a:	681b      	ldr	r3, [r3, #0]
 801468c:	62da      	str	r2, [r3, #44]	@ 0x2c
			if (fp->obj.lockid == 0) res = FR_INT_ERR;
 801468e:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 8014692:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8014696:	681b      	ldr	r3, [r3, #0]
 8014698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801469a:	2b00      	cmp	r3, #0
 801469c:	d102      	bne.n	80146a4 <f_open+0x424>
 801469e:	2302      	movs	r3, #2
 80146a0:	f887 34ff 	strb.w	r3, [r7, #1279]	@ 0x4ff
				}
			}
		}
#endif

		if (res == FR_OK) {
 80146a4:	f897 34ff 	ldrb.w	r3, [r7, #1279]	@ 0x4ff
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	f040 8189 	bne.w	80149c0 <f_open+0x740>
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80146ae:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 80146b2:	781b      	ldrb	r3, [r3, #0]
 80146b4:	2b04      	cmp	r3, #4
 80146b6:	d12b      	bne.n	8014710 <f_open+0x490>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 80146b8:	f8d7 2498 	ldr.w	r2, [r7, #1176]	@ 0x498
 80146bc:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 80146c0:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 80146c4:	681b      	ldr	r3, [r3, #0]
 80146c6:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 80146c8:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 80146cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146d0:	4613      	mov	r3, r2
 80146d2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80146d6:	f897 2497 	ldrb.w	r2, [r7, #1175]	@ 0x497
 80146da:	431a      	orrs	r2, r3
 80146dc:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 80146e0:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	625a      	str	r2, [r3, #36]	@ 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 80146e8:	f8d7 24dc 	ldr.w	r2, [r7, #1244]	@ 0x4dc
 80146ec:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 80146f0:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	629a      	str	r2, [r3, #40]	@ 0x28
				init_alloc_info(fs, &fp->obj);
 80146f8:	f8d7 248c 	ldr.w	r2, [r7, #1164]	@ 0x48c
 80146fc:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 8014700:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8014704:	681b      	ldr	r3, [r3, #0]
 8014706:	4619      	mov	r1, r3
 8014708:	4610      	mov	r0, r2
 801470a:	f7fd fe87 	bl	801241c <init_alloc_info>
 801470e:	e021      	b.n	8014754 <f_open+0x4d4>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8014710:	f8d7 248c 	ldr.w	r2, [r7, #1164]	@ 0x48c
 8014714:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 8014718:	4619      	mov	r1, r3
 801471a:	4610      	mov	r0, r2
 801471c:	f7fd fb0c 	bl	8011d38 <ld_clust>
 8014720:	4602      	mov	r2, r0
 8014722:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 8014726:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 801472a:	681b      	ldr	r3, [r3, #0]
 801472c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801472e:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 8014732:	331c      	adds	r3, #28
 8014734:	4618      	mov	r0, r3
 8014736:	f7fb fdff 	bl	8010338 <ld_dword>
 801473a:	4603      	mov	r3, r0
 801473c:	2200      	movs	r2, #0
 801473e:	613b      	str	r3, [r7, #16]
 8014740:	617a      	str	r2, [r7, #20]
 8014742:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 8014746:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 801474a:	681b      	ldr	r3, [r3, #0]
 801474c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8014750:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;		/* Disable fast seek mode */
 8014754:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 8014758:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	2200      	movs	r2, #0
 8014760:	651a      	str	r2, [r3, #80]	@ 0x50
#endif
			fp->obj.fs = fs;	/* Validate the file object */
 8014762:	f8d7 248c 	ldr.w	r2, [r7, #1164]	@ 0x48c
 8014766:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 801476a:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8014772:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 8014776:	88da      	ldrh	r2, [r3, #6]
 8014778:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 801477c:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;	/* Set file access mode */
 8014784:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 8014788:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	f507 62a0 	add.w	r2, r7, #1280	@ 0x500
 8014792:	f2a2 42e1 	subw	r2, r2, #1249	@ 0x4e1
 8014796:	7812      	ldrb	r2, [r2, #0]
 8014798:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			fp->err = 0;		/* Clear error flag */
 801479c:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 80147a0:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	2200      	movs	r2, #0
 80147a8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
			fp->sect = 0;		/* Invalidate current data sector */
 80147ac:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 80147b0:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 80147b4:	681b      	ldr	r3, [r3, #0]
 80147b6:	2200      	movs	r2, #0
 80147b8:	645a      	str	r2, [r3, #68]	@ 0x44
			fp->fptr = 0;		/* Set file pointer top of the file */
 80147ba:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 80147be:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 80147c2:	6819      	ldr	r1, [r3, #0]
 80147c4:	f04f 0200 	mov.w	r2, #0
 80147c8:	f04f 0300 	mov.w	r3, #0
 80147cc:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
#if !FF_FS_READONLY
#if !FF_FS_TINY
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 80147d0:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 80147d4:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	3354      	adds	r3, #84	@ 0x54
 80147dc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80147e0:	2100      	movs	r1, #0
 80147e2:	4618      	mov	r0, r3
 80147e4:	f003 ff6c 	bl	80186c0 <memset>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80147e8:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 80147ec:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 80147f0:	781b      	ldrb	r3, [r3, #0]
 80147f2:	f003 0320 	and.w	r3, r3, #32
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	f000 80e2 	beq.w	80149c0 <f_open+0x740>
 80147fc:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 8014800:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8014804:	681b      	ldr	r3, [r3, #0]
 8014806:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801480a:	4313      	orrs	r3, r2
 801480c:	f000 80d8 	beq.w	80149c0 <f_open+0x740>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8014810:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 8014814:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801481e:	f507 61a0 	add.w	r1, r7, #1280	@ 0x500
 8014822:	f2a1 41dc 	subw	r1, r1, #1244	@ 0x4dc
 8014826:	6809      	ldr	r1, [r1, #0]
 8014828:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801482c:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 8014830:	895b      	ldrh	r3, [r3, #10]
 8014832:	461a      	mov	r2, r3
 8014834:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 8014838:	899b      	ldrh	r3, [r3, #12]
 801483a:	fb02 f303 	mul.w	r3, r2, r3
 801483e:	f8c7 34e0 	str.w	r3, [r7, #1248]	@ 0x4e0
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8014842:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 8014846:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 801484a:	681b      	ldr	r3, [r3, #0]
 801484c:	689b      	ldr	r3, [r3, #8]
 801484e:	f8c7 34f8 	str.w	r3, [r7, #1272]	@ 0x4f8
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014852:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 8014856:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 801485a:	681b      	ldr	r3, [r3, #0]
 801485c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8014860:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 8014864:	e9c1 2300 	strd	r2, r3, [r1]
 8014868:	e02b      	b.n	80148c2 <f_open+0x642>
					clst = get_fat(&fp->obj, clst);
 801486a:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 801486e:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	f8d7 14f8 	ldr.w	r1, [r7, #1272]	@ 0x4f8
 8014878:	4618      	mov	r0, r3
 801487a:	f7fc fa2d 	bl	8010cd8 <get_fat>
 801487e:	f8c7 04f8 	str.w	r0, [r7, #1272]	@ 0x4f8
					if (clst <= 1) res = FR_INT_ERR;
 8014882:	f8d7 34f8 	ldr.w	r3, [r7, #1272]	@ 0x4f8
 8014886:	2b01      	cmp	r3, #1
 8014888:	d802      	bhi.n	8014890 <f_open+0x610>
 801488a:	2302      	movs	r3, #2
 801488c:	f887 34ff 	strb.w	r3, [r7, #1279]	@ 0x4ff
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014890:	f8d7 34f8 	ldr.w	r3, [r7, #1272]	@ 0x4f8
 8014894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014898:	d102      	bne.n	80148a0 <f_open+0x620>
 801489a:	2301      	movs	r3, #1
 801489c:	f887 34ff 	strb.w	r3, [r7, #1279]	@ 0x4ff
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80148a0:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 80148a4:	2200      	movs	r2, #0
 80148a6:	469a      	mov	sl, r3
 80148a8:	4693      	mov	fp, r2
 80148aa:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80148ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148b2:	ebb2 050a 	subs.w	r5, r2, sl
 80148b6:	eb63 060b 	sbc.w	r6, r3, fp
 80148ba:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80148be:	e9c3 5600 	strd	r5, r6, [r3]
 80148c2:	f897 34ff 	ldrb.w	r3, [r7, #1279]	@ 0x4ff
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d10c      	bne.n	80148e4 <f_open+0x664>
 80148ca:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 80148ce:	2200      	movs	r2, #0
 80148d0:	4698      	mov	r8, r3
 80148d2:	4691      	mov	r9, r2
 80148d4:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80148d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148dc:	4590      	cmp	r8, r2
 80148de:	eb79 0303 	sbcs.w	r3, r9, r3
 80148e2:	d3c2      	bcc.n	801486a <f_open+0x5ea>
				}
				fp->clust = clst;
 80148e4:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 80148e8:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	f8d7 24f8 	ldr.w	r2, [r7, #1272]	@ 0x4f8
 80148f2:	641a      	str	r2, [r3, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80148f4:	f897 34ff 	ldrb.w	r3, [r7, #1279]	@ 0x4ff
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	d154      	bne.n	80149a6 <f_open+0x726>
 80148fc:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 8014900:	899b      	ldrh	r3, [r3, #12]
 8014902:	b29b      	uxth	r3, r3
 8014904:	2200      	movs	r2, #0
 8014906:	60bb      	str	r3, [r7, #8]
 8014908:	60fa      	str	r2, [r7, #12]
 801490a:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 801490e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014912:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8014916:	f7eb ff07 	bl	8000728 <__aeabi_uldivmod>
 801491a:	4313      	orrs	r3, r2
 801491c:	d043      	beq.n	80149a6 <f_open+0x726>
					sc = clst2sect(fs, clst);
 801491e:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 8014922:	f8d7 14f8 	ldr.w	r1, [r7, #1272]	@ 0x4f8
 8014926:	4618      	mov	r0, r3
 8014928:	f7fc f9b6 	bl	8010c98 <clst2sect>
 801492c:	f8c7 04e4 	str.w	r0, [r7, #1252]	@ 0x4e4
					if (sc == 0) {
 8014930:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	@ 0x4e4
 8014934:	2b00      	cmp	r3, #0
 8014936:	d103      	bne.n	8014940 <f_open+0x6c0>
						res = FR_INT_ERR;
 8014938:	2302      	movs	r3, #2
 801493a:	f887 34ff 	strb.w	r3, [r7, #1279]	@ 0x4ff
 801493e:	e032      	b.n	80149a6 <f_open+0x726>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8014940:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 8014944:	899b      	ldrh	r3, [r3, #12]
 8014946:	b29b      	uxth	r3, r3
 8014948:	2200      	movs	r2, #0
 801494a:	603b      	str	r3, [r7, #0]
 801494c:	607a      	str	r2, [r7, #4]
 801494e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014952:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 8014956:	e9d1 0100 	ldrd	r0, r1, [r1]
 801495a:	f7eb fee5 	bl	8000728 <__aeabi_uldivmod>
 801495e:	4602      	mov	r2, r0
 8014960:	460b      	mov	r3, r1
 8014962:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	@ 0x4e4
 8014966:	441a      	add	r2, r3
 8014968:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 801496c:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8014970:	681b      	ldr	r3, [r3, #0]
 8014972:	645a      	str	r2, [r3, #68]	@ 0x44
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8014974:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 8014978:	7858      	ldrb	r0, [r3, #1]
 801497a:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 801497e:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8014982:	681b      	ldr	r3, [r3, #0]
 8014984:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8014988:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 801498c:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014994:	2301      	movs	r3, #1
 8014996:	f7fb fc51 	bl	801023c <disk_read>
 801499a:	4603      	mov	r3, r0
 801499c:	2b00      	cmp	r3, #0
 801499e:	d002      	beq.n	80149a6 <f_open+0x726>
 80149a0:	2301      	movs	r3, #1
 80149a2:	f887 34ff 	strb.w	r3, [r7, #1279]	@ 0x4ff
#endif
					}
				}
#if FF_FS_LOCK
				if (res != FR_OK) dec_share(fp->obj.lockid); /* Decrement file open counter if seek failed */
 80149a6:	f897 34ff 	ldrb.w	r3, [r7, #1279]	@ 0x4ff
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d008      	beq.n	80149c0 <f_open+0x740>
 80149ae:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 80149b2:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 80149b6:	681b      	ldr	r3, [r3, #0]
 80149b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80149ba:	4618      	mov	r0, r3
 80149bc:	f7fc f834 	bl	8010a28 <dec_share>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80149c0:	f897 34ff 	ldrb.w	r3, [r7, #1279]	@ 0x4ff
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d006      	beq.n	80149d6 <f_open+0x756>
 80149c8:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 80149cc:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 80149d0:	681b      	ldr	r3, [r3, #0]
 80149d2:	2200      	movs	r2, #0
 80149d4:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80149d6:	f897 34ff 	ldrb.w	r3, [r7, #1279]	@ 0x4ff
}
 80149da:	4618      	mov	r0, r3
 80149dc:	f207 5704 	addw	r7, r7, #1284	@ 0x504
 80149e0:	46bd      	mov	sp, r7
 80149e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080149e6 <f_read>:
	FIL* fp, 	/* Open file to be read */
	void* buff,	/* Data buffer to store the read data */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Number of bytes read */
)
{
 80149e6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80149ea:	b098      	sub	sp, #96	@ 0x60
 80149ec:	af00      	add	r7, sp, #0
 80149ee:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80149f0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80149f2:	627a      	str	r2, [r7, #36]	@ 0x24
 80149f4:	623b      	str	r3, [r7, #32]
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80149f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149f8:	64fb      	str	r3, [r7, #76]	@ 0x4c


	*br = 0;	/* Clear read byte counter */
 80149fa:	6a3a      	ldr	r2, [r7, #32]
 80149fc:	2300      	movs	r3, #0
 80149fe:	6013      	str	r3, [r2, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8014a00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014a02:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8014a06:	4619      	mov	r1, r3
 8014a08:	4610      	mov	r0, r2
 8014a0a:	f7ff fbb7 	bl	801417c <validate>
 8014a0e:	4603      	mov	r3, r0
 8014a10:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014a14:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d108      	bne.n	8014a2e <f_read+0x48>
 8014a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a1e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8014a22:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8014a26:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	d002      	beq.n	8014a34 <f_read+0x4e>
 8014a2e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8014a32:	e16b      	b.n	8014d0c <f_read+0x326>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8014a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a36:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014a3a:	f003 0301 	and.w	r3, r3, #1
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d101      	bne.n	8014a46 <f_read+0x60>
 8014a42:	2307      	movs	r3, #7
 8014a44:	e162      	b.n	8014d0c <f_read+0x326>
	remain = fp->obj.objsize - fp->fptr;
 8014a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a48:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8014a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a4e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8014a52:	ebb0 0802 	subs.w	r8, r0, r2
 8014a56:	eb61 0903 	sbc.w	r9, r1, r3
 8014a5a:	e9c7 8910 	strd	r8, r9, [r7, #64]	@ 0x40
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8014a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a60:	2200      	movs	r2, #0
 8014a62:	461c      	mov	r4, r3
 8014a64:	4615      	mov	r5, r2
 8014a66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8014a6a:	42a2      	cmp	r2, r4
 8014a6c:	41ab      	sbcs	r3, r5
 8014a6e:	f080 8148 	bcs.w	8014d02 <f_read+0x31c>
 8014a72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014a74:	627b      	str	r3, [r7, #36]	@ 0x24

	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 8014a76:	e144      	b.n	8014d02 <f_read+0x31c>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8014a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a7a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8014a7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014a80:	899b      	ldrh	r3, [r3, #12]
 8014a82:	b29b      	uxth	r3, r3
 8014a84:	2200      	movs	r2, #0
 8014a86:	61bb      	str	r3, [r7, #24]
 8014a88:	61fa      	str	r2, [r7, #28]
 8014a8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8014a8e:	f7eb fe4b 	bl	8000728 <__aeabi_uldivmod>
 8014a92:	4313      	orrs	r3, r2
 8014a94:	f040 80e9 	bne.w	8014c6a <f_read+0x284>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8014a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a9a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8014a9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014aa0:	899b      	ldrh	r3, [r3, #12]
 8014aa2:	b29b      	uxth	r3, r3
 8014aa4:	2200      	movs	r2, #0
 8014aa6:	613b      	str	r3, [r7, #16]
 8014aa8:	617a      	str	r2, [r7, #20]
 8014aaa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8014aae:	f7eb fe3b 	bl	8000728 <__aeabi_uldivmod>
 8014ab2:	4602      	mov	r2, r0
 8014ab4:	460b      	mov	r3, r1
 8014ab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014ab8:	895b      	ldrh	r3, [r3, #10]
 8014aba:	3b01      	subs	r3, #1
 8014abc:	4013      	ands	r3, r2
 8014abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
			if (csect == 0) {					/* On the cluster boundary? */
 8014ac0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d132      	bne.n	8014b2c <f_read+0x146>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8014ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ac8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8014acc:	4313      	orrs	r3, r2
 8014ace:	d103      	bne.n	8014ad8 <f_read+0xf2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8014ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ad2:	689b      	ldr	r3, [r3, #8]
 8014ad4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014ad6:	e013      	b.n	8014b00 <f_read+0x11a>
				} else {						/* Middle or end of the file */
#if FF_USE_FASTSEEK
					if (fp->cltbl) {
 8014ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ada:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d007      	beq.n	8014af0 <f_read+0x10a>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8014ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ae2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8014ae6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014ae8:	f7fc feed 	bl	80118c6 <clmt_clust>
 8014aec:	65b8      	str	r0, [r7, #88]	@ 0x58
 8014aee:	e007      	b.n	8014b00 <f_read+0x11a>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8014af0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014af6:	4619      	mov	r1, r3
 8014af8:	4610      	mov	r0, r2
 8014afa:	f7fc f8ed 	bl	8010cd8 <get_fat>
 8014afe:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8014b00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014b02:	2b01      	cmp	r3, #1
 8014b04:	d805      	bhi.n	8014b12 <f_read+0x12c>
 8014b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b08:	2202      	movs	r2, #2
 8014b0a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8014b0e:	2302      	movs	r3, #2
 8014b10:	e0fc      	b.n	8014d0c <f_read+0x326>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014b12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b18:	d105      	bne.n	8014b26 <f_read+0x140>
 8014b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b1c:	2201      	movs	r2, #1
 8014b1e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8014b22:	2301      	movs	r3, #1
 8014b24:	e0f2      	b.n	8014d0c <f_read+0x326>
				fp->clust = clst;				/* Update current cluster */
 8014b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b28:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014b2a:	641a      	str	r2, [r3, #64]	@ 0x40
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8014b2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014b32:	4619      	mov	r1, r3
 8014b34:	4610      	mov	r0, r2
 8014b36:	f7fc f8af 	bl	8010c98 <clst2sect>
 8014b3a:	63b8      	str	r0, [r7, #56]	@ 0x38
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8014b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	d105      	bne.n	8014b4e <f_read+0x168>
 8014b42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b44:	2202      	movs	r2, #2
 8014b46:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8014b4a:	2302      	movs	r3, #2
 8014b4c:	e0de      	b.n	8014d0c <f_read+0x326>
			sect += csect;
 8014b4e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014b50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014b52:	4413      	add	r3, r2
 8014b54:	63bb      	str	r3, [r7, #56]	@ 0x38
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8014b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014b58:	899b      	ldrh	r3, [r3, #12]
 8014b5a:	461a      	mov	r2, r3
 8014b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8014b62:	653b      	str	r3, [r7, #80]	@ 0x50
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 8014b64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d043      	beq.n	8014bf2 <f_read+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014b6a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014b6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014b6e:	4413      	add	r3, r2
 8014b70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014b72:	8952      	ldrh	r2, [r2, #10]
 8014b74:	4293      	cmp	r3, r2
 8014b76:	d905      	bls.n	8014b84 <f_read+0x19e>
					cc = fs->csize - csect;
 8014b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014b7a:	895b      	ldrh	r3, [r3, #10]
 8014b7c:	461a      	mov	r2, r3
 8014b7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014b80:	1ad3      	subs	r3, r2, r3
 8014b82:	653b      	str	r3, [r7, #80]	@ 0x50
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014b84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014b86:	7858      	ldrb	r0, [r3, #1]
 8014b88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014b8a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014b8c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8014b8e:	f7fb fb55 	bl	801023c <disk_read>
 8014b92:	4603      	mov	r3, r0
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d005      	beq.n	8014ba4 <f_read+0x1be>
 8014b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b9a:	2201      	movs	r2, #1
 8014b9c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8014ba0:	2301      	movs	r3, #1
 8014ba2:	e0b3      	b.n	8014d0c <f_read+0x326>
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					memcpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8014ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ba6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014baa:	b25b      	sxtb	r3, r3
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	da18      	bge.n	8014be2 <f_read+0x1fc>
 8014bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014bb2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014bb6:	1ad3      	subs	r3, r2, r3
 8014bb8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014bba:	429a      	cmp	r2, r3
 8014bbc:	d911      	bls.n	8014be2 <f_read+0x1fc>
					memcpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8014bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014bc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014bc4:	1ad3      	subs	r3, r2, r3
 8014bc6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014bc8:	8992      	ldrh	r2, [r2, #12]
 8014bca:	fb02 f303 	mul.w	r3, r2, r3
 8014bce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014bd0:	18d0      	adds	r0, r2, r3
 8014bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014bd4:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8014bd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014bda:	899b      	ldrh	r3, [r3, #12]
 8014bdc:	461a      	mov	r2, r3
 8014bde:	f004 fba2 	bl	8019326 <memcpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8014be2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014be4:	899b      	ldrh	r3, [r3, #12]
 8014be6:	461a      	mov	r2, r3
 8014be8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014bea:	fb02 f303 	mul.w	r3, r2, r3
 8014bee:	657b      	str	r3, [r7, #84]	@ 0x54
				continue;
 8014bf0:	e067      	b.n	8014cc2 <f_read+0x2dc>
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8014bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014bf6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014bf8:	429a      	cmp	r2, r3
 8014bfa:	d033      	beq.n	8014c64 <f_read+0x27e>
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8014bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014bfe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014c02:	b25b      	sxtb	r3, r3
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	da1b      	bge.n	8014c40 <f_read+0x25a>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014c08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014c0a:	7858      	ldrb	r0, [r3, #1]
 8014c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c0e:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8014c12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014c16:	2301      	movs	r3, #1
 8014c18:	f7fb fb30 	bl	801027c <disk_write>
 8014c1c:	4603      	mov	r3, r0
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d005      	beq.n	8014c2e <f_read+0x248>
 8014c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c24:	2201      	movs	r2, #1
 8014c26:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8014c2a:	2301      	movs	r3, #1
 8014c2c:	e06e      	b.n	8014d0c <f_read+0x326>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c30:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014c34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014c38:	b2da      	uxtb	r2, r3
 8014c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c3c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8014c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014c42:	7858      	ldrb	r0, [r3, #1]
 8014c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c46:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8014c4a:	2301      	movs	r3, #1
 8014c4c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014c4e:	f7fb faf5 	bl	801023c <disk_read>
 8014c52:	4603      	mov	r3, r0
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d005      	beq.n	8014c64 <f_read+0x27e>
 8014c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c5a:	2201      	movs	r2, #1
 8014c5c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8014c60:	2301      	movs	r3, #1
 8014c62:	e053      	b.n	8014d0c <f_read+0x326>
			}
#endif
			fp->sect = sect;
 8014c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014c68:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8014c6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014c6c:	899b      	ldrh	r3, [r3, #12]
 8014c6e:	4618      	mov	r0, r3
 8014c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c72:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8014c76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014c78:	899b      	ldrh	r3, [r3, #12]
 8014c7a:	fbb2 f1f3 	udiv	r1, r2, r3
 8014c7e:	fb01 f303 	mul.w	r3, r1, r3
 8014c82:	1ad3      	subs	r3, r2, r3
 8014c84:	1ac3      	subs	r3, r0, r3
 8014c86:	657b      	str	r3, [r7, #84]	@ 0x54
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8014c88:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c8c:	429a      	cmp	r2, r3
 8014c8e:	d901      	bls.n	8014c94 <f_read+0x2ae>
 8014c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c92:	657b      	str	r3, [r7, #84]	@ 0x54
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8014c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c96:	f103 0454 	add.w	r4, r3, #84	@ 0x54
 8014c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c9c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8014ca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014ca2:	899b      	ldrh	r3, [r3, #12]
 8014ca4:	b29b      	uxth	r3, r3
 8014ca6:	2200      	movs	r2, #0
 8014ca8:	60bb      	str	r3, [r7, #8]
 8014caa:	60fa      	str	r2, [r7, #12]
 8014cac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8014cb0:	f7eb fd3a 	bl	8000728 <__aeabi_uldivmod>
 8014cb4:	4613      	mov	r3, r2
 8014cb6:	4423      	add	r3, r4
 8014cb8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014cba:	4619      	mov	r1, r3
 8014cbc:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8014cbe:	f004 fb32 	bl	8019326 <memcpy>
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 8014cc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014cc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014cc6:	1ad3      	subs	r3, r2, r3
 8014cc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8014cca:	6a3b      	ldr	r3, [r7, #32]
 8014ccc:	681a      	ldr	r2, [r3, #0]
 8014cce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014cd0:	441a      	add	r2, r3
 8014cd2:	6a3b      	ldr	r3, [r7, #32]
 8014cd4:	601a      	str	r2, [r3, #0]
 8014cd6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014cd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014cda:	4413      	add	r3, r2
 8014cdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ce0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8014ce4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8014ce6:	2000      	movs	r0, #0
 8014ce8:	468a      	mov	sl, r1
 8014cea:	4683      	mov	fp, r0
 8014cec:	eb12 010a 	adds.w	r1, r2, sl
 8014cf0:	6039      	str	r1, [r7, #0]
 8014cf2:	eb43 030b 	adc.w	r3, r3, fp
 8014cf6:	607b      	str	r3, [r7, #4]
 8014cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014cfa:	e9d7 1200 	ldrd	r1, r2, [r7]
 8014cfe:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
 8014d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	f47f aeb7 	bne.w	8014a78 <f_read+0x92>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8014d0a:	2300      	movs	r3, #0
}
 8014d0c:	4618      	mov	r0, r3
 8014d0e:	3760      	adds	r7, #96	@ 0x60
 8014d10:	46bd      	mov	sp, r7
 8014d12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08014d16 <f_write>:
	FIL* fp,			/* Open file to be written */
	const void* buff,	/* Data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Number of bytes written */
)
{
 8014d16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d1a:	b091      	sub	sp, #68	@ 0x44
 8014d1c:	af00      	add	r7, sp, #0
 8014d1e:	61f8      	str	r0, [r7, #28]
 8014d20:	61b9      	str	r1, [r7, #24]
 8014d22:	617a      	str	r2, [r7, #20]
 8014d24:	613b      	str	r3, [r7, #16]
	FRESULT res;
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8014d26:	69bb      	ldr	r3, [r7, #24]
 8014d28:	62fb      	str	r3, [r7, #44]	@ 0x2c


	*bw = 0;	/* Clear write byte counter */
 8014d2a:	693b      	ldr	r3, [r7, #16]
 8014d2c:	2200      	movs	r2, #0
 8014d2e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8014d30:	69fb      	ldr	r3, [r7, #28]
 8014d32:	f107 0220 	add.w	r2, r7, #32
 8014d36:	4611      	mov	r1, r2
 8014d38:	4618      	mov	r0, r3
 8014d3a:	f7ff fa1f 	bl	801417c <validate>
 8014d3e:	4603      	mov	r3, r0
 8014d40:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014d44:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d108      	bne.n	8014d5e <f_write+0x48>
 8014d4c:	69fb      	ldr	r3, [r7, #28]
 8014d4e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8014d52:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8014d56:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d002      	beq.n	8014d64 <f_write+0x4e>
 8014d5e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014d62:	e1aa      	b.n	80150ba <f_write+0x3a4>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8014d64:	69fb      	ldr	r3, [r7, #28]
 8014d66:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014d6a:	f003 0302 	and.w	r3, r3, #2
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d101      	bne.n	8014d76 <f_write+0x60>
 8014d72:	2307      	movs	r3, #7
 8014d74:	e1a1      	b.n	80150ba <f_write+0x3a4>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8014d76:	6a3b      	ldr	r3, [r7, #32]
 8014d78:	781b      	ldrb	r3, [r3, #0]
 8014d7a:	2b04      	cmp	r3, #4
 8014d7c:	f000 818d 	beq.w	801509a <f_write+0x384>
 8014d80:	69fb      	ldr	r3, [r7, #28]
 8014d82:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8014d86:	697b      	ldr	r3, [r7, #20]
 8014d88:	18d1      	adds	r1, r2, r3
 8014d8a:	69fb      	ldr	r3, [r7, #28]
 8014d8c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8014d90:	4613      	mov	r3, r2
 8014d92:	4299      	cmp	r1, r3
 8014d94:	f080 8181 	bcs.w	801509a <f_write+0x384>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8014d98:	69fb      	ldr	r3, [r7, #28]
 8014d9a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8014d9e:	4613      	mov	r3, r2
 8014da0:	43db      	mvns	r3, r3
 8014da2:	617b      	str	r3, [r7, #20]
	}

	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 8014da4:	e179      	b.n	801509a <f_write+0x384>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8014da6:	69fb      	ldr	r3, [r7, #28]
 8014da8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8014dac:	6a3b      	ldr	r3, [r7, #32]
 8014dae:	899b      	ldrh	r3, [r3, #12]
 8014db0:	b29b      	uxth	r3, r3
 8014db2:	2200      	movs	r2, #0
 8014db4:	461d      	mov	r5, r3
 8014db6:	4616      	mov	r6, r2
 8014db8:	462a      	mov	r2, r5
 8014dba:	4633      	mov	r3, r6
 8014dbc:	f7eb fcb4 	bl	8000728 <__aeabi_uldivmod>
 8014dc0:	4313      	orrs	r3, r2
 8014dc2:	f040 810a 	bne.w	8014fda <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8014dc6:	69fb      	ldr	r3, [r7, #28]
 8014dc8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8014dcc:	6a3b      	ldr	r3, [r7, #32]
 8014dce:	899b      	ldrh	r3, [r3, #12]
 8014dd0:	b29b      	uxth	r3, r3
 8014dd2:	2200      	movs	r2, #0
 8014dd4:	60bb      	str	r3, [r7, #8]
 8014dd6:	60fa      	str	r2, [r7, #12]
 8014dd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8014ddc:	f7eb fca4 	bl	8000728 <__aeabi_uldivmod>
 8014de0:	4602      	mov	r2, r0
 8014de2:	460b      	mov	r3, r1
 8014de4:	6a3b      	ldr	r3, [r7, #32]
 8014de6:	895b      	ldrh	r3, [r3, #10]
 8014de8:	3b01      	subs	r3, #1
 8014dea:	4013      	ands	r3, r2
 8014dec:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (csect == 0) {				/* On the cluster boundary? */
 8014dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d146      	bne.n	8014e82 <f_write+0x16c>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8014df4:	69fb      	ldr	r3, [r7, #28]
 8014df6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8014dfa:	4313      	orrs	r3, r2
 8014dfc:	d10c      	bne.n	8014e18 <f_write+0x102>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8014dfe:	69fb      	ldr	r3, [r7, #28]
 8014e00:	689b      	ldr	r3, [r3, #8]
 8014e02:	63bb      	str	r3, [r7, #56]	@ 0x38
					if (clst == 0) {		/* If no cluster is allocated, */
 8014e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d11a      	bne.n	8014e40 <f_write+0x12a>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8014e0a:	69fb      	ldr	r3, [r7, #28]
 8014e0c:	2100      	movs	r1, #0
 8014e0e:	4618      	mov	r0, r3
 8014e10:	f7fc fc1e 	bl	8011650 <create_chain>
 8014e14:	63b8      	str	r0, [r7, #56]	@ 0x38
 8014e16:	e013      	b.n	8014e40 <f_write+0x12a>
					}
				} else {					/* On the middle or end of the file */
#if FF_USE_FASTSEEK
					if (fp->cltbl) {
 8014e18:	69fb      	ldr	r3, [r7, #28]
 8014e1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d007      	beq.n	8014e30 <f_write+0x11a>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8014e20:	69fb      	ldr	r3, [r7, #28]
 8014e22:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8014e26:	69f8      	ldr	r0, [r7, #28]
 8014e28:	f7fc fd4d 	bl	80118c6 <clmt_clust>
 8014e2c:	63b8      	str	r0, [r7, #56]	@ 0x38
 8014e2e:	e007      	b.n	8014e40 <f_write+0x12a>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8014e30:	69fa      	ldr	r2, [r7, #28]
 8014e32:	69fb      	ldr	r3, [r7, #28]
 8014e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014e36:	4619      	mov	r1, r3
 8014e38:	4610      	mov	r0, r2
 8014e3a:	f7fc fc09 	bl	8011650 <create_chain>
 8014e3e:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	f000 812e 	beq.w	80150a4 <f_write+0x38e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e4a:	2b01      	cmp	r3, #1
 8014e4c:	d105      	bne.n	8014e5a <f_write+0x144>
 8014e4e:	69fb      	ldr	r3, [r7, #28]
 8014e50:	2202      	movs	r2, #2
 8014e52:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8014e56:	2302      	movs	r3, #2
 8014e58:	e12f      	b.n	80150ba <f_write+0x3a4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e60:	d105      	bne.n	8014e6e <f_write+0x158>
 8014e62:	69fb      	ldr	r3, [r7, #28]
 8014e64:	2201      	movs	r2, #1
 8014e66:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8014e6a:	2301      	movs	r3, #1
 8014e6c:	e125      	b.n	80150ba <f_write+0x3a4>
				fp->clust = clst;			/* Update current cluster */
 8014e6e:	69fb      	ldr	r3, [r7, #28]
 8014e70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014e72:	641a      	str	r2, [r3, #64]	@ 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8014e74:	69fb      	ldr	r3, [r7, #28]
 8014e76:	689b      	ldr	r3, [r3, #8]
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d102      	bne.n	8014e82 <f_write+0x16c>
 8014e7c:	69fb      	ldr	r3, [r7, #28]
 8014e7e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014e80:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8014e82:	69fb      	ldr	r3, [r7, #28]
 8014e84:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014e88:	b25b      	sxtb	r3, r3
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	da1b      	bge.n	8014ec6 <f_write+0x1b0>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014e8e:	6a3b      	ldr	r3, [r7, #32]
 8014e90:	7858      	ldrb	r0, [r3, #1]
 8014e92:	69fb      	ldr	r3, [r7, #28]
 8014e94:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8014e98:	69fb      	ldr	r3, [r7, #28]
 8014e9a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014e9c:	2301      	movs	r3, #1
 8014e9e:	f7fb f9ed 	bl	801027c <disk_write>
 8014ea2:	4603      	mov	r3, r0
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d005      	beq.n	8014eb4 <f_write+0x19e>
 8014ea8:	69fb      	ldr	r3, [r7, #28]
 8014eaa:	2201      	movs	r2, #1
 8014eac:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8014eb0:	2301      	movs	r3, #1
 8014eb2:	e102      	b.n	80150ba <f_write+0x3a4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014eb4:	69fb      	ldr	r3, [r7, #28]
 8014eb6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014eba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014ebe:	b2da      	uxtb	r2, r3
 8014ec0:	69fb      	ldr	r3, [r7, #28]
 8014ec2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8014ec6:	6a3a      	ldr	r2, [r7, #32]
 8014ec8:	69fb      	ldr	r3, [r7, #28]
 8014eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014ecc:	4619      	mov	r1, r3
 8014ece:	4610      	mov	r0, r2
 8014ed0:	f7fb fee2 	bl	8010c98 <clst2sect>
 8014ed4:	6278      	str	r0, [r7, #36]	@ 0x24
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8014ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d105      	bne.n	8014ee8 <f_write+0x1d2>
 8014edc:	69fb      	ldr	r3, [r7, #28]
 8014ede:	2202      	movs	r2, #2
 8014ee0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8014ee4:	2302      	movs	r3, #2
 8014ee6:	e0e8      	b.n	80150ba <f_write+0x3a4>
			sect += csect;
 8014ee8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014eec:	4413      	add	r3, r2
 8014eee:	627b      	str	r3, [r7, #36]	@ 0x24
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8014ef0:	6a3b      	ldr	r3, [r7, #32]
 8014ef2:	899b      	ldrh	r3, [r3, #12]
 8014ef4:	461a      	mov	r2, r3
 8014ef6:	697b      	ldr	r3, [r7, #20]
 8014ef8:	fbb3 f3f2 	udiv	r3, r3, r2
 8014efc:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 8014efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d046      	beq.n	8014f92 <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014f04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f08:	4413      	add	r3, r2
 8014f0a:	6a3a      	ldr	r2, [r7, #32]
 8014f0c:	8952      	ldrh	r2, [r2, #10]
 8014f0e:	4293      	cmp	r3, r2
 8014f10:	d905      	bls.n	8014f1e <f_write+0x208>
					cc = fs->csize - csect;
 8014f12:	6a3b      	ldr	r3, [r7, #32]
 8014f14:	895b      	ldrh	r3, [r3, #10]
 8014f16:	461a      	mov	r2, r3
 8014f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f1a:	1ad3      	subs	r3, r2, r3
 8014f1c:	633b      	str	r3, [r7, #48]	@ 0x30
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014f1e:	6a3b      	ldr	r3, [r7, #32]
 8014f20:	7858      	ldrb	r0, [r3, #1]
 8014f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014f26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014f28:	f7fb f9a8 	bl	801027c <disk_write>
 8014f2c:	4603      	mov	r3, r0
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d005      	beq.n	8014f3e <f_write+0x228>
 8014f32:	69fb      	ldr	r3, [r7, #28]
 8014f34:	2201      	movs	r2, #1
 8014f36:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8014f3a:	2301      	movs	r3, #1
 8014f3c:	e0bd      	b.n	80150ba <f_write+0x3a4>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					memcpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8014f3e:	69fb      	ldr	r3, [r7, #28]
 8014f40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f44:	1ad3      	subs	r3, r2, r3
 8014f46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014f48:	429a      	cmp	r2, r3
 8014f4a:	d91a      	bls.n	8014f82 <f_write+0x26c>
					memcpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8014f4c:	69fb      	ldr	r3, [r7, #28]
 8014f4e:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 8014f52:	69fb      	ldr	r3, [r7, #28]
 8014f54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f58:	1ad3      	subs	r3, r2, r3
 8014f5a:	6a3a      	ldr	r2, [r7, #32]
 8014f5c:	8992      	ldrh	r2, [r2, #12]
 8014f5e:	fb02 f303 	mul.w	r3, r2, r3
 8014f62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014f64:	18d1      	adds	r1, r2, r3
 8014f66:	6a3b      	ldr	r3, [r7, #32]
 8014f68:	899b      	ldrh	r3, [r3, #12]
 8014f6a:	461a      	mov	r2, r3
 8014f6c:	f004 f9db 	bl	8019326 <memcpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014f70:	69fb      	ldr	r3, [r7, #28]
 8014f72:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014f76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014f7a:	b2da      	uxtb	r2, r3
 8014f7c:	69fb      	ldr	r3, [r7, #28]
 8014f7e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8014f82:	6a3b      	ldr	r3, [r7, #32]
 8014f84:	899b      	ldrh	r3, [r3, #12]
 8014f86:	461a      	mov	r2, r3
 8014f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f8a:	fb02 f303 	mul.w	r3, r2, r3
 8014f8e:	637b      	str	r3, [r7, #52]	@ 0x34
				continue;
 8014f90:	e058      	b.n	8015044 <f_write+0x32e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014f92:	69fb      	ldr	r3, [r7, #28]
 8014f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014f96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014f98:	429a      	cmp	r2, r3
 8014f9a:	d01b      	beq.n	8014fd4 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 8014f9c:	69fb      	ldr	r3, [r7, #28]
 8014f9e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8014fa2:	69fb      	ldr	r3, [r7, #28]
 8014fa4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014fa8:	4290      	cmp	r0, r2
 8014faa:	eb71 0303 	sbcs.w	r3, r1, r3
 8014fae:	d211      	bcs.n	8014fd4 <f_write+0x2be>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 8014fb0:	6a3b      	ldr	r3, [r7, #32]
 8014fb2:	7858      	ldrb	r0, [r3, #1]
 8014fb4:	69fb      	ldr	r3, [r7, #28]
 8014fb6:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8014fba:	2301      	movs	r3, #1
 8014fbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014fbe:	f7fb f93d 	bl	801023c <disk_read>
 8014fc2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d005      	beq.n	8014fd4 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 8014fc8:	69fb      	ldr	r3, [r7, #28]
 8014fca:	2201      	movs	r2, #1
 8014fcc:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8014fd0:	2301      	movs	r3, #1
 8014fd2:	e072      	b.n	80150ba <f_write+0x3a4>
			}
#endif
			fp->sect = sect;
 8014fd4:	69fb      	ldr	r3, [r7, #28]
 8014fd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014fd8:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8014fda:	6a3b      	ldr	r3, [r7, #32]
 8014fdc:	899b      	ldrh	r3, [r3, #12]
 8014fde:	4618      	mov	r0, r3
 8014fe0:	69fb      	ldr	r3, [r7, #28]
 8014fe2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8014fe6:	6a3b      	ldr	r3, [r7, #32]
 8014fe8:	899b      	ldrh	r3, [r3, #12]
 8014fea:	fbb2 f1f3 	udiv	r1, r2, r3
 8014fee:	fb01 f303 	mul.w	r3, r1, r3
 8014ff2:	1ad3      	subs	r3, r2, r3
 8014ff4:	1ac3      	subs	r3, r0, r3
 8014ff6:	637b      	str	r3, [r7, #52]	@ 0x34
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8014ff8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014ffa:	697b      	ldr	r3, [r7, #20]
 8014ffc:	429a      	cmp	r2, r3
 8014ffe:	d901      	bls.n	8015004 <f_write+0x2ee>
 8015000:	697b      	ldr	r3, [r7, #20]
 8015002:	637b      	str	r3, [r7, #52]	@ 0x34
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8015004:	69fb      	ldr	r3, [r7, #28]
 8015006:	f103 0454 	add.w	r4, r3, #84	@ 0x54
 801500a:	69fb      	ldr	r3, [r7, #28]
 801500c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8015010:	6a3b      	ldr	r3, [r7, #32]
 8015012:	899b      	ldrh	r3, [r3, #12]
 8015014:	b29b      	uxth	r3, r3
 8015016:	2200      	movs	r2, #0
 8015018:	603b      	str	r3, [r7, #0]
 801501a:	607a      	str	r2, [r7, #4]
 801501c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015020:	f7eb fb82 	bl	8000728 <__aeabi_uldivmod>
 8015024:	4613      	mov	r3, r2
 8015026:	4423      	add	r3, r4
 8015028:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801502a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801502c:	4618      	mov	r0, r3
 801502e:	f004 f97a 	bl	8019326 <memcpy>
		fp->flag |= FA_DIRTY;
 8015032:	69fb      	ldr	r3, [r7, #28]
 8015034:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015038:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801503c:	b2da      	uxtb	r2, r3
 801503e:	69fb      	ldr	r3, [r7, #28]
 8015040:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 8015044:	697a      	ldr	r2, [r7, #20]
 8015046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015048:	1ad3      	subs	r3, r2, r3
 801504a:	617b      	str	r3, [r7, #20]
 801504c:	693b      	ldr	r3, [r7, #16]
 801504e:	681a      	ldr	r2, [r3, #0]
 8015050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015052:	441a      	add	r2, r3
 8015054:	693b      	ldr	r3, [r7, #16]
 8015056:	601a      	str	r2, [r3, #0]
 8015058:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801505a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801505c:	4413      	add	r3, r2
 801505e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015060:	69fb      	ldr	r3, [r7, #28]
 8015062:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8015066:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8015068:	2000      	movs	r0, #0
 801506a:	4688      	mov	r8, r1
 801506c:	4681      	mov	r9, r0
 801506e:	eb12 0a08 	adds.w	sl, r2, r8
 8015072:	eb43 0b09 	adc.w	fp, r3, r9
 8015076:	69fb      	ldr	r3, [r7, #28]
 8015078:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	@ 0x38
 801507c:	69fb      	ldr	r3, [r7, #28]
 801507e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8015082:	69fb      	ldr	r3, [r7, #28]
 8015084:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8015088:	4290      	cmp	r0, r2
 801508a:	eb71 0403 	sbcs.w	r4, r1, r3
 801508e:	d201      	bcs.n	8015094 <f_write+0x37e>
 8015090:	4610      	mov	r0, r2
 8015092:	4619      	mov	r1, r3
 8015094:	69fb      	ldr	r3, [r7, #28]
 8015096:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801509a:	697b      	ldr	r3, [r7, #20]
 801509c:	2b00      	cmp	r3, #0
 801509e:	f47f ae82 	bne.w	8014da6 <f_write+0x90>
 80150a2:	e000      	b.n	80150a6 <f_write+0x390>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80150a4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80150a6:	69fb      	ldr	r3, [r7, #28]
 80150a8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80150ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80150b0:	b2da      	uxtb	r2, r3
 80150b2:	69fb      	ldr	r3, [r7, #28]
 80150b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

	LEAVE_FF(fs, FR_OK);
 80150b8:	2300      	movs	r3, #0
}
 80150ba:	4618      	mov	r0, r3
 80150bc:	3744      	adds	r7, #68	@ 0x44
 80150be:	46bd      	mov	sp, r7
 80150c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080150c4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Open file to be synced */
)
{
 80150c4:	b580      	push	{r7, lr}
 80150c6:	f5ad 6d99 	sub.w	sp, sp, #1224	@ 0x4c8
 80150ca:	af00      	add	r7, sp, #0
 80150cc:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 80150d0:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 80150d4:	6018      	str	r0, [r3, #0]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80150d6:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 80150da:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	f507 6297 	add.w	r2, r7, #1208	@ 0x4b8
 80150e4:	4611      	mov	r1, r2
 80150e6:	4618      	mov	r0, r3
 80150e8:	f7ff f848 	bl	801417c <validate>
 80150ec:	4603      	mov	r3, r0
 80150ee:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
	if (res == FR_OK) {
 80150f2:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	f040 8185 	bne.w	8015406 <f_sync+0x342>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80150fc:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 8015100:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8015104:	681b      	ldr	r3, [r3, #0]
 8015106:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801510a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801510e:	2b00      	cmp	r3, #0
 8015110:	f000 8179 	beq.w	8015406 <f_sync+0x342>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8015114:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 8015118:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 801511c:	681b      	ldr	r3, [r3, #0]
 801511e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015122:	b25b      	sxtb	r3, r3
 8015124:	2b00      	cmp	r3, #0
 8015126:	da28      	bge.n	801517a <f_sync+0xb6>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8015128:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 801512c:	7858      	ldrb	r0, [r3, #1]
 801512e:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 8015132:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8015136:	681b      	ldr	r3, [r3, #0]
 8015138:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 801513c:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 8015140:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8015144:	681b      	ldr	r3, [r3, #0]
 8015146:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015148:	2301      	movs	r3, #1
 801514a:	f7fb f897 	bl	801027c <disk_write>
 801514e:	4603      	mov	r3, r0
 8015150:	2b00      	cmp	r3, #0
 8015152:	d001      	beq.n	8015158 <f_sync+0x94>
 8015154:	2301      	movs	r3, #1
 8015156:	e158      	b.n	801540a <f_sync+0x346>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015158:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 801515c:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8015160:	681b      	ldr	r3, [r3, #0]
 8015162:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015166:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801516a:	b2da      	uxtb	r2, r3
 801516c:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 8015170:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8015174:	681b      	ldr	r3, [r3, #0]
 8015176:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801517a:	f7fb f8bd 	bl	80102f8 <get_fattime>
 801517e:	f8c7 04c0 	str.w	r0, [r7, #1216]	@ 0x4c0
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8015182:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 8015186:	781b      	ldrb	r3, [r3, #0]
 8015188:	2b04      	cmp	r3, #4
 801518a:	f040 80ca 	bne.w	8015322 <f_sync+0x25e>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 801518e:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 8015192:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8015196:	681b      	ldr	r3, [r3, #0]
 8015198:	4618      	mov	r0, r3
 801519a:	f7fc f917 	bl	80113cc <fill_first_frag>
 801519e:	4603      	mov	r3, r0
 80151a0:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
				if (res == FR_OK) {
 80151a4:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d112      	bne.n	80151d2 <f_sync+0x10e>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 80151ac:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 80151b0:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 80151b4:	6818      	ldr	r0, [r3, #0]
 80151b6:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 80151ba:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 80151be:	681b      	ldr	r3, [r3, #0]
 80151c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80151c2:	f04f 32ff 	mov.w	r2, #4294967295
 80151c6:	4619      	mov	r1, r3
 80151c8:	f7fc f92f 	bl	801142a <fill_last_frag>
 80151cc:	4603      	mov	r3, r0
 80151ce:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
				}
				if (res == FR_OK) {
 80151d2:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	f040 8115 	bne.w	8015406 <f_sync+0x342>
					DIR dj;
					DEF_NAMBUF

					INIT_NAMBUF(fs);
 80151dc:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 80151e0:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80151e4:	611a      	str	r2, [r3, #16]
 80151e6:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 80151ea:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 80151ee:	615a      	str	r2, [r3, #20]
					res = load_obj_xdir(&dj, &fp->obj);	/* Load directory entry block */
 80151f0:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 80151f4:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 80151f8:	681a      	ldr	r2, [r3, #0]
 80151fa:	f107 0308 	add.w	r3, r7, #8
 80151fe:	4611      	mov	r1, r2
 8015200:	4618      	mov	r0, r3
 8015202:	f7fd f934 	bl	801246e <load_obj_xdir>
 8015206:	4603      	mov	r3, r0
 8015208:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
					if (res == FR_OK) {
 801520c:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 8015210:	2b00      	cmp	r3, #0
 8015212:	f040 80f8 	bne.w	8015406 <f_sync+0x342>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive attribute to indicate that the file has been changed */
 8015216:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 801521a:	695b      	ldr	r3, [r3, #20]
 801521c:	3304      	adds	r3, #4
 801521e:	781a      	ldrb	r2, [r3, #0]
 8015220:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 8015224:	695b      	ldr	r3, [r3, #20]
 8015226:	3304      	adds	r3, #4
 8015228:	f042 0220 	orr.w	r2, r2, #32
 801522c:	b2d2      	uxtb	r2, r2
 801522e:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation information */
 8015230:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 8015234:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	79da      	ldrb	r2, [r3, #7]
 801523c:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 8015240:	695b      	ldr	r3, [r3, #20]
 8015242:	3321      	adds	r3, #33	@ 0x21
 8015244:	f042 0201 	orr.w	r2, r2, #1
 8015248:	b2d2      	uxtb	r2, r2
 801524a:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);		/* Update start cluster */
 801524c:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 8015250:	695b      	ldr	r3, [r3, #20]
 8015252:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8015256:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 801525a:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 801525e:	681b      	ldr	r3, [r3, #0]
 8015260:	689b      	ldr	r3, [r3, #8]
 8015262:	4619      	mov	r1, r3
 8015264:	4610      	mov	r0, r2
 8015266:	f7fb f980 	bl	801056a <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);		/* Update file size */
 801526a:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 801526e:	695b      	ldr	r3, [r3, #20]
 8015270:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8015274:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 8015278:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 801527c:	681b      	ldr	r3, [r3, #0]
 801527e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8015282:	4608      	mov	r0, r1
 8015284:	f7fb f99d 	bl	80105c2 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);	/* (FatFs does not support Valid File Size feature) */
 8015288:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 801528c:	695b      	ldr	r3, [r3, #20]
 801528e:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8015292:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 8015296:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 801529a:	681b      	ldr	r3, [r3, #0]
 801529c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80152a0:	4608      	mov	r0, r1
 80152a2:	f7fb f98e 	bl	80105c2 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 80152a6:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 80152aa:	695b      	ldr	r3, [r3, #20]
 80152ac:	330c      	adds	r3, #12
 80152ae:	f8d7 14c0 	ldr.w	r1, [r7, #1216]	@ 0x4c0
 80152b2:	4618      	mov	r0, r3
 80152b4:	f7fb f959 	bl	801056a <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 80152b8:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 80152bc:	695b      	ldr	r3, [r3, #20]
 80152be:	3315      	adds	r3, #21
 80152c0:	2200      	movs	r2, #0
 80152c2:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 80152c4:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 80152c8:	695b      	ldr	r3, [r3, #20]
 80152ca:	3310      	adds	r3, #16
 80152cc:	2100      	movs	r1, #0
 80152ce:	4618      	mov	r0, r3
 80152d0:	f7fb f94b 	bl	801056a <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 80152d4:	f107 0308 	add.w	r3, r7, #8
 80152d8:	4618      	mov	r0, r3
 80152da:	f7fd f901 	bl	80124e0 <store_xdir>
 80152de:	4603      	mov	r3, r0
 80152e0:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
						if (res == FR_OK) {
 80152e4:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	f040 808c 	bne.w	8015406 <f_sync+0x342>
							res = sync_fs(fs);
 80152ee:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 80152f2:	4618      	mov	r0, r3
 80152f4:	f7fb fc62 	bl	8010bbc <sync_fs>
 80152f8:	4603      	mov	r3, r0
 80152fa:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
							fp->flag &= (BYTE)~FA_MODIFIED;
 80152fe:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 8015302:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8015306:	681b      	ldr	r3, [r3, #0]
 8015308:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801530c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8015310:	b2da      	uxtb	r2, r3
 8015312:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 8015316:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 801531a:	681b      	ldr	r3, [r3, #0]
 801531c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8015320:	e071      	b.n	8015406 <f_sync+0x342>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8015322:	f8d7 24b8 	ldr.w	r2, [r7, #1208]	@ 0x4b8
 8015326:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 801532a:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 801532e:	681b      	ldr	r3, [r3, #0]
 8015330:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015332:	4619      	mov	r1, r3
 8015334:	4610      	mov	r0, r2
 8015336:	f7fb fc13 	bl	8010b60 <move_window>
 801533a:	4603      	mov	r3, r0
 801533c:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
				if (res == FR_OK) {
 8015340:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 8015344:	2b00      	cmp	r3, #0
 8015346:	d15e      	bne.n	8015406 <f_sync+0x342>
					dir = fp->dir_ptr;
 8015348:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 801534c:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8015350:	681b      	ldr	r3, [r3, #0]
 8015352:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015354:	f8c7 34bc 	str.w	r3, [r7, #1212]	@ 0x4bc
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 8015358:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 801535c:	330b      	adds	r3, #11
 801535e:	781a      	ldrb	r2, [r3, #0]
 8015360:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 8015364:	330b      	adds	r3, #11
 8015366:	f042 0220 	orr.w	r2, r2, #32
 801536a:	b2d2      	uxtb	r2, r2
 801536c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 801536e:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 8015372:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8015376:	681b      	ldr	r3, [r3, #0]
 8015378:	6818      	ldr	r0, [r3, #0]
 801537a:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 801537e:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8015382:	681b      	ldr	r3, [r3, #0]
 8015384:	689b      	ldr	r3, [r3, #8]
 8015386:	461a      	mov	r2, r3
 8015388:	f8d7 14bc 	ldr.w	r1, [r7, #1212]	@ 0x4bc
 801538c:	f7fc fcf3 	bl	8011d76 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8015390:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 8015394:	f103 001c 	add.w	r0, r3, #28
 8015398:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 801539c:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 80153a0:	681b      	ldr	r3, [r3, #0]
 80153a2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80153a6:	4613      	mov	r3, r2
 80153a8:	4619      	mov	r1, r3
 80153aa:	f7fb f8de 	bl	801056a <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80153ae:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 80153b2:	3316      	adds	r3, #22
 80153b4:	f8d7 14c0 	ldr.w	r1, [r7, #1216]	@ 0x4c0
 80153b8:	4618      	mov	r0, r3
 80153ba:	f7fb f8d6 	bl	801056a <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80153be:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 80153c2:	3312      	adds	r3, #18
 80153c4:	2100      	movs	r1, #0
 80153c6:	4618      	mov	r0, r3
 80153c8:	f7fb f8b4 	bl	8010534 <st_word>
					fs->wflag = 1;
 80153cc:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 80153d0:	2201      	movs	r2, #1
 80153d2:	711a      	strb	r2, [r3, #4]
					res = sync_fs(fs);					/* Restore it to the directory */
 80153d4:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 80153d8:	4618      	mov	r0, r3
 80153da:	f7fb fbef 	bl	8010bbc <sync_fs>
 80153de:	4603      	mov	r3, r0
 80153e0:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
					fp->flag &= (BYTE)~FA_MODIFIED;
 80153e4:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 80153e8:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80153f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80153f6:	b2da      	uxtb	r2, r3
 80153f8:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 80153fc:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8015400:	681b      	ldr	r3, [r3, #0]
 8015402:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8015406:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
}
 801540a:	4618      	mov	r0, r3
 801540c:	f507 6799 	add.w	r7, r7, #1224	@ 0x4c8
 8015410:	46bd      	mov	sp, r7
 8015412:	bd80      	pop	{r7, pc}

08015414 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Open file to be closed */
)
{
 8015414:	b580      	push	{r7, lr}
 8015416:	b084      	sub	sp, #16
 8015418:	af00      	add	r7, sp, #0
 801541a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801541c:	6878      	ldr	r0, [r7, #4]
 801541e:	f7ff fe51 	bl	80150c4 <f_sync>
 8015422:	4603      	mov	r3, r0
 8015424:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8015426:	7bfb      	ldrb	r3, [r7, #15]
 8015428:	2b00      	cmp	r3, #0
 801542a:	d118      	bne.n	801545e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	f107 0208 	add.w	r2, r7, #8
 8015432:	4611      	mov	r1, r2
 8015434:	4618      	mov	r0, r3
 8015436:	f7fe fea1 	bl	801417c <validate>
 801543a:	4603      	mov	r3, r0
 801543c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801543e:	7bfb      	ldrb	r3, [r7, #15]
 8015440:	2b00      	cmp	r3, #0
 8015442:	d10c      	bne.n	801545e <f_close+0x4a>
#if FF_FS_LOCK
			res = dec_share(fp->obj.lockid);		/* Decrement file open counter */
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015448:	4618      	mov	r0, r3
 801544a:	f7fb faed 	bl	8010a28 <dec_share>
 801544e:	4603      	mov	r3, r0
 8015450:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
 8015452:	7bfb      	ldrb	r3, [r7, #15]
 8015454:	2b00      	cmp	r3, #0
 8015456:	d102      	bne.n	801545e <f_close+0x4a>
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	2200      	movs	r2, #0
 801545c:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_volume(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801545e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015460:	4618      	mov	r0, r3
 8015462:	3710      	adds	r7, #16
 8015464:	46bd      	mov	sp, r7
 8015466:	bd80      	pop	{r7, pc}

08015468 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8015468:	b580      	push	{r7, lr}
 801546a:	f5ad 6d8e 	sub.w	sp, sp, #1136	@ 0x470
 801546e:	af00      	add	r7, sp, #0
 8015470:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8015474:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8015478:	6018      	str	r0, [r3, #0]
 801547a:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 801547e:	f5a3 638e 	sub.w	r3, r3, #1136	@ 0x470
 8015482:	6019      	str	r1, [r3, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8015484:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8015488:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801548c:	681b      	ldr	r3, [r3, #0]
 801548e:	2b00      	cmp	r3, #0
 8015490:	d101      	bne.n	8015496 <f_opendir+0x2e>
 8015492:	2309      	movs	r3, #9
 8015494:	e0fa      	b.n	801568c <f_opendir+0x224>

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
 8015496:	f507 618d 	add.w	r1, r7, #1128	@ 0x468
 801549a:	463b      	mov	r3, r7
 801549c:	2200      	movs	r2, #0
 801549e:	4618      	mov	r0, r3
 80154a0:	f7fe fade 	bl	8013a60 <mount_volume>
 80154a4:	4603      	mov	r3, r0
 80154a6:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
	if (res == FR_OK) {
 80154aa:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	f040 80df 	bne.w	8015672 <f_opendir+0x20a>
		dp->obj.fs = fs;
 80154b4:	f8d7 2468 	ldr.w	r2, [r7, #1128]	@ 0x468
 80154b8:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 80154bc:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 80154c0:	681b      	ldr	r3, [r3, #0]
 80154c2:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 80154c4:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 80154c8:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 80154cc:	611a      	str	r2, [r3, #16]
 80154ce:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 80154d2:	f107 0208 	add.w	r2, r7, #8
 80154d6:	615a      	str	r2, [r3, #20]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80154d8:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 80154dc:	f5a3 638e 	sub.w	r3, r3, #1136	@ 0x470
 80154e0:	681a      	ldr	r2, [r3, #0]
 80154e2:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 80154e6:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 80154ea:	4611      	mov	r1, r2
 80154ec:	6818      	ldr	r0, [r3, #0]
 80154ee:	f7fe f859 	bl	80135a4 <follow_path>
 80154f2:	4603      	mov	r3, r0
 80154f4:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
		if (res == FR_OK) {						/* Follow completed */
 80154f8:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	f040 80b1 	bne.w	8015664 <f_opendir+0x1fc>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8015502:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8015506:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801550a:	681b      	ldr	r3, [r3, #0]
 801550c:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8015510:	b25b      	sxtb	r3, r3
 8015512:	2b00      	cmp	r3, #0
 8015514:	db60      	blt.n	80155d8 <f_opendir+0x170>
				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
 8015516:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 801551a:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801551e:	681b      	ldr	r3, [r3, #0]
 8015520:	799b      	ldrb	r3, [r3, #6]
 8015522:	f003 0310 	and.w	r3, r3, #16
 8015526:	2b00      	cmp	r3, #0
 8015528:	d053      	beq.n	80155d2 <f_opendir+0x16a>
#if FF_FS_EXFAT
					if (fs->fs_type == FS_EXFAT) {
 801552a:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 801552e:	781b      	ldrb	r3, [r3, #0]
 8015530:	2b04      	cmp	r3, #4
 8015532:	d13a      	bne.n	80155aa <f_opendir+0x142>
						dp->obj.c_scl = dp->obj.sclust;	/* Get containing directory inforamation */
 8015534:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8015538:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801553c:	681b      	ldr	r3, [r3, #0]
 801553e:	689a      	ldr	r2, [r3, #8]
 8015540:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8015544:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8015548:	681b      	ldr	r3, [r3, #0]
 801554a:	621a      	str	r2, [r3, #32]
						dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 801554c:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8015550:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8015554:	681b      	ldr	r3, [r3, #0]
 8015556:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801555a:	4613      	mov	r3, r2
 801555c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8015560:	f507 628e 	add.w	r2, r7, #1136	@ 0x470
 8015564:	f2a2 426c 	subw	r2, r2, #1132	@ 0x46c
 8015568:	6812      	ldr	r2, [r2, #0]
 801556a:	79d2      	ldrb	r2, [r2, #7]
 801556c:	431a      	orrs	r2, r3
 801556e:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8015572:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8015576:	681b      	ldr	r3, [r3, #0]
 8015578:	625a      	str	r2, [r3, #36]	@ 0x24
						dp->obj.c_ofs = dp->blk_ofs;
 801557a:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 801557e:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8015582:	681b      	ldr	r3, [r3, #0]
 8015584:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015586:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 801558a:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801558e:	681b      	ldr	r3, [r3, #0]
 8015590:	629a      	str	r2, [r3, #40]	@ 0x28
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
 8015592:	f8d7 2468 	ldr.w	r2, [r7, #1128]	@ 0x468
 8015596:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 801559a:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801559e:	681b      	ldr	r3, [r3, #0]
 80155a0:	4619      	mov	r1, r3
 80155a2:	4610      	mov	r0, r2
 80155a4:	f7fc ff3a 	bl	801241c <init_alloc_info>
 80155a8:	e016      	b.n	80155d8 <f_opendir+0x170>
					} else
#endif
					{
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80155aa:	f8d7 2468 	ldr.w	r2, [r7, #1128]	@ 0x468
 80155ae:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 80155b2:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 80155b6:	681b      	ldr	r3, [r3, #0]
 80155b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80155ba:	4619      	mov	r1, r3
 80155bc:	4610      	mov	r0, r2
 80155be:	f7fc fbbb 	bl	8011d38 <ld_clust>
 80155c2:	4602      	mov	r2, r0
 80155c4:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 80155c8:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 80155cc:	681b      	ldr	r3, [r3, #0]
 80155ce:	609a      	str	r2, [r3, #8]
 80155d0:	e002      	b.n	80155d8 <f_opendir+0x170>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80155d2:	2305      	movs	r3, #5
 80155d4:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
				}
			}
			if (res == FR_OK) {
 80155d8:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d141      	bne.n	8015664 <f_opendir+0x1fc>
				dp->obj.id = fs->id;
 80155e0:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 80155e4:	88da      	ldrh	r2, [r3, #6]
 80155e6:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 80155ea:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 80155ee:	681b      	ldr	r3, [r3, #0]
 80155f0:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80155f2:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 80155f6:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 80155fa:	2100      	movs	r1, #0
 80155fc:	6818      	ldr	r0, [r3, #0]
 80155fe:	f7fc f9f6 	bl	80119ee <dir_sdi>
 8015602:	4603      	mov	r3, r0
 8015604:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
#if FF_FS_LOCK
				if (res == FR_OK) {
 8015608:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 801560c:	2b00      	cmp	r3, #0
 801560e:	d129      	bne.n	8015664 <f_opendir+0x1fc>
					if (dp->obj.sclust != 0) {
 8015610:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8015614:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8015618:	681b      	ldr	r3, [r3, #0]
 801561a:	689b      	ldr	r3, [r3, #8]
 801561c:	2b00      	cmp	r3, #0
 801561e:	d01a      	beq.n	8015656 <f_opendir+0x1ee>
						dp->obj.lockid = inc_share(dp, 0);	/* Lock the sub directory */
 8015620:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8015624:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8015628:	2100      	movs	r1, #0
 801562a:	6818      	ldr	r0, [r3, #0]
 801562c:	f7fb f96e 	bl	801090c <inc_share>
 8015630:	4602      	mov	r2, r0
 8015632:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8015636:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801563a:	681b      	ldr	r3, [r3, #0]
 801563c:	62da      	str	r2, [r3, #44]	@ 0x2c
						if (!dp->obj.lockid) res = FR_TOO_MANY_OPEN_FILES;
 801563e:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8015642:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8015646:	681b      	ldr	r3, [r3, #0]
 8015648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801564a:	2b00      	cmp	r3, #0
 801564c:	d10a      	bne.n	8015664 <f_opendir+0x1fc>
 801564e:	2312      	movs	r3, #18
 8015650:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
 8015654:	e006      	b.n	8015664 <f_opendir+0x1fc>
					} else {
						dp->obj.lockid = 0;	/* Root directory need not to be locked */
 8015656:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 801565a:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801565e:	681b      	ldr	r3, [r3, #0]
 8015660:	2200      	movs	r2, #0
 8015662:	62da      	str	r2, [r3, #44]	@ 0x2c
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8015664:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 8015668:	2b04      	cmp	r3, #4
 801566a:	d102      	bne.n	8015672 <f_opendir+0x20a>
 801566c:	2305      	movs	r3, #5
 801566e:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
	}
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function failed */
 8015672:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 8015676:	2b00      	cmp	r3, #0
 8015678:	d006      	beq.n	8015688 <f_opendir+0x220>
 801567a:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 801567e:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8015682:	681b      	ldr	r3, [r3, #0]
 8015684:	2200      	movs	r2, #0
 8015686:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8015688:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
}
 801568c:	4618      	mov	r0, r3
 801568e:	f507 678e 	add.w	r7, r7, #1136	@ 0x470
 8015692:	46bd      	mov	sp, r7
 8015694:	bd80      	pop	{r7, pc}

08015696 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8015696:	b580      	push	{r7, lr}
 8015698:	b084      	sub	sp, #16
 801569a:	af00      	add	r7, sp, #0
 801569c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	f107 0208 	add.w	r2, r7, #8
 80156a4:	4611      	mov	r1, r2
 80156a6:	4618      	mov	r0, r3
 80156a8:	f7fe fd68 	bl	801417c <validate>
 80156ac:	4603      	mov	r3, r0
 80156ae:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80156b0:	7bfb      	ldrb	r3, [r7, #15]
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d110      	bne.n	80156d8 <f_closedir+0x42>
#if FF_FS_LOCK
		if (dp->obj.lockid) res = dec_share(dp->obj.lockid);	/* Decrement sub-directory open counter */
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d006      	beq.n	80156cc <f_closedir+0x36>
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80156c2:	4618      	mov	r0, r3
 80156c4:	f7fb f9b0 	bl	8010a28 <dec_share>
 80156c8:	4603      	mov	r3, r0
 80156ca:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) dp->obj.fs = 0;	/* Invalidate directory object */
 80156cc:	7bfb      	ldrb	r3, [r7, #15]
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	d102      	bne.n	80156d8 <f_closedir+0x42>
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	2200      	movs	r2, #0
 80156d6:	601a      	str	r2, [r3, #0]
#endif
#if FF_FS_REENTRANT
		unlock_volume(fs, FR_OK);	/* Unlock volume */
#endif
	}
	return res;
 80156d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80156da:	4618      	mov	r0, r3
 80156dc:	3710      	adds	r7, #16
 80156de:	46bd      	mov	sp, r7
 80156e0:	bd80      	pop	{r7, pc}

080156e2 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80156e2:	b580      	push	{r7, lr}
 80156e4:	f5ad 6d8e 	sub.w	sp, sp, #1136	@ 0x470
 80156e8:	af00      	add	r7, sp, #0
 80156ea:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 80156ee:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 80156f2:	6018      	str	r0, [r3, #0]
 80156f4:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 80156f8:	f5a3 638e 	sub.w	r3, r3, #1136	@ 0x470
 80156fc:	6019      	str	r1, [r3, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80156fe:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8015702:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8015706:	681b      	ldr	r3, [r3, #0]
 8015708:	f507 628d 	add.w	r2, r7, #1128	@ 0x468
 801570c:	4611      	mov	r1, r2
 801570e:	4618      	mov	r0, r3
 8015710:	f7fe fd34 	bl	801417c <validate>
 8015714:	4603      	mov	r3, r0
 8015716:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
	if (res == FR_OK) {
 801571a:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 801571e:	2b00      	cmp	r3, #0
 8015720:	d150      	bne.n	80157c4 <f_readdir+0xe2>
		if (!fno) {
 8015722:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8015726:	f5a3 638e 	sub.w	r3, r3, #1136	@ 0x470
 801572a:	681b      	ldr	r3, [r3, #0]
 801572c:	2b00      	cmp	r3, #0
 801572e:	d10b      	bne.n	8015748 <f_readdir+0x66>
			res = dir_sdi(dp, 0);		/* Rewind the directory object */
 8015730:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8015734:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8015738:	2100      	movs	r1, #0
 801573a:	6818      	ldr	r0, [r3, #0]
 801573c:	f7fc f957 	bl	80119ee <dir_sdi>
 8015740:	4603      	mov	r3, r0
 8015742:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
 8015746:	e03d      	b.n	80157c4 <f_readdir+0xe2>
		} else {
			INIT_NAMBUF(fs);
 8015748:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 801574c:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8015750:	611a      	str	r2, [r3, #16]
 8015752:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 8015756:	f107 0208 	add.w	r2, r7, #8
 801575a:	615a      	str	r2, [r3, #20]
			res = DIR_READ_FILE(dp);		/* Read an item */
 801575c:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8015760:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8015764:	2100      	movs	r1, #0
 8015766:	6818      	ldr	r0, [r3, #0]
 8015768:	f7fc ff7e 	bl	8012668 <dir_read>
 801576c:	4603      	mov	r3, r0
 801576e:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8015772:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 8015776:	2b04      	cmp	r3, #4
 8015778:	d102      	bne.n	8015780 <f_readdir+0x9e>
 801577a:	2300      	movs	r3, #0
 801577c:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
			if (res == FR_OK) {				/* A valid entry is found */
 8015780:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 8015784:	2b00      	cmp	r3, #0
 8015786:	d11d      	bne.n	80157c4 <f_readdir+0xe2>
				get_fileinfo(dp, fno);		/* Get the object information */
 8015788:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 801578c:	f5a3 628e 	sub.w	r2, r3, #1136	@ 0x470
 8015790:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8015794:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8015798:	6811      	ldr	r1, [r2, #0]
 801579a:	6818      	ldr	r0, [r3, #0]
 801579c:	f7fd fb0c 	bl	8012db8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80157a0:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 80157a4:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 80157a8:	2100      	movs	r1, #0
 80157aa:	6818      	ldr	r0, [r3, #0]
 80157ac:	f7fc f9b3 	bl	8011b16 <dir_next>
 80157b0:	4603      	mov	r3, r0
 80157b2:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80157b6:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 80157ba:	2b04      	cmp	r3, #4
 80157bc:	d102      	bne.n	80157c4 <f_readdir+0xe2>
 80157be:	2300      	movs	r3, #0
 80157c0:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80157c4:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
}
 80157c8:	4618      	mov	r0, r3
 80157ca:	f507 678e 	add.w	r7, r7, #1136	@ 0x470
 80157ce:	46bd      	mov	sp, r7
 80157d0:	bd80      	pop	{r7, pc}
	...

080157d4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80157d4:	b480      	push	{r7}
 80157d6:	b087      	sub	sp, #28
 80157d8:	af00      	add	r7, sp, #0
 80157da:	60f8      	str	r0, [r7, #12]
 80157dc:	60b9      	str	r1, [r7, #8]
 80157de:	4613      	mov	r3, r2
 80157e0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80157e2:	2301      	movs	r3, #1
 80157e4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80157e6:	2300      	movs	r3, #0
 80157e8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < FF_VOLUMES)
 80157ea:	4b1f      	ldr	r3, [pc, #124]	@ (8015868 <FATFS_LinkDriverEx+0x94>)
 80157ec:	7b9b      	ldrb	r3, [r3, #14]
 80157ee:	b2db      	uxtb	r3, r3
 80157f0:	2b01      	cmp	r3, #1
 80157f2:	d831      	bhi.n	8015858 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80157f4:	4b1c      	ldr	r3, [pc, #112]	@ (8015868 <FATFS_LinkDriverEx+0x94>)
 80157f6:	7b9b      	ldrb	r3, [r3, #14]
 80157f8:	b2db      	uxtb	r3, r3
 80157fa:	461a      	mov	r2, r3
 80157fc:	4b1a      	ldr	r3, [pc, #104]	@ (8015868 <FATFS_LinkDriverEx+0x94>)
 80157fe:	2100      	movs	r1, #0
 8015800:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8015802:	4b19      	ldr	r3, [pc, #100]	@ (8015868 <FATFS_LinkDriverEx+0x94>)
 8015804:	7b9b      	ldrb	r3, [r3, #14]
 8015806:	b2db      	uxtb	r3, r3
 8015808:	4a17      	ldr	r2, [pc, #92]	@ (8015868 <FATFS_LinkDriverEx+0x94>)
 801580a:	009b      	lsls	r3, r3, #2
 801580c:	4413      	add	r3, r2
 801580e:	68fa      	ldr	r2, [r7, #12]
 8015810:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8015812:	4b15      	ldr	r3, [pc, #84]	@ (8015868 <FATFS_LinkDriverEx+0x94>)
 8015814:	7b9b      	ldrb	r3, [r3, #14]
 8015816:	b2db      	uxtb	r3, r3
 8015818:	461a      	mov	r2, r3
 801581a:	4b13      	ldr	r3, [pc, #76]	@ (8015868 <FATFS_LinkDriverEx+0x94>)
 801581c:	4413      	add	r3, r2
 801581e:	79fa      	ldrb	r2, [r7, #7]
 8015820:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 8015822:	4b11      	ldr	r3, [pc, #68]	@ (8015868 <FATFS_LinkDriverEx+0x94>)
 8015824:	7b9b      	ldrb	r3, [r3, #14]
 8015826:	b2db      	uxtb	r3, r3
 8015828:	1c5a      	adds	r2, r3, #1
 801582a:	b2d1      	uxtb	r1, r2
 801582c:	4a0e      	ldr	r2, [pc, #56]	@ (8015868 <FATFS_LinkDriverEx+0x94>)
 801582e:	7391      	strb	r1, [r2, #14]
 8015830:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8015832:	7dbb      	ldrb	r3, [r7, #22]
 8015834:	3330      	adds	r3, #48	@ 0x30
 8015836:	b2da      	uxtb	r2, r3
 8015838:	68bb      	ldr	r3, [r7, #8]
 801583a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801583c:	68bb      	ldr	r3, [r7, #8]
 801583e:	3301      	adds	r3, #1
 8015840:	223a      	movs	r2, #58	@ 0x3a
 8015842:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8015844:	68bb      	ldr	r3, [r7, #8]
 8015846:	3302      	adds	r3, #2
 8015848:	222f      	movs	r2, #47	@ 0x2f
 801584a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801584c:	68bb      	ldr	r3, [r7, #8]
 801584e:	3303      	adds	r3, #3
 8015850:	2200      	movs	r2, #0
 8015852:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8015854:	2300      	movs	r3, #0
 8015856:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8015858:	7dfb      	ldrb	r3, [r7, #23]
}
 801585a:	4618      	mov	r0, r3
 801585c:	371c      	adds	r7, #28
 801585e:	46bd      	mov	sp, r7
 8015860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015864:	4770      	bx	lr
 8015866:	bf00      	nop
 8015868:	2400212c 	.word	0x2400212c

0801586c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801586c:	b580      	push	{r7, lr}
 801586e:	b082      	sub	sp, #8
 8015870:	af00      	add	r7, sp, #0
 8015872:	6078      	str	r0, [r7, #4]
 8015874:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8015876:	2200      	movs	r2, #0
 8015878:	6839      	ldr	r1, [r7, #0]
 801587a:	6878      	ldr	r0, [r7, #4]
 801587c:	f7ff ffaa 	bl	80157d4 <FATFS_LinkDriverEx>
 8015880:	4603      	mov	r3, r0
}
 8015882:	4618      	mov	r0, r3
 8015884:	3708      	adds	r7, #8
 8015886:	46bd      	mov	sp, r7
 8015888:	bd80      	pop	{r7, pc}
	...

0801588c <MMC2_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS MMC2_CheckStatus(BYTE lun)
{
 801588c:	b580      	push	{r7, lr}
 801588e:	b082      	sub	sp, #8
 8015890:	af00      	add	r7, sp, #0
 8015892:	4603      	mov	r3, r0
 8015894:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8015896:	4b0c      	ldr	r3, [pc, #48]	@ (80158c8 <MMC2_CheckStatus+0x3c>)
 8015898:	2201      	movs	r2, #1
 801589a:	701a      	strb	r2, [r3, #0]
//  while (HAL_HSEM_FastTake(EMMC_HSEM_ID) != HAL_OK)
//  {
//  }

  if((BSP_MMC_GetCardState(&hmmc2) == BSP_ERROR_NONE))
 801589c:	480b      	ldr	r0, [pc, #44]	@ (80158cc <MMC2_CheckStatus+0x40>)
 801589e:	f7ed fd3f 	bl	8003320 <BSP_MMC_GetCardState>
 80158a2:	4603      	mov	r3, r0
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d107      	bne.n	80158b8 <MMC2_CheckStatus+0x2c>
  {
    Stat &= ~STA_NOINIT;
 80158a8:	4b07      	ldr	r3, [pc, #28]	@ (80158c8 <MMC2_CheckStatus+0x3c>)
 80158aa:	781b      	ldrb	r3, [r3, #0]
 80158ac:	b2db      	uxtb	r3, r3
 80158ae:	f023 0301 	bic.w	r3, r3, #1
 80158b2:	b2da      	uxtb	r2, r3
 80158b4:	4b04      	ldr	r3, [pc, #16]	@ (80158c8 <MMC2_CheckStatus+0x3c>)
 80158b6:	701a      	strb	r2, [r3, #0]
  }

 // HAL_HSEM_Release(EMMC_HSEM_ID, 0);

  return Stat;
 80158b8:	4b03      	ldr	r3, [pc, #12]	@ (80158c8 <MMC2_CheckStatus+0x3c>)
 80158ba:	781b      	ldrb	r3, [r3, #0]
 80158bc:	b2db      	uxtb	r3, r3
}
 80158be:	4618      	mov	r0, r3
 80158c0:	3708      	adds	r7, #8
 80158c2:	46bd      	mov	sp, r7
 80158c4:	bd80      	pop	{r7, pc}
 80158c6:	bf00      	nop
 80158c8:	24000246 	.word	0x24000246
 80158cc:	24001db0 	.word	0x24001db0

080158d0 <MMC2_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS MMC2_initialize(BYTE lun)
{
 80158d0:	b580      	push	{r7, lr}
 80158d2:	b082      	sub	sp, #8
 80158d4:	af00      	add	r7, sp, #0
 80158d6:	4603      	mov	r3, r0
 80158d8:	71fb      	strb	r3, [r7, #7]

//  while (HAL_HSEM_FastTake(EMMC_HSEM_ID) != HAL_OK)
//  {
//  }

  if(BSP_MMC_Init(&hmmc2) == BSP_ERROR_NONE)
 80158da:	480a      	ldr	r0, [pc, #40]	@ (8015904 <MMC2_initialize+0x34>)
 80158dc:	f7ed fcb2 	bl	8003244 <BSP_MMC_Init>
 80158e0:	4603      	mov	r3, r0
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d107      	bne.n	80158f6 <MMC2_initialize+0x26>
  {
    //HAL_HSEM_Release(EMMC_HSEM_ID, 0);
    Stat = MMC2_CheckStatus(lun);
 80158e6:	79fb      	ldrb	r3, [r7, #7]
 80158e8:	4618      	mov	r0, r3
 80158ea:	f7ff ffcf 	bl	801588c <MMC2_CheckStatus>
 80158ee:	4603      	mov	r3, r0
 80158f0:	461a      	mov	r2, r3
 80158f2:	4b05      	ldr	r3, [pc, #20]	@ (8015908 <MMC2_initialize+0x38>)
 80158f4:	701a      	strb	r2, [r3, #0]
  }
#else
  Stat = MMC2_CheckStatus(lun);

#endif
  return Stat;
 80158f6:	4b04      	ldr	r3, [pc, #16]	@ (8015908 <MMC2_initialize+0x38>)
 80158f8:	781b      	ldrb	r3, [r3, #0]
 80158fa:	b2db      	uxtb	r3, r3
}
 80158fc:	4618      	mov	r0, r3
 80158fe:	3708      	adds	r7, #8
 8015900:	46bd      	mov	sp, r7
 8015902:	bd80      	pop	{r7, pc}
 8015904:	24001db0 	.word	0x24001db0
 8015908:	24000246 	.word	0x24000246

0801590c <MMC2_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS MMC2_status(BYTE lun)
{
 801590c:	b580      	push	{r7, lr}
 801590e:	b082      	sub	sp, #8
 8015910:	af00      	add	r7, sp, #0
 8015912:	4603      	mov	r3, r0
 8015914:	71fb      	strb	r3, [r7, #7]
  return MMC2_CheckStatus(lun);
 8015916:	79fb      	ldrb	r3, [r7, #7]
 8015918:	4618      	mov	r0, r3
 801591a:	f7ff ffb7 	bl	801588c <MMC2_CheckStatus>
 801591e:	4603      	mov	r3, r0
}
 8015920:	4618      	mov	r0, r3
 8015922:	3708      	adds	r7, #8
 8015924:	46bd      	mov	sp, r7
 8015926:	bd80      	pop	{r7, pc}

08015928 <MMC2_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT MMC2_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8015928:	b580      	push	{r7, lr}
 801592a:	b086      	sub	sp, #24
 801592c:	af00      	add	r7, sp, #0
 801592e:	60b9      	str	r1, [r7, #8]
 8015930:	607a      	str	r2, [r7, #4]
 8015932:	603b      	str	r3, [r7, #0]
 8015934:	4603      	mov	r3, r0
 8015936:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8015938:	2301      	movs	r3, #1
 801593a:	75fb      	strb	r3, [r7, #23]
  ReadStatus = 0;
 801593c:	4b0e      	ldr	r3, [pc, #56]	@ (8015978 <MMC2_read+0x50>)
 801593e:	2200      	movs	r2, #0
 8015940:	601a      	str	r2, [r3, #0]
//  while (HAL_HSEM_FastTake(EMMC_HSEM_ID) != HAL_OK)
//  {
//  }


  if(BSP_MMC_ReadBlocks(&hmmc2, (uint32_t*)buff,
 8015942:	683b      	ldr	r3, [r7, #0]
 8015944:	687a      	ldr	r2, [r7, #4]
 8015946:	68b9      	ldr	r1, [r7, #8]
 8015948:	480c      	ldr	r0, [pc, #48]	@ (801597c <MMC2_read+0x54>)
 801594a:	f7ed fca5 	bl	8003298 <BSP_MMC_ReadBlocks>
 801594e:	4603      	mov	r3, r0
 8015950:	2b00      	cmp	r3, #0
 8015952:	d109      	bne.n	8015968 <MMC2_read+0x40>
                        (uint32_t) (sector),
                        count) == BSP_ERROR_NONE)
  {
    while(BSP_MMC_GetCardState(&hmmc2) != BSP_ERROR_NONE)
 8015954:	bf00      	nop
 8015956:	4809      	ldr	r0, [pc, #36]	@ (801597c <MMC2_read+0x54>)
 8015958:	f7ed fce2 	bl	8003320 <BSP_MMC_GetCardState>
 801595c:	4603      	mov	r3, r0
 801595e:	2b00      	cmp	r3, #0
 8015960:	d1f9      	bne.n	8015956 <MMC2_read+0x2e>
    {
    }
      res = RES_OK;
 8015962:	2300      	movs	r3, #0
 8015964:	75fb      	strb	r3, [r7, #23]
 8015966:	e001      	b.n	801596c <MMC2_read+0x44>
      SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
  }
  else
  {
    res = RES_NOTRDY;
 8015968:	2303      	movs	r3, #3
 801596a:	75fb      	strb	r3, [r7, #23]
  }

  //HAL_HSEM_Release(EMMC_HSEM_ID, 0);
  return res;
 801596c:	7dfb      	ldrb	r3, [r7, #23]
}
 801596e:	4618      	mov	r0, r3
 8015970:	3718      	adds	r7, #24
 8015972:	46bd      	mov	sp, r7
 8015974:	bd80      	pop	{r7, pc}
 8015976:	bf00      	nop
 8015978:	24002140 	.word	0x24002140
 801597c:	24001db0 	.word	0x24001db0

08015980 <MMC2_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT MMC2_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8015980:	b580      	push	{r7, lr}
 8015982:	b086      	sub	sp, #24
 8015984:	af00      	add	r7, sp, #0
 8015986:	60b9      	str	r1, [r7, #8]
 8015988:	607a      	str	r2, [r7, #4]
 801598a:	603b      	str	r3, [r7, #0]
 801598c:	4603      	mov	r3, r0
 801598e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8015990:	2301      	movs	r3, #1
 8015992:	75fb      	strb	r3, [r7, #23]
  WriteStatus = 0;
 8015994:	4b0c      	ldr	r3, [pc, #48]	@ (80159c8 <MMC2_write+0x48>)
 8015996:	2200      	movs	r2, #0
 8015998:	601a      	str	r2, [r3, #0]
  */

//  while (HAL_HSEM_FastTake(EMMC_HSEM_ID) != HAL_OK)
//  {
//  }
  if(BSP_MMC_WriteBlocks(&hmmc2, (uint32_t*)buff,
 801599a:	683b      	ldr	r3, [r7, #0]
 801599c:	687a      	ldr	r2, [r7, #4]
 801599e:	68b9      	ldr	r1, [r7, #8]
 80159a0:	480a      	ldr	r0, [pc, #40]	@ (80159cc <MMC2_write+0x4c>)
 80159a2:	f7ed fc9b 	bl	80032dc <BSP_MMC_WriteBlocks>
 80159a6:	4603      	mov	r3, r0
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d108      	bne.n	80159be <MMC2_write+0x3e>
                            (uint32_t)(sector),
                            count) == BSP_ERROR_NONE)
  {
    while(BSP_MMC_GetCardState(&hmmc2) != BSP_ERROR_NONE)
 80159ac:	bf00      	nop
 80159ae:	4807      	ldr	r0, [pc, #28]	@ (80159cc <MMC2_write+0x4c>)
 80159b0:	f7ed fcb6 	bl	8003320 <BSP_MMC_GetCardState>
 80159b4:	4603      	mov	r3, r0
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	d1f9      	bne.n	80159ae <MMC2_write+0x2e>
    {
    }
    res = RES_OK;
 80159ba:	2300      	movs	r3, #0
 80159bc:	75fb      	strb	r3, [r7, #23]
  }
 // HAL_HSEM_Release(EMMC_HSEM_ID, 0);
  return res;
 80159be:	7dfb      	ldrb	r3, [r7, #23]
}
 80159c0:	4618      	mov	r0, r3
 80159c2:	3718      	adds	r7, #24
 80159c4:	46bd      	mov	sp, r7
 80159c6:	bd80      	pop	{r7, pc}
 80159c8:	2400213c 	.word	0x2400213c
 80159cc:	24001db0 	.word	0x24001db0

080159d0 <MMC2_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT MMC2_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80159d0:	b580      	push	{r7, lr}
 80159d2:	b08a      	sub	sp, #40	@ 0x28
 80159d4:	af00      	add	r7, sp, #0
 80159d6:	4603      	mov	r3, r0
 80159d8:	603a      	str	r2, [r7, #0]
 80159da:	71fb      	strb	r3, [r7, #7]
 80159dc:	460b      	mov	r3, r1
 80159de:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80159e0:	2301      	movs	r3, #1
 80159e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  BSP_MMC_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80159e6:	4b2a      	ldr	r3, [pc, #168]	@ (8015a90 <MMC2_ioctl+0xc0>)
 80159e8:	781b      	ldrb	r3, [r3, #0]
 80159ea:	b2db      	uxtb	r3, r3
 80159ec:	f003 0301 	and.w	r3, r3, #1
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d001      	beq.n	80159f8 <MMC2_ioctl+0x28>
 80159f4:	2303      	movs	r3, #3
 80159f6:	e046      	b.n	8015a86 <MMC2_ioctl+0xb6>

//  while ( HAL_HSEM_FastTake(EMMC_HSEM_ID) != HAL_OK)
//  {
//  }

  switch (cmd)
 80159f8:	79bb      	ldrb	r3, [r7, #6]
 80159fa:	2b03      	cmp	r3, #3
 80159fc:	d837      	bhi.n	8015a6e <MMC2_ioctl+0x9e>
 80159fe:	a201      	add	r2, pc, #4	@ (adr r2, 8015a04 <MMC2_ioctl+0x34>)
 8015a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a04:	08015a15 	.word	0x08015a15
 8015a08:	08015a1d 	.word	0x08015a1d
 8015a0c:	08015a37 	.word	0x08015a37
 8015a10:	08015a53 	.word	0x08015a53
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8015a14:	2300      	movs	r3, #0
 8015a16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 8015a1a:	e02b      	b.n	8015a74 <MMC2_ioctl+0xa4>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_MMC_GetCardInfo(&hmmc2, &CardInfo);
 8015a1c:	f107 0308 	add.w	r3, r7, #8
 8015a20:	4619      	mov	r1, r3
 8015a22:	481c      	ldr	r0, [pc, #112]	@ (8015a94 <MMC2_ioctl+0xc4>)
 8015a24:	f7ed fc8d 	bl	8003342 <BSP_MMC_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8015a28:	69fa      	ldr	r2, [r7, #28]
 8015a2a:	683b      	ldr	r3, [r7, #0]
 8015a2c:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8015a2e:	2300      	movs	r3, #0
 8015a30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 8015a34:	e01e      	b.n	8015a74 <MMC2_ioctl+0xa4>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_MMC_GetCardInfo(&hmmc2, &CardInfo);
 8015a36:	f107 0308 	add.w	r3, r7, #8
 8015a3a:	4619      	mov	r1, r3
 8015a3c:	4815      	ldr	r0, [pc, #84]	@ (8015a94 <MMC2_ioctl+0xc4>)
 8015a3e:	f7ed fc80 	bl	8003342 <BSP_MMC_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8015a42:	6a3b      	ldr	r3, [r7, #32]
 8015a44:	b29a      	uxth	r2, r3
 8015a46:	683b      	ldr	r3, [r7, #0]
 8015a48:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8015a4a:	2300      	movs	r3, #0
 8015a4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 8015a50:	e010      	b.n	8015a74 <MMC2_ioctl+0xa4>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_MMC_GetCardInfo(&hmmc2, &CardInfo);
 8015a52:	f107 0308 	add.w	r3, r7, #8
 8015a56:	4619      	mov	r1, r3
 8015a58:	480e      	ldr	r0, [pc, #56]	@ (8015a94 <MMC2_ioctl+0xc4>)
 8015a5a:	f7ed fc72 	bl	8003342 <BSP_MMC_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / MMC_DEFAULT_BLOCK_SIZE;
 8015a5e:	6a3b      	ldr	r3, [r7, #32]
 8015a60:	0a5a      	lsrs	r2, r3, #9
 8015a62:	683b      	ldr	r3, [r7, #0]
 8015a64:	601a      	str	r2, [r3, #0]
	res = RES_OK;
 8015a66:	2300      	movs	r3, #0
 8015a68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 8015a6c:	e002      	b.n	8015a74 <MMC2_ioctl+0xa4>

  default:
    res = RES_PARERR;
 8015a6e:	2304      	movs	r3, #4
 8015a70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  while(BSP_MMC_GetCardState(&hmmc2) != BSP_ERROR_NONE)
 8015a74:	bf00      	nop
 8015a76:	4807      	ldr	r0, [pc, #28]	@ (8015a94 <MMC2_ioctl+0xc4>)
 8015a78:	f7ed fc52 	bl	8003320 <BSP_MMC_GetCardState>
 8015a7c:	4603      	mov	r3, r0
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d1f9      	bne.n	8015a76 <MMC2_ioctl+0xa6>
  {
  }

 // HAL_HSEM_Release(EMMC_HSEM_ID, 0);
  return res;
 8015a82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8015a86:	4618      	mov	r0, r3
 8015a88:	3728      	adds	r7, #40	@ 0x28
 8015a8a:	46bd      	mov	sp, r7
 8015a8c:	bd80      	pop	{r7, pc}
 8015a8e:	bf00      	nop
 8015a90:	24000246 	.word	0x24000246
 8015a94:	24001db0 	.word	0x24001db0

08015a98 <ff_uni2oem>:
#if FF_CODE_PAGE != 0 && FF_CODE_PAGE < 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
 8015a98:	b480      	push	{r7}
 8015a9a:	b085      	sub	sp, #20
 8015a9c:	af00      	add	r7, sp, #0
 8015a9e:	6078      	str	r0, [r7, #4]
 8015aa0:	460b      	mov	r3, r1
 8015aa2:	807b      	strh	r3, [r7, #2]
	WCHAR c = 0;
 8015aa4:	2300      	movs	r3, #0
 8015aa6:	81fb      	strh	r3, [r7, #14]
	const WCHAR* p = CVTBL(uc, FF_CODE_PAGE);
 8015aa8:	4b17      	ldr	r3, [pc, #92]	@ (8015b08 <ff_uni2oem+0x70>)
 8015aaa:	60bb      	str	r3, [r7, #8]


	if (uni < 0x80) {	/* ASCII? */
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	2b7f      	cmp	r3, #127	@ 0x7f
 8015ab0:	d802      	bhi.n	8015ab8 <ff_uni2oem+0x20>
		c = (WCHAR)uni;
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	81fb      	strh	r3, [r7, #14]
 8015ab6:	e01f      	b.n	8015af8 <ff_uni2oem+0x60>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015abe:	d21b      	bcs.n	8015af8 <ff_uni2oem+0x60>
 8015ac0:	887b      	ldrh	r3, [r7, #2]
 8015ac2:	f240 3252 	movw	r2, #850	@ 0x352
 8015ac6:	4293      	cmp	r3, r2
 8015ac8:	d116      	bne.n	8015af8 <ff_uni2oem+0x60>
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
 8015aca:	2300      	movs	r3, #0
 8015acc:	81fb      	strh	r3, [r7, #14]
 8015ace:	e002      	b.n	8015ad6 <ff_uni2oem+0x3e>
 8015ad0:	89fb      	ldrh	r3, [r7, #14]
 8015ad2:	3301      	adds	r3, #1
 8015ad4:	81fb      	strh	r3, [r7, #14]
 8015ad6:	89fb      	ldrh	r3, [r7, #14]
 8015ad8:	2b7f      	cmp	r3, #127	@ 0x7f
 8015ada:	d808      	bhi.n	8015aee <ff_uni2oem+0x56>
 8015adc:	89fb      	ldrh	r3, [r7, #14]
 8015ade:	005b      	lsls	r3, r3, #1
 8015ae0:	68ba      	ldr	r2, [r7, #8]
 8015ae2:	4413      	add	r3, r2
 8015ae4:	881b      	ldrh	r3, [r3, #0]
 8015ae6:	461a      	mov	r2, r3
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	4293      	cmp	r3, r2
 8015aec:	d1f0      	bne.n	8015ad0 <ff_uni2oem+0x38>
			c = (c + 0x80) & 0xFF;
 8015aee:	89fb      	ldrh	r3, [r7, #14]
 8015af0:	3380      	adds	r3, #128	@ 0x80
 8015af2:	b29b      	uxth	r3, r3
 8015af4:	b2db      	uxtb	r3, r3
 8015af6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8015af8:	89fb      	ldrh	r3, [r7, #14]
}
 8015afa:	4618      	mov	r0, r3
 8015afc:	3714      	adds	r7, #20
 8015afe:	46bd      	mov	sp, r7
 8015b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b04:	4770      	bx	lr
 8015b06:	bf00      	nop
 8015b08:	0801e490 	.word	0x0801e490

08015b0c <ff_oem2uni>:

WCHAR ff_oem2uni (	/* Returns Unicode character in UTF-16, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
 8015b0c:	b480      	push	{r7}
 8015b0e:	b085      	sub	sp, #20
 8015b10:	af00      	add	r7, sp, #0
 8015b12:	4603      	mov	r3, r0
 8015b14:	460a      	mov	r2, r1
 8015b16:	80fb      	strh	r3, [r7, #6]
 8015b18:	4613      	mov	r3, r2
 8015b1a:	80bb      	strh	r3, [r7, #4]
	WCHAR c = 0;
 8015b1c:	2300      	movs	r3, #0
 8015b1e:	81fb      	strh	r3, [r7, #14]
	const WCHAR* p = CVTBL(uc, FF_CODE_PAGE);
 8015b20:	4b0f      	ldr	r3, [pc, #60]	@ (8015b60 <ff_oem2uni+0x54>)
 8015b22:	60bb      	str	r3, [r7, #8]


	if (oem < 0x80) {	/* ASCII? */
 8015b24:	88fb      	ldrh	r3, [r7, #6]
 8015b26:	2b7f      	cmp	r3, #127	@ 0x7f
 8015b28:	d802      	bhi.n	8015b30 <ff_oem2uni+0x24>
		c = oem;
 8015b2a:	88fb      	ldrh	r3, [r7, #6]
 8015b2c:	81fb      	strh	r3, [r7, #14]
 8015b2e:	e00f      	b.n	8015b50 <ff_oem2uni+0x44>

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
 8015b30:	88bb      	ldrh	r3, [r7, #4]
 8015b32:	f240 3252 	movw	r2, #850	@ 0x352
 8015b36:	4293      	cmp	r3, r2
 8015b38:	d10a      	bne.n	8015b50 <ff_oem2uni+0x44>
			if (oem < 0x100) c = p[oem - 0x80];
 8015b3a:	88fb      	ldrh	r3, [r7, #6]
 8015b3c:	2bff      	cmp	r3, #255	@ 0xff
 8015b3e:	d807      	bhi.n	8015b50 <ff_oem2uni+0x44>
 8015b40:	88fa      	ldrh	r2, [r7, #6]
 8015b42:	4b08      	ldr	r3, [pc, #32]	@ (8015b64 <ff_oem2uni+0x58>)
 8015b44:	4413      	add	r3, r2
 8015b46:	005b      	lsls	r3, r3, #1
 8015b48:	68ba      	ldr	r2, [r7, #8]
 8015b4a:	4413      	add	r3, r2
 8015b4c:	881b      	ldrh	r3, [r3, #0]
 8015b4e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8015b50:	89fb      	ldrh	r3, [r7, #14]
}
 8015b52:	4618      	mov	r0, r3
 8015b54:	3714      	adds	r7, #20
 8015b56:	46bd      	mov	sp, r7
 8015b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b5c:	4770      	bx	lr
 8015b5e:	bf00      	nop
 8015b60:	0801e490 	.word	0x0801e490
 8015b64:	7fffff80 	.word	0x7fffff80

08015b68 <ff_wtoupper>:
/*------------------------------------------------------------------------*/

DWORD ff_wtoupper (	/* Returns up-converted code point */
	DWORD uni		/* Unicode code point to be up-converted */
)
{
 8015b68:	b480      	push	{r7}
 8015b6a:	b087      	sub	sp, #28
 8015b6c:	af00      	add	r7, sp, #0
 8015b6e:	6078      	str	r0, [r7, #4]

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015b76:	d27d      	bcs.n	8015c74 <ff_wtoupper+0x10c>
		uc = (WORD)uni;
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	827b      	strh	r3, [r7, #18]
		p = uc < 0x1000 ? cvt1 : cvt2;
 8015b7c:	8a7b      	ldrh	r3, [r7, #18]
 8015b7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8015b82:	d201      	bcs.n	8015b88 <ff_wtoupper+0x20>
 8015b84:	4b3f      	ldr	r3, [pc, #252]	@ (8015c84 <ff_wtoupper+0x11c>)
 8015b86:	e000      	b.n	8015b8a <ff_wtoupper+0x22>
 8015b88:	4b3f      	ldr	r3, [pc, #252]	@ (8015c88 <ff_wtoupper+0x120>)
 8015b8a:	617b      	str	r3, [r7, #20]
		for (;;) {
			bc = *p++;								/* Get the block base */
 8015b8c:	697b      	ldr	r3, [r7, #20]
 8015b8e:	1c9a      	adds	r2, r3, #2
 8015b90:	617a      	str	r2, [r7, #20]
 8015b92:	881b      	ldrh	r3, [r3, #0]
 8015b94:	823b      	strh	r3, [r7, #16]
			if (bc == 0 || uc < bc) break;			/* Not matched? */
 8015b96:	8a3b      	ldrh	r3, [r7, #16]
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d069      	beq.n	8015c70 <ff_wtoupper+0x108>
 8015b9c:	8a7a      	ldrh	r2, [r7, #18]
 8015b9e:	8a3b      	ldrh	r3, [r7, #16]
 8015ba0:	429a      	cmp	r2, r3
 8015ba2:	d365      	bcc.n	8015c70 <ff_wtoupper+0x108>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8015ba4:	697b      	ldr	r3, [r7, #20]
 8015ba6:	1c9a      	adds	r2, r3, #2
 8015ba8:	617a      	str	r2, [r7, #20]
 8015baa:	881b      	ldrh	r3, [r3, #0]
 8015bac:	81fb      	strh	r3, [r7, #14]
 8015bae:	89fb      	ldrh	r3, [r7, #14]
 8015bb0:	0a1b      	lsrs	r3, r3, #8
 8015bb2:	81bb      	strh	r3, [r7, #12]
 8015bb4:	89fb      	ldrh	r3, [r7, #14]
 8015bb6:	b2db      	uxtb	r3, r3
 8015bb8:	81fb      	strh	r3, [r7, #14]
			if (uc < bc + nc) {	/* In the block? */
 8015bba:	8a7a      	ldrh	r2, [r7, #18]
 8015bbc:	8a39      	ldrh	r1, [r7, #16]
 8015bbe:	89fb      	ldrh	r3, [r7, #14]
 8015bc0:	440b      	add	r3, r1
 8015bc2:	429a      	cmp	r2, r3
 8015bc4:	da4a      	bge.n	8015c5c <ff_wtoupper+0xf4>
				switch (cmd) {
 8015bc6:	89bb      	ldrh	r3, [r7, #12]
 8015bc8:	2b08      	cmp	r3, #8
 8015bca:	d850      	bhi.n	8015c6e <ff_wtoupper+0x106>
 8015bcc:	a201      	add	r2, pc, #4	@ (adr r2, 8015bd4 <ff_wtoupper+0x6c>)
 8015bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015bd2:	bf00      	nop
 8015bd4:	08015bf9 	.word	0x08015bf9
 8015bd8:	08015c0b 	.word	0x08015c0b
 8015bdc:	08015c21 	.word	0x08015c21
 8015be0:	08015c29 	.word	0x08015c29
 8015be4:	08015c31 	.word	0x08015c31
 8015be8:	08015c39 	.word	0x08015c39
 8015bec:	08015c41 	.word	0x08015c41
 8015bf0:	08015c49 	.word	0x08015c49
 8015bf4:	08015c51 	.word	0x08015c51
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
 8015bf8:	8a7a      	ldrh	r2, [r7, #18]
 8015bfa:	8a3b      	ldrh	r3, [r7, #16]
 8015bfc:	1ad3      	subs	r3, r2, r3
 8015bfe:	005b      	lsls	r3, r3, #1
 8015c00:	697a      	ldr	r2, [r7, #20]
 8015c02:	4413      	add	r3, r2
 8015c04:	881b      	ldrh	r3, [r3, #0]
 8015c06:	827b      	strh	r3, [r7, #18]
 8015c08:	e027      	b.n	8015c5a <ff_wtoupper+0xf2>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
 8015c0a:	8a7a      	ldrh	r2, [r7, #18]
 8015c0c:	8a3b      	ldrh	r3, [r7, #16]
 8015c0e:	1ad3      	subs	r3, r2, r3
 8015c10:	b29b      	uxth	r3, r3
 8015c12:	f003 0301 	and.w	r3, r3, #1
 8015c16:	b29b      	uxth	r3, r3
 8015c18:	8a7a      	ldrh	r2, [r7, #18]
 8015c1a:	1ad3      	subs	r3, r2, r3
 8015c1c:	827b      	strh	r3, [r7, #18]
 8015c1e:	e01c      	b.n	8015c5a <ff_wtoupper+0xf2>
				case 2: uc -= 16; break;			/* Shift -16 */
 8015c20:	8a7b      	ldrh	r3, [r7, #18]
 8015c22:	3b10      	subs	r3, #16
 8015c24:	827b      	strh	r3, [r7, #18]
 8015c26:	e018      	b.n	8015c5a <ff_wtoupper+0xf2>
				case 3:	uc -= 32; break;			/* Shift -32 */
 8015c28:	8a7b      	ldrh	r3, [r7, #18]
 8015c2a:	3b20      	subs	r3, #32
 8015c2c:	827b      	strh	r3, [r7, #18]
 8015c2e:	e014      	b.n	8015c5a <ff_wtoupper+0xf2>
				case 4:	uc -= 48; break;			/* Shift -48 */
 8015c30:	8a7b      	ldrh	r3, [r7, #18]
 8015c32:	3b30      	subs	r3, #48	@ 0x30
 8015c34:	827b      	strh	r3, [r7, #18]
 8015c36:	e010      	b.n	8015c5a <ff_wtoupper+0xf2>
				case 5:	uc -= 26; break;			/* Shift -26 */
 8015c38:	8a7b      	ldrh	r3, [r7, #18]
 8015c3a:	3b1a      	subs	r3, #26
 8015c3c:	827b      	strh	r3, [r7, #18]
 8015c3e:	e00c      	b.n	8015c5a <ff_wtoupper+0xf2>
				case 6:	uc += 8; break;				/* Shift +8 */
 8015c40:	8a7b      	ldrh	r3, [r7, #18]
 8015c42:	3308      	adds	r3, #8
 8015c44:	827b      	strh	r3, [r7, #18]
 8015c46:	e008      	b.n	8015c5a <ff_wtoupper+0xf2>
				case 7: uc -= 80; break;			/* Shift -80 */
 8015c48:	8a7b      	ldrh	r3, [r7, #18]
 8015c4a:	3b50      	subs	r3, #80	@ 0x50
 8015c4c:	827b      	strh	r3, [r7, #18]
 8015c4e:	e004      	b.n	8015c5a <ff_wtoupper+0xf2>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
 8015c50:	8a7b      	ldrh	r3, [r7, #18]
 8015c52:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8015c56:	827b      	strh	r3, [r7, #18]
 8015c58:	bf00      	nop
				}
				break;
 8015c5a:	e008      	b.n	8015c6e <ff_wtoupper+0x106>
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
 8015c5c:	89bb      	ldrh	r3, [r7, #12]
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	d194      	bne.n	8015b8c <ff_wtoupper+0x24>
 8015c62:	89fb      	ldrh	r3, [r7, #14]
 8015c64:	005b      	lsls	r3, r3, #1
 8015c66:	697a      	ldr	r2, [r7, #20]
 8015c68:	4413      	add	r3, r2
 8015c6a:	617b      	str	r3, [r7, #20]
			bc = *p++;								/* Get the block base */
 8015c6c:	e78e      	b.n	8015b8c <ff_wtoupper+0x24>
				break;
 8015c6e:	bf00      	nop
		}
		uni = uc;
 8015c70:	8a7b      	ldrh	r3, [r7, #18]
 8015c72:	607b      	str	r3, [r7, #4]
	}

	return uni;
 8015c74:	687b      	ldr	r3, [r7, #4]
}
 8015c76:	4618      	mov	r0, r3
 8015c78:	371c      	adds	r7, #28
 8015c7a:	46bd      	mov	sp, r7
 8015c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c80:	4770      	bx	lr
 8015c82:	bf00      	nop
 8015c84:	0801e590 	.word	0x0801e590
 8015c88:	0801e784 	.word	0x0801e784

08015c8c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8015c8c:	b580      	push	{r7, lr}
 8015c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8015c90:	2200      	movs	r2, #0
 8015c92:	4913      	ldr	r1, [pc, #76]	@ (8015ce0 <MX_USB_DEVICE_Init+0x54>)
 8015c94:	4813      	ldr	r0, [pc, #76]	@ (8015ce4 <MX_USB_DEVICE_Init+0x58>)
 8015c96:	f7f8 ff63 	bl	800eb60 <USBD_Init>
 8015c9a:	4603      	mov	r3, r0
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d001      	beq.n	8015ca4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8015ca0:	f7ee ffa0 	bl	8004be4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8015ca4:	4910      	ldr	r1, [pc, #64]	@ (8015ce8 <MX_USB_DEVICE_Init+0x5c>)
 8015ca6:	480f      	ldr	r0, [pc, #60]	@ (8015ce4 <MX_USB_DEVICE_Init+0x58>)
 8015ca8:	f7f8 ff8a 	bl	800ebc0 <USBD_RegisterClass>
 8015cac:	4603      	mov	r3, r0
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d001      	beq.n	8015cb6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8015cb2:	f7ee ff97 	bl	8004be4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8015cb6:	490d      	ldr	r1, [pc, #52]	@ (8015cec <MX_USB_DEVICE_Init+0x60>)
 8015cb8:	480a      	ldr	r0, [pc, #40]	@ (8015ce4 <MX_USB_DEVICE_Init+0x58>)
 8015cba:	f7f8 fe81 	bl	800e9c0 <USBD_CDC_RegisterInterface>
 8015cbe:	4603      	mov	r3, r0
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d001      	beq.n	8015cc8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8015cc4:	f7ee ff8e 	bl	8004be4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8015cc8:	4806      	ldr	r0, [pc, #24]	@ (8015ce4 <MX_USB_DEVICE_Init+0x58>)
 8015cca:	f7f8 ffaf 	bl	800ec2c <USBD_Start>
 8015cce:	4603      	mov	r3, r0
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	d001      	beq.n	8015cd8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8015cd4:	f7ee ff86 	bl	8004be4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8015cd8:	f7f3 fb84 	bl	80093e4 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8015cdc:	bf00      	nop
 8015cde:	bd80      	pop	{r7, pc}
 8015ce0:	2400025c 	.word	0x2400025c
 8015ce4:	24002144 	.word	0x24002144
 8015ce8:	240001c8 	.word	0x240001c8
 8015cec:	24000248 	.word	0x24000248

08015cf0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8015cf0:	b580      	push	{r7, lr}
 8015cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8015cf4:	2200      	movs	r2, #0
 8015cf6:	4905      	ldr	r1, [pc, #20]	@ (8015d0c <CDC_Init_FS+0x1c>)
 8015cf8:	4805      	ldr	r0, [pc, #20]	@ (8015d10 <CDC_Init_FS+0x20>)
 8015cfa:	f7f8 fe7b 	bl	800e9f4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8015cfe:	4905      	ldr	r1, [pc, #20]	@ (8015d14 <CDC_Init_FS+0x24>)
 8015d00:	4803      	ldr	r0, [pc, #12]	@ (8015d10 <CDC_Init_FS+0x20>)
 8015d02:	f7f8 fe99 	bl	800ea38 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8015d06:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8015d08:	4618      	mov	r0, r3
 8015d0a:	bd80      	pop	{r7, pc}
 8015d0c:	24002c20 	.word	0x24002c20
 8015d10:	24002144 	.word	0x24002144
 8015d14:	24002420 	.word	0x24002420

08015d18 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8015d18:	b480      	push	{r7}
 8015d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8015d1c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8015d1e:	4618      	mov	r0, r3
 8015d20:	46bd      	mov	sp, r7
 8015d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d26:	4770      	bx	lr

08015d28 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8015d28:	b480      	push	{r7}
 8015d2a:	b083      	sub	sp, #12
 8015d2c:	af00      	add	r7, sp, #0
 8015d2e:	4603      	mov	r3, r0
 8015d30:	6039      	str	r1, [r7, #0]
 8015d32:	71fb      	strb	r3, [r7, #7]
 8015d34:	4613      	mov	r3, r2
 8015d36:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8015d38:	79fb      	ldrb	r3, [r7, #7]
 8015d3a:	2b23      	cmp	r3, #35	@ 0x23
 8015d3c:	d84a      	bhi.n	8015dd4 <CDC_Control_FS+0xac>
 8015d3e:	a201      	add	r2, pc, #4	@ (adr r2, 8015d44 <CDC_Control_FS+0x1c>)
 8015d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d44:	08015dd5 	.word	0x08015dd5
 8015d48:	08015dd5 	.word	0x08015dd5
 8015d4c:	08015dd5 	.word	0x08015dd5
 8015d50:	08015dd5 	.word	0x08015dd5
 8015d54:	08015dd5 	.word	0x08015dd5
 8015d58:	08015dd5 	.word	0x08015dd5
 8015d5c:	08015dd5 	.word	0x08015dd5
 8015d60:	08015dd5 	.word	0x08015dd5
 8015d64:	08015dd5 	.word	0x08015dd5
 8015d68:	08015dd5 	.word	0x08015dd5
 8015d6c:	08015dd5 	.word	0x08015dd5
 8015d70:	08015dd5 	.word	0x08015dd5
 8015d74:	08015dd5 	.word	0x08015dd5
 8015d78:	08015dd5 	.word	0x08015dd5
 8015d7c:	08015dd5 	.word	0x08015dd5
 8015d80:	08015dd5 	.word	0x08015dd5
 8015d84:	08015dd5 	.word	0x08015dd5
 8015d88:	08015dd5 	.word	0x08015dd5
 8015d8c:	08015dd5 	.word	0x08015dd5
 8015d90:	08015dd5 	.word	0x08015dd5
 8015d94:	08015dd5 	.word	0x08015dd5
 8015d98:	08015dd5 	.word	0x08015dd5
 8015d9c:	08015dd5 	.word	0x08015dd5
 8015da0:	08015dd5 	.word	0x08015dd5
 8015da4:	08015dd5 	.word	0x08015dd5
 8015da8:	08015dd5 	.word	0x08015dd5
 8015dac:	08015dd5 	.word	0x08015dd5
 8015db0:	08015dd5 	.word	0x08015dd5
 8015db4:	08015dd5 	.word	0x08015dd5
 8015db8:	08015dd5 	.word	0x08015dd5
 8015dbc:	08015dd5 	.word	0x08015dd5
 8015dc0:	08015dd5 	.word	0x08015dd5
 8015dc4:	08015dd5 	.word	0x08015dd5
 8015dc8:	08015dd5 	.word	0x08015dd5
 8015dcc:	08015dd5 	.word	0x08015dd5
 8015dd0:	08015dd5 	.word	0x08015dd5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8015dd4:	bf00      	nop
  }

  return (USBD_OK);
 8015dd6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015dd8:	4618      	mov	r0, r3
 8015dda:	370c      	adds	r7, #12
 8015ddc:	46bd      	mov	sp, r7
 8015dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015de2:	4770      	bx	lr

08015de4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8015de4:	b580      	push	{r7, lr}
 8015de6:	b084      	sub	sp, #16
 8015de8:	af00      	add	r7, sp, #0
 8015dea:	6078      	str	r0, [r7, #4]
 8015dec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

    for (uint32_t i = 0; i < *Len; i++) {
 8015dee:	2300      	movs	r3, #0
 8015df0:	60fb      	str	r3, [r7, #12]
 8015df2:	e00a      	b.n	8015e0a <CDC_Receive_FS+0x26>
        fifo_push(&vcp_rx_buffer, Buf[i]);
 8015df4:	687a      	ldr	r2, [r7, #4]
 8015df6:	68fb      	ldr	r3, [r7, #12]
 8015df8:	4413      	add	r3, r2
 8015dfa:	781b      	ldrb	r3, [r3, #0]
 8015dfc:	4619      	mov	r1, r3
 8015dfe:	480b      	ldr	r0, [pc, #44]	@ (8015e2c <CDC_Receive_FS+0x48>)
 8015e00:	f7ed f9ca 	bl	8003198 <fifo_push>
    for (uint32_t i = 0; i < *Len; i++) {
 8015e04:	68fb      	ldr	r3, [r7, #12]
 8015e06:	3301      	adds	r3, #1
 8015e08:	60fb      	str	r3, [r7, #12]
 8015e0a:	683b      	ldr	r3, [r7, #0]
 8015e0c:	681b      	ldr	r3, [r3, #0]
 8015e0e:	68fa      	ldr	r2, [r7, #12]
 8015e10:	429a      	cmp	r2, r3
 8015e12:	d3ef      	bcc.n	8015df4 <CDC_Receive_FS+0x10>
    }



  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8015e14:	6879      	ldr	r1, [r7, #4]
 8015e16:	4806      	ldr	r0, [pc, #24]	@ (8015e30 <CDC_Receive_FS+0x4c>)
 8015e18:	f7f8 fe0e 	bl	800ea38 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8015e1c:	4804      	ldr	r0, [pc, #16]	@ (8015e30 <CDC_Receive_FS+0x4c>)
 8015e1e:	f7f8 fe69 	bl	800eaf4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8015e22:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8015e24:	4618      	mov	r0, r3
 8015e26:	3710      	adds	r7, #16
 8015e28:	46bd      	mov	sp, r7
 8015e2a:	bd80      	pop	{r7, pc}
 8015e2c:	24000134 	.word	0x24000134
 8015e30:	24002144 	.word	0x24002144

08015e34 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8015e34:	b580      	push	{r7, lr}
 8015e36:	b084      	sub	sp, #16
 8015e38:	af00      	add	r7, sp, #0
 8015e3a:	6078      	str	r0, [r7, #4]
 8015e3c:	460b      	mov	r3, r1
 8015e3e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8015e40:	2300      	movs	r3, #0
 8015e42:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8015e44:	4b0d      	ldr	r3, [pc, #52]	@ (8015e7c <CDC_Transmit_FS+0x48>)
 8015e46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8015e4a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8015e4c:	68bb      	ldr	r3, [r7, #8]
 8015e4e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	d001      	beq.n	8015e5a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8015e56:	2301      	movs	r3, #1
 8015e58:	e00b      	b.n	8015e72 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8015e5a:	887b      	ldrh	r3, [r7, #2]
 8015e5c:	461a      	mov	r2, r3
 8015e5e:	6879      	ldr	r1, [r7, #4]
 8015e60:	4806      	ldr	r0, [pc, #24]	@ (8015e7c <CDC_Transmit_FS+0x48>)
 8015e62:	f7f8 fdc7 	bl	800e9f4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8015e66:	4805      	ldr	r0, [pc, #20]	@ (8015e7c <CDC_Transmit_FS+0x48>)
 8015e68:	f7f8 fe04 	bl	800ea74 <USBD_CDC_TransmitPacket>
 8015e6c:	4603      	mov	r3, r0
 8015e6e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8015e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8015e72:	4618      	mov	r0, r3
 8015e74:	3710      	adds	r7, #16
 8015e76:	46bd      	mov	sp, r7
 8015e78:	bd80      	pop	{r7, pc}
 8015e7a:	bf00      	nop
 8015e7c:	24002144 	.word	0x24002144

08015e80 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8015e80:	b480      	push	{r7}
 8015e82:	b087      	sub	sp, #28
 8015e84:	af00      	add	r7, sp, #0
 8015e86:	60f8      	str	r0, [r7, #12]
 8015e88:	60b9      	str	r1, [r7, #8]
 8015e8a:	4613      	mov	r3, r2
 8015e8c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8015e8e:	2300      	movs	r3, #0
 8015e90:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8015e92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015e96:	4618      	mov	r0, r3
 8015e98:	371c      	adds	r7, #28
 8015e9a:	46bd      	mov	sp, r7
 8015e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ea0:	4770      	bx	lr
	...

08015ea4 <CDC_ReadChar>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
int CDC_ReadChar(void) {
 8015ea4:	b580      	push	{r7, lr}
 8015ea6:	b082      	sub	sp, #8
 8015ea8:	af00      	add	r7, sp, #0
    int result = fifo_pop(&vcp_rx_buffer);
 8015eaa:	4804      	ldr	r0, [pc, #16]	@ (8015ebc <CDC_ReadChar+0x18>)
 8015eac:	f7ed f99e 	bl	80031ec <fifo_pop>
 8015eb0:	6078      	str	r0, [r7, #4]
    return result;
 8015eb2:	687b      	ldr	r3, [r7, #4]
}
 8015eb4:	4618      	mov	r0, r3
 8015eb6:	3708      	adds	r7, #8
 8015eb8:	46bd      	mov	sp, r7
 8015eba:	bd80      	pop	{r7, pc}
 8015ebc:	24000134 	.word	0x24000134

08015ec0 <CDC_IsDataAvailable>:

int CDC_IsDataAvailable(void) {
 8015ec0:	b580      	push	{r7, lr}
 8015ec2:	af00      	add	r7, sp, #0
    return !fifo_is_empty(&vcp_rx_buffer);
 8015ec4:	4805      	ldr	r0, [pc, #20]	@ (8015edc <CDC_IsDataAvailable+0x1c>)
 8015ec6:	f7ed f954 	bl	8003172 <fifo_is_empty>
 8015eca:	4603      	mov	r3, r0
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	bf0c      	ite	eq
 8015ed0:	2301      	moveq	r3, #1
 8015ed2:	2300      	movne	r3, #0
 8015ed4:	b2db      	uxtb	r3, r3
}
 8015ed6:	4618      	mov	r0, r3
 8015ed8:	bd80      	pop	{r7, pc}
 8015eda:	bf00      	nop
 8015edc:	24000134 	.word	0x24000134

08015ee0 <CDC_SendString>:

void CDC_SendString(const char *s) {
 8015ee0:	b580      	push	{r7, lr}
 8015ee2:	b084      	sub	sp, #16
 8015ee4:	af00      	add	r7, sp, #0
 8015ee6:	6078      	str	r0, [r7, #4]
    uint16_t len = strlen(s);
 8015ee8:	6878      	ldr	r0, [r7, #4]
 8015eea:	f7ea fa59 	bl	80003a0 <strlen>
 8015eee:	4603      	mov	r3, r0
 8015ef0:	81fb      	strh	r3, [r7, #14]

    uint8_t result = CDC_Transmit_FS((uint8_t*)s, len);
 8015ef2:	89fb      	ldrh	r3, [r7, #14]
 8015ef4:	4619      	mov	r1, r3
 8015ef6:	6878      	ldr	r0, [r7, #4]
 8015ef8:	f7ff ff9c 	bl	8015e34 <CDC_Transmit_FS>
 8015efc:	4603      	mov	r3, r0
 8015efe:	737b      	strb	r3, [r7, #13]
        HAL_Delay(1);
 8015f00:	2001      	movs	r0, #1
 8015f02:	f7ef ff6d 	bl	8005de0 <HAL_Delay>
        if (result == USBD_OK) {

        } else if (result == USBD_BUSY) {

        }
}
 8015f06:	bf00      	nop
 8015f08:	3710      	adds	r7, #16
 8015f0a:	46bd      	mov	sp, r7
 8015f0c:	bd80      	pop	{r7, pc}
	...

08015f10 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015f10:	b480      	push	{r7}
 8015f12:	b083      	sub	sp, #12
 8015f14:	af00      	add	r7, sp, #0
 8015f16:	4603      	mov	r3, r0
 8015f18:	6039      	str	r1, [r7, #0]
 8015f1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8015f1c:	683b      	ldr	r3, [r7, #0]
 8015f1e:	2212      	movs	r2, #18
 8015f20:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8015f22:	4b03      	ldr	r3, [pc, #12]	@ (8015f30 <USBD_FS_DeviceDescriptor+0x20>)
}
 8015f24:	4618      	mov	r0, r3
 8015f26:	370c      	adds	r7, #12
 8015f28:	46bd      	mov	sp, r7
 8015f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f2e:	4770      	bx	lr
 8015f30:	2400027c 	.word	0x2400027c

08015f34 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015f34:	b480      	push	{r7}
 8015f36:	b083      	sub	sp, #12
 8015f38:	af00      	add	r7, sp, #0
 8015f3a:	4603      	mov	r3, r0
 8015f3c:	6039      	str	r1, [r7, #0]
 8015f3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015f40:	683b      	ldr	r3, [r7, #0]
 8015f42:	2204      	movs	r2, #4
 8015f44:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015f46:	4b03      	ldr	r3, [pc, #12]	@ (8015f54 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8015f48:	4618      	mov	r0, r3
 8015f4a:	370c      	adds	r7, #12
 8015f4c:	46bd      	mov	sp, r7
 8015f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f52:	4770      	bx	lr
 8015f54:	24000290 	.word	0x24000290

08015f58 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015f58:	b580      	push	{r7, lr}
 8015f5a:	b082      	sub	sp, #8
 8015f5c:	af00      	add	r7, sp, #0
 8015f5e:	4603      	mov	r3, r0
 8015f60:	6039      	str	r1, [r7, #0]
 8015f62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015f64:	79fb      	ldrb	r3, [r7, #7]
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d105      	bne.n	8015f76 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015f6a:	683a      	ldr	r2, [r7, #0]
 8015f6c:	4907      	ldr	r1, [pc, #28]	@ (8015f8c <USBD_FS_ProductStrDescriptor+0x34>)
 8015f6e:	4808      	ldr	r0, [pc, #32]	@ (8015f90 <USBD_FS_ProductStrDescriptor+0x38>)
 8015f70:	f7fa f836 	bl	800ffe0 <USBD_GetString>
 8015f74:	e004      	b.n	8015f80 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015f76:	683a      	ldr	r2, [r7, #0]
 8015f78:	4904      	ldr	r1, [pc, #16]	@ (8015f8c <USBD_FS_ProductStrDescriptor+0x34>)
 8015f7a:	4805      	ldr	r0, [pc, #20]	@ (8015f90 <USBD_FS_ProductStrDescriptor+0x38>)
 8015f7c:	f7fa f830 	bl	800ffe0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015f80:	4b02      	ldr	r3, [pc, #8]	@ (8015f8c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8015f82:	4618      	mov	r0, r3
 8015f84:	3708      	adds	r7, #8
 8015f86:	46bd      	mov	sp, r7
 8015f88:	bd80      	pop	{r7, pc}
 8015f8a:	bf00      	nop
 8015f8c:	24003420 	.word	0x24003420
 8015f90:	0801e368 	.word	0x0801e368

08015f94 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015f94:	b580      	push	{r7, lr}
 8015f96:	b082      	sub	sp, #8
 8015f98:	af00      	add	r7, sp, #0
 8015f9a:	4603      	mov	r3, r0
 8015f9c:	6039      	str	r1, [r7, #0]
 8015f9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015fa0:	683a      	ldr	r2, [r7, #0]
 8015fa2:	4904      	ldr	r1, [pc, #16]	@ (8015fb4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015fa4:	4804      	ldr	r0, [pc, #16]	@ (8015fb8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8015fa6:	f7fa f81b 	bl	800ffe0 <USBD_GetString>
  return USBD_StrDesc;
 8015faa:	4b02      	ldr	r3, [pc, #8]	@ (8015fb4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015fac:	4618      	mov	r0, r3
 8015fae:	3708      	adds	r7, #8
 8015fb0:	46bd      	mov	sp, r7
 8015fb2:	bd80      	pop	{r7, pc}
 8015fb4:	24003420 	.word	0x24003420
 8015fb8:	0801e37c 	.word	0x0801e37c

08015fbc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015fbc:	b580      	push	{r7, lr}
 8015fbe:	b082      	sub	sp, #8
 8015fc0:	af00      	add	r7, sp, #0
 8015fc2:	4603      	mov	r3, r0
 8015fc4:	6039      	str	r1, [r7, #0]
 8015fc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015fc8:	683b      	ldr	r3, [r7, #0]
 8015fca:	221a      	movs	r2, #26
 8015fcc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015fce:	f000 f843 	bl	8016058 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8015fd2:	4b02      	ldr	r3, [pc, #8]	@ (8015fdc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8015fd4:	4618      	mov	r0, r3
 8015fd6:	3708      	adds	r7, #8
 8015fd8:	46bd      	mov	sp, r7
 8015fda:	bd80      	pop	{r7, pc}
 8015fdc:	24000294 	.word	0x24000294

08015fe0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015fe0:	b580      	push	{r7, lr}
 8015fe2:	b082      	sub	sp, #8
 8015fe4:	af00      	add	r7, sp, #0
 8015fe6:	4603      	mov	r3, r0
 8015fe8:	6039      	str	r1, [r7, #0]
 8015fea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015fec:	79fb      	ldrb	r3, [r7, #7]
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d105      	bne.n	8015ffe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015ff2:	683a      	ldr	r2, [r7, #0]
 8015ff4:	4907      	ldr	r1, [pc, #28]	@ (8016014 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015ff6:	4808      	ldr	r0, [pc, #32]	@ (8016018 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015ff8:	f7f9 fff2 	bl	800ffe0 <USBD_GetString>
 8015ffc:	e004      	b.n	8016008 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015ffe:	683a      	ldr	r2, [r7, #0]
 8016000:	4904      	ldr	r1, [pc, #16]	@ (8016014 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016002:	4805      	ldr	r0, [pc, #20]	@ (8016018 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016004:	f7f9 ffec 	bl	800ffe0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016008:	4b02      	ldr	r3, [pc, #8]	@ (8016014 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801600a:	4618      	mov	r0, r3
 801600c:	3708      	adds	r7, #8
 801600e:	46bd      	mov	sp, r7
 8016010:	bd80      	pop	{r7, pc}
 8016012:	bf00      	nop
 8016014:	24003420 	.word	0x24003420
 8016018:	0801e38c 	.word	0x0801e38c

0801601c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801601c:	b580      	push	{r7, lr}
 801601e:	b082      	sub	sp, #8
 8016020:	af00      	add	r7, sp, #0
 8016022:	4603      	mov	r3, r0
 8016024:	6039      	str	r1, [r7, #0]
 8016026:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016028:	79fb      	ldrb	r3, [r7, #7]
 801602a:	2b00      	cmp	r3, #0
 801602c:	d105      	bne.n	801603a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801602e:	683a      	ldr	r2, [r7, #0]
 8016030:	4907      	ldr	r1, [pc, #28]	@ (8016050 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016032:	4808      	ldr	r0, [pc, #32]	@ (8016054 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016034:	f7f9 ffd4 	bl	800ffe0 <USBD_GetString>
 8016038:	e004      	b.n	8016044 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801603a:	683a      	ldr	r2, [r7, #0]
 801603c:	4904      	ldr	r1, [pc, #16]	@ (8016050 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801603e:	4805      	ldr	r0, [pc, #20]	@ (8016054 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016040:	f7f9 ffce 	bl	800ffe0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016044:	4b02      	ldr	r3, [pc, #8]	@ (8016050 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8016046:	4618      	mov	r0, r3
 8016048:	3708      	adds	r7, #8
 801604a:	46bd      	mov	sp, r7
 801604c:	bd80      	pop	{r7, pc}
 801604e:	bf00      	nop
 8016050:	24003420 	.word	0x24003420
 8016054:	0801e398 	.word	0x0801e398

08016058 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016058:	b580      	push	{r7, lr}
 801605a:	b084      	sub	sp, #16
 801605c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801605e:	4b0f      	ldr	r3, [pc, #60]	@ (801609c <Get_SerialNum+0x44>)
 8016060:	681b      	ldr	r3, [r3, #0]
 8016062:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016064:	4b0e      	ldr	r3, [pc, #56]	@ (80160a0 <Get_SerialNum+0x48>)
 8016066:	681b      	ldr	r3, [r3, #0]
 8016068:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801606a:	4b0e      	ldr	r3, [pc, #56]	@ (80160a4 <Get_SerialNum+0x4c>)
 801606c:	681b      	ldr	r3, [r3, #0]
 801606e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016070:	68fa      	ldr	r2, [r7, #12]
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	4413      	add	r3, r2
 8016076:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016078:	68fb      	ldr	r3, [r7, #12]
 801607a:	2b00      	cmp	r3, #0
 801607c:	d009      	beq.n	8016092 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801607e:	2208      	movs	r2, #8
 8016080:	4909      	ldr	r1, [pc, #36]	@ (80160a8 <Get_SerialNum+0x50>)
 8016082:	68f8      	ldr	r0, [r7, #12]
 8016084:	f000 f814 	bl	80160b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016088:	2204      	movs	r2, #4
 801608a:	4908      	ldr	r1, [pc, #32]	@ (80160ac <Get_SerialNum+0x54>)
 801608c:	68b8      	ldr	r0, [r7, #8]
 801608e:	f000 f80f 	bl	80160b0 <IntToUnicode>
  }
}
 8016092:	bf00      	nop
 8016094:	3710      	adds	r7, #16
 8016096:	46bd      	mov	sp, r7
 8016098:	bd80      	pop	{r7, pc}
 801609a:	bf00      	nop
 801609c:	1ff1e800 	.word	0x1ff1e800
 80160a0:	1ff1e804 	.word	0x1ff1e804
 80160a4:	1ff1e808 	.word	0x1ff1e808
 80160a8:	24000296 	.word	0x24000296
 80160ac:	240002a6 	.word	0x240002a6

080160b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80160b0:	b480      	push	{r7}
 80160b2:	b087      	sub	sp, #28
 80160b4:	af00      	add	r7, sp, #0
 80160b6:	60f8      	str	r0, [r7, #12]
 80160b8:	60b9      	str	r1, [r7, #8]
 80160ba:	4613      	mov	r3, r2
 80160bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80160be:	2300      	movs	r3, #0
 80160c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80160c2:	2300      	movs	r3, #0
 80160c4:	75fb      	strb	r3, [r7, #23]
 80160c6:	e027      	b.n	8016118 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80160c8:	68fb      	ldr	r3, [r7, #12]
 80160ca:	0f1b      	lsrs	r3, r3, #28
 80160cc:	2b09      	cmp	r3, #9
 80160ce:	d80b      	bhi.n	80160e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	0f1b      	lsrs	r3, r3, #28
 80160d4:	b2da      	uxtb	r2, r3
 80160d6:	7dfb      	ldrb	r3, [r7, #23]
 80160d8:	005b      	lsls	r3, r3, #1
 80160da:	4619      	mov	r1, r3
 80160dc:	68bb      	ldr	r3, [r7, #8]
 80160de:	440b      	add	r3, r1
 80160e0:	3230      	adds	r2, #48	@ 0x30
 80160e2:	b2d2      	uxtb	r2, r2
 80160e4:	701a      	strb	r2, [r3, #0]
 80160e6:	e00a      	b.n	80160fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80160e8:	68fb      	ldr	r3, [r7, #12]
 80160ea:	0f1b      	lsrs	r3, r3, #28
 80160ec:	b2da      	uxtb	r2, r3
 80160ee:	7dfb      	ldrb	r3, [r7, #23]
 80160f0:	005b      	lsls	r3, r3, #1
 80160f2:	4619      	mov	r1, r3
 80160f4:	68bb      	ldr	r3, [r7, #8]
 80160f6:	440b      	add	r3, r1
 80160f8:	3237      	adds	r2, #55	@ 0x37
 80160fa:	b2d2      	uxtb	r2, r2
 80160fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80160fe:	68fb      	ldr	r3, [r7, #12]
 8016100:	011b      	lsls	r3, r3, #4
 8016102:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016104:	7dfb      	ldrb	r3, [r7, #23]
 8016106:	005b      	lsls	r3, r3, #1
 8016108:	3301      	adds	r3, #1
 801610a:	68ba      	ldr	r2, [r7, #8]
 801610c:	4413      	add	r3, r2
 801610e:	2200      	movs	r2, #0
 8016110:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016112:	7dfb      	ldrb	r3, [r7, #23]
 8016114:	3301      	adds	r3, #1
 8016116:	75fb      	strb	r3, [r7, #23]
 8016118:	7dfa      	ldrb	r2, [r7, #23]
 801611a:	79fb      	ldrb	r3, [r7, #7]
 801611c:	429a      	cmp	r2, r3
 801611e:	d3d3      	bcc.n	80160c8 <IntToUnicode+0x18>
  }
}
 8016120:	bf00      	nop
 8016122:	bf00      	nop
 8016124:	371c      	adds	r7, #28
 8016126:	46bd      	mov	sp, r7
 8016128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801612c:	4770      	bx	lr
	...

08016130 <LL_RCC_SetUSBClockSource>:
{
 8016130:	b480      	push	{r7}
 8016132:	b083      	sub	sp, #12
 8016134:	af00      	add	r7, sp, #0
 8016136:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->D2CCIP2R, RCC_D2CCIP2R_USBSEL, ClkSource);
 8016138:	4b06      	ldr	r3, [pc, #24]	@ (8016154 <LL_RCC_SetUSBClockSource+0x24>)
 801613a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801613c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8016140:	4904      	ldr	r1, [pc, #16]	@ (8016154 <LL_RCC_SetUSBClockSource+0x24>)
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	4313      	orrs	r3, r2
 8016146:	654b      	str	r3, [r1, #84]	@ 0x54
}
 8016148:	bf00      	nop
 801614a:	370c      	adds	r7, #12
 801614c:	46bd      	mov	sp, r7
 801614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016152:	4770      	bx	lr
 8016154:	58024400 	.word	0x58024400

08016158 <LL_PWR_EnableUSBVoltageDetector>:
{
 8016158:	b480      	push	{r7}
 801615a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_USB33DEN);
 801615c:	4b05      	ldr	r3, [pc, #20]	@ (8016174 <LL_PWR_EnableUSBVoltageDetector+0x1c>)
 801615e:	68db      	ldr	r3, [r3, #12]
 8016160:	4a04      	ldr	r2, [pc, #16]	@ (8016174 <LL_PWR_EnableUSBVoltageDetector+0x1c>)
 8016162:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8016166:	60d3      	str	r3, [r2, #12]
}
 8016168:	bf00      	nop
 801616a:	46bd      	mov	sp, r7
 801616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016170:	4770      	bx	lr
 8016172:	bf00      	nop
 8016174:	58024800 	.word	0x58024800

08016178 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016178:	b580      	push	{r7, lr}
 801617a:	b08a      	sub	sp, #40	@ 0x28
 801617c:	af00      	add	r7, sp, #0
 801617e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016180:	f107 0314 	add.w	r3, r7, #20
 8016184:	2200      	movs	r2, #0
 8016186:	601a      	str	r2, [r3, #0]
 8016188:	605a      	str	r2, [r3, #4]
 801618a:	609a      	str	r2, [r3, #8]
 801618c:	60da      	str	r2, [r3, #12]
 801618e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	681b      	ldr	r3, [r3, #0]
 8016194:	4a21      	ldr	r2, [pc, #132]	@ (801621c <HAL_PCD_MspInit+0xa4>)
 8016196:	4293      	cmp	r3, r2
 8016198:	d13c      	bne.n	8016214 <HAL_PCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
    LL_RCC_SetUSBClockSource(LL_RCC_USB_CLKSOURCE_HSI48);
 801619a:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
 801619e:	f7ff ffc7 	bl	8016130 <LL_RCC_SetUSBClockSource>
    LL_PWR_EnableUSBVoltageDetector();
 80161a2:	f7ff ffd9 	bl	8016158 <LL_PWR_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80161a6:	4b1e      	ldr	r3, [pc, #120]	@ (8016220 <HAL_PCD_MspInit+0xa8>)
 80161a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80161ac:	4a1c      	ldr	r2, [pc, #112]	@ (8016220 <HAL_PCD_MspInit+0xa8>)
 80161ae:	f043 0301 	orr.w	r3, r3, #1
 80161b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80161b6:	4b1a      	ldr	r3, [pc, #104]	@ (8016220 <HAL_PCD_MspInit+0xa8>)
 80161b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80161bc:	f003 0301 	and.w	r3, r3, #1
 80161c0:	613b      	str	r3, [r7, #16]
 80161c2:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80161c4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80161c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80161ca:	2302      	movs	r3, #2
 80161cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80161ce:	2300      	movs	r3, #0
 80161d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80161d2:	2300      	movs	r3, #0
 80161d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80161d6:	230a      	movs	r3, #10
 80161d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80161da:	f107 0314 	add.w	r3, r7, #20
 80161de:	4619      	mov	r1, r3
 80161e0:	4810      	ldr	r0, [pc, #64]	@ (8016224 <HAL_PCD_MspInit+0xac>)
 80161e2:	f7ef ff31 	bl	8006048 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80161e6:	4b0e      	ldr	r3, [pc, #56]	@ (8016220 <HAL_PCD_MspInit+0xa8>)
 80161e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80161ec:	4a0c      	ldr	r2, [pc, #48]	@ (8016220 <HAL_PCD_MspInit+0xa8>)
 80161ee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80161f2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80161f6:	4b0a      	ldr	r3, [pc, #40]	@ (8016220 <HAL_PCD_MspInit+0xa8>)
 80161f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80161fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8016200:	60fb      	str	r3, [r7, #12]
 8016202:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8016204:	2200      	movs	r2, #0
 8016206:	2100      	movs	r1, #0
 8016208:	2065      	movs	r0, #101	@ 0x65
 801620a:	f7ef fee8 	bl	8005fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801620e:	2065      	movs	r0, #101	@ 0x65
 8016210:	f7ef feff 	bl	8006012 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8016214:	bf00      	nop
 8016216:	3728      	adds	r7, #40	@ 0x28
 8016218:	46bd      	mov	sp, r7
 801621a:	bd80      	pop	{r7, pc}
 801621c:	40080000 	.word	0x40080000
 8016220:	58024400 	.word	0x58024400
 8016224:	58020000 	.word	0x58020000

08016228 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016228:	b580      	push	{r7, lr}
 801622a:	b082      	sub	sp, #8
 801622c:	af00      	add	r7, sp, #0
 801622e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 801623c:	4619      	mov	r1, r3
 801623e:	4610      	mov	r0, r2
 8016240:	f7f8 fd41 	bl	800ecc6 <USBD_LL_SetupStage>
}
 8016244:	bf00      	nop
 8016246:	3708      	adds	r7, #8
 8016248:	46bd      	mov	sp, r7
 801624a:	bd80      	pop	{r7, pc}

0801624c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801624c:	b580      	push	{r7, lr}
 801624e:	b082      	sub	sp, #8
 8016250:	af00      	add	r7, sp, #0
 8016252:	6078      	str	r0, [r7, #4]
 8016254:	460b      	mov	r3, r1
 8016256:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801625e:	78fa      	ldrb	r2, [r7, #3]
 8016260:	6879      	ldr	r1, [r7, #4]
 8016262:	4613      	mov	r3, r2
 8016264:	00db      	lsls	r3, r3, #3
 8016266:	4413      	add	r3, r2
 8016268:	009b      	lsls	r3, r3, #2
 801626a:	440b      	add	r3, r1
 801626c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8016270:	681a      	ldr	r2, [r3, #0]
 8016272:	78fb      	ldrb	r3, [r7, #3]
 8016274:	4619      	mov	r1, r3
 8016276:	f7f8 fd7b 	bl	800ed70 <USBD_LL_DataOutStage>
}
 801627a:	bf00      	nop
 801627c:	3708      	adds	r7, #8
 801627e:	46bd      	mov	sp, r7
 8016280:	bd80      	pop	{r7, pc}

08016282 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016282:	b580      	push	{r7, lr}
 8016284:	b082      	sub	sp, #8
 8016286:	af00      	add	r7, sp, #0
 8016288:	6078      	str	r0, [r7, #4]
 801628a:	460b      	mov	r3, r1
 801628c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8016294:	78fa      	ldrb	r2, [r7, #3]
 8016296:	6879      	ldr	r1, [r7, #4]
 8016298:	4613      	mov	r3, r2
 801629a:	00db      	lsls	r3, r3, #3
 801629c:	4413      	add	r3, r2
 801629e:	009b      	lsls	r3, r3, #2
 80162a0:	440b      	add	r3, r1
 80162a2:	3320      	adds	r3, #32
 80162a4:	681a      	ldr	r2, [r3, #0]
 80162a6:	78fb      	ldrb	r3, [r7, #3]
 80162a8:	4619      	mov	r1, r3
 80162aa:	f7f8 fe14 	bl	800eed6 <USBD_LL_DataInStage>
}
 80162ae:	bf00      	nop
 80162b0:	3708      	adds	r7, #8
 80162b2:	46bd      	mov	sp, r7
 80162b4:	bd80      	pop	{r7, pc}

080162b6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80162b6:	b580      	push	{r7, lr}
 80162b8:	b082      	sub	sp, #8
 80162ba:	af00      	add	r7, sp, #0
 80162bc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80162c4:	4618      	mov	r0, r3
 80162c6:	f7f8 ff4e 	bl	800f166 <USBD_LL_SOF>
}
 80162ca:	bf00      	nop
 80162cc:	3708      	adds	r7, #8
 80162ce:	46bd      	mov	sp, r7
 80162d0:	bd80      	pop	{r7, pc}

080162d2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80162d2:	b580      	push	{r7, lr}
 80162d4:	b084      	sub	sp, #16
 80162d6:	af00      	add	r7, sp, #0
 80162d8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80162da:	2301      	movs	r3, #1
 80162dc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	79db      	ldrb	r3, [r3, #7]
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d102      	bne.n	80162ec <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80162e6:	2300      	movs	r3, #0
 80162e8:	73fb      	strb	r3, [r7, #15]
 80162ea:	e008      	b.n	80162fe <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	79db      	ldrb	r3, [r3, #7]
 80162f0:	2b02      	cmp	r3, #2
 80162f2:	d102      	bne.n	80162fa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80162f4:	2301      	movs	r3, #1
 80162f6:	73fb      	strb	r3, [r7, #15]
 80162f8:	e001      	b.n	80162fe <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80162fa:	f7ee fc73 	bl	8004be4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016304:	7bfa      	ldrb	r2, [r7, #15]
 8016306:	4611      	mov	r1, r2
 8016308:	4618      	mov	r0, r3
 801630a:	f7f8 fee8 	bl	800f0de <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016314:	4618      	mov	r0, r3
 8016316:	f7f8 fe90 	bl	800f03a <USBD_LL_Reset>
}
 801631a:	bf00      	nop
 801631c:	3710      	adds	r7, #16
 801631e:	46bd      	mov	sp, r7
 8016320:	bd80      	pop	{r7, pc}
	...

08016324 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016324:	b580      	push	{r7, lr}
 8016326:	b082      	sub	sp, #8
 8016328:	af00      	add	r7, sp, #0
 801632a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016332:	4618      	mov	r0, r3
 8016334:	f7f8 fee3 	bl	800f0fe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	681b      	ldr	r3, [r3, #0]
 801633c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8016340:	681b      	ldr	r3, [r3, #0]
 8016342:	687a      	ldr	r2, [r7, #4]
 8016344:	6812      	ldr	r2, [r2, #0]
 8016346:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801634a:	f043 0301 	orr.w	r3, r3, #1
 801634e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	7adb      	ldrb	r3, [r3, #11]
 8016354:	2b00      	cmp	r3, #0
 8016356:	d005      	beq.n	8016364 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016358:	4b04      	ldr	r3, [pc, #16]	@ (801636c <HAL_PCD_SuspendCallback+0x48>)
 801635a:	691b      	ldr	r3, [r3, #16]
 801635c:	4a03      	ldr	r2, [pc, #12]	@ (801636c <HAL_PCD_SuspendCallback+0x48>)
 801635e:	f043 0306 	orr.w	r3, r3, #6
 8016362:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016364:	bf00      	nop
 8016366:	3708      	adds	r7, #8
 8016368:	46bd      	mov	sp, r7
 801636a:	bd80      	pop	{r7, pc}
 801636c:	e000ed00 	.word	0xe000ed00

08016370 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016370:	b580      	push	{r7, lr}
 8016372:	b082      	sub	sp, #8
 8016374:	af00      	add	r7, sp, #0
 8016376:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801637e:	4618      	mov	r0, r3
 8016380:	f7f8 fed9 	bl	800f136 <USBD_LL_Resume>
}
 8016384:	bf00      	nop
 8016386:	3708      	adds	r7, #8
 8016388:	46bd      	mov	sp, r7
 801638a:	bd80      	pop	{r7, pc}

0801638c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801638c:	b580      	push	{r7, lr}
 801638e:	b082      	sub	sp, #8
 8016390:	af00      	add	r7, sp, #0
 8016392:	6078      	str	r0, [r7, #4]
 8016394:	460b      	mov	r3, r1
 8016396:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801639e:	78fa      	ldrb	r2, [r7, #3]
 80163a0:	4611      	mov	r1, r2
 80163a2:	4618      	mov	r0, r3
 80163a4:	f7f8 ff31 	bl	800f20a <USBD_LL_IsoOUTIncomplete>
}
 80163a8:	bf00      	nop
 80163aa:	3708      	adds	r7, #8
 80163ac:	46bd      	mov	sp, r7
 80163ae:	bd80      	pop	{r7, pc}

080163b0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80163b0:	b580      	push	{r7, lr}
 80163b2:	b082      	sub	sp, #8
 80163b4:	af00      	add	r7, sp, #0
 80163b6:	6078      	str	r0, [r7, #4]
 80163b8:	460b      	mov	r3, r1
 80163ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80163c2:	78fa      	ldrb	r2, [r7, #3]
 80163c4:	4611      	mov	r1, r2
 80163c6:	4618      	mov	r0, r3
 80163c8:	f7f8 feed 	bl	800f1a6 <USBD_LL_IsoINIncomplete>
}
 80163cc:	bf00      	nop
 80163ce:	3708      	adds	r7, #8
 80163d0:	46bd      	mov	sp, r7
 80163d2:	bd80      	pop	{r7, pc}

080163d4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80163d4:	b580      	push	{r7, lr}
 80163d6:	b082      	sub	sp, #8
 80163d8:	af00      	add	r7, sp, #0
 80163da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80163e2:	4618      	mov	r0, r3
 80163e4:	f7f8 ff43 	bl	800f26e <USBD_LL_DevConnected>
}
 80163e8:	bf00      	nop
 80163ea:	3708      	adds	r7, #8
 80163ec:	46bd      	mov	sp, r7
 80163ee:	bd80      	pop	{r7, pc}

080163f0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80163f0:	b580      	push	{r7, lr}
 80163f2:	b082      	sub	sp, #8
 80163f4:	af00      	add	r7, sp, #0
 80163f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80163fe:	4618      	mov	r0, r3
 8016400:	f7f8 ff40 	bl	800f284 <USBD_LL_DevDisconnected>
}
 8016404:	bf00      	nop
 8016406:	3708      	adds	r7, #8
 8016408:	46bd      	mov	sp, r7
 801640a:	bd80      	pop	{r7, pc}

0801640c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801640c:	b580      	push	{r7, lr}
 801640e:	b082      	sub	sp, #8
 8016410:	af00      	add	r7, sp, #0
 8016412:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	781b      	ldrb	r3, [r3, #0]
 8016418:	2b00      	cmp	r3, #0
 801641a:	d13e      	bne.n	801649a <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801641c:	4a21      	ldr	r2, [pc, #132]	@ (80164a4 <USBD_LL_Init+0x98>)
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	4a1f      	ldr	r2, [pc, #124]	@ (80164a4 <USBD_LL_Init+0x98>)
 8016428:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801642c:	4b1d      	ldr	r3, [pc, #116]	@ (80164a4 <USBD_LL_Init+0x98>)
 801642e:	4a1e      	ldr	r2, [pc, #120]	@ (80164a8 <USBD_LL_Init+0x9c>)
 8016430:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8016432:	4b1c      	ldr	r3, [pc, #112]	@ (80164a4 <USBD_LL_Init+0x98>)
 8016434:	2209      	movs	r2, #9
 8016436:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8016438:	4b1a      	ldr	r3, [pc, #104]	@ (80164a4 <USBD_LL_Init+0x98>)
 801643a:	2202      	movs	r2, #2
 801643c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801643e:	4b19      	ldr	r3, [pc, #100]	@ (80164a4 <USBD_LL_Init+0x98>)
 8016440:	2200      	movs	r2, #0
 8016442:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8016444:	4b17      	ldr	r3, [pc, #92]	@ (80164a4 <USBD_LL_Init+0x98>)
 8016446:	2202      	movs	r2, #2
 8016448:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801644a:	4b16      	ldr	r3, [pc, #88]	@ (80164a4 <USBD_LL_Init+0x98>)
 801644c:	2200      	movs	r2, #0
 801644e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8016450:	4b14      	ldr	r3, [pc, #80]	@ (80164a4 <USBD_LL_Init+0x98>)
 8016452:	2200      	movs	r2, #0
 8016454:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8016456:	4b13      	ldr	r3, [pc, #76]	@ (80164a4 <USBD_LL_Init+0x98>)
 8016458:	2200      	movs	r2, #0
 801645a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801645c:	4b11      	ldr	r3, [pc, #68]	@ (80164a4 <USBD_LL_Init+0x98>)
 801645e:	2200      	movs	r2, #0
 8016460:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8016462:	4b10      	ldr	r3, [pc, #64]	@ (80164a4 <USBD_LL_Init+0x98>)
 8016464:	2200      	movs	r2, #0
 8016466:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8016468:	4b0e      	ldr	r3, [pc, #56]	@ (80164a4 <USBD_LL_Init+0x98>)
 801646a:	2200      	movs	r2, #0
 801646c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801646e:	480d      	ldr	r0, [pc, #52]	@ (80164a4 <USBD_LL_Init+0x98>)
 8016470:	f7f1 fd1a 	bl	8007ea8 <HAL_PCD_Init>
 8016474:	4603      	mov	r3, r0
 8016476:	2b00      	cmp	r3, #0
 8016478:	d001      	beq.n	801647e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801647a:	f7ee fbb3 	bl	8004be4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801647e:	2180      	movs	r1, #128	@ 0x80
 8016480:	4808      	ldr	r0, [pc, #32]	@ (80164a4 <USBD_LL_Init+0x98>)
 8016482:	f7f2 ff6e 	bl	8009362 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8016486:	2240      	movs	r2, #64	@ 0x40
 8016488:	2100      	movs	r1, #0
 801648a:	4806      	ldr	r0, [pc, #24]	@ (80164a4 <USBD_LL_Init+0x98>)
 801648c:	f7f2 ff22 	bl	80092d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8016490:	2280      	movs	r2, #128	@ 0x80
 8016492:	2101      	movs	r1, #1
 8016494:	4803      	ldr	r0, [pc, #12]	@ (80164a4 <USBD_LL_Init+0x98>)
 8016496:	f7f2 ff1d 	bl	80092d4 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 801649a:	2300      	movs	r3, #0
}
 801649c:	4618      	mov	r0, r3
 801649e:	3708      	adds	r7, #8
 80164a0:	46bd      	mov	sp, r7
 80164a2:	bd80      	pop	{r7, pc}
 80164a4:	24003620 	.word	0x24003620
 80164a8:	40080000 	.word	0x40080000

080164ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80164ac:	b580      	push	{r7, lr}
 80164ae:	b084      	sub	sp, #16
 80164b0:	af00      	add	r7, sp, #0
 80164b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80164b4:	2300      	movs	r3, #0
 80164b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80164b8:	2300      	movs	r3, #0
 80164ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80164c2:	4618      	mov	r0, r3
 80164c4:	f7f1 fdfc 	bl	80080c0 <HAL_PCD_Start>
 80164c8:	4603      	mov	r3, r0
 80164ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80164cc:	7bfb      	ldrb	r3, [r7, #15]
 80164ce:	4618      	mov	r0, r3
 80164d0:	f000 f942 	bl	8016758 <USBD_Get_USB_Status>
 80164d4:	4603      	mov	r3, r0
 80164d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80164d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80164da:	4618      	mov	r0, r3
 80164dc:	3710      	adds	r7, #16
 80164de:	46bd      	mov	sp, r7
 80164e0:	bd80      	pop	{r7, pc}

080164e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80164e2:	b580      	push	{r7, lr}
 80164e4:	b084      	sub	sp, #16
 80164e6:	af00      	add	r7, sp, #0
 80164e8:	6078      	str	r0, [r7, #4]
 80164ea:	4608      	mov	r0, r1
 80164ec:	4611      	mov	r1, r2
 80164ee:	461a      	mov	r2, r3
 80164f0:	4603      	mov	r3, r0
 80164f2:	70fb      	strb	r3, [r7, #3]
 80164f4:	460b      	mov	r3, r1
 80164f6:	70bb      	strb	r3, [r7, #2]
 80164f8:	4613      	mov	r3, r2
 80164fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80164fc:	2300      	movs	r3, #0
 80164fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016500:	2300      	movs	r3, #0
 8016502:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801650a:	78bb      	ldrb	r3, [r7, #2]
 801650c:	883a      	ldrh	r2, [r7, #0]
 801650e:	78f9      	ldrb	r1, [r7, #3]
 8016510:	f7f2 fafd 	bl	8008b0e <HAL_PCD_EP_Open>
 8016514:	4603      	mov	r3, r0
 8016516:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016518:	7bfb      	ldrb	r3, [r7, #15]
 801651a:	4618      	mov	r0, r3
 801651c:	f000 f91c 	bl	8016758 <USBD_Get_USB_Status>
 8016520:	4603      	mov	r3, r0
 8016522:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016524:	7bbb      	ldrb	r3, [r7, #14]
}
 8016526:	4618      	mov	r0, r3
 8016528:	3710      	adds	r7, #16
 801652a:	46bd      	mov	sp, r7
 801652c:	bd80      	pop	{r7, pc}

0801652e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801652e:	b580      	push	{r7, lr}
 8016530:	b084      	sub	sp, #16
 8016532:	af00      	add	r7, sp, #0
 8016534:	6078      	str	r0, [r7, #4]
 8016536:	460b      	mov	r3, r1
 8016538:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801653a:	2300      	movs	r3, #0
 801653c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801653e:	2300      	movs	r3, #0
 8016540:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016548:	78fa      	ldrb	r2, [r7, #3]
 801654a:	4611      	mov	r1, r2
 801654c:	4618      	mov	r0, r3
 801654e:	f7f2 fb46 	bl	8008bde <HAL_PCD_EP_Close>
 8016552:	4603      	mov	r3, r0
 8016554:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016556:	7bfb      	ldrb	r3, [r7, #15]
 8016558:	4618      	mov	r0, r3
 801655a:	f000 f8fd 	bl	8016758 <USBD_Get_USB_Status>
 801655e:	4603      	mov	r3, r0
 8016560:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016562:	7bbb      	ldrb	r3, [r7, #14]
}
 8016564:	4618      	mov	r0, r3
 8016566:	3710      	adds	r7, #16
 8016568:	46bd      	mov	sp, r7
 801656a:	bd80      	pop	{r7, pc}

0801656c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801656c:	b580      	push	{r7, lr}
 801656e:	b084      	sub	sp, #16
 8016570:	af00      	add	r7, sp, #0
 8016572:	6078      	str	r0, [r7, #4]
 8016574:	460b      	mov	r3, r1
 8016576:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016578:	2300      	movs	r3, #0
 801657a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801657c:	2300      	movs	r3, #0
 801657e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016586:	78fa      	ldrb	r2, [r7, #3]
 8016588:	4611      	mov	r1, r2
 801658a:	4618      	mov	r0, r3
 801658c:	f7f2 fbfe 	bl	8008d8c <HAL_PCD_EP_SetStall>
 8016590:	4603      	mov	r3, r0
 8016592:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016594:	7bfb      	ldrb	r3, [r7, #15]
 8016596:	4618      	mov	r0, r3
 8016598:	f000 f8de 	bl	8016758 <USBD_Get_USB_Status>
 801659c:	4603      	mov	r3, r0
 801659e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80165a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80165a2:	4618      	mov	r0, r3
 80165a4:	3710      	adds	r7, #16
 80165a6:	46bd      	mov	sp, r7
 80165a8:	bd80      	pop	{r7, pc}

080165aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80165aa:	b580      	push	{r7, lr}
 80165ac:	b084      	sub	sp, #16
 80165ae:	af00      	add	r7, sp, #0
 80165b0:	6078      	str	r0, [r7, #4]
 80165b2:	460b      	mov	r3, r1
 80165b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80165b6:	2300      	movs	r3, #0
 80165b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80165ba:	2300      	movs	r3, #0
 80165bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80165c4:	78fa      	ldrb	r2, [r7, #3]
 80165c6:	4611      	mov	r1, r2
 80165c8:	4618      	mov	r0, r3
 80165ca:	f7f2 fc42 	bl	8008e52 <HAL_PCD_EP_ClrStall>
 80165ce:	4603      	mov	r3, r0
 80165d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80165d2:	7bfb      	ldrb	r3, [r7, #15]
 80165d4:	4618      	mov	r0, r3
 80165d6:	f000 f8bf 	bl	8016758 <USBD_Get_USB_Status>
 80165da:	4603      	mov	r3, r0
 80165dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80165de:	7bbb      	ldrb	r3, [r7, #14]
}
 80165e0:	4618      	mov	r0, r3
 80165e2:	3710      	adds	r7, #16
 80165e4:	46bd      	mov	sp, r7
 80165e6:	bd80      	pop	{r7, pc}

080165e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80165e8:	b480      	push	{r7}
 80165ea:	b085      	sub	sp, #20
 80165ec:	af00      	add	r7, sp, #0
 80165ee:	6078      	str	r0, [r7, #4]
 80165f0:	460b      	mov	r3, r1
 80165f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80165fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80165fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016600:	2b00      	cmp	r3, #0
 8016602:	da0b      	bge.n	801661c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016604:	78fb      	ldrb	r3, [r7, #3]
 8016606:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801660a:	68f9      	ldr	r1, [r7, #12]
 801660c:	4613      	mov	r3, r2
 801660e:	00db      	lsls	r3, r3, #3
 8016610:	4413      	add	r3, r2
 8016612:	009b      	lsls	r3, r3, #2
 8016614:	440b      	add	r3, r1
 8016616:	3316      	adds	r3, #22
 8016618:	781b      	ldrb	r3, [r3, #0]
 801661a:	e00b      	b.n	8016634 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801661c:	78fb      	ldrb	r3, [r7, #3]
 801661e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016622:	68f9      	ldr	r1, [r7, #12]
 8016624:	4613      	mov	r3, r2
 8016626:	00db      	lsls	r3, r3, #3
 8016628:	4413      	add	r3, r2
 801662a:	009b      	lsls	r3, r3, #2
 801662c:	440b      	add	r3, r1
 801662e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8016632:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016634:	4618      	mov	r0, r3
 8016636:	3714      	adds	r7, #20
 8016638:	46bd      	mov	sp, r7
 801663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801663e:	4770      	bx	lr

08016640 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016640:	b580      	push	{r7, lr}
 8016642:	b084      	sub	sp, #16
 8016644:	af00      	add	r7, sp, #0
 8016646:	6078      	str	r0, [r7, #4]
 8016648:	460b      	mov	r3, r1
 801664a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801664c:	2300      	movs	r3, #0
 801664e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016650:	2300      	movs	r3, #0
 8016652:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801665a:	78fa      	ldrb	r2, [r7, #3]
 801665c:	4611      	mov	r1, r2
 801665e:	4618      	mov	r0, r3
 8016660:	f7f2 fa31 	bl	8008ac6 <HAL_PCD_SetAddress>
 8016664:	4603      	mov	r3, r0
 8016666:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016668:	7bfb      	ldrb	r3, [r7, #15]
 801666a:	4618      	mov	r0, r3
 801666c:	f000 f874 	bl	8016758 <USBD_Get_USB_Status>
 8016670:	4603      	mov	r3, r0
 8016672:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016674:	7bbb      	ldrb	r3, [r7, #14]
}
 8016676:	4618      	mov	r0, r3
 8016678:	3710      	adds	r7, #16
 801667a:	46bd      	mov	sp, r7
 801667c:	bd80      	pop	{r7, pc}

0801667e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801667e:	b580      	push	{r7, lr}
 8016680:	b086      	sub	sp, #24
 8016682:	af00      	add	r7, sp, #0
 8016684:	60f8      	str	r0, [r7, #12]
 8016686:	607a      	str	r2, [r7, #4]
 8016688:	603b      	str	r3, [r7, #0]
 801668a:	460b      	mov	r3, r1
 801668c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801668e:	2300      	movs	r3, #0
 8016690:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016692:	2300      	movs	r3, #0
 8016694:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016696:	68fb      	ldr	r3, [r7, #12]
 8016698:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801669c:	7af9      	ldrb	r1, [r7, #11]
 801669e:	683b      	ldr	r3, [r7, #0]
 80166a0:	687a      	ldr	r2, [r7, #4]
 80166a2:	f7f2 fb39 	bl	8008d18 <HAL_PCD_EP_Transmit>
 80166a6:	4603      	mov	r3, r0
 80166a8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80166aa:	7dfb      	ldrb	r3, [r7, #23]
 80166ac:	4618      	mov	r0, r3
 80166ae:	f000 f853 	bl	8016758 <USBD_Get_USB_Status>
 80166b2:	4603      	mov	r3, r0
 80166b4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80166b6:	7dbb      	ldrb	r3, [r7, #22]
}
 80166b8:	4618      	mov	r0, r3
 80166ba:	3718      	adds	r7, #24
 80166bc:	46bd      	mov	sp, r7
 80166be:	bd80      	pop	{r7, pc}

080166c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80166c0:	b580      	push	{r7, lr}
 80166c2:	b086      	sub	sp, #24
 80166c4:	af00      	add	r7, sp, #0
 80166c6:	60f8      	str	r0, [r7, #12]
 80166c8:	607a      	str	r2, [r7, #4]
 80166ca:	603b      	str	r3, [r7, #0]
 80166cc:	460b      	mov	r3, r1
 80166ce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80166d0:	2300      	movs	r3, #0
 80166d2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80166d4:	2300      	movs	r3, #0
 80166d6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80166d8:	68fb      	ldr	r3, [r7, #12]
 80166da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80166de:	7af9      	ldrb	r1, [r7, #11]
 80166e0:	683b      	ldr	r3, [r7, #0]
 80166e2:	687a      	ldr	r2, [r7, #4]
 80166e4:	f7f2 fac5 	bl	8008c72 <HAL_PCD_EP_Receive>
 80166e8:	4603      	mov	r3, r0
 80166ea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80166ec:	7dfb      	ldrb	r3, [r7, #23]
 80166ee:	4618      	mov	r0, r3
 80166f0:	f000 f832 	bl	8016758 <USBD_Get_USB_Status>
 80166f4:	4603      	mov	r3, r0
 80166f6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80166f8:	7dbb      	ldrb	r3, [r7, #22]
}
 80166fa:	4618      	mov	r0, r3
 80166fc:	3718      	adds	r7, #24
 80166fe:	46bd      	mov	sp, r7
 8016700:	bd80      	pop	{r7, pc}

08016702 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016702:	b580      	push	{r7, lr}
 8016704:	b082      	sub	sp, #8
 8016706:	af00      	add	r7, sp, #0
 8016708:	6078      	str	r0, [r7, #4]
 801670a:	460b      	mov	r3, r1
 801670c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016714:	78fa      	ldrb	r2, [r7, #3]
 8016716:	4611      	mov	r1, r2
 8016718:	4618      	mov	r0, r3
 801671a:	f7f2 fae5 	bl	8008ce8 <HAL_PCD_EP_GetRxCount>
 801671e:	4603      	mov	r3, r0
}
 8016720:	4618      	mov	r0, r3
 8016722:	3708      	adds	r7, #8
 8016724:	46bd      	mov	sp, r7
 8016726:	bd80      	pop	{r7, pc}

08016728 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016728:	b480      	push	{r7}
 801672a:	b083      	sub	sp, #12
 801672c:	af00      	add	r7, sp, #0
 801672e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016730:	4b03      	ldr	r3, [pc, #12]	@ (8016740 <USBD_static_malloc+0x18>)
}
 8016732:	4618      	mov	r0, r3
 8016734:	370c      	adds	r7, #12
 8016736:	46bd      	mov	sp, r7
 8016738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801673c:	4770      	bx	lr
 801673e:	bf00      	nop
 8016740:	24003b04 	.word	0x24003b04

08016744 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016744:	b480      	push	{r7}
 8016746:	b083      	sub	sp, #12
 8016748:	af00      	add	r7, sp, #0
 801674a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 801674c:	bf00      	nop
 801674e:	370c      	adds	r7, #12
 8016750:	46bd      	mov	sp, r7
 8016752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016756:	4770      	bx	lr

08016758 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016758:	b480      	push	{r7}
 801675a:	b085      	sub	sp, #20
 801675c:	af00      	add	r7, sp, #0
 801675e:	4603      	mov	r3, r0
 8016760:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016762:	2300      	movs	r3, #0
 8016764:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016766:	79fb      	ldrb	r3, [r7, #7]
 8016768:	2b03      	cmp	r3, #3
 801676a:	d817      	bhi.n	801679c <USBD_Get_USB_Status+0x44>
 801676c:	a201      	add	r2, pc, #4	@ (adr r2, 8016774 <USBD_Get_USB_Status+0x1c>)
 801676e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016772:	bf00      	nop
 8016774:	08016785 	.word	0x08016785
 8016778:	0801678b 	.word	0x0801678b
 801677c:	08016791 	.word	0x08016791
 8016780:	08016797 	.word	0x08016797
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016784:	2300      	movs	r3, #0
 8016786:	73fb      	strb	r3, [r7, #15]
    break;
 8016788:	e00b      	b.n	80167a2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801678a:	2303      	movs	r3, #3
 801678c:	73fb      	strb	r3, [r7, #15]
    break;
 801678e:	e008      	b.n	80167a2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016790:	2301      	movs	r3, #1
 8016792:	73fb      	strb	r3, [r7, #15]
    break;
 8016794:	e005      	b.n	80167a2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016796:	2303      	movs	r3, #3
 8016798:	73fb      	strb	r3, [r7, #15]
    break;
 801679a:	e002      	b.n	80167a2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801679c:	2303      	movs	r3, #3
 801679e:	73fb      	strb	r3, [r7, #15]
    break;
 80167a0:	bf00      	nop
  }
  return usb_status;
 80167a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80167a4:	4618      	mov	r0, r3
 80167a6:	3714      	adds	r7, #20
 80167a8:	46bd      	mov	sp, r7
 80167aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167ae:	4770      	bx	lr

080167b0 <atof>:
 80167b0:	2100      	movs	r1, #0
 80167b2:	f000 be29 	b.w	8017408 <strtod>

080167b6 <atoi>:
 80167b6:	220a      	movs	r2, #10
 80167b8:	2100      	movs	r1, #0
 80167ba:	f000 bead 	b.w	8017518 <strtol>
	...

080167c0 <srand>:
 80167c0:	b538      	push	{r3, r4, r5, lr}
 80167c2:	4b10      	ldr	r3, [pc, #64]	@ (8016804 <srand+0x44>)
 80167c4:	681d      	ldr	r5, [r3, #0]
 80167c6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80167c8:	4604      	mov	r4, r0
 80167ca:	b9b3      	cbnz	r3, 80167fa <srand+0x3a>
 80167cc:	2018      	movs	r0, #24
 80167ce:	f003 ff95 	bl	801a6fc <malloc>
 80167d2:	4602      	mov	r2, r0
 80167d4:	6328      	str	r0, [r5, #48]	@ 0x30
 80167d6:	b920      	cbnz	r0, 80167e2 <srand+0x22>
 80167d8:	4b0b      	ldr	r3, [pc, #44]	@ (8016808 <srand+0x48>)
 80167da:	480c      	ldr	r0, [pc, #48]	@ (801680c <srand+0x4c>)
 80167dc:	2146      	movs	r1, #70	@ 0x46
 80167de:	f002 fdc1 	bl	8019364 <__assert_func>
 80167e2:	490b      	ldr	r1, [pc, #44]	@ (8016810 <srand+0x50>)
 80167e4:	4b0b      	ldr	r3, [pc, #44]	@ (8016814 <srand+0x54>)
 80167e6:	e9c0 1300 	strd	r1, r3, [r0]
 80167ea:	4b0b      	ldr	r3, [pc, #44]	@ (8016818 <srand+0x58>)
 80167ec:	6083      	str	r3, [r0, #8]
 80167ee:	230b      	movs	r3, #11
 80167f0:	8183      	strh	r3, [r0, #12]
 80167f2:	2100      	movs	r1, #0
 80167f4:	2001      	movs	r0, #1
 80167f6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80167fa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80167fc:	2200      	movs	r2, #0
 80167fe:	611c      	str	r4, [r3, #16]
 8016800:	615a      	str	r2, [r3, #20]
 8016802:	bd38      	pop	{r3, r4, r5, pc}
 8016804:	24000430 	.word	0x24000430
 8016808:	0801e840 	.word	0x0801e840
 801680c:	0801e857 	.word	0x0801e857
 8016810:	abcd330e 	.word	0xabcd330e
 8016814:	e66d1234 	.word	0xe66d1234
 8016818:	0005deec 	.word	0x0005deec

0801681c <rand>:
 801681c:	4b16      	ldr	r3, [pc, #88]	@ (8016878 <rand+0x5c>)
 801681e:	b510      	push	{r4, lr}
 8016820:	681c      	ldr	r4, [r3, #0]
 8016822:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016824:	b9b3      	cbnz	r3, 8016854 <rand+0x38>
 8016826:	2018      	movs	r0, #24
 8016828:	f003 ff68 	bl	801a6fc <malloc>
 801682c:	4602      	mov	r2, r0
 801682e:	6320      	str	r0, [r4, #48]	@ 0x30
 8016830:	b920      	cbnz	r0, 801683c <rand+0x20>
 8016832:	4b12      	ldr	r3, [pc, #72]	@ (801687c <rand+0x60>)
 8016834:	4812      	ldr	r0, [pc, #72]	@ (8016880 <rand+0x64>)
 8016836:	2152      	movs	r1, #82	@ 0x52
 8016838:	f002 fd94 	bl	8019364 <__assert_func>
 801683c:	4911      	ldr	r1, [pc, #68]	@ (8016884 <rand+0x68>)
 801683e:	4b12      	ldr	r3, [pc, #72]	@ (8016888 <rand+0x6c>)
 8016840:	e9c0 1300 	strd	r1, r3, [r0]
 8016844:	4b11      	ldr	r3, [pc, #68]	@ (801688c <rand+0x70>)
 8016846:	6083      	str	r3, [r0, #8]
 8016848:	230b      	movs	r3, #11
 801684a:	8183      	strh	r3, [r0, #12]
 801684c:	2100      	movs	r1, #0
 801684e:	2001      	movs	r0, #1
 8016850:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016854:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016856:	480e      	ldr	r0, [pc, #56]	@ (8016890 <rand+0x74>)
 8016858:	690b      	ldr	r3, [r1, #16]
 801685a:	694c      	ldr	r4, [r1, #20]
 801685c:	4a0d      	ldr	r2, [pc, #52]	@ (8016894 <rand+0x78>)
 801685e:	4358      	muls	r0, r3
 8016860:	fb02 0004 	mla	r0, r2, r4, r0
 8016864:	fba3 3202 	umull	r3, r2, r3, r2
 8016868:	3301      	adds	r3, #1
 801686a:	eb40 0002 	adc.w	r0, r0, r2
 801686e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8016872:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8016876:	bd10      	pop	{r4, pc}
 8016878:	24000430 	.word	0x24000430
 801687c:	0801e840 	.word	0x0801e840
 8016880:	0801e857 	.word	0x0801e857
 8016884:	abcd330e 	.word	0xabcd330e
 8016888:	e66d1234 	.word	0xe66d1234
 801688c:	0005deec 	.word	0x0005deec
 8016890:	5851f42d 	.word	0x5851f42d
 8016894:	4c957f2d 	.word	0x4c957f2d

08016898 <sulp>:
 8016898:	b570      	push	{r4, r5, r6, lr}
 801689a:	4604      	mov	r4, r0
 801689c:	460d      	mov	r5, r1
 801689e:	4616      	mov	r6, r2
 80168a0:	ec45 4b10 	vmov	d0, r4, r5
 80168a4:	f004 fb6e 	bl	801af84 <__ulp>
 80168a8:	b17e      	cbz	r6, 80168ca <sulp+0x32>
 80168aa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80168ae:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80168b2:	2b00      	cmp	r3, #0
 80168b4:	dd09      	ble.n	80168ca <sulp+0x32>
 80168b6:	051b      	lsls	r3, r3, #20
 80168b8:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 80168bc:	2000      	movs	r0, #0
 80168be:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 80168c2:	ec41 0b17 	vmov	d7, r0, r1
 80168c6:	ee20 0b07 	vmul.f64	d0, d0, d7
 80168ca:	bd70      	pop	{r4, r5, r6, pc}
 80168cc:	0000      	movs	r0, r0
	...

080168d0 <_strtod_l>:
 80168d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168d4:	ed2d 8b0a 	vpush	{d8-d12}
 80168d8:	b097      	sub	sp, #92	@ 0x5c
 80168da:	4688      	mov	r8, r1
 80168dc:	920e      	str	r2, [sp, #56]	@ 0x38
 80168de:	2200      	movs	r2, #0
 80168e0:	9212      	str	r2, [sp, #72]	@ 0x48
 80168e2:	9005      	str	r0, [sp, #20]
 80168e4:	f04f 0a00 	mov.w	sl, #0
 80168e8:	f04f 0b00 	mov.w	fp, #0
 80168ec:	460a      	mov	r2, r1
 80168ee:	9211      	str	r2, [sp, #68]	@ 0x44
 80168f0:	7811      	ldrb	r1, [r2, #0]
 80168f2:	292b      	cmp	r1, #43	@ 0x2b
 80168f4:	d04c      	beq.n	8016990 <_strtod_l+0xc0>
 80168f6:	d839      	bhi.n	801696c <_strtod_l+0x9c>
 80168f8:	290d      	cmp	r1, #13
 80168fa:	d833      	bhi.n	8016964 <_strtod_l+0x94>
 80168fc:	2908      	cmp	r1, #8
 80168fe:	d833      	bhi.n	8016968 <_strtod_l+0x98>
 8016900:	2900      	cmp	r1, #0
 8016902:	d03c      	beq.n	801697e <_strtod_l+0xae>
 8016904:	2200      	movs	r2, #0
 8016906:	9208      	str	r2, [sp, #32]
 8016908:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801690a:	782a      	ldrb	r2, [r5, #0]
 801690c:	2a30      	cmp	r2, #48	@ 0x30
 801690e:	f040 80b5 	bne.w	8016a7c <_strtod_l+0x1ac>
 8016912:	786a      	ldrb	r2, [r5, #1]
 8016914:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016918:	2a58      	cmp	r2, #88	@ 0x58
 801691a:	d170      	bne.n	80169fe <_strtod_l+0x12e>
 801691c:	9302      	str	r3, [sp, #8]
 801691e:	9b08      	ldr	r3, [sp, #32]
 8016920:	9301      	str	r3, [sp, #4]
 8016922:	ab12      	add	r3, sp, #72	@ 0x48
 8016924:	9300      	str	r3, [sp, #0]
 8016926:	4a8b      	ldr	r2, [pc, #556]	@ (8016b54 <_strtod_l+0x284>)
 8016928:	9805      	ldr	r0, [sp, #20]
 801692a:	ab13      	add	r3, sp, #76	@ 0x4c
 801692c:	a911      	add	r1, sp, #68	@ 0x44
 801692e:	f003 fbcf 	bl	801a0d0 <__gethex>
 8016932:	f010 060f 	ands.w	r6, r0, #15
 8016936:	4604      	mov	r4, r0
 8016938:	d005      	beq.n	8016946 <_strtod_l+0x76>
 801693a:	2e06      	cmp	r6, #6
 801693c:	d12a      	bne.n	8016994 <_strtod_l+0xc4>
 801693e:	3501      	adds	r5, #1
 8016940:	2300      	movs	r3, #0
 8016942:	9511      	str	r5, [sp, #68]	@ 0x44
 8016944:	9308      	str	r3, [sp, #32]
 8016946:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016948:	2b00      	cmp	r3, #0
 801694a:	f040 852f 	bne.w	80173ac <_strtod_l+0xadc>
 801694e:	9b08      	ldr	r3, [sp, #32]
 8016950:	ec4b ab10 	vmov	d0, sl, fp
 8016954:	b1cb      	cbz	r3, 801698a <_strtod_l+0xba>
 8016956:	eeb1 0b40 	vneg.f64	d0, d0
 801695a:	b017      	add	sp, #92	@ 0x5c
 801695c:	ecbd 8b0a 	vpop	{d8-d12}
 8016960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016964:	2920      	cmp	r1, #32
 8016966:	d1cd      	bne.n	8016904 <_strtod_l+0x34>
 8016968:	3201      	adds	r2, #1
 801696a:	e7c0      	b.n	80168ee <_strtod_l+0x1e>
 801696c:	292d      	cmp	r1, #45	@ 0x2d
 801696e:	d1c9      	bne.n	8016904 <_strtod_l+0x34>
 8016970:	2101      	movs	r1, #1
 8016972:	9108      	str	r1, [sp, #32]
 8016974:	1c51      	adds	r1, r2, #1
 8016976:	9111      	str	r1, [sp, #68]	@ 0x44
 8016978:	7852      	ldrb	r2, [r2, #1]
 801697a:	2a00      	cmp	r2, #0
 801697c:	d1c4      	bne.n	8016908 <_strtod_l+0x38>
 801697e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016980:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8016984:	2b00      	cmp	r3, #0
 8016986:	f040 850f 	bne.w	80173a8 <_strtod_l+0xad8>
 801698a:	ec4b ab10 	vmov	d0, sl, fp
 801698e:	e7e4      	b.n	801695a <_strtod_l+0x8a>
 8016990:	2100      	movs	r1, #0
 8016992:	e7ee      	b.n	8016972 <_strtod_l+0xa2>
 8016994:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016996:	b13a      	cbz	r2, 80169a8 <_strtod_l+0xd8>
 8016998:	2135      	movs	r1, #53	@ 0x35
 801699a:	a814      	add	r0, sp, #80	@ 0x50
 801699c:	f004 fbe9 	bl	801b172 <__copybits>
 80169a0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80169a2:	9805      	ldr	r0, [sp, #20]
 80169a4:	f003 ffba 	bl	801a91c <_Bfree>
 80169a8:	1e73      	subs	r3, r6, #1
 80169aa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80169ac:	2b04      	cmp	r3, #4
 80169ae:	d806      	bhi.n	80169be <_strtod_l+0xee>
 80169b0:	e8df f003 	tbb	[pc, r3]
 80169b4:	201d0314 	.word	0x201d0314
 80169b8:	14          	.byte	0x14
 80169b9:	00          	.byte	0x00
 80169ba:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 80169be:	05e3      	lsls	r3, r4, #23
 80169c0:	bf48      	it	mi
 80169c2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80169c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80169ca:	0d1b      	lsrs	r3, r3, #20
 80169cc:	051b      	lsls	r3, r3, #20
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	d1b9      	bne.n	8016946 <_strtod_l+0x76>
 80169d2:	f002 fc71 	bl	80192b8 <__errno>
 80169d6:	2322      	movs	r3, #34	@ 0x22
 80169d8:	6003      	str	r3, [r0, #0]
 80169da:	e7b4      	b.n	8016946 <_strtod_l+0x76>
 80169dc:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 80169e0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80169e4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80169e8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80169ec:	e7e7      	b.n	80169be <_strtod_l+0xee>
 80169ee:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8016b5c <_strtod_l+0x28c>
 80169f2:	e7e4      	b.n	80169be <_strtod_l+0xee>
 80169f4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80169f8:	f04f 3aff 	mov.w	sl, #4294967295
 80169fc:	e7df      	b.n	80169be <_strtod_l+0xee>
 80169fe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016a00:	1c5a      	adds	r2, r3, #1
 8016a02:	9211      	str	r2, [sp, #68]	@ 0x44
 8016a04:	785b      	ldrb	r3, [r3, #1]
 8016a06:	2b30      	cmp	r3, #48	@ 0x30
 8016a08:	d0f9      	beq.n	80169fe <_strtod_l+0x12e>
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	d09b      	beq.n	8016946 <_strtod_l+0x76>
 8016a0e:	2301      	movs	r3, #1
 8016a10:	2600      	movs	r6, #0
 8016a12:	9307      	str	r3, [sp, #28]
 8016a14:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016a16:	930a      	str	r3, [sp, #40]	@ 0x28
 8016a18:	46b1      	mov	r9, r6
 8016a1a:	4635      	mov	r5, r6
 8016a1c:	220a      	movs	r2, #10
 8016a1e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8016a20:	7804      	ldrb	r4, [r0, #0]
 8016a22:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8016a26:	b2d9      	uxtb	r1, r3
 8016a28:	2909      	cmp	r1, #9
 8016a2a:	d929      	bls.n	8016a80 <_strtod_l+0x1b0>
 8016a2c:	494a      	ldr	r1, [pc, #296]	@ (8016b58 <_strtod_l+0x288>)
 8016a2e:	2201      	movs	r2, #1
 8016a30:	f001 fe5b 	bl	80186ea <strncmp>
 8016a34:	b378      	cbz	r0, 8016a96 <_strtod_l+0x1c6>
 8016a36:	2000      	movs	r0, #0
 8016a38:	4622      	mov	r2, r4
 8016a3a:	462b      	mov	r3, r5
 8016a3c:	4607      	mov	r7, r0
 8016a3e:	9006      	str	r0, [sp, #24]
 8016a40:	2a65      	cmp	r2, #101	@ 0x65
 8016a42:	d001      	beq.n	8016a48 <_strtod_l+0x178>
 8016a44:	2a45      	cmp	r2, #69	@ 0x45
 8016a46:	d117      	bne.n	8016a78 <_strtod_l+0x1a8>
 8016a48:	b91b      	cbnz	r3, 8016a52 <_strtod_l+0x182>
 8016a4a:	9b07      	ldr	r3, [sp, #28]
 8016a4c:	4303      	orrs	r3, r0
 8016a4e:	d096      	beq.n	801697e <_strtod_l+0xae>
 8016a50:	2300      	movs	r3, #0
 8016a52:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8016a56:	f108 0201 	add.w	r2, r8, #1
 8016a5a:	9211      	str	r2, [sp, #68]	@ 0x44
 8016a5c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8016a60:	2a2b      	cmp	r2, #43	@ 0x2b
 8016a62:	d06b      	beq.n	8016b3c <_strtod_l+0x26c>
 8016a64:	2a2d      	cmp	r2, #45	@ 0x2d
 8016a66:	d071      	beq.n	8016b4c <_strtod_l+0x27c>
 8016a68:	f04f 0e00 	mov.w	lr, #0
 8016a6c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8016a70:	2c09      	cmp	r4, #9
 8016a72:	d979      	bls.n	8016b68 <_strtod_l+0x298>
 8016a74:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8016a78:	2400      	movs	r4, #0
 8016a7a:	e094      	b.n	8016ba6 <_strtod_l+0x2d6>
 8016a7c:	2300      	movs	r3, #0
 8016a7e:	e7c7      	b.n	8016a10 <_strtod_l+0x140>
 8016a80:	2d08      	cmp	r5, #8
 8016a82:	f100 0001 	add.w	r0, r0, #1
 8016a86:	bfd4      	ite	le
 8016a88:	fb02 3909 	mlale	r9, r2, r9, r3
 8016a8c:	fb02 3606 	mlagt	r6, r2, r6, r3
 8016a90:	3501      	adds	r5, #1
 8016a92:	9011      	str	r0, [sp, #68]	@ 0x44
 8016a94:	e7c3      	b.n	8016a1e <_strtod_l+0x14e>
 8016a96:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016a98:	1c5a      	adds	r2, r3, #1
 8016a9a:	9211      	str	r2, [sp, #68]	@ 0x44
 8016a9c:	785a      	ldrb	r2, [r3, #1]
 8016a9e:	b375      	cbz	r5, 8016afe <_strtod_l+0x22e>
 8016aa0:	4607      	mov	r7, r0
 8016aa2:	462b      	mov	r3, r5
 8016aa4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8016aa8:	2909      	cmp	r1, #9
 8016aaa:	d913      	bls.n	8016ad4 <_strtod_l+0x204>
 8016aac:	2101      	movs	r1, #1
 8016aae:	9106      	str	r1, [sp, #24]
 8016ab0:	e7c6      	b.n	8016a40 <_strtod_l+0x170>
 8016ab2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016ab4:	1c5a      	adds	r2, r3, #1
 8016ab6:	9211      	str	r2, [sp, #68]	@ 0x44
 8016ab8:	785a      	ldrb	r2, [r3, #1]
 8016aba:	3001      	adds	r0, #1
 8016abc:	2a30      	cmp	r2, #48	@ 0x30
 8016abe:	d0f8      	beq.n	8016ab2 <_strtod_l+0x1e2>
 8016ac0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8016ac4:	2b08      	cmp	r3, #8
 8016ac6:	f200 8476 	bhi.w	80173b6 <_strtod_l+0xae6>
 8016aca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016acc:	930a      	str	r3, [sp, #40]	@ 0x28
 8016ace:	4607      	mov	r7, r0
 8016ad0:	2000      	movs	r0, #0
 8016ad2:	4603      	mov	r3, r0
 8016ad4:	3a30      	subs	r2, #48	@ 0x30
 8016ad6:	f100 0101 	add.w	r1, r0, #1
 8016ada:	d023      	beq.n	8016b24 <_strtod_l+0x254>
 8016adc:	440f      	add	r7, r1
 8016ade:	eb00 0c03 	add.w	ip, r0, r3
 8016ae2:	4619      	mov	r1, r3
 8016ae4:	240a      	movs	r4, #10
 8016ae6:	4561      	cmp	r1, ip
 8016ae8:	d10b      	bne.n	8016b02 <_strtod_l+0x232>
 8016aea:	1c5c      	adds	r4, r3, #1
 8016aec:	4403      	add	r3, r0
 8016aee:	2b08      	cmp	r3, #8
 8016af0:	4404      	add	r4, r0
 8016af2:	dc11      	bgt.n	8016b18 <_strtod_l+0x248>
 8016af4:	230a      	movs	r3, #10
 8016af6:	fb03 2909 	mla	r9, r3, r9, r2
 8016afa:	2100      	movs	r1, #0
 8016afc:	e013      	b.n	8016b26 <_strtod_l+0x256>
 8016afe:	4628      	mov	r0, r5
 8016b00:	e7dc      	b.n	8016abc <_strtod_l+0x1ec>
 8016b02:	2908      	cmp	r1, #8
 8016b04:	f101 0101 	add.w	r1, r1, #1
 8016b08:	dc02      	bgt.n	8016b10 <_strtod_l+0x240>
 8016b0a:	fb04 f909 	mul.w	r9, r4, r9
 8016b0e:	e7ea      	b.n	8016ae6 <_strtod_l+0x216>
 8016b10:	2910      	cmp	r1, #16
 8016b12:	bfd8      	it	le
 8016b14:	4366      	mulle	r6, r4
 8016b16:	e7e6      	b.n	8016ae6 <_strtod_l+0x216>
 8016b18:	2b0f      	cmp	r3, #15
 8016b1a:	dcee      	bgt.n	8016afa <_strtod_l+0x22a>
 8016b1c:	230a      	movs	r3, #10
 8016b1e:	fb03 2606 	mla	r6, r3, r6, r2
 8016b22:	e7ea      	b.n	8016afa <_strtod_l+0x22a>
 8016b24:	461c      	mov	r4, r3
 8016b26:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016b28:	1c5a      	adds	r2, r3, #1
 8016b2a:	9211      	str	r2, [sp, #68]	@ 0x44
 8016b2c:	785a      	ldrb	r2, [r3, #1]
 8016b2e:	4608      	mov	r0, r1
 8016b30:	4623      	mov	r3, r4
 8016b32:	e7b7      	b.n	8016aa4 <_strtod_l+0x1d4>
 8016b34:	2301      	movs	r3, #1
 8016b36:	2700      	movs	r7, #0
 8016b38:	9306      	str	r3, [sp, #24]
 8016b3a:	e786      	b.n	8016a4a <_strtod_l+0x17a>
 8016b3c:	f04f 0e00 	mov.w	lr, #0
 8016b40:	f108 0202 	add.w	r2, r8, #2
 8016b44:	9211      	str	r2, [sp, #68]	@ 0x44
 8016b46:	f898 2002 	ldrb.w	r2, [r8, #2]
 8016b4a:	e78f      	b.n	8016a6c <_strtod_l+0x19c>
 8016b4c:	f04f 0e01 	mov.w	lr, #1
 8016b50:	e7f6      	b.n	8016b40 <_strtod_l+0x270>
 8016b52:	bf00      	nop
 8016b54:	0801e8c8 	.word	0x0801e8c8
 8016b58:	0801e8af 	.word	0x0801e8af
 8016b5c:	7ff00000 	.word	0x7ff00000
 8016b60:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8016b62:	1c54      	adds	r4, r2, #1
 8016b64:	9411      	str	r4, [sp, #68]	@ 0x44
 8016b66:	7852      	ldrb	r2, [r2, #1]
 8016b68:	2a30      	cmp	r2, #48	@ 0x30
 8016b6a:	d0f9      	beq.n	8016b60 <_strtod_l+0x290>
 8016b6c:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8016b70:	2c08      	cmp	r4, #8
 8016b72:	d881      	bhi.n	8016a78 <_strtod_l+0x1a8>
 8016b74:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8016b78:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8016b7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8016b7c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8016b7e:	1c51      	adds	r1, r2, #1
 8016b80:	9111      	str	r1, [sp, #68]	@ 0x44
 8016b82:	7852      	ldrb	r2, [r2, #1]
 8016b84:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8016b88:	2c09      	cmp	r4, #9
 8016b8a:	d938      	bls.n	8016bfe <_strtod_l+0x32e>
 8016b8c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8016b8e:	1b0c      	subs	r4, r1, r4
 8016b90:	2c08      	cmp	r4, #8
 8016b92:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8016b96:	dc02      	bgt.n	8016b9e <_strtod_l+0x2ce>
 8016b98:	4564      	cmp	r4, ip
 8016b9a:	bfa8      	it	ge
 8016b9c:	4664      	movge	r4, ip
 8016b9e:	f1be 0f00 	cmp.w	lr, #0
 8016ba2:	d000      	beq.n	8016ba6 <_strtod_l+0x2d6>
 8016ba4:	4264      	negs	r4, r4
 8016ba6:	2b00      	cmp	r3, #0
 8016ba8:	d14e      	bne.n	8016c48 <_strtod_l+0x378>
 8016baa:	9b07      	ldr	r3, [sp, #28]
 8016bac:	4318      	orrs	r0, r3
 8016bae:	f47f aeca 	bne.w	8016946 <_strtod_l+0x76>
 8016bb2:	9b06      	ldr	r3, [sp, #24]
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	f47f aee2 	bne.w	801697e <_strtod_l+0xae>
 8016bba:	2a69      	cmp	r2, #105	@ 0x69
 8016bbc:	d027      	beq.n	8016c0e <_strtod_l+0x33e>
 8016bbe:	dc24      	bgt.n	8016c0a <_strtod_l+0x33a>
 8016bc0:	2a49      	cmp	r2, #73	@ 0x49
 8016bc2:	d024      	beq.n	8016c0e <_strtod_l+0x33e>
 8016bc4:	2a4e      	cmp	r2, #78	@ 0x4e
 8016bc6:	f47f aeda 	bne.w	801697e <_strtod_l+0xae>
 8016bca:	4997      	ldr	r1, [pc, #604]	@ (8016e28 <_strtod_l+0x558>)
 8016bcc:	a811      	add	r0, sp, #68	@ 0x44
 8016bce:	f003 fca1 	bl	801a514 <__match>
 8016bd2:	2800      	cmp	r0, #0
 8016bd4:	f43f aed3 	beq.w	801697e <_strtod_l+0xae>
 8016bd8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016bda:	781b      	ldrb	r3, [r3, #0]
 8016bdc:	2b28      	cmp	r3, #40	@ 0x28
 8016bde:	d12d      	bne.n	8016c3c <_strtod_l+0x36c>
 8016be0:	4992      	ldr	r1, [pc, #584]	@ (8016e2c <_strtod_l+0x55c>)
 8016be2:	aa14      	add	r2, sp, #80	@ 0x50
 8016be4:	a811      	add	r0, sp, #68	@ 0x44
 8016be6:	f003 fca9 	bl	801a53c <__hexnan>
 8016bea:	2805      	cmp	r0, #5
 8016bec:	d126      	bne.n	8016c3c <_strtod_l+0x36c>
 8016bee:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016bf0:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8016bf4:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8016bf8:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8016bfc:	e6a3      	b.n	8016946 <_strtod_l+0x76>
 8016bfe:	240a      	movs	r4, #10
 8016c00:	fb04 2c0c 	mla	ip, r4, ip, r2
 8016c04:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8016c08:	e7b8      	b.n	8016b7c <_strtod_l+0x2ac>
 8016c0a:	2a6e      	cmp	r2, #110	@ 0x6e
 8016c0c:	e7db      	b.n	8016bc6 <_strtod_l+0x2f6>
 8016c0e:	4988      	ldr	r1, [pc, #544]	@ (8016e30 <_strtod_l+0x560>)
 8016c10:	a811      	add	r0, sp, #68	@ 0x44
 8016c12:	f003 fc7f 	bl	801a514 <__match>
 8016c16:	2800      	cmp	r0, #0
 8016c18:	f43f aeb1 	beq.w	801697e <_strtod_l+0xae>
 8016c1c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016c1e:	4985      	ldr	r1, [pc, #532]	@ (8016e34 <_strtod_l+0x564>)
 8016c20:	3b01      	subs	r3, #1
 8016c22:	a811      	add	r0, sp, #68	@ 0x44
 8016c24:	9311      	str	r3, [sp, #68]	@ 0x44
 8016c26:	f003 fc75 	bl	801a514 <__match>
 8016c2a:	b910      	cbnz	r0, 8016c32 <_strtod_l+0x362>
 8016c2c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016c2e:	3301      	adds	r3, #1
 8016c30:	9311      	str	r3, [sp, #68]	@ 0x44
 8016c32:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8016e48 <_strtod_l+0x578>
 8016c36:	f04f 0a00 	mov.w	sl, #0
 8016c3a:	e684      	b.n	8016946 <_strtod_l+0x76>
 8016c3c:	487e      	ldr	r0, [pc, #504]	@ (8016e38 <_strtod_l+0x568>)
 8016c3e:	f002 fb83 	bl	8019348 <nan>
 8016c42:	ec5b ab10 	vmov	sl, fp, d0
 8016c46:	e67e      	b.n	8016946 <_strtod_l+0x76>
 8016c48:	ee07 9a90 	vmov	s15, r9
 8016c4c:	1be2      	subs	r2, r4, r7
 8016c4e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8016c52:	2d00      	cmp	r5, #0
 8016c54:	bf08      	it	eq
 8016c56:	461d      	moveq	r5, r3
 8016c58:	2b10      	cmp	r3, #16
 8016c5a:	9209      	str	r2, [sp, #36]	@ 0x24
 8016c5c:	461a      	mov	r2, r3
 8016c5e:	bfa8      	it	ge
 8016c60:	2210      	movge	r2, #16
 8016c62:	2b09      	cmp	r3, #9
 8016c64:	ec5b ab17 	vmov	sl, fp, d7
 8016c68:	dc15      	bgt.n	8016c96 <_strtod_l+0x3c6>
 8016c6a:	1be1      	subs	r1, r4, r7
 8016c6c:	2900      	cmp	r1, #0
 8016c6e:	f43f ae6a 	beq.w	8016946 <_strtod_l+0x76>
 8016c72:	eba4 0107 	sub.w	r1, r4, r7
 8016c76:	dd72      	ble.n	8016d5e <_strtod_l+0x48e>
 8016c78:	2916      	cmp	r1, #22
 8016c7a:	dc59      	bgt.n	8016d30 <_strtod_l+0x460>
 8016c7c:	4b6f      	ldr	r3, [pc, #444]	@ (8016e3c <_strtod_l+0x56c>)
 8016c7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016c80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016c84:	ed93 7b00 	vldr	d7, [r3]
 8016c88:	ec4b ab16 	vmov	d6, sl, fp
 8016c8c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016c90:	ec5b ab17 	vmov	sl, fp, d7
 8016c94:	e657      	b.n	8016946 <_strtod_l+0x76>
 8016c96:	4969      	ldr	r1, [pc, #420]	@ (8016e3c <_strtod_l+0x56c>)
 8016c98:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8016c9c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8016ca0:	ee06 6a90 	vmov	s13, r6
 8016ca4:	2b0f      	cmp	r3, #15
 8016ca6:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8016caa:	eea7 6b05 	vfma.f64	d6, d7, d5
 8016cae:	ec5b ab16 	vmov	sl, fp, d6
 8016cb2:	ddda      	ble.n	8016c6a <_strtod_l+0x39a>
 8016cb4:	1a9a      	subs	r2, r3, r2
 8016cb6:	1be1      	subs	r1, r4, r7
 8016cb8:	440a      	add	r2, r1
 8016cba:	2a00      	cmp	r2, #0
 8016cbc:	f340 8094 	ble.w	8016de8 <_strtod_l+0x518>
 8016cc0:	f012 000f 	ands.w	r0, r2, #15
 8016cc4:	d00a      	beq.n	8016cdc <_strtod_l+0x40c>
 8016cc6:	495d      	ldr	r1, [pc, #372]	@ (8016e3c <_strtod_l+0x56c>)
 8016cc8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8016ccc:	ed91 7b00 	vldr	d7, [r1]
 8016cd0:	ec4b ab16 	vmov	d6, sl, fp
 8016cd4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016cd8:	ec5b ab17 	vmov	sl, fp, d7
 8016cdc:	f032 020f 	bics.w	r2, r2, #15
 8016ce0:	d073      	beq.n	8016dca <_strtod_l+0x4fa>
 8016ce2:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8016ce6:	dd47      	ble.n	8016d78 <_strtod_l+0x4a8>
 8016ce8:	2400      	movs	r4, #0
 8016cea:	4625      	mov	r5, r4
 8016cec:	9407      	str	r4, [sp, #28]
 8016cee:	4626      	mov	r6, r4
 8016cf0:	9a05      	ldr	r2, [sp, #20]
 8016cf2:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8016e48 <_strtod_l+0x578>
 8016cf6:	2322      	movs	r3, #34	@ 0x22
 8016cf8:	6013      	str	r3, [r2, #0]
 8016cfa:	f04f 0a00 	mov.w	sl, #0
 8016cfe:	9b07      	ldr	r3, [sp, #28]
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	f43f ae20 	beq.w	8016946 <_strtod_l+0x76>
 8016d06:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016d08:	9805      	ldr	r0, [sp, #20]
 8016d0a:	f003 fe07 	bl	801a91c <_Bfree>
 8016d0e:	9805      	ldr	r0, [sp, #20]
 8016d10:	4631      	mov	r1, r6
 8016d12:	f003 fe03 	bl	801a91c <_Bfree>
 8016d16:	9805      	ldr	r0, [sp, #20]
 8016d18:	4629      	mov	r1, r5
 8016d1a:	f003 fdff 	bl	801a91c <_Bfree>
 8016d1e:	9907      	ldr	r1, [sp, #28]
 8016d20:	9805      	ldr	r0, [sp, #20]
 8016d22:	f003 fdfb 	bl	801a91c <_Bfree>
 8016d26:	9805      	ldr	r0, [sp, #20]
 8016d28:	4621      	mov	r1, r4
 8016d2a:	f003 fdf7 	bl	801a91c <_Bfree>
 8016d2e:	e60a      	b.n	8016946 <_strtod_l+0x76>
 8016d30:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8016d34:	1be0      	subs	r0, r4, r7
 8016d36:	4281      	cmp	r1, r0
 8016d38:	dbbc      	blt.n	8016cb4 <_strtod_l+0x3e4>
 8016d3a:	4a40      	ldr	r2, [pc, #256]	@ (8016e3c <_strtod_l+0x56c>)
 8016d3c:	f1c3 030f 	rsb	r3, r3, #15
 8016d40:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8016d44:	ed91 7b00 	vldr	d7, [r1]
 8016d48:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016d4a:	ec4b ab16 	vmov	d6, sl, fp
 8016d4e:	1acb      	subs	r3, r1, r3
 8016d50:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8016d54:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016d58:	ed92 6b00 	vldr	d6, [r2]
 8016d5c:	e796      	b.n	8016c8c <_strtod_l+0x3bc>
 8016d5e:	3116      	adds	r1, #22
 8016d60:	dba8      	blt.n	8016cb4 <_strtod_l+0x3e4>
 8016d62:	4b36      	ldr	r3, [pc, #216]	@ (8016e3c <_strtod_l+0x56c>)
 8016d64:	1b3c      	subs	r4, r7, r4
 8016d66:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8016d6a:	ed94 7b00 	vldr	d7, [r4]
 8016d6e:	ec4b ab16 	vmov	d6, sl, fp
 8016d72:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8016d76:	e78b      	b.n	8016c90 <_strtod_l+0x3c0>
 8016d78:	2000      	movs	r0, #0
 8016d7a:	ec4b ab17 	vmov	d7, sl, fp
 8016d7e:	4e30      	ldr	r6, [pc, #192]	@ (8016e40 <_strtod_l+0x570>)
 8016d80:	1112      	asrs	r2, r2, #4
 8016d82:	4601      	mov	r1, r0
 8016d84:	2a01      	cmp	r2, #1
 8016d86:	dc23      	bgt.n	8016dd0 <_strtod_l+0x500>
 8016d88:	b108      	cbz	r0, 8016d8e <_strtod_l+0x4be>
 8016d8a:	ec5b ab17 	vmov	sl, fp, d7
 8016d8e:	4a2c      	ldr	r2, [pc, #176]	@ (8016e40 <_strtod_l+0x570>)
 8016d90:	482c      	ldr	r0, [pc, #176]	@ (8016e44 <_strtod_l+0x574>)
 8016d92:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8016d96:	ed92 7b00 	vldr	d7, [r2]
 8016d9a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8016d9e:	ec4b ab16 	vmov	d6, sl, fp
 8016da2:	4a29      	ldr	r2, [pc, #164]	@ (8016e48 <_strtod_l+0x578>)
 8016da4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016da8:	ee17 1a90 	vmov	r1, s15
 8016dac:	400a      	ands	r2, r1
 8016dae:	4282      	cmp	r2, r0
 8016db0:	ec5b ab17 	vmov	sl, fp, d7
 8016db4:	d898      	bhi.n	8016ce8 <_strtod_l+0x418>
 8016db6:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8016dba:	4282      	cmp	r2, r0
 8016dbc:	bf86      	itte	hi
 8016dbe:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8016e4c <_strtod_l+0x57c>
 8016dc2:	f04f 3aff 	movhi.w	sl, #4294967295
 8016dc6:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8016dca:	2200      	movs	r2, #0
 8016dcc:	9206      	str	r2, [sp, #24]
 8016dce:	e076      	b.n	8016ebe <_strtod_l+0x5ee>
 8016dd0:	f012 0f01 	tst.w	r2, #1
 8016dd4:	d004      	beq.n	8016de0 <_strtod_l+0x510>
 8016dd6:	ed96 6b00 	vldr	d6, [r6]
 8016dda:	2001      	movs	r0, #1
 8016ddc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016de0:	3101      	adds	r1, #1
 8016de2:	1052      	asrs	r2, r2, #1
 8016de4:	3608      	adds	r6, #8
 8016de6:	e7cd      	b.n	8016d84 <_strtod_l+0x4b4>
 8016de8:	d0ef      	beq.n	8016dca <_strtod_l+0x4fa>
 8016dea:	4252      	negs	r2, r2
 8016dec:	f012 000f 	ands.w	r0, r2, #15
 8016df0:	d00a      	beq.n	8016e08 <_strtod_l+0x538>
 8016df2:	4912      	ldr	r1, [pc, #72]	@ (8016e3c <_strtod_l+0x56c>)
 8016df4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8016df8:	ed91 7b00 	vldr	d7, [r1]
 8016dfc:	ec4b ab16 	vmov	d6, sl, fp
 8016e00:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8016e04:	ec5b ab17 	vmov	sl, fp, d7
 8016e08:	1112      	asrs	r2, r2, #4
 8016e0a:	d0de      	beq.n	8016dca <_strtod_l+0x4fa>
 8016e0c:	2a1f      	cmp	r2, #31
 8016e0e:	dd1f      	ble.n	8016e50 <_strtod_l+0x580>
 8016e10:	2400      	movs	r4, #0
 8016e12:	4625      	mov	r5, r4
 8016e14:	9407      	str	r4, [sp, #28]
 8016e16:	4626      	mov	r6, r4
 8016e18:	9a05      	ldr	r2, [sp, #20]
 8016e1a:	2322      	movs	r3, #34	@ 0x22
 8016e1c:	f04f 0a00 	mov.w	sl, #0
 8016e20:	f04f 0b00 	mov.w	fp, #0
 8016e24:	6013      	str	r3, [r2, #0]
 8016e26:	e76a      	b.n	8016cfe <_strtod_l+0x42e>
 8016e28:	0801ea16 	.word	0x0801ea16
 8016e2c:	0801e8b4 	.word	0x0801e8b4
 8016e30:	0801ea0e 	.word	0x0801ea0e
 8016e34:	0801eb95 	.word	0x0801eb95
 8016e38:	0801eb91 	.word	0x0801eb91
 8016e3c:	0801ecf8 	.word	0x0801ecf8
 8016e40:	0801ecd0 	.word	0x0801ecd0
 8016e44:	7ca00000 	.word	0x7ca00000
 8016e48:	7ff00000 	.word	0x7ff00000
 8016e4c:	7fefffff 	.word	0x7fefffff
 8016e50:	f012 0110 	ands.w	r1, r2, #16
 8016e54:	bf18      	it	ne
 8016e56:	216a      	movne	r1, #106	@ 0x6a
 8016e58:	9106      	str	r1, [sp, #24]
 8016e5a:	ec4b ab17 	vmov	d7, sl, fp
 8016e5e:	49b0      	ldr	r1, [pc, #704]	@ (8017120 <_strtod_l+0x850>)
 8016e60:	2000      	movs	r0, #0
 8016e62:	07d6      	lsls	r6, r2, #31
 8016e64:	d504      	bpl.n	8016e70 <_strtod_l+0x5a0>
 8016e66:	ed91 6b00 	vldr	d6, [r1]
 8016e6a:	2001      	movs	r0, #1
 8016e6c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016e70:	1052      	asrs	r2, r2, #1
 8016e72:	f101 0108 	add.w	r1, r1, #8
 8016e76:	d1f4      	bne.n	8016e62 <_strtod_l+0x592>
 8016e78:	b108      	cbz	r0, 8016e7e <_strtod_l+0x5ae>
 8016e7a:	ec5b ab17 	vmov	sl, fp, d7
 8016e7e:	9a06      	ldr	r2, [sp, #24]
 8016e80:	b1b2      	cbz	r2, 8016eb0 <_strtod_l+0x5e0>
 8016e82:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8016e86:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8016e8a:	2a00      	cmp	r2, #0
 8016e8c:	4658      	mov	r0, fp
 8016e8e:	dd0f      	ble.n	8016eb0 <_strtod_l+0x5e0>
 8016e90:	2a1f      	cmp	r2, #31
 8016e92:	dd55      	ble.n	8016f40 <_strtod_l+0x670>
 8016e94:	2a34      	cmp	r2, #52	@ 0x34
 8016e96:	bfde      	ittt	le
 8016e98:	f04f 32ff 	movle.w	r2, #4294967295
 8016e9c:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8016ea0:	408a      	lslle	r2, r1
 8016ea2:	f04f 0a00 	mov.w	sl, #0
 8016ea6:	bfcc      	ite	gt
 8016ea8:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8016eac:	ea02 0b00 	andle.w	fp, r2, r0
 8016eb0:	ec4b ab17 	vmov	d7, sl, fp
 8016eb4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8016eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ebc:	d0a8      	beq.n	8016e10 <_strtod_l+0x540>
 8016ebe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016ec0:	9805      	ldr	r0, [sp, #20]
 8016ec2:	f8cd 9000 	str.w	r9, [sp]
 8016ec6:	462a      	mov	r2, r5
 8016ec8:	f003 fd90 	bl	801a9ec <__s2b>
 8016ecc:	9007      	str	r0, [sp, #28]
 8016ece:	2800      	cmp	r0, #0
 8016ed0:	f43f af0a 	beq.w	8016ce8 <_strtod_l+0x418>
 8016ed4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016ed6:	1b3f      	subs	r7, r7, r4
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	bfb4      	ite	lt
 8016edc:	463b      	movlt	r3, r7
 8016ede:	2300      	movge	r3, #0
 8016ee0:	930a      	str	r3, [sp, #40]	@ 0x28
 8016ee2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016ee4:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8017110 <_strtod_l+0x840>
 8016ee8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016eec:	2400      	movs	r4, #0
 8016eee:	930d      	str	r3, [sp, #52]	@ 0x34
 8016ef0:	4625      	mov	r5, r4
 8016ef2:	9b07      	ldr	r3, [sp, #28]
 8016ef4:	9805      	ldr	r0, [sp, #20]
 8016ef6:	6859      	ldr	r1, [r3, #4]
 8016ef8:	f003 fcd0 	bl	801a89c <_Balloc>
 8016efc:	4606      	mov	r6, r0
 8016efe:	2800      	cmp	r0, #0
 8016f00:	f43f aef6 	beq.w	8016cf0 <_strtod_l+0x420>
 8016f04:	9b07      	ldr	r3, [sp, #28]
 8016f06:	691a      	ldr	r2, [r3, #16]
 8016f08:	ec4b ab19 	vmov	d9, sl, fp
 8016f0c:	3202      	adds	r2, #2
 8016f0e:	f103 010c 	add.w	r1, r3, #12
 8016f12:	0092      	lsls	r2, r2, #2
 8016f14:	300c      	adds	r0, #12
 8016f16:	f002 fa06 	bl	8019326 <memcpy>
 8016f1a:	eeb0 0b49 	vmov.f64	d0, d9
 8016f1e:	9805      	ldr	r0, [sp, #20]
 8016f20:	aa14      	add	r2, sp, #80	@ 0x50
 8016f22:	a913      	add	r1, sp, #76	@ 0x4c
 8016f24:	f004 f89e 	bl	801b064 <__d2b>
 8016f28:	9012      	str	r0, [sp, #72]	@ 0x48
 8016f2a:	2800      	cmp	r0, #0
 8016f2c:	f43f aee0 	beq.w	8016cf0 <_strtod_l+0x420>
 8016f30:	9805      	ldr	r0, [sp, #20]
 8016f32:	2101      	movs	r1, #1
 8016f34:	f003 fdf0 	bl	801ab18 <__i2b>
 8016f38:	4605      	mov	r5, r0
 8016f3a:	b940      	cbnz	r0, 8016f4e <_strtod_l+0x67e>
 8016f3c:	2500      	movs	r5, #0
 8016f3e:	e6d7      	b.n	8016cf0 <_strtod_l+0x420>
 8016f40:	f04f 31ff 	mov.w	r1, #4294967295
 8016f44:	fa01 f202 	lsl.w	r2, r1, r2
 8016f48:	ea02 0a0a 	and.w	sl, r2, sl
 8016f4c:	e7b0      	b.n	8016eb0 <_strtod_l+0x5e0>
 8016f4e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8016f50:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8016f52:	2f00      	cmp	r7, #0
 8016f54:	bfab      	itete	ge
 8016f56:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8016f58:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8016f5a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8016f5e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8016f62:	bfac      	ite	ge
 8016f64:	eb07 0903 	addge.w	r9, r7, r3
 8016f68:	eba3 0807 	sublt.w	r8, r3, r7
 8016f6c:	9b06      	ldr	r3, [sp, #24]
 8016f6e:	1aff      	subs	r7, r7, r3
 8016f70:	4417      	add	r7, r2
 8016f72:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8016f76:	4a6b      	ldr	r2, [pc, #428]	@ (8017124 <_strtod_l+0x854>)
 8016f78:	3f01      	subs	r7, #1
 8016f7a:	4297      	cmp	r7, r2
 8016f7c:	da51      	bge.n	8017022 <_strtod_l+0x752>
 8016f7e:	1bd1      	subs	r1, r2, r7
 8016f80:	291f      	cmp	r1, #31
 8016f82:	eba3 0301 	sub.w	r3, r3, r1
 8016f86:	f04f 0201 	mov.w	r2, #1
 8016f8a:	dc3e      	bgt.n	801700a <_strtod_l+0x73a>
 8016f8c:	408a      	lsls	r2, r1
 8016f8e:	920c      	str	r2, [sp, #48]	@ 0x30
 8016f90:	2200      	movs	r2, #0
 8016f92:	920b      	str	r2, [sp, #44]	@ 0x2c
 8016f94:	eb09 0703 	add.w	r7, r9, r3
 8016f98:	4498      	add	r8, r3
 8016f9a:	9b06      	ldr	r3, [sp, #24]
 8016f9c:	45b9      	cmp	r9, r7
 8016f9e:	4498      	add	r8, r3
 8016fa0:	464b      	mov	r3, r9
 8016fa2:	bfa8      	it	ge
 8016fa4:	463b      	movge	r3, r7
 8016fa6:	4543      	cmp	r3, r8
 8016fa8:	bfa8      	it	ge
 8016faa:	4643      	movge	r3, r8
 8016fac:	2b00      	cmp	r3, #0
 8016fae:	bfc2      	ittt	gt
 8016fb0:	1aff      	subgt	r7, r7, r3
 8016fb2:	eba8 0803 	subgt.w	r8, r8, r3
 8016fb6:	eba9 0903 	subgt.w	r9, r9, r3
 8016fba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	dd16      	ble.n	8016fee <_strtod_l+0x71e>
 8016fc0:	4629      	mov	r1, r5
 8016fc2:	9805      	ldr	r0, [sp, #20]
 8016fc4:	461a      	mov	r2, r3
 8016fc6:	f003 fe67 	bl	801ac98 <__pow5mult>
 8016fca:	4605      	mov	r5, r0
 8016fcc:	2800      	cmp	r0, #0
 8016fce:	d0b5      	beq.n	8016f3c <_strtod_l+0x66c>
 8016fd0:	4601      	mov	r1, r0
 8016fd2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016fd4:	9805      	ldr	r0, [sp, #20]
 8016fd6:	f003 fdb5 	bl	801ab44 <__multiply>
 8016fda:	900f      	str	r0, [sp, #60]	@ 0x3c
 8016fdc:	2800      	cmp	r0, #0
 8016fde:	f43f ae87 	beq.w	8016cf0 <_strtod_l+0x420>
 8016fe2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016fe4:	9805      	ldr	r0, [sp, #20]
 8016fe6:	f003 fc99 	bl	801a91c <_Bfree>
 8016fea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016fec:	9312      	str	r3, [sp, #72]	@ 0x48
 8016fee:	2f00      	cmp	r7, #0
 8016ff0:	dc1b      	bgt.n	801702a <_strtod_l+0x75a>
 8016ff2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016ff4:	2b00      	cmp	r3, #0
 8016ff6:	dd21      	ble.n	801703c <_strtod_l+0x76c>
 8016ff8:	4631      	mov	r1, r6
 8016ffa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016ffc:	9805      	ldr	r0, [sp, #20]
 8016ffe:	f003 fe4b 	bl	801ac98 <__pow5mult>
 8017002:	4606      	mov	r6, r0
 8017004:	b9d0      	cbnz	r0, 801703c <_strtod_l+0x76c>
 8017006:	2600      	movs	r6, #0
 8017008:	e672      	b.n	8016cf0 <_strtod_l+0x420>
 801700a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 801700e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8017012:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8017016:	37e2      	adds	r7, #226	@ 0xe2
 8017018:	fa02 f107 	lsl.w	r1, r2, r7
 801701c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801701e:	920c      	str	r2, [sp, #48]	@ 0x30
 8017020:	e7b8      	b.n	8016f94 <_strtod_l+0x6c4>
 8017022:	2200      	movs	r2, #0
 8017024:	920b      	str	r2, [sp, #44]	@ 0x2c
 8017026:	2201      	movs	r2, #1
 8017028:	e7f9      	b.n	801701e <_strtod_l+0x74e>
 801702a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801702c:	9805      	ldr	r0, [sp, #20]
 801702e:	463a      	mov	r2, r7
 8017030:	f003 fe8c 	bl	801ad4c <__lshift>
 8017034:	9012      	str	r0, [sp, #72]	@ 0x48
 8017036:	2800      	cmp	r0, #0
 8017038:	d1db      	bne.n	8016ff2 <_strtod_l+0x722>
 801703a:	e659      	b.n	8016cf0 <_strtod_l+0x420>
 801703c:	f1b8 0f00 	cmp.w	r8, #0
 8017040:	dd07      	ble.n	8017052 <_strtod_l+0x782>
 8017042:	4631      	mov	r1, r6
 8017044:	9805      	ldr	r0, [sp, #20]
 8017046:	4642      	mov	r2, r8
 8017048:	f003 fe80 	bl	801ad4c <__lshift>
 801704c:	4606      	mov	r6, r0
 801704e:	2800      	cmp	r0, #0
 8017050:	d0d9      	beq.n	8017006 <_strtod_l+0x736>
 8017052:	f1b9 0f00 	cmp.w	r9, #0
 8017056:	dd08      	ble.n	801706a <_strtod_l+0x79a>
 8017058:	4629      	mov	r1, r5
 801705a:	9805      	ldr	r0, [sp, #20]
 801705c:	464a      	mov	r2, r9
 801705e:	f003 fe75 	bl	801ad4c <__lshift>
 8017062:	4605      	mov	r5, r0
 8017064:	2800      	cmp	r0, #0
 8017066:	f43f ae43 	beq.w	8016cf0 <_strtod_l+0x420>
 801706a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801706c:	9805      	ldr	r0, [sp, #20]
 801706e:	4632      	mov	r2, r6
 8017070:	f003 fef4 	bl	801ae5c <__mdiff>
 8017074:	4604      	mov	r4, r0
 8017076:	2800      	cmp	r0, #0
 8017078:	f43f ae3a 	beq.w	8016cf0 <_strtod_l+0x420>
 801707c:	2300      	movs	r3, #0
 801707e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8017082:	60c3      	str	r3, [r0, #12]
 8017084:	4629      	mov	r1, r5
 8017086:	f003 fecd 	bl	801ae24 <__mcmp>
 801708a:	2800      	cmp	r0, #0
 801708c:	da4e      	bge.n	801712c <_strtod_l+0x85c>
 801708e:	ea58 080a 	orrs.w	r8, r8, sl
 8017092:	d174      	bne.n	801717e <_strtod_l+0x8ae>
 8017094:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017098:	2b00      	cmp	r3, #0
 801709a:	d170      	bne.n	801717e <_strtod_l+0x8ae>
 801709c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80170a0:	0d1b      	lsrs	r3, r3, #20
 80170a2:	051b      	lsls	r3, r3, #20
 80170a4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80170a8:	d969      	bls.n	801717e <_strtod_l+0x8ae>
 80170aa:	6963      	ldr	r3, [r4, #20]
 80170ac:	b913      	cbnz	r3, 80170b4 <_strtod_l+0x7e4>
 80170ae:	6923      	ldr	r3, [r4, #16]
 80170b0:	2b01      	cmp	r3, #1
 80170b2:	dd64      	ble.n	801717e <_strtod_l+0x8ae>
 80170b4:	4621      	mov	r1, r4
 80170b6:	2201      	movs	r2, #1
 80170b8:	9805      	ldr	r0, [sp, #20]
 80170ba:	f003 fe47 	bl	801ad4c <__lshift>
 80170be:	4629      	mov	r1, r5
 80170c0:	4604      	mov	r4, r0
 80170c2:	f003 feaf 	bl	801ae24 <__mcmp>
 80170c6:	2800      	cmp	r0, #0
 80170c8:	dd59      	ble.n	801717e <_strtod_l+0x8ae>
 80170ca:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80170ce:	9a06      	ldr	r2, [sp, #24]
 80170d0:	0d1b      	lsrs	r3, r3, #20
 80170d2:	051b      	lsls	r3, r3, #20
 80170d4:	2a00      	cmp	r2, #0
 80170d6:	d070      	beq.n	80171ba <_strtod_l+0x8ea>
 80170d8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80170dc:	d86d      	bhi.n	80171ba <_strtod_l+0x8ea>
 80170de:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80170e2:	f67f ae99 	bls.w	8016e18 <_strtod_l+0x548>
 80170e6:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8017118 <_strtod_l+0x848>
 80170ea:	ec4b ab16 	vmov	d6, sl, fp
 80170ee:	4b0e      	ldr	r3, [pc, #56]	@ (8017128 <_strtod_l+0x858>)
 80170f0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80170f4:	ee17 2a90 	vmov	r2, s15
 80170f8:	4013      	ands	r3, r2
 80170fa:	ec5b ab17 	vmov	sl, fp, d7
 80170fe:	2b00      	cmp	r3, #0
 8017100:	f47f ae01 	bne.w	8016d06 <_strtod_l+0x436>
 8017104:	9a05      	ldr	r2, [sp, #20]
 8017106:	2322      	movs	r3, #34	@ 0x22
 8017108:	6013      	str	r3, [r2, #0]
 801710a:	e5fc      	b.n	8016d06 <_strtod_l+0x436>
 801710c:	f3af 8000 	nop.w
 8017110:	ffc00000 	.word	0xffc00000
 8017114:	41dfffff 	.word	0x41dfffff
 8017118:	00000000 	.word	0x00000000
 801711c:	39500000 	.word	0x39500000
 8017120:	0801e8e0 	.word	0x0801e8e0
 8017124:	fffffc02 	.word	0xfffffc02
 8017128:	7ff00000 	.word	0x7ff00000
 801712c:	46d9      	mov	r9, fp
 801712e:	d15d      	bne.n	80171ec <_strtod_l+0x91c>
 8017130:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017134:	f1b8 0f00 	cmp.w	r8, #0
 8017138:	d02a      	beq.n	8017190 <_strtod_l+0x8c0>
 801713a:	4aab      	ldr	r2, [pc, #684]	@ (80173e8 <_strtod_l+0xb18>)
 801713c:	4293      	cmp	r3, r2
 801713e:	d12a      	bne.n	8017196 <_strtod_l+0x8c6>
 8017140:	9b06      	ldr	r3, [sp, #24]
 8017142:	4652      	mov	r2, sl
 8017144:	b1fb      	cbz	r3, 8017186 <_strtod_l+0x8b6>
 8017146:	4ba9      	ldr	r3, [pc, #676]	@ (80173ec <_strtod_l+0xb1c>)
 8017148:	ea0b 0303 	and.w	r3, fp, r3
 801714c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8017150:	f04f 31ff 	mov.w	r1, #4294967295
 8017154:	d81a      	bhi.n	801718c <_strtod_l+0x8bc>
 8017156:	0d1b      	lsrs	r3, r3, #20
 8017158:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801715c:	fa01 f303 	lsl.w	r3, r1, r3
 8017160:	429a      	cmp	r2, r3
 8017162:	d118      	bne.n	8017196 <_strtod_l+0x8c6>
 8017164:	4ba2      	ldr	r3, [pc, #648]	@ (80173f0 <_strtod_l+0xb20>)
 8017166:	4599      	cmp	r9, r3
 8017168:	d102      	bne.n	8017170 <_strtod_l+0x8a0>
 801716a:	3201      	adds	r2, #1
 801716c:	f43f adc0 	beq.w	8016cf0 <_strtod_l+0x420>
 8017170:	4b9e      	ldr	r3, [pc, #632]	@ (80173ec <_strtod_l+0xb1c>)
 8017172:	ea09 0303 	and.w	r3, r9, r3
 8017176:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 801717a:	f04f 0a00 	mov.w	sl, #0
 801717e:	9b06      	ldr	r3, [sp, #24]
 8017180:	2b00      	cmp	r3, #0
 8017182:	d1b0      	bne.n	80170e6 <_strtod_l+0x816>
 8017184:	e5bf      	b.n	8016d06 <_strtod_l+0x436>
 8017186:	f04f 33ff 	mov.w	r3, #4294967295
 801718a:	e7e9      	b.n	8017160 <_strtod_l+0x890>
 801718c:	460b      	mov	r3, r1
 801718e:	e7e7      	b.n	8017160 <_strtod_l+0x890>
 8017190:	ea53 030a 	orrs.w	r3, r3, sl
 8017194:	d099      	beq.n	80170ca <_strtod_l+0x7fa>
 8017196:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017198:	b1c3      	cbz	r3, 80171cc <_strtod_l+0x8fc>
 801719a:	ea13 0f09 	tst.w	r3, r9
 801719e:	d0ee      	beq.n	801717e <_strtod_l+0x8ae>
 80171a0:	9a06      	ldr	r2, [sp, #24]
 80171a2:	4650      	mov	r0, sl
 80171a4:	4659      	mov	r1, fp
 80171a6:	f1b8 0f00 	cmp.w	r8, #0
 80171aa:	d013      	beq.n	80171d4 <_strtod_l+0x904>
 80171ac:	f7ff fb74 	bl	8016898 <sulp>
 80171b0:	ee39 7b00 	vadd.f64	d7, d9, d0
 80171b4:	ec5b ab17 	vmov	sl, fp, d7
 80171b8:	e7e1      	b.n	801717e <_strtod_l+0x8ae>
 80171ba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80171be:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80171c2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80171c6:	f04f 3aff 	mov.w	sl, #4294967295
 80171ca:	e7d8      	b.n	801717e <_strtod_l+0x8ae>
 80171cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80171ce:	ea13 0f0a 	tst.w	r3, sl
 80171d2:	e7e4      	b.n	801719e <_strtod_l+0x8ce>
 80171d4:	f7ff fb60 	bl	8016898 <sulp>
 80171d8:	ee39 0b40 	vsub.f64	d0, d9, d0
 80171dc:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80171e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171e4:	ec5b ab10 	vmov	sl, fp, d0
 80171e8:	d1c9      	bne.n	801717e <_strtod_l+0x8ae>
 80171ea:	e615      	b.n	8016e18 <_strtod_l+0x548>
 80171ec:	4629      	mov	r1, r5
 80171ee:	4620      	mov	r0, r4
 80171f0:	f003 ff90 	bl	801b114 <__ratio>
 80171f4:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 80171f8:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80171fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017200:	d85d      	bhi.n	80172be <_strtod_l+0x9ee>
 8017202:	f1b8 0f00 	cmp.w	r8, #0
 8017206:	d164      	bne.n	80172d2 <_strtod_l+0xa02>
 8017208:	f1ba 0f00 	cmp.w	sl, #0
 801720c:	d14b      	bne.n	80172a6 <_strtod_l+0x9d6>
 801720e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017212:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8017216:	2b00      	cmp	r3, #0
 8017218:	d160      	bne.n	80172dc <_strtod_l+0xa0c>
 801721a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 801721e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8017222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017226:	d401      	bmi.n	801722c <_strtod_l+0x95c>
 8017228:	ee20 8b08 	vmul.f64	d8, d0, d8
 801722c:	eeb1 ab48 	vneg.f64	d10, d8
 8017230:	486e      	ldr	r0, [pc, #440]	@ (80173ec <_strtod_l+0xb1c>)
 8017232:	4970      	ldr	r1, [pc, #448]	@ (80173f4 <_strtod_l+0xb24>)
 8017234:	ea09 0700 	and.w	r7, r9, r0
 8017238:	428f      	cmp	r7, r1
 801723a:	ec53 2b1a 	vmov	r2, r3, d10
 801723e:	d17d      	bne.n	801733c <_strtod_l+0xa6c>
 8017240:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8017244:	ec4b ab1c 	vmov	d12, sl, fp
 8017248:	eeb0 0b4c 	vmov.f64	d0, d12
 801724c:	f003 fe9a 	bl	801af84 <__ulp>
 8017250:	4866      	ldr	r0, [pc, #408]	@ (80173ec <_strtod_l+0xb1c>)
 8017252:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8017256:	ee1c 3a90 	vmov	r3, s25
 801725a:	4a67      	ldr	r2, [pc, #412]	@ (80173f8 <_strtod_l+0xb28>)
 801725c:	ea03 0100 	and.w	r1, r3, r0
 8017260:	4291      	cmp	r1, r2
 8017262:	ec5b ab1c 	vmov	sl, fp, d12
 8017266:	d93c      	bls.n	80172e2 <_strtod_l+0xa12>
 8017268:	ee19 2a90 	vmov	r2, s19
 801726c:	4b60      	ldr	r3, [pc, #384]	@ (80173f0 <_strtod_l+0xb20>)
 801726e:	429a      	cmp	r2, r3
 8017270:	d104      	bne.n	801727c <_strtod_l+0x9ac>
 8017272:	ee19 3a10 	vmov	r3, s18
 8017276:	3301      	adds	r3, #1
 8017278:	f43f ad3a 	beq.w	8016cf0 <_strtod_l+0x420>
 801727c:	f8df b170 	ldr.w	fp, [pc, #368]	@ 80173f0 <_strtod_l+0xb20>
 8017280:	f04f 3aff 	mov.w	sl, #4294967295
 8017284:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8017286:	9805      	ldr	r0, [sp, #20]
 8017288:	f003 fb48 	bl	801a91c <_Bfree>
 801728c:	9805      	ldr	r0, [sp, #20]
 801728e:	4631      	mov	r1, r6
 8017290:	f003 fb44 	bl	801a91c <_Bfree>
 8017294:	9805      	ldr	r0, [sp, #20]
 8017296:	4629      	mov	r1, r5
 8017298:	f003 fb40 	bl	801a91c <_Bfree>
 801729c:	9805      	ldr	r0, [sp, #20]
 801729e:	4621      	mov	r1, r4
 80172a0:	f003 fb3c 	bl	801a91c <_Bfree>
 80172a4:	e625      	b.n	8016ef2 <_strtod_l+0x622>
 80172a6:	f1ba 0f01 	cmp.w	sl, #1
 80172aa:	d103      	bne.n	80172b4 <_strtod_l+0x9e4>
 80172ac:	f1bb 0f00 	cmp.w	fp, #0
 80172b0:	f43f adb2 	beq.w	8016e18 <_strtod_l+0x548>
 80172b4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80172b8:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80172bc:	e7b8      	b.n	8017230 <_strtod_l+0x960>
 80172be:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80172c2:	ee20 8b08 	vmul.f64	d8, d0, d8
 80172c6:	f1b8 0f00 	cmp.w	r8, #0
 80172ca:	d0af      	beq.n	801722c <_strtod_l+0x95c>
 80172cc:	eeb0 ab48 	vmov.f64	d10, d8
 80172d0:	e7ae      	b.n	8017230 <_strtod_l+0x960>
 80172d2:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 80172d6:	eeb0 8b4a 	vmov.f64	d8, d10
 80172da:	e7a9      	b.n	8017230 <_strtod_l+0x960>
 80172dc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80172e0:	e7a6      	b.n	8017230 <_strtod_l+0x960>
 80172e2:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80172e6:	9b06      	ldr	r3, [sp, #24]
 80172e8:	46d9      	mov	r9, fp
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	d1ca      	bne.n	8017284 <_strtod_l+0x9b4>
 80172ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80172f2:	0d1b      	lsrs	r3, r3, #20
 80172f4:	051b      	lsls	r3, r3, #20
 80172f6:	429f      	cmp	r7, r3
 80172f8:	d1c4      	bne.n	8017284 <_strtod_l+0x9b4>
 80172fa:	ec51 0b18 	vmov	r0, r1, d8
 80172fe:	f7e9 fa2b 	bl	8000758 <__aeabi_d2lz>
 8017302:	f7e9 f9e3 	bl	80006cc <__aeabi_l2d>
 8017306:	f3cb 0913 	ubfx	r9, fp, #0, #20
 801730a:	ec41 0b17 	vmov	d7, r0, r1
 801730e:	ea49 090a 	orr.w	r9, r9, sl
 8017312:	ea59 0908 	orrs.w	r9, r9, r8
 8017316:	ee38 8b47 	vsub.f64	d8, d8, d7
 801731a:	d03c      	beq.n	8017396 <_strtod_l+0xac6>
 801731c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 80173d0 <_strtod_l+0xb00>
 8017320:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8017324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017328:	f53f aced 	bmi.w	8016d06 <_strtod_l+0x436>
 801732c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80173d8 <_strtod_l+0xb08>
 8017330:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8017334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017338:	dda4      	ble.n	8017284 <_strtod_l+0x9b4>
 801733a:	e4e4      	b.n	8016d06 <_strtod_l+0x436>
 801733c:	9906      	ldr	r1, [sp, #24]
 801733e:	b1e1      	cbz	r1, 801737a <_strtod_l+0xaaa>
 8017340:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8017344:	d819      	bhi.n	801737a <_strtod_l+0xaaa>
 8017346:	eeb4 8bcb 	vcmpe.f64	d8, d11
 801734a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801734e:	d811      	bhi.n	8017374 <_strtod_l+0xaa4>
 8017350:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8017354:	ee18 3a10 	vmov	r3, s16
 8017358:	2b01      	cmp	r3, #1
 801735a:	bf38      	it	cc
 801735c:	2301      	movcc	r3, #1
 801735e:	ee08 3a10 	vmov	s16, r3
 8017362:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8017366:	f1b8 0f00 	cmp.w	r8, #0
 801736a:	d111      	bne.n	8017390 <_strtod_l+0xac0>
 801736c:	eeb1 7b48 	vneg.f64	d7, d8
 8017370:	ec53 2b17 	vmov	r2, r3, d7
 8017374:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8017378:	1bcb      	subs	r3, r1, r7
 801737a:	eeb0 0b49 	vmov.f64	d0, d9
 801737e:	ec43 2b1a 	vmov	d10, r2, r3
 8017382:	f003 fdff 	bl	801af84 <__ulp>
 8017386:	eeaa 9b00 	vfma.f64	d9, d10, d0
 801738a:	ec5b ab19 	vmov	sl, fp, d9
 801738e:	e7aa      	b.n	80172e6 <_strtod_l+0xa16>
 8017390:	eeb0 7b48 	vmov.f64	d7, d8
 8017394:	e7ec      	b.n	8017370 <_strtod_l+0xaa0>
 8017396:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 80173e0 <_strtod_l+0xb10>
 801739a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801739e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173a2:	f57f af6f 	bpl.w	8017284 <_strtod_l+0x9b4>
 80173a6:	e4ae      	b.n	8016d06 <_strtod_l+0x436>
 80173a8:	2300      	movs	r3, #0
 80173aa:	9308      	str	r3, [sp, #32]
 80173ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80173ae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80173b0:	6013      	str	r3, [r2, #0]
 80173b2:	f7ff bacc 	b.w	801694e <_strtod_l+0x7e>
 80173b6:	2a65      	cmp	r2, #101	@ 0x65
 80173b8:	f43f abbc 	beq.w	8016b34 <_strtod_l+0x264>
 80173bc:	2a45      	cmp	r2, #69	@ 0x45
 80173be:	f43f abb9 	beq.w	8016b34 <_strtod_l+0x264>
 80173c2:	2301      	movs	r3, #1
 80173c4:	9306      	str	r3, [sp, #24]
 80173c6:	f7ff bbf0 	b.w	8016baa <_strtod_l+0x2da>
 80173ca:	bf00      	nop
 80173cc:	f3af 8000 	nop.w
 80173d0:	94a03595 	.word	0x94a03595
 80173d4:	3fdfffff 	.word	0x3fdfffff
 80173d8:	35afe535 	.word	0x35afe535
 80173dc:	3fe00000 	.word	0x3fe00000
 80173e0:	94a03595 	.word	0x94a03595
 80173e4:	3fcfffff 	.word	0x3fcfffff
 80173e8:	000fffff 	.word	0x000fffff
 80173ec:	7ff00000 	.word	0x7ff00000
 80173f0:	7fefffff 	.word	0x7fefffff
 80173f4:	7fe00000 	.word	0x7fe00000
 80173f8:	7c9fffff 	.word	0x7c9fffff

080173fc <_strtod_r>:
 80173fc:	4b01      	ldr	r3, [pc, #4]	@ (8017404 <_strtod_r+0x8>)
 80173fe:	f7ff ba67 	b.w	80168d0 <_strtod_l>
 8017402:	bf00      	nop
 8017404:	240002c4 	.word	0x240002c4

08017408 <strtod>:
 8017408:	460a      	mov	r2, r1
 801740a:	4601      	mov	r1, r0
 801740c:	4802      	ldr	r0, [pc, #8]	@ (8017418 <strtod+0x10>)
 801740e:	4b03      	ldr	r3, [pc, #12]	@ (801741c <strtod+0x14>)
 8017410:	6800      	ldr	r0, [r0, #0]
 8017412:	f7ff ba5d 	b.w	80168d0 <_strtod_l>
 8017416:	bf00      	nop
 8017418:	24000430 	.word	0x24000430
 801741c:	240002c4 	.word	0x240002c4

08017420 <_strtol_l.constprop.0>:
 8017420:	2b24      	cmp	r3, #36	@ 0x24
 8017422:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017426:	4686      	mov	lr, r0
 8017428:	4690      	mov	r8, r2
 801742a:	d801      	bhi.n	8017430 <_strtol_l.constprop.0+0x10>
 801742c:	2b01      	cmp	r3, #1
 801742e:	d106      	bne.n	801743e <_strtol_l.constprop.0+0x1e>
 8017430:	f001 ff42 	bl	80192b8 <__errno>
 8017434:	2316      	movs	r3, #22
 8017436:	6003      	str	r3, [r0, #0]
 8017438:	2000      	movs	r0, #0
 801743a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801743e:	4834      	ldr	r0, [pc, #208]	@ (8017510 <_strtol_l.constprop.0+0xf0>)
 8017440:	460d      	mov	r5, r1
 8017442:	462a      	mov	r2, r5
 8017444:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017448:	5d06      	ldrb	r6, [r0, r4]
 801744a:	f016 0608 	ands.w	r6, r6, #8
 801744e:	d1f8      	bne.n	8017442 <_strtol_l.constprop.0+0x22>
 8017450:	2c2d      	cmp	r4, #45	@ 0x2d
 8017452:	d12d      	bne.n	80174b0 <_strtol_l.constprop.0+0x90>
 8017454:	782c      	ldrb	r4, [r5, #0]
 8017456:	2601      	movs	r6, #1
 8017458:	1c95      	adds	r5, r2, #2
 801745a:	f033 0210 	bics.w	r2, r3, #16
 801745e:	d109      	bne.n	8017474 <_strtol_l.constprop.0+0x54>
 8017460:	2c30      	cmp	r4, #48	@ 0x30
 8017462:	d12a      	bne.n	80174ba <_strtol_l.constprop.0+0x9a>
 8017464:	782a      	ldrb	r2, [r5, #0]
 8017466:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801746a:	2a58      	cmp	r2, #88	@ 0x58
 801746c:	d125      	bne.n	80174ba <_strtol_l.constprop.0+0x9a>
 801746e:	786c      	ldrb	r4, [r5, #1]
 8017470:	2310      	movs	r3, #16
 8017472:	3502      	adds	r5, #2
 8017474:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8017478:	f10c 3cff 	add.w	ip, ip, #4294967295
 801747c:	2200      	movs	r2, #0
 801747e:	fbbc f9f3 	udiv	r9, ip, r3
 8017482:	4610      	mov	r0, r2
 8017484:	fb03 ca19 	mls	sl, r3, r9, ip
 8017488:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801748c:	2f09      	cmp	r7, #9
 801748e:	d81b      	bhi.n	80174c8 <_strtol_l.constprop.0+0xa8>
 8017490:	463c      	mov	r4, r7
 8017492:	42a3      	cmp	r3, r4
 8017494:	dd27      	ble.n	80174e6 <_strtol_l.constprop.0+0xc6>
 8017496:	1c57      	adds	r7, r2, #1
 8017498:	d007      	beq.n	80174aa <_strtol_l.constprop.0+0x8a>
 801749a:	4581      	cmp	r9, r0
 801749c:	d320      	bcc.n	80174e0 <_strtol_l.constprop.0+0xc0>
 801749e:	d101      	bne.n	80174a4 <_strtol_l.constprop.0+0x84>
 80174a0:	45a2      	cmp	sl, r4
 80174a2:	db1d      	blt.n	80174e0 <_strtol_l.constprop.0+0xc0>
 80174a4:	fb00 4003 	mla	r0, r0, r3, r4
 80174a8:	2201      	movs	r2, #1
 80174aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80174ae:	e7eb      	b.n	8017488 <_strtol_l.constprop.0+0x68>
 80174b0:	2c2b      	cmp	r4, #43	@ 0x2b
 80174b2:	bf04      	itt	eq
 80174b4:	782c      	ldrbeq	r4, [r5, #0]
 80174b6:	1c95      	addeq	r5, r2, #2
 80174b8:	e7cf      	b.n	801745a <_strtol_l.constprop.0+0x3a>
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	d1da      	bne.n	8017474 <_strtol_l.constprop.0+0x54>
 80174be:	2c30      	cmp	r4, #48	@ 0x30
 80174c0:	bf0c      	ite	eq
 80174c2:	2308      	moveq	r3, #8
 80174c4:	230a      	movne	r3, #10
 80174c6:	e7d5      	b.n	8017474 <_strtol_l.constprop.0+0x54>
 80174c8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80174cc:	2f19      	cmp	r7, #25
 80174ce:	d801      	bhi.n	80174d4 <_strtol_l.constprop.0+0xb4>
 80174d0:	3c37      	subs	r4, #55	@ 0x37
 80174d2:	e7de      	b.n	8017492 <_strtol_l.constprop.0+0x72>
 80174d4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80174d8:	2f19      	cmp	r7, #25
 80174da:	d804      	bhi.n	80174e6 <_strtol_l.constprop.0+0xc6>
 80174dc:	3c57      	subs	r4, #87	@ 0x57
 80174de:	e7d8      	b.n	8017492 <_strtol_l.constprop.0+0x72>
 80174e0:	f04f 32ff 	mov.w	r2, #4294967295
 80174e4:	e7e1      	b.n	80174aa <_strtol_l.constprop.0+0x8a>
 80174e6:	1c53      	adds	r3, r2, #1
 80174e8:	d108      	bne.n	80174fc <_strtol_l.constprop.0+0xdc>
 80174ea:	2322      	movs	r3, #34	@ 0x22
 80174ec:	f8ce 3000 	str.w	r3, [lr]
 80174f0:	4660      	mov	r0, ip
 80174f2:	f1b8 0f00 	cmp.w	r8, #0
 80174f6:	d0a0      	beq.n	801743a <_strtol_l.constprop.0+0x1a>
 80174f8:	1e69      	subs	r1, r5, #1
 80174fa:	e006      	b.n	801750a <_strtol_l.constprop.0+0xea>
 80174fc:	b106      	cbz	r6, 8017500 <_strtol_l.constprop.0+0xe0>
 80174fe:	4240      	negs	r0, r0
 8017500:	f1b8 0f00 	cmp.w	r8, #0
 8017504:	d099      	beq.n	801743a <_strtol_l.constprop.0+0x1a>
 8017506:	2a00      	cmp	r2, #0
 8017508:	d1f6      	bne.n	80174f8 <_strtol_l.constprop.0+0xd8>
 801750a:	f8c8 1000 	str.w	r1, [r8]
 801750e:	e794      	b.n	801743a <_strtol_l.constprop.0+0x1a>
 8017510:	0801e909 	.word	0x0801e909

08017514 <_strtol_r>:
 8017514:	f7ff bf84 	b.w	8017420 <_strtol_l.constprop.0>

08017518 <strtol>:
 8017518:	4613      	mov	r3, r2
 801751a:	460a      	mov	r2, r1
 801751c:	4601      	mov	r1, r0
 801751e:	4802      	ldr	r0, [pc, #8]	@ (8017528 <strtol+0x10>)
 8017520:	6800      	ldr	r0, [r0, #0]
 8017522:	f7ff bf7d 	b.w	8017420 <_strtol_l.constprop.0>
 8017526:	bf00      	nop
 8017528:	24000430 	.word	0x24000430

0801752c <__cvt>:
 801752c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801752e:	ed2d 8b02 	vpush	{d8}
 8017532:	eeb0 8b40 	vmov.f64	d8, d0
 8017536:	b085      	sub	sp, #20
 8017538:	4617      	mov	r7, r2
 801753a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801753c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801753e:	ee18 2a90 	vmov	r2, s17
 8017542:	f025 0520 	bic.w	r5, r5, #32
 8017546:	2a00      	cmp	r2, #0
 8017548:	bfb6      	itet	lt
 801754a:	222d      	movlt	r2, #45	@ 0x2d
 801754c:	2200      	movge	r2, #0
 801754e:	eeb1 8b40 	vneglt.f64	d8, d0
 8017552:	2d46      	cmp	r5, #70	@ 0x46
 8017554:	460c      	mov	r4, r1
 8017556:	701a      	strb	r2, [r3, #0]
 8017558:	d004      	beq.n	8017564 <__cvt+0x38>
 801755a:	2d45      	cmp	r5, #69	@ 0x45
 801755c:	d100      	bne.n	8017560 <__cvt+0x34>
 801755e:	3401      	adds	r4, #1
 8017560:	2102      	movs	r1, #2
 8017562:	e000      	b.n	8017566 <__cvt+0x3a>
 8017564:	2103      	movs	r1, #3
 8017566:	ab03      	add	r3, sp, #12
 8017568:	9301      	str	r3, [sp, #4]
 801756a:	ab02      	add	r3, sp, #8
 801756c:	9300      	str	r3, [sp, #0]
 801756e:	4622      	mov	r2, r4
 8017570:	4633      	mov	r3, r6
 8017572:	eeb0 0b48 	vmov.f64	d0, d8
 8017576:	f001 ffa3 	bl	80194c0 <_dtoa_r>
 801757a:	2d47      	cmp	r5, #71	@ 0x47
 801757c:	d114      	bne.n	80175a8 <__cvt+0x7c>
 801757e:	07fb      	lsls	r3, r7, #31
 8017580:	d50a      	bpl.n	8017598 <__cvt+0x6c>
 8017582:	1902      	adds	r2, r0, r4
 8017584:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8017588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801758c:	bf08      	it	eq
 801758e:	9203      	streq	r2, [sp, #12]
 8017590:	2130      	movs	r1, #48	@ 0x30
 8017592:	9b03      	ldr	r3, [sp, #12]
 8017594:	4293      	cmp	r3, r2
 8017596:	d319      	bcc.n	80175cc <__cvt+0xa0>
 8017598:	9b03      	ldr	r3, [sp, #12]
 801759a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801759c:	1a1b      	subs	r3, r3, r0
 801759e:	6013      	str	r3, [r2, #0]
 80175a0:	b005      	add	sp, #20
 80175a2:	ecbd 8b02 	vpop	{d8}
 80175a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80175a8:	2d46      	cmp	r5, #70	@ 0x46
 80175aa:	eb00 0204 	add.w	r2, r0, r4
 80175ae:	d1e9      	bne.n	8017584 <__cvt+0x58>
 80175b0:	7803      	ldrb	r3, [r0, #0]
 80175b2:	2b30      	cmp	r3, #48	@ 0x30
 80175b4:	d107      	bne.n	80175c6 <__cvt+0x9a>
 80175b6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80175ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175be:	bf1c      	itt	ne
 80175c0:	f1c4 0401 	rsbne	r4, r4, #1
 80175c4:	6034      	strne	r4, [r6, #0]
 80175c6:	6833      	ldr	r3, [r6, #0]
 80175c8:	441a      	add	r2, r3
 80175ca:	e7db      	b.n	8017584 <__cvt+0x58>
 80175cc:	1c5c      	adds	r4, r3, #1
 80175ce:	9403      	str	r4, [sp, #12]
 80175d0:	7019      	strb	r1, [r3, #0]
 80175d2:	e7de      	b.n	8017592 <__cvt+0x66>

080175d4 <__exponent>:
 80175d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80175d6:	2900      	cmp	r1, #0
 80175d8:	bfba      	itte	lt
 80175da:	4249      	neglt	r1, r1
 80175dc:	232d      	movlt	r3, #45	@ 0x2d
 80175de:	232b      	movge	r3, #43	@ 0x2b
 80175e0:	2909      	cmp	r1, #9
 80175e2:	7002      	strb	r2, [r0, #0]
 80175e4:	7043      	strb	r3, [r0, #1]
 80175e6:	dd29      	ble.n	801763c <__exponent+0x68>
 80175e8:	f10d 0307 	add.w	r3, sp, #7
 80175ec:	461d      	mov	r5, r3
 80175ee:	270a      	movs	r7, #10
 80175f0:	461a      	mov	r2, r3
 80175f2:	fbb1 f6f7 	udiv	r6, r1, r7
 80175f6:	fb07 1416 	mls	r4, r7, r6, r1
 80175fa:	3430      	adds	r4, #48	@ 0x30
 80175fc:	f802 4c01 	strb.w	r4, [r2, #-1]
 8017600:	460c      	mov	r4, r1
 8017602:	2c63      	cmp	r4, #99	@ 0x63
 8017604:	f103 33ff 	add.w	r3, r3, #4294967295
 8017608:	4631      	mov	r1, r6
 801760a:	dcf1      	bgt.n	80175f0 <__exponent+0x1c>
 801760c:	3130      	adds	r1, #48	@ 0x30
 801760e:	1e94      	subs	r4, r2, #2
 8017610:	f803 1c01 	strb.w	r1, [r3, #-1]
 8017614:	1c41      	adds	r1, r0, #1
 8017616:	4623      	mov	r3, r4
 8017618:	42ab      	cmp	r3, r5
 801761a:	d30a      	bcc.n	8017632 <__exponent+0x5e>
 801761c:	f10d 0309 	add.w	r3, sp, #9
 8017620:	1a9b      	subs	r3, r3, r2
 8017622:	42ac      	cmp	r4, r5
 8017624:	bf88      	it	hi
 8017626:	2300      	movhi	r3, #0
 8017628:	3302      	adds	r3, #2
 801762a:	4403      	add	r3, r0
 801762c:	1a18      	subs	r0, r3, r0
 801762e:	b003      	add	sp, #12
 8017630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017632:	f813 6b01 	ldrb.w	r6, [r3], #1
 8017636:	f801 6f01 	strb.w	r6, [r1, #1]!
 801763a:	e7ed      	b.n	8017618 <__exponent+0x44>
 801763c:	2330      	movs	r3, #48	@ 0x30
 801763e:	3130      	adds	r1, #48	@ 0x30
 8017640:	7083      	strb	r3, [r0, #2]
 8017642:	70c1      	strb	r1, [r0, #3]
 8017644:	1d03      	adds	r3, r0, #4
 8017646:	e7f1      	b.n	801762c <__exponent+0x58>

08017648 <_printf_float>:
 8017648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801764c:	b08d      	sub	sp, #52	@ 0x34
 801764e:	460c      	mov	r4, r1
 8017650:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8017654:	4616      	mov	r6, r2
 8017656:	461f      	mov	r7, r3
 8017658:	4605      	mov	r5, r0
 801765a:	f001 fde3 	bl	8019224 <_localeconv_r>
 801765e:	f8d0 b000 	ldr.w	fp, [r0]
 8017662:	4658      	mov	r0, fp
 8017664:	f7e8 fe9c 	bl	80003a0 <strlen>
 8017668:	2300      	movs	r3, #0
 801766a:	930a      	str	r3, [sp, #40]	@ 0x28
 801766c:	f8d8 3000 	ldr.w	r3, [r8]
 8017670:	f894 9018 	ldrb.w	r9, [r4, #24]
 8017674:	6822      	ldr	r2, [r4, #0]
 8017676:	9005      	str	r0, [sp, #20]
 8017678:	3307      	adds	r3, #7
 801767a:	f023 0307 	bic.w	r3, r3, #7
 801767e:	f103 0108 	add.w	r1, r3, #8
 8017682:	f8c8 1000 	str.w	r1, [r8]
 8017686:	ed93 0b00 	vldr	d0, [r3]
 801768a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80178e8 <_printf_float+0x2a0>
 801768e:	eeb0 7bc0 	vabs.f64	d7, d0
 8017692:	eeb4 7b46 	vcmp.f64	d7, d6
 8017696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801769a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 801769e:	dd24      	ble.n	80176ea <_printf_float+0xa2>
 80176a0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80176a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176a8:	d502      	bpl.n	80176b0 <_printf_float+0x68>
 80176aa:	232d      	movs	r3, #45	@ 0x2d
 80176ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80176b0:	498f      	ldr	r1, [pc, #572]	@ (80178f0 <_printf_float+0x2a8>)
 80176b2:	4b90      	ldr	r3, [pc, #576]	@ (80178f4 <_printf_float+0x2ac>)
 80176b4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80176b8:	bf94      	ite	ls
 80176ba:	4688      	movls	r8, r1
 80176bc:	4698      	movhi	r8, r3
 80176be:	f022 0204 	bic.w	r2, r2, #4
 80176c2:	2303      	movs	r3, #3
 80176c4:	6123      	str	r3, [r4, #16]
 80176c6:	6022      	str	r2, [r4, #0]
 80176c8:	f04f 0a00 	mov.w	sl, #0
 80176cc:	9700      	str	r7, [sp, #0]
 80176ce:	4633      	mov	r3, r6
 80176d0:	aa0b      	add	r2, sp, #44	@ 0x2c
 80176d2:	4621      	mov	r1, r4
 80176d4:	4628      	mov	r0, r5
 80176d6:	f000 f9d1 	bl	8017a7c <_printf_common>
 80176da:	3001      	adds	r0, #1
 80176dc:	f040 8089 	bne.w	80177f2 <_printf_float+0x1aa>
 80176e0:	f04f 30ff 	mov.w	r0, #4294967295
 80176e4:	b00d      	add	sp, #52	@ 0x34
 80176e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176ea:	eeb4 0b40 	vcmp.f64	d0, d0
 80176ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176f2:	d709      	bvc.n	8017708 <_printf_float+0xc0>
 80176f4:	ee10 3a90 	vmov	r3, s1
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	bfbc      	itt	lt
 80176fc:	232d      	movlt	r3, #45	@ 0x2d
 80176fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8017702:	497d      	ldr	r1, [pc, #500]	@ (80178f8 <_printf_float+0x2b0>)
 8017704:	4b7d      	ldr	r3, [pc, #500]	@ (80178fc <_printf_float+0x2b4>)
 8017706:	e7d5      	b.n	80176b4 <_printf_float+0x6c>
 8017708:	6863      	ldr	r3, [r4, #4]
 801770a:	1c59      	adds	r1, r3, #1
 801770c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8017710:	d139      	bne.n	8017786 <_printf_float+0x13e>
 8017712:	2306      	movs	r3, #6
 8017714:	6063      	str	r3, [r4, #4]
 8017716:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801771a:	2300      	movs	r3, #0
 801771c:	6022      	str	r2, [r4, #0]
 801771e:	9303      	str	r3, [sp, #12]
 8017720:	ab0a      	add	r3, sp, #40	@ 0x28
 8017722:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8017726:	ab09      	add	r3, sp, #36	@ 0x24
 8017728:	9300      	str	r3, [sp, #0]
 801772a:	6861      	ldr	r1, [r4, #4]
 801772c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8017730:	4628      	mov	r0, r5
 8017732:	f7ff fefb 	bl	801752c <__cvt>
 8017736:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801773a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801773c:	4680      	mov	r8, r0
 801773e:	d129      	bne.n	8017794 <_printf_float+0x14c>
 8017740:	1cc8      	adds	r0, r1, #3
 8017742:	db02      	blt.n	801774a <_printf_float+0x102>
 8017744:	6863      	ldr	r3, [r4, #4]
 8017746:	4299      	cmp	r1, r3
 8017748:	dd41      	ble.n	80177ce <_printf_float+0x186>
 801774a:	f1a9 0902 	sub.w	r9, r9, #2
 801774e:	fa5f f989 	uxtb.w	r9, r9
 8017752:	3901      	subs	r1, #1
 8017754:	464a      	mov	r2, r9
 8017756:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801775a:	9109      	str	r1, [sp, #36]	@ 0x24
 801775c:	f7ff ff3a 	bl	80175d4 <__exponent>
 8017760:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017762:	1813      	adds	r3, r2, r0
 8017764:	2a01      	cmp	r2, #1
 8017766:	4682      	mov	sl, r0
 8017768:	6123      	str	r3, [r4, #16]
 801776a:	dc02      	bgt.n	8017772 <_printf_float+0x12a>
 801776c:	6822      	ldr	r2, [r4, #0]
 801776e:	07d2      	lsls	r2, r2, #31
 8017770:	d501      	bpl.n	8017776 <_printf_float+0x12e>
 8017772:	3301      	adds	r3, #1
 8017774:	6123      	str	r3, [r4, #16]
 8017776:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801777a:	2b00      	cmp	r3, #0
 801777c:	d0a6      	beq.n	80176cc <_printf_float+0x84>
 801777e:	232d      	movs	r3, #45	@ 0x2d
 8017780:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017784:	e7a2      	b.n	80176cc <_printf_float+0x84>
 8017786:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801778a:	d1c4      	bne.n	8017716 <_printf_float+0xce>
 801778c:	2b00      	cmp	r3, #0
 801778e:	d1c2      	bne.n	8017716 <_printf_float+0xce>
 8017790:	2301      	movs	r3, #1
 8017792:	e7bf      	b.n	8017714 <_printf_float+0xcc>
 8017794:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8017798:	d9db      	bls.n	8017752 <_printf_float+0x10a>
 801779a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 801779e:	d118      	bne.n	80177d2 <_printf_float+0x18a>
 80177a0:	2900      	cmp	r1, #0
 80177a2:	6863      	ldr	r3, [r4, #4]
 80177a4:	dd0b      	ble.n	80177be <_printf_float+0x176>
 80177a6:	6121      	str	r1, [r4, #16]
 80177a8:	b913      	cbnz	r3, 80177b0 <_printf_float+0x168>
 80177aa:	6822      	ldr	r2, [r4, #0]
 80177ac:	07d0      	lsls	r0, r2, #31
 80177ae:	d502      	bpl.n	80177b6 <_printf_float+0x16e>
 80177b0:	3301      	adds	r3, #1
 80177b2:	440b      	add	r3, r1
 80177b4:	6123      	str	r3, [r4, #16]
 80177b6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80177b8:	f04f 0a00 	mov.w	sl, #0
 80177bc:	e7db      	b.n	8017776 <_printf_float+0x12e>
 80177be:	b913      	cbnz	r3, 80177c6 <_printf_float+0x17e>
 80177c0:	6822      	ldr	r2, [r4, #0]
 80177c2:	07d2      	lsls	r2, r2, #31
 80177c4:	d501      	bpl.n	80177ca <_printf_float+0x182>
 80177c6:	3302      	adds	r3, #2
 80177c8:	e7f4      	b.n	80177b4 <_printf_float+0x16c>
 80177ca:	2301      	movs	r3, #1
 80177cc:	e7f2      	b.n	80177b4 <_printf_float+0x16c>
 80177ce:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80177d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80177d4:	4299      	cmp	r1, r3
 80177d6:	db05      	blt.n	80177e4 <_printf_float+0x19c>
 80177d8:	6823      	ldr	r3, [r4, #0]
 80177da:	6121      	str	r1, [r4, #16]
 80177dc:	07d8      	lsls	r0, r3, #31
 80177de:	d5ea      	bpl.n	80177b6 <_printf_float+0x16e>
 80177e0:	1c4b      	adds	r3, r1, #1
 80177e2:	e7e7      	b.n	80177b4 <_printf_float+0x16c>
 80177e4:	2900      	cmp	r1, #0
 80177e6:	bfd4      	ite	le
 80177e8:	f1c1 0202 	rsble	r2, r1, #2
 80177ec:	2201      	movgt	r2, #1
 80177ee:	4413      	add	r3, r2
 80177f0:	e7e0      	b.n	80177b4 <_printf_float+0x16c>
 80177f2:	6823      	ldr	r3, [r4, #0]
 80177f4:	055a      	lsls	r2, r3, #21
 80177f6:	d407      	bmi.n	8017808 <_printf_float+0x1c0>
 80177f8:	6923      	ldr	r3, [r4, #16]
 80177fa:	4642      	mov	r2, r8
 80177fc:	4631      	mov	r1, r6
 80177fe:	4628      	mov	r0, r5
 8017800:	47b8      	blx	r7
 8017802:	3001      	adds	r0, #1
 8017804:	d12a      	bne.n	801785c <_printf_float+0x214>
 8017806:	e76b      	b.n	80176e0 <_printf_float+0x98>
 8017808:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801780c:	f240 80e0 	bls.w	80179d0 <_printf_float+0x388>
 8017810:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8017814:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801781c:	d133      	bne.n	8017886 <_printf_float+0x23e>
 801781e:	4a38      	ldr	r2, [pc, #224]	@ (8017900 <_printf_float+0x2b8>)
 8017820:	2301      	movs	r3, #1
 8017822:	4631      	mov	r1, r6
 8017824:	4628      	mov	r0, r5
 8017826:	47b8      	blx	r7
 8017828:	3001      	adds	r0, #1
 801782a:	f43f af59 	beq.w	80176e0 <_printf_float+0x98>
 801782e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8017832:	4543      	cmp	r3, r8
 8017834:	db02      	blt.n	801783c <_printf_float+0x1f4>
 8017836:	6823      	ldr	r3, [r4, #0]
 8017838:	07d8      	lsls	r0, r3, #31
 801783a:	d50f      	bpl.n	801785c <_printf_float+0x214>
 801783c:	9b05      	ldr	r3, [sp, #20]
 801783e:	465a      	mov	r2, fp
 8017840:	4631      	mov	r1, r6
 8017842:	4628      	mov	r0, r5
 8017844:	47b8      	blx	r7
 8017846:	3001      	adds	r0, #1
 8017848:	f43f af4a 	beq.w	80176e0 <_printf_float+0x98>
 801784c:	f04f 0900 	mov.w	r9, #0
 8017850:	f108 38ff 	add.w	r8, r8, #4294967295
 8017854:	f104 0a1a 	add.w	sl, r4, #26
 8017858:	45c8      	cmp	r8, r9
 801785a:	dc09      	bgt.n	8017870 <_printf_float+0x228>
 801785c:	6823      	ldr	r3, [r4, #0]
 801785e:	079b      	lsls	r3, r3, #30
 8017860:	f100 8107 	bmi.w	8017a72 <_printf_float+0x42a>
 8017864:	68e0      	ldr	r0, [r4, #12]
 8017866:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017868:	4298      	cmp	r0, r3
 801786a:	bfb8      	it	lt
 801786c:	4618      	movlt	r0, r3
 801786e:	e739      	b.n	80176e4 <_printf_float+0x9c>
 8017870:	2301      	movs	r3, #1
 8017872:	4652      	mov	r2, sl
 8017874:	4631      	mov	r1, r6
 8017876:	4628      	mov	r0, r5
 8017878:	47b8      	blx	r7
 801787a:	3001      	adds	r0, #1
 801787c:	f43f af30 	beq.w	80176e0 <_printf_float+0x98>
 8017880:	f109 0901 	add.w	r9, r9, #1
 8017884:	e7e8      	b.n	8017858 <_printf_float+0x210>
 8017886:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017888:	2b00      	cmp	r3, #0
 801788a:	dc3b      	bgt.n	8017904 <_printf_float+0x2bc>
 801788c:	4a1c      	ldr	r2, [pc, #112]	@ (8017900 <_printf_float+0x2b8>)
 801788e:	2301      	movs	r3, #1
 8017890:	4631      	mov	r1, r6
 8017892:	4628      	mov	r0, r5
 8017894:	47b8      	blx	r7
 8017896:	3001      	adds	r0, #1
 8017898:	f43f af22 	beq.w	80176e0 <_printf_float+0x98>
 801789c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80178a0:	ea59 0303 	orrs.w	r3, r9, r3
 80178a4:	d102      	bne.n	80178ac <_printf_float+0x264>
 80178a6:	6823      	ldr	r3, [r4, #0]
 80178a8:	07d9      	lsls	r1, r3, #31
 80178aa:	d5d7      	bpl.n	801785c <_printf_float+0x214>
 80178ac:	9b05      	ldr	r3, [sp, #20]
 80178ae:	465a      	mov	r2, fp
 80178b0:	4631      	mov	r1, r6
 80178b2:	4628      	mov	r0, r5
 80178b4:	47b8      	blx	r7
 80178b6:	3001      	adds	r0, #1
 80178b8:	f43f af12 	beq.w	80176e0 <_printf_float+0x98>
 80178bc:	f04f 0a00 	mov.w	sl, #0
 80178c0:	f104 0b1a 	add.w	fp, r4, #26
 80178c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80178c6:	425b      	negs	r3, r3
 80178c8:	4553      	cmp	r3, sl
 80178ca:	dc01      	bgt.n	80178d0 <_printf_float+0x288>
 80178cc:	464b      	mov	r3, r9
 80178ce:	e794      	b.n	80177fa <_printf_float+0x1b2>
 80178d0:	2301      	movs	r3, #1
 80178d2:	465a      	mov	r2, fp
 80178d4:	4631      	mov	r1, r6
 80178d6:	4628      	mov	r0, r5
 80178d8:	47b8      	blx	r7
 80178da:	3001      	adds	r0, #1
 80178dc:	f43f af00 	beq.w	80176e0 <_printf_float+0x98>
 80178e0:	f10a 0a01 	add.w	sl, sl, #1
 80178e4:	e7ee      	b.n	80178c4 <_printf_float+0x27c>
 80178e6:	bf00      	nop
 80178e8:	ffffffff 	.word	0xffffffff
 80178ec:	7fefffff 	.word	0x7fefffff
 80178f0:	0801ea09 	.word	0x0801ea09
 80178f4:	0801ea0d 	.word	0x0801ea0d
 80178f8:	0801ea11 	.word	0x0801ea11
 80178fc:	0801ea15 	.word	0x0801ea15
 8017900:	0801ede7 	.word	0x0801ede7
 8017904:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8017906:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801790a:	4553      	cmp	r3, sl
 801790c:	bfa8      	it	ge
 801790e:	4653      	movge	r3, sl
 8017910:	2b00      	cmp	r3, #0
 8017912:	4699      	mov	r9, r3
 8017914:	dc37      	bgt.n	8017986 <_printf_float+0x33e>
 8017916:	2300      	movs	r3, #0
 8017918:	9307      	str	r3, [sp, #28]
 801791a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801791e:	f104 021a 	add.w	r2, r4, #26
 8017922:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8017924:	9907      	ldr	r1, [sp, #28]
 8017926:	9306      	str	r3, [sp, #24]
 8017928:	eba3 0309 	sub.w	r3, r3, r9
 801792c:	428b      	cmp	r3, r1
 801792e:	dc31      	bgt.n	8017994 <_printf_float+0x34c>
 8017930:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017932:	459a      	cmp	sl, r3
 8017934:	dc3b      	bgt.n	80179ae <_printf_float+0x366>
 8017936:	6823      	ldr	r3, [r4, #0]
 8017938:	07da      	lsls	r2, r3, #31
 801793a:	d438      	bmi.n	80179ae <_printf_float+0x366>
 801793c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801793e:	ebaa 0903 	sub.w	r9, sl, r3
 8017942:	9b06      	ldr	r3, [sp, #24]
 8017944:	ebaa 0303 	sub.w	r3, sl, r3
 8017948:	4599      	cmp	r9, r3
 801794a:	bfa8      	it	ge
 801794c:	4699      	movge	r9, r3
 801794e:	f1b9 0f00 	cmp.w	r9, #0
 8017952:	dc34      	bgt.n	80179be <_printf_float+0x376>
 8017954:	f04f 0800 	mov.w	r8, #0
 8017958:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801795c:	f104 0b1a 	add.w	fp, r4, #26
 8017960:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017962:	ebaa 0303 	sub.w	r3, sl, r3
 8017966:	eba3 0309 	sub.w	r3, r3, r9
 801796a:	4543      	cmp	r3, r8
 801796c:	f77f af76 	ble.w	801785c <_printf_float+0x214>
 8017970:	2301      	movs	r3, #1
 8017972:	465a      	mov	r2, fp
 8017974:	4631      	mov	r1, r6
 8017976:	4628      	mov	r0, r5
 8017978:	47b8      	blx	r7
 801797a:	3001      	adds	r0, #1
 801797c:	f43f aeb0 	beq.w	80176e0 <_printf_float+0x98>
 8017980:	f108 0801 	add.w	r8, r8, #1
 8017984:	e7ec      	b.n	8017960 <_printf_float+0x318>
 8017986:	4642      	mov	r2, r8
 8017988:	4631      	mov	r1, r6
 801798a:	4628      	mov	r0, r5
 801798c:	47b8      	blx	r7
 801798e:	3001      	adds	r0, #1
 8017990:	d1c1      	bne.n	8017916 <_printf_float+0x2ce>
 8017992:	e6a5      	b.n	80176e0 <_printf_float+0x98>
 8017994:	2301      	movs	r3, #1
 8017996:	4631      	mov	r1, r6
 8017998:	4628      	mov	r0, r5
 801799a:	9206      	str	r2, [sp, #24]
 801799c:	47b8      	blx	r7
 801799e:	3001      	adds	r0, #1
 80179a0:	f43f ae9e 	beq.w	80176e0 <_printf_float+0x98>
 80179a4:	9b07      	ldr	r3, [sp, #28]
 80179a6:	9a06      	ldr	r2, [sp, #24]
 80179a8:	3301      	adds	r3, #1
 80179aa:	9307      	str	r3, [sp, #28]
 80179ac:	e7b9      	b.n	8017922 <_printf_float+0x2da>
 80179ae:	9b05      	ldr	r3, [sp, #20]
 80179b0:	465a      	mov	r2, fp
 80179b2:	4631      	mov	r1, r6
 80179b4:	4628      	mov	r0, r5
 80179b6:	47b8      	blx	r7
 80179b8:	3001      	adds	r0, #1
 80179ba:	d1bf      	bne.n	801793c <_printf_float+0x2f4>
 80179bc:	e690      	b.n	80176e0 <_printf_float+0x98>
 80179be:	9a06      	ldr	r2, [sp, #24]
 80179c0:	464b      	mov	r3, r9
 80179c2:	4442      	add	r2, r8
 80179c4:	4631      	mov	r1, r6
 80179c6:	4628      	mov	r0, r5
 80179c8:	47b8      	blx	r7
 80179ca:	3001      	adds	r0, #1
 80179cc:	d1c2      	bne.n	8017954 <_printf_float+0x30c>
 80179ce:	e687      	b.n	80176e0 <_printf_float+0x98>
 80179d0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80179d4:	f1b9 0f01 	cmp.w	r9, #1
 80179d8:	dc01      	bgt.n	80179de <_printf_float+0x396>
 80179da:	07db      	lsls	r3, r3, #31
 80179dc:	d536      	bpl.n	8017a4c <_printf_float+0x404>
 80179de:	2301      	movs	r3, #1
 80179e0:	4642      	mov	r2, r8
 80179e2:	4631      	mov	r1, r6
 80179e4:	4628      	mov	r0, r5
 80179e6:	47b8      	blx	r7
 80179e8:	3001      	adds	r0, #1
 80179ea:	f43f ae79 	beq.w	80176e0 <_printf_float+0x98>
 80179ee:	9b05      	ldr	r3, [sp, #20]
 80179f0:	465a      	mov	r2, fp
 80179f2:	4631      	mov	r1, r6
 80179f4:	4628      	mov	r0, r5
 80179f6:	47b8      	blx	r7
 80179f8:	3001      	adds	r0, #1
 80179fa:	f43f ae71 	beq.w	80176e0 <_printf_float+0x98>
 80179fe:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8017a02:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a0a:	f109 39ff 	add.w	r9, r9, #4294967295
 8017a0e:	d018      	beq.n	8017a42 <_printf_float+0x3fa>
 8017a10:	464b      	mov	r3, r9
 8017a12:	f108 0201 	add.w	r2, r8, #1
 8017a16:	4631      	mov	r1, r6
 8017a18:	4628      	mov	r0, r5
 8017a1a:	47b8      	blx	r7
 8017a1c:	3001      	adds	r0, #1
 8017a1e:	d10c      	bne.n	8017a3a <_printf_float+0x3f2>
 8017a20:	e65e      	b.n	80176e0 <_printf_float+0x98>
 8017a22:	2301      	movs	r3, #1
 8017a24:	465a      	mov	r2, fp
 8017a26:	4631      	mov	r1, r6
 8017a28:	4628      	mov	r0, r5
 8017a2a:	47b8      	blx	r7
 8017a2c:	3001      	adds	r0, #1
 8017a2e:	f43f ae57 	beq.w	80176e0 <_printf_float+0x98>
 8017a32:	f108 0801 	add.w	r8, r8, #1
 8017a36:	45c8      	cmp	r8, r9
 8017a38:	dbf3      	blt.n	8017a22 <_printf_float+0x3da>
 8017a3a:	4653      	mov	r3, sl
 8017a3c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8017a40:	e6dc      	b.n	80177fc <_printf_float+0x1b4>
 8017a42:	f04f 0800 	mov.w	r8, #0
 8017a46:	f104 0b1a 	add.w	fp, r4, #26
 8017a4a:	e7f4      	b.n	8017a36 <_printf_float+0x3ee>
 8017a4c:	2301      	movs	r3, #1
 8017a4e:	4642      	mov	r2, r8
 8017a50:	e7e1      	b.n	8017a16 <_printf_float+0x3ce>
 8017a52:	2301      	movs	r3, #1
 8017a54:	464a      	mov	r2, r9
 8017a56:	4631      	mov	r1, r6
 8017a58:	4628      	mov	r0, r5
 8017a5a:	47b8      	blx	r7
 8017a5c:	3001      	adds	r0, #1
 8017a5e:	f43f ae3f 	beq.w	80176e0 <_printf_float+0x98>
 8017a62:	f108 0801 	add.w	r8, r8, #1
 8017a66:	68e3      	ldr	r3, [r4, #12]
 8017a68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8017a6a:	1a5b      	subs	r3, r3, r1
 8017a6c:	4543      	cmp	r3, r8
 8017a6e:	dcf0      	bgt.n	8017a52 <_printf_float+0x40a>
 8017a70:	e6f8      	b.n	8017864 <_printf_float+0x21c>
 8017a72:	f04f 0800 	mov.w	r8, #0
 8017a76:	f104 0919 	add.w	r9, r4, #25
 8017a7a:	e7f4      	b.n	8017a66 <_printf_float+0x41e>

08017a7c <_printf_common>:
 8017a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a80:	4616      	mov	r6, r2
 8017a82:	4698      	mov	r8, r3
 8017a84:	688a      	ldr	r2, [r1, #8]
 8017a86:	690b      	ldr	r3, [r1, #16]
 8017a88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017a8c:	4293      	cmp	r3, r2
 8017a8e:	bfb8      	it	lt
 8017a90:	4613      	movlt	r3, r2
 8017a92:	6033      	str	r3, [r6, #0]
 8017a94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017a98:	4607      	mov	r7, r0
 8017a9a:	460c      	mov	r4, r1
 8017a9c:	b10a      	cbz	r2, 8017aa2 <_printf_common+0x26>
 8017a9e:	3301      	adds	r3, #1
 8017aa0:	6033      	str	r3, [r6, #0]
 8017aa2:	6823      	ldr	r3, [r4, #0]
 8017aa4:	0699      	lsls	r1, r3, #26
 8017aa6:	bf42      	ittt	mi
 8017aa8:	6833      	ldrmi	r3, [r6, #0]
 8017aaa:	3302      	addmi	r3, #2
 8017aac:	6033      	strmi	r3, [r6, #0]
 8017aae:	6825      	ldr	r5, [r4, #0]
 8017ab0:	f015 0506 	ands.w	r5, r5, #6
 8017ab4:	d106      	bne.n	8017ac4 <_printf_common+0x48>
 8017ab6:	f104 0a19 	add.w	sl, r4, #25
 8017aba:	68e3      	ldr	r3, [r4, #12]
 8017abc:	6832      	ldr	r2, [r6, #0]
 8017abe:	1a9b      	subs	r3, r3, r2
 8017ac0:	42ab      	cmp	r3, r5
 8017ac2:	dc26      	bgt.n	8017b12 <_printf_common+0x96>
 8017ac4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017ac8:	6822      	ldr	r2, [r4, #0]
 8017aca:	3b00      	subs	r3, #0
 8017acc:	bf18      	it	ne
 8017ace:	2301      	movne	r3, #1
 8017ad0:	0692      	lsls	r2, r2, #26
 8017ad2:	d42b      	bmi.n	8017b2c <_printf_common+0xb0>
 8017ad4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017ad8:	4641      	mov	r1, r8
 8017ada:	4638      	mov	r0, r7
 8017adc:	47c8      	blx	r9
 8017ade:	3001      	adds	r0, #1
 8017ae0:	d01e      	beq.n	8017b20 <_printf_common+0xa4>
 8017ae2:	6823      	ldr	r3, [r4, #0]
 8017ae4:	6922      	ldr	r2, [r4, #16]
 8017ae6:	f003 0306 	and.w	r3, r3, #6
 8017aea:	2b04      	cmp	r3, #4
 8017aec:	bf02      	ittt	eq
 8017aee:	68e5      	ldreq	r5, [r4, #12]
 8017af0:	6833      	ldreq	r3, [r6, #0]
 8017af2:	1aed      	subeq	r5, r5, r3
 8017af4:	68a3      	ldr	r3, [r4, #8]
 8017af6:	bf0c      	ite	eq
 8017af8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017afc:	2500      	movne	r5, #0
 8017afe:	4293      	cmp	r3, r2
 8017b00:	bfc4      	itt	gt
 8017b02:	1a9b      	subgt	r3, r3, r2
 8017b04:	18ed      	addgt	r5, r5, r3
 8017b06:	2600      	movs	r6, #0
 8017b08:	341a      	adds	r4, #26
 8017b0a:	42b5      	cmp	r5, r6
 8017b0c:	d11a      	bne.n	8017b44 <_printf_common+0xc8>
 8017b0e:	2000      	movs	r0, #0
 8017b10:	e008      	b.n	8017b24 <_printf_common+0xa8>
 8017b12:	2301      	movs	r3, #1
 8017b14:	4652      	mov	r2, sl
 8017b16:	4641      	mov	r1, r8
 8017b18:	4638      	mov	r0, r7
 8017b1a:	47c8      	blx	r9
 8017b1c:	3001      	adds	r0, #1
 8017b1e:	d103      	bne.n	8017b28 <_printf_common+0xac>
 8017b20:	f04f 30ff 	mov.w	r0, #4294967295
 8017b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b28:	3501      	adds	r5, #1
 8017b2a:	e7c6      	b.n	8017aba <_printf_common+0x3e>
 8017b2c:	18e1      	adds	r1, r4, r3
 8017b2e:	1c5a      	adds	r2, r3, #1
 8017b30:	2030      	movs	r0, #48	@ 0x30
 8017b32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017b36:	4422      	add	r2, r4
 8017b38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017b3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017b40:	3302      	adds	r3, #2
 8017b42:	e7c7      	b.n	8017ad4 <_printf_common+0x58>
 8017b44:	2301      	movs	r3, #1
 8017b46:	4622      	mov	r2, r4
 8017b48:	4641      	mov	r1, r8
 8017b4a:	4638      	mov	r0, r7
 8017b4c:	47c8      	blx	r9
 8017b4e:	3001      	adds	r0, #1
 8017b50:	d0e6      	beq.n	8017b20 <_printf_common+0xa4>
 8017b52:	3601      	adds	r6, #1
 8017b54:	e7d9      	b.n	8017b0a <_printf_common+0x8e>
	...

08017b58 <_printf_i>:
 8017b58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017b5c:	7e0f      	ldrb	r7, [r1, #24]
 8017b5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017b60:	2f78      	cmp	r7, #120	@ 0x78
 8017b62:	4691      	mov	r9, r2
 8017b64:	4680      	mov	r8, r0
 8017b66:	460c      	mov	r4, r1
 8017b68:	469a      	mov	sl, r3
 8017b6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017b6e:	d807      	bhi.n	8017b80 <_printf_i+0x28>
 8017b70:	2f62      	cmp	r7, #98	@ 0x62
 8017b72:	d80a      	bhi.n	8017b8a <_printf_i+0x32>
 8017b74:	2f00      	cmp	r7, #0
 8017b76:	f000 80d2 	beq.w	8017d1e <_printf_i+0x1c6>
 8017b7a:	2f58      	cmp	r7, #88	@ 0x58
 8017b7c:	f000 80b9 	beq.w	8017cf2 <_printf_i+0x19a>
 8017b80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017b84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017b88:	e03a      	b.n	8017c00 <_printf_i+0xa8>
 8017b8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017b8e:	2b15      	cmp	r3, #21
 8017b90:	d8f6      	bhi.n	8017b80 <_printf_i+0x28>
 8017b92:	a101      	add	r1, pc, #4	@ (adr r1, 8017b98 <_printf_i+0x40>)
 8017b94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017b98:	08017bf1 	.word	0x08017bf1
 8017b9c:	08017c05 	.word	0x08017c05
 8017ba0:	08017b81 	.word	0x08017b81
 8017ba4:	08017b81 	.word	0x08017b81
 8017ba8:	08017b81 	.word	0x08017b81
 8017bac:	08017b81 	.word	0x08017b81
 8017bb0:	08017c05 	.word	0x08017c05
 8017bb4:	08017b81 	.word	0x08017b81
 8017bb8:	08017b81 	.word	0x08017b81
 8017bbc:	08017b81 	.word	0x08017b81
 8017bc0:	08017b81 	.word	0x08017b81
 8017bc4:	08017d05 	.word	0x08017d05
 8017bc8:	08017c2f 	.word	0x08017c2f
 8017bcc:	08017cbf 	.word	0x08017cbf
 8017bd0:	08017b81 	.word	0x08017b81
 8017bd4:	08017b81 	.word	0x08017b81
 8017bd8:	08017d27 	.word	0x08017d27
 8017bdc:	08017b81 	.word	0x08017b81
 8017be0:	08017c2f 	.word	0x08017c2f
 8017be4:	08017b81 	.word	0x08017b81
 8017be8:	08017b81 	.word	0x08017b81
 8017bec:	08017cc7 	.word	0x08017cc7
 8017bf0:	6833      	ldr	r3, [r6, #0]
 8017bf2:	1d1a      	adds	r2, r3, #4
 8017bf4:	681b      	ldr	r3, [r3, #0]
 8017bf6:	6032      	str	r2, [r6, #0]
 8017bf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017bfc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017c00:	2301      	movs	r3, #1
 8017c02:	e09d      	b.n	8017d40 <_printf_i+0x1e8>
 8017c04:	6833      	ldr	r3, [r6, #0]
 8017c06:	6820      	ldr	r0, [r4, #0]
 8017c08:	1d19      	adds	r1, r3, #4
 8017c0a:	6031      	str	r1, [r6, #0]
 8017c0c:	0606      	lsls	r6, r0, #24
 8017c0e:	d501      	bpl.n	8017c14 <_printf_i+0xbc>
 8017c10:	681d      	ldr	r5, [r3, #0]
 8017c12:	e003      	b.n	8017c1c <_printf_i+0xc4>
 8017c14:	0645      	lsls	r5, r0, #25
 8017c16:	d5fb      	bpl.n	8017c10 <_printf_i+0xb8>
 8017c18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017c1c:	2d00      	cmp	r5, #0
 8017c1e:	da03      	bge.n	8017c28 <_printf_i+0xd0>
 8017c20:	232d      	movs	r3, #45	@ 0x2d
 8017c22:	426d      	negs	r5, r5
 8017c24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017c28:	4859      	ldr	r0, [pc, #356]	@ (8017d90 <_printf_i+0x238>)
 8017c2a:	230a      	movs	r3, #10
 8017c2c:	e011      	b.n	8017c52 <_printf_i+0xfa>
 8017c2e:	6821      	ldr	r1, [r4, #0]
 8017c30:	6833      	ldr	r3, [r6, #0]
 8017c32:	0608      	lsls	r0, r1, #24
 8017c34:	f853 5b04 	ldr.w	r5, [r3], #4
 8017c38:	d402      	bmi.n	8017c40 <_printf_i+0xe8>
 8017c3a:	0649      	lsls	r1, r1, #25
 8017c3c:	bf48      	it	mi
 8017c3e:	b2ad      	uxthmi	r5, r5
 8017c40:	2f6f      	cmp	r7, #111	@ 0x6f
 8017c42:	4853      	ldr	r0, [pc, #332]	@ (8017d90 <_printf_i+0x238>)
 8017c44:	6033      	str	r3, [r6, #0]
 8017c46:	bf14      	ite	ne
 8017c48:	230a      	movne	r3, #10
 8017c4a:	2308      	moveq	r3, #8
 8017c4c:	2100      	movs	r1, #0
 8017c4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8017c52:	6866      	ldr	r6, [r4, #4]
 8017c54:	60a6      	str	r6, [r4, #8]
 8017c56:	2e00      	cmp	r6, #0
 8017c58:	bfa2      	ittt	ge
 8017c5a:	6821      	ldrge	r1, [r4, #0]
 8017c5c:	f021 0104 	bicge.w	r1, r1, #4
 8017c60:	6021      	strge	r1, [r4, #0]
 8017c62:	b90d      	cbnz	r5, 8017c68 <_printf_i+0x110>
 8017c64:	2e00      	cmp	r6, #0
 8017c66:	d04b      	beq.n	8017d00 <_printf_i+0x1a8>
 8017c68:	4616      	mov	r6, r2
 8017c6a:	fbb5 f1f3 	udiv	r1, r5, r3
 8017c6e:	fb03 5711 	mls	r7, r3, r1, r5
 8017c72:	5dc7      	ldrb	r7, [r0, r7]
 8017c74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017c78:	462f      	mov	r7, r5
 8017c7a:	42bb      	cmp	r3, r7
 8017c7c:	460d      	mov	r5, r1
 8017c7e:	d9f4      	bls.n	8017c6a <_printf_i+0x112>
 8017c80:	2b08      	cmp	r3, #8
 8017c82:	d10b      	bne.n	8017c9c <_printf_i+0x144>
 8017c84:	6823      	ldr	r3, [r4, #0]
 8017c86:	07df      	lsls	r7, r3, #31
 8017c88:	d508      	bpl.n	8017c9c <_printf_i+0x144>
 8017c8a:	6923      	ldr	r3, [r4, #16]
 8017c8c:	6861      	ldr	r1, [r4, #4]
 8017c8e:	4299      	cmp	r1, r3
 8017c90:	bfde      	ittt	le
 8017c92:	2330      	movle	r3, #48	@ 0x30
 8017c94:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017c98:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017c9c:	1b92      	subs	r2, r2, r6
 8017c9e:	6122      	str	r2, [r4, #16]
 8017ca0:	f8cd a000 	str.w	sl, [sp]
 8017ca4:	464b      	mov	r3, r9
 8017ca6:	aa03      	add	r2, sp, #12
 8017ca8:	4621      	mov	r1, r4
 8017caa:	4640      	mov	r0, r8
 8017cac:	f7ff fee6 	bl	8017a7c <_printf_common>
 8017cb0:	3001      	adds	r0, #1
 8017cb2:	d14a      	bne.n	8017d4a <_printf_i+0x1f2>
 8017cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8017cb8:	b004      	add	sp, #16
 8017cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017cbe:	6823      	ldr	r3, [r4, #0]
 8017cc0:	f043 0320 	orr.w	r3, r3, #32
 8017cc4:	6023      	str	r3, [r4, #0]
 8017cc6:	4833      	ldr	r0, [pc, #204]	@ (8017d94 <_printf_i+0x23c>)
 8017cc8:	2778      	movs	r7, #120	@ 0x78
 8017cca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017cce:	6823      	ldr	r3, [r4, #0]
 8017cd0:	6831      	ldr	r1, [r6, #0]
 8017cd2:	061f      	lsls	r7, r3, #24
 8017cd4:	f851 5b04 	ldr.w	r5, [r1], #4
 8017cd8:	d402      	bmi.n	8017ce0 <_printf_i+0x188>
 8017cda:	065f      	lsls	r7, r3, #25
 8017cdc:	bf48      	it	mi
 8017cde:	b2ad      	uxthmi	r5, r5
 8017ce0:	6031      	str	r1, [r6, #0]
 8017ce2:	07d9      	lsls	r1, r3, #31
 8017ce4:	bf44      	itt	mi
 8017ce6:	f043 0320 	orrmi.w	r3, r3, #32
 8017cea:	6023      	strmi	r3, [r4, #0]
 8017cec:	b11d      	cbz	r5, 8017cf6 <_printf_i+0x19e>
 8017cee:	2310      	movs	r3, #16
 8017cf0:	e7ac      	b.n	8017c4c <_printf_i+0xf4>
 8017cf2:	4827      	ldr	r0, [pc, #156]	@ (8017d90 <_printf_i+0x238>)
 8017cf4:	e7e9      	b.n	8017cca <_printf_i+0x172>
 8017cf6:	6823      	ldr	r3, [r4, #0]
 8017cf8:	f023 0320 	bic.w	r3, r3, #32
 8017cfc:	6023      	str	r3, [r4, #0]
 8017cfe:	e7f6      	b.n	8017cee <_printf_i+0x196>
 8017d00:	4616      	mov	r6, r2
 8017d02:	e7bd      	b.n	8017c80 <_printf_i+0x128>
 8017d04:	6833      	ldr	r3, [r6, #0]
 8017d06:	6825      	ldr	r5, [r4, #0]
 8017d08:	6961      	ldr	r1, [r4, #20]
 8017d0a:	1d18      	adds	r0, r3, #4
 8017d0c:	6030      	str	r0, [r6, #0]
 8017d0e:	062e      	lsls	r6, r5, #24
 8017d10:	681b      	ldr	r3, [r3, #0]
 8017d12:	d501      	bpl.n	8017d18 <_printf_i+0x1c0>
 8017d14:	6019      	str	r1, [r3, #0]
 8017d16:	e002      	b.n	8017d1e <_printf_i+0x1c6>
 8017d18:	0668      	lsls	r0, r5, #25
 8017d1a:	d5fb      	bpl.n	8017d14 <_printf_i+0x1bc>
 8017d1c:	8019      	strh	r1, [r3, #0]
 8017d1e:	2300      	movs	r3, #0
 8017d20:	6123      	str	r3, [r4, #16]
 8017d22:	4616      	mov	r6, r2
 8017d24:	e7bc      	b.n	8017ca0 <_printf_i+0x148>
 8017d26:	6833      	ldr	r3, [r6, #0]
 8017d28:	1d1a      	adds	r2, r3, #4
 8017d2a:	6032      	str	r2, [r6, #0]
 8017d2c:	681e      	ldr	r6, [r3, #0]
 8017d2e:	6862      	ldr	r2, [r4, #4]
 8017d30:	2100      	movs	r1, #0
 8017d32:	4630      	mov	r0, r6
 8017d34:	f7e8 fae4 	bl	8000300 <memchr>
 8017d38:	b108      	cbz	r0, 8017d3e <_printf_i+0x1e6>
 8017d3a:	1b80      	subs	r0, r0, r6
 8017d3c:	6060      	str	r0, [r4, #4]
 8017d3e:	6863      	ldr	r3, [r4, #4]
 8017d40:	6123      	str	r3, [r4, #16]
 8017d42:	2300      	movs	r3, #0
 8017d44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017d48:	e7aa      	b.n	8017ca0 <_printf_i+0x148>
 8017d4a:	6923      	ldr	r3, [r4, #16]
 8017d4c:	4632      	mov	r2, r6
 8017d4e:	4649      	mov	r1, r9
 8017d50:	4640      	mov	r0, r8
 8017d52:	47d0      	blx	sl
 8017d54:	3001      	adds	r0, #1
 8017d56:	d0ad      	beq.n	8017cb4 <_printf_i+0x15c>
 8017d58:	6823      	ldr	r3, [r4, #0]
 8017d5a:	079b      	lsls	r3, r3, #30
 8017d5c:	d413      	bmi.n	8017d86 <_printf_i+0x22e>
 8017d5e:	68e0      	ldr	r0, [r4, #12]
 8017d60:	9b03      	ldr	r3, [sp, #12]
 8017d62:	4298      	cmp	r0, r3
 8017d64:	bfb8      	it	lt
 8017d66:	4618      	movlt	r0, r3
 8017d68:	e7a6      	b.n	8017cb8 <_printf_i+0x160>
 8017d6a:	2301      	movs	r3, #1
 8017d6c:	4632      	mov	r2, r6
 8017d6e:	4649      	mov	r1, r9
 8017d70:	4640      	mov	r0, r8
 8017d72:	47d0      	blx	sl
 8017d74:	3001      	adds	r0, #1
 8017d76:	d09d      	beq.n	8017cb4 <_printf_i+0x15c>
 8017d78:	3501      	adds	r5, #1
 8017d7a:	68e3      	ldr	r3, [r4, #12]
 8017d7c:	9903      	ldr	r1, [sp, #12]
 8017d7e:	1a5b      	subs	r3, r3, r1
 8017d80:	42ab      	cmp	r3, r5
 8017d82:	dcf2      	bgt.n	8017d6a <_printf_i+0x212>
 8017d84:	e7eb      	b.n	8017d5e <_printf_i+0x206>
 8017d86:	2500      	movs	r5, #0
 8017d88:	f104 0619 	add.w	r6, r4, #25
 8017d8c:	e7f5      	b.n	8017d7a <_printf_i+0x222>
 8017d8e:	bf00      	nop
 8017d90:	0801ea19 	.word	0x0801ea19
 8017d94:	0801ea2a 	.word	0x0801ea2a

08017d98 <_scanf_float>:
 8017d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d9c:	b087      	sub	sp, #28
 8017d9e:	4617      	mov	r7, r2
 8017da0:	9303      	str	r3, [sp, #12]
 8017da2:	688b      	ldr	r3, [r1, #8]
 8017da4:	1e5a      	subs	r2, r3, #1
 8017da6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8017daa:	bf81      	itttt	hi
 8017dac:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8017db0:	eb03 0b05 	addhi.w	fp, r3, r5
 8017db4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8017db8:	608b      	strhi	r3, [r1, #8]
 8017dba:	680b      	ldr	r3, [r1, #0]
 8017dbc:	460a      	mov	r2, r1
 8017dbe:	f04f 0500 	mov.w	r5, #0
 8017dc2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8017dc6:	f842 3b1c 	str.w	r3, [r2], #28
 8017dca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8017dce:	4680      	mov	r8, r0
 8017dd0:	460c      	mov	r4, r1
 8017dd2:	bf98      	it	ls
 8017dd4:	f04f 0b00 	movls.w	fp, #0
 8017dd8:	9201      	str	r2, [sp, #4]
 8017dda:	4616      	mov	r6, r2
 8017ddc:	46aa      	mov	sl, r5
 8017dde:	46a9      	mov	r9, r5
 8017de0:	9502      	str	r5, [sp, #8]
 8017de2:	68a2      	ldr	r2, [r4, #8]
 8017de4:	b152      	cbz	r2, 8017dfc <_scanf_float+0x64>
 8017de6:	683b      	ldr	r3, [r7, #0]
 8017de8:	781b      	ldrb	r3, [r3, #0]
 8017dea:	2b4e      	cmp	r3, #78	@ 0x4e
 8017dec:	d864      	bhi.n	8017eb8 <_scanf_float+0x120>
 8017dee:	2b40      	cmp	r3, #64	@ 0x40
 8017df0:	d83c      	bhi.n	8017e6c <_scanf_float+0xd4>
 8017df2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8017df6:	b2c8      	uxtb	r0, r1
 8017df8:	280e      	cmp	r0, #14
 8017dfa:	d93a      	bls.n	8017e72 <_scanf_float+0xda>
 8017dfc:	f1b9 0f00 	cmp.w	r9, #0
 8017e00:	d003      	beq.n	8017e0a <_scanf_float+0x72>
 8017e02:	6823      	ldr	r3, [r4, #0]
 8017e04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8017e08:	6023      	str	r3, [r4, #0]
 8017e0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017e0e:	f1ba 0f01 	cmp.w	sl, #1
 8017e12:	f200 8117 	bhi.w	8018044 <_scanf_float+0x2ac>
 8017e16:	9b01      	ldr	r3, [sp, #4]
 8017e18:	429e      	cmp	r6, r3
 8017e1a:	f200 8108 	bhi.w	801802e <_scanf_float+0x296>
 8017e1e:	2001      	movs	r0, #1
 8017e20:	b007      	add	sp, #28
 8017e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e26:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8017e2a:	2a0d      	cmp	r2, #13
 8017e2c:	d8e6      	bhi.n	8017dfc <_scanf_float+0x64>
 8017e2e:	a101      	add	r1, pc, #4	@ (adr r1, 8017e34 <_scanf_float+0x9c>)
 8017e30:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017e34:	08017f7b 	.word	0x08017f7b
 8017e38:	08017dfd 	.word	0x08017dfd
 8017e3c:	08017dfd 	.word	0x08017dfd
 8017e40:	08017dfd 	.word	0x08017dfd
 8017e44:	08017fdb 	.word	0x08017fdb
 8017e48:	08017fb3 	.word	0x08017fb3
 8017e4c:	08017dfd 	.word	0x08017dfd
 8017e50:	08017dfd 	.word	0x08017dfd
 8017e54:	08017f89 	.word	0x08017f89
 8017e58:	08017dfd 	.word	0x08017dfd
 8017e5c:	08017dfd 	.word	0x08017dfd
 8017e60:	08017dfd 	.word	0x08017dfd
 8017e64:	08017dfd 	.word	0x08017dfd
 8017e68:	08017f41 	.word	0x08017f41
 8017e6c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8017e70:	e7db      	b.n	8017e2a <_scanf_float+0x92>
 8017e72:	290e      	cmp	r1, #14
 8017e74:	d8c2      	bhi.n	8017dfc <_scanf_float+0x64>
 8017e76:	a001      	add	r0, pc, #4	@ (adr r0, 8017e7c <_scanf_float+0xe4>)
 8017e78:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8017e7c:	08017f31 	.word	0x08017f31
 8017e80:	08017dfd 	.word	0x08017dfd
 8017e84:	08017f31 	.word	0x08017f31
 8017e88:	08017fc7 	.word	0x08017fc7
 8017e8c:	08017dfd 	.word	0x08017dfd
 8017e90:	08017ed9 	.word	0x08017ed9
 8017e94:	08017f17 	.word	0x08017f17
 8017e98:	08017f17 	.word	0x08017f17
 8017e9c:	08017f17 	.word	0x08017f17
 8017ea0:	08017f17 	.word	0x08017f17
 8017ea4:	08017f17 	.word	0x08017f17
 8017ea8:	08017f17 	.word	0x08017f17
 8017eac:	08017f17 	.word	0x08017f17
 8017eb0:	08017f17 	.word	0x08017f17
 8017eb4:	08017f17 	.word	0x08017f17
 8017eb8:	2b6e      	cmp	r3, #110	@ 0x6e
 8017eba:	d809      	bhi.n	8017ed0 <_scanf_float+0x138>
 8017ebc:	2b60      	cmp	r3, #96	@ 0x60
 8017ebe:	d8b2      	bhi.n	8017e26 <_scanf_float+0x8e>
 8017ec0:	2b54      	cmp	r3, #84	@ 0x54
 8017ec2:	d07b      	beq.n	8017fbc <_scanf_float+0x224>
 8017ec4:	2b59      	cmp	r3, #89	@ 0x59
 8017ec6:	d199      	bne.n	8017dfc <_scanf_float+0x64>
 8017ec8:	2d07      	cmp	r5, #7
 8017eca:	d197      	bne.n	8017dfc <_scanf_float+0x64>
 8017ecc:	2508      	movs	r5, #8
 8017ece:	e02c      	b.n	8017f2a <_scanf_float+0x192>
 8017ed0:	2b74      	cmp	r3, #116	@ 0x74
 8017ed2:	d073      	beq.n	8017fbc <_scanf_float+0x224>
 8017ed4:	2b79      	cmp	r3, #121	@ 0x79
 8017ed6:	e7f6      	b.n	8017ec6 <_scanf_float+0x12e>
 8017ed8:	6821      	ldr	r1, [r4, #0]
 8017eda:	05c8      	lsls	r0, r1, #23
 8017edc:	d51b      	bpl.n	8017f16 <_scanf_float+0x17e>
 8017ede:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8017ee2:	6021      	str	r1, [r4, #0]
 8017ee4:	f109 0901 	add.w	r9, r9, #1
 8017ee8:	f1bb 0f00 	cmp.w	fp, #0
 8017eec:	d003      	beq.n	8017ef6 <_scanf_float+0x15e>
 8017eee:	3201      	adds	r2, #1
 8017ef0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017ef4:	60a2      	str	r2, [r4, #8]
 8017ef6:	68a3      	ldr	r3, [r4, #8]
 8017ef8:	3b01      	subs	r3, #1
 8017efa:	60a3      	str	r3, [r4, #8]
 8017efc:	6923      	ldr	r3, [r4, #16]
 8017efe:	3301      	adds	r3, #1
 8017f00:	6123      	str	r3, [r4, #16]
 8017f02:	687b      	ldr	r3, [r7, #4]
 8017f04:	3b01      	subs	r3, #1
 8017f06:	2b00      	cmp	r3, #0
 8017f08:	607b      	str	r3, [r7, #4]
 8017f0a:	f340 8087 	ble.w	801801c <_scanf_float+0x284>
 8017f0e:	683b      	ldr	r3, [r7, #0]
 8017f10:	3301      	adds	r3, #1
 8017f12:	603b      	str	r3, [r7, #0]
 8017f14:	e765      	b.n	8017de2 <_scanf_float+0x4a>
 8017f16:	eb1a 0105 	adds.w	r1, sl, r5
 8017f1a:	f47f af6f 	bne.w	8017dfc <_scanf_float+0x64>
 8017f1e:	6822      	ldr	r2, [r4, #0]
 8017f20:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8017f24:	6022      	str	r2, [r4, #0]
 8017f26:	460d      	mov	r5, r1
 8017f28:	468a      	mov	sl, r1
 8017f2a:	f806 3b01 	strb.w	r3, [r6], #1
 8017f2e:	e7e2      	b.n	8017ef6 <_scanf_float+0x15e>
 8017f30:	6822      	ldr	r2, [r4, #0]
 8017f32:	0610      	lsls	r0, r2, #24
 8017f34:	f57f af62 	bpl.w	8017dfc <_scanf_float+0x64>
 8017f38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8017f3c:	6022      	str	r2, [r4, #0]
 8017f3e:	e7f4      	b.n	8017f2a <_scanf_float+0x192>
 8017f40:	f1ba 0f00 	cmp.w	sl, #0
 8017f44:	d10e      	bne.n	8017f64 <_scanf_float+0x1cc>
 8017f46:	f1b9 0f00 	cmp.w	r9, #0
 8017f4a:	d10e      	bne.n	8017f6a <_scanf_float+0x1d2>
 8017f4c:	6822      	ldr	r2, [r4, #0]
 8017f4e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8017f52:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8017f56:	d108      	bne.n	8017f6a <_scanf_float+0x1d2>
 8017f58:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8017f5c:	6022      	str	r2, [r4, #0]
 8017f5e:	f04f 0a01 	mov.w	sl, #1
 8017f62:	e7e2      	b.n	8017f2a <_scanf_float+0x192>
 8017f64:	f1ba 0f02 	cmp.w	sl, #2
 8017f68:	d055      	beq.n	8018016 <_scanf_float+0x27e>
 8017f6a:	2d01      	cmp	r5, #1
 8017f6c:	d002      	beq.n	8017f74 <_scanf_float+0x1dc>
 8017f6e:	2d04      	cmp	r5, #4
 8017f70:	f47f af44 	bne.w	8017dfc <_scanf_float+0x64>
 8017f74:	3501      	adds	r5, #1
 8017f76:	b2ed      	uxtb	r5, r5
 8017f78:	e7d7      	b.n	8017f2a <_scanf_float+0x192>
 8017f7a:	f1ba 0f01 	cmp.w	sl, #1
 8017f7e:	f47f af3d 	bne.w	8017dfc <_scanf_float+0x64>
 8017f82:	f04f 0a02 	mov.w	sl, #2
 8017f86:	e7d0      	b.n	8017f2a <_scanf_float+0x192>
 8017f88:	b97d      	cbnz	r5, 8017faa <_scanf_float+0x212>
 8017f8a:	f1b9 0f00 	cmp.w	r9, #0
 8017f8e:	f47f af38 	bne.w	8017e02 <_scanf_float+0x6a>
 8017f92:	6822      	ldr	r2, [r4, #0]
 8017f94:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8017f98:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8017f9c:	f040 8101 	bne.w	80181a2 <_scanf_float+0x40a>
 8017fa0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8017fa4:	6022      	str	r2, [r4, #0]
 8017fa6:	2501      	movs	r5, #1
 8017fa8:	e7bf      	b.n	8017f2a <_scanf_float+0x192>
 8017faa:	2d03      	cmp	r5, #3
 8017fac:	d0e2      	beq.n	8017f74 <_scanf_float+0x1dc>
 8017fae:	2d05      	cmp	r5, #5
 8017fb0:	e7de      	b.n	8017f70 <_scanf_float+0x1d8>
 8017fb2:	2d02      	cmp	r5, #2
 8017fb4:	f47f af22 	bne.w	8017dfc <_scanf_float+0x64>
 8017fb8:	2503      	movs	r5, #3
 8017fba:	e7b6      	b.n	8017f2a <_scanf_float+0x192>
 8017fbc:	2d06      	cmp	r5, #6
 8017fbe:	f47f af1d 	bne.w	8017dfc <_scanf_float+0x64>
 8017fc2:	2507      	movs	r5, #7
 8017fc4:	e7b1      	b.n	8017f2a <_scanf_float+0x192>
 8017fc6:	6822      	ldr	r2, [r4, #0]
 8017fc8:	0591      	lsls	r1, r2, #22
 8017fca:	f57f af17 	bpl.w	8017dfc <_scanf_float+0x64>
 8017fce:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8017fd2:	6022      	str	r2, [r4, #0]
 8017fd4:	f8cd 9008 	str.w	r9, [sp, #8]
 8017fd8:	e7a7      	b.n	8017f2a <_scanf_float+0x192>
 8017fda:	6822      	ldr	r2, [r4, #0]
 8017fdc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8017fe0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8017fe4:	d006      	beq.n	8017ff4 <_scanf_float+0x25c>
 8017fe6:	0550      	lsls	r0, r2, #21
 8017fe8:	f57f af08 	bpl.w	8017dfc <_scanf_float+0x64>
 8017fec:	f1b9 0f00 	cmp.w	r9, #0
 8017ff0:	f000 80d7 	beq.w	80181a2 <_scanf_float+0x40a>
 8017ff4:	0591      	lsls	r1, r2, #22
 8017ff6:	bf58      	it	pl
 8017ff8:	9902      	ldrpl	r1, [sp, #8]
 8017ffa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8017ffe:	bf58      	it	pl
 8018000:	eba9 0101 	subpl.w	r1, r9, r1
 8018004:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8018008:	bf58      	it	pl
 801800a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801800e:	6022      	str	r2, [r4, #0]
 8018010:	f04f 0900 	mov.w	r9, #0
 8018014:	e789      	b.n	8017f2a <_scanf_float+0x192>
 8018016:	f04f 0a03 	mov.w	sl, #3
 801801a:	e786      	b.n	8017f2a <_scanf_float+0x192>
 801801c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8018020:	4639      	mov	r1, r7
 8018022:	4640      	mov	r0, r8
 8018024:	4798      	blx	r3
 8018026:	2800      	cmp	r0, #0
 8018028:	f43f aedb 	beq.w	8017de2 <_scanf_float+0x4a>
 801802c:	e6e6      	b.n	8017dfc <_scanf_float+0x64>
 801802e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8018032:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8018036:	463a      	mov	r2, r7
 8018038:	4640      	mov	r0, r8
 801803a:	4798      	blx	r3
 801803c:	6923      	ldr	r3, [r4, #16]
 801803e:	3b01      	subs	r3, #1
 8018040:	6123      	str	r3, [r4, #16]
 8018042:	e6e8      	b.n	8017e16 <_scanf_float+0x7e>
 8018044:	1e6b      	subs	r3, r5, #1
 8018046:	2b06      	cmp	r3, #6
 8018048:	d824      	bhi.n	8018094 <_scanf_float+0x2fc>
 801804a:	2d02      	cmp	r5, #2
 801804c:	d836      	bhi.n	80180bc <_scanf_float+0x324>
 801804e:	9b01      	ldr	r3, [sp, #4]
 8018050:	429e      	cmp	r6, r3
 8018052:	f67f aee4 	bls.w	8017e1e <_scanf_float+0x86>
 8018056:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801805a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801805e:	463a      	mov	r2, r7
 8018060:	4640      	mov	r0, r8
 8018062:	4798      	blx	r3
 8018064:	6923      	ldr	r3, [r4, #16]
 8018066:	3b01      	subs	r3, #1
 8018068:	6123      	str	r3, [r4, #16]
 801806a:	e7f0      	b.n	801804e <_scanf_float+0x2b6>
 801806c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8018070:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8018074:	463a      	mov	r2, r7
 8018076:	4640      	mov	r0, r8
 8018078:	4798      	blx	r3
 801807a:	6923      	ldr	r3, [r4, #16]
 801807c:	3b01      	subs	r3, #1
 801807e:	6123      	str	r3, [r4, #16]
 8018080:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018084:	fa5f fa8a 	uxtb.w	sl, sl
 8018088:	f1ba 0f02 	cmp.w	sl, #2
 801808c:	d1ee      	bne.n	801806c <_scanf_float+0x2d4>
 801808e:	3d03      	subs	r5, #3
 8018090:	b2ed      	uxtb	r5, r5
 8018092:	1b76      	subs	r6, r6, r5
 8018094:	6823      	ldr	r3, [r4, #0]
 8018096:	05da      	lsls	r2, r3, #23
 8018098:	d530      	bpl.n	80180fc <_scanf_float+0x364>
 801809a:	055b      	lsls	r3, r3, #21
 801809c:	d511      	bpl.n	80180c2 <_scanf_float+0x32a>
 801809e:	9b01      	ldr	r3, [sp, #4]
 80180a0:	429e      	cmp	r6, r3
 80180a2:	f67f aebc 	bls.w	8017e1e <_scanf_float+0x86>
 80180a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80180aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80180ae:	463a      	mov	r2, r7
 80180b0:	4640      	mov	r0, r8
 80180b2:	4798      	blx	r3
 80180b4:	6923      	ldr	r3, [r4, #16]
 80180b6:	3b01      	subs	r3, #1
 80180b8:	6123      	str	r3, [r4, #16]
 80180ba:	e7f0      	b.n	801809e <_scanf_float+0x306>
 80180bc:	46aa      	mov	sl, r5
 80180be:	46b3      	mov	fp, r6
 80180c0:	e7de      	b.n	8018080 <_scanf_float+0x2e8>
 80180c2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80180c6:	6923      	ldr	r3, [r4, #16]
 80180c8:	2965      	cmp	r1, #101	@ 0x65
 80180ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80180ce:	f106 35ff 	add.w	r5, r6, #4294967295
 80180d2:	6123      	str	r3, [r4, #16]
 80180d4:	d00c      	beq.n	80180f0 <_scanf_float+0x358>
 80180d6:	2945      	cmp	r1, #69	@ 0x45
 80180d8:	d00a      	beq.n	80180f0 <_scanf_float+0x358>
 80180da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80180de:	463a      	mov	r2, r7
 80180e0:	4640      	mov	r0, r8
 80180e2:	4798      	blx	r3
 80180e4:	6923      	ldr	r3, [r4, #16]
 80180e6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80180ea:	3b01      	subs	r3, #1
 80180ec:	1eb5      	subs	r5, r6, #2
 80180ee:	6123      	str	r3, [r4, #16]
 80180f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80180f4:	463a      	mov	r2, r7
 80180f6:	4640      	mov	r0, r8
 80180f8:	4798      	blx	r3
 80180fa:	462e      	mov	r6, r5
 80180fc:	6822      	ldr	r2, [r4, #0]
 80180fe:	f012 0210 	ands.w	r2, r2, #16
 8018102:	d001      	beq.n	8018108 <_scanf_float+0x370>
 8018104:	2000      	movs	r0, #0
 8018106:	e68b      	b.n	8017e20 <_scanf_float+0x88>
 8018108:	7032      	strb	r2, [r6, #0]
 801810a:	6823      	ldr	r3, [r4, #0]
 801810c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8018110:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8018114:	d11a      	bne.n	801814c <_scanf_float+0x3b4>
 8018116:	9b02      	ldr	r3, [sp, #8]
 8018118:	454b      	cmp	r3, r9
 801811a:	eba3 0209 	sub.w	r2, r3, r9
 801811e:	d121      	bne.n	8018164 <_scanf_float+0x3cc>
 8018120:	9901      	ldr	r1, [sp, #4]
 8018122:	2200      	movs	r2, #0
 8018124:	4640      	mov	r0, r8
 8018126:	f7ff f969 	bl	80173fc <_strtod_r>
 801812a:	9b03      	ldr	r3, [sp, #12]
 801812c:	6821      	ldr	r1, [r4, #0]
 801812e:	681b      	ldr	r3, [r3, #0]
 8018130:	f011 0f02 	tst.w	r1, #2
 8018134:	f103 0204 	add.w	r2, r3, #4
 8018138:	d01f      	beq.n	801817a <_scanf_float+0x3e2>
 801813a:	9903      	ldr	r1, [sp, #12]
 801813c:	600a      	str	r2, [r1, #0]
 801813e:	681b      	ldr	r3, [r3, #0]
 8018140:	ed83 0b00 	vstr	d0, [r3]
 8018144:	68e3      	ldr	r3, [r4, #12]
 8018146:	3301      	adds	r3, #1
 8018148:	60e3      	str	r3, [r4, #12]
 801814a:	e7db      	b.n	8018104 <_scanf_float+0x36c>
 801814c:	9b04      	ldr	r3, [sp, #16]
 801814e:	2b00      	cmp	r3, #0
 8018150:	d0e6      	beq.n	8018120 <_scanf_float+0x388>
 8018152:	9905      	ldr	r1, [sp, #20]
 8018154:	230a      	movs	r3, #10
 8018156:	3101      	adds	r1, #1
 8018158:	4640      	mov	r0, r8
 801815a:	f7ff f9db 	bl	8017514 <_strtol_r>
 801815e:	9b04      	ldr	r3, [sp, #16]
 8018160:	9e05      	ldr	r6, [sp, #20]
 8018162:	1ac2      	subs	r2, r0, r3
 8018164:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8018168:	429e      	cmp	r6, r3
 801816a:	bf28      	it	cs
 801816c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8018170:	490d      	ldr	r1, [pc, #52]	@ (80181a8 <_scanf_float+0x410>)
 8018172:	4630      	mov	r0, r6
 8018174:	f000 f970 	bl	8018458 <siprintf>
 8018178:	e7d2      	b.n	8018120 <_scanf_float+0x388>
 801817a:	f011 0f04 	tst.w	r1, #4
 801817e:	9903      	ldr	r1, [sp, #12]
 8018180:	600a      	str	r2, [r1, #0]
 8018182:	d1dc      	bne.n	801813e <_scanf_float+0x3a6>
 8018184:	eeb4 0b40 	vcmp.f64	d0, d0
 8018188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801818c:	681d      	ldr	r5, [r3, #0]
 801818e:	d705      	bvc.n	801819c <_scanf_float+0x404>
 8018190:	4806      	ldr	r0, [pc, #24]	@ (80181ac <_scanf_float+0x414>)
 8018192:	f001 f8e1 	bl	8019358 <nanf>
 8018196:	ed85 0a00 	vstr	s0, [r5]
 801819a:	e7d3      	b.n	8018144 <_scanf_float+0x3ac>
 801819c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80181a0:	e7f9      	b.n	8018196 <_scanf_float+0x3fe>
 80181a2:	f04f 0900 	mov.w	r9, #0
 80181a6:	e630      	b.n	8017e0a <_scanf_float+0x72>
 80181a8:	0801ea3b 	.word	0x0801ea3b
 80181ac:	0801eb91 	.word	0x0801eb91

080181b0 <std>:
 80181b0:	2300      	movs	r3, #0
 80181b2:	b510      	push	{r4, lr}
 80181b4:	4604      	mov	r4, r0
 80181b6:	e9c0 3300 	strd	r3, r3, [r0]
 80181ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80181be:	6083      	str	r3, [r0, #8]
 80181c0:	8181      	strh	r1, [r0, #12]
 80181c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80181c4:	81c2      	strh	r2, [r0, #14]
 80181c6:	6183      	str	r3, [r0, #24]
 80181c8:	4619      	mov	r1, r3
 80181ca:	2208      	movs	r2, #8
 80181cc:	305c      	adds	r0, #92	@ 0x5c
 80181ce:	f000 fa77 	bl	80186c0 <memset>
 80181d2:	4b0d      	ldr	r3, [pc, #52]	@ (8018208 <std+0x58>)
 80181d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80181d6:	4b0d      	ldr	r3, [pc, #52]	@ (801820c <std+0x5c>)
 80181d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80181da:	4b0d      	ldr	r3, [pc, #52]	@ (8018210 <std+0x60>)
 80181dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80181de:	4b0d      	ldr	r3, [pc, #52]	@ (8018214 <std+0x64>)
 80181e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80181e2:	4b0d      	ldr	r3, [pc, #52]	@ (8018218 <std+0x68>)
 80181e4:	6224      	str	r4, [r4, #32]
 80181e6:	429c      	cmp	r4, r3
 80181e8:	d006      	beq.n	80181f8 <std+0x48>
 80181ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80181ee:	4294      	cmp	r4, r2
 80181f0:	d002      	beq.n	80181f8 <std+0x48>
 80181f2:	33d0      	adds	r3, #208	@ 0xd0
 80181f4:	429c      	cmp	r4, r3
 80181f6:	d105      	bne.n	8018204 <std+0x54>
 80181f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80181fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018200:	f001 b884 	b.w	801930c <__retarget_lock_init_recursive>
 8018204:	bd10      	pop	{r4, pc}
 8018206:	bf00      	nop
 8018208:	080184ed 	.word	0x080184ed
 801820c:	08018513 	.word	0x08018513
 8018210:	0801854b 	.word	0x0801854b
 8018214:	0801856f 	.word	0x0801856f
 8018218:	24003d24 	.word	0x24003d24

0801821c <stdio_exit_handler>:
 801821c:	4a02      	ldr	r2, [pc, #8]	@ (8018228 <stdio_exit_handler+0xc>)
 801821e:	4903      	ldr	r1, [pc, #12]	@ (801822c <stdio_exit_handler+0x10>)
 8018220:	4803      	ldr	r0, [pc, #12]	@ (8018230 <stdio_exit_handler+0x14>)
 8018222:	f000 b869 	b.w	80182f8 <_fwalk_sglue>
 8018226:	bf00      	nop
 8018228:	240002b0 	.word	0x240002b0
 801822c:	0801bcf5 	.word	0x0801bcf5
 8018230:	24000434 	.word	0x24000434

08018234 <cleanup_stdio>:
 8018234:	6841      	ldr	r1, [r0, #4]
 8018236:	4b0c      	ldr	r3, [pc, #48]	@ (8018268 <cleanup_stdio+0x34>)
 8018238:	4299      	cmp	r1, r3
 801823a:	b510      	push	{r4, lr}
 801823c:	4604      	mov	r4, r0
 801823e:	d001      	beq.n	8018244 <cleanup_stdio+0x10>
 8018240:	f003 fd58 	bl	801bcf4 <_fflush_r>
 8018244:	68a1      	ldr	r1, [r4, #8]
 8018246:	4b09      	ldr	r3, [pc, #36]	@ (801826c <cleanup_stdio+0x38>)
 8018248:	4299      	cmp	r1, r3
 801824a:	d002      	beq.n	8018252 <cleanup_stdio+0x1e>
 801824c:	4620      	mov	r0, r4
 801824e:	f003 fd51 	bl	801bcf4 <_fflush_r>
 8018252:	68e1      	ldr	r1, [r4, #12]
 8018254:	4b06      	ldr	r3, [pc, #24]	@ (8018270 <cleanup_stdio+0x3c>)
 8018256:	4299      	cmp	r1, r3
 8018258:	d004      	beq.n	8018264 <cleanup_stdio+0x30>
 801825a:	4620      	mov	r0, r4
 801825c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018260:	f003 bd48 	b.w	801bcf4 <_fflush_r>
 8018264:	bd10      	pop	{r4, pc}
 8018266:	bf00      	nop
 8018268:	24003d24 	.word	0x24003d24
 801826c:	24003d8c 	.word	0x24003d8c
 8018270:	24003df4 	.word	0x24003df4

08018274 <global_stdio_init.part.0>:
 8018274:	b510      	push	{r4, lr}
 8018276:	4b0b      	ldr	r3, [pc, #44]	@ (80182a4 <global_stdio_init.part.0+0x30>)
 8018278:	4c0b      	ldr	r4, [pc, #44]	@ (80182a8 <global_stdio_init.part.0+0x34>)
 801827a:	4a0c      	ldr	r2, [pc, #48]	@ (80182ac <global_stdio_init.part.0+0x38>)
 801827c:	601a      	str	r2, [r3, #0]
 801827e:	4620      	mov	r0, r4
 8018280:	2200      	movs	r2, #0
 8018282:	2104      	movs	r1, #4
 8018284:	f7ff ff94 	bl	80181b0 <std>
 8018288:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801828c:	2201      	movs	r2, #1
 801828e:	2109      	movs	r1, #9
 8018290:	f7ff ff8e 	bl	80181b0 <std>
 8018294:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8018298:	2202      	movs	r2, #2
 801829a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801829e:	2112      	movs	r1, #18
 80182a0:	f7ff bf86 	b.w	80181b0 <std>
 80182a4:	24003e5c 	.word	0x24003e5c
 80182a8:	24003d24 	.word	0x24003d24
 80182ac:	0801821d 	.word	0x0801821d

080182b0 <__sfp_lock_acquire>:
 80182b0:	4801      	ldr	r0, [pc, #4]	@ (80182b8 <__sfp_lock_acquire+0x8>)
 80182b2:	f001 b82d 	b.w	8019310 <__retarget_lock_acquire_recursive>
 80182b6:	bf00      	nop
 80182b8:	24003e8b 	.word	0x24003e8b

080182bc <__sfp_lock_release>:
 80182bc:	4801      	ldr	r0, [pc, #4]	@ (80182c4 <__sfp_lock_release+0x8>)
 80182be:	f001 b829 	b.w	8019314 <__retarget_lock_release_recursive>
 80182c2:	bf00      	nop
 80182c4:	24003e8b 	.word	0x24003e8b

080182c8 <__sinit>:
 80182c8:	b510      	push	{r4, lr}
 80182ca:	4604      	mov	r4, r0
 80182cc:	f7ff fff0 	bl	80182b0 <__sfp_lock_acquire>
 80182d0:	6a23      	ldr	r3, [r4, #32]
 80182d2:	b11b      	cbz	r3, 80182dc <__sinit+0x14>
 80182d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80182d8:	f7ff bff0 	b.w	80182bc <__sfp_lock_release>
 80182dc:	4b04      	ldr	r3, [pc, #16]	@ (80182f0 <__sinit+0x28>)
 80182de:	6223      	str	r3, [r4, #32]
 80182e0:	4b04      	ldr	r3, [pc, #16]	@ (80182f4 <__sinit+0x2c>)
 80182e2:	681b      	ldr	r3, [r3, #0]
 80182e4:	2b00      	cmp	r3, #0
 80182e6:	d1f5      	bne.n	80182d4 <__sinit+0xc>
 80182e8:	f7ff ffc4 	bl	8018274 <global_stdio_init.part.0>
 80182ec:	e7f2      	b.n	80182d4 <__sinit+0xc>
 80182ee:	bf00      	nop
 80182f0:	08018235 	.word	0x08018235
 80182f4:	24003e5c 	.word	0x24003e5c

080182f8 <_fwalk_sglue>:
 80182f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80182fc:	4607      	mov	r7, r0
 80182fe:	4688      	mov	r8, r1
 8018300:	4614      	mov	r4, r2
 8018302:	2600      	movs	r6, #0
 8018304:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018308:	f1b9 0901 	subs.w	r9, r9, #1
 801830c:	d505      	bpl.n	801831a <_fwalk_sglue+0x22>
 801830e:	6824      	ldr	r4, [r4, #0]
 8018310:	2c00      	cmp	r4, #0
 8018312:	d1f7      	bne.n	8018304 <_fwalk_sglue+0xc>
 8018314:	4630      	mov	r0, r6
 8018316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801831a:	89ab      	ldrh	r3, [r5, #12]
 801831c:	2b01      	cmp	r3, #1
 801831e:	d907      	bls.n	8018330 <_fwalk_sglue+0x38>
 8018320:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018324:	3301      	adds	r3, #1
 8018326:	d003      	beq.n	8018330 <_fwalk_sglue+0x38>
 8018328:	4629      	mov	r1, r5
 801832a:	4638      	mov	r0, r7
 801832c:	47c0      	blx	r8
 801832e:	4306      	orrs	r6, r0
 8018330:	3568      	adds	r5, #104	@ 0x68
 8018332:	e7e9      	b.n	8018308 <_fwalk_sglue+0x10>

08018334 <_puts_r>:
 8018334:	6a03      	ldr	r3, [r0, #32]
 8018336:	b570      	push	{r4, r5, r6, lr}
 8018338:	6884      	ldr	r4, [r0, #8]
 801833a:	4605      	mov	r5, r0
 801833c:	460e      	mov	r6, r1
 801833e:	b90b      	cbnz	r3, 8018344 <_puts_r+0x10>
 8018340:	f7ff ffc2 	bl	80182c8 <__sinit>
 8018344:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018346:	07db      	lsls	r3, r3, #31
 8018348:	d405      	bmi.n	8018356 <_puts_r+0x22>
 801834a:	89a3      	ldrh	r3, [r4, #12]
 801834c:	0598      	lsls	r0, r3, #22
 801834e:	d402      	bmi.n	8018356 <_puts_r+0x22>
 8018350:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018352:	f000 ffdd 	bl	8019310 <__retarget_lock_acquire_recursive>
 8018356:	89a3      	ldrh	r3, [r4, #12]
 8018358:	0719      	lsls	r1, r3, #28
 801835a:	d502      	bpl.n	8018362 <_puts_r+0x2e>
 801835c:	6923      	ldr	r3, [r4, #16]
 801835e:	2b00      	cmp	r3, #0
 8018360:	d135      	bne.n	80183ce <_puts_r+0x9a>
 8018362:	4621      	mov	r1, r4
 8018364:	4628      	mov	r0, r5
 8018366:	f000 f945 	bl	80185f4 <__swsetup_r>
 801836a:	b380      	cbz	r0, 80183ce <_puts_r+0x9a>
 801836c:	f04f 35ff 	mov.w	r5, #4294967295
 8018370:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018372:	07da      	lsls	r2, r3, #31
 8018374:	d405      	bmi.n	8018382 <_puts_r+0x4e>
 8018376:	89a3      	ldrh	r3, [r4, #12]
 8018378:	059b      	lsls	r3, r3, #22
 801837a:	d402      	bmi.n	8018382 <_puts_r+0x4e>
 801837c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801837e:	f000 ffc9 	bl	8019314 <__retarget_lock_release_recursive>
 8018382:	4628      	mov	r0, r5
 8018384:	bd70      	pop	{r4, r5, r6, pc}
 8018386:	2b00      	cmp	r3, #0
 8018388:	da04      	bge.n	8018394 <_puts_r+0x60>
 801838a:	69a2      	ldr	r2, [r4, #24]
 801838c:	429a      	cmp	r2, r3
 801838e:	dc17      	bgt.n	80183c0 <_puts_r+0x8c>
 8018390:	290a      	cmp	r1, #10
 8018392:	d015      	beq.n	80183c0 <_puts_r+0x8c>
 8018394:	6823      	ldr	r3, [r4, #0]
 8018396:	1c5a      	adds	r2, r3, #1
 8018398:	6022      	str	r2, [r4, #0]
 801839a:	7019      	strb	r1, [r3, #0]
 801839c:	68a3      	ldr	r3, [r4, #8]
 801839e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80183a2:	3b01      	subs	r3, #1
 80183a4:	60a3      	str	r3, [r4, #8]
 80183a6:	2900      	cmp	r1, #0
 80183a8:	d1ed      	bne.n	8018386 <_puts_r+0x52>
 80183aa:	2b00      	cmp	r3, #0
 80183ac:	da11      	bge.n	80183d2 <_puts_r+0x9e>
 80183ae:	4622      	mov	r2, r4
 80183b0:	210a      	movs	r1, #10
 80183b2:	4628      	mov	r0, r5
 80183b4:	f000 f8df 	bl	8018576 <__swbuf_r>
 80183b8:	3001      	adds	r0, #1
 80183ba:	d0d7      	beq.n	801836c <_puts_r+0x38>
 80183bc:	250a      	movs	r5, #10
 80183be:	e7d7      	b.n	8018370 <_puts_r+0x3c>
 80183c0:	4622      	mov	r2, r4
 80183c2:	4628      	mov	r0, r5
 80183c4:	f000 f8d7 	bl	8018576 <__swbuf_r>
 80183c8:	3001      	adds	r0, #1
 80183ca:	d1e7      	bne.n	801839c <_puts_r+0x68>
 80183cc:	e7ce      	b.n	801836c <_puts_r+0x38>
 80183ce:	3e01      	subs	r6, #1
 80183d0:	e7e4      	b.n	801839c <_puts_r+0x68>
 80183d2:	6823      	ldr	r3, [r4, #0]
 80183d4:	1c5a      	adds	r2, r3, #1
 80183d6:	6022      	str	r2, [r4, #0]
 80183d8:	220a      	movs	r2, #10
 80183da:	701a      	strb	r2, [r3, #0]
 80183dc:	e7ee      	b.n	80183bc <_puts_r+0x88>
	...

080183e0 <puts>:
 80183e0:	4b02      	ldr	r3, [pc, #8]	@ (80183ec <puts+0xc>)
 80183e2:	4601      	mov	r1, r0
 80183e4:	6818      	ldr	r0, [r3, #0]
 80183e6:	f7ff bfa5 	b.w	8018334 <_puts_r>
 80183ea:	bf00      	nop
 80183ec:	24000430 	.word	0x24000430

080183f0 <sniprintf>:
 80183f0:	b40c      	push	{r2, r3}
 80183f2:	b530      	push	{r4, r5, lr}
 80183f4:	4b17      	ldr	r3, [pc, #92]	@ (8018454 <sniprintf+0x64>)
 80183f6:	1e0c      	subs	r4, r1, #0
 80183f8:	681d      	ldr	r5, [r3, #0]
 80183fa:	b09d      	sub	sp, #116	@ 0x74
 80183fc:	da08      	bge.n	8018410 <sniprintf+0x20>
 80183fe:	238b      	movs	r3, #139	@ 0x8b
 8018400:	602b      	str	r3, [r5, #0]
 8018402:	f04f 30ff 	mov.w	r0, #4294967295
 8018406:	b01d      	add	sp, #116	@ 0x74
 8018408:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801840c:	b002      	add	sp, #8
 801840e:	4770      	bx	lr
 8018410:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8018414:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018418:	bf14      	ite	ne
 801841a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801841e:	4623      	moveq	r3, r4
 8018420:	9304      	str	r3, [sp, #16]
 8018422:	9307      	str	r3, [sp, #28]
 8018424:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018428:	9002      	str	r0, [sp, #8]
 801842a:	9006      	str	r0, [sp, #24]
 801842c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018430:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8018432:	ab21      	add	r3, sp, #132	@ 0x84
 8018434:	a902      	add	r1, sp, #8
 8018436:	4628      	mov	r0, r5
 8018438:	9301      	str	r3, [sp, #4]
 801843a:	f002 ffc1 	bl	801b3c0 <_svfiprintf_r>
 801843e:	1c43      	adds	r3, r0, #1
 8018440:	bfbc      	itt	lt
 8018442:	238b      	movlt	r3, #139	@ 0x8b
 8018444:	602b      	strlt	r3, [r5, #0]
 8018446:	2c00      	cmp	r4, #0
 8018448:	d0dd      	beq.n	8018406 <sniprintf+0x16>
 801844a:	9b02      	ldr	r3, [sp, #8]
 801844c:	2200      	movs	r2, #0
 801844e:	701a      	strb	r2, [r3, #0]
 8018450:	e7d9      	b.n	8018406 <sniprintf+0x16>
 8018452:	bf00      	nop
 8018454:	24000430 	.word	0x24000430

08018458 <siprintf>:
 8018458:	b40e      	push	{r1, r2, r3}
 801845a:	b500      	push	{lr}
 801845c:	b09c      	sub	sp, #112	@ 0x70
 801845e:	ab1d      	add	r3, sp, #116	@ 0x74
 8018460:	9002      	str	r0, [sp, #8]
 8018462:	9006      	str	r0, [sp, #24]
 8018464:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8018468:	4809      	ldr	r0, [pc, #36]	@ (8018490 <siprintf+0x38>)
 801846a:	9107      	str	r1, [sp, #28]
 801846c:	9104      	str	r1, [sp, #16]
 801846e:	4909      	ldr	r1, [pc, #36]	@ (8018494 <siprintf+0x3c>)
 8018470:	f853 2b04 	ldr.w	r2, [r3], #4
 8018474:	9105      	str	r1, [sp, #20]
 8018476:	6800      	ldr	r0, [r0, #0]
 8018478:	9301      	str	r3, [sp, #4]
 801847a:	a902      	add	r1, sp, #8
 801847c:	f002 ffa0 	bl	801b3c0 <_svfiprintf_r>
 8018480:	9b02      	ldr	r3, [sp, #8]
 8018482:	2200      	movs	r2, #0
 8018484:	701a      	strb	r2, [r3, #0]
 8018486:	b01c      	add	sp, #112	@ 0x70
 8018488:	f85d eb04 	ldr.w	lr, [sp], #4
 801848c:	b003      	add	sp, #12
 801848e:	4770      	bx	lr
 8018490:	24000430 	.word	0x24000430
 8018494:	ffff0208 	.word	0xffff0208

08018498 <siscanf>:
 8018498:	b40e      	push	{r1, r2, r3}
 801849a:	b530      	push	{r4, r5, lr}
 801849c:	b09c      	sub	sp, #112	@ 0x70
 801849e:	ac1f      	add	r4, sp, #124	@ 0x7c
 80184a0:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80184a4:	f854 5b04 	ldr.w	r5, [r4], #4
 80184a8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80184ac:	9002      	str	r0, [sp, #8]
 80184ae:	9006      	str	r0, [sp, #24]
 80184b0:	f7e7 ff76 	bl	80003a0 <strlen>
 80184b4:	4b0b      	ldr	r3, [pc, #44]	@ (80184e4 <siscanf+0x4c>)
 80184b6:	9003      	str	r0, [sp, #12]
 80184b8:	9007      	str	r0, [sp, #28]
 80184ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80184bc:	480a      	ldr	r0, [pc, #40]	@ (80184e8 <siscanf+0x50>)
 80184be:	9401      	str	r4, [sp, #4]
 80184c0:	2300      	movs	r3, #0
 80184c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80184c4:	9314      	str	r3, [sp, #80]	@ 0x50
 80184c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80184ca:	f8ad 3016 	strh.w	r3, [sp, #22]
 80184ce:	462a      	mov	r2, r5
 80184d0:	4623      	mov	r3, r4
 80184d2:	a902      	add	r1, sp, #8
 80184d4:	6800      	ldr	r0, [r0, #0]
 80184d6:	f003 f8c7 	bl	801b668 <__ssvfiscanf_r>
 80184da:	b01c      	add	sp, #112	@ 0x70
 80184dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80184e0:	b003      	add	sp, #12
 80184e2:	4770      	bx	lr
 80184e4:	0801850f 	.word	0x0801850f
 80184e8:	24000430 	.word	0x24000430

080184ec <__sread>:
 80184ec:	b510      	push	{r4, lr}
 80184ee:	460c      	mov	r4, r1
 80184f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80184f4:	f000 febc 	bl	8019270 <_read_r>
 80184f8:	2800      	cmp	r0, #0
 80184fa:	bfab      	itete	ge
 80184fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80184fe:	89a3      	ldrhlt	r3, [r4, #12]
 8018500:	181b      	addge	r3, r3, r0
 8018502:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8018506:	bfac      	ite	ge
 8018508:	6563      	strge	r3, [r4, #84]	@ 0x54
 801850a:	81a3      	strhlt	r3, [r4, #12]
 801850c:	bd10      	pop	{r4, pc}

0801850e <__seofread>:
 801850e:	2000      	movs	r0, #0
 8018510:	4770      	bx	lr

08018512 <__swrite>:
 8018512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018516:	461f      	mov	r7, r3
 8018518:	898b      	ldrh	r3, [r1, #12]
 801851a:	05db      	lsls	r3, r3, #23
 801851c:	4605      	mov	r5, r0
 801851e:	460c      	mov	r4, r1
 8018520:	4616      	mov	r6, r2
 8018522:	d505      	bpl.n	8018530 <__swrite+0x1e>
 8018524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018528:	2302      	movs	r3, #2
 801852a:	2200      	movs	r2, #0
 801852c:	f000 fe8e 	bl	801924c <_lseek_r>
 8018530:	89a3      	ldrh	r3, [r4, #12]
 8018532:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018536:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801853a:	81a3      	strh	r3, [r4, #12]
 801853c:	4632      	mov	r2, r6
 801853e:	463b      	mov	r3, r7
 8018540:	4628      	mov	r0, r5
 8018542:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018546:	f000 bea5 	b.w	8019294 <_write_r>

0801854a <__sseek>:
 801854a:	b510      	push	{r4, lr}
 801854c:	460c      	mov	r4, r1
 801854e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018552:	f000 fe7b 	bl	801924c <_lseek_r>
 8018556:	1c43      	adds	r3, r0, #1
 8018558:	89a3      	ldrh	r3, [r4, #12]
 801855a:	bf15      	itete	ne
 801855c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801855e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8018562:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8018566:	81a3      	strheq	r3, [r4, #12]
 8018568:	bf18      	it	ne
 801856a:	81a3      	strhne	r3, [r4, #12]
 801856c:	bd10      	pop	{r4, pc}

0801856e <__sclose>:
 801856e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018572:	f000 be5b 	b.w	801922c <_close_r>

08018576 <__swbuf_r>:
 8018576:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018578:	460e      	mov	r6, r1
 801857a:	4614      	mov	r4, r2
 801857c:	4605      	mov	r5, r0
 801857e:	b118      	cbz	r0, 8018588 <__swbuf_r+0x12>
 8018580:	6a03      	ldr	r3, [r0, #32]
 8018582:	b90b      	cbnz	r3, 8018588 <__swbuf_r+0x12>
 8018584:	f7ff fea0 	bl	80182c8 <__sinit>
 8018588:	69a3      	ldr	r3, [r4, #24]
 801858a:	60a3      	str	r3, [r4, #8]
 801858c:	89a3      	ldrh	r3, [r4, #12]
 801858e:	071a      	lsls	r2, r3, #28
 8018590:	d501      	bpl.n	8018596 <__swbuf_r+0x20>
 8018592:	6923      	ldr	r3, [r4, #16]
 8018594:	b943      	cbnz	r3, 80185a8 <__swbuf_r+0x32>
 8018596:	4621      	mov	r1, r4
 8018598:	4628      	mov	r0, r5
 801859a:	f000 f82b 	bl	80185f4 <__swsetup_r>
 801859e:	b118      	cbz	r0, 80185a8 <__swbuf_r+0x32>
 80185a0:	f04f 37ff 	mov.w	r7, #4294967295
 80185a4:	4638      	mov	r0, r7
 80185a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80185a8:	6823      	ldr	r3, [r4, #0]
 80185aa:	6922      	ldr	r2, [r4, #16]
 80185ac:	1a98      	subs	r0, r3, r2
 80185ae:	6963      	ldr	r3, [r4, #20]
 80185b0:	b2f6      	uxtb	r6, r6
 80185b2:	4283      	cmp	r3, r0
 80185b4:	4637      	mov	r7, r6
 80185b6:	dc05      	bgt.n	80185c4 <__swbuf_r+0x4e>
 80185b8:	4621      	mov	r1, r4
 80185ba:	4628      	mov	r0, r5
 80185bc:	f003 fb9a 	bl	801bcf4 <_fflush_r>
 80185c0:	2800      	cmp	r0, #0
 80185c2:	d1ed      	bne.n	80185a0 <__swbuf_r+0x2a>
 80185c4:	68a3      	ldr	r3, [r4, #8]
 80185c6:	3b01      	subs	r3, #1
 80185c8:	60a3      	str	r3, [r4, #8]
 80185ca:	6823      	ldr	r3, [r4, #0]
 80185cc:	1c5a      	adds	r2, r3, #1
 80185ce:	6022      	str	r2, [r4, #0]
 80185d0:	701e      	strb	r6, [r3, #0]
 80185d2:	6962      	ldr	r2, [r4, #20]
 80185d4:	1c43      	adds	r3, r0, #1
 80185d6:	429a      	cmp	r2, r3
 80185d8:	d004      	beq.n	80185e4 <__swbuf_r+0x6e>
 80185da:	89a3      	ldrh	r3, [r4, #12]
 80185dc:	07db      	lsls	r3, r3, #31
 80185de:	d5e1      	bpl.n	80185a4 <__swbuf_r+0x2e>
 80185e0:	2e0a      	cmp	r6, #10
 80185e2:	d1df      	bne.n	80185a4 <__swbuf_r+0x2e>
 80185e4:	4621      	mov	r1, r4
 80185e6:	4628      	mov	r0, r5
 80185e8:	f003 fb84 	bl	801bcf4 <_fflush_r>
 80185ec:	2800      	cmp	r0, #0
 80185ee:	d0d9      	beq.n	80185a4 <__swbuf_r+0x2e>
 80185f0:	e7d6      	b.n	80185a0 <__swbuf_r+0x2a>
	...

080185f4 <__swsetup_r>:
 80185f4:	b538      	push	{r3, r4, r5, lr}
 80185f6:	4b29      	ldr	r3, [pc, #164]	@ (801869c <__swsetup_r+0xa8>)
 80185f8:	4605      	mov	r5, r0
 80185fa:	6818      	ldr	r0, [r3, #0]
 80185fc:	460c      	mov	r4, r1
 80185fe:	b118      	cbz	r0, 8018608 <__swsetup_r+0x14>
 8018600:	6a03      	ldr	r3, [r0, #32]
 8018602:	b90b      	cbnz	r3, 8018608 <__swsetup_r+0x14>
 8018604:	f7ff fe60 	bl	80182c8 <__sinit>
 8018608:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801860c:	0719      	lsls	r1, r3, #28
 801860e:	d422      	bmi.n	8018656 <__swsetup_r+0x62>
 8018610:	06da      	lsls	r2, r3, #27
 8018612:	d407      	bmi.n	8018624 <__swsetup_r+0x30>
 8018614:	2209      	movs	r2, #9
 8018616:	602a      	str	r2, [r5, #0]
 8018618:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801861c:	81a3      	strh	r3, [r4, #12]
 801861e:	f04f 30ff 	mov.w	r0, #4294967295
 8018622:	e033      	b.n	801868c <__swsetup_r+0x98>
 8018624:	0758      	lsls	r0, r3, #29
 8018626:	d512      	bpl.n	801864e <__swsetup_r+0x5a>
 8018628:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801862a:	b141      	cbz	r1, 801863e <__swsetup_r+0x4a>
 801862c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018630:	4299      	cmp	r1, r3
 8018632:	d002      	beq.n	801863a <__swsetup_r+0x46>
 8018634:	4628      	mov	r0, r5
 8018636:	f001 fc99 	bl	8019f6c <_free_r>
 801863a:	2300      	movs	r3, #0
 801863c:	6363      	str	r3, [r4, #52]	@ 0x34
 801863e:	89a3      	ldrh	r3, [r4, #12]
 8018640:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018644:	81a3      	strh	r3, [r4, #12]
 8018646:	2300      	movs	r3, #0
 8018648:	6063      	str	r3, [r4, #4]
 801864a:	6923      	ldr	r3, [r4, #16]
 801864c:	6023      	str	r3, [r4, #0]
 801864e:	89a3      	ldrh	r3, [r4, #12]
 8018650:	f043 0308 	orr.w	r3, r3, #8
 8018654:	81a3      	strh	r3, [r4, #12]
 8018656:	6923      	ldr	r3, [r4, #16]
 8018658:	b94b      	cbnz	r3, 801866e <__swsetup_r+0x7a>
 801865a:	89a3      	ldrh	r3, [r4, #12]
 801865c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018660:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018664:	d003      	beq.n	801866e <__swsetup_r+0x7a>
 8018666:	4621      	mov	r1, r4
 8018668:	4628      	mov	r0, r5
 801866a:	f003 fba3 	bl	801bdb4 <__smakebuf_r>
 801866e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018672:	f013 0201 	ands.w	r2, r3, #1
 8018676:	d00a      	beq.n	801868e <__swsetup_r+0x9a>
 8018678:	2200      	movs	r2, #0
 801867a:	60a2      	str	r2, [r4, #8]
 801867c:	6962      	ldr	r2, [r4, #20]
 801867e:	4252      	negs	r2, r2
 8018680:	61a2      	str	r2, [r4, #24]
 8018682:	6922      	ldr	r2, [r4, #16]
 8018684:	b942      	cbnz	r2, 8018698 <__swsetup_r+0xa4>
 8018686:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801868a:	d1c5      	bne.n	8018618 <__swsetup_r+0x24>
 801868c:	bd38      	pop	{r3, r4, r5, pc}
 801868e:	0799      	lsls	r1, r3, #30
 8018690:	bf58      	it	pl
 8018692:	6962      	ldrpl	r2, [r4, #20]
 8018694:	60a2      	str	r2, [r4, #8]
 8018696:	e7f4      	b.n	8018682 <__swsetup_r+0x8e>
 8018698:	2000      	movs	r0, #0
 801869a:	e7f7      	b.n	801868c <__swsetup_r+0x98>
 801869c:	24000430 	.word	0x24000430

080186a0 <memcmp>:
 80186a0:	b510      	push	{r4, lr}
 80186a2:	3901      	subs	r1, #1
 80186a4:	4402      	add	r2, r0
 80186a6:	4290      	cmp	r0, r2
 80186a8:	d101      	bne.n	80186ae <memcmp+0xe>
 80186aa:	2000      	movs	r0, #0
 80186ac:	e005      	b.n	80186ba <memcmp+0x1a>
 80186ae:	7803      	ldrb	r3, [r0, #0]
 80186b0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80186b4:	42a3      	cmp	r3, r4
 80186b6:	d001      	beq.n	80186bc <memcmp+0x1c>
 80186b8:	1b18      	subs	r0, r3, r4
 80186ba:	bd10      	pop	{r4, pc}
 80186bc:	3001      	adds	r0, #1
 80186be:	e7f2      	b.n	80186a6 <memcmp+0x6>

080186c0 <memset>:
 80186c0:	4402      	add	r2, r0
 80186c2:	4603      	mov	r3, r0
 80186c4:	4293      	cmp	r3, r2
 80186c6:	d100      	bne.n	80186ca <memset+0xa>
 80186c8:	4770      	bx	lr
 80186ca:	f803 1b01 	strb.w	r1, [r3], #1
 80186ce:	e7f9      	b.n	80186c4 <memset+0x4>

080186d0 <strchr>:
 80186d0:	b2c9      	uxtb	r1, r1
 80186d2:	4603      	mov	r3, r0
 80186d4:	4618      	mov	r0, r3
 80186d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80186da:	b112      	cbz	r2, 80186e2 <strchr+0x12>
 80186dc:	428a      	cmp	r2, r1
 80186de:	d1f9      	bne.n	80186d4 <strchr+0x4>
 80186e0:	4770      	bx	lr
 80186e2:	2900      	cmp	r1, #0
 80186e4:	bf18      	it	ne
 80186e6:	2000      	movne	r0, #0
 80186e8:	4770      	bx	lr

080186ea <strncmp>:
 80186ea:	b510      	push	{r4, lr}
 80186ec:	b16a      	cbz	r2, 801870a <strncmp+0x20>
 80186ee:	3901      	subs	r1, #1
 80186f0:	1884      	adds	r4, r0, r2
 80186f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80186f6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80186fa:	429a      	cmp	r2, r3
 80186fc:	d103      	bne.n	8018706 <strncmp+0x1c>
 80186fe:	42a0      	cmp	r0, r4
 8018700:	d001      	beq.n	8018706 <strncmp+0x1c>
 8018702:	2a00      	cmp	r2, #0
 8018704:	d1f5      	bne.n	80186f2 <strncmp+0x8>
 8018706:	1ad0      	subs	r0, r2, r3
 8018708:	bd10      	pop	{r4, pc}
 801870a:	4610      	mov	r0, r2
 801870c:	e7fc      	b.n	8018708 <strncmp+0x1e>

0801870e <strncpy>:
 801870e:	b510      	push	{r4, lr}
 8018710:	3901      	subs	r1, #1
 8018712:	4603      	mov	r3, r0
 8018714:	b132      	cbz	r2, 8018724 <strncpy+0x16>
 8018716:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801871a:	f803 4b01 	strb.w	r4, [r3], #1
 801871e:	3a01      	subs	r2, #1
 8018720:	2c00      	cmp	r4, #0
 8018722:	d1f7      	bne.n	8018714 <strncpy+0x6>
 8018724:	441a      	add	r2, r3
 8018726:	2100      	movs	r1, #0
 8018728:	4293      	cmp	r3, r2
 801872a:	d100      	bne.n	801872e <strncpy+0x20>
 801872c:	bd10      	pop	{r4, pc}
 801872e:	f803 1b01 	strb.w	r1, [r3], #1
 8018732:	e7f9      	b.n	8018728 <strncpy+0x1a>

08018734 <strstr>:
 8018734:	780a      	ldrb	r2, [r1, #0]
 8018736:	b570      	push	{r4, r5, r6, lr}
 8018738:	b96a      	cbnz	r2, 8018756 <strstr+0x22>
 801873a:	bd70      	pop	{r4, r5, r6, pc}
 801873c:	429a      	cmp	r2, r3
 801873e:	d109      	bne.n	8018754 <strstr+0x20>
 8018740:	460c      	mov	r4, r1
 8018742:	4605      	mov	r5, r0
 8018744:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8018748:	2b00      	cmp	r3, #0
 801874a:	d0f6      	beq.n	801873a <strstr+0x6>
 801874c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8018750:	429e      	cmp	r6, r3
 8018752:	d0f7      	beq.n	8018744 <strstr+0x10>
 8018754:	3001      	adds	r0, #1
 8018756:	7803      	ldrb	r3, [r0, #0]
 8018758:	2b00      	cmp	r3, #0
 801875a:	d1ef      	bne.n	801873c <strstr+0x8>
 801875c:	4618      	mov	r0, r3
 801875e:	e7ec      	b.n	801873a <strstr+0x6>

08018760 <validate_structure>:
 8018760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018762:	6801      	ldr	r1, [r0, #0]
 8018764:	293b      	cmp	r1, #59	@ 0x3b
 8018766:	4604      	mov	r4, r0
 8018768:	d911      	bls.n	801878e <validate_structure+0x2e>
 801876a:	223c      	movs	r2, #60	@ 0x3c
 801876c:	4668      	mov	r0, sp
 801876e:	f000 fe17 	bl	80193a0 <div>
 8018772:	9a01      	ldr	r2, [sp, #4]
 8018774:	6863      	ldr	r3, [r4, #4]
 8018776:	9900      	ldr	r1, [sp, #0]
 8018778:	2a00      	cmp	r2, #0
 801877a:	440b      	add	r3, r1
 801877c:	6063      	str	r3, [r4, #4]
 801877e:	bfbb      	ittet	lt
 8018780:	323c      	addlt	r2, #60	@ 0x3c
 8018782:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8018786:	6022      	strge	r2, [r4, #0]
 8018788:	6022      	strlt	r2, [r4, #0]
 801878a:	bfb8      	it	lt
 801878c:	6063      	strlt	r3, [r4, #4]
 801878e:	6861      	ldr	r1, [r4, #4]
 8018790:	293b      	cmp	r1, #59	@ 0x3b
 8018792:	d911      	bls.n	80187b8 <validate_structure+0x58>
 8018794:	223c      	movs	r2, #60	@ 0x3c
 8018796:	4668      	mov	r0, sp
 8018798:	f000 fe02 	bl	80193a0 <div>
 801879c:	9a01      	ldr	r2, [sp, #4]
 801879e:	68a3      	ldr	r3, [r4, #8]
 80187a0:	9900      	ldr	r1, [sp, #0]
 80187a2:	2a00      	cmp	r2, #0
 80187a4:	440b      	add	r3, r1
 80187a6:	60a3      	str	r3, [r4, #8]
 80187a8:	bfbb      	ittet	lt
 80187aa:	323c      	addlt	r2, #60	@ 0x3c
 80187ac:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80187b0:	6062      	strge	r2, [r4, #4]
 80187b2:	6062      	strlt	r2, [r4, #4]
 80187b4:	bfb8      	it	lt
 80187b6:	60a3      	strlt	r3, [r4, #8]
 80187b8:	68a1      	ldr	r1, [r4, #8]
 80187ba:	2917      	cmp	r1, #23
 80187bc:	d911      	bls.n	80187e2 <validate_structure+0x82>
 80187be:	2218      	movs	r2, #24
 80187c0:	4668      	mov	r0, sp
 80187c2:	f000 fded 	bl	80193a0 <div>
 80187c6:	9a01      	ldr	r2, [sp, #4]
 80187c8:	68e3      	ldr	r3, [r4, #12]
 80187ca:	9900      	ldr	r1, [sp, #0]
 80187cc:	2a00      	cmp	r2, #0
 80187ce:	440b      	add	r3, r1
 80187d0:	60e3      	str	r3, [r4, #12]
 80187d2:	bfbb      	ittet	lt
 80187d4:	3218      	addlt	r2, #24
 80187d6:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80187da:	60a2      	strge	r2, [r4, #8]
 80187dc:	60a2      	strlt	r2, [r4, #8]
 80187de:	bfb8      	it	lt
 80187e0:	60e3      	strlt	r3, [r4, #12]
 80187e2:	6921      	ldr	r1, [r4, #16]
 80187e4:	290b      	cmp	r1, #11
 80187e6:	d911      	bls.n	801880c <validate_structure+0xac>
 80187e8:	220c      	movs	r2, #12
 80187ea:	4668      	mov	r0, sp
 80187ec:	f000 fdd8 	bl	80193a0 <div>
 80187f0:	9a01      	ldr	r2, [sp, #4]
 80187f2:	6963      	ldr	r3, [r4, #20]
 80187f4:	9900      	ldr	r1, [sp, #0]
 80187f6:	2a00      	cmp	r2, #0
 80187f8:	440b      	add	r3, r1
 80187fa:	6163      	str	r3, [r4, #20]
 80187fc:	bfbb      	ittet	lt
 80187fe:	320c      	addlt	r2, #12
 8018800:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8018804:	6122      	strge	r2, [r4, #16]
 8018806:	6122      	strlt	r2, [r4, #16]
 8018808:	bfb8      	it	lt
 801880a:	6163      	strlt	r3, [r4, #20]
 801880c:	6963      	ldr	r3, [r4, #20]
 801880e:	079a      	lsls	r2, r3, #30
 8018810:	d11c      	bne.n	801884c <validate_structure+0xec>
 8018812:	2164      	movs	r1, #100	@ 0x64
 8018814:	fb93 f2f1 	sdiv	r2, r3, r1
 8018818:	fb01 3212 	mls	r2, r1, r2, r3
 801881c:	b9c2      	cbnz	r2, 8018850 <validate_structure+0xf0>
 801881e:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 8018822:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8018826:	fb93 f1f2 	sdiv	r1, r3, r2
 801882a:	fb02 3311 	mls	r3, r2, r1, r3
 801882e:	2b00      	cmp	r3, #0
 8018830:	bf14      	ite	ne
 8018832:	231c      	movne	r3, #28
 8018834:	231d      	moveq	r3, #29
 8018836:	68e2      	ldr	r2, [r4, #12]
 8018838:	2a00      	cmp	r2, #0
 801883a:	dc0b      	bgt.n	8018854 <validate_structure+0xf4>
 801883c:	4d31      	ldr	r5, [pc, #196]	@ (8018904 <validate_structure+0x1a4>)
 801883e:	200b      	movs	r0, #11
 8018840:	2164      	movs	r1, #100	@ 0x64
 8018842:	68e6      	ldr	r6, [r4, #12]
 8018844:	2e00      	cmp	r6, #0
 8018846:	dd30      	ble.n	80188aa <validate_structure+0x14a>
 8018848:	b003      	add	sp, #12
 801884a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801884c:	231c      	movs	r3, #28
 801884e:	e7f2      	b.n	8018836 <validate_structure+0xd6>
 8018850:	231d      	movs	r3, #29
 8018852:	e7f0      	b.n	8018836 <validate_structure+0xd6>
 8018854:	4d2b      	ldr	r5, [pc, #172]	@ (8018904 <validate_structure+0x1a4>)
 8018856:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 801885a:	2a01      	cmp	r2, #1
 801885c:	bf14      	ite	ne
 801885e:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 8018862:	4618      	moveq	r0, r3
 8018864:	4281      	cmp	r1, r0
 8018866:	ddef      	ble.n	8018848 <validate_structure+0xe8>
 8018868:	3201      	adds	r2, #1
 801886a:	1a09      	subs	r1, r1, r0
 801886c:	2a0c      	cmp	r2, #12
 801886e:	60e1      	str	r1, [r4, #12]
 8018870:	6122      	str	r2, [r4, #16]
 8018872:	d1f0      	bne.n	8018856 <validate_structure+0xf6>
 8018874:	6963      	ldr	r3, [r4, #20]
 8018876:	2100      	movs	r1, #0
 8018878:	1c5a      	adds	r2, r3, #1
 801887a:	6121      	str	r1, [r4, #16]
 801887c:	0791      	lsls	r1, r2, #30
 801887e:	6162      	str	r2, [r4, #20]
 8018880:	d13c      	bne.n	80188fc <validate_structure+0x19c>
 8018882:	2164      	movs	r1, #100	@ 0x64
 8018884:	fb92 f0f1 	sdiv	r0, r2, r1
 8018888:	fb01 2210 	mls	r2, r1, r0, r2
 801888c:	2a00      	cmp	r2, #0
 801888e:	d137      	bne.n	8018900 <validate_structure+0x1a0>
 8018890:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 8018894:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8018898:	fb93 f1f2 	sdiv	r1, r3, r2
 801889c:	fb02 3311 	mls	r3, r2, r1, r3
 80188a0:	2b00      	cmp	r3, #0
 80188a2:	bf14      	ite	ne
 80188a4:	231c      	movne	r3, #28
 80188a6:	231d      	moveq	r3, #29
 80188a8:	e7d5      	b.n	8018856 <validate_structure+0xf6>
 80188aa:	6922      	ldr	r2, [r4, #16]
 80188ac:	3a01      	subs	r2, #1
 80188ae:	6122      	str	r2, [r4, #16]
 80188b0:	3201      	adds	r2, #1
 80188b2:	d116      	bne.n	80188e2 <validate_structure+0x182>
 80188b4:	6963      	ldr	r3, [r4, #20]
 80188b6:	1e5a      	subs	r2, r3, #1
 80188b8:	0797      	lsls	r7, r2, #30
 80188ba:	e9c4 0204 	strd	r0, r2, [r4, #16]
 80188be:	d119      	bne.n	80188f4 <validate_structure+0x194>
 80188c0:	fb92 f7f1 	sdiv	r7, r2, r1
 80188c4:	fb01 2217 	mls	r2, r1, r7, r2
 80188c8:	b9b2      	cbnz	r2, 80188f8 <validate_structure+0x198>
 80188ca:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 80188ce:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80188d2:	fb93 f7f2 	sdiv	r7, r3, r2
 80188d6:	fb02 3317 	mls	r3, r2, r7, r3
 80188da:	2b00      	cmp	r3, #0
 80188dc:	bf14      	ite	ne
 80188de:	231c      	movne	r3, #28
 80188e0:	231d      	moveq	r3, #29
 80188e2:	6922      	ldr	r2, [r4, #16]
 80188e4:	2a01      	cmp	r2, #1
 80188e6:	bf14      	ite	ne
 80188e8:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 80188ec:	461a      	moveq	r2, r3
 80188ee:	4432      	add	r2, r6
 80188f0:	60e2      	str	r2, [r4, #12]
 80188f2:	e7a6      	b.n	8018842 <validate_structure+0xe2>
 80188f4:	231c      	movs	r3, #28
 80188f6:	e7f4      	b.n	80188e2 <validate_structure+0x182>
 80188f8:	231d      	movs	r3, #29
 80188fa:	e7f2      	b.n	80188e2 <validate_structure+0x182>
 80188fc:	231c      	movs	r3, #28
 80188fe:	e7aa      	b.n	8018856 <validate_structure+0xf6>
 8018900:	231d      	movs	r3, #29
 8018902:	e7a8      	b.n	8018856 <validate_structure+0xf6>
 8018904:	0801ea70 	.word	0x0801ea70

08018908 <mktime>:
 8018908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801890c:	b085      	sub	sp, #20
 801890e:	4607      	mov	r7, r0
 8018910:	f003 fb1a 	bl	801bf48 <__gettzinfo>
 8018914:	4681      	mov	r9, r0
 8018916:	4638      	mov	r0, r7
 8018918:	f7ff ff22 	bl	8018760 <validate_structure>
 801891c:	e9d7 4300 	ldrd	r4, r3, [r7]
 8018920:	223c      	movs	r2, #60	@ 0x3c
 8018922:	fb02 4403 	mla	r4, r2, r3, r4
 8018926:	68bb      	ldr	r3, [r7, #8]
 8018928:	697d      	ldr	r5, [r7, #20]
 801892a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 801892e:	fb02 4403 	mla	r4, r2, r3, r4
 8018932:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 8018936:	4ac1      	ldr	r2, [pc, #772]	@ (8018c3c <mktime+0x334>)
 8018938:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801893c:	3e01      	subs	r6, #1
 801893e:	2b01      	cmp	r3, #1
 8018940:	4416      	add	r6, r2
 8018942:	dd11      	ble.n	8018968 <mktime+0x60>
 8018944:	07a9      	lsls	r1, r5, #30
 8018946:	d10f      	bne.n	8018968 <mktime+0x60>
 8018948:	2264      	movs	r2, #100	@ 0x64
 801894a:	fb95 f3f2 	sdiv	r3, r5, r2
 801894e:	fb02 5313 	mls	r3, r2, r3, r5
 8018952:	b943      	cbnz	r3, 8018966 <mktime+0x5e>
 8018954:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 8018958:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 801895c:	fb93 f1f2 	sdiv	r1, r3, r2
 8018960:	fb02 3311 	mls	r3, r2, r1, r3
 8018964:	b903      	cbnz	r3, 8018968 <mktime+0x60>
 8018966:	3601      	adds	r6, #1
 8018968:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 801896c:	3310      	adds	r3, #16
 801896e:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8018972:	4293      	cmp	r3, r2
 8018974:	61fe      	str	r6, [r7, #28]
 8018976:	f200 8167 	bhi.w	8018c48 <mktime+0x340>
 801897a:	2d46      	cmp	r5, #70	@ 0x46
 801897c:	f340 808e 	ble.w	8018a9c <mktime+0x194>
 8018980:	2346      	movs	r3, #70	@ 0x46
 8018982:	f240 1c6d 	movw	ip, #365	@ 0x16d
 8018986:	2164      	movs	r1, #100	@ 0x64
 8018988:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 801898c:	079a      	lsls	r2, r3, #30
 801898e:	d17f      	bne.n	8018a90 <mktime+0x188>
 8018990:	fb93 f2f1 	sdiv	r2, r3, r1
 8018994:	fb01 3212 	mls	r2, r1, r2, r3
 8018998:	2a00      	cmp	r2, #0
 801899a:	d17c      	bne.n	8018a96 <mktime+0x18e>
 801899c:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 80189a0:	fb92 fef0 	sdiv	lr, r2, r0
 80189a4:	fb00 221e 	mls	r2, r0, lr, r2
 80189a8:	2a00      	cmp	r2, #0
 80189aa:	bf14      	ite	ne
 80189ac:	4662      	movne	r2, ip
 80189ae:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 80189b2:	3301      	adds	r3, #1
 80189b4:	429d      	cmp	r5, r3
 80189b6:	4416      	add	r6, r2
 80189b8:	d1e8      	bne.n	801898c <mktime+0x84>
 80189ba:	4ba1      	ldr	r3, [pc, #644]	@ (8018c40 <mktime+0x338>)
 80189bc:	ea4f 78e4 	mov.w	r8, r4, asr #31
 80189c0:	fbc6 4803 	smlal	r4, r8, r6, r3
 80189c4:	f000 f9fa 	bl	8018dbc <__tz_lock>
 80189c8:	f000 fa04 	bl	8018dd4 <_tzset_unlocked>
 80189cc:	4b9d      	ldr	r3, [pc, #628]	@ (8018c44 <mktime+0x33c>)
 80189ce:	681b      	ldr	r3, [r3, #0]
 80189d0:	2b00      	cmp	r3, #0
 80189d2:	f000 8140 	beq.w	8018c56 <mktime+0x34e>
 80189d6:	f8d7 a020 	ldr.w	sl, [r7, #32]
 80189da:	6978      	ldr	r0, [r7, #20]
 80189dc:	4653      	mov	r3, sl
 80189de:	2b01      	cmp	r3, #1
 80189e0:	bfa8      	it	ge
 80189e2:	2301      	movge	r3, #1
 80189e4:	9301      	str	r3, [sp, #4]
 80189e6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80189ea:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 80189ee:	4283      	cmp	r3, r0
 80189f0:	f040 8096 	bne.w	8018b20 <mktime+0x218>
 80189f4:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 80189f8:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 80189fc:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 8018a00:	1a13      	subs	r3, r2, r0
 8018a02:	9303      	str	r3, [sp, #12]
 8018a04:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 8018a08:	9302      	str	r3, [sp, #8]
 8018a0a:	9a02      	ldr	r2, [sp, #8]
 8018a0c:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 8018a10:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 8018a14:	ebb2 0e03 	subs.w	lr, r2, r3
 8018a18:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 8018a1c:	4574      	cmp	r4, lr
 8018a1e:	eb78 0201 	sbcs.w	r2, r8, r1
 8018a22:	f280 8085 	bge.w	8018b30 <mktime+0x228>
 8018a26:	f8d9 2000 	ldr.w	r2, [r9]
 8018a2a:	2a00      	cmp	r2, #0
 8018a2c:	f000 808d 	beq.w	8018b4a <mktime+0x242>
 8018a30:	9a03      	ldr	r2, [sp, #12]
 8018a32:	4294      	cmp	r4, r2
 8018a34:	eb78 020b 	sbcs.w	r2, r8, fp
 8018a38:	f2c0 810a 	blt.w	8018c50 <mktime+0x348>
 8018a3c:	4574      	cmp	r4, lr
 8018a3e:	eb78 0101 	sbcs.w	r1, r8, r1
 8018a42:	bfb4      	ite	lt
 8018a44:	f04f 0b01 	movlt.w	fp, #1
 8018a48:	f04f 0b00 	movge.w	fp, #0
 8018a4c:	f1ba 0f00 	cmp.w	sl, #0
 8018a50:	f280 8087 	bge.w	8018b62 <mktime+0x25a>
 8018a54:	f1bb 0f01 	cmp.w	fp, #1
 8018a58:	f040 80ff 	bne.w	8018c5a <mktime+0x352>
 8018a5c:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 8018a60:	191c      	adds	r4, r3, r4
 8018a62:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8018a66:	f04f 0b01 	mov.w	fp, #1
 8018a6a:	f000 f9ad 	bl	8018dc8 <__tz_unlock>
 8018a6e:	3604      	adds	r6, #4
 8018a70:	2307      	movs	r3, #7
 8018a72:	fb96 f3f3 	sdiv	r3, r6, r3
 8018a76:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8018a7a:	1af6      	subs	r6, r6, r3
 8018a7c:	f100 80db 	bmi.w	8018c36 <mktime+0x32e>
 8018a80:	f8c7 b020 	str.w	fp, [r7, #32]
 8018a84:	61be      	str	r6, [r7, #24]
 8018a86:	4620      	mov	r0, r4
 8018a88:	4641      	mov	r1, r8
 8018a8a:	b005      	add	sp, #20
 8018a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a90:	f240 126d 	movw	r2, #365	@ 0x16d
 8018a94:	e78d      	b.n	80189b2 <mktime+0xaa>
 8018a96:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 8018a9a:	e78a      	b.n	80189b2 <mktime+0xaa>
 8018a9c:	d08d      	beq.n	80189ba <mktime+0xb2>
 8018a9e:	2345      	movs	r3, #69	@ 0x45
 8018aa0:	f240 1c6d 	movw	ip, #365	@ 0x16d
 8018aa4:	2164      	movs	r1, #100	@ 0x64
 8018aa6:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8018aaa:	e012      	b.n	8018ad2 <mktime+0x1ca>
 8018aac:	bb62      	cbnz	r2, 8018b08 <mktime+0x200>
 8018aae:	fb93 f2f1 	sdiv	r2, r3, r1
 8018ab2:	fb01 3212 	mls	r2, r1, r2, r3
 8018ab6:	bb52      	cbnz	r2, 8018b0e <mktime+0x206>
 8018ab8:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 8018abc:	fb92 fef0 	sdiv	lr, r2, r0
 8018ac0:	fb00 221e 	mls	r2, r0, lr, r2
 8018ac4:	2a00      	cmp	r2, #0
 8018ac6:	bf14      	ite	ne
 8018ac8:	4662      	movne	r2, ip
 8018aca:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 8018ace:	1ab6      	subs	r6, r6, r2
 8018ad0:	3b01      	subs	r3, #1
 8018ad2:	429d      	cmp	r5, r3
 8018ad4:	f003 0203 	and.w	r2, r3, #3
 8018ad8:	dbe8      	blt.n	8018aac <mktime+0x1a4>
 8018ada:	b9da      	cbnz	r2, 8018b14 <mktime+0x20c>
 8018adc:	2264      	movs	r2, #100	@ 0x64
 8018ade:	fb95 f3f2 	sdiv	r3, r5, r2
 8018ae2:	fb02 5313 	mls	r3, r2, r3, r5
 8018ae6:	b9c3      	cbnz	r3, 8018b1a <mktime+0x212>
 8018ae8:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 8018aec:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8018af0:	fb93 f1f2 	sdiv	r1, r3, r2
 8018af4:	fb02 3311 	mls	r3, r2, r1, r3
 8018af8:	2b00      	cmp	r3, #0
 8018afa:	f240 136d 	movw	r3, #365	@ 0x16d
 8018afe:	bf08      	it	eq
 8018b00:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 8018b04:	1af6      	subs	r6, r6, r3
 8018b06:	e758      	b.n	80189ba <mktime+0xb2>
 8018b08:	f240 126d 	movw	r2, #365	@ 0x16d
 8018b0c:	e7df      	b.n	8018ace <mktime+0x1c6>
 8018b0e:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 8018b12:	e7dc      	b.n	8018ace <mktime+0x1c6>
 8018b14:	f240 136d 	movw	r3, #365	@ 0x16d
 8018b18:	e7f4      	b.n	8018b04 <mktime+0x1fc>
 8018b1a:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 8018b1e:	e7f1      	b.n	8018b04 <mktime+0x1fc>
 8018b20:	f000 f8a2 	bl	8018c68 <__tzcalc_limits>
 8018b24:	2800      	cmp	r0, #0
 8018b26:	f47f af65 	bne.w	80189f4 <mktime+0xec>
 8018b2a:	f8dd b004 	ldr.w	fp, [sp, #4]
 8018b2e:	e791      	b.n	8018a54 <mktime+0x14c>
 8018b30:	9a02      	ldr	r2, [sp, #8]
 8018b32:	1a12      	subs	r2, r2, r0
 8018b34:	9202      	str	r2, [sp, #8]
 8018b36:	ea4f 72e0 	mov.w	r2, r0, asr #31
 8018b3a:	eb6c 0c02 	sbc.w	ip, ip, r2
 8018b3e:	9a02      	ldr	r2, [sp, #8]
 8018b40:	4294      	cmp	r4, r2
 8018b42:	eb78 0c0c 	sbcs.w	ip, r8, ip
 8018b46:	dbf0      	blt.n	8018b2a <mktime+0x222>
 8018b48:	e76d      	b.n	8018a26 <mktime+0x11e>
 8018b4a:	9a03      	ldr	r2, [sp, #12]
 8018b4c:	4294      	cmp	r4, r2
 8018b4e:	eb78 020b 	sbcs.w	r2, r8, fp
 8018b52:	f6ff af73 	blt.w	8018a3c <mktime+0x134>
 8018b56:	f1ba 0f00 	cmp.w	sl, #0
 8018b5a:	f6ff af7f 	blt.w	8018a5c <mktime+0x154>
 8018b5e:	f04f 0b01 	mov.w	fp, #1
 8018b62:	9a01      	ldr	r2, [sp, #4]
 8018b64:	ea82 020b 	eor.w	r2, r2, fp
 8018b68:	2a01      	cmp	r2, #1
 8018b6a:	f47f af73 	bne.w	8018a54 <mktime+0x14c>
 8018b6e:	f1bb 0f00 	cmp.w	fp, #0
 8018b72:	d035      	beq.n	8018be0 <mktime+0x2d8>
 8018b74:	1a1b      	subs	r3, r3, r0
 8018b76:	683a      	ldr	r2, [r7, #0]
 8018b78:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8018b7c:	441a      	add	r2, r3
 8018b7e:	191c      	adds	r4, r3, r4
 8018b80:	603a      	str	r2, [r7, #0]
 8018b82:	4638      	mov	r0, r7
 8018b84:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8018b88:	f7ff fdea 	bl	8018760 <validate_structure>
 8018b8c:	68fa      	ldr	r2, [r7, #12]
 8018b8e:	ebb2 020a 	subs.w	r2, r2, sl
 8018b92:	f43f af5f 	beq.w	8018a54 <mktime+0x14c>
 8018b96:	2a01      	cmp	r2, #1
 8018b98:	dc24      	bgt.n	8018be4 <mktime+0x2dc>
 8018b9a:	1c93      	adds	r3, r2, #2
 8018b9c:	bfd8      	it	le
 8018b9e:	2201      	movle	r2, #1
 8018ba0:	69fb      	ldr	r3, [r7, #28]
 8018ba2:	18d3      	adds	r3, r2, r3
 8018ba4:	d527      	bpl.n	8018bf6 <mktime+0x2ee>
 8018ba6:	1e6b      	subs	r3, r5, #1
 8018ba8:	0798      	lsls	r0, r3, #30
 8018baa:	d11e      	bne.n	8018bea <mktime+0x2e2>
 8018bac:	2164      	movs	r1, #100	@ 0x64
 8018bae:	fb93 f0f1 	sdiv	r0, r3, r1
 8018bb2:	fb01 3310 	mls	r3, r1, r0, r3
 8018bb6:	b9db      	cbnz	r3, 8018bf0 <mktime+0x2e8>
 8018bb8:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8018bbc:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 8018bc0:	fb95 f1f3 	sdiv	r1, r5, r3
 8018bc4:	fb03 5511 	mls	r5, r3, r1, r5
 8018bc8:	2d00      	cmp	r5, #0
 8018bca:	f240 136d 	movw	r3, #365	@ 0x16d
 8018bce:	bf18      	it	ne
 8018bd0:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 8018bd4:	61fb      	str	r3, [r7, #28]
 8018bd6:	4416      	add	r6, r2
 8018bd8:	e73c      	b.n	8018a54 <mktime+0x14c>
 8018bda:	f04f 0b00 	mov.w	fp, #0
 8018bde:	e7c0      	b.n	8018b62 <mktime+0x25a>
 8018be0:	1ac3      	subs	r3, r0, r3
 8018be2:	e7c8      	b.n	8018b76 <mktime+0x26e>
 8018be4:	f04f 32ff 	mov.w	r2, #4294967295
 8018be8:	e7da      	b.n	8018ba0 <mktime+0x298>
 8018bea:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 8018bee:	e7f1      	b.n	8018bd4 <mktime+0x2cc>
 8018bf0:	f240 136d 	movw	r3, #365	@ 0x16d
 8018bf4:	e7ee      	b.n	8018bd4 <mktime+0x2cc>
 8018bf6:	07a9      	lsls	r1, r5, #30
 8018bf8:	d117      	bne.n	8018c2a <mktime+0x322>
 8018bfa:	2064      	movs	r0, #100	@ 0x64
 8018bfc:	fb95 f1f0 	sdiv	r1, r5, r0
 8018c00:	fb00 5111 	mls	r1, r0, r1, r5
 8018c04:	b9a1      	cbnz	r1, 8018c30 <mktime+0x328>
 8018c06:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8018c0a:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 8018c0e:	fb95 f0f1 	sdiv	r0, r5, r1
 8018c12:	fb01 5510 	mls	r5, r1, r0, r5
 8018c16:	2d00      	cmp	r5, #0
 8018c18:	f240 116d 	movw	r1, #365	@ 0x16d
 8018c1c:	bf08      	it	eq
 8018c1e:	f44f 71b7 	moveq.w	r1, #366	@ 0x16e
 8018c22:	428b      	cmp	r3, r1
 8018c24:	bfa8      	it	ge
 8018c26:	1a5b      	subge	r3, r3, r1
 8018c28:	e7d4      	b.n	8018bd4 <mktime+0x2cc>
 8018c2a:	f240 116d 	movw	r1, #365	@ 0x16d
 8018c2e:	e7f8      	b.n	8018c22 <mktime+0x31a>
 8018c30:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 8018c34:	e7f5      	b.n	8018c22 <mktime+0x31a>
 8018c36:	3607      	adds	r6, #7
 8018c38:	e722      	b.n	8018a80 <mktime+0x178>
 8018c3a:	bf00      	nop
 8018c3c:	0801ea40 	.word	0x0801ea40
 8018c40:	00015180 	.word	0x00015180
 8018c44:	24003e80 	.word	0x24003e80
 8018c48:	f04f 34ff 	mov.w	r4, #4294967295
 8018c4c:	46a0      	mov	r8, r4
 8018c4e:	e71a      	b.n	8018a86 <mktime+0x17e>
 8018c50:	f1ba 0f00 	cmp.w	sl, #0
 8018c54:	dac1      	bge.n	8018bda <mktime+0x2d2>
 8018c56:	f04f 0b00 	mov.w	fp, #0
 8018c5a:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 8018c5e:	191c      	adds	r4, r3, r4
 8018c60:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8018c64:	e701      	b.n	8018a6a <mktime+0x162>
 8018c66:	bf00      	nop

08018c68 <__tzcalc_limits>:
 8018c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c6c:	4604      	mov	r4, r0
 8018c6e:	f003 f96b 	bl	801bf48 <__gettzinfo>
 8018c72:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 8018c76:	429c      	cmp	r4, r3
 8018c78:	f340 8099 	ble.w	8018dae <__tzcalc_limits+0x146>
 8018c7c:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 8018c80:	19e5      	adds	r5, r4, r7
 8018c82:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 8018c86:	f240 126d 	movw	r2, #365	@ 0x16d
 8018c8a:	10ad      	asrs	r5, r5, #2
 8018c8c:	fb02 5503 	mla	r5, r2, r3, r5
 8018c90:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 8018c94:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 8018c98:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 8018c9c:	4f45      	ldr	r7, [pc, #276]	@ (8018db4 <__tzcalc_limits+0x14c>)
 8018c9e:	fb93 f3f2 	sdiv	r3, r3, r2
 8018ca2:	441d      	add	r5, r3
 8018ca4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8018ca8:	eb04 030c 	add.w	r3, r4, ip
 8018cac:	6044      	str	r4, [r0, #4]
 8018cae:	fbb3 f3f2 	udiv	r3, r3, r2
 8018cb2:	4601      	mov	r1, r0
 8018cb4:	441d      	add	r5, r3
 8018cb6:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 8018cba:	7a0b      	ldrb	r3, [r1, #8]
 8018cbc:	694a      	ldr	r2, [r1, #20]
 8018cbe:	2b4a      	cmp	r3, #74	@ 0x4a
 8018cc0:	d133      	bne.n	8018d2a <__tzcalc_limits+0xc2>
 8018cc2:	07a6      	lsls	r6, r4, #30
 8018cc4:	eb05 0302 	add.w	r3, r5, r2
 8018cc8:	d106      	bne.n	8018cd8 <__tzcalc_limits+0x70>
 8018cca:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 8018cce:	fb94 f6fe 	sdiv	r6, r4, lr
 8018cd2:	fb0e 4616 	mls	r6, lr, r6, r4
 8018cd6:	b936      	cbnz	r6, 8018ce6 <__tzcalc_limits+0x7e>
 8018cd8:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 8018cdc:	fb94 f6fe 	sdiv	r6, r4, lr
 8018ce0:	fb0e 4616 	mls	r6, lr, r6, r4
 8018ce4:	b9fe      	cbnz	r6, 8018d26 <__tzcalc_limits+0xbe>
 8018ce6:	2a3b      	cmp	r2, #59	@ 0x3b
 8018ce8:	bfd4      	ite	le
 8018cea:	2200      	movle	r2, #0
 8018cec:	2201      	movgt	r2, #1
 8018cee:	4413      	add	r3, r2
 8018cf0:	3b01      	subs	r3, #1
 8018cf2:	698a      	ldr	r2, [r1, #24]
 8018cf4:	17d6      	asrs	r6, r2, #31
 8018cf6:	fbc3 2607 	smlal	r2, r6, r3, r7
 8018cfa:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8018cfc:	18d2      	adds	r2, r2, r3
 8018cfe:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 8018d02:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8018d06:	3128      	adds	r1, #40	@ 0x28
 8018d08:	458c      	cmp	ip, r1
 8018d0a:	d1d6      	bne.n	8018cba <__tzcalc_limits+0x52>
 8018d0c:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 8018d10:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 8018d14:	428c      	cmp	r4, r1
 8018d16:	4193      	sbcs	r3, r2
 8018d18:	bfb4      	ite	lt
 8018d1a:	2301      	movlt	r3, #1
 8018d1c:	2300      	movge	r3, #0
 8018d1e:	6003      	str	r3, [r0, #0]
 8018d20:	2001      	movs	r0, #1
 8018d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d26:	2200      	movs	r2, #0
 8018d28:	e7e1      	b.n	8018cee <__tzcalc_limits+0x86>
 8018d2a:	2b44      	cmp	r3, #68	@ 0x44
 8018d2c:	d101      	bne.n	8018d32 <__tzcalc_limits+0xca>
 8018d2e:	18ab      	adds	r3, r5, r2
 8018d30:	e7df      	b.n	8018cf2 <__tzcalc_limits+0x8a>
 8018d32:	07a3      	lsls	r3, r4, #30
 8018d34:	d105      	bne.n	8018d42 <__tzcalc_limits+0xda>
 8018d36:	2664      	movs	r6, #100	@ 0x64
 8018d38:	fb94 f3f6 	sdiv	r3, r4, r6
 8018d3c:	fb06 4313 	mls	r3, r6, r3, r4
 8018d40:	bb7b      	cbnz	r3, 8018da2 <__tzcalc_limits+0x13a>
 8018d42:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8018d46:	fb94 f6f3 	sdiv	r6, r4, r3
 8018d4a:	fb03 4616 	mls	r6, r3, r6, r4
 8018d4e:	fab6 f686 	clz	r6, r6
 8018d52:	0976      	lsrs	r6, r6, #5
 8018d54:	f8df e060 	ldr.w	lr, [pc, #96]	@ 8018db8 <__tzcalc_limits+0x150>
 8018d58:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8018d5c:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 8018d60:	462b      	mov	r3, r5
 8018d62:	f04f 0800 	mov.w	r8, #0
 8018d66:	fb0a e606 	mla	r6, sl, r6, lr
 8018d6a:	f108 0801 	add.w	r8, r8, #1
 8018d6e:	45c1      	cmp	r9, r8
 8018d70:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 8018d74:	dc17      	bgt.n	8018da6 <__tzcalc_limits+0x13e>
 8018d76:	f103 0804 	add.w	r8, r3, #4
 8018d7a:	2607      	movs	r6, #7
 8018d7c:	fb98 f6f6 	sdiv	r6, r8, r6
 8018d80:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8018d84:	eba8 0606 	sub.w	r6, r8, r6
 8018d88:	1b92      	subs	r2, r2, r6
 8018d8a:	690e      	ldr	r6, [r1, #16]
 8018d8c:	f106 36ff 	add.w	r6, r6, #4294967295
 8018d90:	bf48      	it	mi
 8018d92:	3207      	addmi	r2, #7
 8018d94:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8018d98:	4432      	add	r2, r6
 8018d9a:	4572      	cmp	r2, lr
 8018d9c:	da05      	bge.n	8018daa <__tzcalc_limits+0x142>
 8018d9e:	4413      	add	r3, r2
 8018da0:	e7a7      	b.n	8018cf2 <__tzcalc_limits+0x8a>
 8018da2:	2601      	movs	r6, #1
 8018da4:	e7d6      	b.n	8018d54 <__tzcalc_limits+0xec>
 8018da6:	4473      	add	r3, lr
 8018da8:	e7df      	b.n	8018d6a <__tzcalc_limits+0x102>
 8018daa:	3a07      	subs	r2, #7
 8018dac:	e7f5      	b.n	8018d9a <__tzcalc_limits+0x132>
 8018dae:	2000      	movs	r0, #0
 8018db0:	e7b7      	b.n	8018d22 <__tzcalc_limits+0xba>
 8018db2:	bf00      	nop
 8018db4:	00015180 	.word	0x00015180
 8018db8:	0801ea9c 	.word	0x0801ea9c

08018dbc <__tz_lock>:
 8018dbc:	4801      	ldr	r0, [pc, #4]	@ (8018dc4 <__tz_lock+0x8>)
 8018dbe:	f000 baa6 	b.w	801930e <__retarget_lock_acquire>
 8018dc2:	bf00      	nop
 8018dc4:	24003e88 	.word	0x24003e88

08018dc8 <__tz_unlock>:
 8018dc8:	4801      	ldr	r0, [pc, #4]	@ (8018dd0 <__tz_unlock+0x8>)
 8018dca:	f000 baa2 	b.w	8019312 <__retarget_lock_release>
 8018dce:	bf00      	nop
 8018dd0:	24003e88 	.word	0x24003e88

08018dd4 <_tzset_unlocked>:
 8018dd4:	4b01      	ldr	r3, [pc, #4]	@ (8018ddc <_tzset_unlocked+0x8>)
 8018dd6:	6818      	ldr	r0, [r3, #0]
 8018dd8:	f000 b802 	b.w	8018de0 <_tzset_unlocked_r>
 8018ddc:	24000430 	.word	0x24000430

08018de0 <_tzset_unlocked_r>:
 8018de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018de4:	b08d      	sub	sp, #52	@ 0x34
 8018de6:	4607      	mov	r7, r0
 8018de8:	f003 f8ae 	bl	801bf48 <__gettzinfo>
 8018dec:	49bc      	ldr	r1, [pc, #752]	@ (80190e0 <_tzset_unlocked_r+0x300>)
 8018dee:	4dbd      	ldr	r5, [pc, #756]	@ (80190e4 <_tzset_unlocked_r+0x304>)
 8018df0:	4604      	mov	r4, r0
 8018df2:	4638      	mov	r0, r7
 8018df4:	f001 fc7a 	bl	801a6ec <_getenv_r>
 8018df8:	4606      	mov	r6, r0
 8018dfa:	bb10      	cbnz	r0, 8018e42 <_tzset_unlocked_r+0x62>
 8018dfc:	4bba      	ldr	r3, [pc, #744]	@ (80190e8 <_tzset_unlocked_r+0x308>)
 8018dfe:	4abb      	ldr	r2, [pc, #748]	@ (80190ec <_tzset_unlocked_r+0x30c>)
 8018e00:	6018      	str	r0, [r3, #0]
 8018e02:	4bbb      	ldr	r3, [pc, #748]	@ (80190f0 <_tzset_unlocked_r+0x310>)
 8018e04:	62a0      	str	r0, [r4, #40]	@ 0x28
 8018e06:	6018      	str	r0, [r3, #0]
 8018e08:	4bba      	ldr	r3, [pc, #744]	@ (80190f4 <_tzset_unlocked_r+0x314>)
 8018e0a:	6520      	str	r0, [r4, #80]	@ 0x50
 8018e0c:	e9c3 2200 	strd	r2, r2, [r3]
 8018e10:	214a      	movs	r1, #74	@ 0x4a
 8018e12:	2200      	movs	r2, #0
 8018e14:	2300      	movs	r3, #0
 8018e16:	e9c4 0003 	strd	r0, r0, [r4, #12]
 8018e1a:	e9c4 0005 	strd	r0, r0, [r4, #20]
 8018e1e:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 8018e22:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 8018e26:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8018e2a:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 8018e2e:	6828      	ldr	r0, [r5, #0]
 8018e30:	7221      	strb	r1, [r4, #8]
 8018e32:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 8018e36:	f001 fc69 	bl	801a70c <free>
 8018e3a:	602e      	str	r6, [r5, #0]
 8018e3c:	b00d      	add	sp, #52	@ 0x34
 8018e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e42:	6829      	ldr	r1, [r5, #0]
 8018e44:	2900      	cmp	r1, #0
 8018e46:	f040 808e 	bne.w	8018f66 <_tzset_unlocked_r+0x186>
 8018e4a:	6828      	ldr	r0, [r5, #0]
 8018e4c:	f001 fc5e 	bl	801a70c <free>
 8018e50:	4630      	mov	r0, r6
 8018e52:	f7e7 faa5 	bl	80003a0 <strlen>
 8018e56:	1c41      	adds	r1, r0, #1
 8018e58:	4638      	mov	r0, r7
 8018e5a:	f001 fc81 	bl	801a760 <_malloc_r>
 8018e5e:	6028      	str	r0, [r5, #0]
 8018e60:	2800      	cmp	r0, #0
 8018e62:	f040 8086 	bne.w	8018f72 <_tzset_unlocked_r+0x192>
 8018e66:	4aa2      	ldr	r2, [pc, #648]	@ (80190f0 <_tzset_unlocked_r+0x310>)
 8018e68:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 80190f4 <_tzset_unlocked_r+0x314>
 8018e6c:	f8df a278 	ldr.w	sl, [pc, #632]	@ 80190e8 <_tzset_unlocked_r+0x308>
 8018e70:	2300      	movs	r3, #0
 8018e72:	6013      	str	r3, [r2, #0]
 8018e74:	4aa0      	ldr	r2, [pc, #640]	@ (80190f8 <_tzset_unlocked_r+0x318>)
 8018e76:	f8ca 3000 	str.w	r3, [sl]
 8018e7a:	2000      	movs	r0, #0
 8018e7c:	2100      	movs	r1, #0
 8018e7e:	e9c8 2200 	strd	r2, r2, [r8]
 8018e82:	e9c4 3303 	strd	r3, r3, [r4, #12]
 8018e86:	e9c4 3305 	strd	r3, r3, [r4, #20]
 8018e8a:	e9c4 0108 	strd	r0, r1, [r4, #32]
 8018e8e:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 8018e92:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 8018e96:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 8018e9a:	224a      	movs	r2, #74	@ 0x4a
 8018e9c:	7222      	strb	r2, [r4, #8]
 8018e9e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8018ea0:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 8018ea4:	6523      	str	r3, [r4, #80]	@ 0x50
 8018ea6:	7833      	ldrb	r3, [r6, #0]
 8018ea8:	2b3a      	cmp	r3, #58	@ 0x3a
 8018eaa:	bf08      	it	eq
 8018eac:	3601      	addeq	r6, #1
 8018eae:	7833      	ldrb	r3, [r6, #0]
 8018eb0:	2b3c      	cmp	r3, #60	@ 0x3c
 8018eb2:	d162      	bne.n	8018f7a <_tzset_unlocked_r+0x19a>
 8018eb4:	1c75      	adds	r5, r6, #1
 8018eb6:	4a91      	ldr	r2, [pc, #580]	@ (80190fc <_tzset_unlocked_r+0x31c>)
 8018eb8:	4991      	ldr	r1, [pc, #580]	@ (8019100 <_tzset_unlocked_r+0x320>)
 8018eba:	ab0a      	add	r3, sp, #40	@ 0x28
 8018ebc:	4628      	mov	r0, r5
 8018ebe:	f7ff faeb 	bl	8018498 <siscanf>
 8018ec2:	2800      	cmp	r0, #0
 8018ec4:	ddba      	ble.n	8018e3c <_tzset_unlocked_r+0x5c>
 8018ec6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018ec8:	1eda      	subs	r2, r3, #3
 8018eca:	2a07      	cmp	r2, #7
 8018ecc:	d8b6      	bhi.n	8018e3c <_tzset_unlocked_r+0x5c>
 8018ece:	5ceb      	ldrb	r3, [r5, r3]
 8018ed0:	2b3e      	cmp	r3, #62	@ 0x3e
 8018ed2:	d1b3      	bne.n	8018e3c <_tzset_unlocked_r+0x5c>
 8018ed4:	3602      	adds	r6, #2
 8018ed6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018ed8:	18f5      	adds	r5, r6, r3
 8018eda:	5cf3      	ldrb	r3, [r6, r3]
 8018edc:	2b2d      	cmp	r3, #45	@ 0x2d
 8018ede:	d15a      	bne.n	8018f96 <_tzset_unlocked_r+0x1b6>
 8018ee0:	3501      	adds	r5, #1
 8018ee2:	f04f 39ff 	mov.w	r9, #4294967295
 8018ee6:	2300      	movs	r3, #0
 8018ee8:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018eec:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018ef0:	af08      	add	r7, sp, #32
 8018ef2:	ab0a      	add	r3, sp, #40	@ 0x28
 8018ef4:	e9cd 3701 	strd	r3, r7, [sp, #4]
 8018ef8:	9303      	str	r3, [sp, #12]
 8018efa:	f10d 031e 	add.w	r3, sp, #30
 8018efe:	9300      	str	r3, [sp, #0]
 8018f00:	4980      	ldr	r1, [pc, #512]	@ (8019104 <_tzset_unlocked_r+0x324>)
 8018f02:	ab0a      	add	r3, sp, #40	@ 0x28
 8018f04:	aa07      	add	r2, sp, #28
 8018f06:	4628      	mov	r0, r5
 8018f08:	f7ff fac6 	bl	8018498 <siscanf>
 8018f0c:	2800      	cmp	r0, #0
 8018f0e:	dd95      	ble.n	8018e3c <_tzset_unlocked_r+0x5c>
 8018f10:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8018f14:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 8018f18:	223c      	movs	r2, #60	@ 0x3c
 8018f1a:	fb02 6603 	mla	r6, r2, r3, r6
 8018f1e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8018f22:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8018f26:	fb02 6603 	mla	r6, r2, r3, r6
 8018f2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018f2c:	fb09 f606 	mul.w	r6, r9, r6
 8018f30:	eb05 0903 	add.w	r9, r5, r3
 8018f34:	5ceb      	ldrb	r3, [r5, r3]
 8018f36:	2b3c      	cmp	r3, #60	@ 0x3c
 8018f38:	f040 80ee 	bne.w	8019118 <_tzset_unlocked_r+0x338>
 8018f3c:	f109 0501 	add.w	r5, r9, #1
 8018f40:	4a71      	ldr	r2, [pc, #452]	@ (8019108 <_tzset_unlocked_r+0x328>)
 8018f42:	496f      	ldr	r1, [pc, #444]	@ (8019100 <_tzset_unlocked_r+0x320>)
 8018f44:	ab0a      	add	r3, sp, #40	@ 0x28
 8018f46:	4628      	mov	r0, r5
 8018f48:	f7ff faa6 	bl	8018498 <siscanf>
 8018f4c:	2800      	cmp	r0, #0
 8018f4e:	dc28      	bgt.n	8018fa2 <_tzset_unlocked_r+0x1c2>
 8018f50:	f899 3001 	ldrb.w	r3, [r9, #1]
 8018f54:	2b3e      	cmp	r3, #62	@ 0x3e
 8018f56:	d124      	bne.n	8018fa2 <_tzset_unlocked_r+0x1c2>
 8018f58:	4b68      	ldr	r3, [pc, #416]	@ (80190fc <_tzset_unlocked_r+0x31c>)
 8018f5a:	62a6      	str	r6, [r4, #40]	@ 0x28
 8018f5c:	e9c8 3300 	strd	r3, r3, [r8]
 8018f60:	f8ca 6000 	str.w	r6, [sl]
 8018f64:	e76a      	b.n	8018e3c <_tzset_unlocked_r+0x5c>
 8018f66:	f7e7 f9bb 	bl	80002e0 <strcmp>
 8018f6a:	2800      	cmp	r0, #0
 8018f6c:	f47f af6d 	bne.w	8018e4a <_tzset_unlocked_r+0x6a>
 8018f70:	e764      	b.n	8018e3c <_tzset_unlocked_r+0x5c>
 8018f72:	4631      	mov	r1, r6
 8018f74:	f000 f9cf 	bl	8019316 <strcpy>
 8018f78:	e775      	b.n	8018e66 <_tzset_unlocked_r+0x86>
 8018f7a:	4a60      	ldr	r2, [pc, #384]	@ (80190fc <_tzset_unlocked_r+0x31c>)
 8018f7c:	4963      	ldr	r1, [pc, #396]	@ (801910c <_tzset_unlocked_r+0x32c>)
 8018f7e:	ab0a      	add	r3, sp, #40	@ 0x28
 8018f80:	4630      	mov	r0, r6
 8018f82:	f7ff fa89 	bl	8018498 <siscanf>
 8018f86:	2800      	cmp	r0, #0
 8018f88:	f77f af58 	ble.w	8018e3c <_tzset_unlocked_r+0x5c>
 8018f8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018f8e:	3b03      	subs	r3, #3
 8018f90:	2b07      	cmp	r3, #7
 8018f92:	d9a0      	bls.n	8018ed6 <_tzset_unlocked_r+0xf6>
 8018f94:	e752      	b.n	8018e3c <_tzset_unlocked_r+0x5c>
 8018f96:	2b2b      	cmp	r3, #43	@ 0x2b
 8018f98:	bf08      	it	eq
 8018f9a:	3501      	addeq	r5, #1
 8018f9c:	f04f 0901 	mov.w	r9, #1
 8018fa0:	e7a1      	b.n	8018ee6 <_tzset_unlocked_r+0x106>
 8018fa2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018fa4:	1eda      	subs	r2, r3, #3
 8018fa6:	2a07      	cmp	r2, #7
 8018fa8:	f63f af48 	bhi.w	8018e3c <_tzset_unlocked_r+0x5c>
 8018fac:	5ceb      	ldrb	r3, [r5, r3]
 8018fae:	2b3e      	cmp	r3, #62	@ 0x3e
 8018fb0:	f47f af44 	bne.w	8018e3c <_tzset_unlocked_r+0x5c>
 8018fb4:	f109 0902 	add.w	r9, r9, #2
 8018fb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018fba:	eb09 0503 	add.w	r5, r9, r3
 8018fbe:	f819 3003 	ldrb.w	r3, [r9, r3]
 8018fc2:	2b2d      	cmp	r3, #45	@ 0x2d
 8018fc4:	f040 80b7 	bne.w	8019136 <_tzset_unlocked_r+0x356>
 8018fc8:	3501      	adds	r5, #1
 8018fca:	f04f 39ff 	mov.w	r9, #4294967295
 8018fce:	2300      	movs	r3, #0
 8018fd0:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018fd4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018fd8:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018fdc:	930a      	str	r3, [sp, #40]	@ 0x28
 8018fde:	ab0a      	add	r3, sp, #40	@ 0x28
 8018fe0:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8018fe4:	9301      	str	r3, [sp, #4]
 8018fe6:	f10d 031e 	add.w	r3, sp, #30
 8018fea:	9300      	str	r3, [sp, #0]
 8018fec:	4945      	ldr	r1, [pc, #276]	@ (8019104 <_tzset_unlocked_r+0x324>)
 8018fee:	ab0a      	add	r3, sp, #40	@ 0x28
 8018ff0:	aa07      	add	r2, sp, #28
 8018ff2:	4628      	mov	r0, r5
 8018ff4:	f7ff fa50 	bl	8018498 <siscanf>
 8018ff8:	2800      	cmp	r0, #0
 8018ffa:	f300 80a2 	bgt.w	8019142 <_tzset_unlocked_r+0x362>
 8018ffe:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 8019002:	9304      	str	r3, [sp, #16]
 8019004:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019006:	4627      	mov	r7, r4
 8019008:	441d      	add	r5, r3
 801900a:	f04f 0b00 	mov.w	fp, #0
 801900e:	782b      	ldrb	r3, [r5, #0]
 8019010:	2b2c      	cmp	r3, #44	@ 0x2c
 8019012:	bf08      	it	eq
 8019014:	3501      	addeq	r5, #1
 8019016:	f895 9000 	ldrb.w	r9, [r5]
 801901a:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 801901e:	f040 80a3 	bne.w	8019168 <_tzset_unlocked_r+0x388>
 8019022:	ab0a      	add	r3, sp, #40	@ 0x28
 8019024:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 8019028:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801902c:	aa09      	add	r2, sp, #36	@ 0x24
 801902e:	9200      	str	r2, [sp, #0]
 8019030:	4937      	ldr	r1, [pc, #220]	@ (8019110 <_tzset_unlocked_r+0x330>)
 8019032:	9303      	str	r3, [sp, #12]
 8019034:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 8019038:	4628      	mov	r0, r5
 801903a:	f7ff fa2d 	bl	8018498 <siscanf>
 801903e:	2803      	cmp	r0, #3
 8019040:	f47f aefc 	bne.w	8018e3c <_tzset_unlocked_r+0x5c>
 8019044:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 8019048:	1e4b      	subs	r3, r1, #1
 801904a:	2b0b      	cmp	r3, #11
 801904c:	f63f aef6 	bhi.w	8018e3c <_tzset_unlocked_r+0x5c>
 8019050:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 8019054:	1e53      	subs	r3, r2, #1
 8019056:	2b04      	cmp	r3, #4
 8019058:	f63f aef0 	bhi.w	8018e3c <_tzset_unlocked_r+0x5c>
 801905c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 8019060:	2b06      	cmp	r3, #6
 8019062:	f63f aeeb 	bhi.w	8018e3c <_tzset_unlocked_r+0x5c>
 8019066:	e9c7 1203 	strd	r1, r2, [r7, #12]
 801906a:	f887 9008 	strb.w	r9, [r7, #8]
 801906e:	617b      	str	r3, [r7, #20]
 8019070:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019072:	eb05 0903 	add.w	r9, r5, r3
 8019076:	2500      	movs	r5, #0
 8019078:	f04f 0302 	mov.w	r3, #2
 801907c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019080:	f8ad 501e 	strh.w	r5, [sp, #30]
 8019084:	f8ad 5020 	strh.w	r5, [sp, #32]
 8019088:	950a      	str	r5, [sp, #40]	@ 0x28
 801908a:	f899 3000 	ldrb.w	r3, [r9]
 801908e:	2b2f      	cmp	r3, #47	@ 0x2f
 8019090:	f040 8096 	bne.w	80191c0 <_tzset_unlocked_r+0x3e0>
 8019094:	ab0a      	add	r3, sp, #40	@ 0x28
 8019096:	aa08      	add	r2, sp, #32
 8019098:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801909c:	f10d 021e 	add.w	r2, sp, #30
 80190a0:	9200      	str	r2, [sp, #0]
 80190a2:	491c      	ldr	r1, [pc, #112]	@ (8019114 <_tzset_unlocked_r+0x334>)
 80190a4:	9303      	str	r3, [sp, #12]
 80190a6:	aa07      	add	r2, sp, #28
 80190a8:	4648      	mov	r0, r9
 80190aa:	f7ff f9f5 	bl	8018498 <siscanf>
 80190ae:	42a8      	cmp	r0, r5
 80190b0:	f300 8086 	bgt.w	80191c0 <_tzset_unlocked_r+0x3e0>
 80190b4:	214a      	movs	r1, #74	@ 0x4a
 80190b6:	2200      	movs	r2, #0
 80190b8:	2300      	movs	r3, #0
 80190ba:	e9c4 5503 	strd	r5, r5, [r4, #12]
 80190be:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80190c2:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80190c6:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 80190ca:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 80190ce:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 80190d2:	7221      	strb	r1, [r4, #8]
 80190d4:	62a5      	str	r5, [r4, #40]	@ 0x28
 80190d6:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 80190da:	6525      	str	r5, [r4, #80]	@ 0x50
 80190dc:	e6ae      	b.n	8018e3c <_tzset_unlocked_r+0x5c>
 80190de:	bf00      	nop
 80190e0:	0801eb00 	.word	0x0801eb00
 80190e4:	24003e60 	.word	0x24003e60
 80190e8:	24003e7c 	.word	0x24003e7c
 80190ec:	0801eb03 	.word	0x0801eb03
 80190f0:	24003e80 	.word	0x24003e80
 80190f4:	240002bc 	.word	0x240002bc
 80190f8:	0801eb91 	.word	0x0801eb91
 80190fc:	24003e70 	.word	0x24003e70
 8019100:	0801eb07 	.word	0x0801eb07
 8019104:	0801eb3c 	.word	0x0801eb3c
 8019108:	24003e64 	.word	0x24003e64
 801910c:	0801eb1a 	.word	0x0801eb1a
 8019110:	0801eb28 	.word	0x0801eb28
 8019114:	0801eb3b 	.word	0x0801eb3b
 8019118:	4a3e      	ldr	r2, [pc, #248]	@ (8019214 <_tzset_unlocked_r+0x434>)
 801911a:	493f      	ldr	r1, [pc, #252]	@ (8019218 <_tzset_unlocked_r+0x438>)
 801911c:	ab0a      	add	r3, sp, #40	@ 0x28
 801911e:	4648      	mov	r0, r9
 8019120:	f7ff f9ba 	bl	8018498 <siscanf>
 8019124:	2800      	cmp	r0, #0
 8019126:	f77f af17 	ble.w	8018f58 <_tzset_unlocked_r+0x178>
 801912a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801912c:	3b03      	subs	r3, #3
 801912e:	2b07      	cmp	r3, #7
 8019130:	f67f af42 	bls.w	8018fb8 <_tzset_unlocked_r+0x1d8>
 8019134:	e682      	b.n	8018e3c <_tzset_unlocked_r+0x5c>
 8019136:	2b2b      	cmp	r3, #43	@ 0x2b
 8019138:	bf08      	it	eq
 801913a:	3501      	addeq	r5, #1
 801913c:	f04f 0901 	mov.w	r9, #1
 8019140:	e745      	b.n	8018fce <_tzset_unlocked_r+0x1ee>
 8019142:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8019146:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801914a:	213c      	movs	r1, #60	@ 0x3c
 801914c:	fb01 3302 	mla	r3, r1, r2, r3
 8019150:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8019154:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8019158:	fb01 3302 	mla	r3, r1, r2, r3
 801915c:	fb09 f303 	mul.w	r3, r9, r3
 8019160:	e74f      	b.n	8019002 <_tzset_unlocked_r+0x222>
 8019162:	f04f 0b01 	mov.w	fp, #1
 8019166:	e752      	b.n	801900e <_tzset_unlocked_r+0x22e>
 8019168:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 801916c:	bf06      	itte	eq
 801916e:	3501      	addeq	r5, #1
 8019170:	464b      	moveq	r3, r9
 8019172:	2344      	movne	r3, #68	@ 0x44
 8019174:	220a      	movs	r2, #10
 8019176:	a90b      	add	r1, sp, #44	@ 0x2c
 8019178:	4628      	mov	r0, r5
 801917a:	9305      	str	r3, [sp, #20]
 801917c:	f002 f8ae 	bl	801b2dc <strtoul>
 8019180:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 8019184:	9b05      	ldr	r3, [sp, #20]
 8019186:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 801918a:	45a9      	cmp	r9, r5
 801918c:	d114      	bne.n	80191b8 <_tzset_unlocked_r+0x3d8>
 801918e:	234d      	movs	r3, #77	@ 0x4d
 8019190:	f1bb 0f00 	cmp.w	fp, #0
 8019194:	d107      	bne.n	80191a6 <_tzset_unlocked_r+0x3c6>
 8019196:	7223      	strb	r3, [r4, #8]
 8019198:	2103      	movs	r1, #3
 801919a:	2302      	movs	r3, #2
 801919c:	e9c4 1303 	strd	r1, r3, [r4, #12]
 80191a0:	f8c4 b014 	str.w	fp, [r4, #20]
 80191a4:	e767      	b.n	8019076 <_tzset_unlocked_r+0x296>
 80191a6:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 80191aa:	220b      	movs	r2, #11
 80191ac:	2301      	movs	r3, #1
 80191ae:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 80191b2:	2300      	movs	r3, #0
 80191b4:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80191b6:	e75e      	b.n	8019076 <_tzset_unlocked_r+0x296>
 80191b8:	b280      	uxth	r0, r0
 80191ba:	723b      	strb	r3, [r7, #8]
 80191bc:	6178      	str	r0, [r7, #20]
 80191be:	e75a      	b.n	8019076 <_tzset_unlocked_r+0x296>
 80191c0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80191c4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80191c8:	213c      	movs	r1, #60	@ 0x3c
 80191ca:	fb01 3302 	mla	r3, r1, r2, r3
 80191ce:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80191d2:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 80191d6:	fb01 3302 	mla	r3, r1, r2, r3
 80191da:	61bb      	str	r3, [r7, #24]
 80191dc:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80191de:	3728      	adds	r7, #40	@ 0x28
 80191e0:	444d      	add	r5, r9
 80191e2:	f1bb 0f00 	cmp.w	fp, #0
 80191e6:	d0bc      	beq.n	8019162 <_tzset_unlocked_r+0x382>
 80191e8:	9b04      	ldr	r3, [sp, #16]
 80191ea:	6523      	str	r3, [r4, #80]	@ 0x50
 80191ec:	4b0b      	ldr	r3, [pc, #44]	@ (801921c <_tzset_unlocked_r+0x43c>)
 80191ee:	f8c8 3000 	str.w	r3, [r8]
 80191f2:	6860      	ldr	r0, [r4, #4]
 80191f4:	4b07      	ldr	r3, [pc, #28]	@ (8019214 <_tzset_unlocked_r+0x434>)
 80191f6:	62a6      	str	r6, [r4, #40]	@ 0x28
 80191f8:	f8c8 3004 	str.w	r3, [r8, #4]
 80191fc:	f7ff fd34 	bl	8018c68 <__tzcalc_limits>
 8019200:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8019202:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8019204:	f8ca 2000 	str.w	r2, [sl]
 8019208:	1a9b      	subs	r3, r3, r2
 801920a:	4a05      	ldr	r2, [pc, #20]	@ (8019220 <_tzset_unlocked_r+0x440>)
 801920c:	bf18      	it	ne
 801920e:	2301      	movne	r3, #1
 8019210:	6013      	str	r3, [r2, #0]
 8019212:	e613      	b.n	8018e3c <_tzset_unlocked_r+0x5c>
 8019214:	24003e64 	.word	0x24003e64
 8019218:	0801eb1a 	.word	0x0801eb1a
 801921c:	24003e70 	.word	0x24003e70
 8019220:	24003e80 	.word	0x24003e80

08019224 <_localeconv_r>:
 8019224:	4800      	ldr	r0, [pc, #0]	@ (8019228 <_localeconv_r+0x4>)
 8019226:	4770      	bx	lr
 8019228:	240003b4 	.word	0x240003b4

0801922c <_close_r>:
 801922c:	b538      	push	{r3, r4, r5, lr}
 801922e:	4d06      	ldr	r5, [pc, #24]	@ (8019248 <_close_r+0x1c>)
 8019230:	2300      	movs	r3, #0
 8019232:	4604      	mov	r4, r0
 8019234:	4608      	mov	r0, r1
 8019236:	602b      	str	r3, [r5, #0]
 8019238:	f7eb ff90 	bl	800515c <_close>
 801923c:	1c43      	adds	r3, r0, #1
 801923e:	d102      	bne.n	8019246 <_close_r+0x1a>
 8019240:	682b      	ldr	r3, [r5, #0]
 8019242:	b103      	cbz	r3, 8019246 <_close_r+0x1a>
 8019244:	6023      	str	r3, [r4, #0]
 8019246:	bd38      	pop	{r3, r4, r5, pc}
 8019248:	24003e84 	.word	0x24003e84

0801924c <_lseek_r>:
 801924c:	b538      	push	{r3, r4, r5, lr}
 801924e:	4d07      	ldr	r5, [pc, #28]	@ (801926c <_lseek_r+0x20>)
 8019250:	4604      	mov	r4, r0
 8019252:	4608      	mov	r0, r1
 8019254:	4611      	mov	r1, r2
 8019256:	2200      	movs	r2, #0
 8019258:	602a      	str	r2, [r5, #0]
 801925a:	461a      	mov	r2, r3
 801925c:	f7eb ffa5 	bl	80051aa <_lseek>
 8019260:	1c43      	adds	r3, r0, #1
 8019262:	d102      	bne.n	801926a <_lseek_r+0x1e>
 8019264:	682b      	ldr	r3, [r5, #0]
 8019266:	b103      	cbz	r3, 801926a <_lseek_r+0x1e>
 8019268:	6023      	str	r3, [r4, #0]
 801926a:	bd38      	pop	{r3, r4, r5, pc}
 801926c:	24003e84 	.word	0x24003e84

08019270 <_read_r>:
 8019270:	b538      	push	{r3, r4, r5, lr}
 8019272:	4d07      	ldr	r5, [pc, #28]	@ (8019290 <_read_r+0x20>)
 8019274:	4604      	mov	r4, r0
 8019276:	4608      	mov	r0, r1
 8019278:	4611      	mov	r1, r2
 801927a:	2200      	movs	r2, #0
 801927c:	602a      	str	r2, [r5, #0]
 801927e:	461a      	mov	r2, r3
 8019280:	f7eb ff33 	bl	80050ea <_read>
 8019284:	1c43      	adds	r3, r0, #1
 8019286:	d102      	bne.n	801928e <_read_r+0x1e>
 8019288:	682b      	ldr	r3, [r5, #0]
 801928a:	b103      	cbz	r3, 801928e <_read_r+0x1e>
 801928c:	6023      	str	r3, [r4, #0]
 801928e:	bd38      	pop	{r3, r4, r5, pc}
 8019290:	24003e84 	.word	0x24003e84

08019294 <_write_r>:
 8019294:	b538      	push	{r3, r4, r5, lr}
 8019296:	4d07      	ldr	r5, [pc, #28]	@ (80192b4 <_write_r+0x20>)
 8019298:	4604      	mov	r4, r0
 801929a:	4608      	mov	r0, r1
 801929c:	4611      	mov	r1, r2
 801929e:	2200      	movs	r2, #0
 80192a0:	602a      	str	r2, [r5, #0]
 80192a2:	461a      	mov	r2, r3
 80192a4:	f7eb ff3e 	bl	8005124 <_write>
 80192a8:	1c43      	adds	r3, r0, #1
 80192aa:	d102      	bne.n	80192b2 <_write_r+0x1e>
 80192ac:	682b      	ldr	r3, [r5, #0]
 80192ae:	b103      	cbz	r3, 80192b2 <_write_r+0x1e>
 80192b0:	6023      	str	r3, [r4, #0]
 80192b2:	bd38      	pop	{r3, r4, r5, pc}
 80192b4:	24003e84 	.word	0x24003e84

080192b8 <__errno>:
 80192b8:	4b01      	ldr	r3, [pc, #4]	@ (80192c0 <__errno+0x8>)
 80192ba:	6818      	ldr	r0, [r3, #0]
 80192bc:	4770      	bx	lr
 80192be:	bf00      	nop
 80192c0:	24000430 	.word	0x24000430

080192c4 <__libc_init_array>:
 80192c4:	b570      	push	{r4, r5, r6, lr}
 80192c6:	4d0d      	ldr	r5, [pc, #52]	@ (80192fc <__libc_init_array+0x38>)
 80192c8:	4c0d      	ldr	r4, [pc, #52]	@ (8019300 <__libc_init_array+0x3c>)
 80192ca:	1b64      	subs	r4, r4, r5
 80192cc:	10a4      	asrs	r4, r4, #2
 80192ce:	2600      	movs	r6, #0
 80192d0:	42a6      	cmp	r6, r4
 80192d2:	d109      	bne.n	80192e8 <__libc_init_array+0x24>
 80192d4:	4d0b      	ldr	r5, [pc, #44]	@ (8019304 <__libc_init_array+0x40>)
 80192d6:	4c0c      	ldr	r4, [pc, #48]	@ (8019308 <__libc_init_array+0x44>)
 80192d8:	f003 f850 	bl	801c37c <_init>
 80192dc:	1b64      	subs	r4, r4, r5
 80192de:	10a4      	asrs	r4, r4, #2
 80192e0:	2600      	movs	r6, #0
 80192e2:	42a6      	cmp	r6, r4
 80192e4:	d105      	bne.n	80192f2 <__libc_init_array+0x2e>
 80192e6:	bd70      	pop	{r4, r5, r6, pc}
 80192e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80192ec:	4798      	blx	r3
 80192ee:	3601      	adds	r6, #1
 80192f0:	e7ee      	b.n	80192d0 <__libc_init_array+0xc>
 80192f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80192f6:	4798      	blx	r3
 80192f8:	3601      	adds	r6, #1
 80192fa:	e7f2      	b.n	80192e2 <__libc_init_array+0x1e>
 80192fc:	0801edf4 	.word	0x0801edf4
 8019300:	0801edf4 	.word	0x0801edf4
 8019304:	0801edf4 	.word	0x0801edf4
 8019308:	0801edf8 	.word	0x0801edf8

0801930c <__retarget_lock_init_recursive>:
 801930c:	4770      	bx	lr

0801930e <__retarget_lock_acquire>:
 801930e:	4770      	bx	lr

08019310 <__retarget_lock_acquire_recursive>:
 8019310:	4770      	bx	lr

08019312 <__retarget_lock_release>:
 8019312:	4770      	bx	lr

08019314 <__retarget_lock_release_recursive>:
 8019314:	4770      	bx	lr

08019316 <strcpy>:
 8019316:	4603      	mov	r3, r0
 8019318:	f811 2b01 	ldrb.w	r2, [r1], #1
 801931c:	f803 2b01 	strb.w	r2, [r3], #1
 8019320:	2a00      	cmp	r2, #0
 8019322:	d1f9      	bne.n	8019318 <strcpy+0x2>
 8019324:	4770      	bx	lr

08019326 <memcpy>:
 8019326:	440a      	add	r2, r1
 8019328:	4291      	cmp	r1, r2
 801932a:	f100 33ff 	add.w	r3, r0, #4294967295
 801932e:	d100      	bne.n	8019332 <memcpy+0xc>
 8019330:	4770      	bx	lr
 8019332:	b510      	push	{r4, lr}
 8019334:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019338:	f803 4f01 	strb.w	r4, [r3, #1]!
 801933c:	4291      	cmp	r1, r2
 801933e:	d1f9      	bne.n	8019334 <memcpy+0xe>
 8019340:	bd10      	pop	{r4, pc}
 8019342:	0000      	movs	r0, r0
 8019344:	0000      	movs	r0, r0
	...

08019348 <nan>:
 8019348:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8019350 <nan+0x8>
 801934c:	4770      	bx	lr
 801934e:	bf00      	nop
 8019350:	00000000 	.word	0x00000000
 8019354:	7ff80000 	.word	0x7ff80000

08019358 <nanf>:
 8019358:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8019360 <nanf+0x8>
 801935c:	4770      	bx	lr
 801935e:	bf00      	nop
 8019360:	7fc00000 	.word	0x7fc00000

08019364 <__assert_func>:
 8019364:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019366:	4614      	mov	r4, r2
 8019368:	461a      	mov	r2, r3
 801936a:	4b09      	ldr	r3, [pc, #36]	@ (8019390 <__assert_func+0x2c>)
 801936c:	681b      	ldr	r3, [r3, #0]
 801936e:	4605      	mov	r5, r0
 8019370:	68d8      	ldr	r0, [r3, #12]
 8019372:	b954      	cbnz	r4, 801938a <__assert_func+0x26>
 8019374:	4b07      	ldr	r3, [pc, #28]	@ (8019394 <__assert_func+0x30>)
 8019376:	461c      	mov	r4, r3
 8019378:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801937c:	9100      	str	r1, [sp, #0]
 801937e:	462b      	mov	r3, r5
 8019380:	4905      	ldr	r1, [pc, #20]	@ (8019398 <__assert_func+0x34>)
 8019382:	f002 fcdf 	bl	801bd44 <fiprintf>
 8019386:	f002 fe15 	bl	801bfb4 <abort>
 801938a:	4b04      	ldr	r3, [pc, #16]	@ (801939c <__assert_func+0x38>)
 801938c:	e7f4      	b.n	8019378 <__assert_func+0x14>
 801938e:	bf00      	nop
 8019390:	24000430 	.word	0x24000430
 8019394:	0801eb91 	.word	0x0801eb91
 8019398:	0801eb63 	.word	0x0801eb63
 801939c:	0801eb56 	.word	0x0801eb56

080193a0 <div>:
 80193a0:	b510      	push	{r4, lr}
 80193a2:	fb91 f4f2 	sdiv	r4, r1, r2
 80193a6:	fb02 1114 	mls	r1, r2, r4, r1
 80193aa:	6004      	str	r4, [r0, #0]
 80193ac:	6041      	str	r1, [r0, #4]
 80193ae:	bd10      	pop	{r4, pc}

080193b0 <quorem>:
 80193b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193b4:	6903      	ldr	r3, [r0, #16]
 80193b6:	690c      	ldr	r4, [r1, #16]
 80193b8:	42a3      	cmp	r3, r4
 80193ba:	4607      	mov	r7, r0
 80193bc:	db7e      	blt.n	80194bc <quorem+0x10c>
 80193be:	3c01      	subs	r4, #1
 80193c0:	f101 0814 	add.w	r8, r1, #20
 80193c4:	00a3      	lsls	r3, r4, #2
 80193c6:	f100 0514 	add.w	r5, r0, #20
 80193ca:	9300      	str	r3, [sp, #0]
 80193cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80193d0:	9301      	str	r3, [sp, #4]
 80193d2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80193d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80193da:	3301      	adds	r3, #1
 80193dc:	429a      	cmp	r2, r3
 80193de:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80193e2:	fbb2 f6f3 	udiv	r6, r2, r3
 80193e6:	d32e      	bcc.n	8019446 <quorem+0x96>
 80193e8:	f04f 0a00 	mov.w	sl, #0
 80193ec:	46c4      	mov	ip, r8
 80193ee:	46ae      	mov	lr, r5
 80193f0:	46d3      	mov	fp, sl
 80193f2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80193f6:	b298      	uxth	r0, r3
 80193f8:	fb06 a000 	mla	r0, r6, r0, sl
 80193fc:	0c02      	lsrs	r2, r0, #16
 80193fe:	0c1b      	lsrs	r3, r3, #16
 8019400:	fb06 2303 	mla	r3, r6, r3, r2
 8019404:	f8de 2000 	ldr.w	r2, [lr]
 8019408:	b280      	uxth	r0, r0
 801940a:	b292      	uxth	r2, r2
 801940c:	1a12      	subs	r2, r2, r0
 801940e:	445a      	add	r2, fp
 8019410:	f8de 0000 	ldr.w	r0, [lr]
 8019414:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8019418:	b29b      	uxth	r3, r3
 801941a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801941e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8019422:	b292      	uxth	r2, r2
 8019424:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8019428:	45e1      	cmp	r9, ip
 801942a:	f84e 2b04 	str.w	r2, [lr], #4
 801942e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8019432:	d2de      	bcs.n	80193f2 <quorem+0x42>
 8019434:	9b00      	ldr	r3, [sp, #0]
 8019436:	58eb      	ldr	r3, [r5, r3]
 8019438:	b92b      	cbnz	r3, 8019446 <quorem+0x96>
 801943a:	9b01      	ldr	r3, [sp, #4]
 801943c:	3b04      	subs	r3, #4
 801943e:	429d      	cmp	r5, r3
 8019440:	461a      	mov	r2, r3
 8019442:	d32f      	bcc.n	80194a4 <quorem+0xf4>
 8019444:	613c      	str	r4, [r7, #16]
 8019446:	4638      	mov	r0, r7
 8019448:	f001 fcec 	bl	801ae24 <__mcmp>
 801944c:	2800      	cmp	r0, #0
 801944e:	db25      	blt.n	801949c <quorem+0xec>
 8019450:	4629      	mov	r1, r5
 8019452:	2000      	movs	r0, #0
 8019454:	f858 2b04 	ldr.w	r2, [r8], #4
 8019458:	f8d1 c000 	ldr.w	ip, [r1]
 801945c:	fa1f fe82 	uxth.w	lr, r2
 8019460:	fa1f f38c 	uxth.w	r3, ip
 8019464:	eba3 030e 	sub.w	r3, r3, lr
 8019468:	4403      	add	r3, r0
 801946a:	0c12      	lsrs	r2, r2, #16
 801946c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8019470:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8019474:	b29b      	uxth	r3, r3
 8019476:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801947a:	45c1      	cmp	r9, r8
 801947c:	f841 3b04 	str.w	r3, [r1], #4
 8019480:	ea4f 4022 	mov.w	r0, r2, asr #16
 8019484:	d2e6      	bcs.n	8019454 <quorem+0xa4>
 8019486:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801948a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801948e:	b922      	cbnz	r2, 801949a <quorem+0xea>
 8019490:	3b04      	subs	r3, #4
 8019492:	429d      	cmp	r5, r3
 8019494:	461a      	mov	r2, r3
 8019496:	d30b      	bcc.n	80194b0 <quorem+0x100>
 8019498:	613c      	str	r4, [r7, #16]
 801949a:	3601      	adds	r6, #1
 801949c:	4630      	mov	r0, r6
 801949e:	b003      	add	sp, #12
 80194a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194a4:	6812      	ldr	r2, [r2, #0]
 80194a6:	3b04      	subs	r3, #4
 80194a8:	2a00      	cmp	r2, #0
 80194aa:	d1cb      	bne.n	8019444 <quorem+0x94>
 80194ac:	3c01      	subs	r4, #1
 80194ae:	e7c6      	b.n	801943e <quorem+0x8e>
 80194b0:	6812      	ldr	r2, [r2, #0]
 80194b2:	3b04      	subs	r3, #4
 80194b4:	2a00      	cmp	r2, #0
 80194b6:	d1ef      	bne.n	8019498 <quorem+0xe8>
 80194b8:	3c01      	subs	r4, #1
 80194ba:	e7ea      	b.n	8019492 <quorem+0xe2>
 80194bc:	2000      	movs	r0, #0
 80194be:	e7ee      	b.n	801949e <quorem+0xee>

080194c0 <_dtoa_r>:
 80194c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194c4:	ed2d 8b02 	vpush	{d8}
 80194c8:	69c7      	ldr	r7, [r0, #28]
 80194ca:	b091      	sub	sp, #68	@ 0x44
 80194cc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80194d0:	ec55 4b10 	vmov	r4, r5, d0
 80194d4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80194d6:	9107      	str	r1, [sp, #28]
 80194d8:	4681      	mov	r9, r0
 80194da:	9209      	str	r2, [sp, #36]	@ 0x24
 80194dc:	930d      	str	r3, [sp, #52]	@ 0x34
 80194de:	b97f      	cbnz	r7, 8019500 <_dtoa_r+0x40>
 80194e0:	2010      	movs	r0, #16
 80194e2:	f001 f90b 	bl	801a6fc <malloc>
 80194e6:	4602      	mov	r2, r0
 80194e8:	f8c9 001c 	str.w	r0, [r9, #28]
 80194ec:	b920      	cbnz	r0, 80194f8 <_dtoa_r+0x38>
 80194ee:	4ba0      	ldr	r3, [pc, #640]	@ (8019770 <_dtoa_r+0x2b0>)
 80194f0:	21ef      	movs	r1, #239	@ 0xef
 80194f2:	48a0      	ldr	r0, [pc, #640]	@ (8019774 <_dtoa_r+0x2b4>)
 80194f4:	f7ff ff36 	bl	8019364 <__assert_func>
 80194f8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80194fc:	6007      	str	r7, [r0, #0]
 80194fe:	60c7      	str	r7, [r0, #12]
 8019500:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8019504:	6819      	ldr	r1, [r3, #0]
 8019506:	b159      	cbz	r1, 8019520 <_dtoa_r+0x60>
 8019508:	685a      	ldr	r2, [r3, #4]
 801950a:	604a      	str	r2, [r1, #4]
 801950c:	2301      	movs	r3, #1
 801950e:	4093      	lsls	r3, r2
 8019510:	608b      	str	r3, [r1, #8]
 8019512:	4648      	mov	r0, r9
 8019514:	f001 fa02 	bl	801a91c <_Bfree>
 8019518:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801951c:	2200      	movs	r2, #0
 801951e:	601a      	str	r2, [r3, #0]
 8019520:	1e2b      	subs	r3, r5, #0
 8019522:	bfbb      	ittet	lt
 8019524:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8019528:	9303      	strlt	r3, [sp, #12]
 801952a:	2300      	movge	r3, #0
 801952c:	2201      	movlt	r2, #1
 801952e:	bfac      	ite	ge
 8019530:	6033      	strge	r3, [r6, #0]
 8019532:	6032      	strlt	r2, [r6, #0]
 8019534:	4b90      	ldr	r3, [pc, #576]	@ (8019778 <_dtoa_r+0x2b8>)
 8019536:	9e03      	ldr	r6, [sp, #12]
 8019538:	43b3      	bics	r3, r6
 801953a:	d110      	bne.n	801955e <_dtoa_r+0x9e>
 801953c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801953e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8019542:	6013      	str	r3, [r2, #0]
 8019544:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8019548:	4323      	orrs	r3, r4
 801954a:	f000 84de 	beq.w	8019f0a <_dtoa_r+0xa4a>
 801954e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019550:	4f8a      	ldr	r7, [pc, #552]	@ (801977c <_dtoa_r+0x2bc>)
 8019552:	2b00      	cmp	r3, #0
 8019554:	f000 84e0 	beq.w	8019f18 <_dtoa_r+0xa58>
 8019558:	1cfb      	adds	r3, r7, #3
 801955a:	f000 bcdb 	b.w	8019f14 <_dtoa_r+0xa54>
 801955e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8019562:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8019566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801956a:	d10a      	bne.n	8019582 <_dtoa_r+0xc2>
 801956c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801956e:	2301      	movs	r3, #1
 8019570:	6013      	str	r3, [r2, #0]
 8019572:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019574:	b113      	cbz	r3, 801957c <_dtoa_r+0xbc>
 8019576:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8019578:	4b81      	ldr	r3, [pc, #516]	@ (8019780 <_dtoa_r+0x2c0>)
 801957a:	6013      	str	r3, [r2, #0]
 801957c:	4f81      	ldr	r7, [pc, #516]	@ (8019784 <_dtoa_r+0x2c4>)
 801957e:	f000 bccb 	b.w	8019f18 <_dtoa_r+0xa58>
 8019582:	aa0e      	add	r2, sp, #56	@ 0x38
 8019584:	a90f      	add	r1, sp, #60	@ 0x3c
 8019586:	4648      	mov	r0, r9
 8019588:	eeb0 0b48 	vmov.f64	d0, d8
 801958c:	f001 fd6a 	bl	801b064 <__d2b>
 8019590:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8019594:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019596:	9001      	str	r0, [sp, #4]
 8019598:	2b00      	cmp	r3, #0
 801959a:	d045      	beq.n	8019628 <_dtoa_r+0x168>
 801959c:	eeb0 7b48 	vmov.f64	d7, d8
 80195a0:	ee18 1a90 	vmov	r1, s17
 80195a4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80195a8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80195ac:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80195b0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80195b4:	2500      	movs	r5, #0
 80195b6:	ee07 1a90 	vmov	s15, r1
 80195ba:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80195be:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8019758 <_dtoa_r+0x298>
 80195c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80195c6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8019760 <_dtoa_r+0x2a0>
 80195ca:	eea7 6b05 	vfma.f64	d6, d7, d5
 80195ce:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8019768 <_dtoa_r+0x2a8>
 80195d2:	ee07 3a90 	vmov	s15, r3
 80195d6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80195da:	eeb0 7b46 	vmov.f64	d7, d6
 80195de:	eea4 7b05 	vfma.f64	d7, d4, d5
 80195e2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80195e6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80195ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195ee:	ee16 8a90 	vmov	r8, s13
 80195f2:	d508      	bpl.n	8019606 <_dtoa_r+0x146>
 80195f4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80195f8:	eeb4 6b47 	vcmp.f64	d6, d7
 80195fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019600:	bf18      	it	ne
 8019602:	f108 38ff 	addne.w	r8, r8, #4294967295
 8019606:	f1b8 0f16 	cmp.w	r8, #22
 801960a:	d82b      	bhi.n	8019664 <_dtoa_r+0x1a4>
 801960c:	495e      	ldr	r1, [pc, #376]	@ (8019788 <_dtoa_r+0x2c8>)
 801960e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8019612:	ed91 7b00 	vldr	d7, [r1]
 8019616:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801961a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801961e:	d501      	bpl.n	8019624 <_dtoa_r+0x164>
 8019620:	f108 38ff 	add.w	r8, r8, #4294967295
 8019624:	2100      	movs	r1, #0
 8019626:	e01e      	b.n	8019666 <_dtoa_r+0x1a6>
 8019628:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801962a:	4413      	add	r3, r2
 801962c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8019630:	2920      	cmp	r1, #32
 8019632:	bfc1      	itttt	gt
 8019634:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8019638:	408e      	lslgt	r6, r1
 801963a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801963e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8019642:	bfd6      	itet	le
 8019644:	f1c1 0120 	rsble	r1, r1, #32
 8019648:	4331      	orrgt	r1, r6
 801964a:	fa04 f101 	lslle.w	r1, r4, r1
 801964e:	ee07 1a90 	vmov	s15, r1
 8019652:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8019656:	3b01      	subs	r3, #1
 8019658:	ee17 1a90 	vmov	r1, s15
 801965c:	2501      	movs	r5, #1
 801965e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8019662:	e7a8      	b.n	80195b6 <_dtoa_r+0xf6>
 8019664:	2101      	movs	r1, #1
 8019666:	1ad2      	subs	r2, r2, r3
 8019668:	1e53      	subs	r3, r2, #1
 801966a:	9306      	str	r3, [sp, #24]
 801966c:	bf45      	ittet	mi
 801966e:	f1c2 0301 	rsbmi	r3, r2, #1
 8019672:	9305      	strmi	r3, [sp, #20]
 8019674:	2300      	movpl	r3, #0
 8019676:	2300      	movmi	r3, #0
 8019678:	bf4c      	ite	mi
 801967a:	9306      	strmi	r3, [sp, #24]
 801967c:	9305      	strpl	r3, [sp, #20]
 801967e:	f1b8 0f00 	cmp.w	r8, #0
 8019682:	910c      	str	r1, [sp, #48]	@ 0x30
 8019684:	db18      	blt.n	80196b8 <_dtoa_r+0x1f8>
 8019686:	9b06      	ldr	r3, [sp, #24]
 8019688:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801968c:	4443      	add	r3, r8
 801968e:	9306      	str	r3, [sp, #24]
 8019690:	2300      	movs	r3, #0
 8019692:	9a07      	ldr	r2, [sp, #28]
 8019694:	2a09      	cmp	r2, #9
 8019696:	d849      	bhi.n	801972c <_dtoa_r+0x26c>
 8019698:	2a05      	cmp	r2, #5
 801969a:	bfc4      	itt	gt
 801969c:	3a04      	subgt	r2, #4
 801969e:	9207      	strgt	r2, [sp, #28]
 80196a0:	9a07      	ldr	r2, [sp, #28]
 80196a2:	f1a2 0202 	sub.w	r2, r2, #2
 80196a6:	bfcc      	ite	gt
 80196a8:	2400      	movgt	r4, #0
 80196aa:	2401      	movle	r4, #1
 80196ac:	2a03      	cmp	r2, #3
 80196ae:	d848      	bhi.n	8019742 <_dtoa_r+0x282>
 80196b0:	e8df f002 	tbb	[pc, r2]
 80196b4:	3a2c2e0b 	.word	0x3a2c2e0b
 80196b8:	9b05      	ldr	r3, [sp, #20]
 80196ba:	2200      	movs	r2, #0
 80196bc:	eba3 0308 	sub.w	r3, r3, r8
 80196c0:	9305      	str	r3, [sp, #20]
 80196c2:	920a      	str	r2, [sp, #40]	@ 0x28
 80196c4:	f1c8 0300 	rsb	r3, r8, #0
 80196c8:	e7e3      	b.n	8019692 <_dtoa_r+0x1d2>
 80196ca:	2200      	movs	r2, #0
 80196cc:	9208      	str	r2, [sp, #32]
 80196ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80196d0:	2a00      	cmp	r2, #0
 80196d2:	dc39      	bgt.n	8019748 <_dtoa_r+0x288>
 80196d4:	f04f 0b01 	mov.w	fp, #1
 80196d8:	46da      	mov	sl, fp
 80196da:	465a      	mov	r2, fp
 80196dc:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80196e0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80196e4:	2100      	movs	r1, #0
 80196e6:	2004      	movs	r0, #4
 80196e8:	f100 0614 	add.w	r6, r0, #20
 80196ec:	4296      	cmp	r6, r2
 80196ee:	d930      	bls.n	8019752 <_dtoa_r+0x292>
 80196f0:	6079      	str	r1, [r7, #4]
 80196f2:	4648      	mov	r0, r9
 80196f4:	9304      	str	r3, [sp, #16]
 80196f6:	f001 f8d1 	bl	801a89c <_Balloc>
 80196fa:	9b04      	ldr	r3, [sp, #16]
 80196fc:	4607      	mov	r7, r0
 80196fe:	2800      	cmp	r0, #0
 8019700:	d146      	bne.n	8019790 <_dtoa_r+0x2d0>
 8019702:	4b22      	ldr	r3, [pc, #136]	@ (801978c <_dtoa_r+0x2cc>)
 8019704:	4602      	mov	r2, r0
 8019706:	f240 11af 	movw	r1, #431	@ 0x1af
 801970a:	e6f2      	b.n	80194f2 <_dtoa_r+0x32>
 801970c:	2201      	movs	r2, #1
 801970e:	e7dd      	b.n	80196cc <_dtoa_r+0x20c>
 8019710:	2200      	movs	r2, #0
 8019712:	9208      	str	r2, [sp, #32]
 8019714:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019716:	eb08 0b02 	add.w	fp, r8, r2
 801971a:	f10b 0a01 	add.w	sl, fp, #1
 801971e:	4652      	mov	r2, sl
 8019720:	2a01      	cmp	r2, #1
 8019722:	bfb8      	it	lt
 8019724:	2201      	movlt	r2, #1
 8019726:	e7db      	b.n	80196e0 <_dtoa_r+0x220>
 8019728:	2201      	movs	r2, #1
 801972a:	e7f2      	b.n	8019712 <_dtoa_r+0x252>
 801972c:	2401      	movs	r4, #1
 801972e:	2200      	movs	r2, #0
 8019730:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8019734:	f04f 3bff 	mov.w	fp, #4294967295
 8019738:	2100      	movs	r1, #0
 801973a:	46da      	mov	sl, fp
 801973c:	2212      	movs	r2, #18
 801973e:	9109      	str	r1, [sp, #36]	@ 0x24
 8019740:	e7ce      	b.n	80196e0 <_dtoa_r+0x220>
 8019742:	2201      	movs	r2, #1
 8019744:	9208      	str	r2, [sp, #32]
 8019746:	e7f5      	b.n	8019734 <_dtoa_r+0x274>
 8019748:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801974c:	46da      	mov	sl, fp
 801974e:	465a      	mov	r2, fp
 8019750:	e7c6      	b.n	80196e0 <_dtoa_r+0x220>
 8019752:	3101      	adds	r1, #1
 8019754:	0040      	lsls	r0, r0, #1
 8019756:	e7c7      	b.n	80196e8 <_dtoa_r+0x228>
 8019758:	636f4361 	.word	0x636f4361
 801975c:	3fd287a7 	.word	0x3fd287a7
 8019760:	8b60c8b3 	.word	0x8b60c8b3
 8019764:	3fc68a28 	.word	0x3fc68a28
 8019768:	509f79fb 	.word	0x509f79fb
 801976c:	3fd34413 	.word	0x3fd34413
 8019770:	0801e840 	.word	0x0801e840
 8019774:	0801eb9f 	.word	0x0801eb9f
 8019778:	7ff00000 	.word	0x7ff00000
 801977c:	0801eb9b 	.word	0x0801eb9b
 8019780:	0801ede8 	.word	0x0801ede8
 8019784:	0801ede7 	.word	0x0801ede7
 8019788:	0801ecf8 	.word	0x0801ecf8
 801978c:	0801ebf7 	.word	0x0801ebf7
 8019790:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8019794:	f1ba 0f0e 	cmp.w	sl, #14
 8019798:	6010      	str	r0, [r2, #0]
 801979a:	d86f      	bhi.n	801987c <_dtoa_r+0x3bc>
 801979c:	2c00      	cmp	r4, #0
 801979e:	d06d      	beq.n	801987c <_dtoa_r+0x3bc>
 80197a0:	f1b8 0f00 	cmp.w	r8, #0
 80197a4:	f340 80c2 	ble.w	801992c <_dtoa_r+0x46c>
 80197a8:	4aca      	ldr	r2, [pc, #808]	@ (8019ad4 <_dtoa_r+0x614>)
 80197aa:	f008 010f 	and.w	r1, r8, #15
 80197ae:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80197b2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80197b6:	ed92 7b00 	vldr	d7, [r2]
 80197ba:	ea4f 1128 	mov.w	r1, r8, asr #4
 80197be:	f000 80a9 	beq.w	8019914 <_dtoa_r+0x454>
 80197c2:	4ac5      	ldr	r2, [pc, #788]	@ (8019ad8 <_dtoa_r+0x618>)
 80197c4:	ed92 6b08 	vldr	d6, [r2, #32]
 80197c8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80197cc:	ed8d 6b02 	vstr	d6, [sp, #8]
 80197d0:	f001 010f 	and.w	r1, r1, #15
 80197d4:	2203      	movs	r2, #3
 80197d6:	48c0      	ldr	r0, [pc, #768]	@ (8019ad8 <_dtoa_r+0x618>)
 80197d8:	2900      	cmp	r1, #0
 80197da:	f040 809d 	bne.w	8019918 <_dtoa_r+0x458>
 80197de:	ed9d 6b02 	vldr	d6, [sp, #8]
 80197e2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80197e6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80197ea:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80197ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 80197f0:	2900      	cmp	r1, #0
 80197f2:	f000 80c1 	beq.w	8019978 <_dtoa_r+0x4b8>
 80197f6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80197fa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80197fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019802:	f140 80b9 	bpl.w	8019978 <_dtoa_r+0x4b8>
 8019806:	f1ba 0f00 	cmp.w	sl, #0
 801980a:	f000 80b5 	beq.w	8019978 <_dtoa_r+0x4b8>
 801980e:	f1bb 0f00 	cmp.w	fp, #0
 8019812:	dd31      	ble.n	8019878 <_dtoa_r+0x3b8>
 8019814:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8019818:	ee27 7b06 	vmul.f64	d7, d7, d6
 801981c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019820:	f108 31ff 	add.w	r1, r8, #4294967295
 8019824:	9104      	str	r1, [sp, #16]
 8019826:	3201      	adds	r2, #1
 8019828:	465c      	mov	r4, fp
 801982a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801982e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8019832:	ee07 2a90 	vmov	s15, r2
 8019836:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801983a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801983e:	ee15 2a90 	vmov	r2, s11
 8019842:	ec51 0b15 	vmov	r0, r1, d5
 8019846:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801984a:	2c00      	cmp	r4, #0
 801984c:	f040 8098 	bne.w	8019980 <_dtoa_r+0x4c0>
 8019850:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8019854:	ee36 6b47 	vsub.f64	d6, d6, d7
 8019858:	ec41 0b17 	vmov	d7, r0, r1
 801985c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019864:	f300 8261 	bgt.w	8019d2a <_dtoa_r+0x86a>
 8019868:	eeb1 7b47 	vneg.f64	d7, d7
 801986c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019874:	f100 80f5 	bmi.w	8019a62 <_dtoa_r+0x5a2>
 8019878:	ed8d 8b02 	vstr	d8, [sp, #8]
 801987c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801987e:	2a00      	cmp	r2, #0
 8019880:	f2c0 812c 	blt.w	8019adc <_dtoa_r+0x61c>
 8019884:	f1b8 0f0e 	cmp.w	r8, #14
 8019888:	f300 8128 	bgt.w	8019adc <_dtoa_r+0x61c>
 801988c:	4b91      	ldr	r3, [pc, #580]	@ (8019ad4 <_dtoa_r+0x614>)
 801988e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8019892:	ed93 6b00 	vldr	d6, [r3]
 8019896:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019898:	2b00      	cmp	r3, #0
 801989a:	da03      	bge.n	80198a4 <_dtoa_r+0x3e4>
 801989c:	f1ba 0f00 	cmp.w	sl, #0
 80198a0:	f340 80d2 	ble.w	8019a48 <_dtoa_r+0x588>
 80198a4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80198a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80198ac:	463e      	mov	r6, r7
 80198ae:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80198b2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80198b6:	ee15 3a10 	vmov	r3, s10
 80198ba:	3330      	adds	r3, #48	@ 0x30
 80198bc:	f806 3b01 	strb.w	r3, [r6], #1
 80198c0:	1bf3      	subs	r3, r6, r7
 80198c2:	459a      	cmp	sl, r3
 80198c4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80198c8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80198cc:	f040 80f8 	bne.w	8019ac0 <_dtoa_r+0x600>
 80198d0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80198d4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80198d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198dc:	f300 80dd 	bgt.w	8019a9a <_dtoa_r+0x5da>
 80198e0:	eeb4 7b46 	vcmp.f64	d7, d6
 80198e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198e8:	d104      	bne.n	80198f4 <_dtoa_r+0x434>
 80198ea:	ee15 3a10 	vmov	r3, s10
 80198ee:	07db      	lsls	r3, r3, #31
 80198f0:	f100 80d3 	bmi.w	8019a9a <_dtoa_r+0x5da>
 80198f4:	9901      	ldr	r1, [sp, #4]
 80198f6:	4648      	mov	r0, r9
 80198f8:	f001 f810 	bl	801a91c <_Bfree>
 80198fc:	2300      	movs	r3, #0
 80198fe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019900:	7033      	strb	r3, [r6, #0]
 8019902:	f108 0301 	add.w	r3, r8, #1
 8019906:	6013      	str	r3, [r2, #0]
 8019908:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801990a:	2b00      	cmp	r3, #0
 801990c:	f000 8304 	beq.w	8019f18 <_dtoa_r+0xa58>
 8019910:	601e      	str	r6, [r3, #0]
 8019912:	e301      	b.n	8019f18 <_dtoa_r+0xa58>
 8019914:	2202      	movs	r2, #2
 8019916:	e75e      	b.n	80197d6 <_dtoa_r+0x316>
 8019918:	07cc      	lsls	r4, r1, #31
 801991a:	d504      	bpl.n	8019926 <_dtoa_r+0x466>
 801991c:	ed90 6b00 	vldr	d6, [r0]
 8019920:	3201      	adds	r2, #1
 8019922:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019926:	1049      	asrs	r1, r1, #1
 8019928:	3008      	adds	r0, #8
 801992a:	e755      	b.n	80197d8 <_dtoa_r+0x318>
 801992c:	d022      	beq.n	8019974 <_dtoa_r+0x4b4>
 801992e:	f1c8 0100 	rsb	r1, r8, #0
 8019932:	4a68      	ldr	r2, [pc, #416]	@ (8019ad4 <_dtoa_r+0x614>)
 8019934:	f001 000f 	and.w	r0, r1, #15
 8019938:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801993c:	ed92 7b00 	vldr	d7, [r2]
 8019940:	ee28 7b07 	vmul.f64	d7, d8, d7
 8019944:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019948:	4863      	ldr	r0, [pc, #396]	@ (8019ad8 <_dtoa_r+0x618>)
 801994a:	1109      	asrs	r1, r1, #4
 801994c:	2400      	movs	r4, #0
 801994e:	2202      	movs	r2, #2
 8019950:	b929      	cbnz	r1, 801995e <_dtoa_r+0x49e>
 8019952:	2c00      	cmp	r4, #0
 8019954:	f43f af49 	beq.w	80197ea <_dtoa_r+0x32a>
 8019958:	ed8d 7b02 	vstr	d7, [sp, #8]
 801995c:	e745      	b.n	80197ea <_dtoa_r+0x32a>
 801995e:	07ce      	lsls	r6, r1, #31
 8019960:	d505      	bpl.n	801996e <_dtoa_r+0x4ae>
 8019962:	ed90 6b00 	vldr	d6, [r0]
 8019966:	3201      	adds	r2, #1
 8019968:	2401      	movs	r4, #1
 801996a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801996e:	1049      	asrs	r1, r1, #1
 8019970:	3008      	adds	r0, #8
 8019972:	e7ed      	b.n	8019950 <_dtoa_r+0x490>
 8019974:	2202      	movs	r2, #2
 8019976:	e738      	b.n	80197ea <_dtoa_r+0x32a>
 8019978:	f8cd 8010 	str.w	r8, [sp, #16]
 801997c:	4654      	mov	r4, sl
 801997e:	e754      	b.n	801982a <_dtoa_r+0x36a>
 8019980:	4a54      	ldr	r2, [pc, #336]	@ (8019ad4 <_dtoa_r+0x614>)
 8019982:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8019986:	ed12 4b02 	vldr	d4, [r2, #-8]
 801998a:	9a08      	ldr	r2, [sp, #32]
 801998c:	ec41 0b17 	vmov	d7, r0, r1
 8019990:	443c      	add	r4, r7
 8019992:	b34a      	cbz	r2, 80199e8 <_dtoa_r+0x528>
 8019994:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8019998:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 801999c:	463e      	mov	r6, r7
 801999e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80199a2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80199a6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80199aa:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80199ae:	ee14 2a90 	vmov	r2, s9
 80199b2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80199b6:	3230      	adds	r2, #48	@ 0x30
 80199b8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80199bc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80199c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199c4:	f806 2b01 	strb.w	r2, [r6], #1
 80199c8:	d438      	bmi.n	8019a3c <_dtoa_r+0x57c>
 80199ca:	ee32 5b46 	vsub.f64	d5, d2, d6
 80199ce:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80199d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199d6:	d462      	bmi.n	8019a9e <_dtoa_r+0x5de>
 80199d8:	42a6      	cmp	r6, r4
 80199da:	f43f af4d 	beq.w	8019878 <_dtoa_r+0x3b8>
 80199de:	ee27 7b03 	vmul.f64	d7, d7, d3
 80199e2:	ee26 6b03 	vmul.f64	d6, d6, d3
 80199e6:	e7e0      	b.n	80199aa <_dtoa_r+0x4ea>
 80199e8:	4621      	mov	r1, r4
 80199ea:	463e      	mov	r6, r7
 80199ec:	ee27 7b04 	vmul.f64	d7, d7, d4
 80199f0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80199f4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80199f8:	ee14 2a90 	vmov	r2, s9
 80199fc:	3230      	adds	r2, #48	@ 0x30
 80199fe:	f806 2b01 	strb.w	r2, [r6], #1
 8019a02:	42a6      	cmp	r6, r4
 8019a04:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8019a08:	ee36 6b45 	vsub.f64	d6, d6, d5
 8019a0c:	d119      	bne.n	8019a42 <_dtoa_r+0x582>
 8019a0e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8019a12:	ee37 4b05 	vadd.f64	d4, d7, d5
 8019a16:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8019a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a1e:	dc3e      	bgt.n	8019a9e <_dtoa_r+0x5de>
 8019a20:	ee35 5b47 	vsub.f64	d5, d5, d7
 8019a24:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8019a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a2c:	f57f af24 	bpl.w	8019878 <_dtoa_r+0x3b8>
 8019a30:	460e      	mov	r6, r1
 8019a32:	3901      	subs	r1, #1
 8019a34:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8019a38:	2b30      	cmp	r3, #48	@ 0x30
 8019a3a:	d0f9      	beq.n	8019a30 <_dtoa_r+0x570>
 8019a3c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8019a40:	e758      	b.n	80198f4 <_dtoa_r+0x434>
 8019a42:	ee26 6b03 	vmul.f64	d6, d6, d3
 8019a46:	e7d5      	b.n	80199f4 <_dtoa_r+0x534>
 8019a48:	d10b      	bne.n	8019a62 <_dtoa_r+0x5a2>
 8019a4a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8019a4e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8019a52:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019a56:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a5e:	f2c0 8161 	blt.w	8019d24 <_dtoa_r+0x864>
 8019a62:	2400      	movs	r4, #0
 8019a64:	4625      	mov	r5, r4
 8019a66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019a68:	43db      	mvns	r3, r3
 8019a6a:	9304      	str	r3, [sp, #16]
 8019a6c:	463e      	mov	r6, r7
 8019a6e:	f04f 0800 	mov.w	r8, #0
 8019a72:	4621      	mov	r1, r4
 8019a74:	4648      	mov	r0, r9
 8019a76:	f000 ff51 	bl	801a91c <_Bfree>
 8019a7a:	2d00      	cmp	r5, #0
 8019a7c:	d0de      	beq.n	8019a3c <_dtoa_r+0x57c>
 8019a7e:	f1b8 0f00 	cmp.w	r8, #0
 8019a82:	d005      	beq.n	8019a90 <_dtoa_r+0x5d0>
 8019a84:	45a8      	cmp	r8, r5
 8019a86:	d003      	beq.n	8019a90 <_dtoa_r+0x5d0>
 8019a88:	4641      	mov	r1, r8
 8019a8a:	4648      	mov	r0, r9
 8019a8c:	f000 ff46 	bl	801a91c <_Bfree>
 8019a90:	4629      	mov	r1, r5
 8019a92:	4648      	mov	r0, r9
 8019a94:	f000 ff42 	bl	801a91c <_Bfree>
 8019a98:	e7d0      	b.n	8019a3c <_dtoa_r+0x57c>
 8019a9a:	f8cd 8010 	str.w	r8, [sp, #16]
 8019a9e:	4633      	mov	r3, r6
 8019aa0:	461e      	mov	r6, r3
 8019aa2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019aa6:	2a39      	cmp	r2, #57	@ 0x39
 8019aa8:	d106      	bne.n	8019ab8 <_dtoa_r+0x5f8>
 8019aaa:	429f      	cmp	r7, r3
 8019aac:	d1f8      	bne.n	8019aa0 <_dtoa_r+0x5e0>
 8019aae:	9a04      	ldr	r2, [sp, #16]
 8019ab0:	3201      	adds	r2, #1
 8019ab2:	9204      	str	r2, [sp, #16]
 8019ab4:	2230      	movs	r2, #48	@ 0x30
 8019ab6:	703a      	strb	r2, [r7, #0]
 8019ab8:	781a      	ldrb	r2, [r3, #0]
 8019aba:	3201      	adds	r2, #1
 8019abc:	701a      	strb	r2, [r3, #0]
 8019abe:	e7bd      	b.n	8019a3c <_dtoa_r+0x57c>
 8019ac0:	ee27 7b04 	vmul.f64	d7, d7, d4
 8019ac4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019acc:	f47f aeef 	bne.w	80198ae <_dtoa_r+0x3ee>
 8019ad0:	e710      	b.n	80198f4 <_dtoa_r+0x434>
 8019ad2:	bf00      	nop
 8019ad4:	0801ecf8 	.word	0x0801ecf8
 8019ad8:	0801ecd0 	.word	0x0801ecd0
 8019adc:	9908      	ldr	r1, [sp, #32]
 8019ade:	2900      	cmp	r1, #0
 8019ae0:	f000 80e3 	beq.w	8019caa <_dtoa_r+0x7ea>
 8019ae4:	9907      	ldr	r1, [sp, #28]
 8019ae6:	2901      	cmp	r1, #1
 8019ae8:	f300 80c8 	bgt.w	8019c7c <_dtoa_r+0x7bc>
 8019aec:	2d00      	cmp	r5, #0
 8019aee:	f000 80c1 	beq.w	8019c74 <_dtoa_r+0x7b4>
 8019af2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8019af6:	9e05      	ldr	r6, [sp, #20]
 8019af8:	461c      	mov	r4, r3
 8019afa:	9304      	str	r3, [sp, #16]
 8019afc:	9b05      	ldr	r3, [sp, #20]
 8019afe:	4413      	add	r3, r2
 8019b00:	9305      	str	r3, [sp, #20]
 8019b02:	9b06      	ldr	r3, [sp, #24]
 8019b04:	2101      	movs	r1, #1
 8019b06:	4413      	add	r3, r2
 8019b08:	4648      	mov	r0, r9
 8019b0a:	9306      	str	r3, [sp, #24]
 8019b0c:	f001 f804 	bl	801ab18 <__i2b>
 8019b10:	9b04      	ldr	r3, [sp, #16]
 8019b12:	4605      	mov	r5, r0
 8019b14:	b166      	cbz	r6, 8019b30 <_dtoa_r+0x670>
 8019b16:	9a06      	ldr	r2, [sp, #24]
 8019b18:	2a00      	cmp	r2, #0
 8019b1a:	dd09      	ble.n	8019b30 <_dtoa_r+0x670>
 8019b1c:	42b2      	cmp	r2, r6
 8019b1e:	9905      	ldr	r1, [sp, #20]
 8019b20:	bfa8      	it	ge
 8019b22:	4632      	movge	r2, r6
 8019b24:	1a89      	subs	r1, r1, r2
 8019b26:	9105      	str	r1, [sp, #20]
 8019b28:	9906      	ldr	r1, [sp, #24]
 8019b2a:	1ab6      	subs	r6, r6, r2
 8019b2c:	1a8a      	subs	r2, r1, r2
 8019b2e:	9206      	str	r2, [sp, #24]
 8019b30:	b1fb      	cbz	r3, 8019b72 <_dtoa_r+0x6b2>
 8019b32:	9a08      	ldr	r2, [sp, #32]
 8019b34:	2a00      	cmp	r2, #0
 8019b36:	f000 80bc 	beq.w	8019cb2 <_dtoa_r+0x7f2>
 8019b3a:	b19c      	cbz	r4, 8019b64 <_dtoa_r+0x6a4>
 8019b3c:	4629      	mov	r1, r5
 8019b3e:	4622      	mov	r2, r4
 8019b40:	4648      	mov	r0, r9
 8019b42:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019b44:	f001 f8a8 	bl	801ac98 <__pow5mult>
 8019b48:	9a01      	ldr	r2, [sp, #4]
 8019b4a:	4601      	mov	r1, r0
 8019b4c:	4605      	mov	r5, r0
 8019b4e:	4648      	mov	r0, r9
 8019b50:	f000 fff8 	bl	801ab44 <__multiply>
 8019b54:	9901      	ldr	r1, [sp, #4]
 8019b56:	9004      	str	r0, [sp, #16]
 8019b58:	4648      	mov	r0, r9
 8019b5a:	f000 fedf 	bl	801a91c <_Bfree>
 8019b5e:	9a04      	ldr	r2, [sp, #16]
 8019b60:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019b62:	9201      	str	r2, [sp, #4]
 8019b64:	1b1a      	subs	r2, r3, r4
 8019b66:	d004      	beq.n	8019b72 <_dtoa_r+0x6b2>
 8019b68:	9901      	ldr	r1, [sp, #4]
 8019b6a:	4648      	mov	r0, r9
 8019b6c:	f001 f894 	bl	801ac98 <__pow5mult>
 8019b70:	9001      	str	r0, [sp, #4]
 8019b72:	2101      	movs	r1, #1
 8019b74:	4648      	mov	r0, r9
 8019b76:	f000 ffcf 	bl	801ab18 <__i2b>
 8019b7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019b7c:	4604      	mov	r4, r0
 8019b7e:	2b00      	cmp	r3, #0
 8019b80:	f000 81d0 	beq.w	8019f24 <_dtoa_r+0xa64>
 8019b84:	461a      	mov	r2, r3
 8019b86:	4601      	mov	r1, r0
 8019b88:	4648      	mov	r0, r9
 8019b8a:	f001 f885 	bl	801ac98 <__pow5mult>
 8019b8e:	9b07      	ldr	r3, [sp, #28]
 8019b90:	2b01      	cmp	r3, #1
 8019b92:	4604      	mov	r4, r0
 8019b94:	f300 8095 	bgt.w	8019cc2 <_dtoa_r+0x802>
 8019b98:	9b02      	ldr	r3, [sp, #8]
 8019b9a:	2b00      	cmp	r3, #0
 8019b9c:	f040 808b 	bne.w	8019cb6 <_dtoa_r+0x7f6>
 8019ba0:	9b03      	ldr	r3, [sp, #12]
 8019ba2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8019ba6:	2a00      	cmp	r2, #0
 8019ba8:	f040 8087 	bne.w	8019cba <_dtoa_r+0x7fa>
 8019bac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8019bb0:	0d12      	lsrs	r2, r2, #20
 8019bb2:	0512      	lsls	r2, r2, #20
 8019bb4:	2a00      	cmp	r2, #0
 8019bb6:	f000 8082 	beq.w	8019cbe <_dtoa_r+0x7fe>
 8019bba:	9b05      	ldr	r3, [sp, #20]
 8019bbc:	3301      	adds	r3, #1
 8019bbe:	9305      	str	r3, [sp, #20]
 8019bc0:	9b06      	ldr	r3, [sp, #24]
 8019bc2:	3301      	adds	r3, #1
 8019bc4:	9306      	str	r3, [sp, #24]
 8019bc6:	2301      	movs	r3, #1
 8019bc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019bca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019bcc:	2b00      	cmp	r3, #0
 8019bce:	f000 81af 	beq.w	8019f30 <_dtoa_r+0xa70>
 8019bd2:	6922      	ldr	r2, [r4, #16]
 8019bd4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8019bd8:	6910      	ldr	r0, [r2, #16]
 8019bda:	f000 ff51 	bl	801aa80 <__hi0bits>
 8019bde:	f1c0 0020 	rsb	r0, r0, #32
 8019be2:	9b06      	ldr	r3, [sp, #24]
 8019be4:	4418      	add	r0, r3
 8019be6:	f010 001f 	ands.w	r0, r0, #31
 8019bea:	d076      	beq.n	8019cda <_dtoa_r+0x81a>
 8019bec:	f1c0 0220 	rsb	r2, r0, #32
 8019bf0:	2a04      	cmp	r2, #4
 8019bf2:	dd69      	ble.n	8019cc8 <_dtoa_r+0x808>
 8019bf4:	9b05      	ldr	r3, [sp, #20]
 8019bf6:	f1c0 001c 	rsb	r0, r0, #28
 8019bfa:	4403      	add	r3, r0
 8019bfc:	9305      	str	r3, [sp, #20]
 8019bfe:	9b06      	ldr	r3, [sp, #24]
 8019c00:	4406      	add	r6, r0
 8019c02:	4403      	add	r3, r0
 8019c04:	9306      	str	r3, [sp, #24]
 8019c06:	9b05      	ldr	r3, [sp, #20]
 8019c08:	2b00      	cmp	r3, #0
 8019c0a:	dd05      	ble.n	8019c18 <_dtoa_r+0x758>
 8019c0c:	9901      	ldr	r1, [sp, #4]
 8019c0e:	461a      	mov	r2, r3
 8019c10:	4648      	mov	r0, r9
 8019c12:	f001 f89b 	bl	801ad4c <__lshift>
 8019c16:	9001      	str	r0, [sp, #4]
 8019c18:	9b06      	ldr	r3, [sp, #24]
 8019c1a:	2b00      	cmp	r3, #0
 8019c1c:	dd05      	ble.n	8019c2a <_dtoa_r+0x76a>
 8019c1e:	4621      	mov	r1, r4
 8019c20:	461a      	mov	r2, r3
 8019c22:	4648      	mov	r0, r9
 8019c24:	f001 f892 	bl	801ad4c <__lshift>
 8019c28:	4604      	mov	r4, r0
 8019c2a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019c2c:	2b00      	cmp	r3, #0
 8019c2e:	d056      	beq.n	8019cde <_dtoa_r+0x81e>
 8019c30:	9801      	ldr	r0, [sp, #4]
 8019c32:	4621      	mov	r1, r4
 8019c34:	f001 f8f6 	bl	801ae24 <__mcmp>
 8019c38:	2800      	cmp	r0, #0
 8019c3a:	da50      	bge.n	8019cde <_dtoa_r+0x81e>
 8019c3c:	f108 33ff 	add.w	r3, r8, #4294967295
 8019c40:	9304      	str	r3, [sp, #16]
 8019c42:	9901      	ldr	r1, [sp, #4]
 8019c44:	2300      	movs	r3, #0
 8019c46:	220a      	movs	r2, #10
 8019c48:	4648      	mov	r0, r9
 8019c4a:	f000 fe89 	bl	801a960 <__multadd>
 8019c4e:	9b08      	ldr	r3, [sp, #32]
 8019c50:	9001      	str	r0, [sp, #4]
 8019c52:	2b00      	cmp	r3, #0
 8019c54:	f000 816e 	beq.w	8019f34 <_dtoa_r+0xa74>
 8019c58:	4629      	mov	r1, r5
 8019c5a:	2300      	movs	r3, #0
 8019c5c:	220a      	movs	r2, #10
 8019c5e:	4648      	mov	r0, r9
 8019c60:	f000 fe7e 	bl	801a960 <__multadd>
 8019c64:	f1bb 0f00 	cmp.w	fp, #0
 8019c68:	4605      	mov	r5, r0
 8019c6a:	dc64      	bgt.n	8019d36 <_dtoa_r+0x876>
 8019c6c:	9b07      	ldr	r3, [sp, #28]
 8019c6e:	2b02      	cmp	r3, #2
 8019c70:	dc3e      	bgt.n	8019cf0 <_dtoa_r+0x830>
 8019c72:	e060      	b.n	8019d36 <_dtoa_r+0x876>
 8019c74:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019c76:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8019c7a:	e73c      	b.n	8019af6 <_dtoa_r+0x636>
 8019c7c:	f10a 34ff 	add.w	r4, sl, #4294967295
 8019c80:	42a3      	cmp	r3, r4
 8019c82:	bfbf      	itttt	lt
 8019c84:	1ae2      	sublt	r2, r4, r3
 8019c86:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8019c88:	189b      	addlt	r3, r3, r2
 8019c8a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8019c8c:	bfae      	itee	ge
 8019c8e:	1b1c      	subge	r4, r3, r4
 8019c90:	4623      	movlt	r3, r4
 8019c92:	2400      	movlt	r4, #0
 8019c94:	f1ba 0f00 	cmp.w	sl, #0
 8019c98:	bfb5      	itete	lt
 8019c9a:	9a05      	ldrlt	r2, [sp, #20]
 8019c9c:	9e05      	ldrge	r6, [sp, #20]
 8019c9e:	eba2 060a 	sublt.w	r6, r2, sl
 8019ca2:	4652      	movge	r2, sl
 8019ca4:	bfb8      	it	lt
 8019ca6:	2200      	movlt	r2, #0
 8019ca8:	e727      	b.n	8019afa <_dtoa_r+0x63a>
 8019caa:	9e05      	ldr	r6, [sp, #20]
 8019cac:	9d08      	ldr	r5, [sp, #32]
 8019cae:	461c      	mov	r4, r3
 8019cb0:	e730      	b.n	8019b14 <_dtoa_r+0x654>
 8019cb2:	461a      	mov	r2, r3
 8019cb4:	e758      	b.n	8019b68 <_dtoa_r+0x6a8>
 8019cb6:	2300      	movs	r3, #0
 8019cb8:	e786      	b.n	8019bc8 <_dtoa_r+0x708>
 8019cba:	9b02      	ldr	r3, [sp, #8]
 8019cbc:	e784      	b.n	8019bc8 <_dtoa_r+0x708>
 8019cbe:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019cc0:	e783      	b.n	8019bca <_dtoa_r+0x70a>
 8019cc2:	2300      	movs	r3, #0
 8019cc4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019cc6:	e784      	b.n	8019bd2 <_dtoa_r+0x712>
 8019cc8:	d09d      	beq.n	8019c06 <_dtoa_r+0x746>
 8019cca:	9b05      	ldr	r3, [sp, #20]
 8019ccc:	321c      	adds	r2, #28
 8019cce:	4413      	add	r3, r2
 8019cd0:	9305      	str	r3, [sp, #20]
 8019cd2:	9b06      	ldr	r3, [sp, #24]
 8019cd4:	4416      	add	r6, r2
 8019cd6:	4413      	add	r3, r2
 8019cd8:	e794      	b.n	8019c04 <_dtoa_r+0x744>
 8019cda:	4602      	mov	r2, r0
 8019cdc:	e7f5      	b.n	8019cca <_dtoa_r+0x80a>
 8019cde:	f1ba 0f00 	cmp.w	sl, #0
 8019ce2:	f8cd 8010 	str.w	r8, [sp, #16]
 8019ce6:	46d3      	mov	fp, sl
 8019ce8:	dc21      	bgt.n	8019d2e <_dtoa_r+0x86e>
 8019cea:	9b07      	ldr	r3, [sp, #28]
 8019cec:	2b02      	cmp	r3, #2
 8019cee:	dd1e      	ble.n	8019d2e <_dtoa_r+0x86e>
 8019cf0:	f1bb 0f00 	cmp.w	fp, #0
 8019cf4:	f47f aeb7 	bne.w	8019a66 <_dtoa_r+0x5a6>
 8019cf8:	4621      	mov	r1, r4
 8019cfa:	465b      	mov	r3, fp
 8019cfc:	2205      	movs	r2, #5
 8019cfe:	4648      	mov	r0, r9
 8019d00:	f000 fe2e 	bl	801a960 <__multadd>
 8019d04:	4601      	mov	r1, r0
 8019d06:	4604      	mov	r4, r0
 8019d08:	9801      	ldr	r0, [sp, #4]
 8019d0a:	f001 f88b 	bl	801ae24 <__mcmp>
 8019d0e:	2800      	cmp	r0, #0
 8019d10:	f77f aea9 	ble.w	8019a66 <_dtoa_r+0x5a6>
 8019d14:	463e      	mov	r6, r7
 8019d16:	2331      	movs	r3, #49	@ 0x31
 8019d18:	f806 3b01 	strb.w	r3, [r6], #1
 8019d1c:	9b04      	ldr	r3, [sp, #16]
 8019d1e:	3301      	adds	r3, #1
 8019d20:	9304      	str	r3, [sp, #16]
 8019d22:	e6a4      	b.n	8019a6e <_dtoa_r+0x5ae>
 8019d24:	f8cd 8010 	str.w	r8, [sp, #16]
 8019d28:	4654      	mov	r4, sl
 8019d2a:	4625      	mov	r5, r4
 8019d2c:	e7f2      	b.n	8019d14 <_dtoa_r+0x854>
 8019d2e:	9b08      	ldr	r3, [sp, #32]
 8019d30:	2b00      	cmp	r3, #0
 8019d32:	f000 8103 	beq.w	8019f3c <_dtoa_r+0xa7c>
 8019d36:	2e00      	cmp	r6, #0
 8019d38:	dd05      	ble.n	8019d46 <_dtoa_r+0x886>
 8019d3a:	4629      	mov	r1, r5
 8019d3c:	4632      	mov	r2, r6
 8019d3e:	4648      	mov	r0, r9
 8019d40:	f001 f804 	bl	801ad4c <__lshift>
 8019d44:	4605      	mov	r5, r0
 8019d46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019d48:	2b00      	cmp	r3, #0
 8019d4a:	d058      	beq.n	8019dfe <_dtoa_r+0x93e>
 8019d4c:	6869      	ldr	r1, [r5, #4]
 8019d4e:	4648      	mov	r0, r9
 8019d50:	f000 fda4 	bl	801a89c <_Balloc>
 8019d54:	4606      	mov	r6, r0
 8019d56:	b928      	cbnz	r0, 8019d64 <_dtoa_r+0x8a4>
 8019d58:	4b82      	ldr	r3, [pc, #520]	@ (8019f64 <_dtoa_r+0xaa4>)
 8019d5a:	4602      	mov	r2, r0
 8019d5c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8019d60:	f7ff bbc7 	b.w	80194f2 <_dtoa_r+0x32>
 8019d64:	692a      	ldr	r2, [r5, #16]
 8019d66:	3202      	adds	r2, #2
 8019d68:	0092      	lsls	r2, r2, #2
 8019d6a:	f105 010c 	add.w	r1, r5, #12
 8019d6e:	300c      	adds	r0, #12
 8019d70:	f7ff fad9 	bl	8019326 <memcpy>
 8019d74:	2201      	movs	r2, #1
 8019d76:	4631      	mov	r1, r6
 8019d78:	4648      	mov	r0, r9
 8019d7a:	f000 ffe7 	bl	801ad4c <__lshift>
 8019d7e:	1c7b      	adds	r3, r7, #1
 8019d80:	9305      	str	r3, [sp, #20]
 8019d82:	eb07 030b 	add.w	r3, r7, fp
 8019d86:	9309      	str	r3, [sp, #36]	@ 0x24
 8019d88:	9b02      	ldr	r3, [sp, #8]
 8019d8a:	f003 0301 	and.w	r3, r3, #1
 8019d8e:	46a8      	mov	r8, r5
 8019d90:	9308      	str	r3, [sp, #32]
 8019d92:	4605      	mov	r5, r0
 8019d94:	9b05      	ldr	r3, [sp, #20]
 8019d96:	9801      	ldr	r0, [sp, #4]
 8019d98:	4621      	mov	r1, r4
 8019d9a:	f103 3bff 	add.w	fp, r3, #4294967295
 8019d9e:	f7ff fb07 	bl	80193b0 <quorem>
 8019da2:	4641      	mov	r1, r8
 8019da4:	9002      	str	r0, [sp, #8]
 8019da6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8019daa:	9801      	ldr	r0, [sp, #4]
 8019dac:	f001 f83a 	bl	801ae24 <__mcmp>
 8019db0:	462a      	mov	r2, r5
 8019db2:	9006      	str	r0, [sp, #24]
 8019db4:	4621      	mov	r1, r4
 8019db6:	4648      	mov	r0, r9
 8019db8:	f001 f850 	bl	801ae5c <__mdiff>
 8019dbc:	68c2      	ldr	r2, [r0, #12]
 8019dbe:	4606      	mov	r6, r0
 8019dc0:	b9fa      	cbnz	r2, 8019e02 <_dtoa_r+0x942>
 8019dc2:	4601      	mov	r1, r0
 8019dc4:	9801      	ldr	r0, [sp, #4]
 8019dc6:	f001 f82d 	bl	801ae24 <__mcmp>
 8019dca:	4602      	mov	r2, r0
 8019dcc:	4631      	mov	r1, r6
 8019dce:	4648      	mov	r0, r9
 8019dd0:	920a      	str	r2, [sp, #40]	@ 0x28
 8019dd2:	f000 fda3 	bl	801a91c <_Bfree>
 8019dd6:	9b07      	ldr	r3, [sp, #28]
 8019dd8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019dda:	9e05      	ldr	r6, [sp, #20]
 8019ddc:	ea43 0102 	orr.w	r1, r3, r2
 8019de0:	9b08      	ldr	r3, [sp, #32]
 8019de2:	4319      	orrs	r1, r3
 8019de4:	d10f      	bne.n	8019e06 <_dtoa_r+0x946>
 8019de6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8019dea:	d028      	beq.n	8019e3e <_dtoa_r+0x97e>
 8019dec:	9b06      	ldr	r3, [sp, #24]
 8019dee:	2b00      	cmp	r3, #0
 8019df0:	dd02      	ble.n	8019df8 <_dtoa_r+0x938>
 8019df2:	9b02      	ldr	r3, [sp, #8]
 8019df4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8019df8:	f88b a000 	strb.w	sl, [fp]
 8019dfc:	e639      	b.n	8019a72 <_dtoa_r+0x5b2>
 8019dfe:	4628      	mov	r0, r5
 8019e00:	e7bd      	b.n	8019d7e <_dtoa_r+0x8be>
 8019e02:	2201      	movs	r2, #1
 8019e04:	e7e2      	b.n	8019dcc <_dtoa_r+0x90c>
 8019e06:	9b06      	ldr	r3, [sp, #24]
 8019e08:	2b00      	cmp	r3, #0
 8019e0a:	db04      	blt.n	8019e16 <_dtoa_r+0x956>
 8019e0c:	9907      	ldr	r1, [sp, #28]
 8019e0e:	430b      	orrs	r3, r1
 8019e10:	9908      	ldr	r1, [sp, #32]
 8019e12:	430b      	orrs	r3, r1
 8019e14:	d120      	bne.n	8019e58 <_dtoa_r+0x998>
 8019e16:	2a00      	cmp	r2, #0
 8019e18:	ddee      	ble.n	8019df8 <_dtoa_r+0x938>
 8019e1a:	9901      	ldr	r1, [sp, #4]
 8019e1c:	2201      	movs	r2, #1
 8019e1e:	4648      	mov	r0, r9
 8019e20:	f000 ff94 	bl	801ad4c <__lshift>
 8019e24:	4621      	mov	r1, r4
 8019e26:	9001      	str	r0, [sp, #4]
 8019e28:	f000 fffc 	bl	801ae24 <__mcmp>
 8019e2c:	2800      	cmp	r0, #0
 8019e2e:	dc03      	bgt.n	8019e38 <_dtoa_r+0x978>
 8019e30:	d1e2      	bne.n	8019df8 <_dtoa_r+0x938>
 8019e32:	f01a 0f01 	tst.w	sl, #1
 8019e36:	d0df      	beq.n	8019df8 <_dtoa_r+0x938>
 8019e38:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8019e3c:	d1d9      	bne.n	8019df2 <_dtoa_r+0x932>
 8019e3e:	2339      	movs	r3, #57	@ 0x39
 8019e40:	f88b 3000 	strb.w	r3, [fp]
 8019e44:	4633      	mov	r3, r6
 8019e46:	461e      	mov	r6, r3
 8019e48:	3b01      	subs	r3, #1
 8019e4a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8019e4e:	2a39      	cmp	r2, #57	@ 0x39
 8019e50:	d053      	beq.n	8019efa <_dtoa_r+0xa3a>
 8019e52:	3201      	adds	r2, #1
 8019e54:	701a      	strb	r2, [r3, #0]
 8019e56:	e60c      	b.n	8019a72 <_dtoa_r+0x5b2>
 8019e58:	2a00      	cmp	r2, #0
 8019e5a:	dd07      	ble.n	8019e6c <_dtoa_r+0x9ac>
 8019e5c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8019e60:	d0ed      	beq.n	8019e3e <_dtoa_r+0x97e>
 8019e62:	f10a 0301 	add.w	r3, sl, #1
 8019e66:	f88b 3000 	strb.w	r3, [fp]
 8019e6a:	e602      	b.n	8019a72 <_dtoa_r+0x5b2>
 8019e6c:	9b05      	ldr	r3, [sp, #20]
 8019e6e:	9a05      	ldr	r2, [sp, #20]
 8019e70:	f803 ac01 	strb.w	sl, [r3, #-1]
 8019e74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019e76:	4293      	cmp	r3, r2
 8019e78:	d029      	beq.n	8019ece <_dtoa_r+0xa0e>
 8019e7a:	9901      	ldr	r1, [sp, #4]
 8019e7c:	2300      	movs	r3, #0
 8019e7e:	220a      	movs	r2, #10
 8019e80:	4648      	mov	r0, r9
 8019e82:	f000 fd6d 	bl	801a960 <__multadd>
 8019e86:	45a8      	cmp	r8, r5
 8019e88:	9001      	str	r0, [sp, #4]
 8019e8a:	f04f 0300 	mov.w	r3, #0
 8019e8e:	f04f 020a 	mov.w	r2, #10
 8019e92:	4641      	mov	r1, r8
 8019e94:	4648      	mov	r0, r9
 8019e96:	d107      	bne.n	8019ea8 <_dtoa_r+0x9e8>
 8019e98:	f000 fd62 	bl	801a960 <__multadd>
 8019e9c:	4680      	mov	r8, r0
 8019e9e:	4605      	mov	r5, r0
 8019ea0:	9b05      	ldr	r3, [sp, #20]
 8019ea2:	3301      	adds	r3, #1
 8019ea4:	9305      	str	r3, [sp, #20]
 8019ea6:	e775      	b.n	8019d94 <_dtoa_r+0x8d4>
 8019ea8:	f000 fd5a 	bl	801a960 <__multadd>
 8019eac:	4629      	mov	r1, r5
 8019eae:	4680      	mov	r8, r0
 8019eb0:	2300      	movs	r3, #0
 8019eb2:	220a      	movs	r2, #10
 8019eb4:	4648      	mov	r0, r9
 8019eb6:	f000 fd53 	bl	801a960 <__multadd>
 8019eba:	4605      	mov	r5, r0
 8019ebc:	e7f0      	b.n	8019ea0 <_dtoa_r+0x9e0>
 8019ebe:	f1bb 0f00 	cmp.w	fp, #0
 8019ec2:	bfcc      	ite	gt
 8019ec4:	465e      	movgt	r6, fp
 8019ec6:	2601      	movle	r6, #1
 8019ec8:	443e      	add	r6, r7
 8019eca:	f04f 0800 	mov.w	r8, #0
 8019ece:	9901      	ldr	r1, [sp, #4]
 8019ed0:	2201      	movs	r2, #1
 8019ed2:	4648      	mov	r0, r9
 8019ed4:	f000 ff3a 	bl	801ad4c <__lshift>
 8019ed8:	4621      	mov	r1, r4
 8019eda:	9001      	str	r0, [sp, #4]
 8019edc:	f000 ffa2 	bl	801ae24 <__mcmp>
 8019ee0:	2800      	cmp	r0, #0
 8019ee2:	dcaf      	bgt.n	8019e44 <_dtoa_r+0x984>
 8019ee4:	d102      	bne.n	8019eec <_dtoa_r+0xa2c>
 8019ee6:	f01a 0f01 	tst.w	sl, #1
 8019eea:	d1ab      	bne.n	8019e44 <_dtoa_r+0x984>
 8019eec:	4633      	mov	r3, r6
 8019eee:	461e      	mov	r6, r3
 8019ef0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019ef4:	2a30      	cmp	r2, #48	@ 0x30
 8019ef6:	d0fa      	beq.n	8019eee <_dtoa_r+0xa2e>
 8019ef8:	e5bb      	b.n	8019a72 <_dtoa_r+0x5b2>
 8019efa:	429f      	cmp	r7, r3
 8019efc:	d1a3      	bne.n	8019e46 <_dtoa_r+0x986>
 8019efe:	9b04      	ldr	r3, [sp, #16]
 8019f00:	3301      	adds	r3, #1
 8019f02:	9304      	str	r3, [sp, #16]
 8019f04:	2331      	movs	r3, #49	@ 0x31
 8019f06:	703b      	strb	r3, [r7, #0]
 8019f08:	e5b3      	b.n	8019a72 <_dtoa_r+0x5b2>
 8019f0a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019f0c:	4f16      	ldr	r7, [pc, #88]	@ (8019f68 <_dtoa_r+0xaa8>)
 8019f0e:	b11b      	cbz	r3, 8019f18 <_dtoa_r+0xa58>
 8019f10:	f107 0308 	add.w	r3, r7, #8
 8019f14:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8019f16:	6013      	str	r3, [r2, #0]
 8019f18:	4638      	mov	r0, r7
 8019f1a:	b011      	add	sp, #68	@ 0x44
 8019f1c:	ecbd 8b02 	vpop	{d8}
 8019f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f24:	9b07      	ldr	r3, [sp, #28]
 8019f26:	2b01      	cmp	r3, #1
 8019f28:	f77f ae36 	ble.w	8019b98 <_dtoa_r+0x6d8>
 8019f2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019f2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019f30:	2001      	movs	r0, #1
 8019f32:	e656      	b.n	8019be2 <_dtoa_r+0x722>
 8019f34:	f1bb 0f00 	cmp.w	fp, #0
 8019f38:	f77f aed7 	ble.w	8019cea <_dtoa_r+0x82a>
 8019f3c:	463e      	mov	r6, r7
 8019f3e:	9801      	ldr	r0, [sp, #4]
 8019f40:	4621      	mov	r1, r4
 8019f42:	f7ff fa35 	bl	80193b0 <quorem>
 8019f46:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8019f4a:	f806 ab01 	strb.w	sl, [r6], #1
 8019f4e:	1bf2      	subs	r2, r6, r7
 8019f50:	4593      	cmp	fp, r2
 8019f52:	ddb4      	ble.n	8019ebe <_dtoa_r+0x9fe>
 8019f54:	9901      	ldr	r1, [sp, #4]
 8019f56:	2300      	movs	r3, #0
 8019f58:	220a      	movs	r2, #10
 8019f5a:	4648      	mov	r0, r9
 8019f5c:	f000 fd00 	bl	801a960 <__multadd>
 8019f60:	9001      	str	r0, [sp, #4]
 8019f62:	e7ec      	b.n	8019f3e <_dtoa_r+0xa7e>
 8019f64:	0801ebf7 	.word	0x0801ebf7
 8019f68:	0801eb92 	.word	0x0801eb92

08019f6c <_free_r>:
 8019f6c:	b538      	push	{r3, r4, r5, lr}
 8019f6e:	4605      	mov	r5, r0
 8019f70:	2900      	cmp	r1, #0
 8019f72:	d041      	beq.n	8019ff8 <_free_r+0x8c>
 8019f74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019f78:	1f0c      	subs	r4, r1, #4
 8019f7a:	2b00      	cmp	r3, #0
 8019f7c:	bfb8      	it	lt
 8019f7e:	18e4      	addlt	r4, r4, r3
 8019f80:	f000 fc80 	bl	801a884 <__malloc_lock>
 8019f84:	4a1d      	ldr	r2, [pc, #116]	@ (8019ffc <_free_r+0x90>)
 8019f86:	6813      	ldr	r3, [r2, #0]
 8019f88:	b933      	cbnz	r3, 8019f98 <_free_r+0x2c>
 8019f8a:	6063      	str	r3, [r4, #4]
 8019f8c:	6014      	str	r4, [r2, #0]
 8019f8e:	4628      	mov	r0, r5
 8019f90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019f94:	f000 bc7c 	b.w	801a890 <__malloc_unlock>
 8019f98:	42a3      	cmp	r3, r4
 8019f9a:	d908      	bls.n	8019fae <_free_r+0x42>
 8019f9c:	6820      	ldr	r0, [r4, #0]
 8019f9e:	1821      	adds	r1, r4, r0
 8019fa0:	428b      	cmp	r3, r1
 8019fa2:	bf01      	itttt	eq
 8019fa4:	6819      	ldreq	r1, [r3, #0]
 8019fa6:	685b      	ldreq	r3, [r3, #4]
 8019fa8:	1809      	addeq	r1, r1, r0
 8019faa:	6021      	streq	r1, [r4, #0]
 8019fac:	e7ed      	b.n	8019f8a <_free_r+0x1e>
 8019fae:	461a      	mov	r2, r3
 8019fb0:	685b      	ldr	r3, [r3, #4]
 8019fb2:	b10b      	cbz	r3, 8019fb8 <_free_r+0x4c>
 8019fb4:	42a3      	cmp	r3, r4
 8019fb6:	d9fa      	bls.n	8019fae <_free_r+0x42>
 8019fb8:	6811      	ldr	r1, [r2, #0]
 8019fba:	1850      	adds	r0, r2, r1
 8019fbc:	42a0      	cmp	r0, r4
 8019fbe:	d10b      	bne.n	8019fd8 <_free_r+0x6c>
 8019fc0:	6820      	ldr	r0, [r4, #0]
 8019fc2:	4401      	add	r1, r0
 8019fc4:	1850      	adds	r0, r2, r1
 8019fc6:	4283      	cmp	r3, r0
 8019fc8:	6011      	str	r1, [r2, #0]
 8019fca:	d1e0      	bne.n	8019f8e <_free_r+0x22>
 8019fcc:	6818      	ldr	r0, [r3, #0]
 8019fce:	685b      	ldr	r3, [r3, #4]
 8019fd0:	6053      	str	r3, [r2, #4]
 8019fd2:	4408      	add	r0, r1
 8019fd4:	6010      	str	r0, [r2, #0]
 8019fd6:	e7da      	b.n	8019f8e <_free_r+0x22>
 8019fd8:	d902      	bls.n	8019fe0 <_free_r+0x74>
 8019fda:	230c      	movs	r3, #12
 8019fdc:	602b      	str	r3, [r5, #0]
 8019fde:	e7d6      	b.n	8019f8e <_free_r+0x22>
 8019fe0:	6820      	ldr	r0, [r4, #0]
 8019fe2:	1821      	adds	r1, r4, r0
 8019fe4:	428b      	cmp	r3, r1
 8019fe6:	bf04      	itt	eq
 8019fe8:	6819      	ldreq	r1, [r3, #0]
 8019fea:	685b      	ldreq	r3, [r3, #4]
 8019fec:	6063      	str	r3, [r4, #4]
 8019fee:	bf04      	itt	eq
 8019ff0:	1809      	addeq	r1, r1, r0
 8019ff2:	6021      	streq	r1, [r4, #0]
 8019ff4:	6054      	str	r4, [r2, #4]
 8019ff6:	e7ca      	b.n	8019f8e <_free_r+0x22>
 8019ff8:	bd38      	pop	{r3, r4, r5, pc}
 8019ffa:	bf00      	nop
 8019ffc:	24003e90 	.word	0x24003e90

0801a000 <rshift>:
 801a000:	6903      	ldr	r3, [r0, #16]
 801a002:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801a006:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a00a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801a00e:	f100 0414 	add.w	r4, r0, #20
 801a012:	dd45      	ble.n	801a0a0 <rshift+0xa0>
 801a014:	f011 011f 	ands.w	r1, r1, #31
 801a018:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801a01c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801a020:	d10c      	bne.n	801a03c <rshift+0x3c>
 801a022:	f100 0710 	add.w	r7, r0, #16
 801a026:	4629      	mov	r1, r5
 801a028:	42b1      	cmp	r1, r6
 801a02a:	d334      	bcc.n	801a096 <rshift+0x96>
 801a02c:	1a9b      	subs	r3, r3, r2
 801a02e:	009b      	lsls	r3, r3, #2
 801a030:	1eea      	subs	r2, r5, #3
 801a032:	4296      	cmp	r6, r2
 801a034:	bf38      	it	cc
 801a036:	2300      	movcc	r3, #0
 801a038:	4423      	add	r3, r4
 801a03a:	e015      	b.n	801a068 <rshift+0x68>
 801a03c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801a040:	f1c1 0820 	rsb	r8, r1, #32
 801a044:	40cf      	lsrs	r7, r1
 801a046:	f105 0e04 	add.w	lr, r5, #4
 801a04a:	46a1      	mov	r9, r4
 801a04c:	4576      	cmp	r6, lr
 801a04e:	46f4      	mov	ip, lr
 801a050:	d815      	bhi.n	801a07e <rshift+0x7e>
 801a052:	1a9a      	subs	r2, r3, r2
 801a054:	0092      	lsls	r2, r2, #2
 801a056:	3a04      	subs	r2, #4
 801a058:	3501      	adds	r5, #1
 801a05a:	42ae      	cmp	r6, r5
 801a05c:	bf38      	it	cc
 801a05e:	2200      	movcc	r2, #0
 801a060:	18a3      	adds	r3, r4, r2
 801a062:	50a7      	str	r7, [r4, r2]
 801a064:	b107      	cbz	r7, 801a068 <rshift+0x68>
 801a066:	3304      	adds	r3, #4
 801a068:	1b1a      	subs	r2, r3, r4
 801a06a:	42a3      	cmp	r3, r4
 801a06c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801a070:	bf08      	it	eq
 801a072:	2300      	moveq	r3, #0
 801a074:	6102      	str	r2, [r0, #16]
 801a076:	bf08      	it	eq
 801a078:	6143      	streq	r3, [r0, #20]
 801a07a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a07e:	f8dc c000 	ldr.w	ip, [ip]
 801a082:	fa0c fc08 	lsl.w	ip, ip, r8
 801a086:	ea4c 0707 	orr.w	r7, ip, r7
 801a08a:	f849 7b04 	str.w	r7, [r9], #4
 801a08e:	f85e 7b04 	ldr.w	r7, [lr], #4
 801a092:	40cf      	lsrs	r7, r1
 801a094:	e7da      	b.n	801a04c <rshift+0x4c>
 801a096:	f851 cb04 	ldr.w	ip, [r1], #4
 801a09a:	f847 cf04 	str.w	ip, [r7, #4]!
 801a09e:	e7c3      	b.n	801a028 <rshift+0x28>
 801a0a0:	4623      	mov	r3, r4
 801a0a2:	e7e1      	b.n	801a068 <rshift+0x68>

0801a0a4 <__hexdig_fun>:
 801a0a4:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801a0a8:	2b09      	cmp	r3, #9
 801a0aa:	d802      	bhi.n	801a0b2 <__hexdig_fun+0xe>
 801a0ac:	3820      	subs	r0, #32
 801a0ae:	b2c0      	uxtb	r0, r0
 801a0b0:	4770      	bx	lr
 801a0b2:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801a0b6:	2b05      	cmp	r3, #5
 801a0b8:	d801      	bhi.n	801a0be <__hexdig_fun+0x1a>
 801a0ba:	3847      	subs	r0, #71	@ 0x47
 801a0bc:	e7f7      	b.n	801a0ae <__hexdig_fun+0xa>
 801a0be:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801a0c2:	2b05      	cmp	r3, #5
 801a0c4:	d801      	bhi.n	801a0ca <__hexdig_fun+0x26>
 801a0c6:	3827      	subs	r0, #39	@ 0x27
 801a0c8:	e7f1      	b.n	801a0ae <__hexdig_fun+0xa>
 801a0ca:	2000      	movs	r0, #0
 801a0cc:	4770      	bx	lr
	...

0801a0d0 <__gethex>:
 801a0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0d4:	b085      	sub	sp, #20
 801a0d6:	468a      	mov	sl, r1
 801a0d8:	9302      	str	r3, [sp, #8]
 801a0da:	680b      	ldr	r3, [r1, #0]
 801a0dc:	9001      	str	r0, [sp, #4]
 801a0de:	4690      	mov	r8, r2
 801a0e0:	1c9c      	adds	r4, r3, #2
 801a0e2:	46a1      	mov	r9, r4
 801a0e4:	f814 0b01 	ldrb.w	r0, [r4], #1
 801a0e8:	2830      	cmp	r0, #48	@ 0x30
 801a0ea:	d0fa      	beq.n	801a0e2 <__gethex+0x12>
 801a0ec:	eba9 0303 	sub.w	r3, r9, r3
 801a0f0:	f1a3 0b02 	sub.w	fp, r3, #2
 801a0f4:	f7ff ffd6 	bl	801a0a4 <__hexdig_fun>
 801a0f8:	4605      	mov	r5, r0
 801a0fa:	2800      	cmp	r0, #0
 801a0fc:	d168      	bne.n	801a1d0 <__gethex+0x100>
 801a0fe:	49a0      	ldr	r1, [pc, #640]	@ (801a380 <__gethex+0x2b0>)
 801a100:	2201      	movs	r2, #1
 801a102:	4648      	mov	r0, r9
 801a104:	f7fe faf1 	bl	80186ea <strncmp>
 801a108:	4607      	mov	r7, r0
 801a10a:	2800      	cmp	r0, #0
 801a10c:	d167      	bne.n	801a1de <__gethex+0x10e>
 801a10e:	f899 0001 	ldrb.w	r0, [r9, #1]
 801a112:	4626      	mov	r6, r4
 801a114:	f7ff ffc6 	bl	801a0a4 <__hexdig_fun>
 801a118:	2800      	cmp	r0, #0
 801a11a:	d062      	beq.n	801a1e2 <__gethex+0x112>
 801a11c:	4623      	mov	r3, r4
 801a11e:	7818      	ldrb	r0, [r3, #0]
 801a120:	2830      	cmp	r0, #48	@ 0x30
 801a122:	4699      	mov	r9, r3
 801a124:	f103 0301 	add.w	r3, r3, #1
 801a128:	d0f9      	beq.n	801a11e <__gethex+0x4e>
 801a12a:	f7ff ffbb 	bl	801a0a4 <__hexdig_fun>
 801a12e:	fab0 f580 	clz	r5, r0
 801a132:	096d      	lsrs	r5, r5, #5
 801a134:	f04f 0b01 	mov.w	fp, #1
 801a138:	464a      	mov	r2, r9
 801a13a:	4616      	mov	r6, r2
 801a13c:	3201      	adds	r2, #1
 801a13e:	7830      	ldrb	r0, [r6, #0]
 801a140:	f7ff ffb0 	bl	801a0a4 <__hexdig_fun>
 801a144:	2800      	cmp	r0, #0
 801a146:	d1f8      	bne.n	801a13a <__gethex+0x6a>
 801a148:	498d      	ldr	r1, [pc, #564]	@ (801a380 <__gethex+0x2b0>)
 801a14a:	2201      	movs	r2, #1
 801a14c:	4630      	mov	r0, r6
 801a14e:	f7fe facc 	bl	80186ea <strncmp>
 801a152:	2800      	cmp	r0, #0
 801a154:	d13f      	bne.n	801a1d6 <__gethex+0x106>
 801a156:	b944      	cbnz	r4, 801a16a <__gethex+0x9a>
 801a158:	1c74      	adds	r4, r6, #1
 801a15a:	4622      	mov	r2, r4
 801a15c:	4616      	mov	r6, r2
 801a15e:	3201      	adds	r2, #1
 801a160:	7830      	ldrb	r0, [r6, #0]
 801a162:	f7ff ff9f 	bl	801a0a4 <__hexdig_fun>
 801a166:	2800      	cmp	r0, #0
 801a168:	d1f8      	bne.n	801a15c <__gethex+0x8c>
 801a16a:	1ba4      	subs	r4, r4, r6
 801a16c:	00a7      	lsls	r7, r4, #2
 801a16e:	7833      	ldrb	r3, [r6, #0]
 801a170:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801a174:	2b50      	cmp	r3, #80	@ 0x50
 801a176:	d13e      	bne.n	801a1f6 <__gethex+0x126>
 801a178:	7873      	ldrb	r3, [r6, #1]
 801a17a:	2b2b      	cmp	r3, #43	@ 0x2b
 801a17c:	d033      	beq.n	801a1e6 <__gethex+0x116>
 801a17e:	2b2d      	cmp	r3, #45	@ 0x2d
 801a180:	d034      	beq.n	801a1ec <__gethex+0x11c>
 801a182:	1c71      	adds	r1, r6, #1
 801a184:	2400      	movs	r4, #0
 801a186:	7808      	ldrb	r0, [r1, #0]
 801a188:	f7ff ff8c 	bl	801a0a4 <__hexdig_fun>
 801a18c:	1e43      	subs	r3, r0, #1
 801a18e:	b2db      	uxtb	r3, r3
 801a190:	2b18      	cmp	r3, #24
 801a192:	d830      	bhi.n	801a1f6 <__gethex+0x126>
 801a194:	f1a0 0210 	sub.w	r2, r0, #16
 801a198:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801a19c:	f7ff ff82 	bl	801a0a4 <__hexdig_fun>
 801a1a0:	f100 3cff 	add.w	ip, r0, #4294967295
 801a1a4:	fa5f fc8c 	uxtb.w	ip, ip
 801a1a8:	f1bc 0f18 	cmp.w	ip, #24
 801a1ac:	f04f 030a 	mov.w	r3, #10
 801a1b0:	d91e      	bls.n	801a1f0 <__gethex+0x120>
 801a1b2:	b104      	cbz	r4, 801a1b6 <__gethex+0xe6>
 801a1b4:	4252      	negs	r2, r2
 801a1b6:	4417      	add	r7, r2
 801a1b8:	f8ca 1000 	str.w	r1, [sl]
 801a1bc:	b1ed      	cbz	r5, 801a1fa <__gethex+0x12a>
 801a1be:	f1bb 0f00 	cmp.w	fp, #0
 801a1c2:	bf0c      	ite	eq
 801a1c4:	2506      	moveq	r5, #6
 801a1c6:	2500      	movne	r5, #0
 801a1c8:	4628      	mov	r0, r5
 801a1ca:	b005      	add	sp, #20
 801a1cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1d0:	2500      	movs	r5, #0
 801a1d2:	462c      	mov	r4, r5
 801a1d4:	e7b0      	b.n	801a138 <__gethex+0x68>
 801a1d6:	2c00      	cmp	r4, #0
 801a1d8:	d1c7      	bne.n	801a16a <__gethex+0x9a>
 801a1da:	4627      	mov	r7, r4
 801a1dc:	e7c7      	b.n	801a16e <__gethex+0x9e>
 801a1de:	464e      	mov	r6, r9
 801a1e0:	462f      	mov	r7, r5
 801a1e2:	2501      	movs	r5, #1
 801a1e4:	e7c3      	b.n	801a16e <__gethex+0x9e>
 801a1e6:	2400      	movs	r4, #0
 801a1e8:	1cb1      	adds	r1, r6, #2
 801a1ea:	e7cc      	b.n	801a186 <__gethex+0xb6>
 801a1ec:	2401      	movs	r4, #1
 801a1ee:	e7fb      	b.n	801a1e8 <__gethex+0x118>
 801a1f0:	fb03 0002 	mla	r0, r3, r2, r0
 801a1f4:	e7ce      	b.n	801a194 <__gethex+0xc4>
 801a1f6:	4631      	mov	r1, r6
 801a1f8:	e7de      	b.n	801a1b8 <__gethex+0xe8>
 801a1fa:	eba6 0309 	sub.w	r3, r6, r9
 801a1fe:	3b01      	subs	r3, #1
 801a200:	4629      	mov	r1, r5
 801a202:	2b07      	cmp	r3, #7
 801a204:	dc0a      	bgt.n	801a21c <__gethex+0x14c>
 801a206:	9801      	ldr	r0, [sp, #4]
 801a208:	f000 fb48 	bl	801a89c <_Balloc>
 801a20c:	4604      	mov	r4, r0
 801a20e:	b940      	cbnz	r0, 801a222 <__gethex+0x152>
 801a210:	4b5c      	ldr	r3, [pc, #368]	@ (801a384 <__gethex+0x2b4>)
 801a212:	4602      	mov	r2, r0
 801a214:	21e4      	movs	r1, #228	@ 0xe4
 801a216:	485c      	ldr	r0, [pc, #368]	@ (801a388 <__gethex+0x2b8>)
 801a218:	f7ff f8a4 	bl	8019364 <__assert_func>
 801a21c:	3101      	adds	r1, #1
 801a21e:	105b      	asrs	r3, r3, #1
 801a220:	e7ef      	b.n	801a202 <__gethex+0x132>
 801a222:	f100 0a14 	add.w	sl, r0, #20
 801a226:	2300      	movs	r3, #0
 801a228:	4655      	mov	r5, sl
 801a22a:	469b      	mov	fp, r3
 801a22c:	45b1      	cmp	r9, r6
 801a22e:	d337      	bcc.n	801a2a0 <__gethex+0x1d0>
 801a230:	f845 bb04 	str.w	fp, [r5], #4
 801a234:	eba5 050a 	sub.w	r5, r5, sl
 801a238:	10ad      	asrs	r5, r5, #2
 801a23a:	6125      	str	r5, [r4, #16]
 801a23c:	4658      	mov	r0, fp
 801a23e:	f000 fc1f 	bl	801aa80 <__hi0bits>
 801a242:	016d      	lsls	r5, r5, #5
 801a244:	f8d8 6000 	ldr.w	r6, [r8]
 801a248:	1a2d      	subs	r5, r5, r0
 801a24a:	42b5      	cmp	r5, r6
 801a24c:	dd54      	ble.n	801a2f8 <__gethex+0x228>
 801a24e:	1bad      	subs	r5, r5, r6
 801a250:	4629      	mov	r1, r5
 801a252:	4620      	mov	r0, r4
 801a254:	f000 ffb0 	bl	801b1b8 <__any_on>
 801a258:	4681      	mov	r9, r0
 801a25a:	b178      	cbz	r0, 801a27c <__gethex+0x1ac>
 801a25c:	1e6b      	subs	r3, r5, #1
 801a25e:	1159      	asrs	r1, r3, #5
 801a260:	f003 021f 	and.w	r2, r3, #31
 801a264:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801a268:	f04f 0901 	mov.w	r9, #1
 801a26c:	fa09 f202 	lsl.w	r2, r9, r2
 801a270:	420a      	tst	r2, r1
 801a272:	d003      	beq.n	801a27c <__gethex+0x1ac>
 801a274:	454b      	cmp	r3, r9
 801a276:	dc36      	bgt.n	801a2e6 <__gethex+0x216>
 801a278:	f04f 0902 	mov.w	r9, #2
 801a27c:	4629      	mov	r1, r5
 801a27e:	4620      	mov	r0, r4
 801a280:	f7ff febe 	bl	801a000 <rshift>
 801a284:	442f      	add	r7, r5
 801a286:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801a28a:	42bb      	cmp	r3, r7
 801a28c:	da42      	bge.n	801a314 <__gethex+0x244>
 801a28e:	9801      	ldr	r0, [sp, #4]
 801a290:	4621      	mov	r1, r4
 801a292:	f000 fb43 	bl	801a91c <_Bfree>
 801a296:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a298:	2300      	movs	r3, #0
 801a29a:	6013      	str	r3, [r2, #0]
 801a29c:	25a3      	movs	r5, #163	@ 0xa3
 801a29e:	e793      	b.n	801a1c8 <__gethex+0xf8>
 801a2a0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801a2a4:	2a2e      	cmp	r2, #46	@ 0x2e
 801a2a6:	d012      	beq.n	801a2ce <__gethex+0x1fe>
 801a2a8:	2b20      	cmp	r3, #32
 801a2aa:	d104      	bne.n	801a2b6 <__gethex+0x1e6>
 801a2ac:	f845 bb04 	str.w	fp, [r5], #4
 801a2b0:	f04f 0b00 	mov.w	fp, #0
 801a2b4:	465b      	mov	r3, fp
 801a2b6:	7830      	ldrb	r0, [r6, #0]
 801a2b8:	9303      	str	r3, [sp, #12]
 801a2ba:	f7ff fef3 	bl	801a0a4 <__hexdig_fun>
 801a2be:	9b03      	ldr	r3, [sp, #12]
 801a2c0:	f000 000f 	and.w	r0, r0, #15
 801a2c4:	4098      	lsls	r0, r3
 801a2c6:	ea4b 0b00 	orr.w	fp, fp, r0
 801a2ca:	3304      	adds	r3, #4
 801a2cc:	e7ae      	b.n	801a22c <__gethex+0x15c>
 801a2ce:	45b1      	cmp	r9, r6
 801a2d0:	d8ea      	bhi.n	801a2a8 <__gethex+0x1d8>
 801a2d2:	492b      	ldr	r1, [pc, #172]	@ (801a380 <__gethex+0x2b0>)
 801a2d4:	9303      	str	r3, [sp, #12]
 801a2d6:	2201      	movs	r2, #1
 801a2d8:	4630      	mov	r0, r6
 801a2da:	f7fe fa06 	bl	80186ea <strncmp>
 801a2de:	9b03      	ldr	r3, [sp, #12]
 801a2e0:	2800      	cmp	r0, #0
 801a2e2:	d1e1      	bne.n	801a2a8 <__gethex+0x1d8>
 801a2e4:	e7a2      	b.n	801a22c <__gethex+0x15c>
 801a2e6:	1ea9      	subs	r1, r5, #2
 801a2e8:	4620      	mov	r0, r4
 801a2ea:	f000 ff65 	bl	801b1b8 <__any_on>
 801a2ee:	2800      	cmp	r0, #0
 801a2f0:	d0c2      	beq.n	801a278 <__gethex+0x1a8>
 801a2f2:	f04f 0903 	mov.w	r9, #3
 801a2f6:	e7c1      	b.n	801a27c <__gethex+0x1ac>
 801a2f8:	da09      	bge.n	801a30e <__gethex+0x23e>
 801a2fa:	1b75      	subs	r5, r6, r5
 801a2fc:	4621      	mov	r1, r4
 801a2fe:	9801      	ldr	r0, [sp, #4]
 801a300:	462a      	mov	r2, r5
 801a302:	f000 fd23 	bl	801ad4c <__lshift>
 801a306:	1b7f      	subs	r7, r7, r5
 801a308:	4604      	mov	r4, r0
 801a30a:	f100 0a14 	add.w	sl, r0, #20
 801a30e:	f04f 0900 	mov.w	r9, #0
 801a312:	e7b8      	b.n	801a286 <__gethex+0x1b6>
 801a314:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801a318:	42bd      	cmp	r5, r7
 801a31a:	dd6f      	ble.n	801a3fc <__gethex+0x32c>
 801a31c:	1bed      	subs	r5, r5, r7
 801a31e:	42ae      	cmp	r6, r5
 801a320:	dc34      	bgt.n	801a38c <__gethex+0x2bc>
 801a322:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801a326:	2b02      	cmp	r3, #2
 801a328:	d022      	beq.n	801a370 <__gethex+0x2a0>
 801a32a:	2b03      	cmp	r3, #3
 801a32c:	d024      	beq.n	801a378 <__gethex+0x2a8>
 801a32e:	2b01      	cmp	r3, #1
 801a330:	d115      	bne.n	801a35e <__gethex+0x28e>
 801a332:	42ae      	cmp	r6, r5
 801a334:	d113      	bne.n	801a35e <__gethex+0x28e>
 801a336:	2e01      	cmp	r6, #1
 801a338:	d10b      	bne.n	801a352 <__gethex+0x282>
 801a33a:	9a02      	ldr	r2, [sp, #8]
 801a33c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801a340:	6013      	str	r3, [r2, #0]
 801a342:	2301      	movs	r3, #1
 801a344:	6123      	str	r3, [r4, #16]
 801a346:	f8ca 3000 	str.w	r3, [sl]
 801a34a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a34c:	2562      	movs	r5, #98	@ 0x62
 801a34e:	601c      	str	r4, [r3, #0]
 801a350:	e73a      	b.n	801a1c8 <__gethex+0xf8>
 801a352:	1e71      	subs	r1, r6, #1
 801a354:	4620      	mov	r0, r4
 801a356:	f000 ff2f 	bl	801b1b8 <__any_on>
 801a35a:	2800      	cmp	r0, #0
 801a35c:	d1ed      	bne.n	801a33a <__gethex+0x26a>
 801a35e:	9801      	ldr	r0, [sp, #4]
 801a360:	4621      	mov	r1, r4
 801a362:	f000 fadb 	bl	801a91c <_Bfree>
 801a366:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a368:	2300      	movs	r3, #0
 801a36a:	6013      	str	r3, [r2, #0]
 801a36c:	2550      	movs	r5, #80	@ 0x50
 801a36e:	e72b      	b.n	801a1c8 <__gethex+0xf8>
 801a370:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a372:	2b00      	cmp	r3, #0
 801a374:	d1f3      	bne.n	801a35e <__gethex+0x28e>
 801a376:	e7e0      	b.n	801a33a <__gethex+0x26a>
 801a378:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a37a:	2b00      	cmp	r3, #0
 801a37c:	d1dd      	bne.n	801a33a <__gethex+0x26a>
 801a37e:	e7ee      	b.n	801a35e <__gethex+0x28e>
 801a380:	0801e8af 	.word	0x0801e8af
 801a384:	0801ebf7 	.word	0x0801ebf7
 801a388:	0801ec08 	.word	0x0801ec08
 801a38c:	1e6f      	subs	r7, r5, #1
 801a38e:	f1b9 0f00 	cmp.w	r9, #0
 801a392:	d130      	bne.n	801a3f6 <__gethex+0x326>
 801a394:	b127      	cbz	r7, 801a3a0 <__gethex+0x2d0>
 801a396:	4639      	mov	r1, r7
 801a398:	4620      	mov	r0, r4
 801a39a:	f000 ff0d 	bl	801b1b8 <__any_on>
 801a39e:	4681      	mov	r9, r0
 801a3a0:	117a      	asrs	r2, r7, #5
 801a3a2:	2301      	movs	r3, #1
 801a3a4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801a3a8:	f007 071f 	and.w	r7, r7, #31
 801a3ac:	40bb      	lsls	r3, r7
 801a3ae:	4213      	tst	r3, r2
 801a3b0:	4629      	mov	r1, r5
 801a3b2:	4620      	mov	r0, r4
 801a3b4:	bf18      	it	ne
 801a3b6:	f049 0902 	orrne.w	r9, r9, #2
 801a3ba:	f7ff fe21 	bl	801a000 <rshift>
 801a3be:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801a3c2:	1b76      	subs	r6, r6, r5
 801a3c4:	2502      	movs	r5, #2
 801a3c6:	f1b9 0f00 	cmp.w	r9, #0
 801a3ca:	d047      	beq.n	801a45c <__gethex+0x38c>
 801a3cc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801a3d0:	2b02      	cmp	r3, #2
 801a3d2:	d015      	beq.n	801a400 <__gethex+0x330>
 801a3d4:	2b03      	cmp	r3, #3
 801a3d6:	d017      	beq.n	801a408 <__gethex+0x338>
 801a3d8:	2b01      	cmp	r3, #1
 801a3da:	d109      	bne.n	801a3f0 <__gethex+0x320>
 801a3dc:	f019 0f02 	tst.w	r9, #2
 801a3e0:	d006      	beq.n	801a3f0 <__gethex+0x320>
 801a3e2:	f8da 3000 	ldr.w	r3, [sl]
 801a3e6:	ea49 0903 	orr.w	r9, r9, r3
 801a3ea:	f019 0f01 	tst.w	r9, #1
 801a3ee:	d10e      	bne.n	801a40e <__gethex+0x33e>
 801a3f0:	f045 0510 	orr.w	r5, r5, #16
 801a3f4:	e032      	b.n	801a45c <__gethex+0x38c>
 801a3f6:	f04f 0901 	mov.w	r9, #1
 801a3fa:	e7d1      	b.n	801a3a0 <__gethex+0x2d0>
 801a3fc:	2501      	movs	r5, #1
 801a3fe:	e7e2      	b.n	801a3c6 <__gethex+0x2f6>
 801a400:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a402:	f1c3 0301 	rsb	r3, r3, #1
 801a406:	930f      	str	r3, [sp, #60]	@ 0x3c
 801a408:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a40a:	2b00      	cmp	r3, #0
 801a40c:	d0f0      	beq.n	801a3f0 <__gethex+0x320>
 801a40e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801a412:	f104 0314 	add.w	r3, r4, #20
 801a416:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801a41a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801a41e:	f04f 0c00 	mov.w	ip, #0
 801a422:	4618      	mov	r0, r3
 801a424:	f853 2b04 	ldr.w	r2, [r3], #4
 801a428:	f1b2 3fff 	cmp.w	r2, #4294967295
 801a42c:	d01b      	beq.n	801a466 <__gethex+0x396>
 801a42e:	3201      	adds	r2, #1
 801a430:	6002      	str	r2, [r0, #0]
 801a432:	2d02      	cmp	r5, #2
 801a434:	f104 0314 	add.w	r3, r4, #20
 801a438:	d13c      	bne.n	801a4b4 <__gethex+0x3e4>
 801a43a:	f8d8 2000 	ldr.w	r2, [r8]
 801a43e:	3a01      	subs	r2, #1
 801a440:	42b2      	cmp	r2, r6
 801a442:	d109      	bne.n	801a458 <__gethex+0x388>
 801a444:	1171      	asrs	r1, r6, #5
 801a446:	2201      	movs	r2, #1
 801a448:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801a44c:	f006 061f 	and.w	r6, r6, #31
 801a450:	fa02 f606 	lsl.w	r6, r2, r6
 801a454:	421e      	tst	r6, r3
 801a456:	d13a      	bne.n	801a4ce <__gethex+0x3fe>
 801a458:	f045 0520 	orr.w	r5, r5, #32
 801a45c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a45e:	601c      	str	r4, [r3, #0]
 801a460:	9b02      	ldr	r3, [sp, #8]
 801a462:	601f      	str	r7, [r3, #0]
 801a464:	e6b0      	b.n	801a1c8 <__gethex+0xf8>
 801a466:	4299      	cmp	r1, r3
 801a468:	f843 cc04 	str.w	ip, [r3, #-4]
 801a46c:	d8d9      	bhi.n	801a422 <__gethex+0x352>
 801a46e:	68a3      	ldr	r3, [r4, #8]
 801a470:	459b      	cmp	fp, r3
 801a472:	db17      	blt.n	801a4a4 <__gethex+0x3d4>
 801a474:	6861      	ldr	r1, [r4, #4]
 801a476:	9801      	ldr	r0, [sp, #4]
 801a478:	3101      	adds	r1, #1
 801a47a:	f000 fa0f 	bl	801a89c <_Balloc>
 801a47e:	4681      	mov	r9, r0
 801a480:	b918      	cbnz	r0, 801a48a <__gethex+0x3ba>
 801a482:	4b1a      	ldr	r3, [pc, #104]	@ (801a4ec <__gethex+0x41c>)
 801a484:	4602      	mov	r2, r0
 801a486:	2184      	movs	r1, #132	@ 0x84
 801a488:	e6c5      	b.n	801a216 <__gethex+0x146>
 801a48a:	6922      	ldr	r2, [r4, #16]
 801a48c:	3202      	adds	r2, #2
 801a48e:	f104 010c 	add.w	r1, r4, #12
 801a492:	0092      	lsls	r2, r2, #2
 801a494:	300c      	adds	r0, #12
 801a496:	f7fe ff46 	bl	8019326 <memcpy>
 801a49a:	4621      	mov	r1, r4
 801a49c:	9801      	ldr	r0, [sp, #4]
 801a49e:	f000 fa3d 	bl	801a91c <_Bfree>
 801a4a2:	464c      	mov	r4, r9
 801a4a4:	6923      	ldr	r3, [r4, #16]
 801a4a6:	1c5a      	adds	r2, r3, #1
 801a4a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801a4ac:	6122      	str	r2, [r4, #16]
 801a4ae:	2201      	movs	r2, #1
 801a4b0:	615a      	str	r2, [r3, #20]
 801a4b2:	e7be      	b.n	801a432 <__gethex+0x362>
 801a4b4:	6922      	ldr	r2, [r4, #16]
 801a4b6:	455a      	cmp	r2, fp
 801a4b8:	dd0b      	ble.n	801a4d2 <__gethex+0x402>
 801a4ba:	2101      	movs	r1, #1
 801a4bc:	4620      	mov	r0, r4
 801a4be:	f7ff fd9f 	bl	801a000 <rshift>
 801a4c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801a4c6:	3701      	adds	r7, #1
 801a4c8:	42bb      	cmp	r3, r7
 801a4ca:	f6ff aee0 	blt.w	801a28e <__gethex+0x1be>
 801a4ce:	2501      	movs	r5, #1
 801a4d0:	e7c2      	b.n	801a458 <__gethex+0x388>
 801a4d2:	f016 061f 	ands.w	r6, r6, #31
 801a4d6:	d0fa      	beq.n	801a4ce <__gethex+0x3fe>
 801a4d8:	4453      	add	r3, sl
 801a4da:	f1c6 0620 	rsb	r6, r6, #32
 801a4de:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801a4e2:	f000 facd 	bl	801aa80 <__hi0bits>
 801a4e6:	42b0      	cmp	r0, r6
 801a4e8:	dbe7      	blt.n	801a4ba <__gethex+0x3ea>
 801a4ea:	e7f0      	b.n	801a4ce <__gethex+0x3fe>
 801a4ec:	0801ebf7 	.word	0x0801ebf7

0801a4f0 <L_shift>:
 801a4f0:	f1c2 0208 	rsb	r2, r2, #8
 801a4f4:	0092      	lsls	r2, r2, #2
 801a4f6:	b570      	push	{r4, r5, r6, lr}
 801a4f8:	f1c2 0620 	rsb	r6, r2, #32
 801a4fc:	6843      	ldr	r3, [r0, #4]
 801a4fe:	6804      	ldr	r4, [r0, #0]
 801a500:	fa03 f506 	lsl.w	r5, r3, r6
 801a504:	432c      	orrs	r4, r5
 801a506:	40d3      	lsrs	r3, r2
 801a508:	6004      	str	r4, [r0, #0]
 801a50a:	f840 3f04 	str.w	r3, [r0, #4]!
 801a50e:	4288      	cmp	r0, r1
 801a510:	d3f4      	bcc.n	801a4fc <L_shift+0xc>
 801a512:	bd70      	pop	{r4, r5, r6, pc}

0801a514 <__match>:
 801a514:	b530      	push	{r4, r5, lr}
 801a516:	6803      	ldr	r3, [r0, #0]
 801a518:	3301      	adds	r3, #1
 801a51a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a51e:	b914      	cbnz	r4, 801a526 <__match+0x12>
 801a520:	6003      	str	r3, [r0, #0]
 801a522:	2001      	movs	r0, #1
 801a524:	bd30      	pop	{r4, r5, pc}
 801a526:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a52a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801a52e:	2d19      	cmp	r5, #25
 801a530:	bf98      	it	ls
 801a532:	3220      	addls	r2, #32
 801a534:	42a2      	cmp	r2, r4
 801a536:	d0f0      	beq.n	801a51a <__match+0x6>
 801a538:	2000      	movs	r0, #0
 801a53a:	e7f3      	b.n	801a524 <__match+0x10>

0801a53c <__hexnan>:
 801a53c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a540:	680b      	ldr	r3, [r1, #0]
 801a542:	6801      	ldr	r1, [r0, #0]
 801a544:	115e      	asrs	r6, r3, #5
 801a546:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801a54a:	f013 031f 	ands.w	r3, r3, #31
 801a54e:	b087      	sub	sp, #28
 801a550:	bf18      	it	ne
 801a552:	3604      	addne	r6, #4
 801a554:	2500      	movs	r5, #0
 801a556:	1f37      	subs	r7, r6, #4
 801a558:	4682      	mov	sl, r0
 801a55a:	4690      	mov	r8, r2
 801a55c:	9301      	str	r3, [sp, #4]
 801a55e:	f846 5c04 	str.w	r5, [r6, #-4]
 801a562:	46b9      	mov	r9, r7
 801a564:	463c      	mov	r4, r7
 801a566:	9502      	str	r5, [sp, #8]
 801a568:	46ab      	mov	fp, r5
 801a56a:	784a      	ldrb	r2, [r1, #1]
 801a56c:	1c4b      	adds	r3, r1, #1
 801a56e:	9303      	str	r3, [sp, #12]
 801a570:	b342      	cbz	r2, 801a5c4 <__hexnan+0x88>
 801a572:	4610      	mov	r0, r2
 801a574:	9105      	str	r1, [sp, #20]
 801a576:	9204      	str	r2, [sp, #16]
 801a578:	f7ff fd94 	bl	801a0a4 <__hexdig_fun>
 801a57c:	2800      	cmp	r0, #0
 801a57e:	d151      	bne.n	801a624 <__hexnan+0xe8>
 801a580:	9a04      	ldr	r2, [sp, #16]
 801a582:	9905      	ldr	r1, [sp, #20]
 801a584:	2a20      	cmp	r2, #32
 801a586:	d818      	bhi.n	801a5ba <__hexnan+0x7e>
 801a588:	9b02      	ldr	r3, [sp, #8]
 801a58a:	459b      	cmp	fp, r3
 801a58c:	dd13      	ble.n	801a5b6 <__hexnan+0x7a>
 801a58e:	454c      	cmp	r4, r9
 801a590:	d206      	bcs.n	801a5a0 <__hexnan+0x64>
 801a592:	2d07      	cmp	r5, #7
 801a594:	dc04      	bgt.n	801a5a0 <__hexnan+0x64>
 801a596:	462a      	mov	r2, r5
 801a598:	4649      	mov	r1, r9
 801a59a:	4620      	mov	r0, r4
 801a59c:	f7ff ffa8 	bl	801a4f0 <L_shift>
 801a5a0:	4544      	cmp	r4, r8
 801a5a2:	d952      	bls.n	801a64a <__hexnan+0x10e>
 801a5a4:	2300      	movs	r3, #0
 801a5a6:	f1a4 0904 	sub.w	r9, r4, #4
 801a5aa:	f844 3c04 	str.w	r3, [r4, #-4]
 801a5ae:	f8cd b008 	str.w	fp, [sp, #8]
 801a5b2:	464c      	mov	r4, r9
 801a5b4:	461d      	mov	r5, r3
 801a5b6:	9903      	ldr	r1, [sp, #12]
 801a5b8:	e7d7      	b.n	801a56a <__hexnan+0x2e>
 801a5ba:	2a29      	cmp	r2, #41	@ 0x29
 801a5bc:	d157      	bne.n	801a66e <__hexnan+0x132>
 801a5be:	3102      	adds	r1, #2
 801a5c0:	f8ca 1000 	str.w	r1, [sl]
 801a5c4:	f1bb 0f00 	cmp.w	fp, #0
 801a5c8:	d051      	beq.n	801a66e <__hexnan+0x132>
 801a5ca:	454c      	cmp	r4, r9
 801a5cc:	d206      	bcs.n	801a5dc <__hexnan+0xa0>
 801a5ce:	2d07      	cmp	r5, #7
 801a5d0:	dc04      	bgt.n	801a5dc <__hexnan+0xa0>
 801a5d2:	462a      	mov	r2, r5
 801a5d4:	4649      	mov	r1, r9
 801a5d6:	4620      	mov	r0, r4
 801a5d8:	f7ff ff8a 	bl	801a4f0 <L_shift>
 801a5dc:	4544      	cmp	r4, r8
 801a5de:	d936      	bls.n	801a64e <__hexnan+0x112>
 801a5e0:	f1a8 0204 	sub.w	r2, r8, #4
 801a5e4:	4623      	mov	r3, r4
 801a5e6:	f853 1b04 	ldr.w	r1, [r3], #4
 801a5ea:	f842 1f04 	str.w	r1, [r2, #4]!
 801a5ee:	429f      	cmp	r7, r3
 801a5f0:	d2f9      	bcs.n	801a5e6 <__hexnan+0xaa>
 801a5f2:	1b3b      	subs	r3, r7, r4
 801a5f4:	f023 0303 	bic.w	r3, r3, #3
 801a5f8:	3304      	adds	r3, #4
 801a5fa:	3401      	adds	r4, #1
 801a5fc:	3e03      	subs	r6, #3
 801a5fe:	42b4      	cmp	r4, r6
 801a600:	bf88      	it	hi
 801a602:	2304      	movhi	r3, #4
 801a604:	4443      	add	r3, r8
 801a606:	2200      	movs	r2, #0
 801a608:	f843 2b04 	str.w	r2, [r3], #4
 801a60c:	429f      	cmp	r7, r3
 801a60e:	d2fb      	bcs.n	801a608 <__hexnan+0xcc>
 801a610:	683b      	ldr	r3, [r7, #0]
 801a612:	b91b      	cbnz	r3, 801a61c <__hexnan+0xe0>
 801a614:	4547      	cmp	r7, r8
 801a616:	d128      	bne.n	801a66a <__hexnan+0x12e>
 801a618:	2301      	movs	r3, #1
 801a61a:	603b      	str	r3, [r7, #0]
 801a61c:	2005      	movs	r0, #5
 801a61e:	b007      	add	sp, #28
 801a620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a624:	3501      	adds	r5, #1
 801a626:	2d08      	cmp	r5, #8
 801a628:	f10b 0b01 	add.w	fp, fp, #1
 801a62c:	dd06      	ble.n	801a63c <__hexnan+0x100>
 801a62e:	4544      	cmp	r4, r8
 801a630:	d9c1      	bls.n	801a5b6 <__hexnan+0x7a>
 801a632:	2300      	movs	r3, #0
 801a634:	f844 3c04 	str.w	r3, [r4, #-4]
 801a638:	2501      	movs	r5, #1
 801a63a:	3c04      	subs	r4, #4
 801a63c:	6822      	ldr	r2, [r4, #0]
 801a63e:	f000 000f 	and.w	r0, r0, #15
 801a642:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801a646:	6020      	str	r0, [r4, #0]
 801a648:	e7b5      	b.n	801a5b6 <__hexnan+0x7a>
 801a64a:	2508      	movs	r5, #8
 801a64c:	e7b3      	b.n	801a5b6 <__hexnan+0x7a>
 801a64e:	9b01      	ldr	r3, [sp, #4]
 801a650:	2b00      	cmp	r3, #0
 801a652:	d0dd      	beq.n	801a610 <__hexnan+0xd4>
 801a654:	f1c3 0320 	rsb	r3, r3, #32
 801a658:	f04f 32ff 	mov.w	r2, #4294967295
 801a65c:	40da      	lsrs	r2, r3
 801a65e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801a662:	4013      	ands	r3, r2
 801a664:	f846 3c04 	str.w	r3, [r6, #-4]
 801a668:	e7d2      	b.n	801a610 <__hexnan+0xd4>
 801a66a:	3f04      	subs	r7, #4
 801a66c:	e7d0      	b.n	801a610 <__hexnan+0xd4>
 801a66e:	2004      	movs	r0, #4
 801a670:	e7d5      	b.n	801a61e <__hexnan+0xe2>
	...

0801a674 <_findenv_r>:
 801a674:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a678:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801a6e8 <_findenv_r+0x74>
 801a67c:	4606      	mov	r6, r0
 801a67e:	4689      	mov	r9, r1
 801a680:	4617      	mov	r7, r2
 801a682:	f001 fcb3 	bl	801bfec <__env_lock>
 801a686:	f8da 4000 	ldr.w	r4, [sl]
 801a68a:	b134      	cbz	r4, 801a69a <_findenv_r+0x26>
 801a68c:	464b      	mov	r3, r9
 801a68e:	4698      	mov	r8, r3
 801a690:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a694:	b13a      	cbz	r2, 801a6a6 <_findenv_r+0x32>
 801a696:	2a3d      	cmp	r2, #61	@ 0x3d
 801a698:	d1f9      	bne.n	801a68e <_findenv_r+0x1a>
 801a69a:	4630      	mov	r0, r6
 801a69c:	f001 fcac 	bl	801bff8 <__env_unlock>
 801a6a0:	2000      	movs	r0, #0
 801a6a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a6a6:	eba8 0809 	sub.w	r8, r8, r9
 801a6aa:	46a3      	mov	fp, r4
 801a6ac:	f854 0b04 	ldr.w	r0, [r4], #4
 801a6b0:	2800      	cmp	r0, #0
 801a6b2:	d0f2      	beq.n	801a69a <_findenv_r+0x26>
 801a6b4:	4642      	mov	r2, r8
 801a6b6:	4649      	mov	r1, r9
 801a6b8:	f7fe f817 	bl	80186ea <strncmp>
 801a6bc:	2800      	cmp	r0, #0
 801a6be:	d1f4      	bne.n	801a6aa <_findenv_r+0x36>
 801a6c0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801a6c4:	eb03 0508 	add.w	r5, r3, r8
 801a6c8:	f813 3008 	ldrb.w	r3, [r3, r8]
 801a6cc:	2b3d      	cmp	r3, #61	@ 0x3d
 801a6ce:	d1ec      	bne.n	801a6aa <_findenv_r+0x36>
 801a6d0:	f8da 3000 	ldr.w	r3, [sl]
 801a6d4:	ebab 0303 	sub.w	r3, fp, r3
 801a6d8:	109b      	asrs	r3, r3, #2
 801a6da:	4630      	mov	r0, r6
 801a6dc:	603b      	str	r3, [r7, #0]
 801a6de:	f001 fc8b 	bl	801bff8 <__env_unlock>
 801a6e2:	1c68      	adds	r0, r5, #1
 801a6e4:	e7dd      	b.n	801a6a2 <_findenv_r+0x2e>
 801a6e6:	bf00      	nop
 801a6e8:	24000150 	.word	0x24000150

0801a6ec <_getenv_r>:
 801a6ec:	b507      	push	{r0, r1, r2, lr}
 801a6ee:	aa01      	add	r2, sp, #4
 801a6f0:	f7ff ffc0 	bl	801a674 <_findenv_r>
 801a6f4:	b003      	add	sp, #12
 801a6f6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801a6fc <malloc>:
 801a6fc:	4b02      	ldr	r3, [pc, #8]	@ (801a708 <malloc+0xc>)
 801a6fe:	4601      	mov	r1, r0
 801a700:	6818      	ldr	r0, [r3, #0]
 801a702:	f000 b82d 	b.w	801a760 <_malloc_r>
 801a706:	bf00      	nop
 801a708:	24000430 	.word	0x24000430

0801a70c <free>:
 801a70c:	4b02      	ldr	r3, [pc, #8]	@ (801a718 <free+0xc>)
 801a70e:	4601      	mov	r1, r0
 801a710:	6818      	ldr	r0, [r3, #0]
 801a712:	f7ff bc2b 	b.w	8019f6c <_free_r>
 801a716:	bf00      	nop
 801a718:	24000430 	.word	0x24000430

0801a71c <sbrk_aligned>:
 801a71c:	b570      	push	{r4, r5, r6, lr}
 801a71e:	4e0f      	ldr	r6, [pc, #60]	@ (801a75c <sbrk_aligned+0x40>)
 801a720:	460c      	mov	r4, r1
 801a722:	6831      	ldr	r1, [r6, #0]
 801a724:	4605      	mov	r5, r0
 801a726:	b911      	cbnz	r1, 801a72e <sbrk_aligned+0x12>
 801a728:	f001 fc34 	bl	801bf94 <_sbrk_r>
 801a72c:	6030      	str	r0, [r6, #0]
 801a72e:	4621      	mov	r1, r4
 801a730:	4628      	mov	r0, r5
 801a732:	f001 fc2f 	bl	801bf94 <_sbrk_r>
 801a736:	1c43      	adds	r3, r0, #1
 801a738:	d103      	bne.n	801a742 <sbrk_aligned+0x26>
 801a73a:	f04f 34ff 	mov.w	r4, #4294967295
 801a73e:	4620      	mov	r0, r4
 801a740:	bd70      	pop	{r4, r5, r6, pc}
 801a742:	1cc4      	adds	r4, r0, #3
 801a744:	f024 0403 	bic.w	r4, r4, #3
 801a748:	42a0      	cmp	r0, r4
 801a74a:	d0f8      	beq.n	801a73e <sbrk_aligned+0x22>
 801a74c:	1a21      	subs	r1, r4, r0
 801a74e:	4628      	mov	r0, r5
 801a750:	f001 fc20 	bl	801bf94 <_sbrk_r>
 801a754:	3001      	adds	r0, #1
 801a756:	d1f2      	bne.n	801a73e <sbrk_aligned+0x22>
 801a758:	e7ef      	b.n	801a73a <sbrk_aligned+0x1e>
 801a75a:	bf00      	nop
 801a75c:	24003e8c 	.word	0x24003e8c

0801a760 <_malloc_r>:
 801a760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a764:	1ccd      	adds	r5, r1, #3
 801a766:	f025 0503 	bic.w	r5, r5, #3
 801a76a:	3508      	adds	r5, #8
 801a76c:	2d0c      	cmp	r5, #12
 801a76e:	bf38      	it	cc
 801a770:	250c      	movcc	r5, #12
 801a772:	2d00      	cmp	r5, #0
 801a774:	4606      	mov	r6, r0
 801a776:	db01      	blt.n	801a77c <_malloc_r+0x1c>
 801a778:	42a9      	cmp	r1, r5
 801a77a:	d904      	bls.n	801a786 <_malloc_r+0x26>
 801a77c:	230c      	movs	r3, #12
 801a77e:	6033      	str	r3, [r6, #0]
 801a780:	2000      	movs	r0, #0
 801a782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a786:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801a85c <_malloc_r+0xfc>
 801a78a:	f000 f87b 	bl	801a884 <__malloc_lock>
 801a78e:	f8d8 3000 	ldr.w	r3, [r8]
 801a792:	461c      	mov	r4, r3
 801a794:	bb44      	cbnz	r4, 801a7e8 <_malloc_r+0x88>
 801a796:	4629      	mov	r1, r5
 801a798:	4630      	mov	r0, r6
 801a79a:	f7ff ffbf 	bl	801a71c <sbrk_aligned>
 801a79e:	1c43      	adds	r3, r0, #1
 801a7a0:	4604      	mov	r4, r0
 801a7a2:	d158      	bne.n	801a856 <_malloc_r+0xf6>
 801a7a4:	f8d8 4000 	ldr.w	r4, [r8]
 801a7a8:	4627      	mov	r7, r4
 801a7aa:	2f00      	cmp	r7, #0
 801a7ac:	d143      	bne.n	801a836 <_malloc_r+0xd6>
 801a7ae:	2c00      	cmp	r4, #0
 801a7b0:	d04b      	beq.n	801a84a <_malloc_r+0xea>
 801a7b2:	6823      	ldr	r3, [r4, #0]
 801a7b4:	4639      	mov	r1, r7
 801a7b6:	4630      	mov	r0, r6
 801a7b8:	eb04 0903 	add.w	r9, r4, r3
 801a7bc:	f001 fbea 	bl	801bf94 <_sbrk_r>
 801a7c0:	4581      	cmp	r9, r0
 801a7c2:	d142      	bne.n	801a84a <_malloc_r+0xea>
 801a7c4:	6821      	ldr	r1, [r4, #0]
 801a7c6:	1a6d      	subs	r5, r5, r1
 801a7c8:	4629      	mov	r1, r5
 801a7ca:	4630      	mov	r0, r6
 801a7cc:	f7ff ffa6 	bl	801a71c <sbrk_aligned>
 801a7d0:	3001      	adds	r0, #1
 801a7d2:	d03a      	beq.n	801a84a <_malloc_r+0xea>
 801a7d4:	6823      	ldr	r3, [r4, #0]
 801a7d6:	442b      	add	r3, r5
 801a7d8:	6023      	str	r3, [r4, #0]
 801a7da:	f8d8 3000 	ldr.w	r3, [r8]
 801a7de:	685a      	ldr	r2, [r3, #4]
 801a7e0:	bb62      	cbnz	r2, 801a83c <_malloc_r+0xdc>
 801a7e2:	f8c8 7000 	str.w	r7, [r8]
 801a7e6:	e00f      	b.n	801a808 <_malloc_r+0xa8>
 801a7e8:	6822      	ldr	r2, [r4, #0]
 801a7ea:	1b52      	subs	r2, r2, r5
 801a7ec:	d420      	bmi.n	801a830 <_malloc_r+0xd0>
 801a7ee:	2a0b      	cmp	r2, #11
 801a7f0:	d917      	bls.n	801a822 <_malloc_r+0xc2>
 801a7f2:	1961      	adds	r1, r4, r5
 801a7f4:	42a3      	cmp	r3, r4
 801a7f6:	6025      	str	r5, [r4, #0]
 801a7f8:	bf18      	it	ne
 801a7fa:	6059      	strne	r1, [r3, #4]
 801a7fc:	6863      	ldr	r3, [r4, #4]
 801a7fe:	bf08      	it	eq
 801a800:	f8c8 1000 	streq.w	r1, [r8]
 801a804:	5162      	str	r2, [r4, r5]
 801a806:	604b      	str	r3, [r1, #4]
 801a808:	4630      	mov	r0, r6
 801a80a:	f000 f841 	bl	801a890 <__malloc_unlock>
 801a80e:	f104 000b 	add.w	r0, r4, #11
 801a812:	1d23      	adds	r3, r4, #4
 801a814:	f020 0007 	bic.w	r0, r0, #7
 801a818:	1ac2      	subs	r2, r0, r3
 801a81a:	bf1c      	itt	ne
 801a81c:	1a1b      	subne	r3, r3, r0
 801a81e:	50a3      	strne	r3, [r4, r2]
 801a820:	e7af      	b.n	801a782 <_malloc_r+0x22>
 801a822:	6862      	ldr	r2, [r4, #4]
 801a824:	42a3      	cmp	r3, r4
 801a826:	bf0c      	ite	eq
 801a828:	f8c8 2000 	streq.w	r2, [r8]
 801a82c:	605a      	strne	r2, [r3, #4]
 801a82e:	e7eb      	b.n	801a808 <_malloc_r+0xa8>
 801a830:	4623      	mov	r3, r4
 801a832:	6864      	ldr	r4, [r4, #4]
 801a834:	e7ae      	b.n	801a794 <_malloc_r+0x34>
 801a836:	463c      	mov	r4, r7
 801a838:	687f      	ldr	r7, [r7, #4]
 801a83a:	e7b6      	b.n	801a7aa <_malloc_r+0x4a>
 801a83c:	461a      	mov	r2, r3
 801a83e:	685b      	ldr	r3, [r3, #4]
 801a840:	42a3      	cmp	r3, r4
 801a842:	d1fb      	bne.n	801a83c <_malloc_r+0xdc>
 801a844:	2300      	movs	r3, #0
 801a846:	6053      	str	r3, [r2, #4]
 801a848:	e7de      	b.n	801a808 <_malloc_r+0xa8>
 801a84a:	230c      	movs	r3, #12
 801a84c:	6033      	str	r3, [r6, #0]
 801a84e:	4630      	mov	r0, r6
 801a850:	f000 f81e 	bl	801a890 <__malloc_unlock>
 801a854:	e794      	b.n	801a780 <_malloc_r+0x20>
 801a856:	6005      	str	r5, [r0, #0]
 801a858:	e7d6      	b.n	801a808 <_malloc_r+0xa8>
 801a85a:	bf00      	nop
 801a85c:	24003e90 	.word	0x24003e90

0801a860 <__ascii_mbtowc>:
 801a860:	b082      	sub	sp, #8
 801a862:	b901      	cbnz	r1, 801a866 <__ascii_mbtowc+0x6>
 801a864:	a901      	add	r1, sp, #4
 801a866:	b142      	cbz	r2, 801a87a <__ascii_mbtowc+0x1a>
 801a868:	b14b      	cbz	r3, 801a87e <__ascii_mbtowc+0x1e>
 801a86a:	7813      	ldrb	r3, [r2, #0]
 801a86c:	600b      	str	r3, [r1, #0]
 801a86e:	7812      	ldrb	r2, [r2, #0]
 801a870:	1e10      	subs	r0, r2, #0
 801a872:	bf18      	it	ne
 801a874:	2001      	movne	r0, #1
 801a876:	b002      	add	sp, #8
 801a878:	4770      	bx	lr
 801a87a:	4610      	mov	r0, r2
 801a87c:	e7fb      	b.n	801a876 <__ascii_mbtowc+0x16>
 801a87e:	f06f 0001 	mvn.w	r0, #1
 801a882:	e7f8      	b.n	801a876 <__ascii_mbtowc+0x16>

0801a884 <__malloc_lock>:
 801a884:	4801      	ldr	r0, [pc, #4]	@ (801a88c <__malloc_lock+0x8>)
 801a886:	f7fe bd43 	b.w	8019310 <__retarget_lock_acquire_recursive>
 801a88a:	bf00      	nop
 801a88c:	24003e8a 	.word	0x24003e8a

0801a890 <__malloc_unlock>:
 801a890:	4801      	ldr	r0, [pc, #4]	@ (801a898 <__malloc_unlock+0x8>)
 801a892:	f7fe bd3f 	b.w	8019314 <__retarget_lock_release_recursive>
 801a896:	bf00      	nop
 801a898:	24003e8a 	.word	0x24003e8a

0801a89c <_Balloc>:
 801a89c:	b570      	push	{r4, r5, r6, lr}
 801a89e:	69c6      	ldr	r6, [r0, #28]
 801a8a0:	4604      	mov	r4, r0
 801a8a2:	460d      	mov	r5, r1
 801a8a4:	b976      	cbnz	r6, 801a8c4 <_Balloc+0x28>
 801a8a6:	2010      	movs	r0, #16
 801a8a8:	f7ff ff28 	bl	801a6fc <malloc>
 801a8ac:	4602      	mov	r2, r0
 801a8ae:	61e0      	str	r0, [r4, #28]
 801a8b0:	b920      	cbnz	r0, 801a8bc <_Balloc+0x20>
 801a8b2:	4b18      	ldr	r3, [pc, #96]	@ (801a914 <_Balloc+0x78>)
 801a8b4:	4818      	ldr	r0, [pc, #96]	@ (801a918 <_Balloc+0x7c>)
 801a8b6:	216b      	movs	r1, #107	@ 0x6b
 801a8b8:	f7fe fd54 	bl	8019364 <__assert_func>
 801a8bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a8c0:	6006      	str	r6, [r0, #0]
 801a8c2:	60c6      	str	r6, [r0, #12]
 801a8c4:	69e6      	ldr	r6, [r4, #28]
 801a8c6:	68f3      	ldr	r3, [r6, #12]
 801a8c8:	b183      	cbz	r3, 801a8ec <_Balloc+0x50>
 801a8ca:	69e3      	ldr	r3, [r4, #28]
 801a8cc:	68db      	ldr	r3, [r3, #12]
 801a8ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801a8d2:	b9b8      	cbnz	r0, 801a904 <_Balloc+0x68>
 801a8d4:	2101      	movs	r1, #1
 801a8d6:	fa01 f605 	lsl.w	r6, r1, r5
 801a8da:	1d72      	adds	r2, r6, #5
 801a8dc:	0092      	lsls	r2, r2, #2
 801a8de:	4620      	mov	r0, r4
 801a8e0:	f001 fb6f 	bl	801bfc2 <_calloc_r>
 801a8e4:	b160      	cbz	r0, 801a900 <_Balloc+0x64>
 801a8e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801a8ea:	e00e      	b.n	801a90a <_Balloc+0x6e>
 801a8ec:	2221      	movs	r2, #33	@ 0x21
 801a8ee:	2104      	movs	r1, #4
 801a8f0:	4620      	mov	r0, r4
 801a8f2:	f001 fb66 	bl	801bfc2 <_calloc_r>
 801a8f6:	69e3      	ldr	r3, [r4, #28]
 801a8f8:	60f0      	str	r0, [r6, #12]
 801a8fa:	68db      	ldr	r3, [r3, #12]
 801a8fc:	2b00      	cmp	r3, #0
 801a8fe:	d1e4      	bne.n	801a8ca <_Balloc+0x2e>
 801a900:	2000      	movs	r0, #0
 801a902:	bd70      	pop	{r4, r5, r6, pc}
 801a904:	6802      	ldr	r2, [r0, #0]
 801a906:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801a90a:	2300      	movs	r3, #0
 801a90c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801a910:	e7f7      	b.n	801a902 <_Balloc+0x66>
 801a912:	bf00      	nop
 801a914:	0801e840 	.word	0x0801e840
 801a918:	0801ec68 	.word	0x0801ec68

0801a91c <_Bfree>:
 801a91c:	b570      	push	{r4, r5, r6, lr}
 801a91e:	69c6      	ldr	r6, [r0, #28]
 801a920:	4605      	mov	r5, r0
 801a922:	460c      	mov	r4, r1
 801a924:	b976      	cbnz	r6, 801a944 <_Bfree+0x28>
 801a926:	2010      	movs	r0, #16
 801a928:	f7ff fee8 	bl	801a6fc <malloc>
 801a92c:	4602      	mov	r2, r0
 801a92e:	61e8      	str	r0, [r5, #28]
 801a930:	b920      	cbnz	r0, 801a93c <_Bfree+0x20>
 801a932:	4b09      	ldr	r3, [pc, #36]	@ (801a958 <_Bfree+0x3c>)
 801a934:	4809      	ldr	r0, [pc, #36]	@ (801a95c <_Bfree+0x40>)
 801a936:	218f      	movs	r1, #143	@ 0x8f
 801a938:	f7fe fd14 	bl	8019364 <__assert_func>
 801a93c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a940:	6006      	str	r6, [r0, #0]
 801a942:	60c6      	str	r6, [r0, #12]
 801a944:	b13c      	cbz	r4, 801a956 <_Bfree+0x3a>
 801a946:	69eb      	ldr	r3, [r5, #28]
 801a948:	6862      	ldr	r2, [r4, #4]
 801a94a:	68db      	ldr	r3, [r3, #12]
 801a94c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801a950:	6021      	str	r1, [r4, #0]
 801a952:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801a956:	bd70      	pop	{r4, r5, r6, pc}
 801a958:	0801e840 	.word	0x0801e840
 801a95c:	0801ec68 	.word	0x0801ec68

0801a960 <__multadd>:
 801a960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a964:	690d      	ldr	r5, [r1, #16]
 801a966:	4607      	mov	r7, r0
 801a968:	460c      	mov	r4, r1
 801a96a:	461e      	mov	r6, r3
 801a96c:	f101 0c14 	add.w	ip, r1, #20
 801a970:	2000      	movs	r0, #0
 801a972:	f8dc 3000 	ldr.w	r3, [ip]
 801a976:	b299      	uxth	r1, r3
 801a978:	fb02 6101 	mla	r1, r2, r1, r6
 801a97c:	0c1e      	lsrs	r6, r3, #16
 801a97e:	0c0b      	lsrs	r3, r1, #16
 801a980:	fb02 3306 	mla	r3, r2, r6, r3
 801a984:	b289      	uxth	r1, r1
 801a986:	3001      	adds	r0, #1
 801a988:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801a98c:	4285      	cmp	r5, r0
 801a98e:	f84c 1b04 	str.w	r1, [ip], #4
 801a992:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801a996:	dcec      	bgt.n	801a972 <__multadd+0x12>
 801a998:	b30e      	cbz	r6, 801a9de <__multadd+0x7e>
 801a99a:	68a3      	ldr	r3, [r4, #8]
 801a99c:	42ab      	cmp	r3, r5
 801a99e:	dc19      	bgt.n	801a9d4 <__multadd+0x74>
 801a9a0:	6861      	ldr	r1, [r4, #4]
 801a9a2:	4638      	mov	r0, r7
 801a9a4:	3101      	adds	r1, #1
 801a9a6:	f7ff ff79 	bl	801a89c <_Balloc>
 801a9aa:	4680      	mov	r8, r0
 801a9ac:	b928      	cbnz	r0, 801a9ba <__multadd+0x5a>
 801a9ae:	4602      	mov	r2, r0
 801a9b0:	4b0c      	ldr	r3, [pc, #48]	@ (801a9e4 <__multadd+0x84>)
 801a9b2:	480d      	ldr	r0, [pc, #52]	@ (801a9e8 <__multadd+0x88>)
 801a9b4:	21ba      	movs	r1, #186	@ 0xba
 801a9b6:	f7fe fcd5 	bl	8019364 <__assert_func>
 801a9ba:	6922      	ldr	r2, [r4, #16]
 801a9bc:	3202      	adds	r2, #2
 801a9be:	f104 010c 	add.w	r1, r4, #12
 801a9c2:	0092      	lsls	r2, r2, #2
 801a9c4:	300c      	adds	r0, #12
 801a9c6:	f7fe fcae 	bl	8019326 <memcpy>
 801a9ca:	4621      	mov	r1, r4
 801a9cc:	4638      	mov	r0, r7
 801a9ce:	f7ff ffa5 	bl	801a91c <_Bfree>
 801a9d2:	4644      	mov	r4, r8
 801a9d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801a9d8:	3501      	adds	r5, #1
 801a9da:	615e      	str	r6, [r3, #20]
 801a9dc:	6125      	str	r5, [r4, #16]
 801a9de:	4620      	mov	r0, r4
 801a9e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a9e4:	0801ebf7 	.word	0x0801ebf7
 801a9e8:	0801ec68 	.word	0x0801ec68

0801a9ec <__s2b>:
 801a9ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a9f0:	460c      	mov	r4, r1
 801a9f2:	4615      	mov	r5, r2
 801a9f4:	461f      	mov	r7, r3
 801a9f6:	2209      	movs	r2, #9
 801a9f8:	3308      	adds	r3, #8
 801a9fa:	4606      	mov	r6, r0
 801a9fc:	fb93 f3f2 	sdiv	r3, r3, r2
 801aa00:	2100      	movs	r1, #0
 801aa02:	2201      	movs	r2, #1
 801aa04:	429a      	cmp	r2, r3
 801aa06:	db09      	blt.n	801aa1c <__s2b+0x30>
 801aa08:	4630      	mov	r0, r6
 801aa0a:	f7ff ff47 	bl	801a89c <_Balloc>
 801aa0e:	b940      	cbnz	r0, 801aa22 <__s2b+0x36>
 801aa10:	4602      	mov	r2, r0
 801aa12:	4b19      	ldr	r3, [pc, #100]	@ (801aa78 <__s2b+0x8c>)
 801aa14:	4819      	ldr	r0, [pc, #100]	@ (801aa7c <__s2b+0x90>)
 801aa16:	21d3      	movs	r1, #211	@ 0xd3
 801aa18:	f7fe fca4 	bl	8019364 <__assert_func>
 801aa1c:	0052      	lsls	r2, r2, #1
 801aa1e:	3101      	adds	r1, #1
 801aa20:	e7f0      	b.n	801aa04 <__s2b+0x18>
 801aa22:	9b08      	ldr	r3, [sp, #32]
 801aa24:	6143      	str	r3, [r0, #20]
 801aa26:	2d09      	cmp	r5, #9
 801aa28:	f04f 0301 	mov.w	r3, #1
 801aa2c:	6103      	str	r3, [r0, #16]
 801aa2e:	dd16      	ble.n	801aa5e <__s2b+0x72>
 801aa30:	f104 0909 	add.w	r9, r4, #9
 801aa34:	46c8      	mov	r8, r9
 801aa36:	442c      	add	r4, r5
 801aa38:	f818 3b01 	ldrb.w	r3, [r8], #1
 801aa3c:	4601      	mov	r1, r0
 801aa3e:	3b30      	subs	r3, #48	@ 0x30
 801aa40:	220a      	movs	r2, #10
 801aa42:	4630      	mov	r0, r6
 801aa44:	f7ff ff8c 	bl	801a960 <__multadd>
 801aa48:	45a0      	cmp	r8, r4
 801aa4a:	d1f5      	bne.n	801aa38 <__s2b+0x4c>
 801aa4c:	f1a5 0408 	sub.w	r4, r5, #8
 801aa50:	444c      	add	r4, r9
 801aa52:	1b2d      	subs	r5, r5, r4
 801aa54:	1963      	adds	r3, r4, r5
 801aa56:	42bb      	cmp	r3, r7
 801aa58:	db04      	blt.n	801aa64 <__s2b+0x78>
 801aa5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801aa5e:	340a      	adds	r4, #10
 801aa60:	2509      	movs	r5, #9
 801aa62:	e7f6      	b.n	801aa52 <__s2b+0x66>
 801aa64:	f814 3b01 	ldrb.w	r3, [r4], #1
 801aa68:	4601      	mov	r1, r0
 801aa6a:	3b30      	subs	r3, #48	@ 0x30
 801aa6c:	220a      	movs	r2, #10
 801aa6e:	4630      	mov	r0, r6
 801aa70:	f7ff ff76 	bl	801a960 <__multadd>
 801aa74:	e7ee      	b.n	801aa54 <__s2b+0x68>
 801aa76:	bf00      	nop
 801aa78:	0801ebf7 	.word	0x0801ebf7
 801aa7c:	0801ec68 	.word	0x0801ec68

0801aa80 <__hi0bits>:
 801aa80:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801aa84:	4603      	mov	r3, r0
 801aa86:	bf36      	itet	cc
 801aa88:	0403      	lslcc	r3, r0, #16
 801aa8a:	2000      	movcs	r0, #0
 801aa8c:	2010      	movcc	r0, #16
 801aa8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801aa92:	bf3c      	itt	cc
 801aa94:	021b      	lslcc	r3, r3, #8
 801aa96:	3008      	addcc	r0, #8
 801aa98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801aa9c:	bf3c      	itt	cc
 801aa9e:	011b      	lslcc	r3, r3, #4
 801aaa0:	3004      	addcc	r0, #4
 801aaa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801aaa6:	bf3c      	itt	cc
 801aaa8:	009b      	lslcc	r3, r3, #2
 801aaaa:	3002      	addcc	r0, #2
 801aaac:	2b00      	cmp	r3, #0
 801aaae:	db05      	blt.n	801aabc <__hi0bits+0x3c>
 801aab0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801aab4:	f100 0001 	add.w	r0, r0, #1
 801aab8:	bf08      	it	eq
 801aaba:	2020      	moveq	r0, #32
 801aabc:	4770      	bx	lr

0801aabe <__lo0bits>:
 801aabe:	6803      	ldr	r3, [r0, #0]
 801aac0:	4602      	mov	r2, r0
 801aac2:	f013 0007 	ands.w	r0, r3, #7
 801aac6:	d00b      	beq.n	801aae0 <__lo0bits+0x22>
 801aac8:	07d9      	lsls	r1, r3, #31
 801aaca:	d421      	bmi.n	801ab10 <__lo0bits+0x52>
 801aacc:	0798      	lsls	r0, r3, #30
 801aace:	bf49      	itett	mi
 801aad0:	085b      	lsrmi	r3, r3, #1
 801aad2:	089b      	lsrpl	r3, r3, #2
 801aad4:	2001      	movmi	r0, #1
 801aad6:	6013      	strmi	r3, [r2, #0]
 801aad8:	bf5c      	itt	pl
 801aada:	6013      	strpl	r3, [r2, #0]
 801aadc:	2002      	movpl	r0, #2
 801aade:	4770      	bx	lr
 801aae0:	b299      	uxth	r1, r3
 801aae2:	b909      	cbnz	r1, 801aae8 <__lo0bits+0x2a>
 801aae4:	0c1b      	lsrs	r3, r3, #16
 801aae6:	2010      	movs	r0, #16
 801aae8:	b2d9      	uxtb	r1, r3
 801aaea:	b909      	cbnz	r1, 801aaf0 <__lo0bits+0x32>
 801aaec:	3008      	adds	r0, #8
 801aaee:	0a1b      	lsrs	r3, r3, #8
 801aaf0:	0719      	lsls	r1, r3, #28
 801aaf2:	bf04      	itt	eq
 801aaf4:	091b      	lsreq	r3, r3, #4
 801aaf6:	3004      	addeq	r0, #4
 801aaf8:	0799      	lsls	r1, r3, #30
 801aafa:	bf04      	itt	eq
 801aafc:	089b      	lsreq	r3, r3, #2
 801aafe:	3002      	addeq	r0, #2
 801ab00:	07d9      	lsls	r1, r3, #31
 801ab02:	d403      	bmi.n	801ab0c <__lo0bits+0x4e>
 801ab04:	085b      	lsrs	r3, r3, #1
 801ab06:	f100 0001 	add.w	r0, r0, #1
 801ab0a:	d003      	beq.n	801ab14 <__lo0bits+0x56>
 801ab0c:	6013      	str	r3, [r2, #0]
 801ab0e:	4770      	bx	lr
 801ab10:	2000      	movs	r0, #0
 801ab12:	4770      	bx	lr
 801ab14:	2020      	movs	r0, #32
 801ab16:	4770      	bx	lr

0801ab18 <__i2b>:
 801ab18:	b510      	push	{r4, lr}
 801ab1a:	460c      	mov	r4, r1
 801ab1c:	2101      	movs	r1, #1
 801ab1e:	f7ff febd 	bl	801a89c <_Balloc>
 801ab22:	4602      	mov	r2, r0
 801ab24:	b928      	cbnz	r0, 801ab32 <__i2b+0x1a>
 801ab26:	4b05      	ldr	r3, [pc, #20]	@ (801ab3c <__i2b+0x24>)
 801ab28:	4805      	ldr	r0, [pc, #20]	@ (801ab40 <__i2b+0x28>)
 801ab2a:	f240 1145 	movw	r1, #325	@ 0x145
 801ab2e:	f7fe fc19 	bl	8019364 <__assert_func>
 801ab32:	2301      	movs	r3, #1
 801ab34:	6144      	str	r4, [r0, #20]
 801ab36:	6103      	str	r3, [r0, #16]
 801ab38:	bd10      	pop	{r4, pc}
 801ab3a:	bf00      	nop
 801ab3c:	0801ebf7 	.word	0x0801ebf7
 801ab40:	0801ec68 	.word	0x0801ec68

0801ab44 <__multiply>:
 801ab44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab48:	4614      	mov	r4, r2
 801ab4a:	690a      	ldr	r2, [r1, #16]
 801ab4c:	6923      	ldr	r3, [r4, #16]
 801ab4e:	429a      	cmp	r2, r3
 801ab50:	bfa8      	it	ge
 801ab52:	4623      	movge	r3, r4
 801ab54:	460f      	mov	r7, r1
 801ab56:	bfa4      	itt	ge
 801ab58:	460c      	movge	r4, r1
 801ab5a:	461f      	movge	r7, r3
 801ab5c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801ab60:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801ab64:	68a3      	ldr	r3, [r4, #8]
 801ab66:	6861      	ldr	r1, [r4, #4]
 801ab68:	eb0a 0609 	add.w	r6, sl, r9
 801ab6c:	42b3      	cmp	r3, r6
 801ab6e:	b085      	sub	sp, #20
 801ab70:	bfb8      	it	lt
 801ab72:	3101      	addlt	r1, #1
 801ab74:	f7ff fe92 	bl	801a89c <_Balloc>
 801ab78:	b930      	cbnz	r0, 801ab88 <__multiply+0x44>
 801ab7a:	4602      	mov	r2, r0
 801ab7c:	4b44      	ldr	r3, [pc, #272]	@ (801ac90 <__multiply+0x14c>)
 801ab7e:	4845      	ldr	r0, [pc, #276]	@ (801ac94 <__multiply+0x150>)
 801ab80:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801ab84:	f7fe fbee 	bl	8019364 <__assert_func>
 801ab88:	f100 0514 	add.w	r5, r0, #20
 801ab8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801ab90:	462b      	mov	r3, r5
 801ab92:	2200      	movs	r2, #0
 801ab94:	4543      	cmp	r3, r8
 801ab96:	d321      	bcc.n	801abdc <__multiply+0x98>
 801ab98:	f107 0114 	add.w	r1, r7, #20
 801ab9c:	f104 0214 	add.w	r2, r4, #20
 801aba0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801aba4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801aba8:	9302      	str	r3, [sp, #8]
 801abaa:	1b13      	subs	r3, r2, r4
 801abac:	3b15      	subs	r3, #21
 801abae:	f023 0303 	bic.w	r3, r3, #3
 801abb2:	3304      	adds	r3, #4
 801abb4:	f104 0715 	add.w	r7, r4, #21
 801abb8:	42ba      	cmp	r2, r7
 801abba:	bf38      	it	cc
 801abbc:	2304      	movcc	r3, #4
 801abbe:	9301      	str	r3, [sp, #4]
 801abc0:	9b02      	ldr	r3, [sp, #8]
 801abc2:	9103      	str	r1, [sp, #12]
 801abc4:	428b      	cmp	r3, r1
 801abc6:	d80c      	bhi.n	801abe2 <__multiply+0x9e>
 801abc8:	2e00      	cmp	r6, #0
 801abca:	dd03      	ble.n	801abd4 <__multiply+0x90>
 801abcc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801abd0:	2b00      	cmp	r3, #0
 801abd2:	d05b      	beq.n	801ac8c <__multiply+0x148>
 801abd4:	6106      	str	r6, [r0, #16]
 801abd6:	b005      	add	sp, #20
 801abd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abdc:	f843 2b04 	str.w	r2, [r3], #4
 801abe0:	e7d8      	b.n	801ab94 <__multiply+0x50>
 801abe2:	f8b1 a000 	ldrh.w	sl, [r1]
 801abe6:	f1ba 0f00 	cmp.w	sl, #0
 801abea:	d024      	beq.n	801ac36 <__multiply+0xf2>
 801abec:	f104 0e14 	add.w	lr, r4, #20
 801abf0:	46a9      	mov	r9, r5
 801abf2:	f04f 0c00 	mov.w	ip, #0
 801abf6:	f85e 7b04 	ldr.w	r7, [lr], #4
 801abfa:	f8d9 3000 	ldr.w	r3, [r9]
 801abfe:	fa1f fb87 	uxth.w	fp, r7
 801ac02:	b29b      	uxth	r3, r3
 801ac04:	fb0a 330b 	mla	r3, sl, fp, r3
 801ac08:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801ac0c:	f8d9 7000 	ldr.w	r7, [r9]
 801ac10:	4463      	add	r3, ip
 801ac12:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801ac16:	fb0a c70b 	mla	r7, sl, fp, ip
 801ac1a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801ac1e:	b29b      	uxth	r3, r3
 801ac20:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801ac24:	4572      	cmp	r2, lr
 801ac26:	f849 3b04 	str.w	r3, [r9], #4
 801ac2a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801ac2e:	d8e2      	bhi.n	801abf6 <__multiply+0xb2>
 801ac30:	9b01      	ldr	r3, [sp, #4]
 801ac32:	f845 c003 	str.w	ip, [r5, r3]
 801ac36:	9b03      	ldr	r3, [sp, #12]
 801ac38:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801ac3c:	3104      	adds	r1, #4
 801ac3e:	f1b9 0f00 	cmp.w	r9, #0
 801ac42:	d021      	beq.n	801ac88 <__multiply+0x144>
 801ac44:	682b      	ldr	r3, [r5, #0]
 801ac46:	f104 0c14 	add.w	ip, r4, #20
 801ac4a:	46ae      	mov	lr, r5
 801ac4c:	f04f 0a00 	mov.w	sl, #0
 801ac50:	f8bc b000 	ldrh.w	fp, [ip]
 801ac54:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801ac58:	fb09 770b 	mla	r7, r9, fp, r7
 801ac5c:	4457      	add	r7, sl
 801ac5e:	b29b      	uxth	r3, r3
 801ac60:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801ac64:	f84e 3b04 	str.w	r3, [lr], #4
 801ac68:	f85c 3b04 	ldr.w	r3, [ip], #4
 801ac6c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801ac70:	f8be 3000 	ldrh.w	r3, [lr]
 801ac74:	fb09 330a 	mla	r3, r9, sl, r3
 801ac78:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801ac7c:	4562      	cmp	r2, ip
 801ac7e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801ac82:	d8e5      	bhi.n	801ac50 <__multiply+0x10c>
 801ac84:	9f01      	ldr	r7, [sp, #4]
 801ac86:	51eb      	str	r3, [r5, r7]
 801ac88:	3504      	adds	r5, #4
 801ac8a:	e799      	b.n	801abc0 <__multiply+0x7c>
 801ac8c:	3e01      	subs	r6, #1
 801ac8e:	e79b      	b.n	801abc8 <__multiply+0x84>
 801ac90:	0801ebf7 	.word	0x0801ebf7
 801ac94:	0801ec68 	.word	0x0801ec68

0801ac98 <__pow5mult>:
 801ac98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ac9c:	4615      	mov	r5, r2
 801ac9e:	f012 0203 	ands.w	r2, r2, #3
 801aca2:	4607      	mov	r7, r0
 801aca4:	460e      	mov	r6, r1
 801aca6:	d007      	beq.n	801acb8 <__pow5mult+0x20>
 801aca8:	4c25      	ldr	r4, [pc, #148]	@ (801ad40 <__pow5mult+0xa8>)
 801acaa:	3a01      	subs	r2, #1
 801acac:	2300      	movs	r3, #0
 801acae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801acb2:	f7ff fe55 	bl	801a960 <__multadd>
 801acb6:	4606      	mov	r6, r0
 801acb8:	10ad      	asrs	r5, r5, #2
 801acba:	d03d      	beq.n	801ad38 <__pow5mult+0xa0>
 801acbc:	69fc      	ldr	r4, [r7, #28]
 801acbe:	b97c      	cbnz	r4, 801ace0 <__pow5mult+0x48>
 801acc0:	2010      	movs	r0, #16
 801acc2:	f7ff fd1b 	bl	801a6fc <malloc>
 801acc6:	4602      	mov	r2, r0
 801acc8:	61f8      	str	r0, [r7, #28]
 801acca:	b928      	cbnz	r0, 801acd8 <__pow5mult+0x40>
 801accc:	4b1d      	ldr	r3, [pc, #116]	@ (801ad44 <__pow5mult+0xac>)
 801acce:	481e      	ldr	r0, [pc, #120]	@ (801ad48 <__pow5mult+0xb0>)
 801acd0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801acd4:	f7fe fb46 	bl	8019364 <__assert_func>
 801acd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801acdc:	6004      	str	r4, [r0, #0]
 801acde:	60c4      	str	r4, [r0, #12]
 801ace0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801ace4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801ace8:	b94c      	cbnz	r4, 801acfe <__pow5mult+0x66>
 801acea:	f240 2171 	movw	r1, #625	@ 0x271
 801acee:	4638      	mov	r0, r7
 801acf0:	f7ff ff12 	bl	801ab18 <__i2b>
 801acf4:	2300      	movs	r3, #0
 801acf6:	f8c8 0008 	str.w	r0, [r8, #8]
 801acfa:	4604      	mov	r4, r0
 801acfc:	6003      	str	r3, [r0, #0]
 801acfe:	f04f 0900 	mov.w	r9, #0
 801ad02:	07eb      	lsls	r3, r5, #31
 801ad04:	d50a      	bpl.n	801ad1c <__pow5mult+0x84>
 801ad06:	4631      	mov	r1, r6
 801ad08:	4622      	mov	r2, r4
 801ad0a:	4638      	mov	r0, r7
 801ad0c:	f7ff ff1a 	bl	801ab44 <__multiply>
 801ad10:	4631      	mov	r1, r6
 801ad12:	4680      	mov	r8, r0
 801ad14:	4638      	mov	r0, r7
 801ad16:	f7ff fe01 	bl	801a91c <_Bfree>
 801ad1a:	4646      	mov	r6, r8
 801ad1c:	106d      	asrs	r5, r5, #1
 801ad1e:	d00b      	beq.n	801ad38 <__pow5mult+0xa0>
 801ad20:	6820      	ldr	r0, [r4, #0]
 801ad22:	b938      	cbnz	r0, 801ad34 <__pow5mult+0x9c>
 801ad24:	4622      	mov	r2, r4
 801ad26:	4621      	mov	r1, r4
 801ad28:	4638      	mov	r0, r7
 801ad2a:	f7ff ff0b 	bl	801ab44 <__multiply>
 801ad2e:	6020      	str	r0, [r4, #0]
 801ad30:	f8c0 9000 	str.w	r9, [r0]
 801ad34:	4604      	mov	r4, r0
 801ad36:	e7e4      	b.n	801ad02 <__pow5mult+0x6a>
 801ad38:	4630      	mov	r0, r6
 801ad3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ad3e:	bf00      	nop
 801ad40:	0801ecc4 	.word	0x0801ecc4
 801ad44:	0801e840 	.word	0x0801e840
 801ad48:	0801ec68 	.word	0x0801ec68

0801ad4c <__lshift>:
 801ad4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ad50:	460c      	mov	r4, r1
 801ad52:	6849      	ldr	r1, [r1, #4]
 801ad54:	6923      	ldr	r3, [r4, #16]
 801ad56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801ad5a:	68a3      	ldr	r3, [r4, #8]
 801ad5c:	4607      	mov	r7, r0
 801ad5e:	4691      	mov	r9, r2
 801ad60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801ad64:	f108 0601 	add.w	r6, r8, #1
 801ad68:	42b3      	cmp	r3, r6
 801ad6a:	db0b      	blt.n	801ad84 <__lshift+0x38>
 801ad6c:	4638      	mov	r0, r7
 801ad6e:	f7ff fd95 	bl	801a89c <_Balloc>
 801ad72:	4605      	mov	r5, r0
 801ad74:	b948      	cbnz	r0, 801ad8a <__lshift+0x3e>
 801ad76:	4602      	mov	r2, r0
 801ad78:	4b28      	ldr	r3, [pc, #160]	@ (801ae1c <__lshift+0xd0>)
 801ad7a:	4829      	ldr	r0, [pc, #164]	@ (801ae20 <__lshift+0xd4>)
 801ad7c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801ad80:	f7fe faf0 	bl	8019364 <__assert_func>
 801ad84:	3101      	adds	r1, #1
 801ad86:	005b      	lsls	r3, r3, #1
 801ad88:	e7ee      	b.n	801ad68 <__lshift+0x1c>
 801ad8a:	2300      	movs	r3, #0
 801ad8c:	f100 0114 	add.w	r1, r0, #20
 801ad90:	f100 0210 	add.w	r2, r0, #16
 801ad94:	4618      	mov	r0, r3
 801ad96:	4553      	cmp	r3, sl
 801ad98:	db33      	blt.n	801ae02 <__lshift+0xb6>
 801ad9a:	6920      	ldr	r0, [r4, #16]
 801ad9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801ada0:	f104 0314 	add.w	r3, r4, #20
 801ada4:	f019 091f 	ands.w	r9, r9, #31
 801ada8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801adac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801adb0:	d02b      	beq.n	801ae0a <__lshift+0xbe>
 801adb2:	f1c9 0e20 	rsb	lr, r9, #32
 801adb6:	468a      	mov	sl, r1
 801adb8:	2200      	movs	r2, #0
 801adba:	6818      	ldr	r0, [r3, #0]
 801adbc:	fa00 f009 	lsl.w	r0, r0, r9
 801adc0:	4310      	orrs	r0, r2
 801adc2:	f84a 0b04 	str.w	r0, [sl], #4
 801adc6:	f853 2b04 	ldr.w	r2, [r3], #4
 801adca:	459c      	cmp	ip, r3
 801adcc:	fa22 f20e 	lsr.w	r2, r2, lr
 801add0:	d8f3      	bhi.n	801adba <__lshift+0x6e>
 801add2:	ebac 0304 	sub.w	r3, ip, r4
 801add6:	3b15      	subs	r3, #21
 801add8:	f023 0303 	bic.w	r3, r3, #3
 801addc:	3304      	adds	r3, #4
 801adde:	f104 0015 	add.w	r0, r4, #21
 801ade2:	4584      	cmp	ip, r0
 801ade4:	bf38      	it	cc
 801ade6:	2304      	movcc	r3, #4
 801ade8:	50ca      	str	r2, [r1, r3]
 801adea:	b10a      	cbz	r2, 801adf0 <__lshift+0xa4>
 801adec:	f108 0602 	add.w	r6, r8, #2
 801adf0:	3e01      	subs	r6, #1
 801adf2:	4638      	mov	r0, r7
 801adf4:	612e      	str	r6, [r5, #16]
 801adf6:	4621      	mov	r1, r4
 801adf8:	f7ff fd90 	bl	801a91c <_Bfree>
 801adfc:	4628      	mov	r0, r5
 801adfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ae02:	f842 0f04 	str.w	r0, [r2, #4]!
 801ae06:	3301      	adds	r3, #1
 801ae08:	e7c5      	b.n	801ad96 <__lshift+0x4a>
 801ae0a:	3904      	subs	r1, #4
 801ae0c:	f853 2b04 	ldr.w	r2, [r3], #4
 801ae10:	f841 2f04 	str.w	r2, [r1, #4]!
 801ae14:	459c      	cmp	ip, r3
 801ae16:	d8f9      	bhi.n	801ae0c <__lshift+0xc0>
 801ae18:	e7ea      	b.n	801adf0 <__lshift+0xa4>
 801ae1a:	bf00      	nop
 801ae1c:	0801ebf7 	.word	0x0801ebf7
 801ae20:	0801ec68 	.word	0x0801ec68

0801ae24 <__mcmp>:
 801ae24:	690a      	ldr	r2, [r1, #16]
 801ae26:	4603      	mov	r3, r0
 801ae28:	6900      	ldr	r0, [r0, #16]
 801ae2a:	1a80      	subs	r0, r0, r2
 801ae2c:	b530      	push	{r4, r5, lr}
 801ae2e:	d10e      	bne.n	801ae4e <__mcmp+0x2a>
 801ae30:	3314      	adds	r3, #20
 801ae32:	3114      	adds	r1, #20
 801ae34:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801ae38:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801ae3c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801ae40:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801ae44:	4295      	cmp	r5, r2
 801ae46:	d003      	beq.n	801ae50 <__mcmp+0x2c>
 801ae48:	d205      	bcs.n	801ae56 <__mcmp+0x32>
 801ae4a:	f04f 30ff 	mov.w	r0, #4294967295
 801ae4e:	bd30      	pop	{r4, r5, pc}
 801ae50:	42a3      	cmp	r3, r4
 801ae52:	d3f3      	bcc.n	801ae3c <__mcmp+0x18>
 801ae54:	e7fb      	b.n	801ae4e <__mcmp+0x2a>
 801ae56:	2001      	movs	r0, #1
 801ae58:	e7f9      	b.n	801ae4e <__mcmp+0x2a>
	...

0801ae5c <__mdiff>:
 801ae5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae60:	4689      	mov	r9, r1
 801ae62:	4606      	mov	r6, r0
 801ae64:	4611      	mov	r1, r2
 801ae66:	4648      	mov	r0, r9
 801ae68:	4614      	mov	r4, r2
 801ae6a:	f7ff ffdb 	bl	801ae24 <__mcmp>
 801ae6e:	1e05      	subs	r5, r0, #0
 801ae70:	d112      	bne.n	801ae98 <__mdiff+0x3c>
 801ae72:	4629      	mov	r1, r5
 801ae74:	4630      	mov	r0, r6
 801ae76:	f7ff fd11 	bl	801a89c <_Balloc>
 801ae7a:	4602      	mov	r2, r0
 801ae7c:	b928      	cbnz	r0, 801ae8a <__mdiff+0x2e>
 801ae7e:	4b3f      	ldr	r3, [pc, #252]	@ (801af7c <__mdiff+0x120>)
 801ae80:	f240 2137 	movw	r1, #567	@ 0x237
 801ae84:	483e      	ldr	r0, [pc, #248]	@ (801af80 <__mdiff+0x124>)
 801ae86:	f7fe fa6d 	bl	8019364 <__assert_func>
 801ae8a:	2301      	movs	r3, #1
 801ae8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801ae90:	4610      	mov	r0, r2
 801ae92:	b003      	add	sp, #12
 801ae94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae98:	bfbc      	itt	lt
 801ae9a:	464b      	movlt	r3, r9
 801ae9c:	46a1      	movlt	r9, r4
 801ae9e:	4630      	mov	r0, r6
 801aea0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801aea4:	bfba      	itte	lt
 801aea6:	461c      	movlt	r4, r3
 801aea8:	2501      	movlt	r5, #1
 801aeaa:	2500      	movge	r5, #0
 801aeac:	f7ff fcf6 	bl	801a89c <_Balloc>
 801aeb0:	4602      	mov	r2, r0
 801aeb2:	b918      	cbnz	r0, 801aebc <__mdiff+0x60>
 801aeb4:	4b31      	ldr	r3, [pc, #196]	@ (801af7c <__mdiff+0x120>)
 801aeb6:	f240 2145 	movw	r1, #581	@ 0x245
 801aeba:	e7e3      	b.n	801ae84 <__mdiff+0x28>
 801aebc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801aec0:	6926      	ldr	r6, [r4, #16]
 801aec2:	60c5      	str	r5, [r0, #12]
 801aec4:	f109 0310 	add.w	r3, r9, #16
 801aec8:	f109 0514 	add.w	r5, r9, #20
 801aecc:	f104 0e14 	add.w	lr, r4, #20
 801aed0:	f100 0b14 	add.w	fp, r0, #20
 801aed4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801aed8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801aedc:	9301      	str	r3, [sp, #4]
 801aede:	46d9      	mov	r9, fp
 801aee0:	f04f 0c00 	mov.w	ip, #0
 801aee4:	9b01      	ldr	r3, [sp, #4]
 801aee6:	f85e 0b04 	ldr.w	r0, [lr], #4
 801aeea:	f853 af04 	ldr.w	sl, [r3, #4]!
 801aeee:	9301      	str	r3, [sp, #4]
 801aef0:	fa1f f38a 	uxth.w	r3, sl
 801aef4:	4619      	mov	r1, r3
 801aef6:	b283      	uxth	r3, r0
 801aef8:	1acb      	subs	r3, r1, r3
 801aefa:	0c00      	lsrs	r0, r0, #16
 801aefc:	4463      	add	r3, ip
 801aefe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801af02:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801af06:	b29b      	uxth	r3, r3
 801af08:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801af0c:	4576      	cmp	r6, lr
 801af0e:	f849 3b04 	str.w	r3, [r9], #4
 801af12:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801af16:	d8e5      	bhi.n	801aee4 <__mdiff+0x88>
 801af18:	1b33      	subs	r3, r6, r4
 801af1a:	3b15      	subs	r3, #21
 801af1c:	f023 0303 	bic.w	r3, r3, #3
 801af20:	3415      	adds	r4, #21
 801af22:	3304      	adds	r3, #4
 801af24:	42a6      	cmp	r6, r4
 801af26:	bf38      	it	cc
 801af28:	2304      	movcc	r3, #4
 801af2a:	441d      	add	r5, r3
 801af2c:	445b      	add	r3, fp
 801af2e:	461e      	mov	r6, r3
 801af30:	462c      	mov	r4, r5
 801af32:	4544      	cmp	r4, r8
 801af34:	d30e      	bcc.n	801af54 <__mdiff+0xf8>
 801af36:	f108 0103 	add.w	r1, r8, #3
 801af3a:	1b49      	subs	r1, r1, r5
 801af3c:	f021 0103 	bic.w	r1, r1, #3
 801af40:	3d03      	subs	r5, #3
 801af42:	45a8      	cmp	r8, r5
 801af44:	bf38      	it	cc
 801af46:	2100      	movcc	r1, #0
 801af48:	440b      	add	r3, r1
 801af4a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801af4e:	b191      	cbz	r1, 801af76 <__mdiff+0x11a>
 801af50:	6117      	str	r7, [r2, #16]
 801af52:	e79d      	b.n	801ae90 <__mdiff+0x34>
 801af54:	f854 1b04 	ldr.w	r1, [r4], #4
 801af58:	46e6      	mov	lr, ip
 801af5a:	0c08      	lsrs	r0, r1, #16
 801af5c:	fa1c fc81 	uxtah	ip, ip, r1
 801af60:	4471      	add	r1, lr
 801af62:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801af66:	b289      	uxth	r1, r1
 801af68:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801af6c:	f846 1b04 	str.w	r1, [r6], #4
 801af70:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801af74:	e7dd      	b.n	801af32 <__mdiff+0xd6>
 801af76:	3f01      	subs	r7, #1
 801af78:	e7e7      	b.n	801af4a <__mdiff+0xee>
 801af7a:	bf00      	nop
 801af7c:	0801ebf7 	.word	0x0801ebf7
 801af80:	0801ec68 	.word	0x0801ec68

0801af84 <__ulp>:
 801af84:	b082      	sub	sp, #8
 801af86:	ed8d 0b00 	vstr	d0, [sp]
 801af8a:	9a01      	ldr	r2, [sp, #4]
 801af8c:	4b0f      	ldr	r3, [pc, #60]	@ (801afcc <__ulp+0x48>)
 801af8e:	4013      	ands	r3, r2
 801af90:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801af94:	2b00      	cmp	r3, #0
 801af96:	dc08      	bgt.n	801afaa <__ulp+0x26>
 801af98:	425b      	negs	r3, r3
 801af9a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801af9e:	ea4f 5223 	mov.w	r2, r3, asr #20
 801afa2:	da04      	bge.n	801afae <__ulp+0x2a>
 801afa4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801afa8:	4113      	asrs	r3, r2
 801afaa:	2200      	movs	r2, #0
 801afac:	e008      	b.n	801afc0 <__ulp+0x3c>
 801afae:	f1a2 0314 	sub.w	r3, r2, #20
 801afb2:	2b1e      	cmp	r3, #30
 801afb4:	bfda      	itte	le
 801afb6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801afba:	40da      	lsrle	r2, r3
 801afbc:	2201      	movgt	r2, #1
 801afbe:	2300      	movs	r3, #0
 801afc0:	4619      	mov	r1, r3
 801afc2:	4610      	mov	r0, r2
 801afc4:	ec41 0b10 	vmov	d0, r0, r1
 801afc8:	b002      	add	sp, #8
 801afca:	4770      	bx	lr
 801afcc:	7ff00000 	.word	0x7ff00000

0801afd0 <__b2d>:
 801afd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801afd4:	6906      	ldr	r6, [r0, #16]
 801afd6:	f100 0814 	add.w	r8, r0, #20
 801afda:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801afde:	1f37      	subs	r7, r6, #4
 801afe0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801afe4:	4610      	mov	r0, r2
 801afe6:	f7ff fd4b 	bl	801aa80 <__hi0bits>
 801afea:	f1c0 0320 	rsb	r3, r0, #32
 801afee:	280a      	cmp	r0, #10
 801aff0:	600b      	str	r3, [r1, #0]
 801aff2:	491b      	ldr	r1, [pc, #108]	@ (801b060 <__b2d+0x90>)
 801aff4:	dc15      	bgt.n	801b022 <__b2d+0x52>
 801aff6:	f1c0 0c0b 	rsb	ip, r0, #11
 801affa:	fa22 f30c 	lsr.w	r3, r2, ip
 801affe:	45b8      	cmp	r8, r7
 801b000:	ea43 0501 	orr.w	r5, r3, r1
 801b004:	bf34      	ite	cc
 801b006:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801b00a:	2300      	movcs	r3, #0
 801b00c:	3015      	adds	r0, #21
 801b00e:	fa02 f000 	lsl.w	r0, r2, r0
 801b012:	fa23 f30c 	lsr.w	r3, r3, ip
 801b016:	4303      	orrs	r3, r0
 801b018:	461c      	mov	r4, r3
 801b01a:	ec45 4b10 	vmov	d0, r4, r5
 801b01e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b022:	45b8      	cmp	r8, r7
 801b024:	bf3a      	itte	cc
 801b026:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801b02a:	f1a6 0708 	subcc.w	r7, r6, #8
 801b02e:	2300      	movcs	r3, #0
 801b030:	380b      	subs	r0, #11
 801b032:	d012      	beq.n	801b05a <__b2d+0x8a>
 801b034:	f1c0 0120 	rsb	r1, r0, #32
 801b038:	fa23 f401 	lsr.w	r4, r3, r1
 801b03c:	4082      	lsls	r2, r0
 801b03e:	4322      	orrs	r2, r4
 801b040:	4547      	cmp	r7, r8
 801b042:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801b046:	bf8c      	ite	hi
 801b048:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801b04c:	2200      	movls	r2, #0
 801b04e:	4083      	lsls	r3, r0
 801b050:	40ca      	lsrs	r2, r1
 801b052:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801b056:	4313      	orrs	r3, r2
 801b058:	e7de      	b.n	801b018 <__b2d+0x48>
 801b05a:	ea42 0501 	orr.w	r5, r2, r1
 801b05e:	e7db      	b.n	801b018 <__b2d+0x48>
 801b060:	3ff00000 	.word	0x3ff00000

0801b064 <__d2b>:
 801b064:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b068:	460f      	mov	r7, r1
 801b06a:	2101      	movs	r1, #1
 801b06c:	ec59 8b10 	vmov	r8, r9, d0
 801b070:	4616      	mov	r6, r2
 801b072:	f7ff fc13 	bl	801a89c <_Balloc>
 801b076:	4604      	mov	r4, r0
 801b078:	b930      	cbnz	r0, 801b088 <__d2b+0x24>
 801b07a:	4602      	mov	r2, r0
 801b07c:	4b23      	ldr	r3, [pc, #140]	@ (801b10c <__d2b+0xa8>)
 801b07e:	4824      	ldr	r0, [pc, #144]	@ (801b110 <__d2b+0xac>)
 801b080:	f240 310f 	movw	r1, #783	@ 0x30f
 801b084:	f7fe f96e 	bl	8019364 <__assert_func>
 801b088:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801b08c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801b090:	b10d      	cbz	r5, 801b096 <__d2b+0x32>
 801b092:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801b096:	9301      	str	r3, [sp, #4]
 801b098:	f1b8 0300 	subs.w	r3, r8, #0
 801b09c:	d023      	beq.n	801b0e6 <__d2b+0x82>
 801b09e:	4668      	mov	r0, sp
 801b0a0:	9300      	str	r3, [sp, #0]
 801b0a2:	f7ff fd0c 	bl	801aabe <__lo0bits>
 801b0a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 801b0aa:	b1d0      	cbz	r0, 801b0e2 <__d2b+0x7e>
 801b0ac:	f1c0 0320 	rsb	r3, r0, #32
 801b0b0:	fa02 f303 	lsl.w	r3, r2, r3
 801b0b4:	430b      	orrs	r3, r1
 801b0b6:	40c2      	lsrs	r2, r0
 801b0b8:	6163      	str	r3, [r4, #20]
 801b0ba:	9201      	str	r2, [sp, #4]
 801b0bc:	9b01      	ldr	r3, [sp, #4]
 801b0be:	61a3      	str	r3, [r4, #24]
 801b0c0:	2b00      	cmp	r3, #0
 801b0c2:	bf0c      	ite	eq
 801b0c4:	2201      	moveq	r2, #1
 801b0c6:	2202      	movne	r2, #2
 801b0c8:	6122      	str	r2, [r4, #16]
 801b0ca:	b1a5      	cbz	r5, 801b0f6 <__d2b+0x92>
 801b0cc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801b0d0:	4405      	add	r5, r0
 801b0d2:	603d      	str	r5, [r7, #0]
 801b0d4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801b0d8:	6030      	str	r0, [r6, #0]
 801b0da:	4620      	mov	r0, r4
 801b0dc:	b003      	add	sp, #12
 801b0de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b0e2:	6161      	str	r1, [r4, #20]
 801b0e4:	e7ea      	b.n	801b0bc <__d2b+0x58>
 801b0e6:	a801      	add	r0, sp, #4
 801b0e8:	f7ff fce9 	bl	801aabe <__lo0bits>
 801b0ec:	9b01      	ldr	r3, [sp, #4]
 801b0ee:	6163      	str	r3, [r4, #20]
 801b0f0:	3020      	adds	r0, #32
 801b0f2:	2201      	movs	r2, #1
 801b0f4:	e7e8      	b.n	801b0c8 <__d2b+0x64>
 801b0f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801b0fa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801b0fe:	6038      	str	r0, [r7, #0]
 801b100:	6918      	ldr	r0, [r3, #16]
 801b102:	f7ff fcbd 	bl	801aa80 <__hi0bits>
 801b106:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801b10a:	e7e5      	b.n	801b0d8 <__d2b+0x74>
 801b10c:	0801ebf7 	.word	0x0801ebf7
 801b110:	0801ec68 	.word	0x0801ec68

0801b114 <__ratio>:
 801b114:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b118:	4688      	mov	r8, r1
 801b11a:	4669      	mov	r1, sp
 801b11c:	4681      	mov	r9, r0
 801b11e:	f7ff ff57 	bl	801afd0 <__b2d>
 801b122:	a901      	add	r1, sp, #4
 801b124:	4640      	mov	r0, r8
 801b126:	ec55 4b10 	vmov	r4, r5, d0
 801b12a:	f7ff ff51 	bl	801afd0 <__b2d>
 801b12e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801b132:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801b136:	1ad2      	subs	r2, r2, r3
 801b138:	e9dd 3100 	ldrd	r3, r1, [sp]
 801b13c:	1a5b      	subs	r3, r3, r1
 801b13e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801b142:	ec57 6b10 	vmov	r6, r7, d0
 801b146:	2b00      	cmp	r3, #0
 801b148:	bfd6      	itet	le
 801b14a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801b14e:	462a      	movgt	r2, r5
 801b150:	463a      	movle	r2, r7
 801b152:	46ab      	mov	fp, r5
 801b154:	46a2      	mov	sl, r4
 801b156:	bfce      	itee	gt
 801b158:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801b15c:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801b160:	ee00 3a90 	vmovle	s1, r3
 801b164:	ec4b ab17 	vmov	d7, sl, fp
 801b168:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801b16c:	b003      	add	sp, #12
 801b16e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b172 <__copybits>:
 801b172:	3901      	subs	r1, #1
 801b174:	b570      	push	{r4, r5, r6, lr}
 801b176:	1149      	asrs	r1, r1, #5
 801b178:	6914      	ldr	r4, [r2, #16]
 801b17a:	3101      	adds	r1, #1
 801b17c:	f102 0314 	add.w	r3, r2, #20
 801b180:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801b184:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801b188:	1f05      	subs	r5, r0, #4
 801b18a:	42a3      	cmp	r3, r4
 801b18c:	d30c      	bcc.n	801b1a8 <__copybits+0x36>
 801b18e:	1aa3      	subs	r3, r4, r2
 801b190:	3b11      	subs	r3, #17
 801b192:	f023 0303 	bic.w	r3, r3, #3
 801b196:	3211      	adds	r2, #17
 801b198:	42a2      	cmp	r2, r4
 801b19a:	bf88      	it	hi
 801b19c:	2300      	movhi	r3, #0
 801b19e:	4418      	add	r0, r3
 801b1a0:	2300      	movs	r3, #0
 801b1a2:	4288      	cmp	r0, r1
 801b1a4:	d305      	bcc.n	801b1b2 <__copybits+0x40>
 801b1a6:	bd70      	pop	{r4, r5, r6, pc}
 801b1a8:	f853 6b04 	ldr.w	r6, [r3], #4
 801b1ac:	f845 6f04 	str.w	r6, [r5, #4]!
 801b1b0:	e7eb      	b.n	801b18a <__copybits+0x18>
 801b1b2:	f840 3b04 	str.w	r3, [r0], #4
 801b1b6:	e7f4      	b.n	801b1a2 <__copybits+0x30>

0801b1b8 <__any_on>:
 801b1b8:	f100 0214 	add.w	r2, r0, #20
 801b1bc:	6900      	ldr	r0, [r0, #16]
 801b1be:	114b      	asrs	r3, r1, #5
 801b1c0:	4298      	cmp	r0, r3
 801b1c2:	b510      	push	{r4, lr}
 801b1c4:	db11      	blt.n	801b1ea <__any_on+0x32>
 801b1c6:	dd0a      	ble.n	801b1de <__any_on+0x26>
 801b1c8:	f011 011f 	ands.w	r1, r1, #31
 801b1cc:	d007      	beq.n	801b1de <__any_on+0x26>
 801b1ce:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801b1d2:	fa24 f001 	lsr.w	r0, r4, r1
 801b1d6:	fa00 f101 	lsl.w	r1, r0, r1
 801b1da:	428c      	cmp	r4, r1
 801b1dc:	d10b      	bne.n	801b1f6 <__any_on+0x3e>
 801b1de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b1e2:	4293      	cmp	r3, r2
 801b1e4:	d803      	bhi.n	801b1ee <__any_on+0x36>
 801b1e6:	2000      	movs	r0, #0
 801b1e8:	bd10      	pop	{r4, pc}
 801b1ea:	4603      	mov	r3, r0
 801b1ec:	e7f7      	b.n	801b1de <__any_on+0x26>
 801b1ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801b1f2:	2900      	cmp	r1, #0
 801b1f4:	d0f5      	beq.n	801b1e2 <__any_on+0x2a>
 801b1f6:	2001      	movs	r0, #1
 801b1f8:	e7f6      	b.n	801b1e8 <__any_on+0x30>
	...

0801b1fc <_strtoul_l.constprop.0>:
 801b1fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b200:	4e34      	ldr	r6, [pc, #208]	@ (801b2d4 <_strtoul_l.constprop.0+0xd8>)
 801b202:	4686      	mov	lr, r0
 801b204:	460d      	mov	r5, r1
 801b206:	4628      	mov	r0, r5
 801b208:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b20c:	5d37      	ldrb	r7, [r6, r4]
 801b20e:	f017 0708 	ands.w	r7, r7, #8
 801b212:	d1f8      	bne.n	801b206 <_strtoul_l.constprop.0+0xa>
 801b214:	2c2d      	cmp	r4, #45	@ 0x2d
 801b216:	d12f      	bne.n	801b278 <_strtoul_l.constprop.0+0x7c>
 801b218:	782c      	ldrb	r4, [r5, #0]
 801b21a:	2701      	movs	r7, #1
 801b21c:	1c85      	adds	r5, r0, #2
 801b21e:	f033 0010 	bics.w	r0, r3, #16
 801b222:	d109      	bne.n	801b238 <_strtoul_l.constprop.0+0x3c>
 801b224:	2c30      	cmp	r4, #48	@ 0x30
 801b226:	d12c      	bne.n	801b282 <_strtoul_l.constprop.0+0x86>
 801b228:	7828      	ldrb	r0, [r5, #0]
 801b22a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801b22e:	2858      	cmp	r0, #88	@ 0x58
 801b230:	d127      	bne.n	801b282 <_strtoul_l.constprop.0+0x86>
 801b232:	786c      	ldrb	r4, [r5, #1]
 801b234:	2310      	movs	r3, #16
 801b236:	3502      	adds	r5, #2
 801b238:	f04f 38ff 	mov.w	r8, #4294967295
 801b23c:	2600      	movs	r6, #0
 801b23e:	fbb8 f8f3 	udiv	r8, r8, r3
 801b242:	fb03 f908 	mul.w	r9, r3, r8
 801b246:	ea6f 0909 	mvn.w	r9, r9
 801b24a:	4630      	mov	r0, r6
 801b24c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801b250:	f1bc 0f09 	cmp.w	ip, #9
 801b254:	d81c      	bhi.n	801b290 <_strtoul_l.constprop.0+0x94>
 801b256:	4664      	mov	r4, ip
 801b258:	42a3      	cmp	r3, r4
 801b25a:	dd2a      	ble.n	801b2b2 <_strtoul_l.constprop.0+0xb6>
 801b25c:	f1b6 3fff 	cmp.w	r6, #4294967295
 801b260:	d007      	beq.n	801b272 <_strtoul_l.constprop.0+0x76>
 801b262:	4580      	cmp	r8, r0
 801b264:	d322      	bcc.n	801b2ac <_strtoul_l.constprop.0+0xb0>
 801b266:	d101      	bne.n	801b26c <_strtoul_l.constprop.0+0x70>
 801b268:	45a1      	cmp	r9, r4
 801b26a:	db1f      	blt.n	801b2ac <_strtoul_l.constprop.0+0xb0>
 801b26c:	fb00 4003 	mla	r0, r0, r3, r4
 801b270:	2601      	movs	r6, #1
 801b272:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b276:	e7e9      	b.n	801b24c <_strtoul_l.constprop.0+0x50>
 801b278:	2c2b      	cmp	r4, #43	@ 0x2b
 801b27a:	bf04      	itt	eq
 801b27c:	782c      	ldrbeq	r4, [r5, #0]
 801b27e:	1c85      	addeq	r5, r0, #2
 801b280:	e7cd      	b.n	801b21e <_strtoul_l.constprop.0+0x22>
 801b282:	2b00      	cmp	r3, #0
 801b284:	d1d8      	bne.n	801b238 <_strtoul_l.constprop.0+0x3c>
 801b286:	2c30      	cmp	r4, #48	@ 0x30
 801b288:	bf0c      	ite	eq
 801b28a:	2308      	moveq	r3, #8
 801b28c:	230a      	movne	r3, #10
 801b28e:	e7d3      	b.n	801b238 <_strtoul_l.constprop.0+0x3c>
 801b290:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801b294:	f1bc 0f19 	cmp.w	ip, #25
 801b298:	d801      	bhi.n	801b29e <_strtoul_l.constprop.0+0xa2>
 801b29a:	3c37      	subs	r4, #55	@ 0x37
 801b29c:	e7dc      	b.n	801b258 <_strtoul_l.constprop.0+0x5c>
 801b29e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801b2a2:	f1bc 0f19 	cmp.w	ip, #25
 801b2a6:	d804      	bhi.n	801b2b2 <_strtoul_l.constprop.0+0xb6>
 801b2a8:	3c57      	subs	r4, #87	@ 0x57
 801b2aa:	e7d5      	b.n	801b258 <_strtoul_l.constprop.0+0x5c>
 801b2ac:	f04f 36ff 	mov.w	r6, #4294967295
 801b2b0:	e7df      	b.n	801b272 <_strtoul_l.constprop.0+0x76>
 801b2b2:	1c73      	adds	r3, r6, #1
 801b2b4:	d106      	bne.n	801b2c4 <_strtoul_l.constprop.0+0xc8>
 801b2b6:	2322      	movs	r3, #34	@ 0x22
 801b2b8:	f8ce 3000 	str.w	r3, [lr]
 801b2bc:	4630      	mov	r0, r6
 801b2be:	b932      	cbnz	r2, 801b2ce <_strtoul_l.constprop.0+0xd2>
 801b2c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b2c4:	b107      	cbz	r7, 801b2c8 <_strtoul_l.constprop.0+0xcc>
 801b2c6:	4240      	negs	r0, r0
 801b2c8:	2a00      	cmp	r2, #0
 801b2ca:	d0f9      	beq.n	801b2c0 <_strtoul_l.constprop.0+0xc4>
 801b2cc:	b106      	cbz	r6, 801b2d0 <_strtoul_l.constprop.0+0xd4>
 801b2ce:	1e69      	subs	r1, r5, #1
 801b2d0:	6011      	str	r1, [r2, #0]
 801b2d2:	e7f5      	b.n	801b2c0 <_strtoul_l.constprop.0+0xc4>
 801b2d4:	0801e909 	.word	0x0801e909

0801b2d8 <_strtoul_r>:
 801b2d8:	f7ff bf90 	b.w	801b1fc <_strtoul_l.constprop.0>

0801b2dc <strtoul>:
 801b2dc:	4613      	mov	r3, r2
 801b2de:	460a      	mov	r2, r1
 801b2e0:	4601      	mov	r1, r0
 801b2e2:	4802      	ldr	r0, [pc, #8]	@ (801b2ec <strtoul+0x10>)
 801b2e4:	6800      	ldr	r0, [r0, #0]
 801b2e6:	f7ff bf89 	b.w	801b1fc <_strtoul_l.constprop.0>
 801b2ea:	bf00      	nop
 801b2ec:	24000430 	.word	0x24000430

0801b2f0 <__ascii_wctomb>:
 801b2f0:	4603      	mov	r3, r0
 801b2f2:	4608      	mov	r0, r1
 801b2f4:	b141      	cbz	r1, 801b308 <__ascii_wctomb+0x18>
 801b2f6:	2aff      	cmp	r2, #255	@ 0xff
 801b2f8:	d904      	bls.n	801b304 <__ascii_wctomb+0x14>
 801b2fa:	228a      	movs	r2, #138	@ 0x8a
 801b2fc:	601a      	str	r2, [r3, #0]
 801b2fe:	f04f 30ff 	mov.w	r0, #4294967295
 801b302:	4770      	bx	lr
 801b304:	700a      	strb	r2, [r1, #0]
 801b306:	2001      	movs	r0, #1
 801b308:	4770      	bx	lr

0801b30a <__ssputs_r>:
 801b30a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b30e:	688e      	ldr	r6, [r1, #8]
 801b310:	461f      	mov	r7, r3
 801b312:	42be      	cmp	r6, r7
 801b314:	680b      	ldr	r3, [r1, #0]
 801b316:	4682      	mov	sl, r0
 801b318:	460c      	mov	r4, r1
 801b31a:	4690      	mov	r8, r2
 801b31c:	d82d      	bhi.n	801b37a <__ssputs_r+0x70>
 801b31e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b322:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801b326:	d026      	beq.n	801b376 <__ssputs_r+0x6c>
 801b328:	6965      	ldr	r5, [r4, #20]
 801b32a:	6909      	ldr	r1, [r1, #16]
 801b32c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b330:	eba3 0901 	sub.w	r9, r3, r1
 801b334:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b338:	1c7b      	adds	r3, r7, #1
 801b33a:	444b      	add	r3, r9
 801b33c:	106d      	asrs	r5, r5, #1
 801b33e:	429d      	cmp	r5, r3
 801b340:	bf38      	it	cc
 801b342:	461d      	movcc	r5, r3
 801b344:	0553      	lsls	r3, r2, #21
 801b346:	d527      	bpl.n	801b398 <__ssputs_r+0x8e>
 801b348:	4629      	mov	r1, r5
 801b34a:	f7ff fa09 	bl	801a760 <_malloc_r>
 801b34e:	4606      	mov	r6, r0
 801b350:	b360      	cbz	r0, 801b3ac <__ssputs_r+0xa2>
 801b352:	6921      	ldr	r1, [r4, #16]
 801b354:	464a      	mov	r2, r9
 801b356:	f7fd ffe6 	bl	8019326 <memcpy>
 801b35a:	89a3      	ldrh	r3, [r4, #12]
 801b35c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801b360:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b364:	81a3      	strh	r3, [r4, #12]
 801b366:	6126      	str	r6, [r4, #16]
 801b368:	6165      	str	r5, [r4, #20]
 801b36a:	444e      	add	r6, r9
 801b36c:	eba5 0509 	sub.w	r5, r5, r9
 801b370:	6026      	str	r6, [r4, #0]
 801b372:	60a5      	str	r5, [r4, #8]
 801b374:	463e      	mov	r6, r7
 801b376:	42be      	cmp	r6, r7
 801b378:	d900      	bls.n	801b37c <__ssputs_r+0x72>
 801b37a:	463e      	mov	r6, r7
 801b37c:	6820      	ldr	r0, [r4, #0]
 801b37e:	4632      	mov	r2, r6
 801b380:	4641      	mov	r1, r8
 801b382:	f000 fdc6 	bl	801bf12 <memmove>
 801b386:	68a3      	ldr	r3, [r4, #8]
 801b388:	1b9b      	subs	r3, r3, r6
 801b38a:	60a3      	str	r3, [r4, #8]
 801b38c:	6823      	ldr	r3, [r4, #0]
 801b38e:	4433      	add	r3, r6
 801b390:	6023      	str	r3, [r4, #0]
 801b392:	2000      	movs	r0, #0
 801b394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b398:	462a      	mov	r2, r5
 801b39a:	f000 fe33 	bl	801c004 <_realloc_r>
 801b39e:	4606      	mov	r6, r0
 801b3a0:	2800      	cmp	r0, #0
 801b3a2:	d1e0      	bne.n	801b366 <__ssputs_r+0x5c>
 801b3a4:	6921      	ldr	r1, [r4, #16]
 801b3a6:	4650      	mov	r0, sl
 801b3a8:	f7fe fde0 	bl	8019f6c <_free_r>
 801b3ac:	230c      	movs	r3, #12
 801b3ae:	f8ca 3000 	str.w	r3, [sl]
 801b3b2:	89a3      	ldrh	r3, [r4, #12]
 801b3b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b3b8:	81a3      	strh	r3, [r4, #12]
 801b3ba:	f04f 30ff 	mov.w	r0, #4294967295
 801b3be:	e7e9      	b.n	801b394 <__ssputs_r+0x8a>

0801b3c0 <_svfiprintf_r>:
 801b3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3c4:	4698      	mov	r8, r3
 801b3c6:	898b      	ldrh	r3, [r1, #12]
 801b3c8:	061b      	lsls	r3, r3, #24
 801b3ca:	b09d      	sub	sp, #116	@ 0x74
 801b3cc:	4607      	mov	r7, r0
 801b3ce:	460d      	mov	r5, r1
 801b3d0:	4614      	mov	r4, r2
 801b3d2:	d510      	bpl.n	801b3f6 <_svfiprintf_r+0x36>
 801b3d4:	690b      	ldr	r3, [r1, #16]
 801b3d6:	b973      	cbnz	r3, 801b3f6 <_svfiprintf_r+0x36>
 801b3d8:	2140      	movs	r1, #64	@ 0x40
 801b3da:	f7ff f9c1 	bl	801a760 <_malloc_r>
 801b3de:	6028      	str	r0, [r5, #0]
 801b3e0:	6128      	str	r0, [r5, #16]
 801b3e2:	b930      	cbnz	r0, 801b3f2 <_svfiprintf_r+0x32>
 801b3e4:	230c      	movs	r3, #12
 801b3e6:	603b      	str	r3, [r7, #0]
 801b3e8:	f04f 30ff 	mov.w	r0, #4294967295
 801b3ec:	b01d      	add	sp, #116	@ 0x74
 801b3ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b3f2:	2340      	movs	r3, #64	@ 0x40
 801b3f4:	616b      	str	r3, [r5, #20]
 801b3f6:	2300      	movs	r3, #0
 801b3f8:	9309      	str	r3, [sp, #36]	@ 0x24
 801b3fa:	2320      	movs	r3, #32
 801b3fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b400:	f8cd 800c 	str.w	r8, [sp, #12]
 801b404:	2330      	movs	r3, #48	@ 0x30
 801b406:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801b5a4 <_svfiprintf_r+0x1e4>
 801b40a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b40e:	f04f 0901 	mov.w	r9, #1
 801b412:	4623      	mov	r3, r4
 801b414:	469a      	mov	sl, r3
 801b416:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b41a:	b10a      	cbz	r2, 801b420 <_svfiprintf_r+0x60>
 801b41c:	2a25      	cmp	r2, #37	@ 0x25
 801b41e:	d1f9      	bne.n	801b414 <_svfiprintf_r+0x54>
 801b420:	ebba 0b04 	subs.w	fp, sl, r4
 801b424:	d00b      	beq.n	801b43e <_svfiprintf_r+0x7e>
 801b426:	465b      	mov	r3, fp
 801b428:	4622      	mov	r2, r4
 801b42a:	4629      	mov	r1, r5
 801b42c:	4638      	mov	r0, r7
 801b42e:	f7ff ff6c 	bl	801b30a <__ssputs_r>
 801b432:	3001      	adds	r0, #1
 801b434:	f000 80a7 	beq.w	801b586 <_svfiprintf_r+0x1c6>
 801b438:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b43a:	445a      	add	r2, fp
 801b43c:	9209      	str	r2, [sp, #36]	@ 0x24
 801b43e:	f89a 3000 	ldrb.w	r3, [sl]
 801b442:	2b00      	cmp	r3, #0
 801b444:	f000 809f 	beq.w	801b586 <_svfiprintf_r+0x1c6>
 801b448:	2300      	movs	r3, #0
 801b44a:	f04f 32ff 	mov.w	r2, #4294967295
 801b44e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b452:	f10a 0a01 	add.w	sl, sl, #1
 801b456:	9304      	str	r3, [sp, #16]
 801b458:	9307      	str	r3, [sp, #28]
 801b45a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b45e:	931a      	str	r3, [sp, #104]	@ 0x68
 801b460:	4654      	mov	r4, sl
 801b462:	2205      	movs	r2, #5
 801b464:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b468:	484e      	ldr	r0, [pc, #312]	@ (801b5a4 <_svfiprintf_r+0x1e4>)
 801b46a:	f7e4 ff49 	bl	8000300 <memchr>
 801b46e:	9a04      	ldr	r2, [sp, #16]
 801b470:	b9d8      	cbnz	r0, 801b4aa <_svfiprintf_r+0xea>
 801b472:	06d0      	lsls	r0, r2, #27
 801b474:	bf44      	itt	mi
 801b476:	2320      	movmi	r3, #32
 801b478:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b47c:	0711      	lsls	r1, r2, #28
 801b47e:	bf44      	itt	mi
 801b480:	232b      	movmi	r3, #43	@ 0x2b
 801b482:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b486:	f89a 3000 	ldrb.w	r3, [sl]
 801b48a:	2b2a      	cmp	r3, #42	@ 0x2a
 801b48c:	d015      	beq.n	801b4ba <_svfiprintf_r+0xfa>
 801b48e:	9a07      	ldr	r2, [sp, #28]
 801b490:	4654      	mov	r4, sl
 801b492:	2000      	movs	r0, #0
 801b494:	f04f 0c0a 	mov.w	ip, #10
 801b498:	4621      	mov	r1, r4
 801b49a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b49e:	3b30      	subs	r3, #48	@ 0x30
 801b4a0:	2b09      	cmp	r3, #9
 801b4a2:	d94b      	bls.n	801b53c <_svfiprintf_r+0x17c>
 801b4a4:	b1b0      	cbz	r0, 801b4d4 <_svfiprintf_r+0x114>
 801b4a6:	9207      	str	r2, [sp, #28]
 801b4a8:	e014      	b.n	801b4d4 <_svfiprintf_r+0x114>
 801b4aa:	eba0 0308 	sub.w	r3, r0, r8
 801b4ae:	fa09 f303 	lsl.w	r3, r9, r3
 801b4b2:	4313      	orrs	r3, r2
 801b4b4:	9304      	str	r3, [sp, #16]
 801b4b6:	46a2      	mov	sl, r4
 801b4b8:	e7d2      	b.n	801b460 <_svfiprintf_r+0xa0>
 801b4ba:	9b03      	ldr	r3, [sp, #12]
 801b4bc:	1d19      	adds	r1, r3, #4
 801b4be:	681b      	ldr	r3, [r3, #0]
 801b4c0:	9103      	str	r1, [sp, #12]
 801b4c2:	2b00      	cmp	r3, #0
 801b4c4:	bfbb      	ittet	lt
 801b4c6:	425b      	neglt	r3, r3
 801b4c8:	f042 0202 	orrlt.w	r2, r2, #2
 801b4cc:	9307      	strge	r3, [sp, #28]
 801b4ce:	9307      	strlt	r3, [sp, #28]
 801b4d0:	bfb8      	it	lt
 801b4d2:	9204      	strlt	r2, [sp, #16]
 801b4d4:	7823      	ldrb	r3, [r4, #0]
 801b4d6:	2b2e      	cmp	r3, #46	@ 0x2e
 801b4d8:	d10a      	bne.n	801b4f0 <_svfiprintf_r+0x130>
 801b4da:	7863      	ldrb	r3, [r4, #1]
 801b4dc:	2b2a      	cmp	r3, #42	@ 0x2a
 801b4de:	d132      	bne.n	801b546 <_svfiprintf_r+0x186>
 801b4e0:	9b03      	ldr	r3, [sp, #12]
 801b4e2:	1d1a      	adds	r2, r3, #4
 801b4e4:	681b      	ldr	r3, [r3, #0]
 801b4e6:	9203      	str	r2, [sp, #12]
 801b4e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801b4ec:	3402      	adds	r4, #2
 801b4ee:	9305      	str	r3, [sp, #20]
 801b4f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801b5b4 <_svfiprintf_r+0x1f4>
 801b4f4:	7821      	ldrb	r1, [r4, #0]
 801b4f6:	2203      	movs	r2, #3
 801b4f8:	4650      	mov	r0, sl
 801b4fa:	f7e4 ff01 	bl	8000300 <memchr>
 801b4fe:	b138      	cbz	r0, 801b510 <_svfiprintf_r+0x150>
 801b500:	9b04      	ldr	r3, [sp, #16]
 801b502:	eba0 000a 	sub.w	r0, r0, sl
 801b506:	2240      	movs	r2, #64	@ 0x40
 801b508:	4082      	lsls	r2, r0
 801b50a:	4313      	orrs	r3, r2
 801b50c:	3401      	adds	r4, #1
 801b50e:	9304      	str	r3, [sp, #16]
 801b510:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b514:	4824      	ldr	r0, [pc, #144]	@ (801b5a8 <_svfiprintf_r+0x1e8>)
 801b516:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801b51a:	2206      	movs	r2, #6
 801b51c:	f7e4 fef0 	bl	8000300 <memchr>
 801b520:	2800      	cmp	r0, #0
 801b522:	d036      	beq.n	801b592 <_svfiprintf_r+0x1d2>
 801b524:	4b21      	ldr	r3, [pc, #132]	@ (801b5ac <_svfiprintf_r+0x1ec>)
 801b526:	bb1b      	cbnz	r3, 801b570 <_svfiprintf_r+0x1b0>
 801b528:	9b03      	ldr	r3, [sp, #12]
 801b52a:	3307      	adds	r3, #7
 801b52c:	f023 0307 	bic.w	r3, r3, #7
 801b530:	3308      	adds	r3, #8
 801b532:	9303      	str	r3, [sp, #12]
 801b534:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b536:	4433      	add	r3, r6
 801b538:	9309      	str	r3, [sp, #36]	@ 0x24
 801b53a:	e76a      	b.n	801b412 <_svfiprintf_r+0x52>
 801b53c:	fb0c 3202 	mla	r2, ip, r2, r3
 801b540:	460c      	mov	r4, r1
 801b542:	2001      	movs	r0, #1
 801b544:	e7a8      	b.n	801b498 <_svfiprintf_r+0xd8>
 801b546:	2300      	movs	r3, #0
 801b548:	3401      	adds	r4, #1
 801b54a:	9305      	str	r3, [sp, #20]
 801b54c:	4619      	mov	r1, r3
 801b54e:	f04f 0c0a 	mov.w	ip, #10
 801b552:	4620      	mov	r0, r4
 801b554:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b558:	3a30      	subs	r2, #48	@ 0x30
 801b55a:	2a09      	cmp	r2, #9
 801b55c:	d903      	bls.n	801b566 <_svfiprintf_r+0x1a6>
 801b55e:	2b00      	cmp	r3, #0
 801b560:	d0c6      	beq.n	801b4f0 <_svfiprintf_r+0x130>
 801b562:	9105      	str	r1, [sp, #20]
 801b564:	e7c4      	b.n	801b4f0 <_svfiprintf_r+0x130>
 801b566:	fb0c 2101 	mla	r1, ip, r1, r2
 801b56a:	4604      	mov	r4, r0
 801b56c:	2301      	movs	r3, #1
 801b56e:	e7f0      	b.n	801b552 <_svfiprintf_r+0x192>
 801b570:	ab03      	add	r3, sp, #12
 801b572:	9300      	str	r3, [sp, #0]
 801b574:	462a      	mov	r2, r5
 801b576:	4b0e      	ldr	r3, [pc, #56]	@ (801b5b0 <_svfiprintf_r+0x1f0>)
 801b578:	a904      	add	r1, sp, #16
 801b57a:	4638      	mov	r0, r7
 801b57c:	f7fc f864 	bl	8017648 <_printf_float>
 801b580:	1c42      	adds	r2, r0, #1
 801b582:	4606      	mov	r6, r0
 801b584:	d1d6      	bne.n	801b534 <_svfiprintf_r+0x174>
 801b586:	89ab      	ldrh	r3, [r5, #12]
 801b588:	065b      	lsls	r3, r3, #25
 801b58a:	f53f af2d 	bmi.w	801b3e8 <_svfiprintf_r+0x28>
 801b58e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b590:	e72c      	b.n	801b3ec <_svfiprintf_r+0x2c>
 801b592:	ab03      	add	r3, sp, #12
 801b594:	9300      	str	r3, [sp, #0]
 801b596:	462a      	mov	r2, r5
 801b598:	4b05      	ldr	r3, [pc, #20]	@ (801b5b0 <_svfiprintf_r+0x1f0>)
 801b59a:	a904      	add	r1, sp, #16
 801b59c:	4638      	mov	r0, r7
 801b59e:	f7fc fadb 	bl	8017b58 <_printf_i>
 801b5a2:	e7ed      	b.n	801b580 <_svfiprintf_r+0x1c0>
 801b5a4:	0801edc0 	.word	0x0801edc0
 801b5a8:	0801edca 	.word	0x0801edca
 801b5ac:	08017649 	.word	0x08017649
 801b5b0:	0801b30b 	.word	0x0801b30b
 801b5b4:	0801edc6 	.word	0x0801edc6

0801b5b8 <_sungetc_r>:
 801b5b8:	b538      	push	{r3, r4, r5, lr}
 801b5ba:	1c4b      	adds	r3, r1, #1
 801b5bc:	4614      	mov	r4, r2
 801b5be:	d103      	bne.n	801b5c8 <_sungetc_r+0x10>
 801b5c0:	f04f 35ff 	mov.w	r5, #4294967295
 801b5c4:	4628      	mov	r0, r5
 801b5c6:	bd38      	pop	{r3, r4, r5, pc}
 801b5c8:	8993      	ldrh	r3, [r2, #12]
 801b5ca:	f023 0320 	bic.w	r3, r3, #32
 801b5ce:	8193      	strh	r3, [r2, #12]
 801b5d0:	6853      	ldr	r3, [r2, #4]
 801b5d2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 801b5d4:	b2cd      	uxtb	r5, r1
 801b5d6:	b18a      	cbz	r2, 801b5fc <_sungetc_r+0x44>
 801b5d8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801b5da:	429a      	cmp	r2, r3
 801b5dc:	dd08      	ble.n	801b5f0 <_sungetc_r+0x38>
 801b5de:	6823      	ldr	r3, [r4, #0]
 801b5e0:	1e5a      	subs	r2, r3, #1
 801b5e2:	6022      	str	r2, [r4, #0]
 801b5e4:	f803 5c01 	strb.w	r5, [r3, #-1]
 801b5e8:	6863      	ldr	r3, [r4, #4]
 801b5ea:	3301      	adds	r3, #1
 801b5ec:	6063      	str	r3, [r4, #4]
 801b5ee:	e7e9      	b.n	801b5c4 <_sungetc_r+0xc>
 801b5f0:	4621      	mov	r1, r4
 801b5f2:	f000 fc54 	bl	801be9e <__submore>
 801b5f6:	2800      	cmp	r0, #0
 801b5f8:	d0f1      	beq.n	801b5de <_sungetc_r+0x26>
 801b5fa:	e7e1      	b.n	801b5c0 <_sungetc_r+0x8>
 801b5fc:	6921      	ldr	r1, [r4, #16]
 801b5fe:	6822      	ldr	r2, [r4, #0]
 801b600:	b141      	cbz	r1, 801b614 <_sungetc_r+0x5c>
 801b602:	4291      	cmp	r1, r2
 801b604:	d206      	bcs.n	801b614 <_sungetc_r+0x5c>
 801b606:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 801b60a:	42a9      	cmp	r1, r5
 801b60c:	d102      	bne.n	801b614 <_sungetc_r+0x5c>
 801b60e:	3a01      	subs	r2, #1
 801b610:	6022      	str	r2, [r4, #0]
 801b612:	e7ea      	b.n	801b5ea <_sungetc_r+0x32>
 801b614:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 801b618:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b61c:	6363      	str	r3, [r4, #52]	@ 0x34
 801b61e:	2303      	movs	r3, #3
 801b620:	63a3      	str	r3, [r4, #56]	@ 0x38
 801b622:	4623      	mov	r3, r4
 801b624:	f803 5f46 	strb.w	r5, [r3, #70]!
 801b628:	6023      	str	r3, [r4, #0]
 801b62a:	2301      	movs	r3, #1
 801b62c:	e7de      	b.n	801b5ec <_sungetc_r+0x34>

0801b62e <__ssrefill_r>:
 801b62e:	b510      	push	{r4, lr}
 801b630:	460c      	mov	r4, r1
 801b632:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801b634:	b169      	cbz	r1, 801b652 <__ssrefill_r+0x24>
 801b636:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b63a:	4299      	cmp	r1, r3
 801b63c:	d001      	beq.n	801b642 <__ssrefill_r+0x14>
 801b63e:	f7fe fc95 	bl	8019f6c <_free_r>
 801b642:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801b644:	6063      	str	r3, [r4, #4]
 801b646:	2000      	movs	r0, #0
 801b648:	6360      	str	r0, [r4, #52]	@ 0x34
 801b64a:	b113      	cbz	r3, 801b652 <__ssrefill_r+0x24>
 801b64c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801b64e:	6023      	str	r3, [r4, #0]
 801b650:	bd10      	pop	{r4, pc}
 801b652:	6923      	ldr	r3, [r4, #16]
 801b654:	6023      	str	r3, [r4, #0]
 801b656:	2300      	movs	r3, #0
 801b658:	6063      	str	r3, [r4, #4]
 801b65a:	89a3      	ldrh	r3, [r4, #12]
 801b65c:	f043 0320 	orr.w	r3, r3, #32
 801b660:	81a3      	strh	r3, [r4, #12]
 801b662:	f04f 30ff 	mov.w	r0, #4294967295
 801b666:	e7f3      	b.n	801b650 <__ssrefill_r+0x22>

0801b668 <__ssvfiscanf_r>:
 801b668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b66c:	460c      	mov	r4, r1
 801b66e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 801b672:	2100      	movs	r1, #0
 801b674:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 801b678:	49a5      	ldr	r1, [pc, #660]	@ (801b910 <__ssvfiscanf_r+0x2a8>)
 801b67a:	91a0      	str	r1, [sp, #640]	@ 0x280
 801b67c:	f10d 0804 	add.w	r8, sp, #4
 801b680:	49a4      	ldr	r1, [pc, #656]	@ (801b914 <__ssvfiscanf_r+0x2ac>)
 801b682:	4fa5      	ldr	r7, [pc, #660]	@ (801b918 <__ssvfiscanf_r+0x2b0>)
 801b684:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 801b688:	4606      	mov	r6, r0
 801b68a:	91a1      	str	r1, [sp, #644]	@ 0x284
 801b68c:	9300      	str	r3, [sp, #0]
 801b68e:	7813      	ldrb	r3, [r2, #0]
 801b690:	2b00      	cmp	r3, #0
 801b692:	f000 8158 	beq.w	801b946 <__ssvfiscanf_r+0x2de>
 801b696:	5cf9      	ldrb	r1, [r7, r3]
 801b698:	f011 0108 	ands.w	r1, r1, #8
 801b69c:	f102 0501 	add.w	r5, r2, #1
 801b6a0:	d019      	beq.n	801b6d6 <__ssvfiscanf_r+0x6e>
 801b6a2:	6863      	ldr	r3, [r4, #4]
 801b6a4:	2b00      	cmp	r3, #0
 801b6a6:	dd0f      	ble.n	801b6c8 <__ssvfiscanf_r+0x60>
 801b6a8:	6823      	ldr	r3, [r4, #0]
 801b6aa:	781a      	ldrb	r2, [r3, #0]
 801b6ac:	5cba      	ldrb	r2, [r7, r2]
 801b6ae:	0712      	lsls	r2, r2, #28
 801b6b0:	d401      	bmi.n	801b6b6 <__ssvfiscanf_r+0x4e>
 801b6b2:	462a      	mov	r2, r5
 801b6b4:	e7eb      	b.n	801b68e <__ssvfiscanf_r+0x26>
 801b6b6:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801b6b8:	3201      	adds	r2, #1
 801b6ba:	9245      	str	r2, [sp, #276]	@ 0x114
 801b6bc:	6862      	ldr	r2, [r4, #4]
 801b6be:	3301      	adds	r3, #1
 801b6c0:	3a01      	subs	r2, #1
 801b6c2:	6062      	str	r2, [r4, #4]
 801b6c4:	6023      	str	r3, [r4, #0]
 801b6c6:	e7ec      	b.n	801b6a2 <__ssvfiscanf_r+0x3a>
 801b6c8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801b6ca:	4621      	mov	r1, r4
 801b6cc:	4630      	mov	r0, r6
 801b6ce:	4798      	blx	r3
 801b6d0:	2800      	cmp	r0, #0
 801b6d2:	d0e9      	beq.n	801b6a8 <__ssvfiscanf_r+0x40>
 801b6d4:	e7ed      	b.n	801b6b2 <__ssvfiscanf_r+0x4a>
 801b6d6:	2b25      	cmp	r3, #37	@ 0x25
 801b6d8:	d012      	beq.n	801b700 <__ssvfiscanf_r+0x98>
 801b6da:	4699      	mov	r9, r3
 801b6dc:	6863      	ldr	r3, [r4, #4]
 801b6de:	2b00      	cmp	r3, #0
 801b6e0:	f340 8093 	ble.w	801b80a <__ssvfiscanf_r+0x1a2>
 801b6e4:	6822      	ldr	r2, [r4, #0]
 801b6e6:	7813      	ldrb	r3, [r2, #0]
 801b6e8:	454b      	cmp	r3, r9
 801b6ea:	f040 812c 	bne.w	801b946 <__ssvfiscanf_r+0x2de>
 801b6ee:	6863      	ldr	r3, [r4, #4]
 801b6f0:	3b01      	subs	r3, #1
 801b6f2:	6063      	str	r3, [r4, #4]
 801b6f4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801b6f6:	3201      	adds	r2, #1
 801b6f8:	3301      	adds	r3, #1
 801b6fa:	6022      	str	r2, [r4, #0]
 801b6fc:	9345      	str	r3, [sp, #276]	@ 0x114
 801b6fe:	e7d8      	b.n	801b6b2 <__ssvfiscanf_r+0x4a>
 801b700:	9141      	str	r1, [sp, #260]	@ 0x104
 801b702:	9143      	str	r1, [sp, #268]	@ 0x10c
 801b704:	7853      	ldrb	r3, [r2, #1]
 801b706:	2b2a      	cmp	r3, #42	@ 0x2a
 801b708:	bf02      	ittt	eq
 801b70a:	2310      	moveq	r3, #16
 801b70c:	1c95      	addeq	r5, r2, #2
 801b70e:	9341      	streq	r3, [sp, #260]	@ 0x104
 801b710:	220a      	movs	r2, #10
 801b712:	46a9      	mov	r9, r5
 801b714:	f819 1b01 	ldrb.w	r1, [r9], #1
 801b718:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 801b71c:	2b09      	cmp	r3, #9
 801b71e:	d91e      	bls.n	801b75e <__ssvfiscanf_r+0xf6>
 801b720:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 801b91c <__ssvfiscanf_r+0x2b4>
 801b724:	2203      	movs	r2, #3
 801b726:	4650      	mov	r0, sl
 801b728:	f7e4 fdea 	bl	8000300 <memchr>
 801b72c:	b138      	cbz	r0, 801b73e <__ssvfiscanf_r+0xd6>
 801b72e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801b730:	eba0 000a 	sub.w	r0, r0, sl
 801b734:	2301      	movs	r3, #1
 801b736:	4083      	lsls	r3, r0
 801b738:	4313      	orrs	r3, r2
 801b73a:	9341      	str	r3, [sp, #260]	@ 0x104
 801b73c:	464d      	mov	r5, r9
 801b73e:	f815 3b01 	ldrb.w	r3, [r5], #1
 801b742:	2b78      	cmp	r3, #120	@ 0x78
 801b744:	d806      	bhi.n	801b754 <__ssvfiscanf_r+0xec>
 801b746:	2b57      	cmp	r3, #87	@ 0x57
 801b748:	d810      	bhi.n	801b76c <__ssvfiscanf_r+0x104>
 801b74a:	2b25      	cmp	r3, #37	@ 0x25
 801b74c:	d0c5      	beq.n	801b6da <__ssvfiscanf_r+0x72>
 801b74e:	d857      	bhi.n	801b800 <__ssvfiscanf_r+0x198>
 801b750:	2b00      	cmp	r3, #0
 801b752:	d065      	beq.n	801b820 <__ssvfiscanf_r+0x1b8>
 801b754:	2303      	movs	r3, #3
 801b756:	9347      	str	r3, [sp, #284]	@ 0x11c
 801b758:	230a      	movs	r3, #10
 801b75a:	9342      	str	r3, [sp, #264]	@ 0x108
 801b75c:	e078      	b.n	801b850 <__ssvfiscanf_r+0x1e8>
 801b75e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 801b760:	fb02 1103 	mla	r1, r2, r3, r1
 801b764:	3930      	subs	r1, #48	@ 0x30
 801b766:	9143      	str	r1, [sp, #268]	@ 0x10c
 801b768:	464d      	mov	r5, r9
 801b76a:	e7d2      	b.n	801b712 <__ssvfiscanf_r+0xaa>
 801b76c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 801b770:	2a20      	cmp	r2, #32
 801b772:	d8ef      	bhi.n	801b754 <__ssvfiscanf_r+0xec>
 801b774:	a101      	add	r1, pc, #4	@ (adr r1, 801b77c <__ssvfiscanf_r+0x114>)
 801b776:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801b77a:	bf00      	nop
 801b77c:	0801b82f 	.word	0x0801b82f
 801b780:	0801b755 	.word	0x0801b755
 801b784:	0801b755 	.word	0x0801b755
 801b788:	0801b889 	.word	0x0801b889
 801b78c:	0801b755 	.word	0x0801b755
 801b790:	0801b755 	.word	0x0801b755
 801b794:	0801b755 	.word	0x0801b755
 801b798:	0801b755 	.word	0x0801b755
 801b79c:	0801b755 	.word	0x0801b755
 801b7a0:	0801b755 	.word	0x0801b755
 801b7a4:	0801b755 	.word	0x0801b755
 801b7a8:	0801b89f 	.word	0x0801b89f
 801b7ac:	0801b885 	.word	0x0801b885
 801b7b0:	0801b807 	.word	0x0801b807
 801b7b4:	0801b807 	.word	0x0801b807
 801b7b8:	0801b807 	.word	0x0801b807
 801b7bc:	0801b755 	.word	0x0801b755
 801b7c0:	0801b841 	.word	0x0801b841
 801b7c4:	0801b755 	.word	0x0801b755
 801b7c8:	0801b755 	.word	0x0801b755
 801b7cc:	0801b755 	.word	0x0801b755
 801b7d0:	0801b755 	.word	0x0801b755
 801b7d4:	0801b8af 	.word	0x0801b8af
 801b7d8:	0801b849 	.word	0x0801b849
 801b7dc:	0801b827 	.word	0x0801b827
 801b7e0:	0801b755 	.word	0x0801b755
 801b7e4:	0801b755 	.word	0x0801b755
 801b7e8:	0801b8ab 	.word	0x0801b8ab
 801b7ec:	0801b755 	.word	0x0801b755
 801b7f0:	0801b885 	.word	0x0801b885
 801b7f4:	0801b755 	.word	0x0801b755
 801b7f8:	0801b755 	.word	0x0801b755
 801b7fc:	0801b82f 	.word	0x0801b82f
 801b800:	3b45      	subs	r3, #69	@ 0x45
 801b802:	2b02      	cmp	r3, #2
 801b804:	d8a6      	bhi.n	801b754 <__ssvfiscanf_r+0xec>
 801b806:	2305      	movs	r3, #5
 801b808:	e021      	b.n	801b84e <__ssvfiscanf_r+0x1e6>
 801b80a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801b80c:	4621      	mov	r1, r4
 801b80e:	4630      	mov	r0, r6
 801b810:	4798      	blx	r3
 801b812:	2800      	cmp	r0, #0
 801b814:	f43f af66 	beq.w	801b6e4 <__ssvfiscanf_r+0x7c>
 801b818:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801b81a:	2800      	cmp	r0, #0
 801b81c:	f040 808b 	bne.w	801b936 <__ssvfiscanf_r+0x2ce>
 801b820:	f04f 30ff 	mov.w	r0, #4294967295
 801b824:	e08b      	b.n	801b93e <__ssvfiscanf_r+0x2d6>
 801b826:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801b828:	f042 0220 	orr.w	r2, r2, #32
 801b82c:	9241      	str	r2, [sp, #260]	@ 0x104
 801b82e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801b830:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801b834:	9241      	str	r2, [sp, #260]	@ 0x104
 801b836:	2210      	movs	r2, #16
 801b838:	2b6e      	cmp	r3, #110	@ 0x6e
 801b83a:	9242      	str	r2, [sp, #264]	@ 0x108
 801b83c:	d902      	bls.n	801b844 <__ssvfiscanf_r+0x1dc>
 801b83e:	e005      	b.n	801b84c <__ssvfiscanf_r+0x1e4>
 801b840:	2300      	movs	r3, #0
 801b842:	9342      	str	r3, [sp, #264]	@ 0x108
 801b844:	2303      	movs	r3, #3
 801b846:	e002      	b.n	801b84e <__ssvfiscanf_r+0x1e6>
 801b848:	2308      	movs	r3, #8
 801b84a:	9342      	str	r3, [sp, #264]	@ 0x108
 801b84c:	2304      	movs	r3, #4
 801b84e:	9347      	str	r3, [sp, #284]	@ 0x11c
 801b850:	6863      	ldr	r3, [r4, #4]
 801b852:	2b00      	cmp	r3, #0
 801b854:	dd39      	ble.n	801b8ca <__ssvfiscanf_r+0x262>
 801b856:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801b858:	0659      	lsls	r1, r3, #25
 801b85a:	d404      	bmi.n	801b866 <__ssvfiscanf_r+0x1fe>
 801b85c:	6823      	ldr	r3, [r4, #0]
 801b85e:	781a      	ldrb	r2, [r3, #0]
 801b860:	5cba      	ldrb	r2, [r7, r2]
 801b862:	0712      	lsls	r2, r2, #28
 801b864:	d438      	bmi.n	801b8d8 <__ssvfiscanf_r+0x270>
 801b866:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 801b868:	2b02      	cmp	r3, #2
 801b86a:	dc47      	bgt.n	801b8fc <__ssvfiscanf_r+0x294>
 801b86c:	466b      	mov	r3, sp
 801b86e:	4622      	mov	r2, r4
 801b870:	a941      	add	r1, sp, #260	@ 0x104
 801b872:	4630      	mov	r0, r6
 801b874:	f000 f86c 	bl	801b950 <_scanf_chars>
 801b878:	2801      	cmp	r0, #1
 801b87a:	d064      	beq.n	801b946 <__ssvfiscanf_r+0x2de>
 801b87c:	2802      	cmp	r0, #2
 801b87e:	f47f af18 	bne.w	801b6b2 <__ssvfiscanf_r+0x4a>
 801b882:	e7c9      	b.n	801b818 <__ssvfiscanf_r+0x1b0>
 801b884:	220a      	movs	r2, #10
 801b886:	e7d7      	b.n	801b838 <__ssvfiscanf_r+0x1d0>
 801b888:	4629      	mov	r1, r5
 801b88a:	4640      	mov	r0, r8
 801b88c:	f000 face 	bl	801be2c <__sccl>
 801b890:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801b892:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b896:	9341      	str	r3, [sp, #260]	@ 0x104
 801b898:	4605      	mov	r5, r0
 801b89a:	2301      	movs	r3, #1
 801b89c:	e7d7      	b.n	801b84e <__ssvfiscanf_r+0x1e6>
 801b89e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801b8a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b8a4:	9341      	str	r3, [sp, #260]	@ 0x104
 801b8a6:	2300      	movs	r3, #0
 801b8a8:	e7d1      	b.n	801b84e <__ssvfiscanf_r+0x1e6>
 801b8aa:	2302      	movs	r3, #2
 801b8ac:	e7cf      	b.n	801b84e <__ssvfiscanf_r+0x1e6>
 801b8ae:	9841      	ldr	r0, [sp, #260]	@ 0x104
 801b8b0:	06c3      	lsls	r3, r0, #27
 801b8b2:	f53f aefe 	bmi.w	801b6b2 <__ssvfiscanf_r+0x4a>
 801b8b6:	9b00      	ldr	r3, [sp, #0]
 801b8b8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801b8ba:	1d19      	adds	r1, r3, #4
 801b8bc:	9100      	str	r1, [sp, #0]
 801b8be:	681b      	ldr	r3, [r3, #0]
 801b8c0:	07c0      	lsls	r0, r0, #31
 801b8c2:	bf4c      	ite	mi
 801b8c4:	801a      	strhmi	r2, [r3, #0]
 801b8c6:	601a      	strpl	r2, [r3, #0]
 801b8c8:	e6f3      	b.n	801b6b2 <__ssvfiscanf_r+0x4a>
 801b8ca:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801b8cc:	4621      	mov	r1, r4
 801b8ce:	4630      	mov	r0, r6
 801b8d0:	4798      	blx	r3
 801b8d2:	2800      	cmp	r0, #0
 801b8d4:	d0bf      	beq.n	801b856 <__ssvfiscanf_r+0x1ee>
 801b8d6:	e79f      	b.n	801b818 <__ssvfiscanf_r+0x1b0>
 801b8d8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801b8da:	3201      	adds	r2, #1
 801b8dc:	9245      	str	r2, [sp, #276]	@ 0x114
 801b8de:	6862      	ldr	r2, [r4, #4]
 801b8e0:	3a01      	subs	r2, #1
 801b8e2:	2a00      	cmp	r2, #0
 801b8e4:	6062      	str	r2, [r4, #4]
 801b8e6:	dd02      	ble.n	801b8ee <__ssvfiscanf_r+0x286>
 801b8e8:	3301      	adds	r3, #1
 801b8ea:	6023      	str	r3, [r4, #0]
 801b8ec:	e7b6      	b.n	801b85c <__ssvfiscanf_r+0x1f4>
 801b8ee:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801b8f0:	4621      	mov	r1, r4
 801b8f2:	4630      	mov	r0, r6
 801b8f4:	4798      	blx	r3
 801b8f6:	2800      	cmp	r0, #0
 801b8f8:	d0b0      	beq.n	801b85c <__ssvfiscanf_r+0x1f4>
 801b8fa:	e78d      	b.n	801b818 <__ssvfiscanf_r+0x1b0>
 801b8fc:	2b04      	cmp	r3, #4
 801b8fe:	dc0f      	bgt.n	801b920 <__ssvfiscanf_r+0x2b8>
 801b900:	466b      	mov	r3, sp
 801b902:	4622      	mov	r2, r4
 801b904:	a941      	add	r1, sp, #260	@ 0x104
 801b906:	4630      	mov	r0, r6
 801b908:	f000 f87c 	bl	801ba04 <_scanf_i>
 801b90c:	e7b4      	b.n	801b878 <__ssvfiscanf_r+0x210>
 801b90e:	bf00      	nop
 801b910:	0801b5b9 	.word	0x0801b5b9
 801b914:	0801b62f 	.word	0x0801b62f
 801b918:	0801e909 	.word	0x0801e909
 801b91c:	0801edc6 	.word	0x0801edc6
 801b920:	4b0a      	ldr	r3, [pc, #40]	@ (801b94c <__ssvfiscanf_r+0x2e4>)
 801b922:	2b00      	cmp	r3, #0
 801b924:	f43f aec5 	beq.w	801b6b2 <__ssvfiscanf_r+0x4a>
 801b928:	466b      	mov	r3, sp
 801b92a:	4622      	mov	r2, r4
 801b92c:	a941      	add	r1, sp, #260	@ 0x104
 801b92e:	4630      	mov	r0, r6
 801b930:	f7fc fa32 	bl	8017d98 <_scanf_float>
 801b934:	e7a0      	b.n	801b878 <__ssvfiscanf_r+0x210>
 801b936:	89a3      	ldrh	r3, [r4, #12]
 801b938:	065b      	lsls	r3, r3, #25
 801b93a:	f53f af71 	bmi.w	801b820 <__ssvfiscanf_r+0x1b8>
 801b93e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 801b942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b946:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801b948:	e7f9      	b.n	801b93e <__ssvfiscanf_r+0x2d6>
 801b94a:	bf00      	nop
 801b94c:	08017d99 	.word	0x08017d99

0801b950 <_scanf_chars>:
 801b950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b954:	4615      	mov	r5, r2
 801b956:	688a      	ldr	r2, [r1, #8]
 801b958:	4680      	mov	r8, r0
 801b95a:	460c      	mov	r4, r1
 801b95c:	b932      	cbnz	r2, 801b96c <_scanf_chars+0x1c>
 801b95e:	698a      	ldr	r2, [r1, #24]
 801b960:	2a00      	cmp	r2, #0
 801b962:	bf14      	ite	ne
 801b964:	f04f 32ff 	movne.w	r2, #4294967295
 801b968:	2201      	moveq	r2, #1
 801b96a:	608a      	str	r2, [r1, #8]
 801b96c:	6822      	ldr	r2, [r4, #0]
 801b96e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 801ba00 <_scanf_chars+0xb0>
 801b972:	06d1      	lsls	r1, r2, #27
 801b974:	bf5f      	itttt	pl
 801b976:	681a      	ldrpl	r2, [r3, #0]
 801b978:	1d11      	addpl	r1, r2, #4
 801b97a:	6019      	strpl	r1, [r3, #0]
 801b97c:	6816      	ldrpl	r6, [r2, #0]
 801b97e:	2700      	movs	r7, #0
 801b980:	69a0      	ldr	r0, [r4, #24]
 801b982:	b188      	cbz	r0, 801b9a8 <_scanf_chars+0x58>
 801b984:	2801      	cmp	r0, #1
 801b986:	d107      	bne.n	801b998 <_scanf_chars+0x48>
 801b988:	682b      	ldr	r3, [r5, #0]
 801b98a:	781a      	ldrb	r2, [r3, #0]
 801b98c:	6963      	ldr	r3, [r4, #20]
 801b98e:	5c9b      	ldrb	r3, [r3, r2]
 801b990:	b953      	cbnz	r3, 801b9a8 <_scanf_chars+0x58>
 801b992:	2f00      	cmp	r7, #0
 801b994:	d031      	beq.n	801b9fa <_scanf_chars+0xaa>
 801b996:	e022      	b.n	801b9de <_scanf_chars+0x8e>
 801b998:	2802      	cmp	r0, #2
 801b99a:	d120      	bne.n	801b9de <_scanf_chars+0x8e>
 801b99c:	682b      	ldr	r3, [r5, #0]
 801b99e:	781b      	ldrb	r3, [r3, #0]
 801b9a0:	f819 3003 	ldrb.w	r3, [r9, r3]
 801b9a4:	071b      	lsls	r3, r3, #28
 801b9a6:	d41a      	bmi.n	801b9de <_scanf_chars+0x8e>
 801b9a8:	6823      	ldr	r3, [r4, #0]
 801b9aa:	06da      	lsls	r2, r3, #27
 801b9ac:	bf5e      	ittt	pl
 801b9ae:	682b      	ldrpl	r3, [r5, #0]
 801b9b0:	781b      	ldrbpl	r3, [r3, #0]
 801b9b2:	f806 3b01 	strbpl.w	r3, [r6], #1
 801b9b6:	682a      	ldr	r2, [r5, #0]
 801b9b8:	686b      	ldr	r3, [r5, #4]
 801b9ba:	3201      	adds	r2, #1
 801b9bc:	602a      	str	r2, [r5, #0]
 801b9be:	68a2      	ldr	r2, [r4, #8]
 801b9c0:	3b01      	subs	r3, #1
 801b9c2:	3a01      	subs	r2, #1
 801b9c4:	606b      	str	r3, [r5, #4]
 801b9c6:	3701      	adds	r7, #1
 801b9c8:	60a2      	str	r2, [r4, #8]
 801b9ca:	b142      	cbz	r2, 801b9de <_scanf_chars+0x8e>
 801b9cc:	2b00      	cmp	r3, #0
 801b9ce:	dcd7      	bgt.n	801b980 <_scanf_chars+0x30>
 801b9d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801b9d4:	4629      	mov	r1, r5
 801b9d6:	4640      	mov	r0, r8
 801b9d8:	4798      	blx	r3
 801b9da:	2800      	cmp	r0, #0
 801b9dc:	d0d0      	beq.n	801b980 <_scanf_chars+0x30>
 801b9de:	6823      	ldr	r3, [r4, #0]
 801b9e0:	f013 0310 	ands.w	r3, r3, #16
 801b9e4:	d105      	bne.n	801b9f2 <_scanf_chars+0xa2>
 801b9e6:	68e2      	ldr	r2, [r4, #12]
 801b9e8:	3201      	adds	r2, #1
 801b9ea:	60e2      	str	r2, [r4, #12]
 801b9ec:	69a2      	ldr	r2, [r4, #24]
 801b9ee:	b102      	cbz	r2, 801b9f2 <_scanf_chars+0xa2>
 801b9f0:	7033      	strb	r3, [r6, #0]
 801b9f2:	6923      	ldr	r3, [r4, #16]
 801b9f4:	443b      	add	r3, r7
 801b9f6:	6123      	str	r3, [r4, #16]
 801b9f8:	2000      	movs	r0, #0
 801b9fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b9fe:	bf00      	nop
 801ba00:	0801e909 	.word	0x0801e909

0801ba04 <_scanf_i>:
 801ba04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba08:	4698      	mov	r8, r3
 801ba0a:	4b74      	ldr	r3, [pc, #464]	@ (801bbdc <_scanf_i+0x1d8>)
 801ba0c:	460c      	mov	r4, r1
 801ba0e:	4682      	mov	sl, r0
 801ba10:	4616      	mov	r6, r2
 801ba12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801ba16:	b087      	sub	sp, #28
 801ba18:	ab03      	add	r3, sp, #12
 801ba1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801ba1e:	4b70      	ldr	r3, [pc, #448]	@ (801bbe0 <_scanf_i+0x1dc>)
 801ba20:	69a1      	ldr	r1, [r4, #24]
 801ba22:	4a70      	ldr	r2, [pc, #448]	@ (801bbe4 <_scanf_i+0x1e0>)
 801ba24:	2903      	cmp	r1, #3
 801ba26:	bf08      	it	eq
 801ba28:	461a      	moveq	r2, r3
 801ba2a:	68a3      	ldr	r3, [r4, #8]
 801ba2c:	9201      	str	r2, [sp, #4]
 801ba2e:	1e5a      	subs	r2, r3, #1
 801ba30:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801ba34:	bf88      	it	hi
 801ba36:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801ba3a:	4627      	mov	r7, r4
 801ba3c:	bf82      	ittt	hi
 801ba3e:	eb03 0905 	addhi.w	r9, r3, r5
 801ba42:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801ba46:	60a3      	strhi	r3, [r4, #8]
 801ba48:	f857 3b1c 	ldr.w	r3, [r7], #28
 801ba4c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 801ba50:	bf98      	it	ls
 801ba52:	f04f 0900 	movls.w	r9, #0
 801ba56:	6023      	str	r3, [r4, #0]
 801ba58:	463d      	mov	r5, r7
 801ba5a:	f04f 0b00 	mov.w	fp, #0
 801ba5e:	6831      	ldr	r1, [r6, #0]
 801ba60:	ab03      	add	r3, sp, #12
 801ba62:	7809      	ldrb	r1, [r1, #0]
 801ba64:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801ba68:	2202      	movs	r2, #2
 801ba6a:	f7e4 fc49 	bl	8000300 <memchr>
 801ba6e:	b328      	cbz	r0, 801babc <_scanf_i+0xb8>
 801ba70:	f1bb 0f01 	cmp.w	fp, #1
 801ba74:	d159      	bne.n	801bb2a <_scanf_i+0x126>
 801ba76:	6862      	ldr	r2, [r4, #4]
 801ba78:	b92a      	cbnz	r2, 801ba86 <_scanf_i+0x82>
 801ba7a:	6822      	ldr	r2, [r4, #0]
 801ba7c:	2108      	movs	r1, #8
 801ba7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801ba82:	6061      	str	r1, [r4, #4]
 801ba84:	6022      	str	r2, [r4, #0]
 801ba86:	6822      	ldr	r2, [r4, #0]
 801ba88:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 801ba8c:	6022      	str	r2, [r4, #0]
 801ba8e:	68a2      	ldr	r2, [r4, #8]
 801ba90:	1e51      	subs	r1, r2, #1
 801ba92:	60a1      	str	r1, [r4, #8]
 801ba94:	b192      	cbz	r2, 801babc <_scanf_i+0xb8>
 801ba96:	6832      	ldr	r2, [r6, #0]
 801ba98:	1c51      	adds	r1, r2, #1
 801ba9a:	6031      	str	r1, [r6, #0]
 801ba9c:	7812      	ldrb	r2, [r2, #0]
 801ba9e:	f805 2b01 	strb.w	r2, [r5], #1
 801baa2:	6872      	ldr	r2, [r6, #4]
 801baa4:	3a01      	subs	r2, #1
 801baa6:	2a00      	cmp	r2, #0
 801baa8:	6072      	str	r2, [r6, #4]
 801baaa:	dc07      	bgt.n	801babc <_scanf_i+0xb8>
 801baac:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 801bab0:	4631      	mov	r1, r6
 801bab2:	4650      	mov	r0, sl
 801bab4:	4790      	blx	r2
 801bab6:	2800      	cmp	r0, #0
 801bab8:	f040 8085 	bne.w	801bbc6 <_scanf_i+0x1c2>
 801babc:	f10b 0b01 	add.w	fp, fp, #1
 801bac0:	f1bb 0f03 	cmp.w	fp, #3
 801bac4:	d1cb      	bne.n	801ba5e <_scanf_i+0x5a>
 801bac6:	6863      	ldr	r3, [r4, #4]
 801bac8:	b90b      	cbnz	r3, 801bace <_scanf_i+0xca>
 801baca:	230a      	movs	r3, #10
 801bacc:	6063      	str	r3, [r4, #4]
 801bace:	6863      	ldr	r3, [r4, #4]
 801bad0:	4945      	ldr	r1, [pc, #276]	@ (801bbe8 <_scanf_i+0x1e4>)
 801bad2:	6960      	ldr	r0, [r4, #20]
 801bad4:	1ac9      	subs	r1, r1, r3
 801bad6:	f000 f9a9 	bl	801be2c <__sccl>
 801bada:	f04f 0b00 	mov.w	fp, #0
 801bade:	68a3      	ldr	r3, [r4, #8]
 801bae0:	6822      	ldr	r2, [r4, #0]
 801bae2:	2b00      	cmp	r3, #0
 801bae4:	d03d      	beq.n	801bb62 <_scanf_i+0x15e>
 801bae6:	6831      	ldr	r1, [r6, #0]
 801bae8:	6960      	ldr	r0, [r4, #20]
 801baea:	f891 c000 	ldrb.w	ip, [r1]
 801baee:	f810 000c 	ldrb.w	r0, [r0, ip]
 801baf2:	2800      	cmp	r0, #0
 801baf4:	d035      	beq.n	801bb62 <_scanf_i+0x15e>
 801baf6:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 801bafa:	d124      	bne.n	801bb46 <_scanf_i+0x142>
 801bafc:	0510      	lsls	r0, r2, #20
 801bafe:	d522      	bpl.n	801bb46 <_scanf_i+0x142>
 801bb00:	f10b 0b01 	add.w	fp, fp, #1
 801bb04:	f1b9 0f00 	cmp.w	r9, #0
 801bb08:	d003      	beq.n	801bb12 <_scanf_i+0x10e>
 801bb0a:	3301      	adds	r3, #1
 801bb0c:	f109 39ff 	add.w	r9, r9, #4294967295
 801bb10:	60a3      	str	r3, [r4, #8]
 801bb12:	6873      	ldr	r3, [r6, #4]
 801bb14:	3b01      	subs	r3, #1
 801bb16:	2b00      	cmp	r3, #0
 801bb18:	6073      	str	r3, [r6, #4]
 801bb1a:	dd1b      	ble.n	801bb54 <_scanf_i+0x150>
 801bb1c:	6833      	ldr	r3, [r6, #0]
 801bb1e:	3301      	adds	r3, #1
 801bb20:	6033      	str	r3, [r6, #0]
 801bb22:	68a3      	ldr	r3, [r4, #8]
 801bb24:	3b01      	subs	r3, #1
 801bb26:	60a3      	str	r3, [r4, #8]
 801bb28:	e7d9      	b.n	801bade <_scanf_i+0xda>
 801bb2a:	f1bb 0f02 	cmp.w	fp, #2
 801bb2e:	d1ae      	bne.n	801ba8e <_scanf_i+0x8a>
 801bb30:	6822      	ldr	r2, [r4, #0]
 801bb32:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 801bb36:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801bb3a:	d1bf      	bne.n	801babc <_scanf_i+0xb8>
 801bb3c:	2110      	movs	r1, #16
 801bb3e:	6061      	str	r1, [r4, #4]
 801bb40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801bb44:	e7a2      	b.n	801ba8c <_scanf_i+0x88>
 801bb46:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 801bb4a:	6022      	str	r2, [r4, #0]
 801bb4c:	780b      	ldrb	r3, [r1, #0]
 801bb4e:	f805 3b01 	strb.w	r3, [r5], #1
 801bb52:	e7de      	b.n	801bb12 <_scanf_i+0x10e>
 801bb54:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801bb58:	4631      	mov	r1, r6
 801bb5a:	4650      	mov	r0, sl
 801bb5c:	4798      	blx	r3
 801bb5e:	2800      	cmp	r0, #0
 801bb60:	d0df      	beq.n	801bb22 <_scanf_i+0x11e>
 801bb62:	6823      	ldr	r3, [r4, #0]
 801bb64:	05d9      	lsls	r1, r3, #23
 801bb66:	d50d      	bpl.n	801bb84 <_scanf_i+0x180>
 801bb68:	42bd      	cmp	r5, r7
 801bb6a:	d909      	bls.n	801bb80 <_scanf_i+0x17c>
 801bb6c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801bb70:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801bb74:	4632      	mov	r2, r6
 801bb76:	4650      	mov	r0, sl
 801bb78:	4798      	blx	r3
 801bb7a:	f105 39ff 	add.w	r9, r5, #4294967295
 801bb7e:	464d      	mov	r5, r9
 801bb80:	42bd      	cmp	r5, r7
 801bb82:	d028      	beq.n	801bbd6 <_scanf_i+0x1d2>
 801bb84:	6822      	ldr	r2, [r4, #0]
 801bb86:	f012 0210 	ands.w	r2, r2, #16
 801bb8a:	d113      	bne.n	801bbb4 <_scanf_i+0x1b0>
 801bb8c:	702a      	strb	r2, [r5, #0]
 801bb8e:	6863      	ldr	r3, [r4, #4]
 801bb90:	9e01      	ldr	r6, [sp, #4]
 801bb92:	4639      	mov	r1, r7
 801bb94:	4650      	mov	r0, sl
 801bb96:	47b0      	blx	r6
 801bb98:	f8d8 3000 	ldr.w	r3, [r8]
 801bb9c:	6821      	ldr	r1, [r4, #0]
 801bb9e:	1d1a      	adds	r2, r3, #4
 801bba0:	f8c8 2000 	str.w	r2, [r8]
 801bba4:	f011 0f20 	tst.w	r1, #32
 801bba8:	681b      	ldr	r3, [r3, #0]
 801bbaa:	d00f      	beq.n	801bbcc <_scanf_i+0x1c8>
 801bbac:	6018      	str	r0, [r3, #0]
 801bbae:	68e3      	ldr	r3, [r4, #12]
 801bbb0:	3301      	adds	r3, #1
 801bbb2:	60e3      	str	r3, [r4, #12]
 801bbb4:	6923      	ldr	r3, [r4, #16]
 801bbb6:	1bed      	subs	r5, r5, r7
 801bbb8:	445d      	add	r5, fp
 801bbba:	442b      	add	r3, r5
 801bbbc:	6123      	str	r3, [r4, #16]
 801bbbe:	2000      	movs	r0, #0
 801bbc0:	b007      	add	sp, #28
 801bbc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbc6:	f04f 0b00 	mov.w	fp, #0
 801bbca:	e7ca      	b.n	801bb62 <_scanf_i+0x15e>
 801bbcc:	07ca      	lsls	r2, r1, #31
 801bbce:	bf4c      	ite	mi
 801bbd0:	8018      	strhmi	r0, [r3, #0]
 801bbd2:	6018      	strpl	r0, [r3, #0]
 801bbd4:	e7eb      	b.n	801bbae <_scanf_i+0x1aa>
 801bbd6:	2001      	movs	r0, #1
 801bbd8:	e7f2      	b.n	801bbc0 <_scanf_i+0x1bc>
 801bbda:	bf00      	nop
 801bbdc:	0801e3a8 	.word	0x0801e3a8
 801bbe0:	08017515 	.word	0x08017515
 801bbe4:	0801b2d9 	.word	0x0801b2d9
 801bbe8:	0801ede1 	.word	0x0801ede1

0801bbec <__sflush_r>:
 801bbec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801bbf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bbf4:	0716      	lsls	r6, r2, #28
 801bbf6:	4605      	mov	r5, r0
 801bbf8:	460c      	mov	r4, r1
 801bbfa:	d454      	bmi.n	801bca6 <__sflush_r+0xba>
 801bbfc:	684b      	ldr	r3, [r1, #4]
 801bbfe:	2b00      	cmp	r3, #0
 801bc00:	dc02      	bgt.n	801bc08 <__sflush_r+0x1c>
 801bc02:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801bc04:	2b00      	cmp	r3, #0
 801bc06:	dd48      	ble.n	801bc9a <__sflush_r+0xae>
 801bc08:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801bc0a:	2e00      	cmp	r6, #0
 801bc0c:	d045      	beq.n	801bc9a <__sflush_r+0xae>
 801bc0e:	2300      	movs	r3, #0
 801bc10:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801bc14:	682f      	ldr	r7, [r5, #0]
 801bc16:	6a21      	ldr	r1, [r4, #32]
 801bc18:	602b      	str	r3, [r5, #0]
 801bc1a:	d030      	beq.n	801bc7e <__sflush_r+0x92>
 801bc1c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801bc1e:	89a3      	ldrh	r3, [r4, #12]
 801bc20:	0759      	lsls	r1, r3, #29
 801bc22:	d505      	bpl.n	801bc30 <__sflush_r+0x44>
 801bc24:	6863      	ldr	r3, [r4, #4]
 801bc26:	1ad2      	subs	r2, r2, r3
 801bc28:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801bc2a:	b10b      	cbz	r3, 801bc30 <__sflush_r+0x44>
 801bc2c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801bc2e:	1ad2      	subs	r2, r2, r3
 801bc30:	2300      	movs	r3, #0
 801bc32:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801bc34:	6a21      	ldr	r1, [r4, #32]
 801bc36:	4628      	mov	r0, r5
 801bc38:	47b0      	blx	r6
 801bc3a:	1c43      	adds	r3, r0, #1
 801bc3c:	89a3      	ldrh	r3, [r4, #12]
 801bc3e:	d106      	bne.n	801bc4e <__sflush_r+0x62>
 801bc40:	6829      	ldr	r1, [r5, #0]
 801bc42:	291d      	cmp	r1, #29
 801bc44:	d82b      	bhi.n	801bc9e <__sflush_r+0xb2>
 801bc46:	4a2a      	ldr	r2, [pc, #168]	@ (801bcf0 <__sflush_r+0x104>)
 801bc48:	410a      	asrs	r2, r1
 801bc4a:	07d6      	lsls	r6, r2, #31
 801bc4c:	d427      	bmi.n	801bc9e <__sflush_r+0xb2>
 801bc4e:	2200      	movs	r2, #0
 801bc50:	6062      	str	r2, [r4, #4]
 801bc52:	04d9      	lsls	r1, r3, #19
 801bc54:	6922      	ldr	r2, [r4, #16]
 801bc56:	6022      	str	r2, [r4, #0]
 801bc58:	d504      	bpl.n	801bc64 <__sflush_r+0x78>
 801bc5a:	1c42      	adds	r2, r0, #1
 801bc5c:	d101      	bne.n	801bc62 <__sflush_r+0x76>
 801bc5e:	682b      	ldr	r3, [r5, #0]
 801bc60:	b903      	cbnz	r3, 801bc64 <__sflush_r+0x78>
 801bc62:	6560      	str	r0, [r4, #84]	@ 0x54
 801bc64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801bc66:	602f      	str	r7, [r5, #0]
 801bc68:	b1b9      	cbz	r1, 801bc9a <__sflush_r+0xae>
 801bc6a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801bc6e:	4299      	cmp	r1, r3
 801bc70:	d002      	beq.n	801bc78 <__sflush_r+0x8c>
 801bc72:	4628      	mov	r0, r5
 801bc74:	f7fe f97a 	bl	8019f6c <_free_r>
 801bc78:	2300      	movs	r3, #0
 801bc7a:	6363      	str	r3, [r4, #52]	@ 0x34
 801bc7c:	e00d      	b.n	801bc9a <__sflush_r+0xae>
 801bc7e:	2301      	movs	r3, #1
 801bc80:	4628      	mov	r0, r5
 801bc82:	47b0      	blx	r6
 801bc84:	4602      	mov	r2, r0
 801bc86:	1c50      	adds	r0, r2, #1
 801bc88:	d1c9      	bne.n	801bc1e <__sflush_r+0x32>
 801bc8a:	682b      	ldr	r3, [r5, #0]
 801bc8c:	2b00      	cmp	r3, #0
 801bc8e:	d0c6      	beq.n	801bc1e <__sflush_r+0x32>
 801bc90:	2b1d      	cmp	r3, #29
 801bc92:	d001      	beq.n	801bc98 <__sflush_r+0xac>
 801bc94:	2b16      	cmp	r3, #22
 801bc96:	d11e      	bne.n	801bcd6 <__sflush_r+0xea>
 801bc98:	602f      	str	r7, [r5, #0]
 801bc9a:	2000      	movs	r0, #0
 801bc9c:	e022      	b.n	801bce4 <__sflush_r+0xf8>
 801bc9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bca2:	b21b      	sxth	r3, r3
 801bca4:	e01b      	b.n	801bcde <__sflush_r+0xf2>
 801bca6:	690f      	ldr	r7, [r1, #16]
 801bca8:	2f00      	cmp	r7, #0
 801bcaa:	d0f6      	beq.n	801bc9a <__sflush_r+0xae>
 801bcac:	0793      	lsls	r3, r2, #30
 801bcae:	680e      	ldr	r6, [r1, #0]
 801bcb0:	bf08      	it	eq
 801bcb2:	694b      	ldreq	r3, [r1, #20]
 801bcb4:	600f      	str	r7, [r1, #0]
 801bcb6:	bf18      	it	ne
 801bcb8:	2300      	movne	r3, #0
 801bcba:	eba6 0807 	sub.w	r8, r6, r7
 801bcbe:	608b      	str	r3, [r1, #8]
 801bcc0:	f1b8 0f00 	cmp.w	r8, #0
 801bcc4:	dde9      	ble.n	801bc9a <__sflush_r+0xae>
 801bcc6:	6a21      	ldr	r1, [r4, #32]
 801bcc8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801bcca:	4643      	mov	r3, r8
 801bccc:	463a      	mov	r2, r7
 801bcce:	4628      	mov	r0, r5
 801bcd0:	47b0      	blx	r6
 801bcd2:	2800      	cmp	r0, #0
 801bcd4:	dc08      	bgt.n	801bce8 <__sflush_r+0xfc>
 801bcd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bcda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bcde:	81a3      	strh	r3, [r4, #12]
 801bce0:	f04f 30ff 	mov.w	r0, #4294967295
 801bce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bce8:	4407      	add	r7, r0
 801bcea:	eba8 0800 	sub.w	r8, r8, r0
 801bcee:	e7e7      	b.n	801bcc0 <__sflush_r+0xd4>
 801bcf0:	dfbffffe 	.word	0xdfbffffe

0801bcf4 <_fflush_r>:
 801bcf4:	b538      	push	{r3, r4, r5, lr}
 801bcf6:	690b      	ldr	r3, [r1, #16]
 801bcf8:	4605      	mov	r5, r0
 801bcfa:	460c      	mov	r4, r1
 801bcfc:	b913      	cbnz	r3, 801bd04 <_fflush_r+0x10>
 801bcfe:	2500      	movs	r5, #0
 801bd00:	4628      	mov	r0, r5
 801bd02:	bd38      	pop	{r3, r4, r5, pc}
 801bd04:	b118      	cbz	r0, 801bd0e <_fflush_r+0x1a>
 801bd06:	6a03      	ldr	r3, [r0, #32]
 801bd08:	b90b      	cbnz	r3, 801bd0e <_fflush_r+0x1a>
 801bd0a:	f7fc fadd 	bl	80182c8 <__sinit>
 801bd0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bd12:	2b00      	cmp	r3, #0
 801bd14:	d0f3      	beq.n	801bcfe <_fflush_r+0xa>
 801bd16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801bd18:	07d0      	lsls	r0, r2, #31
 801bd1a:	d404      	bmi.n	801bd26 <_fflush_r+0x32>
 801bd1c:	0599      	lsls	r1, r3, #22
 801bd1e:	d402      	bmi.n	801bd26 <_fflush_r+0x32>
 801bd20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801bd22:	f7fd faf5 	bl	8019310 <__retarget_lock_acquire_recursive>
 801bd26:	4628      	mov	r0, r5
 801bd28:	4621      	mov	r1, r4
 801bd2a:	f7ff ff5f 	bl	801bbec <__sflush_r>
 801bd2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801bd30:	07da      	lsls	r2, r3, #31
 801bd32:	4605      	mov	r5, r0
 801bd34:	d4e4      	bmi.n	801bd00 <_fflush_r+0xc>
 801bd36:	89a3      	ldrh	r3, [r4, #12]
 801bd38:	059b      	lsls	r3, r3, #22
 801bd3a:	d4e1      	bmi.n	801bd00 <_fflush_r+0xc>
 801bd3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801bd3e:	f7fd fae9 	bl	8019314 <__retarget_lock_release_recursive>
 801bd42:	e7dd      	b.n	801bd00 <_fflush_r+0xc>

0801bd44 <fiprintf>:
 801bd44:	b40e      	push	{r1, r2, r3}
 801bd46:	b503      	push	{r0, r1, lr}
 801bd48:	4601      	mov	r1, r0
 801bd4a:	ab03      	add	r3, sp, #12
 801bd4c:	4805      	ldr	r0, [pc, #20]	@ (801bd64 <fiprintf+0x20>)
 801bd4e:	f853 2b04 	ldr.w	r2, [r3], #4
 801bd52:	6800      	ldr	r0, [r0, #0]
 801bd54:	9301      	str	r3, [sp, #4]
 801bd56:	f000 f9ad 	bl	801c0b4 <_vfiprintf_r>
 801bd5a:	b002      	add	sp, #8
 801bd5c:	f85d eb04 	ldr.w	lr, [sp], #4
 801bd60:	b003      	add	sp, #12
 801bd62:	4770      	bx	lr
 801bd64:	24000430 	.word	0x24000430

0801bd68 <__swhatbuf_r>:
 801bd68:	b570      	push	{r4, r5, r6, lr}
 801bd6a:	460c      	mov	r4, r1
 801bd6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bd70:	2900      	cmp	r1, #0
 801bd72:	b096      	sub	sp, #88	@ 0x58
 801bd74:	4615      	mov	r5, r2
 801bd76:	461e      	mov	r6, r3
 801bd78:	da0d      	bge.n	801bd96 <__swhatbuf_r+0x2e>
 801bd7a:	89a3      	ldrh	r3, [r4, #12]
 801bd7c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801bd80:	f04f 0100 	mov.w	r1, #0
 801bd84:	bf14      	ite	ne
 801bd86:	2340      	movne	r3, #64	@ 0x40
 801bd88:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801bd8c:	2000      	movs	r0, #0
 801bd8e:	6031      	str	r1, [r6, #0]
 801bd90:	602b      	str	r3, [r5, #0]
 801bd92:	b016      	add	sp, #88	@ 0x58
 801bd94:	bd70      	pop	{r4, r5, r6, pc}
 801bd96:	466a      	mov	r2, sp
 801bd98:	f000 f8da 	bl	801bf50 <_fstat_r>
 801bd9c:	2800      	cmp	r0, #0
 801bd9e:	dbec      	blt.n	801bd7a <__swhatbuf_r+0x12>
 801bda0:	9901      	ldr	r1, [sp, #4]
 801bda2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801bda6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801bdaa:	4259      	negs	r1, r3
 801bdac:	4159      	adcs	r1, r3
 801bdae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801bdb2:	e7eb      	b.n	801bd8c <__swhatbuf_r+0x24>

0801bdb4 <__smakebuf_r>:
 801bdb4:	898b      	ldrh	r3, [r1, #12]
 801bdb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801bdb8:	079d      	lsls	r5, r3, #30
 801bdba:	4606      	mov	r6, r0
 801bdbc:	460c      	mov	r4, r1
 801bdbe:	d507      	bpl.n	801bdd0 <__smakebuf_r+0x1c>
 801bdc0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801bdc4:	6023      	str	r3, [r4, #0]
 801bdc6:	6123      	str	r3, [r4, #16]
 801bdc8:	2301      	movs	r3, #1
 801bdca:	6163      	str	r3, [r4, #20]
 801bdcc:	b003      	add	sp, #12
 801bdce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bdd0:	ab01      	add	r3, sp, #4
 801bdd2:	466a      	mov	r2, sp
 801bdd4:	f7ff ffc8 	bl	801bd68 <__swhatbuf_r>
 801bdd8:	9f00      	ldr	r7, [sp, #0]
 801bdda:	4605      	mov	r5, r0
 801bddc:	4639      	mov	r1, r7
 801bdde:	4630      	mov	r0, r6
 801bde0:	f7fe fcbe 	bl	801a760 <_malloc_r>
 801bde4:	b948      	cbnz	r0, 801bdfa <__smakebuf_r+0x46>
 801bde6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bdea:	059a      	lsls	r2, r3, #22
 801bdec:	d4ee      	bmi.n	801bdcc <__smakebuf_r+0x18>
 801bdee:	f023 0303 	bic.w	r3, r3, #3
 801bdf2:	f043 0302 	orr.w	r3, r3, #2
 801bdf6:	81a3      	strh	r3, [r4, #12]
 801bdf8:	e7e2      	b.n	801bdc0 <__smakebuf_r+0xc>
 801bdfa:	89a3      	ldrh	r3, [r4, #12]
 801bdfc:	6020      	str	r0, [r4, #0]
 801bdfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801be02:	81a3      	strh	r3, [r4, #12]
 801be04:	9b01      	ldr	r3, [sp, #4]
 801be06:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801be0a:	b15b      	cbz	r3, 801be24 <__smakebuf_r+0x70>
 801be0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801be10:	4630      	mov	r0, r6
 801be12:	f000 f8af 	bl	801bf74 <_isatty_r>
 801be16:	b128      	cbz	r0, 801be24 <__smakebuf_r+0x70>
 801be18:	89a3      	ldrh	r3, [r4, #12]
 801be1a:	f023 0303 	bic.w	r3, r3, #3
 801be1e:	f043 0301 	orr.w	r3, r3, #1
 801be22:	81a3      	strh	r3, [r4, #12]
 801be24:	89a3      	ldrh	r3, [r4, #12]
 801be26:	431d      	orrs	r5, r3
 801be28:	81a5      	strh	r5, [r4, #12]
 801be2a:	e7cf      	b.n	801bdcc <__smakebuf_r+0x18>

0801be2c <__sccl>:
 801be2c:	b570      	push	{r4, r5, r6, lr}
 801be2e:	780b      	ldrb	r3, [r1, #0]
 801be30:	4604      	mov	r4, r0
 801be32:	2b5e      	cmp	r3, #94	@ 0x5e
 801be34:	bf0b      	itete	eq
 801be36:	784b      	ldrbeq	r3, [r1, #1]
 801be38:	1c4a      	addne	r2, r1, #1
 801be3a:	1c8a      	addeq	r2, r1, #2
 801be3c:	2100      	movne	r1, #0
 801be3e:	bf08      	it	eq
 801be40:	2101      	moveq	r1, #1
 801be42:	3801      	subs	r0, #1
 801be44:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 801be48:	f800 1f01 	strb.w	r1, [r0, #1]!
 801be4c:	42a8      	cmp	r0, r5
 801be4e:	d1fb      	bne.n	801be48 <__sccl+0x1c>
 801be50:	b90b      	cbnz	r3, 801be56 <__sccl+0x2a>
 801be52:	1e50      	subs	r0, r2, #1
 801be54:	bd70      	pop	{r4, r5, r6, pc}
 801be56:	f081 0101 	eor.w	r1, r1, #1
 801be5a:	54e1      	strb	r1, [r4, r3]
 801be5c:	4610      	mov	r0, r2
 801be5e:	4602      	mov	r2, r0
 801be60:	f812 5b01 	ldrb.w	r5, [r2], #1
 801be64:	2d2d      	cmp	r5, #45	@ 0x2d
 801be66:	d005      	beq.n	801be74 <__sccl+0x48>
 801be68:	2d5d      	cmp	r5, #93	@ 0x5d
 801be6a:	d016      	beq.n	801be9a <__sccl+0x6e>
 801be6c:	2d00      	cmp	r5, #0
 801be6e:	d0f1      	beq.n	801be54 <__sccl+0x28>
 801be70:	462b      	mov	r3, r5
 801be72:	e7f2      	b.n	801be5a <__sccl+0x2e>
 801be74:	7846      	ldrb	r6, [r0, #1]
 801be76:	2e5d      	cmp	r6, #93	@ 0x5d
 801be78:	d0fa      	beq.n	801be70 <__sccl+0x44>
 801be7a:	42b3      	cmp	r3, r6
 801be7c:	dcf8      	bgt.n	801be70 <__sccl+0x44>
 801be7e:	3002      	adds	r0, #2
 801be80:	461a      	mov	r2, r3
 801be82:	3201      	adds	r2, #1
 801be84:	4296      	cmp	r6, r2
 801be86:	54a1      	strb	r1, [r4, r2]
 801be88:	dcfb      	bgt.n	801be82 <__sccl+0x56>
 801be8a:	1af2      	subs	r2, r6, r3
 801be8c:	3a01      	subs	r2, #1
 801be8e:	1c5d      	adds	r5, r3, #1
 801be90:	42b3      	cmp	r3, r6
 801be92:	bfa8      	it	ge
 801be94:	2200      	movge	r2, #0
 801be96:	18ab      	adds	r3, r5, r2
 801be98:	e7e1      	b.n	801be5e <__sccl+0x32>
 801be9a:	4610      	mov	r0, r2
 801be9c:	e7da      	b.n	801be54 <__sccl+0x28>

0801be9e <__submore>:
 801be9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bea2:	460c      	mov	r4, r1
 801bea4:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801bea6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801beaa:	4299      	cmp	r1, r3
 801beac:	d11d      	bne.n	801beea <__submore+0x4c>
 801beae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801beb2:	f7fe fc55 	bl	801a760 <_malloc_r>
 801beb6:	b918      	cbnz	r0, 801bec0 <__submore+0x22>
 801beb8:	f04f 30ff 	mov.w	r0, #4294967295
 801bebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bec0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801bec4:	63a3      	str	r3, [r4, #56]	@ 0x38
 801bec6:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 801beca:	6360      	str	r0, [r4, #52]	@ 0x34
 801becc:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 801bed0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801bed4:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 801bed8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801bedc:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 801bee0:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 801bee4:	6020      	str	r0, [r4, #0]
 801bee6:	2000      	movs	r0, #0
 801bee8:	e7e8      	b.n	801bebc <__submore+0x1e>
 801beea:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 801beec:	0077      	lsls	r7, r6, #1
 801beee:	463a      	mov	r2, r7
 801bef0:	f000 f888 	bl	801c004 <_realloc_r>
 801bef4:	4605      	mov	r5, r0
 801bef6:	2800      	cmp	r0, #0
 801bef8:	d0de      	beq.n	801beb8 <__submore+0x1a>
 801befa:	eb00 0806 	add.w	r8, r0, r6
 801befe:	4601      	mov	r1, r0
 801bf00:	4632      	mov	r2, r6
 801bf02:	4640      	mov	r0, r8
 801bf04:	f7fd fa0f 	bl	8019326 <memcpy>
 801bf08:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 801bf0c:	f8c4 8000 	str.w	r8, [r4]
 801bf10:	e7e9      	b.n	801bee6 <__submore+0x48>

0801bf12 <memmove>:
 801bf12:	4288      	cmp	r0, r1
 801bf14:	b510      	push	{r4, lr}
 801bf16:	eb01 0402 	add.w	r4, r1, r2
 801bf1a:	d902      	bls.n	801bf22 <memmove+0x10>
 801bf1c:	4284      	cmp	r4, r0
 801bf1e:	4623      	mov	r3, r4
 801bf20:	d807      	bhi.n	801bf32 <memmove+0x20>
 801bf22:	1e43      	subs	r3, r0, #1
 801bf24:	42a1      	cmp	r1, r4
 801bf26:	d008      	beq.n	801bf3a <memmove+0x28>
 801bf28:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bf2c:	f803 2f01 	strb.w	r2, [r3, #1]!
 801bf30:	e7f8      	b.n	801bf24 <memmove+0x12>
 801bf32:	4402      	add	r2, r0
 801bf34:	4601      	mov	r1, r0
 801bf36:	428a      	cmp	r2, r1
 801bf38:	d100      	bne.n	801bf3c <memmove+0x2a>
 801bf3a:	bd10      	pop	{r4, pc}
 801bf3c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801bf40:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801bf44:	e7f7      	b.n	801bf36 <memmove+0x24>
	...

0801bf48 <__gettzinfo>:
 801bf48:	4800      	ldr	r0, [pc, #0]	@ (801bf4c <__gettzinfo+0x4>)
 801bf4a:	4770      	bx	lr
 801bf4c:	24000480 	.word	0x24000480

0801bf50 <_fstat_r>:
 801bf50:	b538      	push	{r3, r4, r5, lr}
 801bf52:	4d07      	ldr	r5, [pc, #28]	@ (801bf70 <_fstat_r+0x20>)
 801bf54:	2300      	movs	r3, #0
 801bf56:	4604      	mov	r4, r0
 801bf58:	4608      	mov	r0, r1
 801bf5a:	4611      	mov	r1, r2
 801bf5c:	602b      	str	r3, [r5, #0]
 801bf5e:	f7e9 f909 	bl	8005174 <_fstat>
 801bf62:	1c43      	adds	r3, r0, #1
 801bf64:	d102      	bne.n	801bf6c <_fstat_r+0x1c>
 801bf66:	682b      	ldr	r3, [r5, #0]
 801bf68:	b103      	cbz	r3, 801bf6c <_fstat_r+0x1c>
 801bf6a:	6023      	str	r3, [r4, #0]
 801bf6c:	bd38      	pop	{r3, r4, r5, pc}
 801bf6e:	bf00      	nop
 801bf70:	24003e84 	.word	0x24003e84

0801bf74 <_isatty_r>:
 801bf74:	b538      	push	{r3, r4, r5, lr}
 801bf76:	4d06      	ldr	r5, [pc, #24]	@ (801bf90 <_isatty_r+0x1c>)
 801bf78:	2300      	movs	r3, #0
 801bf7a:	4604      	mov	r4, r0
 801bf7c:	4608      	mov	r0, r1
 801bf7e:	602b      	str	r3, [r5, #0]
 801bf80:	f7e9 f908 	bl	8005194 <_isatty>
 801bf84:	1c43      	adds	r3, r0, #1
 801bf86:	d102      	bne.n	801bf8e <_isatty_r+0x1a>
 801bf88:	682b      	ldr	r3, [r5, #0]
 801bf8a:	b103      	cbz	r3, 801bf8e <_isatty_r+0x1a>
 801bf8c:	6023      	str	r3, [r4, #0]
 801bf8e:	bd38      	pop	{r3, r4, r5, pc}
 801bf90:	24003e84 	.word	0x24003e84

0801bf94 <_sbrk_r>:
 801bf94:	b538      	push	{r3, r4, r5, lr}
 801bf96:	4d06      	ldr	r5, [pc, #24]	@ (801bfb0 <_sbrk_r+0x1c>)
 801bf98:	2300      	movs	r3, #0
 801bf9a:	4604      	mov	r4, r0
 801bf9c:	4608      	mov	r0, r1
 801bf9e:	602b      	str	r3, [r5, #0]
 801bfa0:	f7e9 f910 	bl	80051c4 <_sbrk>
 801bfa4:	1c43      	adds	r3, r0, #1
 801bfa6:	d102      	bne.n	801bfae <_sbrk_r+0x1a>
 801bfa8:	682b      	ldr	r3, [r5, #0]
 801bfaa:	b103      	cbz	r3, 801bfae <_sbrk_r+0x1a>
 801bfac:	6023      	str	r3, [r4, #0]
 801bfae:	bd38      	pop	{r3, r4, r5, pc}
 801bfb0:	24003e84 	.word	0x24003e84

0801bfb4 <abort>:
 801bfb4:	b508      	push	{r3, lr}
 801bfb6:	2006      	movs	r0, #6
 801bfb8:	f000 f9bc 	bl	801c334 <raise>
 801bfbc:	2001      	movs	r0, #1
 801bfbe:	f7e9 f889 	bl	80050d4 <_exit>

0801bfc2 <_calloc_r>:
 801bfc2:	b570      	push	{r4, r5, r6, lr}
 801bfc4:	fba1 5402 	umull	r5, r4, r1, r2
 801bfc8:	b93c      	cbnz	r4, 801bfda <_calloc_r+0x18>
 801bfca:	4629      	mov	r1, r5
 801bfcc:	f7fe fbc8 	bl	801a760 <_malloc_r>
 801bfd0:	4606      	mov	r6, r0
 801bfd2:	b928      	cbnz	r0, 801bfe0 <_calloc_r+0x1e>
 801bfd4:	2600      	movs	r6, #0
 801bfd6:	4630      	mov	r0, r6
 801bfd8:	bd70      	pop	{r4, r5, r6, pc}
 801bfda:	220c      	movs	r2, #12
 801bfdc:	6002      	str	r2, [r0, #0]
 801bfde:	e7f9      	b.n	801bfd4 <_calloc_r+0x12>
 801bfe0:	462a      	mov	r2, r5
 801bfe2:	4621      	mov	r1, r4
 801bfe4:	f7fc fb6c 	bl	80186c0 <memset>
 801bfe8:	e7f5      	b.n	801bfd6 <_calloc_r+0x14>
	...

0801bfec <__env_lock>:
 801bfec:	4801      	ldr	r0, [pc, #4]	@ (801bff4 <__env_lock+0x8>)
 801bfee:	f7fd b98f 	b.w	8019310 <__retarget_lock_acquire_recursive>
 801bff2:	bf00      	nop
 801bff4:	24003e89 	.word	0x24003e89

0801bff8 <__env_unlock>:
 801bff8:	4801      	ldr	r0, [pc, #4]	@ (801c000 <__env_unlock+0x8>)
 801bffa:	f7fd b98b 	b.w	8019314 <__retarget_lock_release_recursive>
 801bffe:	bf00      	nop
 801c000:	24003e89 	.word	0x24003e89

0801c004 <_realloc_r>:
 801c004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c008:	4680      	mov	r8, r0
 801c00a:	4615      	mov	r5, r2
 801c00c:	460c      	mov	r4, r1
 801c00e:	b921      	cbnz	r1, 801c01a <_realloc_r+0x16>
 801c010:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c014:	4611      	mov	r1, r2
 801c016:	f7fe bba3 	b.w	801a760 <_malloc_r>
 801c01a:	b92a      	cbnz	r2, 801c028 <_realloc_r+0x24>
 801c01c:	f7fd ffa6 	bl	8019f6c <_free_r>
 801c020:	2400      	movs	r4, #0
 801c022:	4620      	mov	r0, r4
 801c024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c028:	f000 f9a0 	bl	801c36c <_malloc_usable_size_r>
 801c02c:	4285      	cmp	r5, r0
 801c02e:	4606      	mov	r6, r0
 801c030:	d802      	bhi.n	801c038 <_realloc_r+0x34>
 801c032:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801c036:	d8f4      	bhi.n	801c022 <_realloc_r+0x1e>
 801c038:	4629      	mov	r1, r5
 801c03a:	4640      	mov	r0, r8
 801c03c:	f7fe fb90 	bl	801a760 <_malloc_r>
 801c040:	4607      	mov	r7, r0
 801c042:	2800      	cmp	r0, #0
 801c044:	d0ec      	beq.n	801c020 <_realloc_r+0x1c>
 801c046:	42b5      	cmp	r5, r6
 801c048:	462a      	mov	r2, r5
 801c04a:	4621      	mov	r1, r4
 801c04c:	bf28      	it	cs
 801c04e:	4632      	movcs	r2, r6
 801c050:	f7fd f969 	bl	8019326 <memcpy>
 801c054:	4621      	mov	r1, r4
 801c056:	4640      	mov	r0, r8
 801c058:	f7fd ff88 	bl	8019f6c <_free_r>
 801c05c:	463c      	mov	r4, r7
 801c05e:	e7e0      	b.n	801c022 <_realloc_r+0x1e>

0801c060 <__sfputc_r>:
 801c060:	6893      	ldr	r3, [r2, #8]
 801c062:	3b01      	subs	r3, #1
 801c064:	2b00      	cmp	r3, #0
 801c066:	b410      	push	{r4}
 801c068:	6093      	str	r3, [r2, #8]
 801c06a:	da08      	bge.n	801c07e <__sfputc_r+0x1e>
 801c06c:	6994      	ldr	r4, [r2, #24]
 801c06e:	42a3      	cmp	r3, r4
 801c070:	db01      	blt.n	801c076 <__sfputc_r+0x16>
 801c072:	290a      	cmp	r1, #10
 801c074:	d103      	bne.n	801c07e <__sfputc_r+0x1e>
 801c076:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c07a:	f7fc ba7c 	b.w	8018576 <__swbuf_r>
 801c07e:	6813      	ldr	r3, [r2, #0]
 801c080:	1c58      	adds	r0, r3, #1
 801c082:	6010      	str	r0, [r2, #0]
 801c084:	7019      	strb	r1, [r3, #0]
 801c086:	4608      	mov	r0, r1
 801c088:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c08c:	4770      	bx	lr

0801c08e <__sfputs_r>:
 801c08e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c090:	4606      	mov	r6, r0
 801c092:	460f      	mov	r7, r1
 801c094:	4614      	mov	r4, r2
 801c096:	18d5      	adds	r5, r2, r3
 801c098:	42ac      	cmp	r4, r5
 801c09a:	d101      	bne.n	801c0a0 <__sfputs_r+0x12>
 801c09c:	2000      	movs	r0, #0
 801c09e:	e007      	b.n	801c0b0 <__sfputs_r+0x22>
 801c0a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c0a4:	463a      	mov	r2, r7
 801c0a6:	4630      	mov	r0, r6
 801c0a8:	f7ff ffda 	bl	801c060 <__sfputc_r>
 801c0ac:	1c43      	adds	r3, r0, #1
 801c0ae:	d1f3      	bne.n	801c098 <__sfputs_r+0xa>
 801c0b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c0b4 <_vfiprintf_r>:
 801c0b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0b8:	460d      	mov	r5, r1
 801c0ba:	b09d      	sub	sp, #116	@ 0x74
 801c0bc:	4614      	mov	r4, r2
 801c0be:	4698      	mov	r8, r3
 801c0c0:	4606      	mov	r6, r0
 801c0c2:	b118      	cbz	r0, 801c0cc <_vfiprintf_r+0x18>
 801c0c4:	6a03      	ldr	r3, [r0, #32]
 801c0c6:	b90b      	cbnz	r3, 801c0cc <_vfiprintf_r+0x18>
 801c0c8:	f7fc f8fe 	bl	80182c8 <__sinit>
 801c0cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c0ce:	07d9      	lsls	r1, r3, #31
 801c0d0:	d405      	bmi.n	801c0de <_vfiprintf_r+0x2a>
 801c0d2:	89ab      	ldrh	r3, [r5, #12]
 801c0d4:	059a      	lsls	r2, r3, #22
 801c0d6:	d402      	bmi.n	801c0de <_vfiprintf_r+0x2a>
 801c0d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c0da:	f7fd f919 	bl	8019310 <__retarget_lock_acquire_recursive>
 801c0de:	89ab      	ldrh	r3, [r5, #12]
 801c0e0:	071b      	lsls	r3, r3, #28
 801c0e2:	d501      	bpl.n	801c0e8 <_vfiprintf_r+0x34>
 801c0e4:	692b      	ldr	r3, [r5, #16]
 801c0e6:	b99b      	cbnz	r3, 801c110 <_vfiprintf_r+0x5c>
 801c0e8:	4629      	mov	r1, r5
 801c0ea:	4630      	mov	r0, r6
 801c0ec:	f7fc fa82 	bl	80185f4 <__swsetup_r>
 801c0f0:	b170      	cbz	r0, 801c110 <_vfiprintf_r+0x5c>
 801c0f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c0f4:	07dc      	lsls	r4, r3, #31
 801c0f6:	d504      	bpl.n	801c102 <_vfiprintf_r+0x4e>
 801c0f8:	f04f 30ff 	mov.w	r0, #4294967295
 801c0fc:	b01d      	add	sp, #116	@ 0x74
 801c0fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c102:	89ab      	ldrh	r3, [r5, #12]
 801c104:	0598      	lsls	r0, r3, #22
 801c106:	d4f7      	bmi.n	801c0f8 <_vfiprintf_r+0x44>
 801c108:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c10a:	f7fd f903 	bl	8019314 <__retarget_lock_release_recursive>
 801c10e:	e7f3      	b.n	801c0f8 <_vfiprintf_r+0x44>
 801c110:	2300      	movs	r3, #0
 801c112:	9309      	str	r3, [sp, #36]	@ 0x24
 801c114:	2320      	movs	r3, #32
 801c116:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801c11a:	f8cd 800c 	str.w	r8, [sp, #12]
 801c11e:	2330      	movs	r3, #48	@ 0x30
 801c120:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801c2d0 <_vfiprintf_r+0x21c>
 801c124:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c128:	f04f 0901 	mov.w	r9, #1
 801c12c:	4623      	mov	r3, r4
 801c12e:	469a      	mov	sl, r3
 801c130:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c134:	b10a      	cbz	r2, 801c13a <_vfiprintf_r+0x86>
 801c136:	2a25      	cmp	r2, #37	@ 0x25
 801c138:	d1f9      	bne.n	801c12e <_vfiprintf_r+0x7a>
 801c13a:	ebba 0b04 	subs.w	fp, sl, r4
 801c13e:	d00b      	beq.n	801c158 <_vfiprintf_r+0xa4>
 801c140:	465b      	mov	r3, fp
 801c142:	4622      	mov	r2, r4
 801c144:	4629      	mov	r1, r5
 801c146:	4630      	mov	r0, r6
 801c148:	f7ff ffa1 	bl	801c08e <__sfputs_r>
 801c14c:	3001      	adds	r0, #1
 801c14e:	f000 80a7 	beq.w	801c2a0 <_vfiprintf_r+0x1ec>
 801c152:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c154:	445a      	add	r2, fp
 801c156:	9209      	str	r2, [sp, #36]	@ 0x24
 801c158:	f89a 3000 	ldrb.w	r3, [sl]
 801c15c:	2b00      	cmp	r3, #0
 801c15e:	f000 809f 	beq.w	801c2a0 <_vfiprintf_r+0x1ec>
 801c162:	2300      	movs	r3, #0
 801c164:	f04f 32ff 	mov.w	r2, #4294967295
 801c168:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c16c:	f10a 0a01 	add.w	sl, sl, #1
 801c170:	9304      	str	r3, [sp, #16]
 801c172:	9307      	str	r3, [sp, #28]
 801c174:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801c178:	931a      	str	r3, [sp, #104]	@ 0x68
 801c17a:	4654      	mov	r4, sl
 801c17c:	2205      	movs	r2, #5
 801c17e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c182:	4853      	ldr	r0, [pc, #332]	@ (801c2d0 <_vfiprintf_r+0x21c>)
 801c184:	f7e4 f8bc 	bl	8000300 <memchr>
 801c188:	9a04      	ldr	r2, [sp, #16]
 801c18a:	b9d8      	cbnz	r0, 801c1c4 <_vfiprintf_r+0x110>
 801c18c:	06d1      	lsls	r1, r2, #27
 801c18e:	bf44      	itt	mi
 801c190:	2320      	movmi	r3, #32
 801c192:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c196:	0713      	lsls	r3, r2, #28
 801c198:	bf44      	itt	mi
 801c19a:	232b      	movmi	r3, #43	@ 0x2b
 801c19c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c1a0:	f89a 3000 	ldrb.w	r3, [sl]
 801c1a4:	2b2a      	cmp	r3, #42	@ 0x2a
 801c1a6:	d015      	beq.n	801c1d4 <_vfiprintf_r+0x120>
 801c1a8:	9a07      	ldr	r2, [sp, #28]
 801c1aa:	4654      	mov	r4, sl
 801c1ac:	2000      	movs	r0, #0
 801c1ae:	f04f 0c0a 	mov.w	ip, #10
 801c1b2:	4621      	mov	r1, r4
 801c1b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c1b8:	3b30      	subs	r3, #48	@ 0x30
 801c1ba:	2b09      	cmp	r3, #9
 801c1bc:	d94b      	bls.n	801c256 <_vfiprintf_r+0x1a2>
 801c1be:	b1b0      	cbz	r0, 801c1ee <_vfiprintf_r+0x13a>
 801c1c0:	9207      	str	r2, [sp, #28]
 801c1c2:	e014      	b.n	801c1ee <_vfiprintf_r+0x13a>
 801c1c4:	eba0 0308 	sub.w	r3, r0, r8
 801c1c8:	fa09 f303 	lsl.w	r3, r9, r3
 801c1cc:	4313      	orrs	r3, r2
 801c1ce:	9304      	str	r3, [sp, #16]
 801c1d0:	46a2      	mov	sl, r4
 801c1d2:	e7d2      	b.n	801c17a <_vfiprintf_r+0xc6>
 801c1d4:	9b03      	ldr	r3, [sp, #12]
 801c1d6:	1d19      	adds	r1, r3, #4
 801c1d8:	681b      	ldr	r3, [r3, #0]
 801c1da:	9103      	str	r1, [sp, #12]
 801c1dc:	2b00      	cmp	r3, #0
 801c1de:	bfbb      	ittet	lt
 801c1e0:	425b      	neglt	r3, r3
 801c1e2:	f042 0202 	orrlt.w	r2, r2, #2
 801c1e6:	9307      	strge	r3, [sp, #28]
 801c1e8:	9307      	strlt	r3, [sp, #28]
 801c1ea:	bfb8      	it	lt
 801c1ec:	9204      	strlt	r2, [sp, #16]
 801c1ee:	7823      	ldrb	r3, [r4, #0]
 801c1f0:	2b2e      	cmp	r3, #46	@ 0x2e
 801c1f2:	d10a      	bne.n	801c20a <_vfiprintf_r+0x156>
 801c1f4:	7863      	ldrb	r3, [r4, #1]
 801c1f6:	2b2a      	cmp	r3, #42	@ 0x2a
 801c1f8:	d132      	bne.n	801c260 <_vfiprintf_r+0x1ac>
 801c1fa:	9b03      	ldr	r3, [sp, #12]
 801c1fc:	1d1a      	adds	r2, r3, #4
 801c1fe:	681b      	ldr	r3, [r3, #0]
 801c200:	9203      	str	r2, [sp, #12]
 801c202:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801c206:	3402      	adds	r4, #2
 801c208:	9305      	str	r3, [sp, #20]
 801c20a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801c2e0 <_vfiprintf_r+0x22c>
 801c20e:	7821      	ldrb	r1, [r4, #0]
 801c210:	2203      	movs	r2, #3
 801c212:	4650      	mov	r0, sl
 801c214:	f7e4 f874 	bl	8000300 <memchr>
 801c218:	b138      	cbz	r0, 801c22a <_vfiprintf_r+0x176>
 801c21a:	9b04      	ldr	r3, [sp, #16]
 801c21c:	eba0 000a 	sub.w	r0, r0, sl
 801c220:	2240      	movs	r2, #64	@ 0x40
 801c222:	4082      	lsls	r2, r0
 801c224:	4313      	orrs	r3, r2
 801c226:	3401      	adds	r4, #1
 801c228:	9304      	str	r3, [sp, #16]
 801c22a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c22e:	4829      	ldr	r0, [pc, #164]	@ (801c2d4 <_vfiprintf_r+0x220>)
 801c230:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801c234:	2206      	movs	r2, #6
 801c236:	f7e4 f863 	bl	8000300 <memchr>
 801c23a:	2800      	cmp	r0, #0
 801c23c:	d03f      	beq.n	801c2be <_vfiprintf_r+0x20a>
 801c23e:	4b26      	ldr	r3, [pc, #152]	@ (801c2d8 <_vfiprintf_r+0x224>)
 801c240:	bb1b      	cbnz	r3, 801c28a <_vfiprintf_r+0x1d6>
 801c242:	9b03      	ldr	r3, [sp, #12]
 801c244:	3307      	adds	r3, #7
 801c246:	f023 0307 	bic.w	r3, r3, #7
 801c24a:	3308      	adds	r3, #8
 801c24c:	9303      	str	r3, [sp, #12]
 801c24e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c250:	443b      	add	r3, r7
 801c252:	9309      	str	r3, [sp, #36]	@ 0x24
 801c254:	e76a      	b.n	801c12c <_vfiprintf_r+0x78>
 801c256:	fb0c 3202 	mla	r2, ip, r2, r3
 801c25a:	460c      	mov	r4, r1
 801c25c:	2001      	movs	r0, #1
 801c25e:	e7a8      	b.n	801c1b2 <_vfiprintf_r+0xfe>
 801c260:	2300      	movs	r3, #0
 801c262:	3401      	adds	r4, #1
 801c264:	9305      	str	r3, [sp, #20]
 801c266:	4619      	mov	r1, r3
 801c268:	f04f 0c0a 	mov.w	ip, #10
 801c26c:	4620      	mov	r0, r4
 801c26e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c272:	3a30      	subs	r2, #48	@ 0x30
 801c274:	2a09      	cmp	r2, #9
 801c276:	d903      	bls.n	801c280 <_vfiprintf_r+0x1cc>
 801c278:	2b00      	cmp	r3, #0
 801c27a:	d0c6      	beq.n	801c20a <_vfiprintf_r+0x156>
 801c27c:	9105      	str	r1, [sp, #20]
 801c27e:	e7c4      	b.n	801c20a <_vfiprintf_r+0x156>
 801c280:	fb0c 2101 	mla	r1, ip, r1, r2
 801c284:	4604      	mov	r4, r0
 801c286:	2301      	movs	r3, #1
 801c288:	e7f0      	b.n	801c26c <_vfiprintf_r+0x1b8>
 801c28a:	ab03      	add	r3, sp, #12
 801c28c:	9300      	str	r3, [sp, #0]
 801c28e:	462a      	mov	r2, r5
 801c290:	4b12      	ldr	r3, [pc, #72]	@ (801c2dc <_vfiprintf_r+0x228>)
 801c292:	a904      	add	r1, sp, #16
 801c294:	4630      	mov	r0, r6
 801c296:	f7fb f9d7 	bl	8017648 <_printf_float>
 801c29a:	4607      	mov	r7, r0
 801c29c:	1c78      	adds	r0, r7, #1
 801c29e:	d1d6      	bne.n	801c24e <_vfiprintf_r+0x19a>
 801c2a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c2a2:	07d9      	lsls	r1, r3, #31
 801c2a4:	d405      	bmi.n	801c2b2 <_vfiprintf_r+0x1fe>
 801c2a6:	89ab      	ldrh	r3, [r5, #12]
 801c2a8:	059a      	lsls	r2, r3, #22
 801c2aa:	d402      	bmi.n	801c2b2 <_vfiprintf_r+0x1fe>
 801c2ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c2ae:	f7fd f831 	bl	8019314 <__retarget_lock_release_recursive>
 801c2b2:	89ab      	ldrh	r3, [r5, #12]
 801c2b4:	065b      	lsls	r3, r3, #25
 801c2b6:	f53f af1f 	bmi.w	801c0f8 <_vfiprintf_r+0x44>
 801c2ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c2bc:	e71e      	b.n	801c0fc <_vfiprintf_r+0x48>
 801c2be:	ab03      	add	r3, sp, #12
 801c2c0:	9300      	str	r3, [sp, #0]
 801c2c2:	462a      	mov	r2, r5
 801c2c4:	4b05      	ldr	r3, [pc, #20]	@ (801c2dc <_vfiprintf_r+0x228>)
 801c2c6:	a904      	add	r1, sp, #16
 801c2c8:	4630      	mov	r0, r6
 801c2ca:	f7fb fc45 	bl	8017b58 <_printf_i>
 801c2ce:	e7e4      	b.n	801c29a <_vfiprintf_r+0x1e6>
 801c2d0:	0801edc0 	.word	0x0801edc0
 801c2d4:	0801edca 	.word	0x0801edca
 801c2d8:	08017649 	.word	0x08017649
 801c2dc:	0801c08f 	.word	0x0801c08f
 801c2e0:	0801edc6 	.word	0x0801edc6

0801c2e4 <_raise_r>:
 801c2e4:	291f      	cmp	r1, #31
 801c2e6:	b538      	push	{r3, r4, r5, lr}
 801c2e8:	4605      	mov	r5, r0
 801c2ea:	460c      	mov	r4, r1
 801c2ec:	d904      	bls.n	801c2f8 <_raise_r+0x14>
 801c2ee:	2316      	movs	r3, #22
 801c2f0:	6003      	str	r3, [r0, #0]
 801c2f2:	f04f 30ff 	mov.w	r0, #4294967295
 801c2f6:	bd38      	pop	{r3, r4, r5, pc}
 801c2f8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801c2fa:	b112      	cbz	r2, 801c302 <_raise_r+0x1e>
 801c2fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c300:	b94b      	cbnz	r3, 801c316 <_raise_r+0x32>
 801c302:	4628      	mov	r0, r5
 801c304:	f000 f830 	bl	801c368 <_getpid_r>
 801c308:	4622      	mov	r2, r4
 801c30a:	4601      	mov	r1, r0
 801c30c:	4628      	mov	r0, r5
 801c30e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c312:	f000 b817 	b.w	801c344 <_kill_r>
 801c316:	2b01      	cmp	r3, #1
 801c318:	d00a      	beq.n	801c330 <_raise_r+0x4c>
 801c31a:	1c59      	adds	r1, r3, #1
 801c31c:	d103      	bne.n	801c326 <_raise_r+0x42>
 801c31e:	2316      	movs	r3, #22
 801c320:	6003      	str	r3, [r0, #0]
 801c322:	2001      	movs	r0, #1
 801c324:	e7e7      	b.n	801c2f6 <_raise_r+0x12>
 801c326:	2100      	movs	r1, #0
 801c328:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801c32c:	4620      	mov	r0, r4
 801c32e:	4798      	blx	r3
 801c330:	2000      	movs	r0, #0
 801c332:	e7e0      	b.n	801c2f6 <_raise_r+0x12>

0801c334 <raise>:
 801c334:	4b02      	ldr	r3, [pc, #8]	@ (801c340 <raise+0xc>)
 801c336:	4601      	mov	r1, r0
 801c338:	6818      	ldr	r0, [r3, #0]
 801c33a:	f7ff bfd3 	b.w	801c2e4 <_raise_r>
 801c33e:	bf00      	nop
 801c340:	24000430 	.word	0x24000430

0801c344 <_kill_r>:
 801c344:	b538      	push	{r3, r4, r5, lr}
 801c346:	4d07      	ldr	r5, [pc, #28]	@ (801c364 <_kill_r+0x20>)
 801c348:	2300      	movs	r3, #0
 801c34a:	4604      	mov	r4, r0
 801c34c:	4608      	mov	r0, r1
 801c34e:	4611      	mov	r1, r2
 801c350:	602b      	str	r3, [r5, #0]
 801c352:	f7e8 feaf 	bl	80050b4 <_kill>
 801c356:	1c43      	adds	r3, r0, #1
 801c358:	d102      	bne.n	801c360 <_kill_r+0x1c>
 801c35a:	682b      	ldr	r3, [r5, #0]
 801c35c:	b103      	cbz	r3, 801c360 <_kill_r+0x1c>
 801c35e:	6023      	str	r3, [r4, #0]
 801c360:	bd38      	pop	{r3, r4, r5, pc}
 801c362:	bf00      	nop
 801c364:	24003e84 	.word	0x24003e84

0801c368 <_getpid_r>:
 801c368:	f7e8 be9c 	b.w	80050a4 <_getpid>

0801c36c <_malloc_usable_size_r>:
 801c36c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c370:	1f18      	subs	r0, r3, #4
 801c372:	2b00      	cmp	r3, #0
 801c374:	bfbc      	itt	lt
 801c376:	580b      	ldrlt	r3, [r1, r0]
 801c378:	18c0      	addlt	r0, r0, r3
 801c37a:	4770      	bx	lr

0801c37c <_init>:
 801c37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c37e:	bf00      	nop
 801c380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c382:	bc08      	pop	{r3}
 801c384:	469e      	mov	lr, r3
 801c386:	4770      	bx	lr

0801c388 <_fini>:
 801c388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c38a:	bf00      	nop
 801c38c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c38e:	bc08      	pop	{r3}
 801c390:	469e      	mov	lr, r3
 801c392:	4770      	bx	lr
